*/**** START OF SPECIFICATIONS ****************************************
*                                                                     *
*                                                                     *
*01* MACRO NAME:  ATRQUERY                            -2006/03/19-<8> *
*                                                                     *
*                                                                     *
*01* DESCRIPTIVE NAME:  Obtain RRS/MVS Information                    *
*                                                                     *
*01* PROPRIETARY STATEMENT:                                           *
*                                                                     *
*     LICENSED MATERIALS - PROPERTY OF IBM                            *
*     5694-A01 COPYRIGHT IBM CORP. 1997, 2006                         *
*                                                                     *
* STATUS= HBB7730                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*01* FUNCTION:                                                        *
*                                                                     *
*                                                                     *
*      DESCRIPTION                                                    *
*                                                                     *
*      The ATRQUERY macro allows callers to:                          *
*                                                                     *
*                                                                     *
*      o   Retrieve information about resource managers that are      *
*          involved with RRS/MVS processing.                          *
*                                                                     *
*      o   Retrieve information about units of recovery (URs).        *
*                                                                     *
*                                                                     *
*                                                                     *
*01* EXTERNAL CLASSIFICATION:  GUPI                                   *
*                                                                     *
*01* END OF EXTERNAL CLASSIFICATION:                                  *
*                                                                     *
*01* ENVIRONMENT:                                                     *
*                                                                     *
*                                                                     *
*      Dispatchable unit mode: Task mode.                             *
*                                                                     *
*      Minimum authorization: Problem or Supervisor state.  Any PSW   *
*                        key.                                         *
*                                                                     *
*                        If your installation uses the RACF component *
*                        of the OS/390 Security Server to control     *
*                        access to RRS/MVS information, ATRQUERY      *
*                        requires READ access to the                  *
*                        MVSADMIN.RRS.COMMANDS resource in the        *
*                        FACILITY class.                              *
*                                                                     *
*      AMODE:            31-bit.                                      *
*                                                                     *
*      ASC mode:         Primary.                                     *
*                                                                     *
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               *
*                                                                     *
*      Interrupt status: Enabled for I/O and external interrupts.     *
*                                                                     *
*      Locks:            No locks held.                               *
*                                                                     *
*      Control parameters: Control parameters must be in the primary  *
*                        address space.                               *
*                                                                     *
*                                                                     *
*                                                                     *
*01* PROGRAMMING REQUIREMENTS:                                        *
*                                                                     *
*    ATRQUERY callers must include the following mapping macros:      *
*                                                                     *
*                                                                     *
*    o   ATRFZQRY                                                     *
*                                                                     *
*    o   CVT                                                          *
*                                                                     *
*    o   IHAECVT                                                      *
*                                                                     *
*                                                                     *
*                                                                     *
*    To use the ATR_* constants referenced in the keyword             *
*    descriptions, ATRQUERY callers must include the ATRRASM mapping  *
*    macro.                                                           *
*                                                                     *
*01* RESTRICTIONS:                                                    *
*    None.                                                            *
*                                                                     *
*01* INPUT REGISTER INFORMATION:                                      *
*                                                                     *
*    Before issuing the ATRQUERY macro, the caller does not have to   *
*    place any information into any register unless using it in       *
*    register notation for a particular parameter, or using it as a   *
*    base register.                                                   *
*                                                                     *
*01* OUTPUT REGISTER INFORMATION:                                     *
*                                                                     *
*    When control returns to the caller, the GPRs contain:            *
*                                                                     *
*                                                                     *
*    REGISTER  CONTENTS                                               *
*                                                                     *
*    0         Contains the reason code                               *
*                                                                     *
*    1-13      Unchanged                                              *
*                                                                     *
*    14        Used as a work register by the system.                 *
*                                                                     *
*    15        Contains the return code                               *
*                                                                     *
*                                                                     *
*                                                                     *
*    Some callers depend on register contents remaining the same      *
*    before and after issuing a service.  If the system changes the   *
*    contents of registers on which the caller depends, the caller    *
*    must save them before issuing the service, and restore them      *
*    after the system returns control.                                *
*                                                                     *
*01* PERFORMANCE IMPLICATIONS:                                        *
*                                                                     *
*    None.                                                            *
*                                                                     *
*01* SYNTAX:                                                          *
*                                                                     *
*ÄxlabelÜ  ATRQUERY     REQUEST=RMINFO                                *
*                    ]    Ä,RMNAME= xrmname]NONE Ü                    *
*                    ]    Ä,GNAME= xgname]CURRENT_GNAME Ü             *
*                    ]    Ä,SYSNAME= xsysname]CURRENT_SYSNAME Ü       *
*                    ]    Ä,METADATA=NOÜ                              *
*                    ]    Ä,METADATA=YESÜ                             *
*                      ,REQUEST=WMINFO                                *
*                    ]    Ä,WMNAME= xwmname]NONE Ü                    *
*                    ]    Ä,GNAME= xgname]CURRENT_GNAME Ü             *
*                    ]    Ä,SYSNAME= xsysname]CURRENT_SYSNAME Ü       *
*                      ,REQUEST=SYSINFO                               *
*                    ]    Ä,GNAME= xgname]CURRENT_GNAME Ü             *
*                    ]    Ä,SYSNAME= xsysname]CURRENT_SYSNAME Ü       *
*                      ,REQUEST=URINFO                                *
*                         Ä,DEFURONLY= xdefuronly]NO                  *
*                          ,EXCLMASK                                  *
*                                    = xexclmask]ATR_NOEXCLUSION_MASK *
*                                     Ü                               *
*                         Ä,ASID= xasid]0 Ü                           *
*                         Ä,URID= xurid]0                             *
*                          ,URIDSTR= xuridstr]0 Ü                     *
*                         Ä,SURID= xsurid]0                           *
*                          ,SURIDSTR= xsuridstr]0 Ü                   *
*                         Ä,URTYPE= xurtype]ATR_NOFILTER Ü            *
*                         Ä,URSTATE                                   *
*                        ]          = xurstate]ATR_NOFILTER           *
*                          ,URSTMASK                                  *
*                                    = xurstmask]00000000000000000000 *
*                                    000000000000 Ü                   *
*                         Ä,LUWID= xluwid]0                           *
*                          ,LUWIDSTR= xluwidstr]0 Ü                   *
*                         Ä,TID= xtid]0 Ü                             *
*                         Ä,TIDHIGH= xtidhigh]ATR_HIGH_TID_VALUE Ü    *
*                         Ä,TIDLOW= xtidlow]ATR_LOW_TID_VALUE Ü       *
*                         Ä,GTID= xgtid]0                             *
*                          ,GTIDSTR= xgtidstr]0 Ü                     *
*                         Ä,XID= xxid]0 Ü                             *
*                         Ä,XIDFORMATID= xxidformatid]0 Ü             *
*                         Ä,XIDGTRIDSTR= xxidgtridstr]0 Ü             *
*                         Ä,XIDBQUALSTR= xxidbqualstr]0 Ü             *
*                         Ä,RMNAME= xrmname]NONE Ü                    *
*                         Ä,WMNAME= xwmname]NONE Ü                    *
*                         Ä,TODBEG= xtodbeg]0 Ü                       *
*                         Ä,TODEND= xtodend]0 Ü                       *
*                         Ä,CURDUR= xcurdur]0 Ü                       *
*                         Ä,EXINFOMASK                                *
*                                      = xexinfomask]ATR_NOXINFO_MASK *
*                                       Ü                             *
*                         Ä,GNAME= xgname]CURRENT_GNAME Ü             *
*                         Ä,SYSNAME= xsysname]CURRENT_SYSNAME Ü       *
*                         Ä,SORTTAB= xsorttab]0                       *
*                              ,SORTNUM=xsortnumÜ                     *
*                      ,AREAADDR=xareaaddr                            *
*                     Ä,AREAALET= xareaalet]0 Ü                       *
*                     Ä,AREAOPT=BYADDRÜ                               *
*                     Ä,AREAOPT=BYOFFSETÜ                             *
*                      ,AREALEN=xarealen                              *
*                      ,COUNT=xcount                                  *
*                     Ä,RCTABLE= xrctable]0                           *
*                          ,RCNUM=xrcnumÜ                             *
*                     Ä,RETCODE=xretcodeÜ                             *
*                     Ä,RSNCODE=xrsncodeÜ                             *
*                     Ä,PLISTVER= xplistver]IMPLIED_VERSION Ü         *
*                     Ä,MF=SÜ                                         *
*                     Ä,MF=(L,xmfctrl ,xmfattr]0D )Ü                  *
*                     Ä,MF=(M,xmfctrl ,COMPLETE]NOCHECK )Ü            *
*                     Ä,MF=(E,xmfctrl ,COMPLETE]NOCHECK )Ü            *
*                                                                     *
*                                                                     *
*      Where:                                                         *
*                                                                     *
*                                                                     *
*      ÄxlabelÜ                                                       *
*          is an optional symbol, starting in column 1, that is the   *
*          name on the ATRQUERY macro invocation.  The name must      *
*          conform to the rules for an ordinary assembler language    *
*          symbol.                                                    *
*          DEFAULT: No name.                                          *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*      REQUEST= RMINFO]WMINFO]SYSINFO]URINFO                          *
*          is a required keyword input that specifies the requested   *
*          ATRQUERY function.                                         *
*                                                                     *
*          You must provide a storage area for the returned           *
*          information.  The AREAADDR and AREALEN parameters define   *
*          the storage area.  If the storage area is not large enough *
*          to hold all the information to be returned, a warning      *
*          return code is set, along with a reason code to identify   *
*          the problem.  The number of entries is returned in the     *
*          COUNT field.                                               *
*                                                                     *
*                                                                     *
*          REQUEST=RMINFO                                             *
*              Retrieves information about resource managers that are *
*              involved with RRS/MVS processing.  The information     *
*              includes resource managers which are:                  *
*                                                                     *
*                                                                     *
*              o   Currently active with RRS on any systems in the    *
*                  sysplex and which match all of the specified       *
*                  filters.                                           *
*                                                                     *
*              o   Currently not active with RRS on any system but    *
*                  was last active on any system in the sysplex and   *
*                  which match all of the specified filters.          *
*                                                                     *
*                                                                     *
*                                                                     *
*              NOTE:  A resource manager that is currently active     *
*              with RRS/MVS is a resource manager that has exits set  *
*              with RRS.                                              *
*                                                                     *
*              When you specify REQUEST=RMINFO, DSECT ATRFZRM in      *
*              mapping macro ATRFZQRY maps the storage area.          *
*                                                                     *
*                                                                     *
*              ÄRMNAME= xrmname]NONE Ü                                *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 32 character input that   *
*                  contains the resource manager name.  The character *
*                  string may include wildcard characters, where '*'  *
*                  represents any string, whose length is zero or     *
*                  more characters, and '?' represents a position     *
*                  which may contain any single character.            *
*                                                                     *
*                  When you specify RMNAME, the system uses the       *
*                  specified value as a filter on the returned        *
*                  information, returning only information about the  *
*                  resource managers which match the pattern you      *
*                  specify for this and any other filters.            *
*                  DEFAULT: NONE When you omit RMNAME, the system     *
*                  returns information about all resource managers,   *
*                  if they are currently active on the current system *
*                  or were once active on the current system but are  *
*                  not currently active.                              *
*                                                                     *
*              ÄGNAME= xgname]CURRENT_GNAME Ü                         *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 8 character input that    *
*                  contains the RRS logging group name.  The          *
*                  character string may include wildcard characters,  *
*                  where '*' represents any string, whose length is   *
*                  zero or more characters, and '?' represents a      *
*                  position which may contain any single character.   *
*                                                                     *
*                  When you specify GNAME, the system uses the        *
*                  specified value as a filter on the returned        *
*                  information, returning only information about the  *
*                  resource managers which match the pattern you      *
*                  specified for this and any other additional        *
*                  filters.                                           *
*                  DEFAULT: CURRENT_GNAME When you omit GNAME, the    *
*                  system uses the current systems RRS logging group  *
*                  name as a filter on the information returned.  To  *
*                  obtain information for all systems in the sysplex, *
*                  specify an asterisk (*) for both GNAME and         *
*                  SYSNAME.                                           *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄSYSNAME= xsysname]CURRENT_SYSNAME Ü                   *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 8 character input that    *
*                  contains the system name. The character string may *
*                  include wildcard characters, where '*' represents  *
*                  any string, whose length is zero or more           *
*                  characters, and '?' represents a position which    *
*                  may contain any single character.                  *
*                                                                     *
*                  When you specify SYSNAME, the system uses the      *
*                  specified value as a filter on the returned        *
*                  information, returning only information about the  *
*                  resource managers which match the pattern you      *
*                  specified for this and any other additional        *
*                  filters.                                           *
*                  DEFAULT: CURRENT_SYSNAME When you omit SYSNAME,    *
*                  the system uses the current systems system name as *
*                  a filter on the information returned.  To obtain   *
*                  information for all systems in the sysplex,        *
*                  specify an asterisk (*) for both GNAME and         *
*                  SYSNAME.                                           *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄMETADATA= NO]YES Ü                                    *
*                  is an optional keyword input that indicates that   *
*                  if the resource manager has stored Meta Data, it   *
*                  will be returned as part of the resource manager's *
*                  information.                                       *
*                  DEFAULT: NO                                        *
*                                                                     *
*                                                                     *
*                  ÄMETADATA=NOÜ                                      *
*                      indicates that metadata, even if available, is *
*                      NOT to be returned.                            *
*                                                                     *
*                  ÄMETADATA=YESÜ                                     *
*                      indicates that metadata, if available is to be *
*                      returned.                                      *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*          REQUEST=WMINFO                                             *
*              Retrieves information about work managers that are     *
*              involved with RRS/MVS processing.  The information     *
*              includes work managers which:                          *
*                                                                     *
*                                                                     *
*              o   Own contexts that have incomplete units of         *
*                  recovery on any systems in the sysplex and match   *
*                  all of the specified filters.                      *
*                                                                     *
*              o   Own or owned contexts that have incomplete units   *
*                  of recovery which are currently not active with    *
*                  RRS on any system in the sysplex and which match   *
*                  all of the specified filters.                      *
*                                                                     *
*                                                                     *
*                                                                     *
*              NOTE:  If a native context has an incomplete unit of   *
*              recovery, the work manager name reported by RRS is the *
*              concatenation of the following strings:                *
*                                                                     *
*                                                                     *
*              o   System Name                                        *
*                                                                     *
*              o   Period (.)                                         *
*                                                                     *
*              o   Job Name                                           *
*                                                                     *
*              o   Period (.)                                         *
*                                                                     *
*              o   ASID (in readable EBCDIC)                          *
*                                                                     *
*              o   Blanks padded to 32 bytes.                         *
*                                                                     *
*                                                                     *
*                                                                     *
*              When you specify REQUEST=WMINFO, DSECT ATRFZWM in      *
*              mapping macro ATRFZQRY maps the storage area.          *
*                                                                     *
*                                                                     *
*              ÄWMNAME= xwmname]NONE Ü                                *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 32 character input that   *
*                  contains the work manager name.  The character     *
*                  string may include wildcard characters, where '*'  *
*                  represents any string whose length is zero or more *
*                  characters, and '?' represents a position which    *
*                  may contain any single character.                  *
*                                                                     *
*                  When you specify WMNAME, the system returns        *
*                  information about the work managers which match    *
*                  the pattern you specify, if they are identified as *
*                  the work manager of any currently incomplete units *
*                  of recovery either currently active on this system *
*                  or were last active on this system.                *
*                  DEFAULT: NONE When you omit WMNAME, the system     *
*                  returns information about all work managers, if    *
*                  they are identified as the work manager of any     *
*                  currently incomplete units of recovery either      *
*                  currently active on this system or were last       *
*                  active on this system.                             *
*                                                                     *
*              ÄGNAME= xgname]CURRENT_GNAME Ü                         *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 8 character input that    *
*                  contains the RRS logging group name.  The          *
*                  character string may include wildcard characters,  *
*                  where '*' represents any string, whose length is   *
*                  zero or more characters, and '?' represents a      *
*                  position which may contain any single character.   *
*                                                                     *
*                  When you specify GNAME, the system uses the        *
*                  specified value as a filter on the returned        *
*                  information, returning only information about the  *
*                  resource managers which match the pattern you      *
*                  specified for this and any other additional        *
*                  filters.                                           *
*                  DEFAULT: CURRENT_GNAME When you omit GNAME, the    *
*                  system uses the current systems RRS logging group  *
*                  name as a filter on the information returned.  To  *
*                  obtain information for all systems in the sysplex, *
*                  specify an asterisk (*) for both GNAME and         *
*                  SYSNAME.                                           *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄSYSNAME= xsysname]CURRENT_SYSNAME Ü                   *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 8 character input that    *
*                  contains the system name. The character string may *
*                  include wildcard characters, where '*' represents  *
*                  any string, whose length is zero or more           *
*                  characters, and '?' represents a position which    *
*                  may contain any single character.                  *
*                                                                     *
*                  When you specify SYSNAME, the system uses the      *
*                  specified value as a filter on the returned        *
*                  information, returning only information about the  *
*                  resource managers which match the pattern you      *
*                  specified for this and any other additional        *
*                  filters.                                           *
*                  DEFAULT: CURRENT_SYSNAME When you omit SYSNAME,    *
*                  the system uses the current systems system name as *
*                  a filter on the information returned.  To obtain   *
*                  information for all systems in the sysplex,        *
*                  specify an asterisk (*) for both GNAME and         *
*                  SYSNAME.                                           *
*                                                                     *
*                                                                     *
*                                                                     *
*          REQUEST=SYSINFO                                            *
*              Retrieves RRS-related information for systems in the   *
*              sysplex.                                               *
*                                                                     *
*              When you specify REQUEST=SYSINFO, DSECT ATRFZSI in     *
*              mapping macro ATRFZQRY maps the storage area.          *
*                                                                     *
*                                                                     *
*              ÄGNAME= xgname]CURRENT_GNAME Ü                         *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 8 character input that    *
*                  contains the RRS logging group name.  The          *
*                  character string may include wildcard characters,  *
*                  where '*' represents any string, whose length is   *
*                  zero or more characters, and '?' represents a      *
*                  position which may contain any single character.   *
*                                                                     *
*                  When you specify GNAME, the system uses the        *
*                  specified value as a filter on the returned        *
*                  information, returning only information about the  *
*                  systems which match the pattern you specified for  *
*                  this and any other additional filters.             *
*                  DEFAULT: CURRENT_GNAME When you omit GNAME, the    *
*                  system uses the current systems RRS logging group  *
*                  name as a filter on the information returned.  To  *
*                  obtain information for all systems in the sysplex, *
*                  specify an asterisk (*) for both GNAME and         *
*                  SYSNAME.                                           *
*                                                                     *
*              ÄSYSNAME= xsysname]CURRENT_SYSNAME Ü                   *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 8 character input that    *
*                  contains the system name. The character string may *
*                  include wildcard characters, where '*' represents  *
*                  any string, whose length is zero or more           *
*                  characters, and '?' represents a position which    *
*                  may contain any single character.                  *
*                                                                     *
*                  When you specify SYSNAME, the system uses the      *
*                  specified value as a filter on the returned        *
*                  information, returning only information about the  *
*                  systems which match the pattern you specified for  *
*                  this and any other additional filters.             *
*                  DEFAULT: CURRENT_SYSNAME When you omit SYSNAME,    *
*                  the system uses the current systems system name as *
*                  a filter on the information returned.  To obtain   *
*                  information for all systems in the sysplex,        *
*                  specify an asterisk (*) for both GNAME and         *
*                  SYSNAME.                                           *
*                                                                     *
*                                                                     *
*                                                                     *
*          REQUEST=URINFO                                             *
*              Retrieves information about units of recovery (URs)    *
*              that are active on any system in the sysplex and which *
*              match all of the specified filters.                    *
*                                                                     *
*              When you specify REQUEST=URINFO, DSECTs ATRFZUR and    *
*              ATRFZURI in mapping macro ATRFZQRY map the storage     *
*              area.                                                  *
*                                                                     *
*                                                                     *
*              The following is a set of mutually exclusive keys.     *
*              This set is optional; only one key may be specified.   *
*                                                                     *
*                                                                     *
*              ÄDEFURONLY= xdefuronly]NO                              *
*                  belongs to a set of mutually exclusive keys. It is *
*                  the name (RS-type), or address in register         *
*                  (2)-(12), of an optional 3 character input that    *
*                  contains a 3 character string to determine if only *
*                  the URs that are marked deferred should be         *
*                  returned.                                          *
*                                                                     *
*                                                                     *
*                  o   'NO ' - All URs will be returned, included     *
*                      those marked deferred.                         *
*                                                                     *
*                  o   'YES' - Only URs that have been marked         *
*                      deferred will be returned.                     *
*                                                                     *
*                                                                     *
*                  DEFAULT: NO                                        *
*                                                                     *
*              EXCLMASK= xexclmask]ATR_NOEXCLUSION_MASK Ü             *
*                  belongs to a set of mutually exclusive keys. It is *
*                  the name (RS-type), or address in register         *
*                  (2)-(12), of an optional 32 bit input identifying  *
*                  one or more conditions that identify URs to be     *
*                  excluded from the returned information:            *
*                                                                     *
*                  The following bit constants can be used to create  *
*                  the fullword bit mask:                             *
*                                                                     *
*                                                                     *
*                  ATR_NOEXCLUSION_MASK        (X'00000000')          *
*                            No exclusion conditions will be used to  *
*                            filter the returned information.         *
*                                                                     *
*                  ATR_UR_IN_RESTART_LOG_MASK   (X'80000000')         *
*                            URs that are read from the Restart log   *
*                            are to be excluded from the returned     *
*                            information.                             *
*                                                                     *
*                  ATR_FAILED_INTEREST_MASK     (X'40000000')         *
*                            URs that contain interests that are      *
*                            failed interests are to be excluded from *
*                            the returned information.                *
*                                                                     *
*                  ATR_NONDEFERRED_UR_MASK      (X'20000000')         *
*                            URs that are not deferred from an RRS    *
*                            server task are to be excluded from the  *
*                            returned information.  This              *
*                            specification is equivalent to           *
*                            specifying DEFURONLY keyword.            *
*                                                                     *
*                  ATR_CASCADED_UR_MASK   (X'10000000')               *
*                            URs that are cascaded URs in a cascaded  *
*                            UR family are to be excluded from the    *
*                            returned information.                    *
*                                                                     *
*                  ATR_GLOBAL_UR_MASK           (X'04000000')         *
*                            Units of recovery in any global          *
*                            transaction mode will be excluded from   *
*                            the returned information.  (Both Global  *
*                            and Hybrid-Global units of recovery are  *
*                            excluded.)                               *
*                                                                     *
*                  ATR_LOCAL_UR_MASK            (X'08000000')         *
*                            Units of recovery in local transaction   *
*                            mode will be excluded from the returned  *
*                            information.                             *
*                                                                     *
*                  ATR_RRS_MANAGED_UR_MASK    (X'02000000')           *
*                            UR's whose current work manager is RRS   *
*                            will be excluded from the returned       *
*                            information.  RRS is a work manager for  *
*                            restart URs and for URs associated with  *
*                            contexts delegated to RRS.               *
*                                                                     *
*                  ATR_NONRRS_MANAGED_UR_MASK    (X'01000000')        *
*                            UR's whose current work manager is not   *
*                            RRS will be excluded from the returned   *
*                            information.                             *
*                                                                     *
*                                                                     *
*                  For example, if the address passed via this        *
*                  parameter points to a fullword that contains a     *
*                  value of X'C0000000', which specifies both the     *
*                  ATR_IN_RESTART_LOG_MASK and                        *
*                  ATR_FAILED_INTEREST_MASK, URs that are read from   *
*                  the restart log or contain interests that have RMS *
*                  which have failed are not returned.                *
*                                                                     *
*                    REST_AND_FAILED DC AL4(ATR_IN_RESTART_LOG_MASK+A *
*                    TR_FAILED_INTEREST_MASK)                         *
*                                                                     *
*                  DEFAULT: ATR_NOEXCLUSION_MASK                      *
*                                                                     *
*                                                                     *
*                                                                     *
*              End of a set of mutually exclusive optional keys.      *
*              DEFAULT: DEFURONLY                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄASID= xasid]0 Ü                                       *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional halfword input that       *
*                  contains the address space identifier (ASID) for   *
*                  which UR information is to be returned.            *
*                  DEFAULT: 0 The ASID will not be used to filter the *
*                  returned information.                              *
*                                                                     *
*                  NOTE:  This parameter is left for compatibility    *
*                  with previous releases.  IBM recommends the usage  *
*                  of Work Manager Name instead of this parameter.    *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              The following is a set of mutually exclusive keys.     *
*              This set is optional; only one key may be specified.   *
*                                                                     *
*                                                                     *
*              ÄURID= xurid]0                                         *
*                  belongs to a set of mutually exclusive keys. It is *
*                  the name (RS-type), or address in register         *
*                  (2)-(12), of an optional 16 character input that   *
*                  contains the identifier of the specific UR for     *
*                  which information is to be returned.               *
*                  DEFAULT: 0 The UR identifier will not be used to   *
*                  filter the returned information.                   *
*                                                                     *
*              URIDSTR= xuridstr]0 Ü                                  *
*                  belongs to a set of mutually exclusive keys. It is *
*                  the name (RS-type), or address in register         *
*                  (2)-(12), of an optional 32 character input that   *
*                  contains the EBCDIC representation of the 16       *
*                  character identifier of the specific UR for which  *
*                  information is to be returned.  The character      *
*                  string may include wildcard characters, where '*'  *
*                  represents any string, whose length is zero or     *
*                  more characters, and '?' represents a position     *
*                  which may contain any single character.            *
*                  DEFAULT: 0 The UR identifier will not be used to   *
*                  filter the returned information.                   *
*                                                                     *
*                                                                     *
*                                                                     *
*              End of a set of mutually exclusive optional keys.      *
*              DEFAULT: URID                                          *
*                                                                     *
*                                                                     *
*                                                                     *
*              The following is a set of mutually exclusive keys.     *
*              This set is optional; only one key may be specified.   *
*                                                                     *
*                                                                     *
*              ÄSURID= xsurid]0                                       *
*                  belongs to a set of mutually exclusive keys. It is *
*                  the name (RS-type), or address in register         *
*                  (2)-(12), of an optional 32 character input that   *
*                  contains the sysplex UR identifier of the specific *
*                  cascaded UR family for which information is to be  *
*                  returned.  You can obtain a sysplex UR identifier  *
*                  from a log entry in the Restart, Main, or Delayed  *
*                  log stream or prior ATRQUERY URINFO macro          *
*                  invocation.                                        *
*                  DEFAULT: 0 The sysplex UR identifier will not be   *
*                  used to filter the returned information.           *
*                                                                     *
*              SURIDSTR= xsuridstr]0 Ü                                *
*                  belongs to a set of mutually exclusive keys. It is *
*                  the name (RS-type), or address in register         *
*                  (2)-(12), of an optional 64 character input that   *
*                  contains the EBCDIC representation of the 32       *
*                  character sysplex identifier of the specific       *
*                  cascaded UR family for which information is to be  *
*                  returned.  Character string may include wildcard   *
*                  characters, where '*' represents any string, whose *
*                  length is zero or more characters, and '?'         *
*                  represents a position which may contain any single *
*                  character.                                         *
*                  DEFAULT: 0 The sysplex UR identifier will not be   *
*                  used to filter the returned information.           *
*                                                                     *
*                                                                     *
*                                                                     *
*              End of a set of mutually exclusive optional keys.      *
*              DEFAULT: SURID                                         *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄURTYPE= xurtype]ATR_NOFILTER Ü                        *
*                  is an optional fullword input symbol, decimal      *
*                  value, or register (2)-(12), that contains the     *
*                  type of UR for which information is to be          *
*                  returned.                                          *
*                                                                     *
*                  Use one of the following constants:                *
*                                                                     *
*                                                                     *
*                  ATR_NOFILTER                                       *
*                            The UR type will not be used to filter   *
*                            the returned information.                *
*                                                                     *
*                  ATR_PROTECTED                                      *
*                            The system will return all URs in which  *
*                            at least one resource manager has a      *
*                            protected interest.                      *
*                                                                     *
*                  ATR_UNPROTECTED                                    *
*                            The system will return all URs in which  *
*                            no resource manager has a protected      *
*                            interest.                                *
*                                                                     *
*                                                                     *
*                  DEFAULT: ATR_NOFILTER                              *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              The following is a set of mutually exclusive keys.     *
*              This set is optional; only one key may be specified.   *
*                                                                     *
*                                                                     *
*              ÄURSTATE= xurstate]ATR_NOFILTER                        *
*                  belongs to a set of mutually exclusive keys. It is *
*                  an optional fullword input symbol, decimal value,  *
*                  or register (2)-(12), that contains the state of   *
*                  the URs to be returned.  URSTATE and URSTMASK are  *
*                  mutually exclusive keywords.                       *
*                                                                     *
*                  Use one of the following values:                   *
*                                                                     *
*                                                                     *
*                  ATR_NOFILTER                                       *
*                            The UR state will not be used to filter  *
*                            the returned information.                *
*                                                                     *
*                  ATR_IN_FLIGHT                                      *
*                            In-Flight URs only.                      *
*                                                                     *
*                  ATR_IN_STATE_CHECK                                 *
*                            In-State_Check URs only.                 *
*                                                                     *
*                  ATR_IN_PREPARE                                     *
*                            In-Prepare URs only.                     *
*                                                                     *
*                  ATR_IN_DOUBT                                       *
*                            In-Doubt URs only.                       *
*                                                                     *
*                  ATR_IN_COMMIT                                      *
*                            In-Commit URs only.                      *
*                                                                     *
*                  ATR_IN_BACKOUT                                     *
*                            In-Backout URs only.                     *
*                                                                     *
*                  ATR_IN_END                                         *
*                            In-End URs only.                         *
*                                                                     *
*                  ATR_IN_COMPLETION                                  *
*                            In-Completion URs only.                  *
*                                                                     *
*                  ATR_IN_ONLY_AGENT                                  *
*                            In-Only-Agent URs only.                  *
*                                                                     *
*                  ATR_IN_FORGET                                      *
*                            In-Forget URs only.                      *
*                                                                     *
*                                                                     *
*                  DEFAULT: ATR_NOFILTER                              *
*                                                                     *
*              URSTMASK= xurstmask]00000000000000000000000000000000 Ü *
*                                                                     *
*                  belongs to a set of mutually exclusive keys. It is *
*                  an optional 32 bit input , or register (2)-(12),   *
*                  containing the 32 bit mask identifying one or more *
*                  states of the URs to be returned.  URSTATE and     *
*                  URSTMASK are mutually exclusive keywords.          *
*                                                                     *
*                  The following bit constants can be used to create  *
*                  the fullword bit mask:                             *
*                                                                     *
*                                                                     *
*                  ATR_NOFILTER_MASK (X'00000000')                    *
*                            The UR state will not be used to filter  *
*                            the returned information.                *
*                                                                     *
*                  ATR_IN_FLIGHT_MASK      (X'80000000')              *
*                            Include In-Flight URs.                   *
*                                                                     *
*                  ATR_IN_STATE_CHECK_MASK (X'40000000')              *
*                            Include In-State_Check URs.              *
*                                                                     *
*                  ATR_IN_PREPARE_MASK     (X'20000000')              *
*                            Include In-Prepare URs.                  *
*                                                                     *
*                  ATR_IN_DOUBT_MASK       (X'10000000')              *
*                            Include In-Doubt URs.                    *
*                                                                     *
*                  ATR_IN_COMMIT_MASK      (X'08000000')              *
*                            Include In-Commit URs.                   *
*                                                                     *
*                  ATR_IN_BACKOUT_MASK     (X'04000000')              *
*                            Include In-Backout URs.                  *
*                                                                     *
*                  ATR_IN_END_MASK         (X'02000000')              *
*                            Include In-End URs.                      *
*                                                                     *
*                  ATR_IN_COMPLETION_MASK  (X'01000000')              *
*                            Include In-Completion URs.               *
*                                                                     *
*                  ATR_IN_ONLY_AGENT_MASK  (X'00800000')              *
*                            Include In-Only-Agent URs.               *
*                                                                     *
*                                                                     *
*                  For example, if the address passed via this        *
*                  parameter points to a fullword that contains a     *
*                  value of X'0C000000', which specifies both the     *
*                  ATR_IN_COMMIT_MASK and ATR_IN_BACKOUT_MASK, only   *
*                  URs that are in commit or backout are returned.    *
*                  The definition might be specified:                 *
*                                                                     *
*                    CMT_AND_BAK DC AL4(ATR_IN_COMMIT_MASK+ATR_IN_BAC *
*                    KOUT_MASK)                                       *
*                                                                     *
*                  DEFAULT: 00000000000000000000000000000000          *
*                                                                     *
*                                                                     *
*                                                                     *
*              End of a set of mutually exclusive optional keys.      *
*              DEFAULT: URSTATE                                       *
*                                                                     *
*                                                                     *
*                                                                     *
*              The following is a set of mutually exclusive keys.     *
*              This set is optional; only one key may be specified.   *
*                                                                     *
*                                                                     *
*              ÄLUWID= xluwid]0                                       *
*                  belongs to a set of mutually exclusive keys. It is *
*                  the name (RS-type), or address in register         *
*                  (2)-(12), of an optional 26 character input that   *
*                  contains the logical unit of work identifier       *
*                  (LUWID) to be used to filter the returned          *
*                  information.  LUWID and LUWIDSTR are mutually      *
*                  exclusive keywords.                                *
*                  DEFAULT: 0                                         *
*                                                                     *
*              LUWIDSTR= xluwidstr]0 Ü                                *
*                  belongs to a set of mutually exclusive keys. It is *
*                  the name (RS-type), or address in register         *
*                  (2)-(12), of an optional 35 character input EBCDIC *
*                  representation of the LUWID with commas or blanks  *
*                  used to delimit the netid.luname, instnum, and     *
*                  seqnum fields.  The string may contain wildcard    *
*                  characters, where '*' denotes zero to any number   *
*                  of characters and '?' denotes any single           *
*                  character.  The delimiters must be explicitly      *
*                  specified.  For example, the following string is a *
*                  valid specification:                               *
*                                                                     *
*                    A?BC.DEF*,*,*                                    *
*                                                                     *
*                  whereas the following is not:                      *
*                                                                     *
*                    ABC.*                                            *
*                                                                     *
*                  LUWID and LUWIDSTR are mutually exclusive          *
*                  keywords.                                          *
*                  DEFAULT: 0                                         *
*                                                                     *
*                                                                     *
*                                                                     *
*              End of a set of mutually exclusive optional keys.      *
*              DEFAULT: LUWID                                         *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄTID= xtid]0 Ü                                         *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 4 character input that    *
*                  contains the transaction identifier (TID) to be    *
*                  used to filter the returned information.  TID may  *
*                  not be specified if either TIDLOW or TIDHIGH is    *
*                  specified.                                         *
*                  DEFAULT: 0                                         *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄTIDHIGH= xtidhigh]ATR_HIGH_TID_VALUE Ü                *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 4 character input that    *
*                  specifies that URs that have transaction           *
*                  identifiers (TID) that are lower than or equal to  *
*                  that specified are returned.                       *
*                  DEFAULT: ATR_HIGH_TID_VALUE The high range         *
*                  indicator is set by default to be such that all    *
*                  TIDs are lower than or equal to the value          *
*                  specified.  TID and TIDHIGH are mutually exclusive *
*                  keywords.  If TIDLOW and TIDHIGH are both          *
*                  specified, URs that have transaction identifiers   *
*                  (TID) that are between the TIDLOW and TIDHIGH      *
*                  values, inclusive, are returned.                   *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄTIDLOW= xtidlow]ATR_LOW_TID_VALUE Ü                   *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 4 character input that    *
*                  specifies that URs that have transaction           *
*                  identifiers (TID) that are equal to or higher than *
*                  that specified are returned.                       *
*                  DEFAULT: ATR_LOW_TID_VALUE The low range indicator *
*                  is set by default to be such that all TIDs are     *
*                  equal to or higher than the value specified.  TID  *
*                  and TIDLOW are mutually exclusive keywords.  If    *
*                  TIDLOW and TIDHIGH are both specified, URs that    *
*                  have transaction identifiers (TID) that are        *
*                  between the TIDLOW and TIDHIGH values, inclusive,  *
*                  are returned.                                      *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              The following is a set of mutually exclusive keys.     *
*              This set is optional; only one key may be specified.   *
*                                                                     *
*                                                                     *
*              ÄGTID= xgtid]0                                         *
*                  belongs to a set of mutually exclusive keys. It is *
*                  the name (RS-type), or address in register         *
*                  (2)-(12), of an optional 40 character input that   *
*                  contains the global transaction identifier (GTID)  *
*                  to be used to filter the returned information.     *
*                  GTID and GTIDSTR are mutually exclusive keywords.  *
*                  DEFAULT: 0                                         *
*                                                                     *
*              GTIDSTR= xgtidstr]0 Ü                                  *
*                  belongs to a set of mutually exclusive keys. It is *
*                  the name (RS-type), or address in register         *
*                  (2)-(12), of an optional 80 character input that   *
*                  contains the EBCDIC representation of the 40       *
*                  character GTID for which information is to be      *
*                  returned.  The character string may also include   *
*                  wildcard characters, where '*' represents any      *
*                  string, whose length is zero or more characters,   *
*                  and '?' represents a position which may contain    *
*                  any single character.  GTID and GTIDSTR are        *
*                  mutually exclusive keywords.                       *
*                  DEFAULT: 0 The GTID will not be used to filter the *
*                  returned information.                              *
*                                                                     *
*                                                                     *
*                                                                     *
*              End of a set of mutually exclusive optional keys.      *
*              DEFAULT: GTID                                          *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄXID= xxid]0 Ü                                         *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 140 character input that  *
*                  contains the X/Open identifier (XID) to be used to *
*                  filter the returned information.  XID may not be   *
*                  specified if either XIDFORMATID, XIDGTRIDSTR, or   *
*                  XIDBQUALSTR is specified.                          *
*                  DEFAULT: 0 The XID will not be used to filter the  *
*                  returned information.                              *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄXIDFORMATID= xxidformatid]0 Ü                         *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 4 character input that    *
*                  contains the FormatID portion of the X/Open        *
*                  Identifier (XID) to be used to filter the returned *
*                  information.                                       *
*                  DEFAULT: 0 XIDFORMATID will not be used to filter  *
*                  the returned information.                          *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄXIDGTRIDSTR= xxidgtridstr]0 Ü                         *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 128 character input that  *
*                  contains the EBCDIC representation of the 64       *
*                  character Gtrid portion of the X/Open Identifier   *
*                  (XID) to be used to filter the returned            *
*                  information. The character string may include wild *
*                  card characters, where '*' represents any string,  *
*                  whose length is zero or more characters, and '?'   *
*                  represents a position which may contain any single *
*                  character.                                         *
*                  DEFAULT: 0 XIDGTRIDSTR will not be used to filter  *
*                  the returned information.                          *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄXIDBQUALSTR= xxidbqualstr]0 Ü                         *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 128 character input that  *
*                  contains the EBCDIC representation of the 64       *
*                  character Bqual portion of the X/Open Identifier   *
*                  (XID) to be used to filter the returned            *
*                  information. The character string may include wild *
*                  card characters, where '*' represents any string,  *
*                  whose length is zero or more characters, and '?'   *
*                  represents a position which may contain any single *
*                  character.                                         *
*                  DEFAULT: 0 XIDBQUALSTR will not be used to filter  *
*                  the returned information.                          *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄRMNAME= xrmname]NONE Ü                                *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 32 character input that   *
*                  contains the resource manager name to be used to   *
*                  filter the returned information.  The character    *
*                  string may include wildcard characters, where '*'  *
*                  represents any string, whose length is zero or     *
*                  more characters, and '?' represents a position     *
*                  which may contain any single character.            *
*                  DEFAULT: NONE                                      *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄWMNAME= xwmname]NONE Ü                                *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 32 character input that   *
*                  contains the work manager name to be used to       *
*                  filter the returned information.  The character    *
*                  string may include wildcard characters, where '*'  *
*                  represents any string, whose length is zero or     *
*                  more characters, and '?' represents a position     *
*                  which may contain any single character.            *
*                  DEFAULT: NONE                                      *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄTODBEG= xtodbeg]0 Ü                                   *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 8 character input tod     *
*                  (GMT) value to be used to filter the returned      *
*                  information.  URs which were created after the     *
*                  time represented by this parameter will be         *
*                  returned.  If TODBEG and TODEND are both           *
*                  specified, URs that have create times that are     *
*                  between the TODBEG and TODEND values, inclusive,   *
*                  are returned.                                      *
*                  DEFAULT: 0 The starting TOD range is set to the    *
*                  GMT time of the oldest UR.                         *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄTODEND= xtodend]0 Ü                                   *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 8 character input tod     *
*                  (GMT) value to be used to filter the returned      *
*                  information.  URs which were created before the    *
*                  time represented by this parameter will be         *
*                  returned.  If TODBEG and TODEND are both           *
*                  specified, URs             that have create times  *
*                  that are between the TODBEG and TODEND values,     *
*                  inclusive, are returned.                           *
*                  DEFAULT: 0 The ending TOD range is set to the      *
*                  current GMT time.                                  *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄCURDUR= xcurdur]0 Ü                                   *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 13 character input in the *
*                  format hh:mm:ss.sssss containing the minimum       *
*                  duration that a given UR has been in its current   *
*                  state.  URs having interests which have been in    *
*                  their current state for longer than or equal to    *
*                  this duration will be returned.                    *
*                  DEFAULT: 0 URs will be returned regardless of how  *
*                  long they have been in their current state.        *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄEXINFOMASK= xexinfomask]ATR_NOXINFO_MASK Ü            *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 32 bit input identifying  *
*                  extended information to be returned for the        *
*                  returned units of recovery.                        *
*                                                                     *
*                  The following bit constants can be used to create  *
*                  the fullword bit mask:                             *
*                                                                     *
*                                                                     *
*                  ATR_NOXINFO_MASK         (X'00000000')             *
*                            No extended information will be          *
*                            returned.                                *
*                                                                     *
*                  ATR_XINFO_TIMESTAMP_MASK (X'80000000')             *
*                            Timestamp information for each unit of   *
*                            recovery as well as each interest in     *
*                            each unit of recovery will be added to   *
*                            the returned information.                *
*                                                                     *
*                  ATR_XINFO_CASCADED_MASK  (X'40000000')             *
*                            Cascaded family information for each     *
*                            unit of recovery will be added to the    *
*                            returned information. If any UR in a     *
*                            cascaded UR family is returned, all of   *
*                            the URs in the family will be returned,  *
*                            unless EXCLUDEURMASK indicates they      *
*                            should be excluded.                      *
*                                                                     *
*                  ATR_XINFO_PID_MASK       (X'20000000')             *
*                            Persistent Interest Data request to      *
*                            allow the retrieval of the persistent    *
*                            interest data of any protected unit of   *
*                            recovery interest.                       *
*                                                                     *
*                                                                     *
*                  DEFAULT: ATR_NOXINFO_MASK                          *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄGNAME= xgname]CURRENT_GNAME Ü                         *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 8 character input that    *
*                  contains the RRS logging group name.  The          *
*                  character string may include wildcard characters,  *
*                  where '*' represents any string, whose length is   *
*                  zero or more characters, and '?' represents a      *
*                  position which may contain any single character.   *
*                                                                     *
*                  When you specify GNAME, the system uses the        *
*                  specified value as a filter on the returned        *
*                  information, returning only information about the  *
*                  units of recovery which match the pattern you      *
*                  specified for this and any other additional        *
*                  filters.                                           *
*                  DEFAULT: CURRENT_GNAME When you omit GNAME, the    *
*                  system uses the current systems RRS logging group  *
*                  name as a filter on the information returned.  To  *
*                  obtain information for all systems in the sysplex, *
*                  specify an asterisk (*) for both GNAME and         *
*                  SYSNAME.                                           *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄSYSNAME= xsysname]CURRENT_SYSNAME Ü                   *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 8 character input that    *
*                  contains the system name. The character string may *
*                  include wildcard characters, where '*' represents  *
*                  any string, whose length is zero or more           *
*                  characters, and '?' represents a position which    *
*                  may contain any single character.                  *
*                                                                     *
*                  When you specify SYSNAME, the system uses the      *
*                  specified value as a filter on the returned        *
*                  information, returning only information about the  *
*                  units of recovery which match the pattern you      *
*                  specified for this and any other additional        *
*                  filters.                                           *
*                  DEFAULT: CURRENT_SYSNAME When you omit SYSNAME,    *
*                  the system uses the current systems system name as *
*                  a filter on the information returned.  To obtain   *
*                  information for all systems in the sysplex,        *
*                  specify an asterisk (*) for both GNAME and         *
*                  SYSNAME.                                           *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              ÄSORTTAB= xsorttab]0                                   *
*                  is the name (RS-type), or address in register      *
*                  (2)-(12), of an optional 4 byte input that         *
*                  contains the address of a sort table array.  Each  *
*                  element in the table is comprised of a fullword    *
*                  sort key selector and a 32 bit sort options field. *
*                  Each element in the table represents a sort key,   *
*                  therefore a table with multiple elements specifies *
*                  a multiple key sort of the returned information.   *
*                  The position of a given sort element in the sprt   *
*                  table array specifies its sort priority.  The      *
*                  first element in the table specifies the primary   *
*                  sort key, the second element specifies the         *
*                  secondary sort key, the third specifies the        *
*                  tertiary sort key, and so on.  A mapping of the    *
*                  element format is provided in the ATRFZQRY mapping *
*                  macro.  If SORTTAB is specified, SORTNUM must also *
*                  be specified.                                      *
*                                                                     *
*                  Example table:                                     *
*                                                                     *
*                    Sort Order Sort Key                   Sort Optio *
*                    n                                                *
*                    ---------- -------------------------- ---------- *
*                    ------------------                               *
*                    Primary    DC F(ATR_SORT_WM_NAME)     DC F(ATR_S *
*                    ORTOPT_ASCENDING)                                *
*                    Secondary  DC F(ATR_SORT_CREATE_TIME) DC F(ATR_S *
*                    ORTOPT_DESCENDING)                               *
*                    Tertiary   DC F(ATR_SORT_URID)        DC F(ATR_S *
*                    ORTOPT_ASCENDING)                                *
*                                                                     *
*                  SORTNUM for the table above should be 3.           *
*                  DEFAULT: 0 No sorting of the output area will be   *
*                  performed.                                         *
*                                                                     *
*                  Sort Key Selector Values:                          *
*                                                                     *
*                                                                     *
*                  ATR_SORT_WM_NAME         (X'00000001')             *
*                            Sort returned information based on Work  *
*                            Manager Name                             *
*                                                                     *
*                  ATR_SORT_URID            (X'00000002')             *
*                            Sort returned information based on UR    *
*                            Identifier.                              *
*                                                                     *
*                  ATR_SORT_CREATE_TIME     (X'00000003')             *
*                            Sort returned information based on the   *
*                            create time of the UR.                   *
*                                                                     *
*                  ATR_SORT_UR_STATE        (X'00000004')             *
*                            Sort returned information based on the   *
*                            UR state.                                *
*                                                                     *
*                  ATR_SORT_LUWID           (X'00000005')             *
*                            Sort returned information based on the   *
*                            Logical Unit Work Identifier.            *
*                                                                     *
*                            NOTE:  This sort is really a 3 key sort, *
*                            with the primary key being the           *
*                            luname.netid, the secondary key being    *
*                            the instnum, and the tertiary being the  *
*                            seqnum.  The luname.netid is padded to   *
*                            17 bytes with blanks on the right before *
*                            comapring the IDs for sort order.        *
*                                                                     *
*                  ATR_SORT_TID             (X'00000006')             *
*                            Sort returned information based on the   *
*                            Transaction Identifier.                  *
*                                                                     *
*                  ATR_SORT_GTID            (X'00000007')             *
*                            Sort returned information based on the   *
*                            Global Transaction Identifier.           *
*                                                                     *
*                  ATR_SORT_XID             (X'00000008')             *
*                            Sort returned information based on the   *
*                            X/Open Identifier.                       *
*                                                                     *
*                            NOTE:  This sort is really a 3 key sort, *
*                            with the primary key being the FormatID, *
*                            the secondary key being the Global       *
*                            Transaction Identifier, and the tertiary *
*                            being the BQUAL value.                   *
*                                                                     *
*                  ATR_SORT_GNAME           (X'00000009')             *
*                            Sort returned information based on the   *
*                            logging group name.                      *
*                                                                     *
*                  ATR_SORT_SYSNAME         (X'0000000A')             *
*                            Sort returned information based on the   *
*                            system name.                             *
*                                                                     *
*                  ATR_SORT_SURID           (X'0000000B')             *
*                            Sort returned information based on the   *
*                            sysplex UR identifier.                   *
*                                                                     *
*                                                                     *
*                  Sort option values:                                *
*                                                                     *
*                                                                     *
*                  ATR_SORTOPT_ASCENDING    (X'0NNNNNNN')             *
*                            Sort return information using the sort   *
*                            key in ascending order.                  *
*                                                                     *
*                  ATR_SORTOPT_DESCENDING   (X'8NNNNNNN')             *
*                            Sort return information using the sort   *
*                            key in descending order.                 *
*                                                                     *
*                            NOTE:  Bits 1-31 are reserved and must   *
*                            contain zero.                            *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                  SORTNUM=xsortnumÜ                                  *
*                      is the name (RS-type), or address in register  *
*                      (2)-(12), of a required fullword input which   *
*                      contains the number of elements in the sort    *
*                      table passed via the SORTTAB parameter.        *
*                      SORTTAB must be specified if SORTNUM is        *
*                      specified.           The number of elements    *
*                      that can be passed in the sort table is        *
*                      limited to the number of possible sort fields. *
*                      DEFAULT: 0                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*      AREAADDR=xareaaddr                                             *
*          is the name (RS-type), or address in register (2)-(12), of *
*          a required 4 byte input that contains the address of the   *
*          storage area to contain the returned information.  Specify *
*          the length of the area in AREALEN.                         *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*      ÄAREAALET= xareaalet]0 Ü                                       *
*          is the name (RS-type), or address in register (2)-(12), of *
*          an optional fullword input of the alet of the address or   *
*          data space in which the output area resides.  Notes:       *
*                                                                     *
*                                                                     *
*          o   The alet must be added to the dispatchable unit access *
*              list (DU-AL) as the primary address space access list  *
*              (PASN-AL) will not be accessable from the ATRQUERY     *
*              service routine.                                       *
*                                                                     *
*          o   If the special alets are used:                         *
*                                                                     *
*                                                                     *
*              -   When 0, indicating current primary, the alet is    *
*                  converted such that whatever address space is the  *
*                  PRIMARY at the time of the atrquery invocation is  *
*                  used as the space id.                              *
*                                                                     *
*              -     When 1, indicating current secondary, an error   *
*                  is returned since the current secondary address    *
*                  space will be inaccessable to the ATRQUERY service *
*                  routine.  ATRQUERY_REQUEST_FAILURE will be         *
*                  returned in RETCODE parameter and                  *
*                  ATRQUERY_AREAALET_SECONDARY will be rturned in     *
*                  RSNCODE parameter.                                 *
*                                                                     *
*              -   When 2, indicating current home, the alet is used. *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*          DEFAULT: 0 If no AreaAlet is provided, the area is assumed *
*          to be in the callers primary address space.                *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*      ÄAREAOPT= BYADDR]BYOFFSET Ü                                    *
*          is an optional keyword input that specifies the whether    *
*          the fields that link other fields in the buffer are to be  *
*          returned by address or offset within the buffer.           *
*          DEFAULT: BYADDR                                            *
*                                                                     *
*                                                                     *
*          ÄAREAOPT=BYADDRÜ                                           *
*              the buffer links will be returned as addresses.        *
*                                                                     *
*          ÄAREAOPT=BYOFFSETÜ                                         *
*              the buffer links will be returned as offsets within    *
*              the buffer.                                            *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*      AREALEN=xarealen                                               *
*          is the name (RS-type), or address in register (2)-(12), of *
*          a required fullword input that contains the length of the  *
*          area to contain the returned information.  Specify the     *
*          address of the area in AREAADDR.                           *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*      COUNT=xcount                                                   *
*          is the name (RS-type), or address in register (2)-(12), of *
*          a required fullword output will contain the number of      *
*          entries returned.                                          *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*      ÄRCTABLE= xrctable]0                                           *
*          is the name (RS-type), or address in register (2)-(12), of *
*          an optional 4 byte input that contains the address of a    *
*          char(2304) area to contain the return/reason code from     *
*          each System and Logging Group queried.  The area consists  *
*          of up to 64 36-byte entries.  The entry is mapped by       *
*          ATRFZRCA in the ATRFZQRY mapping macro.  The number of     *
*          entries will be returned in the RCNUM parameter.  The      *
*          table will only contain valid information if the reason    *
*          code returned to you is ATRSRV_REMOTE_WARNING or           *
*          ATRSRV_REMOTE_ERROR.                                       *
*          DEFAULT: 0 No return code table is desired.                *
*                                                                     *
*                                                                     *
*          RCNUM=xrcnumÜ                                              *
*              is the name (RS-type), or address in register          *
*              (2)-(12), of a required fullword output that will      *
*              contain the number of entries in the RCTABLE area.     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*      ÄRETCODE=xretcodeÜ                                             *
*          is the name (RS-type) of an optional fullword output       *
*          variable, or register (2)-(12), into which the return code *
*          is to be copied from GPR 15.                               *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*      ÄRSNCODE=xrsncodeÜ                                             *
*          is the name (RS-type) of an optional fullword output       *
*          variable, or register (2)-(12), into which the reason code *
*          is to be copied from GPR 0.                                *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*      ÄPLISTVER= xplistver]IMPLIED_VERSION Ü                         *
*          is an optional byte input decimal value in the "1-8" range *
*          that specifies the macro version.  PLISTVER is the only    *
*          key allowed on the list form of MF and determines which    *
*          parameter list is generated.  The macro keys associated    *
*          with each supported version of the macro are listed in     *
*          MACRO USAGE NOTE 3.  Note that MAX may be specified        *
*          instead of a number, and the parameter list will be of the *
*          largest size currently supported. This size may grow from  *
*          release to release (thus possibly affecting the amount of  *
*          storage needed by your program).  If your program can      *
*          tolerate this, IBM recommends that you always specify MAX  *
*          when creating the list form parameter list as that will    *
*          ensure that the list form parameter list is always long    *
*          enough to hold whatever parameters might be specified on   *
*          the execute form.                                          *
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   *
*          default is the lowest version which allows all of the      *
*          parameters specified on the invocation to be processed.    *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*      ÄMF= S]L]M]E Ü                                                 *
*          is an optional keyword input which specifies the macro     *
*          form.                                                      *
*          DEFAULT: S                                                 *
*                                                                     *
*                                                                     *
*          ÄMF=SÜ                                                     *
*              specifies the standard form of the macro.  The "S"     *
*              form generates code to put the parameters into an      *
*              in-line parameter list and invoke the desired service. *
*              Full checking for required macro keys is done along    *
*              with supplying defaults for omitted optional           *
*              parameters.                                            *
*                                                                     *
*          ÄMF=(L,xmfctrl ,xmfattr]0D )Ü                              *
*              specifies the list form of the macro.  The "L" form    *
*              defines an area to be used for the parameter list.     *
*              Only the PLISTVER key may be specified on the          *
*              invocation.  All other macro parameters are flagged as *
*              errors.  If PLISTVER is not specified, the original    *
*              parameter list definition is used.                     *
*                                                                     *
*            ,xmfctrl                                                 *
*              is a required input.  It is the name of a storage area *
*              for the parameter list.                                *
*                                                                     *
*             ,xmfattr]0D                                             *
*              is an optional 60 character input string that varies   *
*              from 1 to 60 characters. Use it to force boundary      *
*              alignment of the parameter list. Use only 0F or 0D.    *
*              DEFAULT: 0D which forces the parameter list to a       *
*              doubleword boundary.                                   *
*                                                                     *
*          ÄMF(M,xmfctrl ,COMPLETE]NOCHECK )Ü                         *
*              specifies the modify form of the macro.  The "M" form  *
*              generates code to put the parameters into the          *
*              parameter list specified by xmfctrl.                   *
*                                                                     *
*            ,xmfctrl                                                 *
*              is a required input.  It is the name (RS-type), or     *
*              address in register (1)-(12), of a storage area for    *
*              the parameter list.                                    *
*                                                                     *
*             ,COMPLETE]NOCHECK Ü                                     *
*              is an optional keyword input which specifies the       *
*              degree of macro parameter syntax checking.             *
*              DEFAULT: COMPLETE                                      *
*                                                                     *
*                                                                     *
*              COMPLETE                                               *
*                  Checking for required macro keys is done and       *
*                  defaults are supplied for omitted optional         *
*                  parameters.  (See Macro Usage Note 2).             *
*                                                                     *
*              NOCHECK                                                *
*                  Checking for required macro keys is not done nor   *
*                  are defaults supplied for omitted optional         *
*                  parameters.                                        *
*                                                                     *
*                                                                     *
*                                                                     *
*          ÄMF=(E,xmfctrl ,COMPLETE]NOCHECK )Ü                        *
*              specifies the execute form of the macro.  The "E" form *
*              generates code to put the parameters into the          *
*              parameter list specified by xmfctrl and invoke the     *
*              desired service.                                       *
*                                                                     *
*            ,xmfctrl                                                 *
*              is a required input.  It is the name (RS-type), or     *
*              address in register (1)-(12), of a storage area for    *
*              the parameter list.                                    *
*                                                                     *
*             ,COMPLETE]NOCHECK                                       *
*              is an optional keyword input which specifies the       *
*              degree of macro parameter syntax checking.             *
*              DEFAULT: COMPLETE                                      *
*                                                                     *
*                                                                     *
*              COMPLETE                                               *
*                  Checking for required macro keys is done and       *
*                  defaults are supplied for omitted optional         *
*                  parameters.  (See Macro Usage Note 2).             *
*                                                                     *
*              NOCHECK                                                *
*                  Checking for required macro keys is not done nor   *
*                  are defaults supplied for omitted optional         *
*                  parameters.                                        *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*01* ABEND CODES:  None.                                              *
*                                                                     *
*01* RETURN CODES:                                                    *
*                                                                     *
*                                                                     *
*            0    ATRQUERY_SUCCESS - Request completed successfully.  *
*                                                                     *
*            4    ATRQUERY_WARNING - Request completed with a warning *
*                 condition.                                          *
*                                                                     *
*            8    ATRQUERY_FAILURE - Request failed.                  *
*                                                                     *
*                                                                     *
*                                                                     *
*01* REASON CODES:                                                    *
*                                                                     *
*       REASON    RETURN                                              *
*       CODE      CODE      DESCRIPTION                               *
*       ¢¢¢¢¢¢¢¢  ¢¢¢¢¢¢¢¢  ¢¢¢¢¢¢¢¢¢¢¢                               *
*                                                                     *
*                                                                     *
*              1  8         EQUATE SYMBOL: ATRQUERY_ASID_INVALID      *
*                                                                     *
*                           MEANING:  You  specified an address space *
*                           identifier (ASID) that does not exist.    *
*                                                                     *
*                           ACTION:  Specify  a  valid ASID and retry *
*                           the request.                              *
*                                                                     *
*              2  8         EQUATE SYMBOL: ATRQUERY_RRS_NOT_ACTIVE    *
*                                                                     *
*                           MEANING:  The  ATRQUERY  service  is  not *
*                           available;  RRS/MVS is not active on this *
*                           system.                                   *
*                                                                     *
*                           ACTION: Retry the request when RRS/MVS is *
*                           available.                                *
*                                                                     *
*              3  4         EQUATE SYMBOL: ATRQUERY_AREA_FULL         *
*                                                                     *
*                           MEANING:  The return area is too small to *
*                           contain   all   the   information  to  be *
*                           returned.                                 *
*                                                                     *
*                           ACTION:  Increase  the size of the return *
*                           area and retry the request.               *
*                                                                     *
*              4  8         EQUATE SYMBOL: ATRQUERY_NOT_SAF_AUTH      *
*                                                                     *
*                           MEANING:  You  do not have READ access to *
*                           the proper resource.                      *
*                                                                     *
*                           ACTION:    Obtain    READ    access    to *
*                           MVSADMIN.RRS.COMMANDS.gname.sysname   and *
*                           retry the request.                        *
*                                                                     *
*              5  8         EQUATE SYMBOL: ATRQUERY_URSTMASK_RSVD     *
*                                                                     *
*                           MEANING: Reserved fields in UR state mask *
*                           were nonzero.                             *
*                                                                     *
*                           ACTION:  Pass mask with only defined bits *
*                           set.                                      *
*                                                                     *
*              6  8         EQUATE SYMBOL: ATRQUERY_XINFOMASK_RSVD    *
*                                                                     *
*                           MEANING: Reserved fields in Extended info *
*                           mask were nonzero.                        *
*                                                                     *
*                           ATR_XINFO_PID_MASK   is   set   but   the *
*                           PLISTVER  specified is less than 7.  When *
*                           requesting  for Persistent Interest Data, *
*                           PLISTVER must be 7 or higher.             *
*                                                                     *
*                           ACTION:  Pass mask with only defined bits *
*                           set   or   Pass  Pid  Mask  with  correct *
*                           PLISTVER.                                 *
*                                                                     *
*              7  8         EQUATE                            SYMBOL: *
*                           ATRQUERY_EXCLUSIONMASK_RSVD               *
*                                                                     *
*                           MEANING:  Reserved  fields  in  Exclusion *
*                           mask were nonzero.                        *
*                                                                     *
*                           ACTION:  Pass mask with only defined bits *
*                           set.                                      *
*                                                                     *
*              8  8         EQUATE SYMBOL: ATRQUERY_SORTKEY_INVALID   *
*                                                                     *
*                           MEANING: Specified key is not among valid *
*                           choices.                                  *
*                                                                     *
*                           ACTION: Pass valid key.                   *
*                                                                     *
*              9  8         EQUATE SYMBOL: ATRQUERY_SORTOPT_INVALID   *
*                                                                     *
*                           MEANING:  Specified  option  is not among *
*                           valid choices.                            *
*                                                                     *
*                           ACTION: Pass valid option.                *
*                                                                     *
*             10  8         EQUATE SYMBOL: ATRQUERY_SORTNUM_INVALID   *
*                                                                     *
*                           MEANING: Sort element numbers must be 1-N *
*                           without duplication in table.             *
*                                                                     *
*                           ACTION: Pass valid sort element numbers.  *
*                                                                     *
*             11  8         EQUATE SYMBOL: ATRQUERY_TID_RANGE_INVALID *
*                                                                     *
*                           MEANING: TIDLOW parameter was higher than *
*                           TIDHIGH parameter.                        *
*                                                                     *
*                           ACTION: Pass TIDHIGH that is greater than *
*                           TIDLOW.                                   *
*                                                                     *
*             12  8         EQUATE SYMBOL: ATRQUERY_TOD_RANGE_INVALID *
*                                                                     *
*                           MEANING: TODBEG parameter was higher than *
*                           TODEND parameter.                         *
*                                                                     *
*                           ACTION:  Pass TODBEG that is smaller than *
*                           TODEND.                                   *
*                                                                     *
*             13  8         EQUATE SYMBOL: ATRQUERY_LUWIDSTR_INVALID  *
*                                                                     *
*                           MEANING:   Luwid   string  parameter  was *
*                           invalid.                                  *
*                                                                     *
*                           ACTION:  Check  luwid  string  syntax and *
*                           retry.                                    *
*                                                                     *
*             14  8         EQUATE SYMBOL: ATRQUERY_CURDUR_INVALID    *
*                                                                     *
*                           MEANING:  Current  duration parameter was *
*                           invalid.  Must be hh:mm:ss.ssss           *
*                                                                     *
*                           ACTION: Correct parameter and retry.      *
*                                                                     *
*             15  8         EQUATE SYMBOL: ATRQUERY_SORTTABPTR_BAD    *
*                                                                     *
*                           MEANING:   Sort  table  entry  count  was *
*                           nonzero,  but  valid  table  ptr  was not *
*                           passed.                                   *
*                                                                     *
*                           ACTION: Correct parameter and retry.      *
*                                                                     *
*             16  8         EQUATE                            SYMBOL: *
*                           ATRQUERY_AREAALET_SECONDARY               *
*                                                                     *
*                           MEANING:  The  areaalet  specified is the *
*                           secondary  alet, which is unaccessable by *
*                           the ATRQUERY service routine.             *
*                                                                     *
*                           ACTION: Correct parameter and retry.      *
*                                                                     *
*             17  8         EQUATE SYMBOL: ATRQUERY_REQUEST_UNKNOWN   *
*                                                                     *
*                           MEANING:   A   downlevel   RRS   did  not *
*                           understand the request                    *
*                                                                     *
*                           ACTION: Correct parameter and retry.      *
*                                                                     *
*             18  8         EQUATE SYMBOL: ATRQUERY_GNAME_INVALID     *
*                                                                     *
*                           MEANING:  The  value  specified  for  the *
*                           gname parameter is not valid.             *
*                                                                     *
*                           ACTION: Correct parameter and retry.      *
*                                                                     *
*             19  8         EQUATE SYMBOL: ATRQUERY_SYSNAME_INVALID   *
*                                                                     *
*                           MEANING:  The  value  specified  for  the *
*                           sysname parameter is not valid.           *
*                                                                     *
*                           ACTION: Correct parameter and retry.      *
*                                                                     *
*             20  8         EQUATE SYMBOL: ATRQUERY_RESOURCE_ERROR    *
*                                                                     *
*                           MEANING:   No   buffer  is  available  to *
*                           satisfy a remote request.                 *
*                                                                     *
*                           ACTION: Retry the request later.          *
*                                                                     *
*             21  8         EQUATE SYMBOL: ATRQUERY_TOO_MANY_ITEMS    *
*                                                                     *
*                           MEANING: There are too many data items to *
*                           it in the buffer to be sorted.            *
*                                                                     *
*                           ACTION:  Add  more  filter  and retry the *
*                           request.                                  *
*                                                                     *
*             22  8         EQUATE SYMBOL: ATRQUERY_INSTANCE_FAILURE  *
*                                                                     *
*                           MEANING:  An  error occurred processing a *
*                           remote request. Your RCTABLE will contain *
*                           the  failing  service  identifer,  return *
*                           code and reason code.                     *
*                                                                     *
*                           Service identifers:                       *
*                                                                     *
*                                                                     *
*                           o   1 - IXCMSGO macro interface           *
*                                                                     *
*                           o   2 - IXCMSGI macro interface           *
*                                                                     *
*                                                                     *
*                           Any  other value is an internal error and *
*                           should  be  reported  to  the IBM Support *
*                           center.                                   *
*                                                                     *
*                           ACTION:  Fix  the  error(s)  noted in the *
*                           RCTABLE and retry the request.            *
*                                                                     *
*             23  4         EQUATE SYMBOL: ATRQUERY_REMOTE_WARNING    *
*                                                                     *
*                           MEANING: Error(s) occurred while querying *
*                           data   on   at  least  one  system.  Some *
*                           information  may  not have been returned. *
*                           Your  RCTABLE,  if one was provided, will *
*                           contain  detailed  error  information for *
*                           each system involved in your request.     *
*                                                                     *
*                           ACTION:  Fix  the  error(s)  noted in the *
*                           RCTABLE and retry the request.            *
*                                                                     *
*             24  8         EQUATE SYMBOL: ATRQUERY_REMOTE_ERROR      *
*                                                                     *
*                           MEANING: Error(s) occurred while querying *
*                           data  on all systems.  No information was *
*                           returned.    Your  RCTABLE,  if  one  was *
*                           provided,  will  contain  detailed  error *
*                           information  for  each system involved in *
*                           your request.                             *
*                                                                     *
*                           ACTION:  Fix  the  error(s)  noted in the *
*                           RCTABLE and retry the request.            *
*                                                                     *
*             25  8         EQUATE SYMBOL: ATRQUERY_RESP_NOT_RECEIVED *
*                                                                     *
*                           MEANING:  Response  not received from the *
*                           remote   system.     No  information  was *
*                           returned.                                 *
*                                                                     *
*                           ACTION: Retry the request.                *
*                                                                     *
*             26  8         EQUATE SYMBOL: ATRQUERY_REMOTE_NOT_ACTIVE *
*                                                                     *
*                           MEANING:  The remote system is not active *
*                           or  RRS is not active on that system.  No *
*                           information was returned.                 *
*                                                                     *
*                           ACTION: Retry the request once the remote *
*                           system is available.                      *
*                                                                     *
*             27  8         EQUATE SYMBOL: ATRQUERY_AREALEN_INVALID   *
*                                                                     *
*                           MEANING:   The   specified   AREALEN   is *
*                           invalid.  No information was returned.    *
*                                                                     *
*                           ACTION: Correct AREALEN and retry.        *
*                                                                     *
*             28  8         EQUATE SYMBOL: ATRQUERY_AREAADDR_INVALID  *
*                                                                     *
*                           MEANING:   The   specified   AREAADDR  is *
*                           invalid.  No information was returned.    *
*                                                                     *
*                           ACTION: Correct AREAADDR and retry.       *
*                                                                     *
*             29  4         EQUATE                            SYMBOL: *
*                           ATRQUERY_RMMETADATALOGUNAVAILABLE         *
*                                                                     *
*                           MEANING:  The  RM  Meta  Data  log is not *
*                           available. No information was returned.   *
*                                                                     *
*                           ACTION: Check SYSLOG for messages ATR132I *
*                           or  ATR172E that will further explain why *
*                           the   log  is  unavailable.    Retry  the *
*                           request  when  the  RM  Meta  Data log is *
*                           available.                                *
*                                                                     *
*           4095  8         EQUATE SYMBOL: ATRQUERY_UNEXPECTED_ERROR  *
*                                                                     *
*                           MEANING:   An   unexpected  system  error *
*                           occurred.                                 *
*                                                                     *
*                           ACTION: Contact your system support.      *
*                                                                     *
*                                                                     *
*                                                                     *
*01* MODULE TYPE:  ASSEM MACRO                                        *
*                                                                     *
*02*   PROCESSOR:  ASSEM                                              *
*                                                                     *
*01* COMPONENT:  SCRRS                                                *
*                                                                     *
*01* DISTRIBUTION LIBRARY: AMACLIB                                    *
*                                                                     *
*01* EXAMPLES:                                                        *
*    EXAMPLE 1                                                        *
*                                                                     *
*    OPERATION: Obtain Resource Manager information                   *
*                                                                     *
*               ATRQUERY REQUEST=RMINFO,AREAADDR=AREA§,AREALEN=RETLEN *
*      ,        X                                                     *
*                     COUNT=RETCNT                                    *
*      *                                                              *
*      * INPUT VALUES                                                 *
*      *                                                              *
*      AREA§    DC     A(RETAREA)               ADDRESS OF RETURN ARE *
*      A                                                              *
*      RETLEN   DC     F'1024'                  LENGTH OF RETURN AREA *
*      *                                                              *
*      * OUTPUT AREAS                                                 *
*      *                                                              *
*      RETCNT   DS     F                        RETURNED RM COUNT     *
*      RETAREA  DS     1024C                    RETURN AREA           *
*      *                                                              *
*      * REQUIRED MAPPINGS                                            *
*      *                                                              *
*               CVT DSECT=YES                                         *
*               IHAECVT                                               *
*               ATRFZQRY                                              *
*                                                                     *
*    EXAMPLE 2                                                        *
*                                                                     *
*    OPERATION: Obtain Resource Manager information for               *
*    the resource manager with the name UTRICK                        *
*                                                                     *
*               ATRQUERY REQUEST=RMINFO,AREAADDR=AREA§,AREALEN=RETLEN *
*      ,        X                                                     *
*                     COUNT=RETCNT,RMNAME=MYRM                        *
*      *                                                              *
*      * INPUT VALUES                                                 *
*      *                                                              *
*      AREA§    DC     A(RETAREA)               ADDRESS OF RETURN ARE *
*      A                                                              *
*      RETLEN   DC     F'1024'                  LENGTH OF RETURN AREA *
*      MYRM     DC     CL32'UTRICK'             RESOURCE MANAGER NAME *
*      *                                                              *
*      * OUTPUT AREAS                                                 *
*      *                                                              *
*      RETCNT   DS     F                        RETURNED RM COUNT     *
*      RETAREA  DS     1024C                    RETURN AREA           *
*      *                                                              *
*      * REQUIRED MAPPINGS                                            *
*      *                                                              *
*               CVT DSECT=YES                                         *
*               IHAECVT                                               *
*               ATRFZQRY                                              *
*                                                                     *
*    EXAMPLE 3                                                        *
*                                                                     *
*    OPERATION: Obtain Unit Of Recovery information                   *
*                                                                     *
*               ATRQUERY REQUEST=URINFO,AREAADDR=AREA§,AREALEN=RETLEN *
*      ,        X                                                     *
*                     COUNT=RETCNT                                    *
*      *                                                              *
*      * INPUT VALUES                                                 *
*      *                                                              *
*      AREA§    DC     A(RETAREA)               ADDRESS OF RETURN ARE *
*      A                                                              *
*      RETLEN   DC     F'1024'                  LENGTH OF RETURN AREA *
*      *                                                              *
*      * OUTPUT AREAS                                                 *
*      *                                                              *
*      RETCNT   DS     F                        RETURNED RM COUNT     *
*      RETAREA  DS     1024C                    RETURN AREA           *
*      *                                                              *
*      * REQUIRED MAPPINGS                                            *
*      *                                                              *
*               CVT DSECT=YES                                         *
*               IHAECVT                                               *
*               ATRFZQRY                                              *
*                                                                     *
*    EXAMPLE 4                                                        *
*                                                                     *
*    OPERATION: Obtain Unit Of Recovery information for               *
*    protected units of recovery (URs).                               *
*                                                                     *
*               ATRQUERY REQUEST=URINFO,AREAADDR=AREA§,AREALEN=RETLEN *
*      ,        X                                                     *
*                     COUNT=RETCNT,URTYPE=ATR_PROTECTED               *
*      *                                                              *
*      * INPUT VALUES                                                 *
*      *                                                              *
*      AREA§    DC     A(RETAREA)               ADDRESS OF RETURN ARE *
*      A                                                              *
*      RETLEN   DC     F'1024'                  LENGTH OF RETURN AREA *
*      *                                                              *
*      * OUTPUT AREAS                                                 *
*      *                                                              *
*      RETCNT   DS     F                        RETURNED RM COUNT     *
*      RETAREA  DS     1024C                    RETURN AREA           *
*      *                                                              *
*      * REQUIRED MAPPINGS                                            *
*      *                                                              *
*               CVT DSECT=YES                                         *
*               IHAECVT                                               *
*               ATRFZQRY                                              *
*               ATRRASM                                               *
*                                                                     *
*    EXAMPLE 5                                                        *
*                                                                     *
*    OPERATION: Obtain Unit Of Recovery information for               *
*    address space 52                                                 *
*                                                                     *
*               ATRQUERY REQUEST=URINFO,AREAADDR=AREA§,AREALEN=RETLEN *
*      ,        X                                                     *
*                     COUNT=RETCNT,ASID=MYASID                        *
*      *                                                              *
*      * INPUT VALUES                                                 *
*      *                                                              *
*      AREA§    DC     A(RETAREA)               ADDRESS OF RETURN ARE *
*      A                                                              *
*      RETLEN   DC     F'1024'                  LENGTH OF RETURN AREA *
*      MYASID   DC     XL2'52'                  ADDRESS SPACE IDENTIF *
*      IER                                                            *
*      *                                                              *
*      * OUTPUT AREAS                                                 *
*      *                                                              *
*      RETCNT   DS     F                        RETURNED RM COUNT     *
*      RETAREA  DS     1024C                    RETURN AREA           *
*      *                                                              *
*      * REQUIRED MAPPINGS                                            *
*      *                                                              *
*               CVT DSECT=YES                                         *
*               IHAECVT                                               *
*               ATRFZQRY                                              *
*               ATRRASM                                               *
*                                                                     *
*                                                                     *
*01* MACRO USAGE NOTES:                                               *
*                                                                     *
*                                                                     *
*    1.  Printing of the macro expansion is controlled by the ZPRINT  *
*        global macro variable.  Any value other than 'NO' will       *
*        result in the macro expansion being printed.  The default is *
*        'YES'.  The following examples illustrate how the ZPRINT     *
*        variable should be set.                                      *
*                                                                     *
*                    GBLC &ZPRINT                                     *
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            *
*                                                                     *
*                                                                     *
*    2.  When using the NOCHECK option in conjunction with the Modify *
*        and/or  Execute  forms,  be  sure  that  it is preceded by a *
*        Modify   or  Execute  form  invocation  which  specifies  or *
*        defaults  to  the  COMPLETE  option.   This insures that the *
*        parameter  list  is  initialized completely.   The parameter *
*        list  field which identifies the version number of the macro *
*        is only set when the Standard form or the Complete option of *
*        the  Execute/Modify  form  is  used,  or  when  PLISTVER  is *
*        explicitly  specified.  Be sure that the resulting parameter *
*        list version number covers all the keys that you use.        *
*                                                                     *
*                                                                     *
*    3.  The ATRQUERY macro supports multiple versions. The macro key *
*        list  below  contains the version level in which the key was *
*        first  introduced.  Positionals  are  identified by the word *
*        'Positional'  followed by the numeric value of its position. *
*        Nested  positionals  are  preceded  by their outer key.  The *
*        lowest value represents the original version and the highest *
*        value  represents  the  most  recent version of the ATRQUERY *
*        macro.    When  specifying  PLISTVER,  be sure that it is at *
*        least  as high as the highest version number of all the keys *
*        being used.                                                  *
*                                                                     *
*        VERSION   KEY                                                *
*                                                                     *
*              1      AREAADDR                                        *
*                     AREALEN                                         *
*                     ASID                                            *
*                     COUNT                                           *
*                     GTID                                            *
*                     LUWID                                           *
*                     REQUEST                                         *
*                     RMNAME                                          *
*                     SYSNAME                                         *
*                     TID                                             *
*                     URID                                            *
*                     URSTATE                                         *
*                     URTYPE                                          *
*              2      DEFURONLY                                       *
*              3      CURDUR                                          *
*                     EXCLMASK                                        *
*                     EXINFOMASK                                      *
*                     GNAME                                           *
*                     GTIDSTR                                         *
*                     LUWIDSTR                                        *
*                     SORTNUM                                         *
*                     SORTTAB                                         *
*                     SURIDSTR                                        *
*                     SYSNAME                                         *
*                     TIDHIGH                                         *
*                     TIDLOW                                          *
*                     TODBEG                                          *
*                     TODEND                                          *
*                     URIDSTR                                         *
*                     URSTMASK                                        *
*                     WMNAME                                          *
*              4      AREAALET                                        *
*                     AREAOPT                                         *
*                     GNAME                                           *
*                     RCNUM                                           *
*                     RCTABLE                                         *
*                     SYSNAME                                         *
*              5      XID                                             *
*                     XIDBQUALSTR                                     *
*                     XIDFORMATID                                     *
*                     XIDGTRIDSTR                                     *
*              6      SURID                                           *
*              7      METADATA                                        *
*                                                                     *
*                                                                     *
*                                                                     *
*01* CHANGE ACTIVITY:                                                 *
*                                                                     *
*   Flag LineItem  FMID    Date   ID    Comment                       *
*                                                                     *
*    $L0=RRSCS    HBB6603 950907 PD00EV:  RRS Initial Release         *
*    $L1=RRSCS    HBB6603 960201 PD00EV:  Add ASM interface           *
*    $L2=RRSCS    HBB6603 960405 PD00EV:  Support TRPC Interfaces     *
*                                         (TID/GTID)                  *
*    $P1=PQC2896  HBB6603 961118 PD00EV:  Update documentation        *
*    $P2=PUX0330  HBB6605 970815 PDMF:  Add Deferred UR queue to      *
*                                         panels                      *
*    $L3=RRSSV    HBB6606 971208 B7HGRP:  Serviceability              *
*                                         enhancements.               *
*    $01=OW33138  HBB6606 980515 B7HGRP:  Fix the serviceability      *
*                                         enhancements.               *
*    $P3=PVTnnnn  HBB6608 980801 B7HGEJ:  Correct PListVer for        *
*                                         keyword invocations.        *
*    $L4=RRSSM    HBB6608 980801 B7HGEJ:  Sysplex System Management.  *
*    $L5=RRSSM    HBB6608 981101 B7HGEV:  Sysplex System Management.  *
*    $L6=RRSCT    JBB6609 990401 PDEM:  RRS Cascaded Transactions.    *
*    $P4=PWY0539  JBB6609 990715 PDEM:  Add cascaded UR exclusion     *
*                                         mask.                       *
*    $P5=PWY0627  JBB6609 990715 PDEM:  Change XIDFORMATID filtering. *
*    $02=OW38843  HBB6603 991215 PDEV:  XID Support (reship only).    *
*    $03=OW44170  JBB6609 000419 B7HGBL:  RRS Local Transaction SPE.  *
*    $L7=RRSSC    HBB7705 000415 B7HGBV:  SURID support               *
*    $L8=RRSSC    HBB7705 000925 B7HGBL:  Multisystem Cascaded        *
*    $L9=ME02740  HBB7720 050122 B7HGLH:  (Replaced by RRSPDT)        *
*    $P7=ME02995  HBB7720 050303 B7HGLH:  (Replaced by ME02995        *
*                                         HBB7730)                    *
*    $L9=RRSPDT   HBB7730 040614 B7HGLH:  PID Retrieval Support       *
*    $P6=ME02362  HBB7730 041117 B7HGLH:  Prolog cleanup              *
*    $P7=ME02995  HBB7730 050303 B7HGLH:  Add message text to         *
*                                         ATRQUERY_XINFOMASK_RSVD in  *
*                                         prolog                      *
*    $P8=ME03678  HBB7730 050606 PDF5:  Make generated PLX use a      *
*                                         hardcoded offset to find    *
*                                         the PC number.              *
*    $LA=RRSRML   HBB7730 050721 B7HGBL:  RM Metadata Support         *
*    $P9=ME04202  HBB7730 050816 B7HGBL:  Warning when no Meta Data   *
*                                         log                         *
*    $LB=RRSPPE   HBB7730 060319 B7HGBL:  Pre-Prepare Exit Support    *
****** END OF SPECIFICATIONS *****************************************/
*/*********************************************************************
         MACRO
&XLABEL  ATRQUERY &REQUEST=,&RMNAME=,&GNAME=,&SYSNAME=,&METADATA=,     *
               &WMNAME=,&DEFURONLY=,&EXCLMASK=,&ASID=,&URID=,&URIDSTR=,*
               &SURID=,&SURIDSTR=,&URTYPE=,&URSTATE=,&URSTMASK=,       *
               &LUWID=,&LUWIDSTR=,&TID=,&TIDHIGH=,&TIDLOW=,&GTID=,     *
               &GTIDSTR=,&XID=,&XIDFORMATID=,&XIDGTRIDSTR=,            *
               &XIDBQUALSTR=,&TODBEG=,&TODEND=,&CURDUR=,&EXINFOMASK=,  *
               &SORTTAB=,&SORTNUM=,&AREAADDR=,&AREAALET=,&AREAOPT=,    *
               &AREALEN=,&COUNT=,&RCTABLE=,&RCNUM=,&RETCODE=,&RSNCODE=,*
               &PLISTVER=,&MF=
.*
*                 MACDATE -2006/03/19-<8>
.*
.*******************************************************************
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION
.*******************************************************************
                 GBLC  &ZPRINT     YES=PRINT NO=NO PRINT
                 GBLC  &ZTEST      YES=TEST NO=NO TEST
                 GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX
.*
                 GBLC  &ZATRQUERY  YES=MACRO USED AT LEAST ONCE
.*******************************************************************
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES
.*******************************************************************
                 LCLC  &ZMS        ERROR MESSAGE WORK AREA
                 LCLC  &ZCNDX      SYSNDX CHARACTERS
                 LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED
                 LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR
                 LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE
                 LCLA  &ZAWRK      USED AS A WORK AREA
                 LCLA  &ZASIZ      USED FOR SIZE OF VALUE
                 LCLA  &ZN         NUMERIC WORK VARIABLE
                 LCLC  &ZC         CHARACTER WORK VARIABLE
                 LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE
                 LCLA  &ZTLA       VALUE TOO LONG VARIABLE
                 LCLC  &ZMAC_G     "G" or null
&ZMAC_G          SETC  ''
                 LCLC  &ZMAC_LR
&ZMAC_LR         SETC  'LR'
                 LCLC  &ZMAC_L
&ZMAC_L          SETC  'L'
                 LCLC  &ZMAC_ST
&ZMAC_ST         SETC  'ST'
                 LCLA  &ZMACRET    MACRO RETURN CODE
&ZMACRET         SETA  0           ASSUME NO ERRORS
.*
                 LCLC  &ZCSYSLIST(255)          NONXKEY, POS ARRAY
                 LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()
                 LCLA  &ZPLLEN     PARAMETER LIST LENGTH
                 LCLC  &ZENDBASEPL              End of base PL
                 LCLA  &ZPLWORKA   PARAMETER LIST LENGTH
.*******************************************************************
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS
.*******************************************************************
                 LCLA  &ZI         INDEX FOR ARRAY
                 LCLA  &ZJ         INDEX FOR PARMS
                 LCLA  &ZK         INDEX FOR PARSE
                 LCLA  &ZLO        LOW RANGE VALUE
                 LCLA  &ZHI        HIGH RANGE VALUE
                 LCLC  &ZW         WORK AREA FOR PARM
.********************************************************************
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION
.********************************************************************
                 GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL
                 GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE
                 GBLA  &SYSALVL    SYSSTATE ARCHLVL
                 GBLC  &SYSAM64    SYSSTATE AMODE64
.*
                 AIF   (K'&SYSASCE GT 0).ZSYS4  SYS STATE DEFINED
                 AIF   (K'&SYSSPLV GT 0).ZSYS2  SP LEVEL DEFINED
                 SPLEVEL  TEST
.ZSYS2           ANOP  ,
                 AIF   ('&SYSSPLV' EQ '1').ZSYS3  PRE SP 3.1
                 AIF   ('&SYSSPLV' EQ '2').ZSYS3  PRE SP 3.1
                 SYSSTATE TEST
                 AGO   .ZSYS4
.ZSYS3           ANOP  ,
&SYSASCE         SETC  'P'         ASSUME SYSSTATE PRIMARY
.ZSYS4           ANOP  ,
.*******************************************************************
.***AB.07  DEFINE ALL MACRO VARIABLES
.*******************************************************************
                 LCLC  &XREQUEST   ++ VALUE
                 LCLC  &XRMNAME    ++ NAME
                 LCLC  &XGNAME     ++ NAME
                 LCLC  &XSYSNAME   ++ NAME
                 LCLC  &XMETADATA  ++ VALUE
                 LCLC  &XWMNAME    ++ NAME
                 LCLC  &XRQD1      ++ NAME
                 LCLC  &XDEFURONLY              ++ NAME
                 LCLC  &XEXCLMASK  ++ NAME
                 LCLC  &XASID      ++ NAME
                 LCLC  &XREQD1     ++ NAME
                 LCLC  &XURID      ++ NAME
                 LCLC  &XURIDSTR   ++ NAME
                 LCLC  &XSURID     ++ NAME
                 LCLC  &XSURIDSTR  ++ NAME
                 LCLC  &XURTYPE    ++ VALUE
                 LCLC  &XRQD2      ++ VALUE
                 LCLC  &XURSTATE   ++ VALUE
                 LCLC  &XURSTMASK  ++ VALUE
                 LCLC  &XRQD3      ++ NAME
                 LCLC  &XLUWID     ++ NAME
                 LCLC  &XLUWIDSTR  ++ NAME
                 LCLC  &XTID       ++ NAME
                 LCLC  &XTIDHIGH   ++ NAME
                 LCLC  &XTIDLOW    ++ NAME
                 LCLC  &XRQD6      ++ NAME
                 LCLC  &XGTID      ++ NAME
                 LCLC  &XGTIDSTR   ++ NAME
                 LCLC  &XXID       ++ NAME
                 LCLC  &XXIDFORMATID            ++ NAME
                 LCLC  &XXIDGTRIDSTR            ++ NAME
                 LCLC  &XXIDBQUALSTR            ++ NAME
                 LCLC  &XTODBEG    ++ NAME
                 LCLC  &XTODEND    ++ NAME
                 LCLC  &XCURDUR    ++ NAME
                 LCLC  &XEXINFOMASK             ++ NAME
                 LCLC  &XSORTTAB   ++ NAME
                 LCLC  &XSORTNUM   ++ NAME
                 LCLC  &XAREAADDR  ++ NAME
                 LCLC  &XAREAALET  ++ NAME
                 LCLC  &XAREAOPT   ++ VALUE
                 LCLC  &XAREALEN   ++ NAME
                 LCLC  &XCOUNT     ++ NAME
                 LCLC  &XRCTABLE   ++ NAME
                 LCLC  &XRCNUM     ++ NAME
                 LCLC  &XRETCODE   ++ NAME
                 LCLC  &XRSNCODE   ++ NAME
                 LCLA  &XPLISTVER  ++ VALUE
                 LCLC  &XMF        ++ VALUE
                 LCLC  &XMFCTRL    ++ NAME
                 LCLC  &XMFATTR    ++ VALUE
                 LCLC  &XMFSCK     ++ VALUE
.*******************************************************************
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING
.*******************************************************************
                 LCLC  &ZXREQUEST  ++ INPUT VALUE
                 LCLC  &ZXRMNAME   ++ INPUT NAME
                 LCLC  &ZXGNAME    ++ INPUT NAME
                 LCLC  &ZXSYSNAME  ++ INPUT NAME
                 LCLC  &ZXMETADATA              ++ INPUT VALUE
                 LCLC  &ZXWMNAME   ++ INPUT NAME
                 LCLC  &ZXRQD1     ++ INPUT NAME
                 LCLC  &ZXDEFURONLY             ++ INPUT NAME
                 LCLC  &ZXEXCLMASK              ++ INPUT NAME
                 LCLC  &ZXASID     ++ INPUT NAME
                 LCLC  &ZXREQD1    ++ INPUT NAME
                 LCLC  &ZXURID     ++ INPUT NAME
                 LCLC  &ZXURIDSTR  ++ INPUT NAME
                 LCLC  &ZXSURID    ++ INPUT NAME
                 LCLC  &ZXSURIDSTR              ++ INPUT NAME
                 LCLC  &ZXURTYPE   ++ INPUT VALUE
                 LCLC  &ZXRQD2     ++ INPUT VALUE
                 LCLC  &ZXURSTATE  ++ INPUT VALUE
                 LCLC  &ZXURSTMASK              ++ INPUT VALUE
                 LCLC  &ZXRQD3     ++ INPUT NAME
                 LCLC  &ZXLUWID    ++ INPUT NAME
                 LCLC  &ZXLUWIDSTR              ++ INPUT NAME
                 LCLC  &ZXTID      ++ INPUT NAME
                 LCLC  &ZXTIDHIGH  ++ INPUT NAME
                 LCLC  &ZXTIDLOW   ++ INPUT NAME
                 LCLC  &ZXRQD6     ++ INPUT NAME
                 LCLC  &ZXGTID     ++ INPUT NAME
                 LCLC  &ZXGTIDSTR  ++ INPUT NAME
                 LCLC  &ZXXID      ++ INPUT NAME
                 LCLC  &ZXXIDFORMATID           ++ INPUT NAME
                 LCLC  &ZXXIDGTRIDSTR           ++ INPUT NAME
                 LCLC  &ZXXIDBQUALSTR           ++ INPUT NAME
                 LCLC  &ZXTODBEG   ++ INPUT NAME
                 LCLC  &ZXTODEND   ++ INPUT NAME
                 LCLC  &ZXCURDUR   ++ INPUT NAME
                 LCLC  &ZXEXINFOMASK            ++ INPUT NAME
                 LCLC  &ZXSORTTAB  ++ INPUT NAME
                 LCLC  &ZXSORTNUM  ++ INPUT NAME
                 LCLC  &ZXAREAADDR              ++ INPUT NAME
                 LCLC  &ZXAREAALET              ++ INPUT NAME
                 LCLC  &ZXAREAOPT  ++ INPUT VALUE
                 LCLC  &ZXAREALEN  ++ INPUT NAME
                 LCLC  &ZXCOUNT    ++ OUTPUT NAME
                 LCLC  &ZXRCTABLE  ++ INPUT NAME
                 LCLC  &ZXRCNUM    ++ OUTPUT NAME
                 LCLC  &ZXRETCODE  ++ OUTPUT NAME
                 LCLC  &ZXRSNCODE  ++ OUTPUT NAME
                 LCLC  &ZXPLISTVER              ++ INPUT VALUE
                 LCLC  &ZXMF       ++ INPUT VALUE
                 LCLC  &ZXMFCTRL   ++ INPUT NAME
                 LCLC  &ZXMFATTR   ++ INPUT VALUE
                 LCLC  &ZXMFSCK    ++ INPUT VALUE
.********************************************************************
.***AC.PLV01  PROCESS PLISTVER                                      *
.********************************************************************
&XPLISTVER      SETA  1
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0
&XPLISTVER      SETA  8
.ZPLV0          ANOP  ,
.*
                AIF   ('&GNAME' EQ '').ZPLV1E
                AIF   (&XPLISTVER GE 4).ZPLV1E
&XPLISTVER      SETA  4
.ZPLV1E         ANOP  ,
.*
                AIF   ('&METADATA' EQ '').ZPLV2E
                AIF   (&XPLISTVER GE 7).ZPLV2E
&XPLISTVER      SETA  7
.ZPLV2E         ANOP  ,
.*
                AIF   ('&WMNAME' EQ '').ZPLV3E
                AIF   (&XPLISTVER GE 3).ZPLV3E
&XPLISTVER      SETA  3
.ZPLV3E         ANOP  ,
.*
                AIF   ('&GNAME' EQ '').ZPLV4E
                AIF   (&XPLISTVER GE 4).ZPLV4E
&XPLISTVER      SETA  4
.ZPLV4E         ANOP  ,
.*
                AIF   ('&SYSNAME' EQ '').ZPLV5E
                AIF   (&XPLISTVER GE 3).ZPLV5E
&XPLISTVER      SETA  3
.ZPLV5E         ANOP  ,
.*
                AIF   ('&GNAME' EQ '').ZPLV6E
                AIF   (&XPLISTVER GE 4).ZPLV6E
&XPLISTVER      SETA  4
.ZPLV6E         ANOP  ,
.*
                AIF   ('&SYSNAME' EQ '').ZPLV7E
                AIF   (&XPLISTVER GE 4).ZPLV7E
&XPLISTVER      SETA  4
.ZPLV7E         ANOP  ,
.*
                AIF   ('&DEFURONLY' EQ '').ZPLV8E
                AIF   (&XPLISTVER GE 2).ZPLV8E
&XPLISTVER      SETA  2
.ZPLV8E         ANOP  ,
.*
                AIF   ('&EXCLMASK' EQ '').ZPLV9E
                AIF   (&XPLISTVER GE 3).ZPLV9E
&XPLISTVER      SETA  3
.ZPLV9E         ANOP  ,
.*
                AIF   ('&URIDSTR' EQ '').ZPLV10E
                AIF   (&XPLISTVER GE 3).ZPLV10E
&XPLISTVER      SETA  3
.ZPLV10E        ANOP  ,
.*
                AIF   ('&SURID' EQ '').ZPLV11E
                AIF   (&XPLISTVER GE 6).ZPLV11E
&XPLISTVER      SETA  6
.ZPLV11E        ANOP  ,
.*
                AIF   ('&SURIDSTR' EQ '').ZPLV12E
                AIF   (&XPLISTVER GE 3).ZPLV12E
&XPLISTVER      SETA  3
.ZPLV12E        ANOP  ,
.*
                AIF   ('&URSTMASK' EQ '').ZPLV13E
                AIF   (&XPLISTVER GE 3).ZPLV13E
&XPLISTVER      SETA  3
.ZPLV13E        ANOP  ,
.*
                AIF   ('&LUWIDSTR' EQ '').ZPLV14E
                AIF   (&XPLISTVER GE 3).ZPLV14E
&XPLISTVER      SETA  3
.ZPLV14E        ANOP  ,
.*
                AIF   ('&TIDHIGH' EQ '').ZPLV15E
                AIF   (&XPLISTVER GE 3).ZPLV15E
&XPLISTVER      SETA  3
.ZPLV15E        ANOP  ,
.*
                AIF   ('&TIDLOW' EQ '').ZPLV16E
                AIF   (&XPLISTVER GE 3).ZPLV16E
&XPLISTVER      SETA  3
.ZPLV16E        ANOP  ,
.*
                AIF   ('&GTIDSTR' EQ '').ZPLV17E
                AIF   (&XPLISTVER GE 3).ZPLV17E
&XPLISTVER      SETA  3
.ZPLV17E        ANOP  ,
.*
                AIF   ('&XID' EQ '').ZPLV18E
                AIF   (&XPLISTVER GE 5).ZPLV18E
&XPLISTVER      SETA  5
.ZPLV18E        ANOP  ,
.*
                AIF   ('&XIDFORMATID' EQ '').ZPLV19E
                AIF   (&XPLISTVER GE 5).ZPLV19E
&XPLISTVER      SETA  5
.ZPLV19E        ANOP  ,
.*
                AIF   ('&XIDGTRIDSTR' EQ '').ZPLV20E
                AIF   (&XPLISTVER GE 5).ZPLV20E
&XPLISTVER      SETA  5
.ZPLV20E        ANOP  ,
.*
                AIF   ('&XIDBQUALSTR' EQ '').ZPLV21E
                AIF   (&XPLISTVER GE 5).ZPLV21E
&XPLISTVER      SETA  5
.ZPLV21E        ANOP  ,
.*
                AIF   ('&WMNAME' EQ '').ZPLV22E
                AIF   (&XPLISTVER GE 3).ZPLV22E
&XPLISTVER      SETA  3
.ZPLV22E        ANOP  ,
.*
                AIF   ('&TODBEG' EQ '').ZPLV23E
                AIF   (&XPLISTVER GE 3).ZPLV23E
&XPLISTVER      SETA  3
.ZPLV23E        ANOP  ,
.*
                AIF   ('&TODEND' EQ '').ZPLV24E
                AIF   (&XPLISTVER GE 3).ZPLV24E
&XPLISTVER      SETA  3
.ZPLV24E        ANOP  ,
.*
                AIF   ('&CURDUR' EQ '').ZPLV25E
                AIF   (&XPLISTVER GE 3).ZPLV25E
&XPLISTVER      SETA  3
.ZPLV25E        ANOP  ,
.*
                AIF   ('&EXINFOMASK' EQ '').ZPLV26E
                AIF   (&XPLISTVER GE 3).ZPLV26E
&XPLISTVER      SETA  3
.ZPLV26E        ANOP  ,
.*
                AIF   ('&GNAME' EQ '').ZPLV27E
                AIF   (&XPLISTVER GE 3).ZPLV27E
&XPLISTVER      SETA  3
.ZPLV27E        ANOP  ,
.*
                AIF   ('&SYSNAME' EQ '').ZPLV28E
                AIF   (&XPLISTVER GE 3).ZPLV28E
&XPLISTVER      SETA  3
.ZPLV28E        ANOP  ,
.*
                AIF   ('&SORTTAB' EQ '').ZPLV29E
                AIF   (&XPLISTVER GE 3).ZPLV29E
&XPLISTVER      SETA  3
.ZPLV29E        ANOP  ,
.*
                AIF   ('&SORTNUM' EQ '').ZPLV30E
                AIF   (&XPLISTVER GE 3).ZPLV30E
&XPLISTVER      SETA  3
.ZPLV30E        ANOP  ,
.*
                AIF   ('&AREAALET' EQ '').ZPLV31E
                AIF   (&XPLISTVER GE 4).ZPLV31E
&XPLISTVER      SETA  4
.ZPLV31E        ANOP  ,
.*
                AIF   ('&AREAOPT' EQ '').ZPLV32E
                AIF   (&XPLISTVER GE 4).ZPLV32E
&XPLISTVER      SETA  4
.ZPLV32E        ANOP  ,
.*
                AIF   ('&RCTABLE' EQ '').ZPLV33E
                AIF   (&XPLISTVER GE 4).ZPLV33E
&XPLISTVER      SETA  4
.ZPLV33E        ANOP  ,
.*
                AIF   ('&RCNUM' EQ '').ZPLV34E
                AIF   (&XPLISTVER GE 4).ZPLV34E
&XPLISTVER      SETA  4
.ZPLV34E        ANOP  ,
.*
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE
.*-------------------------------------------------------------------
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM
&ZMS            SETC  '"PLISTVER='
&ZMS            SETC  '&ZMS.&PLISTVER"'
&ZMS            SETC  '&ZMS "PLISTVER"'
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE
                AGO   .ZPVCK2
.ZPVCK3         ANOP  ,
.*-------------------------------------------------------------------
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2
&ZMS            SETC  '"PLISTVER='
&ZMS            SETC  '&ZMS.&PLISTVER"'
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE
                AGO   .ZPVCKE
.ZPVCK2         ANOP  ,
.*-------------------------------------------------------------------
&ZCVAL          SETC  '&PLISTVER(1)'
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC
                AIF   (&ZN LT 1).ZPVCK6    TOO LOW
                AIF   (&ZN LE 8).ZPVCK4A   NOT HIGH
.ZPVCK6         ANOP  ,
&ZMS            SETC  '"PLISTVER='
&ZMS            SETC  '&ZMS.&PLISTVER"'
&ZMS            SETC  '&ZMS THE RANGE IS "1-8"'
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE
&XPLISTVER      SETA  8
                AGO   .ZPVCKE
.*-------------------------------------------------------------------
.ZPVCK4A        ANOP  ,
                AIF   (&ZN GE &XPLISTVER).ZPVCK4
&ZMS            SETC  'PLISTVER='
&ZMS            SETC  '&ZMS.&PLISTVER(1)'
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'
&ZMS            SETC  '&ZMS &XPLISTVER'
                MNOTE 8,' &ZMS IS REQUIRED.'
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE
                AGO   .ZPVCK5
.ZPVCK4         ANOP  ,
&XPLISTVER      SETA  &PLISTVER(1)
.ZPVCK5         ANOP  ,
.ZPVCKE         ANOP  ,
.********************************************************************
.***AG.MF01 PROCESS MF MACRO FORMS
.********************************************************************
                 ACTR  10000
.*------------------------------------------------------------------
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
&XMF             SETC  ''          INITIALIZE XVARIABLE
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG146           ANOP  ,
&ZTLC            SETC 'S'
                 AIF   ('&MF(1)' NE '&ZTLC').ZG147
&XMF             SETC  'S'         SET KEYWORD
&XMFSCK          SETC  'COMPLETE'  SET XMFSCK
                 AIF   (N'&MF LE 1).ZG146A      CK NUM
&ZMS             SETC  '"MF='
&ZMS             SETC  '&ZMS.&MF"'
&ZMS             SETC  '&ZMS "MF"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG146A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG147           ANOP  ,
&ZTLC            SETC 'L'
                 AIF   ('&MF(1)' NE '&ZTLC').ZG154
&XMF             SETC  'L'         SET KEYWORD
                 AIF   (N'&MF LE 3).ZG147A      CK NUM
&ZMS             SETC  '"MF='
&ZMS             SETC  '&ZMS.&MF"'
&ZMS             SETC  '&ZMS "MF"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG147A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKCTL08 -MF(L) SPECIAL CHECK
                 AIF   (N'&SYSLIST NE 0).ZG147B  POSITIONALS?
                 AIF   ('&REQUEST' NE '').ZG147B  KEYS?
                 AIF   ('&RMNAME' NE '').ZG147B  KEYS?
                 AIF   ('&GNAME' NE '').ZG147B  KEYS?
                 AIF   ('&SYSNAME' NE '').ZG147B  KEYS?
                 AIF   ('&METADATA' NE '').ZG147B  KEYS?
                 AIF   ('&WMNAME' NE '').ZG147B  KEYS?
                 AIF   ('&DEFURONLY' NE '').ZG147B  KEYS?
                 AIF   ('&EXCLMASK' NE '').ZG147B  KEYS?
                 AIF   ('&ASID' NE '').ZG147B   KEYS?
                 AIF   ('&URID' NE '').ZG147B   KEYS?
                 AIF   ('&URIDSTR' NE '').ZG147B  KEYS?
                 AIF   ('&SURID' NE '').ZG147B  KEYS?
                 AIF   ('&SURIDSTR' NE '').ZG147B  KEYS?
                 AIF   ('&URTYPE' NE '').ZG147B  KEYS?
                 AIF   ('&URSTATE' NE '').ZG147B  KEYS?
                 AIF   ('&URSTMASK' NE '').ZG147B  KEYS?
                 AIF   ('&LUWID' NE '').ZG147B  KEYS?
                 AIF   ('&LUWIDSTR' NE '').ZG147B  KEYS?
                 AIF   ('&TID' NE '').ZG147B    KEYS?
                 AIF   ('&TIDHIGH' NE '').ZG147B  KEYS?
                 AIF   ('&TIDLOW' NE '').ZG147B  KEYS?
                 AIF   ('&GTID' NE '').ZG147B   KEYS?
                 AIF   ('&GTIDSTR' NE '').ZG147B  KEYS?
                 AIF   ('&XID' NE '').ZG147B    KEYS?
                 AIF   ('&XIDFORMATID' NE '').ZG147B  KEYS?
                 AIF   ('&XIDGTRIDSTR' NE '').ZG147B  KEYS?
                 AIF   ('&XIDBQUALSTR' NE '').ZG147B  KEYS?
                 AIF   ('&TODBEG' NE '').ZG147B  KEYS?
                 AIF   ('&TODEND' NE '').ZG147B  KEYS?
                 AIF   ('&CURDUR' NE '').ZG147B  KEYS?
                 AIF   ('&EXINFOMASK' NE '').ZG147B  KEYS?
                 AIF   ('&SORTTAB' NE '').ZG147B  KEYS?
                 AIF   ('&SORTNUM' NE '').ZG147B  KEYS?
                 AIF   ('&AREAADDR' NE '').ZG147B  KEYS?
                 AIF   ('&AREAALET' NE '').ZG147B  KEYS?
                 AIF   ('&AREAOPT' NE '').ZG147B  KEYS?
                 AIF   ('&AREALEN' NE '').ZG147B  KEYS?
                 AIF   ('&COUNT' NE '').ZG147B  KEYS?
                 AIF   ('&RCTABLE' NE '').ZG147B  KEYS?
                 AIF   ('&RCNUM' NE '').ZG147B  KEYS?
                 AIF   ('&RETCODE' NE '').ZG147B  KEYS?
                 AIF   ('&RSNCODE' NE '').ZG147B  KEYS?
                 AGO    .ZG147C    INVOCATION OKAY
.ZG147B          ANOP  ,
&ZMS             SETC  'THE "L" FORM OF "MF"'
&ZMS             SETC  '&ZMS CAN ONLY HAVE'
&ZMS             SETC  '&ZMS THE "PLISTVER" KEY'
                 MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG147C          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE
&ZXMFCTRL        SETC  'INPUT'     SET IN/OUTPUT
&XMFCTRL         SETC  '&MF(2,1)'  SET XVARIABLE
                 AIF   (N'&MF(2) GT 1).ZG149B   MULTI PARMS
&XMFCTRL         SETC  '&MF(2)'    SET XVARIABLE
.ZG149B          AIF   (K'&MF(2) GT 0).ZG149C
&ZXMFCTRL        SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  'WHEN "L" IS SPECIFIED'
&ZMS             SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'
                 MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG149C          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED
                 AIF   (K'&ZXMFCTRL LE 0).ZG149P  NOT I/O
                 AIF   ('&XMFCTRL'(1,1) NE '(').ZG149P
&ZXMFCTRL        SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  '"MF='
&ZMS             SETC  '&ZMS.&MF"'
&ZMS             SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'
                 MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG149P          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE
&ZXMFATTR        SETC  'INPUT'     SET IN/OUTPUT
&XMFATTR         SETC  '0D'
                 AIF   (K'&MF(3) LE 0).ZG152B   PARM
&XMFATTR         SETC  '&MF(3,1)'  SET XVARIABLE
                 AIF   (N'&MF(3) GT 1).ZG152B   MULTI
&XMFATTR         SETC  '&MF(3)'    SET XVARIABLE
.ZG152B          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED
                 AIF   (K'&ZXMFATTR LE 0).ZG152P  NOT I/O
                 AIF   ('&XMFATTR'(1,1) NE '(').ZG152P
&ZXMFATTR        SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  '"MF='
&ZMS             SETC  '&ZMS.&MF"'
&ZMS             SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'
                 MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG152P          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH
                 AIF   (K'&ZXMFATTR LE 0).ZG152S  NOT I/O
                 AIF   (K'&XMFATTR LE 60).ZG152S  LNG OK
&ZXMFATTR        SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  '"MF='
&ZMS             SETC  '&ZMS.&MF"'
&ZMS             SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'
                 MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG152S          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG154           ANOP  ,
&ZTLC            SETC 'M'
                 AIF   ('&MF(1)' NE '&ZTLC').ZG163
&XMF             SETC  'M'         SET KEYWORD
                 AIF   (N'&MF LE 3).ZG154A      CK NUM
&ZMS             SETC  '"MF='
&ZMS             SETC  '&ZMS.&MF"'
&ZMS             SETC  '&ZMS "MF"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG154A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKCTL09 -MF(M) OUTPUT KEYS SPECIFIED?
                 AIF   ('&COUNT' NE '').ZG154B  OUTPUT?
                 AIF   ('&RCNUM' NE '').ZG154B
                 AGO    .ZG154C    INVOCATION OKAY
.ZG154B          ANOP  ,
&ZMS             SETC  'THE "M" FORM OF "MF" CANNOT'
&ZMS             SETC  '&ZMS HAVE THE FOLLOWING OUTPUT KEY(S)'
&ZMS             SETC  '&ZMS SPECIFIED ON THE INVOCATION:'
&ZMS             SETC  '&ZMS "COUNT"'
&ZMS             SETC  '&ZMS OR "RCNUM"'
                 MNOTE 8,' &ZMS '
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG154C          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE
&ZXMFCTRL        SETC  'INPUT'     SET IN/OUTPUT
&XMFCTRL         SETC  '&MF(2,1)'  SET XVARIABLE
                 AIF   (N'&MF(2) GT 1).ZG156B   MULTI PARMS
&XMFCTRL         SETC  '&MF(2)'    SET XVARIABLE
.ZG156B          AIF   (K'&MF(2) GT 0).ZG156C
&ZXMFCTRL        SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  'WHEN "M" IS SPECIFIED'
&ZMS             SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'
                 MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG156C          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE
                 AIF   (K'&ZXMFCTRL LE 0).ZG156R  NOT I/O
                 AIF   ('&XMFCTRL'(1,1) NE '(').ZG156R
&ZCGPR           SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG156P
                 AIF   (K'&ZCGPR GT 2).ZG156Q
                 AIF   ('&ZCGPR' EQ '0').ZG156Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG156Q  INVALID REG NAME
.ZG156P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG156R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '1').ZG156Q
                 AIF   ('&ZCGPR' LE '12').ZG156R
.ZG156Q          ANOP  ,
&ZMS             SETC  '"MF='
&ZMS             SETC  '&ZMS.&MF"'
&ZMS             SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG156R          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD
&XMFSCK          SETC  ''          INITIALIZE XVARIABLE
.ZG160A   AIF   ('&MF(3)' NE 'COMPLETE').ZG161A
&XMFSCK          SETC  'COMPLETE'  SET KEYWORD
.*-------------------------------------------------------------------
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD
.ZG161A   AIF   ('&MF(3)' NE 'NOCHECK').ZG162A
&XMFSCK          SETC  'NOCHECK'   SET KEYWORD
.*-------------------------------------------------------------------
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD
.ZG162A          AIF   (K'&XMFSCK GT 0).ZG162C  KEYWORD
                 AIF   (K'&MF(3) LE 0).ZG162B
&ZMS             SETC  '"MF='
&ZMS             SETC  '&ZMS.&MF"'
&ZMS             SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'
&ZMS             SETC  '&ZMS "COMPLETE"'
&ZMS             SETC  '&ZMS OR "NOCHECK".'
                 MNOTE 8,' &ZMS '
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG162B          ANOP  ,
&XMFSCK          SETC  'COMPLETE'  SET DEFAULT KEYWORD
.ZG162C          ANOP  ,
&ZXMFSCK         SETC  'INPUT'     SET IN/OUTPUT
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG163           ANOP  ,
&ZTLC            SETC 'E'
                 AIF   ('&MF(1)' NE '&ZTLC').ZG172
&XMF             SETC  'E'         SET KEYWORD
                 AIF   (N'&MF LE 3).ZG163A      CK NUM
&ZMS             SETC  '"MF='
&ZMS             SETC  '&ZMS.&MF"'
&ZMS             SETC  '&ZMS "MF"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG163A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE
&ZXMFCTRL        SETC  'INPUT'     SET IN/OUTPUT
&XMFCTRL         SETC  '&MF(2,1)'  SET XVARIABLE
                 AIF   (N'&MF(2) GT 1).ZG165B   MULTI PARMS
&XMFCTRL         SETC  '&MF(2)'    SET XVARIABLE
.ZG165B          AIF   (K'&MF(2) GT 0).ZG165C
&ZXMFCTRL        SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  'WHEN "E" IS SPECIFIED'
&ZMS             SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'
                 MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG165C          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE
                 AIF   (K'&ZXMFCTRL LE 0).ZG165R  NOT I/O
                 AIF   ('&XMFCTRL'(1,1) NE '(').ZG165R
&ZCGPR           SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG165P
                 AIF   (K'&ZCGPR GT 2).ZG165Q
                 AIF   ('&ZCGPR' EQ '0').ZG165Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG165Q  INVALID REG NAME
.ZG165P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG165R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '1').ZG165Q
                 AIF   ('&ZCGPR' LE '12').ZG165R
.ZG165Q          ANOP  ,
&ZMS             SETC  '"MF='
&ZMS             SETC  '&ZMS.&MF"'
&ZMS             SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG165R          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD
&XMFSCK          SETC  ''          INITIALIZE XVARIABLE
.ZG169A   AIF   ('&MF(3)' NE 'COMPLETE').ZG170A
&XMFSCK          SETC  'COMPLETE'  SET KEYWORD
.*-------------------------------------------------------------------
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD
.ZG170A   AIF   ('&MF(3)' NE 'NOCHECK').ZG171A
&XMFSCK          SETC  'NOCHECK'   SET KEYWORD
.*-------------------------------------------------------------------
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD
.ZG171A          AIF   (K'&XMFSCK GT 0).ZG171C  KEYWORD
                 AIF   (K'&MF(3) LE 0).ZG171B
&ZMS             SETC  '"MF='
&ZMS             SETC  '&ZMS.&MF"'
&ZMS             SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'
&ZMS             SETC  '&ZMS "COMPLETE"'
&ZMS             SETC  '&ZMS OR "NOCHECK".'
                 MNOTE 8,' &ZMS '
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG171B          ANOP  ,
&XMFSCK          SETC  'COMPLETE'  SET DEFAULT KEYWORD
.ZG171C          ANOP  ,
&ZXMFSCK         SETC  'INPUT'     SET IN/OUTPUT
.*------------------------------------------------------------------
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG172           ANOP  ,
&ZXMF            SETC  'INPUT'     SET IN/OUTPUT
                 AIF   (K'&XMF GT 0).ZG172E     VALID ARG
                 AIF   (T'&MF EQ 'O').ZG172D    OMITTED
&ZASYSLNDX       SETA  0
.ZG172A          ANOP  ,           POSITIONAL MACRO KEY
&ZASYSLNDX       SETA  &ZASYSLNDX+1
                 AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG172C
&ZTLC            SETC 'MF'
                 AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG172A
.ZG172B          ANOP  ,
&ZXMF            SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  'THE "MF" KEY'
&ZMS             SETC  '&ZMS MUST CONTAIN ONE'
                 MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG172E
.ZG172C          ANOP  ,
&ZXMF            SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  '"MF='
&ZMS             SETC  '&ZMS.&MF"'
&ZMS             SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'
&ZMS             SETC  '&ZMS "S",'
&ZMS             SETC  '&ZMS "L",'
&ZMS             SETC  '&ZMS "M",'
&ZMS             SETC  '&ZMS OR "E".'
                 MNOTE 8,' &ZMS '
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG172E
.ZG172D          ANOP  ,
&XMF             SETC  'S'         SET DEFAULT KEYWORD
&XMFSCK          SETC  'COMPLETE'  COMPLETE CHECKING
.ZG172E          ANOP  ,
.********************************************************************
.***AG.MF02  FULL MACRO SYNTAX CHECKING
.********************************************************************
                 ACTR  10000
.*-------------------------------------------------------------------
.***AG.MF03 MF=(SLME)
                 AIF   ('&XMF' EQ 'L').ZGMFX
                 AIF   ('&XMFSCK' NE 'COMPLETE').ZGMFX
.*------------------------------------------------------------------
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
&XREQUEST        SETC  ''          INITIALIZE XVARIABLE
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG3             ANOP  ,
                 AIF   (K'&REQUEST(1) LE 0).ZG3A
&ZTLC            SETC 'RMINFO'
                 AIF   ('&REQUEST(1)' NE '&ZTLC').ZG16
&XREQUEST        SETC  'RMINFO'    SET KEYWORD
                 AIF   (N'&REQUEST LE 1).ZG3A   CK NUM
&ZMS             SETC  '"REQUEST='
&ZMS             SETC  '&ZMS.&REQUEST"'
&ZMS             SETC  '&ZMS "REQUEST"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG3A            ANOP  ,
.*------------------------------------------------------------------
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
&ZCVAL           SETC ''           CLEAR ERROR KEY ACCUMULATOR
.ZG3A0           AIF   (K'&WMNAME LE 0).ZG3A1   OK
&ZCVAL           SETC '&ZCVAL WMNAME'           INCORRECT KEY USED
.ZG3A1           AIF   (K'&DEFURONLY LE 0).ZG3A2  OK
&ZCVAL           SETC '&ZCVAL DEFURONLY'        INCORRECT KEY USED
.ZG3A2           AIF   (K'&EXCLMASK LE 0).ZG3A3  OK
&ZCVAL           SETC '&ZCVAL EXCLMASK'         INCORRECT KEY USED
.ZG3A3           AIF   (K'&ASID LE 0).ZG3A4     OK
&ZCVAL           SETC '&ZCVAL ASID'             INCORRECT KEY USED
.ZG3A4           AIF   (K'&URID LE 0).ZG3A5     OK
&ZCVAL           SETC '&ZCVAL URID'             INCORRECT KEY USED
.ZG3A5           AIF   (K'&URIDSTR LE 0).ZG3A6  OK
&ZCVAL           SETC '&ZCVAL URIDSTR'          INCORRECT KEY USED
.ZG3A6           AIF   (K'&SURID LE 0).ZG3A7    OK
&ZCVAL           SETC '&ZCVAL SURID'            INCORRECT KEY USED
.ZG3A7           AIF   (K'&SURIDSTR LE 0).ZG3A8  OK
&ZCVAL           SETC '&ZCVAL SURIDSTR'         INCORRECT KEY USED
.ZG3A8           AIF   (K'&URTYPE LE 0).ZG3A9   OK
&ZCVAL           SETC '&ZCVAL URTYPE'           INCORRECT KEY USED
.ZG3A9           AIF   (K'&URSTATE LE 0).ZG3A10  OK
&ZCVAL           SETC '&ZCVAL URSTATE'          INCORRECT KEY USED
.ZG3A10          AIF   (K'&URSTMASK LE 0).ZG3A11  OK
&ZCVAL           SETC '&ZCVAL URSTMASK'         INCORRECT KEY USED
.ZG3A11          AIF   (K'&LUWID LE 0).ZG3A12   OK
&ZCVAL           SETC '&ZCVAL LUWID'            INCORRECT KEY USED
.ZG3A12          AIF   (K'&LUWIDSTR LE 0).ZG3A13  OK
&ZCVAL           SETC '&ZCVAL LUWIDSTR'         INCORRECT KEY USED
.ZG3A13          AIF   (K'&TID LE 0).ZG3A14     OK
&ZCVAL           SETC '&ZCVAL TID'              INCORRECT KEY USED
.ZG3A14          AIF   (K'&TIDHIGH LE 0).ZG3A15  OK
&ZCVAL           SETC '&ZCVAL TIDHIGH'          INCORRECT KEY USED
.ZG3A15          AIF   (K'&TIDLOW LE 0).ZG3A16  OK
&ZCVAL           SETC '&ZCVAL TIDLOW'           INCORRECT KEY USED
.ZG3A16          AIF   (K'&GTID LE 0).ZG3A17    OK
&ZCVAL           SETC '&ZCVAL GTID'             INCORRECT KEY USED
.ZG3A17          AIF   (K'&GTIDSTR LE 0).ZG3A18  OK
&ZCVAL           SETC '&ZCVAL GTIDSTR'          INCORRECT KEY USED
.ZG3A18          AIF   (K'&XID LE 0).ZG3A19     OK
&ZCVAL           SETC '&ZCVAL XID'              INCORRECT KEY USED
.ZG3A19          AIF   (K'&XIDFORMATID LE 0).ZG3A20  OK
&ZCVAL           SETC '&ZCVAL XIDFORMATID'      INCORRECT KEY USED
.ZG3A20          AIF   (K'&XIDGTRIDSTR LE 0).ZG3A21  OK
&ZCVAL           SETC '&ZCVAL XIDGTRIDSTR'      INCORRECT KEY USED
.ZG3A21          AIF   (K'&XIDBQUALSTR LE 0).ZG3A22  OK
&ZCVAL           SETC '&ZCVAL XIDBQUALSTR'      INCORRECT KEY USED
.ZG3A22          AIF   (K'&TODBEG LE 0).ZG3A23  OK
&ZCVAL           SETC '&ZCVAL TODBEG'           INCORRECT KEY USED
.ZG3A23          AIF   (K'&TODEND LE 0).ZG3A24  OK
&ZCVAL           SETC '&ZCVAL TODEND'           INCORRECT KEY USED
.ZG3A24          AIF   (K'&CURDUR LE 0).ZG3A25  OK
&ZCVAL           SETC '&ZCVAL CURDUR'           INCORRECT KEY USED
.ZG3A25          AIF   (K'&EXINFOMASK LE 0).ZG3A26  OK
&ZCVAL           SETC '&ZCVAL EXINFOMASK'       INCORRECT KEY USED
.ZG3A26          AIF   (K'&SORTTAB LE 0).ZG3A27  OK
&ZCVAL           SETC '&ZCVAL SORTTAB'          INCORRECT KEY USED
.ZG3A27          AIF   (K'&SORTNUM LE 0).ZG3A28  OK
&ZCVAL           SETC '&ZCVAL SORTNUM'          INCORRECT KEY USED
.ZG3A28          AIF   (K'&ZCVAL LE 0).ZG3A29   OK
&ZCVAL           SETC '&ZCVAL'(2,K'&ZCVAL-1)
                 AIF  (K'&ZCVAL LE 160).ZG3A29A
&ZCVAL           SETC '&ZCVAL'(1,160)
&ZCVAL           SETC '&ZCVAL....'
.ZG3A29A         ANOP
&ZMS             SETC  '"REQUEST'
&ZMS             SETC  '&ZMS.=&REQUEST"'
&ZMS             SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'
                 MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG3A29          ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&RMNAME LE 1).ZG5A    CK NUM
&ZMS             SETC  '"RMNAME='
&ZMS             SETC  '&ZMS.&RMNAME"'
&ZMS             SETC  '&ZMS "RMNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG5A            ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXRMNAME        SETC  'INPUT'     SET IN/OUTPUT
&XRMNAME         SETC  'NONE'
                 AIF   (K'&RMNAME(1) LE 0).ZG5B  PARM
&XRMNAME         SETC  '&RMNAME(1)'             SET XVARIABLE
                 AIF   (N'&RMNAME GT 1).ZG5B    MULTI
&XRMNAME         SETC  '&RMNAME'   SET XVARIABLE
.ZG5B            ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXRMNAME LE 0).ZG5R  NOT I/O
         AIF   ('&XRMNAME' EQ 'NONE').ZG5R
                 AIF   ('&XRMNAME'(1,1) NE '(').ZG5R
&ZCGPR           SETC  '&XRMNAME'(2,K'&XRMNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG5P
                 AIF   (K'&ZCGPR GT 2).ZG5Q
                 AIF   ('&ZCGPR' EQ '0').ZG5Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG5Q   INVALID REG NAME
.ZG5P            ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG5R   NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG5Q
                 AIF   ('&ZCGPR' LE '12').ZG5R
.ZG5Q            ANOP  ,
&ZMS             SETC  '"RMNAME='
&ZMS             SETC  '&ZMS.&RMNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG5R            ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&GNAME LE 1).ZG6A     CK NUM
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS "GNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG6A            ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXGNAME         SETC  'INPUT'     SET IN/OUTPUT
&XGNAME          SETC  'CURRENT_GNAME'
                 AIF   (K'&GNAME(1) LE 0).ZG6B  PARM
&XGNAME          SETC  '&GNAME(1)'              SET XVARIABLE
                 AIF   (N'&GNAME GT 1).ZG6B     MULTI
&XGNAME          SETC  '&GNAME'    SET XVARIABLE
.ZG6B            ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXGNAME LE 0).ZG6R   NOT I/O
         AIF   ('&XGNAME' EQ 'CURRENT_GNAME').ZG6R
                 AIF   ('&XGNAME'(1,1) NE '(').ZG6R
&ZCGPR           SETC  '&XGNAME'(2,K'&XGNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG6P
                 AIF   (K'&ZCGPR GT 2).ZG6Q
                 AIF   ('&ZCGPR' EQ '0').ZG6Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG6Q   INVALID REG NAME
.ZG6P            ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG6R   NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG6Q
                 AIF   ('&ZCGPR' LE '12').ZG6R
.ZG6Q            ANOP  ,
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG6R            ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&SYSNAME LE 1).ZG9A   CK NUM
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS "SYSNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG9A            ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXSYSNAME       SETC  'INPUT'     SET IN/OUTPUT
&XSYSNAME        SETC  'CURRENT_SYSNAME'
                 AIF   (K'&SYSNAME(1) LE 0).ZG9B  PARM
&XSYSNAME        SETC  '&SYSNAME(1)'            SET XVARIABLE
                 AIF   (N'&SYSNAME GT 1).ZG9B   MULTI
&XSYSNAME        SETC  '&SYSNAME'  SET XVARIABLE
.ZG9B            ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSYSNAME LE 0).ZG9R  NOT I/O
         AIF   ('&XSYSNAME' EQ 'CURRENT_SYSNAME').ZG9R
                 AIF   ('&XSYSNAME'(1,1) NE '(').ZG9R
&ZCGPR           SETC  '&XSYSNAME'(2,K'&XSYSNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG9P
                 AIF   (K'&ZCGPR GT 2).ZG9Q
                 AIF   ('&ZCGPR' EQ '0').ZG9Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG9Q   INVALID REG NAME
.ZG9P            ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG9R   NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG9Q
                 AIF   ('&ZCGPR' LE '12').ZG9R
.ZG9Q            ANOP  ,
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG9R            ANOP  ,
.*------------------------------------------------------------------
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
&XMETADATA       SETC  ''          INITIALIZE XVARIABLE
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG13            ANOP  ,
                 AIF   (K'&METADATA(1) LE 0).ZG13A
&ZTLC            SETC 'NO'
                 AIF   ('&METADATA(1)' NE '&ZTLC').ZG14
&XMETADATA       SETC  'NO'        SET KEYWORD
                 AIF   (N'&METADATA LE 1).ZG13A  CK NUM
&ZMS             SETC  '"METADATA='
&ZMS             SETC  '&ZMS.&METADATA"'
&ZMS             SETC  '&ZMS "METADATA"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG13A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG14            ANOP  ,
&ZTLC            SETC 'YES'
                 AIF   ('&METADATA(1)' NE '&ZTLC').ZG15
&XMETADATA       SETC  'YES'       SET KEYWORD
                 AIF   (N'&METADATA LE 1).ZG14A  CK NUM
&ZMS             SETC  '"METADATA='
&ZMS             SETC  '&ZMS.&METADATA"'
&ZMS             SETC  '&ZMS "METADATA"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG14A           ANOP  ,
.*------------------------------------------------------------------
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG15            ANOP  ,
&ZXMETADATA      SETC  'INPUT'     SET IN/OUTPUT
                 AIF   (K'&XMETADATA GT 0).ZG15E  VALID ARG
                 AIF   (T'&METADATA EQ 'O').ZG15D  OMITTED
&ZASYSLNDX       SETA  0
.ZG15A           ANOP  ,           POSITIONAL MACRO KEY
&ZASYSLNDX       SETA  &ZASYSLNDX+1
                 AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG15C
&ZTLC            SETC 'METADATA'
                 AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG15A
.ZG15B           ANOP  ,
&ZXMETADATA      SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  'THE "METADATA" KEY'
&ZMS             SETC  '&ZMS MUST CONTAIN ONE'
                 MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG15E
.ZG15C           ANOP  ,
&ZXMETADATA      SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  '"METADATA='
&ZMS             SETC  '&ZMS.&METADATA"'
&ZMS             SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'
&ZMS             SETC  '&ZMS "NO"'
&ZMS             SETC  '&ZMS OR "YES".'
                 MNOTE 8,' &ZMS '
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG15E
.ZG15D           ANOP  ,
&XMETADATA       SETC  'NO'        SET DEFAULT KEYWORD
.ZG15E           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG16            ANOP  ,
&ZTLC            SETC 'WMINFO'
                 AIF   ('&REQUEST(1)' NE '&ZTLC').ZG24
&XREQUEST        SETC  'WMINFO'    SET KEYWORD
                 AIF   (N'&REQUEST LE 1).ZG16A  CK NUM
&ZMS             SETC  '"REQUEST='
&ZMS             SETC  '&ZMS.&REQUEST"'
&ZMS             SETC  '&ZMS "REQUEST"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG16A           ANOP  ,
.*------------------------------------------------------------------
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
&ZCVAL           SETC ''           CLEAR ERROR KEY ACCUMULATOR
.ZG16A0          AIF   (K'&RMNAME LE 0).ZG16A1  OK
&ZCVAL           SETC '&ZCVAL RMNAME'           INCORRECT KEY USED
.ZG16A1          AIF   (K'&METADATA LE 0).ZG16A2  OK
&ZCVAL           SETC '&ZCVAL METADATA'         INCORRECT KEY USED
.ZG16A2          AIF   (K'&DEFURONLY LE 0).ZG16A3  OK
&ZCVAL           SETC '&ZCVAL DEFURONLY'        INCORRECT KEY USED
.ZG16A3          AIF   (K'&EXCLMASK LE 0).ZG16A4  OK
&ZCVAL           SETC '&ZCVAL EXCLMASK'         INCORRECT KEY USED
.ZG16A4          AIF   (K'&ASID LE 0).ZG16A5    OK
&ZCVAL           SETC '&ZCVAL ASID'             INCORRECT KEY USED
.ZG16A5          AIF   (K'&URID LE 0).ZG16A6    OK
&ZCVAL           SETC '&ZCVAL URID'             INCORRECT KEY USED
.ZG16A6          AIF   (K'&URIDSTR LE 0).ZG16A7  OK
&ZCVAL           SETC '&ZCVAL URIDSTR'          INCORRECT KEY USED
.ZG16A7          AIF   (K'&SURID LE 0).ZG16A8   OK
&ZCVAL           SETC '&ZCVAL SURID'            INCORRECT KEY USED
.ZG16A8          AIF   (K'&SURIDSTR LE 0).ZG16A9  OK
&ZCVAL           SETC '&ZCVAL SURIDSTR'         INCORRECT KEY USED
.ZG16A9          AIF   (K'&URTYPE LE 0).ZG16A10  OK
&ZCVAL           SETC '&ZCVAL URTYPE'           INCORRECT KEY USED
.ZG16A10         AIF   (K'&URSTATE LE 0).ZG16A11  OK
&ZCVAL           SETC '&ZCVAL URSTATE'          INCORRECT KEY USED
.ZG16A11         AIF   (K'&URSTMASK LE 0).ZG16A12  OK
&ZCVAL           SETC '&ZCVAL URSTMASK'         INCORRECT KEY USED
.ZG16A12         AIF   (K'&LUWID LE 0).ZG16A13  OK
&ZCVAL           SETC '&ZCVAL LUWID'            INCORRECT KEY USED
.ZG16A13         AIF   (K'&LUWIDSTR LE 0).ZG16A14  OK
&ZCVAL           SETC '&ZCVAL LUWIDSTR'         INCORRECT KEY USED
.ZG16A14         AIF   (K'&TID LE 0).ZG16A15    OK
&ZCVAL           SETC '&ZCVAL TID'              INCORRECT KEY USED
.ZG16A15         AIF   (K'&TIDHIGH LE 0).ZG16A16  OK
&ZCVAL           SETC '&ZCVAL TIDHIGH'          INCORRECT KEY USED
.ZG16A16         AIF   (K'&TIDLOW LE 0).ZG16A17  OK
&ZCVAL           SETC '&ZCVAL TIDLOW'           INCORRECT KEY USED
.ZG16A17         AIF   (K'&GTID LE 0).ZG16A18   OK
&ZCVAL           SETC '&ZCVAL GTID'             INCORRECT KEY USED
.ZG16A18         AIF   (K'&GTIDSTR LE 0).ZG16A19  OK
&ZCVAL           SETC '&ZCVAL GTIDSTR'          INCORRECT KEY USED
.ZG16A19         AIF   (K'&XID LE 0).ZG16A20    OK
&ZCVAL           SETC '&ZCVAL XID'              INCORRECT KEY USED
.ZG16A20         AIF   (K'&XIDFORMATID LE 0).ZG16A21  OK
&ZCVAL           SETC '&ZCVAL XIDFORMATID'      INCORRECT KEY USED
.ZG16A21         AIF   (K'&XIDGTRIDSTR LE 0).ZG16A22  OK
&ZCVAL           SETC '&ZCVAL XIDGTRIDSTR'      INCORRECT KEY USED
.ZG16A22         AIF   (K'&XIDBQUALSTR LE 0).ZG16A23  OK
&ZCVAL           SETC '&ZCVAL XIDBQUALSTR'      INCORRECT KEY USED
.ZG16A23         AIF   (K'&TODBEG LE 0).ZG16A24  OK
&ZCVAL           SETC '&ZCVAL TODBEG'           INCORRECT KEY USED
.ZG16A24         AIF   (K'&TODEND LE 0).ZG16A25  OK
&ZCVAL           SETC '&ZCVAL TODEND'           INCORRECT KEY USED
.ZG16A25         AIF   (K'&CURDUR LE 0).ZG16A26  OK
&ZCVAL           SETC '&ZCVAL CURDUR'           INCORRECT KEY USED
.ZG16A26         AIF   (K'&EXINFOMASK LE 0).ZG16A27  OK
&ZCVAL           SETC '&ZCVAL EXINFOMASK'       INCORRECT KEY USED
.ZG16A27         AIF   (K'&SORTTAB LE 0).ZG16A28  OK
&ZCVAL           SETC '&ZCVAL SORTTAB'          INCORRECT KEY USED
.ZG16A28         AIF   (K'&SORTNUM LE 0).ZG16A29  OK
&ZCVAL           SETC '&ZCVAL SORTNUM'          INCORRECT KEY USED
.ZG16A29         AIF   (K'&ZCVAL LE 0).ZG16A30  OK
&ZCVAL           SETC '&ZCVAL'(2,K'&ZCVAL-1)
                 AIF  (K'&ZCVAL LE 160).ZG16A30A
&ZCVAL           SETC '&ZCVAL'(1,160)
&ZCVAL           SETC '&ZCVAL....'
.ZG16A30A        ANOP
&ZMS             SETC  '"REQUEST'
&ZMS             SETC  '&ZMS.=&REQUEST"'
&ZMS             SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'
                 MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG16A30         ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&WMNAME LE 1).ZG18A   CK NUM
&ZMS             SETC  '"WMNAME='
&ZMS             SETC  '&ZMS.&WMNAME"'
&ZMS             SETC  '&ZMS "WMNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG18A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXWMNAME        SETC  'INPUT'     SET IN/OUTPUT
&XWMNAME         SETC  'NONE'
                 AIF   (K'&WMNAME(1) LE 0).ZG18B  PARM
&XWMNAME         SETC  '&WMNAME(1)'             SET XVARIABLE
                 AIF   (N'&WMNAME GT 1).ZG18B   MULTI
&XWMNAME         SETC  '&WMNAME'   SET XVARIABLE
.ZG18B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXWMNAME LE 0).ZG18R  NOT I/O
         AIF   ('&XWMNAME' EQ 'NONE').ZG18R
                 AIF   ('&XWMNAME'(1,1) NE '(').ZG18R
&ZCGPR           SETC  '&XWMNAME'(2,K'&XWMNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG18P
                 AIF   (K'&ZCGPR GT 2).ZG18Q
                 AIF   ('&ZCGPR' EQ '0').ZG18Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG18Q  INVALID REG NAME
.ZG18P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG18R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG18Q
                 AIF   ('&ZCGPR' LE '12').ZG18R
.ZG18Q           ANOP  ,
&ZMS             SETC  '"WMNAME='
&ZMS             SETC  '&ZMS.&WMNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG18R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&GNAME LE 1).ZG19A    CK NUM
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS "GNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG19A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXGNAME         SETC  'INPUT'     SET IN/OUTPUT
&XGNAME          SETC  'CURRENT_GNAME'
                 AIF   (K'&GNAME(1) LE 0).ZG19B  PARM
&XGNAME          SETC  '&GNAME(1)'              SET XVARIABLE
                 AIF   (N'&GNAME GT 1).ZG19B    MULTI
&XGNAME          SETC  '&GNAME'    SET XVARIABLE
.ZG19B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXGNAME LE 0).ZG19R  NOT I/O
         AIF   ('&XGNAME' EQ 'CURRENT_GNAME').ZG19R
                 AIF   ('&XGNAME'(1,1) NE '(').ZG19R
&ZCGPR           SETC  '&XGNAME'(2,K'&XGNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG19P
                 AIF   (K'&ZCGPR GT 2).ZG19Q
                 AIF   ('&ZCGPR' EQ '0').ZG19Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG19Q  INVALID REG NAME
.ZG19P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG19R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG19Q
                 AIF   ('&ZCGPR' LE '12').ZG19R
.ZG19Q           ANOP  ,
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG19R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&SYSNAME LE 1).ZG22A  CK NUM
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS "SYSNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG22A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXSYSNAME       SETC  'INPUT'     SET IN/OUTPUT
&XSYSNAME        SETC  'CURRENT_SYSNAME'
                 AIF   (K'&SYSNAME(1) LE 0).ZG22B  PARM
&XSYSNAME        SETC  '&SYSNAME(1)'            SET XVARIABLE
                 AIF   (N'&SYSNAME GT 1).ZG22B  MULTI
&XSYSNAME        SETC  '&SYSNAME'  SET XVARIABLE
.ZG22B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSYSNAME LE 0).ZG22R  NOT I/O
         AIF   ('&XSYSNAME' EQ 'CURRENT_SYSNAME').ZG22R
                 AIF   ('&XSYSNAME'(1,1) NE '(').ZG22R
&ZCGPR           SETC  '&XSYSNAME'(2,K'&XSYSNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG22P
                 AIF   (K'&ZCGPR GT 2).ZG22Q
                 AIF   ('&ZCGPR' EQ '0').ZG22Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG22Q  INVALID REG NAME
.ZG22P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG22R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG22Q
                 AIF   ('&ZCGPR' LE '12').ZG22R
.ZG22Q           ANOP  ,
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG22R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG24            ANOP  ,
&ZTLC            SETC 'SYSINFO'
                 AIF   ('&REQUEST(1)' NE '&ZTLC').ZG29
&XREQUEST        SETC  'SYSINFO'   SET KEYWORD
                 AIF   (N'&REQUEST LE 1).ZG24A  CK NUM
&ZMS             SETC  '"REQUEST='
&ZMS             SETC  '&ZMS.&REQUEST"'
&ZMS             SETC  '&ZMS "REQUEST"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG24A           ANOP  ,
.*------------------------------------------------------------------
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
&ZCVAL           SETC ''           CLEAR ERROR KEY ACCUMULATOR
.ZG24A0          AIF   (K'&RMNAME LE 0).ZG24A1  OK
&ZCVAL           SETC '&ZCVAL RMNAME'           INCORRECT KEY USED
.ZG24A1          AIF   (K'&METADATA LE 0).ZG24A2  OK
&ZCVAL           SETC '&ZCVAL METADATA'         INCORRECT KEY USED
.ZG24A2          AIF   (K'&WMNAME LE 0).ZG24A3  OK
&ZCVAL           SETC '&ZCVAL WMNAME'           INCORRECT KEY USED
.ZG24A3          AIF   (K'&DEFURONLY LE 0).ZG24A4  OK
&ZCVAL           SETC '&ZCVAL DEFURONLY'        INCORRECT KEY USED
.ZG24A4          AIF   (K'&EXCLMASK LE 0).ZG24A5  OK
&ZCVAL           SETC '&ZCVAL EXCLMASK'         INCORRECT KEY USED
.ZG24A5          AIF   (K'&ASID LE 0).ZG24A6    OK
&ZCVAL           SETC '&ZCVAL ASID'             INCORRECT KEY USED
.ZG24A6          AIF   (K'&URID LE 0).ZG24A7    OK
&ZCVAL           SETC '&ZCVAL URID'             INCORRECT KEY USED
.ZG24A7          AIF   (K'&URIDSTR LE 0).ZG24A8  OK
&ZCVAL           SETC '&ZCVAL URIDSTR'          INCORRECT KEY USED
.ZG24A8          AIF   (K'&SURID LE 0).ZG24A9   OK
&ZCVAL           SETC '&ZCVAL SURID'            INCORRECT KEY USED
.ZG24A9          AIF   (K'&SURIDSTR LE 0).ZG24A10  OK
&ZCVAL           SETC '&ZCVAL SURIDSTR'         INCORRECT KEY USED
.ZG24A10         AIF   (K'&URTYPE LE 0).ZG24A11  OK
&ZCVAL           SETC '&ZCVAL URTYPE'           INCORRECT KEY USED
.ZG24A11         AIF   (K'&URSTATE LE 0).ZG24A12  OK
&ZCVAL           SETC '&ZCVAL URSTATE'          INCORRECT KEY USED
.ZG24A12         AIF   (K'&URSTMASK LE 0).ZG24A13  OK
&ZCVAL           SETC '&ZCVAL URSTMASK'         INCORRECT KEY USED
.ZG24A13         AIF   (K'&LUWID LE 0).ZG24A14  OK
&ZCVAL           SETC '&ZCVAL LUWID'            INCORRECT KEY USED
.ZG24A14         AIF   (K'&LUWIDSTR LE 0).ZG24A15  OK
&ZCVAL           SETC '&ZCVAL LUWIDSTR'         INCORRECT KEY USED
.ZG24A15         AIF   (K'&TID LE 0).ZG24A16    OK
&ZCVAL           SETC '&ZCVAL TID'              INCORRECT KEY USED
.ZG24A16         AIF   (K'&TIDHIGH LE 0).ZG24A17  OK
&ZCVAL           SETC '&ZCVAL TIDHIGH'          INCORRECT KEY USED
.ZG24A17         AIF   (K'&TIDLOW LE 0).ZG24A18  OK
&ZCVAL           SETC '&ZCVAL TIDLOW'           INCORRECT KEY USED
.ZG24A18         AIF   (K'&GTID LE 0).ZG24A19   OK
&ZCVAL           SETC '&ZCVAL GTID'             INCORRECT KEY USED
.ZG24A19         AIF   (K'&GTIDSTR LE 0).ZG24A20  OK
&ZCVAL           SETC '&ZCVAL GTIDSTR'          INCORRECT KEY USED
.ZG24A20         AIF   (K'&XID LE 0).ZG24A21    OK
&ZCVAL           SETC '&ZCVAL XID'              INCORRECT KEY USED
.ZG24A21         AIF   (K'&XIDFORMATID LE 0).ZG24A22  OK
&ZCVAL           SETC '&ZCVAL XIDFORMATID'      INCORRECT KEY USED
.ZG24A22         AIF   (K'&XIDGTRIDSTR LE 0).ZG24A23  OK
&ZCVAL           SETC '&ZCVAL XIDGTRIDSTR'      INCORRECT KEY USED
.ZG24A23         AIF   (K'&XIDBQUALSTR LE 0).ZG24A24  OK
&ZCVAL           SETC '&ZCVAL XIDBQUALSTR'      INCORRECT KEY USED
.ZG24A24         AIF   (K'&TODBEG LE 0).ZG24A25  OK
&ZCVAL           SETC '&ZCVAL TODBEG'           INCORRECT KEY USED
.ZG24A25         AIF   (K'&TODEND LE 0).ZG24A26  OK
&ZCVAL           SETC '&ZCVAL TODEND'           INCORRECT KEY USED
.ZG24A26         AIF   (K'&CURDUR LE 0).ZG24A27  OK
&ZCVAL           SETC '&ZCVAL CURDUR'           INCORRECT KEY USED
.ZG24A27         AIF   (K'&EXINFOMASK LE 0).ZG24A28  OK
&ZCVAL           SETC '&ZCVAL EXINFOMASK'       INCORRECT KEY USED
.ZG24A28         AIF   (K'&SORTTAB LE 0).ZG24A29  OK
&ZCVAL           SETC '&ZCVAL SORTTAB'          INCORRECT KEY USED
.ZG24A29         AIF   (K'&SORTNUM LE 0).ZG24A30  OK
&ZCVAL           SETC '&ZCVAL SORTNUM'          INCORRECT KEY USED
.ZG24A30         AIF   (K'&ZCVAL LE 0).ZG24A31  OK
&ZCVAL           SETC '&ZCVAL'(2,K'&ZCVAL-1)
                 AIF  (K'&ZCVAL LE 160).ZG24A31A
&ZCVAL           SETC '&ZCVAL'(1,160)
&ZCVAL           SETC '&ZCVAL....'
.ZG24A31A        ANOP
&ZMS             SETC  '"REQUEST'
&ZMS             SETC  '&ZMS.=&REQUEST"'
&ZMS             SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'
                 MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG24A31         ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&GNAME LE 1).ZG26A    CK NUM
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS "GNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG26A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXGNAME         SETC  'INPUT'     SET IN/OUTPUT
&XGNAME          SETC  'CURRENT_GNAME'
                 AIF   (K'&GNAME(1) LE 0).ZG26B  PARM
&XGNAME          SETC  '&GNAME(1)'              SET XVARIABLE
                 AIF   (N'&GNAME GT 1).ZG26B    MULTI
&XGNAME          SETC  '&GNAME'    SET XVARIABLE
.ZG26B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXGNAME LE 0).ZG26R  NOT I/O
         AIF   ('&XGNAME' EQ 'CURRENT_GNAME').ZG26R
                 AIF   ('&XGNAME'(1,1) NE '(').ZG26R
&ZCGPR           SETC  '&XGNAME'(2,K'&XGNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG26P
                 AIF   (K'&ZCGPR GT 2).ZG26Q
                 AIF   ('&ZCGPR' EQ '0').ZG26Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG26Q  INVALID REG NAME
.ZG26P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG26R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG26Q
                 AIF   ('&ZCGPR' LE '12').ZG26R
.ZG26Q           ANOP  ,
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG26R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&SYSNAME LE 1).ZG27A  CK NUM
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS "SYSNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG27A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXSYSNAME       SETC  'INPUT'     SET IN/OUTPUT
&XSYSNAME        SETC  'CURRENT_SYSNAME'
                 AIF   (K'&SYSNAME(1) LE 0).ZG27B  PARM
&XSYSNAME        SETC  '&SYSNAME(1)'            SET XVARIABLE
                 AIF   (N'&SYSNAME GT 1).ZG27B  MULTI
&XSYSNAME        SETC  '&SYSNAME'  SET XVARIABLE
.ZG27B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSYSNAME LE 0).ZG27R  NOT I/O
         AIF   ('&XSYSNAME' EQ 'CURRENT_SYSNAME').ZG27R
                 AIF   ('&XSYSNAME'(1,1) NE '(').ZG27R
&ZCGPR           SETC  '&XSYSNAME'(2,K'&XSYSNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG27P
                 AIF   (K'&ZCGPR GT 2).ZG27Q
                 AIF   ('&ZCGPR' EQ '0').ZG27Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG27Q  INVALID REG NAME
.ZG27P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG27R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG27Q
                 AIF   ('&ZCGPR' LE '12').ZG27R
.ZG27Q           ANOP  ,
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG27R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG29            ANOP  ,
&ZTLC            SETC 'URINFO'
                 AIF   ('&REQUEST(1)' NE '&ZTLC').ZG111
&XREQUEST        SETC  'URINFO'    SET KEYWORD
                 AIF   (N'&REQUEST LE 1).ZG29A  CK NUM
&ZMS             SETC  '"REQUEST='
&ZMS             SETC  '&ZMS.&REQUEST"'
&ZMS             SETC  '&ZMS "REQUEST"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG29A           ANOP  ,
.*------------------------------------------------------------------
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
&ZCVAL           SETC ''           CLEAR ERROR KEY ACCUMULATOR
.ZG29A0          AIF   (K'&METADATA LE 0).ZG29A1  OK
&ZCVAL           SETC '&ZCVAL METADATA'         INCORRECT KEY USED
.ZG29A1          AIF   (K'&ZCVAL LE 0).ZG29A2   OK
&ZCVAL           SETC '&ZCVAL'(2,K'&ZCVAL-1)
&ZMS             SETC  '"REQUEST'
&ZMS             SETC  '&ZMS.=&REQUEST"'
&ZMS             SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'
                 MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG29A2          ANOP  ,
.*----------------------------------------------------------------***
.***AG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE
&XRQD1           SETC  ''          INITIALIZE XVARIABLE
                 AIF   (K'&DEFURONLY LE 0).ZG31C
&ZXRQD1          SETC  'INPUT'     SET IN/OUTPUT
&XRQD1           SETC  'DEFURONLY'              SET XVARIABLE
&ZXDEFURONLY     SETC  'INPUT'     SET IN/OUTPUT
&XDEFURONLY      SETC  '&DEFURONLY(1)'          SET XVARIABLE PARM
                 AIF   (N'&DEFURONLY GT 1).ZG31A
&XDEFURONLY      SETC  '&DEFURONLY'             SET XVARIABLE PARM
.ZG31A           AIF   (N'&DEFURONLY LE 1).ZG31B  CK NUM
&ZMS             SETC  '"DEFURONLY='
&ZMS             SETC  '&ZMS.&DEFURONLY"'
&ZMS             SETC  '&ZMS "DEFURONLY"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG31B           AIF   (K'&XDEFURONLY GT 0).ZG31C  ONE PARM
&ZXRQD1          SETC  ''          RESET IN/OUTPUT
&ZXDEFURONLY     SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  ' '
&ZMS             SETC  '&ZMS "DEFURONLY" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG31C           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE
                 AIF   (K'&EXCLMASK LE 0).ZG32D  NO ME KEY
                 AIF   (N'&EXCLMASK LE 1).ZG32A  CK NUM
&ZMS             SETC  '"EXCLMASK='
&ZMS             SETC  '&ZMS.&EXCLMASK"'
&ZMS             SETC  '&ZMS "EXCLMASK"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG32A           AIF   (K'&XRQD1 LE 0).ZG32B
&ZMS             SETC  '"EXCLMASK'
&ZMS             SETC  '&ZMS.=&EXCLMASK"'
&ZMS             SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'
&ZMS             SETC  '&ZMS "&XRQD1"'
                 MNOTE 8,' &ZMS KEY.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG32D
.*
.ZG32B           ANOP  ,
&ZXRQD1          SETC  'INPUT'     SET IN/OUTPUT
&XRQD1           SETC  'EXCLMASK'  SET XVARIABLE
&ZXEXCLMASK      SETC  'INPUT'     SET IN/OUTPUT
&XEXCLMASK       SETC  '&EXCLMASK(1)'           SET XVARIABLE PARM
                 AIF   (N'&EXCLMASK GT 1).ZG32C
&XEXCLMASK       SETC  '&EXCLMASK'              SET XVARIABLE PARM
.ZG32C           AIF   (K'&XEXCLMASK GT 0).ZG32D  ONE PARM
&ZXRQD1          SETC  ''          RESET IN/OUTPUT
&ZXEXCLMASK      SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  ' '
&ZMS             SETC  '&ZMS "EXCLMASK" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG32D           ANOP  ,
.*------------------------------------------------------------------
.***AG.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF KEY ENTERED
                 AIF   (K'&XRQD1 GT 0).ZG33B
&ZXRQD1          SETC  'INPUT'     SET IN/OUTPUT
&XRQD1           SETC  'DEFURONLY'              SET DEFAULT
&ZXDEFURONLY     SETC  'INPUT'     SET IN/OUTPUT
&XDEFURONLY      SETC  'NO'        SET DEFAULT PARM
.ZG33B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXEXCLMASK LE 0).ZG33R  NOT I/O
                 AIF   ('&XEXCLMASK'(1,1) NE '(').ZG33R
&ZCGPR           SETC  '&XEXCLMASK'(2,K'&XEXCLMASK-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG33P
                 AIF   (K'&ZCGPR GT 2).ZG33Q
                 AIF   ('&ZCGPR' EQ '0').ZG33Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG33Q  INVALID REG NAME
.ZG33P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG33R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG33Q
                 AIF   ('&ZCGPR' LE '12').ZG33R
.ZG33Q           ANOP  ,
&ZMS             SETC  '"EXCLMASK='
&ZMS             SETC  '&ZMS.&EXCLMASK"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG33R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
                 AIF   (T'&DEFURONLY  EQ 'O').ZG32ZY
.ZG31ZY  AIF    ('&XRQD1' NE 'DEFURONLY').ZG32ZY
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXDEFURONLY LE 0).ZG31R  NOT I/O
                 AIF   ('&XDEFURONLY'(1,1) NE '(').ZG31R
&ZCGPR           SETC  '&XDEFURONLY'(2,K'&XDEFURONLY-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG31P
                 AIF   (K'&ZCGPR GT 2).ZG31Q
                 AIF   ('&ZCGPR' EQ '0').ZG31Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG31Q  INVALID REG NAME
.ZG31P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG31R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG31Q
                 AIF   ('&ZCGPR' LE '12').ZG31R
.ZG31Q           ANOP  ,
&ZMS             SETC  '"DEFURONLY='
&ZMS             SETC  '&ZMS.&DEFURONLY"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG31R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZG32ZY  AIF    ('&XRQD1' NE 'EXCLMASK').ZG33ZY
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXEXCLMASK LE 0).ZG32R  NOT I/O
         AIF   ('&XEXCLMASK' EQ 'ATR_NOEXCLUSION_MASK').ZG32R
                 AIF   ('&XEXCLMASK'(1,1) NE '(').ZG32R
&ZCGPR           SETC  '&XEXCLMASK'(2,K'&XEXCLMASK-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG32P
                 AIF   (K'&ZCGPR GT 2).ZG32Q
                 AIF   ('&ZCGPR' EQ '0').ZG32Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG32Q  INVALID REG NAME
.ZG32P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG32R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG32Q
                 AIF   ('&ZCGPR' LE '12').ZG32R
.ZG32Q           ANOP  ,
&ZMS             SETC  '"EXCLMASK='
&ZMS             SETC  '&ZMS.&EXCLMASK"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG32R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY15 NAME, OPT INPUT, ME KEYS -END
.ZG33ZY          ANOP ,            END MUTUALLY EXCLUSIVE KEYS
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&ASID LE 1).ZG35A     CK NUM
&ZMS             SETC  '"ASID='
&ZMS             SETC  '&ZMS.&ASID"'
&ZMS             SETC  '&ZMS "ASID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG35A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXASID          SETC  'INPUT'     SET IN/OUTPUT
&XASID           SETC  '0'
                 AIF   (K'&ASID(1) LE 0).ZG35B  PARM
&XASID           SETC  '&ASID(1)'  SET XVARIABLE
                 AIF   (N'&ASID GT 1).ZG35B     MULTI
&XASID           SETC  '&ASID'     SET XVARIABLE
.ZG35B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXASID LE 0).ZG35R   NOT I/O
                 AIF   ('&XASID'(1,1) NE '(').ZG35R
&ZCGPR           SETC  '&XASID'(2,K'&XASID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG35P
                 AIF   (K'&ZCGPR GT 2).ZG35Q
                 AIF   ('&ZCGPR' EQ '0').ZG35Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG35Q  INVALID REG NAME
.ZG35P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG35R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG35Q
                 AIF   ('&ZCGPR' LE '12').ZG35R
.ZG35Q           ANOP  ,
&ZMS             SETC  '"ASID='
&ZMS             SETC  '&ZMS.&ASID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG35R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE
&XREQD1          SETC  ''          INITIALIZE XVARIABLE
                 AIF   (K'&URID LE 0).ZG38C
&ZXREQD1         SETC  'INPUT'     SET IN/OUTPUT
&XREQD1          SETC  'URID'      SET XVARIABLE
&ZXURID          SETC  'INPUT'     SET IN/OUTPUT
&XURID           SETC  '&URID(1)'  SET XVARIABLE PARM
                 AIF   (N'&URID GT 1).ZG38A
&XURID           SETC  '&URID'     SET XVARIABLE PARM
.ZG38A           AIF   (N'&URID LE 1).ZG38B     CK NUM
&ZMS             SETC  '"URID='
&ZMS             SETC  '&ZMS.&URID"'
&ZMS             SETC  '&ZMS "URID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG38B           AIF   (K'&XURID GT 0).ZG38C    ONE PARM
&ZXREQD1         SETC  ''          RESET IN/OUTPUT
&ZXURID          SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  ' '
&ZMS             SETC  '&ZMS "URID" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG38C           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE
                 AIF   (K'&URIDSTR LE 0).ZG39D  NO ME KEY
                 AIF   (N'&URIDSTR LE 1).ZG39A  CK NUM
&ZMS             SETC  '"URIDSTR='
&ZMS             SETC  '&ZMS.&URIDSTR"'
&ZMS             SETC  '&ZMS "URIDSTR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG39A           AIF   (K'&XREQD1 LE 0).ZG39B
&ZMS             SETC  '"URIDSTR'
&ZMS             SETC  '&ZMS.=&URIDSTR"'
&ZMS             SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'
&ZMS             SETC  '&ZMS "&XREQD1"'
                 MNOTE 8,' &ZMS KEY.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG39D
.*
.ZG39B           ANOP  ,
&ZXREQD1         SETC  'INPUT'     SET IN/OUTPUT
&XREQD1          SETC  'URIDSTR'   SET XVARIABLE
&ZXURIDSTR       SETC  'INPUT'     SET IN/OUTPUT
&XURIDSTR        SETC  '&URIDSTR(1)'            SET XVARIABLE PARM
                 AIF   (N'&URIDSTR GT 1).ZG39C
&XURIDSTR        SETC  '&URIDSTR'  SET XVARIABLE PARM
.ZG39C           AIF   (K'&XURIDSTR GT 0).ZG39D  ONE PARM
&ZXREQD1         SETC  ''          RESET IN/OUTPUT
&ZXURIDSTR       SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  ' '
&ZMS             SETC  '&ZMS "URIDSTR" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG39D           ANOP  ,
.*------------------------------------------------------------------
.***AG.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF KEY ENTERED
                 AIF   (K'&XREQD1 GT 0).ZG40B
&ZXREQD1         SETC  'INPUT'     SET IN/OUTPUT
&XREQD1          SETC  'URID'      SET DEFAULT
&ZXURID          SETC  'INPUT'     SET IN/OUTPUT
&XURID           SETC  '0'         SET DEFAULT PARM
.ZG40B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXURIDSTR LE 0).ZG40R  NOT I/O
                 AIF   ('&XURIDSTR'(1,1) NE '(').ZG40R
&ZCGPR           SETC  '&XURIDSTR'(2,K'&XURIDSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG40P
                 AIF   (K'&ZCGPR GT 2).ZG40Q
                 AIF   ('&ZCGPR' EQ '0').ZG40Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG40Q  INVALID REG NAME
.ZG40P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG40R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG40Q
                 AIF   ('&ZCGPR' LE '12').ZG40R
.ZG40Q           ANOP  ,
&ZMS             SETC  '"URIDSTR='
&ZMS             SETC  '&ZMS.&URIDSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG40R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZG38ZY  AIF    ('&XREQD1' NE 'URID').ZG39ZY
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXURID LE 0).ZG38R   NOT I/O
                 AIF   ('&XURID'(1,1) NE '(').ZG38R
&ZCGPR           SETC  '&XURID'(2,K'&XURID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG38P
                 AIF   (K'&ZCGPR GT 2).ZG38Q
                 AIF   ('&ZCGPR' EQ '0').ZG38Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG38Q  INVALID REG NAME
.ZG38P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG38R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG38Q
                 AIF   ('&ZCGPR' LE '12').ZG38R
.ZG38Q           ANOP  ,
&ZMS             SETC  '"URID='
&ZMS             SETC  '&ZMS.&URID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG38R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZG39ZY  AIF    ('&XREQD1' NE 'URIDSTR').ZG40ZY
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXURIDSTR LE 0).ZG39R  NOT I/O
                 AIF   ('&XURIDSTR'(1,1) NE '(').ZG39R
&ZCGPR           SETC  '&XURIDSTR'(2,K'&XURIDSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG39P
                 AIF   (K'&ZCGPR GT 2).ZG39Q
                 AIF   ('&ZCGPR' EQ '0').ZG39Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG39Q  INVALID REG NAME
.ZG39P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG39R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG39Q
                 AIF   ('&ZCGPR' LE '12').ZG39R
.ZG39Q           ANOP  ,
&ZMS             SETC  '"URIDSTR='
&ZMS             SETC  '&ZMS.&URIDSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG39R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY15 NAME, OPT INPUT, ME KEYS -END
.ZG40ZY          ANOP ,            END MUTUALLY EXCLUSIVE KEYS
.*----------------------------------------------------------------***
.***AG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE
&XREQD1          SETC  ''          INITIALIZE XVARIABLE
                 AIF   (K'&SURID LE 0).ZG42C
&ZXREQD1         SETC  'INPUT'     SET IN/OUTPUT
&XREQD1          SETC  'SURID'     SET XVARIABLE
&ZXSURID         SETC  'INPUT'     SET IN/OUTPUT
&XSURID          SETC  '&SURID(1)'              SET XVARIABLE PARM
                 AIF   (N'&SURID GT 1).ZG42A
&XSURID          SETC  '&SURID'    SET XVARIABLE PARM
.ZG42A           AIF   (N'&SURID LE 1).ZG42B    CK NUM
&ZMS             SETC  '"SURID='
&ZMS             SETC  '&ZMS.&SURID"'
&ZMS             SETC  '&ZMS "SURID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG42B           AIF   (K'&XSURID GT 0).ZG42C   ONE PARM
&ZXREQD1         SETC  ''          RESET IN/OUTPUT
&ZXSURID         SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  ' '
&ZMS             SETC  '&ZMS "SURID" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG42C           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE
                 AIF   (K'&SURIDSTR LE 0).ZG43D  NO ME KEY
                 AIF   (N'&SURIDSTR LE 1).ZG43A  CK NUM
&ZMS             SETC  '"SURIDSTR='
&ZMS             SETC  '&ZMS.&SURIDSTR"'
&ZMS             SETC  '&ZMS "SURIDSTR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG43A           AIF   (K'&XREQD1 LE 0).ZG43B
&ZMS             SETC  '"SURIDSTR'
&ZMS             SETC  '&ZMS.=&SURIDSTR"'
&ZMS             SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'
&ZMS             SETC  '&ZMS "&XREQD1"'
                 MNOTE 8,' &ZMS KEY.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG43D
.*
.ZG43B           ANOP  ,
&ZXREQD1         SETC  'INPUT'     SET IN/OUTPUT
&XREQD1          SETC  'SURIDSTR'  SET XVARIABLE
&ZXSURIDSTR      SETC  'INPUT'     SET IN/OUTPUT
&XSURIDSTR       SETC  '&SURIDSTR(1)'           SET XVARIABLE PARM
                 AIF   (N'&SURIDSTR GT 1).ZG43C
&XSURIDSTR       SETC  '&SURIDSTR'              SET XVARIABLE PARM
.ZG43C           AIF   (K'&XSURIDSTR GT 0).ZG43D  ONE PARM
&ZXREQD1         SETC  ''          RESET IN/OUTPUT
&ZXSURIDSTR      SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  ' '
&ZMS             SETC  '&ZMS "SURIDSTR" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG43D           ANOP  ,
.*------------------------------------------------------------------
.***AG.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF KEY ENTERED
                 AIF   (K'&XREQD1 GT 0).ZG44B
&ZXREQD1         SETC  'INPUT'     SET IN/OUTPUT
&XREQD1          SETC  'SURID'     SET DEFAULT
&ZXSURID         SETC  'INPUT'     SET IN/OUTPUT
&XSURID          SETC  '0'         SET DEFAULT PARM
.ZG44B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSURIDSTR LE 0).ZG44R  NOT I/O
                 AIF   ('&XSURIDSTR'(1,1) NE '(').ZG44R
&ZCGPR           SETC  '&XSURIDSTR'(2,K'&XSURIDSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG44P
                 AIF   (K'&ZCGPR GT 2).ZG44Q
                 AIF   ('&ZCGPR' EQ '0').ZG44Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG44Q  INVALID REG NAME
.ZG44P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG44R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG44Q
                 AIF   ('&ZCGPR' LE '12').ZG44R
.ZG44Q           ANOP  ,
&ZMS             SETC  '"SURIDSTR='
&ZMS             SETC  '&ZMS.&SURIDSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG44R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZG42ZY  AIF    ('&XREQD1' NE 'SURID').ZG43ZY
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSURID LE 0).ZG42R  NOT I/O
                 AIF   ('&XSURID'(1,1) NE '(').ZG42R
&ZCGPR           SETC  '&XSURID'(2,K'&XSURID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG42P
                 AIF   (K'&ZCGPR GT 2).ZG42Q
                 AIF   ('&ZCGPR' EQ '0').ZG42Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG42Q  INVALID REG NAME
.ZG42P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG42R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG42Q
                 AIF   ('&ZCGPR' LE '12').ZG42R
.ZG42Q           ANOP  ,
&ZMS             SETC  '"SURID='
&ZMS             SETC  '&ZMS.&SURID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG42R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZG43ZY  AIF    ('&XREQD1' NE 'SURIDSTR').ZG44ZY
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSURIDSTR LE 0).ZG43R  NOT I/O
                 AIF   ('&XSURIDSTR'(1,1) NE '(').ZG43R
&ZCGPR           SETC  '&XSURIDSTR'(2,K'&XSURIDSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG43P
                 AIF   (K'&ZCGPR GT 2).ZG43Q
                 AIF   ('&ZCGPR' EQ '0').ZG43Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG43Q  INVALID REG NAME
.ZG43P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG43R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG43Q
                 AIF   ('&ZCGPR' LE '12').ZG43R
.ZG43Q           ANOP  ,
&ZMS             SETC  '"SURIDSTR='
&ZMS             SETC  '&ZMS.&SURIDSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG43R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY15 NAME, OPT INPUT, ME KEYS -END
.ZG44ZY          ANOP ,            END MUTUALLY EXCLUSIVE KEYS
.*----------------------------------------------------------------***
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&URTYPE LE 1).ZG46A   CK NUM
&ZMS             SETC  '"URTYPE='
&ZMS             SETC  '&ZMS.&URTYPE"'
&ZMS             SETC  '&ZMS "URTYPE"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG46A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 VALUE, OPT INPUT, KEYS -XVARIABLE
&ZXURTYPE        SETC  'INPUT'     SET IN/OUTPUT
&XURTYPE         SETC  'ATR_NOFILTER'
                 AIF   (K'&URTYPE(1) LE 0).ZG46B  PARM
&XURTYPE         SETC  '&URTYPE(1)'             SET XVARIABLE
                 AIF   (N'&URTYPE GT 1).ZG46B   MULTI
&XURTYPE         SETC  '&URTYPE'   SET XVARIABLE
.ZG46B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 VALUE, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXURTYPE LE 0).ZG46R  NOT I/O
                 AIF   ('&XURTYPE'(1,1) NE '(').ZG46R
&ZCGPR           SETC  '&XURTYPE'(2,K'&XURTYPE-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG46P
                 AIF   (K'&ZCGPR GT 2).ZG46Q
                 AIF   ('&ZCGPR' EQ '0').ZG46Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG46Q  INVALID REG NAME
.ZG46P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG46R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG46Q
                 AIF   ('&ZCGPR' LE '12').ZG46R
.ZG46Q           ANOP  ,
&ZMS             SETC  '"URTYPE='
&ZMS             SETC  '&ZMS.&URTYPE"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG46R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK06 VALUE, OPT INPUT, KEYS -KMG RANGE OR EQUATE
                 AIF   (K'&ZXURTYPE LE 0).ZG46V  NOT I/O
                 AIF   ('&XURTYPE'(1,1) EQ '(').ZG46V  IN GPR
                 AIF   ('&XURTYPE'(1,1) EQ '-').ZG46U  INVALID ENTRY
                 AIF   (T'&XURTYPE NE 'N').ZG46S  NON NUMERIC
&ZAWRK           SETA  &XURTYPE    INITIALIZE ZAWRK
&ZCVAL           SETC  '&XURTYPE'  INITIALIZE ZCVAL
&ZASIZ           SETA  1
                 AGO   .ZG46TT
.ZG46S           ANOP ,
&ZCLNG           SETC  '&XURTYPE'(1,K'&XURTYPE-1)
                 AIF   (T'&ZCLNG EQ 'N').ZG46SS  NUMERIC
&ZCGPR           SETC  '&XURTYPE'(1,1)          FIRST CHAR
                 AIF   (T'&ZCGPR EQ 'N').ZG46U  NUMERIC ERR
                 AGO   .ZG46V
.*
.ZG46SS          ANOP ,
&ZAWRK           SETA  &ZCLNG      CONVERT
&ZCGPR           SETC  '&XURTYPE'(K'&XURTYPE,1)
&ZASIZ           SETA  1024
                 AIF   ('&ZCGPR' EQ 'K').ZG46T  K FACTOR
&ZASIZ           SETA  1024*1024
                 AIF   ('&ZCGPR' EQ 'M').ZG46T  M FACTOR
&ZASIZ           SETA  1024*1024*1024
                 AIF   ('&ZCGPR' NE 'G').ZG46U  NOT G FACTOR
.ZG46T           ANOP  ,
&ZCVAL           SETC  '&ZAWRK*&ZASIZ'          EQUIVALENT NUMBER
.ZG46TT          ANOP  ,
&ZN              SETA  2147483647/&ZASIZ        CONVERT
                 AIF   (&ZN LT 0).ZG46U         TOO LOW
                 AIF   (&ZAWRK GT &ZN).ZG46U    TOO HIGH
&XURTYPE         SETC '&ZCVAL'     SET XVARIABLE NUMBER
                 AGO   .ZG46V
.*
.ZG46U           ANOP  ,
&ZXURTYPE        SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  '"URTYPE='
&ZMS             SETC  '&ZMS.&URTYPE"'
&ZMS             SETC  '&ZMS THE RANGE IS "0-2147483647"'
                 MNOTE 8,' &ZMS FOR ARGUMENT 1.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG46V           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KMEKY01 VALUE, OPT INPUT, ME KEYS -XVARIABLE
&XRQD2           SETC  ''          INITIALIZE XVARIABLE
                 AIF   (K'&URSTATE LE 0).ZG49C
&ZXRQD2          SETC  'INPUT'     SET IN/OUTPUT
&XRQD2           SETC  'URSTATE'   SET XVARIABLE
&ZXURSTATE       SETC  'INPUT'     SET IN/OUTPUT
&XURSTATE        SETC  '&URSTATE(1)'            SET XVARIABLE PARM
                 AIF   (N'&URSTATE GT 1).ZG49A
&XURSTATE        SETC  '&URSTATE'  SET XVARIABLE PARM
.ZG49A           AIF   (N'&URSTATE LE 1).ZG49B  CK NUM
&ZMS             SETC  '"URSTATE='
&ZMS             SETC  '&ZMS.&URSTATE"'
&ZMS             SETC  '&ZMS "URSTATE"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG49B           AIF   (K'&XURSTATE GT 0).ZG49C  ONE PARM
&ZXRQD2          SETC  ''          RESET IN/OUTPUT
&ZXURSTATE       SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  ' '
&ZMS             SETC  '&ZMS "URSTATE" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG49C           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KMEKY02 VALUE, OPT INPUT, ME KEYS -XVARIABLE
                 AIF   (K'&URSTMASK LE 0).ZG50D  NO ME KEY
                 AIF   (N'&URSTMASK LE 1).ZG50A  CK NUM
&ZMS             SETC  '"URSTMASK='
&ZMS             SETC  '&ZMS.&URSTMASK"'
&ZMS             SETC  '&ZMS "URSTMASK"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG50A           AIF   (K'&XRQD2 LE 0).ZG50B
&ZMS             SETC  '"URSTMASK'
&ZMS             SETC  '&ZMS.=&URSTMASK"'
&ZMS             SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'
&ZMS             SETC  '&ZMS "&XRQD2"'
                 MNOTE 8,' &ZMS KEY.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG50D
.*
.ZG50B           ANOP  ,
&ZXRQD2          SETC  'INPUT'     SET IN/OUTPUT
&XRQD2           SETC  'URSTMASK'  SET XVARIABLE
&ZXURSTMASK      SETC  'INPUT'     SET IN/OUTPUT
&XURSTMASK       SETC  '&URSTMASK(1)'           SET XVARIABLE PARM
                 AIF   (N'&URSTMASK GT 1).ZG50C
&XURSTMASK       SETC  '&URSTMASK'              SET XVARIABLE PARM
.ZG50C           AIF   (K'&XURSTMASK GT 0).ZG50D  ONE PARM
&ZXRQD2          SETC  ''          RESET IN/OUTPUT
&ZXURSTMASK      SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  ' '
&ZMS             SETC  '&ZMS "URSTMASK" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG50D           ANOP  ,
.*------------------------------------------------------------------
.***AG.KMEKY07 VALUE, OPT INPUT, ME KEYS -CHECK IF KEY ENTERED
                 AIF   (K'&XRQD2 GT 0).ZG51B
&ZXRQD2          SETC  'INPUT'     SET IN/OUTPUT
&XRQD2           SETC  'URSTATE'   SET DEFAULT
&ZXURSTATE       SETC  'INPUT'     SET IN/OUTPUT
&XURSTATE        SETC  'ATR_NOFILTER'           SET DEFAULT PARM
.ZG51B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 VALUE, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXURSTMASK LE 0).ZG51R  NOT I/O
                 AIF   ('&XURSTMASK'(1,1) NE '(').ZG51R
&ZCGPR           SETC  '&XURSTMASK'(2,K'&XURSTMASK-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG51P
                 AIF   (K'&ZCGPR GT 2).ZG51Q
                 AIF   ('&ZCGPR' EQ '0').ZG51Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG51Q  INVALID REG NAME
.ZG51P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG51R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG51Q
                 AIF   ('&ZCGPR' LE '12').ZG51R
.ZG51Q           ANOP  ,
&ZMS             SETC  '"URSTMASK='
&ZMS             SETC  '&ZMS.&URSTMASK"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG51R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK03 VALUE, OPT INPUT, ME KEYS -CHARACTER LENGTH
                 AIF   (K'&ZXURSTMASK LE 0).ZG51S  NOT I/O
                 AIF   (K'&XURSTMASK LE 8).ZG51S  LNG OK
&ZXURSTMASK      SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  '"URSTMASK='
&ZMS             SETC  '&ZMS.&URSTMASK"'
&ZMS             SETC  '&ZMS ARGUMENT 1 EXCEEDS THE MAXIMUM'
                 MNOTE 8,' &ZMS LENGTH OF 8 CHARACTERS.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG51S           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY13 VALUE, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZG49ZY  AIF    ('&XRQD2' NE 'URSTATE').ZG50ZY
.*-------------------------------------------------------------------
.***AG.KCK02 VALUE, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXURSTATE LE 0).ZG49R  NOT I/O
                 AIF   ('&XURSTATE'(1,1) NE '(').ZG49R
&ZCGPR           SETC  '&XURSTATE'(2,K'&XURSTATE-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG49P
                 AIF   (K'&ZCGPR GT 2).ZG49Q
                 AIF   ('&ZCGPR' EQ '0').ZG49Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG49Q  INVALID REG NAME
.ZG49P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG49R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG49Q
                 AIF   ('&ZCGPR' LE '12').ZG49R
.ZG49Q           ANOP  ,
&ZMS             SETC  '"URSTATE='
&ZMS             SETC  '&ZMS.&URSTATE"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG49R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK06 VALUE, OPT INPUT, ME KEYS -KMG RANGE OR EQUATE
                 AIF   (K'&ZXURSTATE LE 0).ZG49V  NOT I/O
                 AIF   ('&XURSTATE'(1,1) EQ '(').ZG49V  IN GPR
                 AIF   ('&XURSTATE'(1,1) EQ '-').ZG49U  INVALID ENTRY
                 AIF   (T'&XURSTATE NE 'N').ZG49S  NON NUMERIC
&ZAWRK           SETA  &XURSTATE   INITIALIZE ZAWRK
&ZCVAL           SETC  '&XURSTATE'              INITIALIZE ZCVAL
&ZASIZ           SETA  1
                 AGO   .ZG49TT
.ZG49S           ANOP ,
&ZCLNG           SETC  '&XURSTATE'(1,K'&XURSTATE-1)
                 AIF   (T'&ZCLNG EQ 'N').ZG49SS  NUMERIC
&ZCGPR           SETC  '&XURSTATE'(1,1)         FIRST CHAR
                 AIF   (T'&ZCGPR EQ 'N').ZG49U  NUMERIC ERR
                 AGO   .ZG49V
.*
.ZG49SS          ANOP ,
&ZAWRK           SETA  &ZCLNG      CONVERT
&ZCGPR           SETC  '&XURSTATE'(K'&XURSTATE,1)
&ZASIZ           SETA  1024
                 AIF   ('&ZCGPR' EQ 'K').ZG49T  K FACTOR
&ZASIZ           SETA  1024*1024
                 AIF   ('&ZCGPR' EQ 'M').ZG49T  M FACTOR
&ZASIZ           SETA  1024*1024*1024
                 AIF   ('&ZCGPR' NE 'G').ZG49U  NOT G FACTOR
.ZG49T           ANOP  ,
&ZCVAL           SETC  '&ZAWRK*&ZASIZ'          EQUIVALENT NUMBER
.ZG49TT          ANOP  ,
&ZN              SETA  2147483647/&ZASIZ        CONVERT
                 AIF   (&ZN LT 0).ZG49U         TOO LOW
                 AIF   (&ZAWRK GT &ZN).ZG49U    TOO HIGH
&XURSTATE        SETC '&ZCVAL'     SET XVARIABLE NUMBER
                 AGO   .ZG49V
.*
.ZG49U           ANOP  ,
&ZXURSTATE       SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  '"URSTATE='
&ZMS             SETC  '&ZMS.&URSTATE"'
&ZMS             SETC  '&ZMS THE RANGE IS "0-2147483647"'
                 MNOTE 8,' &ZMS FOR ARGUMENT 1.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG49V           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY13 VALUE, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZG50ZY  AIF    ('&XRQD2' NE 'URSTMASK').ZG51ZY
.*-------------------------------------------------------------------
.***AG.KCK02 VALUE, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXURSTMASK LE 0).ZG50R  NOT I/O
                 AIF   ('&XURSTMASK'(1,1) NE '(').ZG50R
&ZCGPR           SETC  '&XURSTMASK'(2,K'&XURSTMASK-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG50P
                 AIF   (K'&ZCGPR GT 2).ZG50Q
                 AIF   ('&ZCGPR' EQ '0').ZG50Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG50Q  INVALID REG NAME
.ZG50P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG50R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG50Q
                 AIF   ('&ZCGPR' LE '12').ZG50R
.ZG50Q           ANOP  ,
&ZMS             SETC  '"URSTMASK='
&ZMS             SETC  '&ZMS.&URSTMASK"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG50R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK04 VALUE, OPT INPUT, ME KEYS -BIT CHECK
                 AIF   (K'&ZXURSTMASK LE 0).ZG50T  NOT I/O
                 AIF   (T'&XURSTMASK EQ 'N').ZG50X  SELF DEFINING TERM
                 AIF   ('&XURSTMASK'(1,1) EQ '0').ZG50X  NON SYMBOL
                 AIF   ('&XURSTMASK'(1,1) NE '1').ZG50T  SYMBOL
.ZG50X           ANOP  ,
                 AIF   ('&XURSTMASK' EQ '0').ZG50T  VALUE IS 0
                 AIF   (K'&XURSTMASK NE 32).ZG50S  LNG ERR
.*
                 ACTR  10000
&ZN              SETA  0
.ZG50U           ANOP  ,
&ZN              SETA  1+&ZN
&ZC              SETC  '&XURSTMASK'(&ZN,1)
                 AIF   ('&ZC' EQ '0').ZG50V     STRING OK
                 AIF   ('&ZC' NE '1').ZG50S     STRING NOT OK
.ZG50V           AIF   (K'&XURSTMASK NE &ZN).ZG50U  CHK NXT BIT
                 AGO    .ZG50T
.*
.ZG50S           ANOP  ,
&ZXURSTMASK      SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  '"URSTMASK='
&ZMS             SETC  '&ZMS.&URSTMASK"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST CONTAIN 32'
                 MNOTE 8,' &ZMS BITS SPECIFIED AS "0"S AND "1"S.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG50T           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY15 VALUE, OPT INPUT, ME KEYS -END
.ZG51ZY          ANOP ,            END MUTUALLY EXCLUSIVE KEYS
.*----------------------------------------------------------------***
.***AG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE
&XRQD3           SETC  ''          INITIALIZE XVARIABLE
                 AIF   (K'&LUWID LE 0).ZG53C
&ZXRQD3          SETC  'INPUT'     SET IN/OUTPUT
&XRQD3           SETC  'LUWID'     SET XVARIABLE
&ZXLUWID         SETC  'INPUT'     SET IN/OUTPUT
&XLUWID          SETC  '&LUWID(1)'              SET XVARIABLE PARM
                 AIF   (N'&LUWID GT 1).ZG53A
&XLUWID          SETC  '&LUWID'    SET XVARIABLE PARM
.ZG53A           AIF   (N'&LUWID LE 1).ZG53B    CK NUM
&ZMS             SETC  '"LUWID='
&ZMS             SETC  '&ZMS.&LUWID"'
&ZMS             SETC  '&ZMS "LUWID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG53B           AIF   (K'&XLUWID GT 0).ZG53C   ONE PARM
&ZXRQD3          SETC  ''          RESET IN/OUTPUT
&ZXLUWID         SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  ' '
&ZMS             SETC  '&ZMS "LUWID" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG53C           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE
                 AIF   (K'&LUWIDSTR LE 0).ZG54D  NO ME KEY
                 AIF   (N'&LUWIDSTR LE 1).ZG54A  CK NUM
&ZMS             SETC  '"LUWIDSTR='
&ZMS             SETC  '&ZMS.&LUWIDSTR"'
&ZMS             SETC  '&ZMS "LUWIDSTR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG54A           AIF   (K'&XRQD3 LE 0).ZG54B
&ZMS             SETC  '"LUWIDSTR'
&ZMS             SETC  '&ZMS.=&LUWIDSTR"'
&ZMS             SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'
&ZMS             SETC  '&ZMS "&XRQD3"'
                 MNOTE 8,' &ZMS KEY.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG54D
.*
.ZG54B           ANOP  ,
&ZXRQD3          SETC  'INPUT'     SET IN/OUTPUT
&XRQD3           SETC  'LUWIDSTR'  SET XVARIABLE
&ZXLUWIDSTR      SETC  'INPUT'     SET IN/OUTPUT
&XLUWIDSTR       SETC  '&LUWIDSTR(1)'           SET XVARIABLE PARM
                 AIF   (N'&LUWIDSTR GT 1).ZG54C
&XLUWIDSTR       SETC  '&LUWIDSTR'              SET XVARIABLE PARM
.ZG54C           AIF   (K'&XLUWIDSTR GT 0).ZG54D  ONE PARM
&ZXRQD3          SETC  ''          RESET IN/OUTPUT
&ZXLUWIDSTR      SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  ' '
&ZMS             SETC  '&ZMS "LUWIDSTR" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG54D           ANOP  ,
.*------------------------------------------------------------------
.***AG.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF KEY ENTERED
                 AIF   (K'&XRQD3 GT 0).ZG55B
&ZXRQD3          SETC  'INPUT'     SET IN/OUTPUT
&XRQD3           SETC  'LUWID'     SET DEFAULT
&ZXLUWID         SETC  'INPUT'     SET IN/OUTPUT
&XLUWID          SETC  '0'         SET DEFAULT PARM
.ZG55B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXLUWIDSTR LE 0).ZG55R  NOT I/O
                 AIF   ('&XLUWIDSTR'(1,1) NE '(').ZG55R
&ZCGPR           SETC  '&XLUWIDSTR'(2,K'&XLUWIDSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG55P
                 AIF   (K'&ZCGPR GT 2).ZG55Q
                 AIF   ('&ZCGPR' EQ '0').ZG55Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG55Q  INVALID REG NAME
.ZG55P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG55R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG55Q
                 AIF   ('&ZCGPR' LE '12').ZG55R
.ZG55Q           ANOP  ,
&ZMS             SETC  '"LUWIDSTR='
&ZMS             SETC  '&ZMS.&LUWIDSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG55R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZG53ZY  AIF    ('&XRQD3' NE 'LUWID').ZG54ZY
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXLUWID LE 0).ZG53R  NOT I/O
                 AIF   ('&XLUWID'(1,1) NE '(').ZG53R
&ZCGPR           SETC  '&XLUWID'(2,K'&XLUWID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG53P
                 AIF   (K'&ZCGPR GT 2).ZG53Q
                 AIF   ('&ZCGPR' EQ '0').ZG53Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG53Q  INVALID REG NAME
.ZG53P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG53R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG53Q
                 AIF   ('&ZCGPR' LE '12').ZG53R
.ZG53Q           ANOP  ,
&ZMS             SETC  '"LUWID='
&ZMS             SETC  '&ZMS.&LUWID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG53R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZG54ZY  AIF    ('&XRQD3' NE 'LUWIDSTR').ZG55ZY
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXLUWIDSTR LE 0).ZG54R  NOT I/O
                 AIF   ('&XLUWIDSTR'(1,1) NE '(').ZG54R
&ZCGPR           SETC  '&XLUWIDSTR'(2,K'&XLUWIDSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG54P
                 AIF   (K'&ZCGPR GT 2).ZG54Q
                 AIF   ('&ZCGPR' EQ '0').ZG54Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG54Q  INVALID REG NAME
.ZG54P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG54R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG54Q
                 AIF   ('&ZCGPR' LE '12').ZG54R
.ZG54Q           ANOP  ,
&ZMS             SETC  '"LUWIDSTR='
&ZMS             SETC  '&ZMS.&LUWIDSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG54R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY15 NAME, OPT INPUT, ME KEYS -END
.ZG55ZY          ANOP ,            END MUTUALLY EXCLUSIVE KEYS
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&TID LE 1).ZG57A      CK NUM
&ZMS             SETC  '"TID='
&ZMS             SETC  '&ZMS.&TID"'
&ZMS             SETC  '&ZMS "TID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG57A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXTID           SETC  'INPUT'     SET IN/OUTPUT
&XTID            SETC  '0'
                 AIF   (K'&TID(1) LE 0).ZG57B   PARM
&XTID            SETC  '&TID(1)'   SET XVARIABLE
                 AIF   (N'&TID GT 1).ZG57B      MULTI
&XTID            SETC  '&TID'      SET XVARIABLE
.ZG57B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXTID LE 0).ZG57R    NOT I/O
                 AIF   ('&XTID'(1,1) NE '(').ZG57R
&ZCGPR           SETC  '&XTID'(2,K'&XTID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG57P
                 AIF   (K'&ZCGPR GT 2).ZG57Q
                 AIF   ('&ZCGPR' EQ '0').ZG57Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG57Q  INVALID REG NAME
.ZG57P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG57R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG57Q
                 AIF   ('&ZCGPR' LE '12').ZG57R
.ZG57Q           ANOP  ,
&ZMS             SETC  '"TID='
&ZMS             SETC  '&ZMS.&TID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG57R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&TIDHIGH LE 1).ZG60A  CK NUM
&ZMS             SETC  '"TIDHIGH='
&ZMS             SETC  '&ZMS.&TIDHIGH"'
&ZMS             SETC  '&ZMS "TIDHIGH"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG60A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXTIDHIGH       SETC  'INPUT'     SET IN/OUTPUT
&XTIDHIGH        SETC  'ATR_HIGH_TID_VALUE'
                 AIF   (K'&TIDHIGH(1) LE 0).ZG60B  PARM
&XTIDHIGH        SETC  '&TIDHIGH(1)'            SET XVARIABLE
                 AIF   (N'&TIDHIGH GT 1).ZG60B  MULTI
&XTIDHIGH        SETC  '&TIDHIGH'  SET XVARIABLE
.ZG60B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXTIDHIGH LE 0).ZG60R  NOT I/O
         AIF   ('&XTIDHIGH' EQ 'ATR_HIGH_TID_VALUE').ZG60R
                 AIF   ('&XTIDHIGH'(1,1) NE '(').ZG60R
&ZCGPR           SETC  '&XTIDHIGH'(2,K'&XTIDHIGH-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG60P
                 AIF   (K'&ZCGPR GT 2).ZG60Q
                 AIF   ('&ZCGPR' EQ '0').ZG60Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG60Q  INVALID REG NAME
.ZG60P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG60R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG60Q
                 AIF   ('&ZCGPR' LE '12').ZG60R
.ZG60Q           ANOP  ,
&ZMS             SETC  '"TIDHIGH='
&ZMS             SETC  '&ZMS.&TIDHIGH"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG60R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&TIDLOW LE 1).ZG63A   CK NUM
&ZMS             SETC  '"TIDLOW='
&ZMS             SETC  '&ZMS.&TIDLOW"'
&ZMS             SETC  '&ZMS "TIDLOW"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG63A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXTIDLOW        SETC  'INPUT'     SET IN/OUTPUT
&XTIDLOW         SETC  'ATR_LOW_TID_VALUE'
                 AIF   (K'&TIDLOW(1) LE 0).ZG63B  PARM
&XTIDLOW         SETC  '&TIDLOW(1)'             SET XVARIABLE
                 AIF   (N'&TIDLOW GT 1).ZG63B   MULTI
&XTIDLOW         SETC  '&TIDLOW'   SET XVARIABLE
.ZG63B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXTIDLOW LE 0).ZG63R  NOT I/O
         AIF   ('&XTIDLOW' EQ 'ATR_LOW_TID_VALUE').ZG63R
                 AIF   ('&XTIDLOW'(1,1) NE '(').ZG63R
&ZCGPR           SETC  '&XTIDLOW'(2,K'&XTIDLOW-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG63P
                 AIF   (K'&ZCGPR GT 2).ZG63Q
                 AIF   ('&ZCGPR' EQ '0').ZG63Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG63Q  INVALID REG NAME
.ZG63P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG63R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG63Q
                 AIF   ('&ZCGPR' LE '12').ZG63R
.ZG63Q           ANOP  ,
&ZMS             SETC  '"TIDLOW='
&ZMS             SETC  '&ZMS.&TIDLOW"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG63R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE
&XRQD6           SETC  ''          INITIALIZE XVARIABLE
                 AIF   (K'&GTID LE 0).ZG66C
&ZXRQD6          SETC  'INPUT'     SET IN/OUTPUT
&XRQD6           SETC  'GTID'      SET XVARIABLE
&ZXGTID          SETC  'INPUT'     SET IN/OUTPUT
&XGTID           SETC  '&GTID(1)'  SET XVARIABLE PARM
                 AIF   (N'&GTID GT 1).ZG66A
&XGTID           SETC  '&GTID'     SET XVARIABLE PARM
.ZG66A           AIF   (N'&GTID LE 1).ZG66B     CK NUM
&ZMS             SETC  '"GTID='
&ZMS             SETC  '&ZMS.&GTID"'
&ZMS             SETC  '&ZMS "GTID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG66B           AIF   (K'&XGTID GT 0).ZG66C    ONE PARM
&ZXRQD6          SETC  ''          RESET IN/OUTPUT
&ZXGTID          SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  ' '
&ZMS             SETC  '&ZMS "GTID" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG66C           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE
                 AIF   (K'&GTIDSTR LE 0).ZG67D  NO ME KEY
                 AIF   (N'&GTIDSTR LE 1).ZG67A  CK NUM
&ZMS             SETC  '"GTIDSTR='
&ZMS             SETC  '&ZMS.&GTIDSTR"'
&ZMS             SETC  '&ZMS "GTIDSTR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG67A           AIF   (K'&XRQD6 LE 0).ZG67B
&ZMS             SETC  '"GTIDSTR'
&ZMS             SETC  '&ZMS.=&GTIDSTR"'
&ZMS             SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'
&ZMS             SETC  '&ZMS "&XRQD6"'
                 MNOTE 8,' &ZMS KEY.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG67D
.*
.ZG67B           ANOP  ,
&ZXRQD6          SETC  'INPUT'     SET IN/OUTPUT
&XRQD6           SETC  'GTIDSTR'   SET XVARIABLE
&ZXGTIDSTR       SETC  'INPUT'     SET IN/OUTPUT
&XGTIDSTR        SETC  '&GTIDSTR(1)'            SET XVARIABLE PARM
                 AIF   (N'&GTIDSTR GT 1).ZG67C
&XGTIDSTR        SETC  '&GTIDSTR'  SET XVARIABLE PARM
.ZG67C           AIF   (K'&XGTIDSTR GT 0).ZG67D  ONE PARM
&ZXRQD6          SETC  ''          RESET IN/OUTPUT
&ZXGTIDSTR       SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  ' '
&ZMS             SETC  '&ZMS "GTIDSTR" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG67D           ANOP  ,
.*------------------------------------------------------------------
.***AG.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF KEY ENTERED
                 AIF   (K'&XRQD6 GT 0).ZG68B
&ZXRQD6          SETC  'INPUT'     SET IN/OUTPUT
&XRQD6           SETC  'GTID'      SET DEFAULT
&ZXGTID          SETC  'INPUT'     SET IN/OUTPUT
&XGTID           SETC  '0'         SET DEFAULT PARM
.ZG68B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXGTIDSTR LE 0).ZG68R  NOT I/O
                 AIF   ('&XGTIDSTR'(1,1) NE '(').ZG68R
&ZCGPR           SETC  '&XGTIDSTR'(2,K'&XGTIDSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG68P
                 AIF   (K'&ZCGPR GT 2).ZG68Q
                 AIF   ('&ZCGPR' EQ '0').ZG68Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG68Q  INVALID REG NAME
.ZG68P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG68R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG68Q
                 AIF   ('&ZCGPR' LE '12').ZG68R
.ZG68Q           ANOP  ,
&ZMS             SETC  '"GTIDSTR='
&ZMS             SETC  '&ZMS.&GTIDSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG68R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZG66ZY  AIF    ('&XRQD6' NE 'GTID').ZG67ZY
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXGTID LE 0).ZG66R   NOT I/O
                 AIF   ('&XGTID'(1,1) NE '(').ZG66R
&ZCGPR           SETC  '&XGTID'(2,K'&XGTID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG66P
                 AIF   (K'&ZCGPR GT 2).ZG66Q
                 AIF   ('&ZCGPR' EQ '0').ZG66Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG66Q  INVALID REG NAME
.ZG66P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG66R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG66Q
                 AIF   ('&ZCGPR' LE '12').ZG66R
.ZG66Q           ANOP  ,
&ZMS             SETC  '"GTID='
&ZMS             SETC  '&ZMS.&GTID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG66R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZG67ZY  AIF    ('&XRQD6' NE 'GTIDSTR').ZG68ZY
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXGTIDSTR LE 0).ZG67R  NOT I/O
                 AIF   ('&XGTIDSTR'(1,1) NE '(').ZG67R
&ZCGPR           SETC  '&XGTIDSTR'(2,K'&XGTIDSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG67P
                 AIF   (K'&ZCGPR GT 2).ZG67Q
                 AIF   ('&ZCGPR' EQ '0').ZG67Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG67Q  INVALID REG NAME
.ZG67P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG67R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG67Q
                 AIF   ('&ZCGPR' LE '12').ZG67R
.ZG67Q           ANOP  ,
&ZMS             SETC  '"GTIDSTR='
&ZMS             SETC  '&ZMS.&GTIDSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG67R           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMEKY15 NAME, OPT INPUT, ME KEYS -END
.ZG68ZY          ANOP ,            END MUTUALLY EXCLUSIVE KEYS
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&XID LE 1).ZG70A      CK NUM
&ZMS             SETC  '"XID='
&ZMS             SETC  '&ZMS.&XID"'
&ZMS             SETC  '&ZMS "XID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG70A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXXID           SETC  'INPUT'     SET IN/OUTPUT
&XXID            SETC  '0'
                 AIF   (K'&XID(1) LE 0).ZG70B   PARM
&XXID            SETC  '&XID(1)'   SET XVARIABLE
                 AIF   (N'&XID GT 1).ZG70B      MULTI
&XXID            SETC  '&XID'      SET XVARIABLE
.ZG70B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXXID LE 0).ZG70R    NOT I/O
                 AIF   ('&XXID'(1,1) NE '(').ZG70R
&ZCGPR           SETC  '&XXID'(2,K'&XXID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG70P
                 AIF   (K'&ZCGPR GT 2).ZG70Q
                 AIF   ('&ZCGPR' EQ '0').ZG70Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG70Q  INVALID REG NAME
.ZG70P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG70R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG70Q
                 AIF   ('&ZCGPR' LE '12').ZG70R
.ZG70Q           ANOP  ,
&ZMS             SETC  '"XID='
&ZMS             SETC  '&ZMS.&XID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG70R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&XIDFORMATID LE 1).ZG73A  CK NUM
&ZMS             SETC  '"XIDFORMATID='
&ZMS             SETC  '&ZMS.&XIDFORMATID"'
&ZMS             SETC  '&ZMS "XIDFORMATID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG73A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXXIDFORMATID   SETC  'INPUT'     SET IN/OUTPUT
&XXIDFORMATID    SETC  '0'
                 AIF   (K'&XIDFORMATID(1) LE 0).ZG73B  PARM
&XXIDFORMATID    SETC  '&XIDFORMATID(1)'        SET XVARIABLE
                 AIF   (N'&XIDFORMATID GT 1).ZG73B  MULTI
&XXIDFORMATID    SETC  '&XIDFORMATID'           SET XVARIABLE
.ZG73B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXXIDFORMATID LE 0).ZG73R  NOT I/O
                 AIF   ('&XXIDFORMATID'(1,1) NE '(').ZG73R
&ZCGPR           SETC  '&XXIDFORMATID'(2,K'&XXIDFORMATID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG73P
                 AIF   (K'&ZCGPR GT 2).ZG73Q
                 AIF   ('&ZCGPR' EQ '0').ZG73Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG73Q  INVALID REG NAME
.ZG73P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG73R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG73Q
                 AIF   ('&ZCGPR' LE '12').ZG73R
.ZG73Q           ANOP  ,
&ZMS             SETC  '"XIDFORMATID='
&ZMS             SETC  '&ZMS.&XIDFORMATID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG73R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&XIDGTRIDSTR LE 1).ZG76A  CK NUM
&ZMS             SETC  '"XIDGTRIDSTR='
&ZMS             SETC  '&ZMS.&XIDGTRIDSTR"'
&ZMS             SETC  '&ZMS "XIDGTRIDSTR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG76A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXXIDGTRIDSTR   SETC  'INPUT'     SET IN/OUTPUT
&XXIDGTRIDSTR    SETC  '0'
                 AIF   (K'&XIDGTRIDSTR(1) LE 0).ZG76B  PARM
&XXIDGTRIDSTR    SETC  '&XIDGTRIDSTR(1)'        SET XVARIABLE
                 AIF   (N'&XIDGTRIDSTR GT 1).ZG76B  MULTI
&XXIDGTRIDSTR    SETC  '&XIDGTRIDSTR'           SET XVARIABLE
.ZG76B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXXIDGTRIDSTR LE 0).ZG76R  NOT I/O
                 AIF   ('&XXIDGTRIDSTR'(1,1) NE '(').ZG76R
&ZCGPR           SETC  '&XXIDGTRIDSTR'(2,K'&XXIDGTRIDSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG76P
                 AIF   (K'&ZCGPR GT 2).ZG76Q
                 AIF   ('&ZCGPR' EQ '0').ZG76Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG76Q  INVALID REG NAME
.ZG76P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG76R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG76Q
                 AIF   ('&ZCGPR' LE '12').ZG76R
.ZG76Q           ANOP  ,
&ZMS             SETC  '"XIDGTRIDSTR='
&ZMS             SETC  '&ZMS.&XIDGTRIDSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG76R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&XIDBQUALSTR LE 1).ZG79A  CK NUM
&ZMS             SETC  '"XIDBQUALSTR='
&ZMS             SETC  '&ZMS.&XIDBQUALSTR"'
&ZMS             SETC  '&ZMS "XIDBQUALSTR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG79A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXXIDBQUALSTR   SETC  'INPUT'     SET IN/OUTPUT
&XXIDBQUALSTR    SETC  '0'
                 AIF   (K'&XIDBQUALSTR(1) LE 0).ZG79B  PARM
&XXIDBQUALSTR    SETC  '&XIDBQUALSTR(1)'        SET XVARIABLE
                 AIF   (N'&XIDBQUALSTR GT 1).ZG79B  MULTI
&XXIDBQUALSTR    SETC  '&XIDBQUALSTR'           SET XVARIABLE
.ZG79B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXXIDBQUALSTR LE 0).ZG79R  NOT I/O
                 AIF   ('&XXIDBQUALSTR'(1,1) NE '(').ZG79R
&ZCGPR           SETC  '&XXIDBQUALSTR'(2,K'&XXIDBQUALSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG79P
                 AIF   (K'&ZCGPR GT 2).ZG79Q
                 AIF   ('&ZCGPR' EQ '0').ZG79Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG79Q  INVALID REG NAME
.ZG79P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG79R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG79Q
                 AIF   ('&ZCGPR' LE '12').ZG79R
.ZG79Q           ANOP  ,
&ZMS             SETC  '"XIDBQUALSTR='
&ZMS             SETC  '&ZMS.&XIDBQUALSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG79R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&RMNAME LE 1).ZG82A   CK NUM
&ZMS             SETC  '"RMNAME='
&ZMS             SETC  '&ZMS.&RMNAME"'
&ZMS             SETC  '&ZMS "RMNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG82A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXRMNAME        SETC  'INPUT'     SET IN/OUTPUT
&XRMNAME         SETC  'NONE'
                 AIF   (K'&RMNAME(1) LE 0).ZG82B  PARM
&XRMNAME         SETC  '&RMNAME(1)'             SET XVARIABLE
                 AIF   (N'&RMNAME GT 1).ZG82B   MULTI
&XRMNAME         SETC  '&RMNAME'   SET XVARIABLE
.ZG82B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXRMNAME LE 0).ZG82R  NOT I/O
         AIF   ('&XRMNAME' EQ 'NONE').ZG82R
                 AIF   ('&XRMNAME'(1,1) NE '(').ZG82R
&ZCGPR           SETC  '&XRMNAME'(2,K'&XRMNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG82P
                 AIF   (K'&ZCGPR GT 2).ZG82Q
                 AIF   ('&ZCGPR' EQ '0').ZG82Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG82Q  INVALID REG NAME
.ZG82P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG82R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG82Q
                 AIF   ('&ZCGPR' LE '12').ZG82R
.ZG82Q           ANOP  ,
&ZMS             SETC  '"RMNAME='
&ZMS             SETC  '&ZMS.&RMNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG82R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&WMNAME LE 1).ZG85A   CK NUM
&ZMS             SETC  '"WMNAME='
&ZMS             SETC  '&ZMS.&WMNAME"'
&ZMS             SETC  '&ZMS "WMNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG85A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXWMNAME        SETC  'INPUT'     SET IN/OUTPUT
&XWMNAME         SETC  'NONE'
                 AIF   (K'&WMNAME(1) LE 0).ZG85B  PARM
&XWMNAME         SETC  '&WMNAME(1)'             SET XVARIABLE
                 AIF   (N'&WMNAME GT 1).ZG85B   MULTI
&XWMNAME         SETC  '&WMNAME'   SET XVARIABLE
.ZG85B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXWMNAME LE 0).ZG85R  NOT I/O
         AIF   ('&XWMNAME' EQ 'NONE').ZG85R
                 AIF   ('&XWMNAME'(1,1) NE '(').ZG85R
&ZCGPR           SETC  '&XWMNAME'(2,K'&XWMNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG85P
                 AIF   (K'&ZCGPR GT 2).ZG85Q
                 AIF   ('&ZCGPR' EQ '0').ZG85Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG85Q  INVALID REG NAME
.ZG85P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG85R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG85Q
                 AIF   ('&ZCGPR' LE '12').ZG85R
.ZG85Q           ANOP  ,
&ZMS             SETC  '"WMNAME='
&ZMS             SETC  '&ZMS.&WMNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG85R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&TODBEG LE 1).ZG88A   CK NUM
&ZMS             SETC  '"TODBEG='
&ZMS             SETC  '&ZMS.&TODBEG"'
&ZMS             SETC  '&ZMS "TODBEG"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG88A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXTODBEG        SETC  'INPUT'     SET IN/OUTPUT
&XTODBEG         SETC  '0'
                 AIF   (K'&TODBEG(1) LE 0).ZG88B  PARM
&XTODBEG         SETC  '&TODBEG(1)'             SET XVARIABLE
                 AIF   (N'&TODBEG GT 1).ZG88B   MULTI
&XTODBEG         SETC  '&TODBEG'   SET XVARIABLE
.ZG88B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXTODBEG LE 0).ZG88R  NOT I/O
                 AIF   ('&XTODBEG'(1,1) NE '(').ZG88R
&ZCGPR           SETC  '&XTODBEG'(2,K'&XTODBEG-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG88P
                 AIF   (K'&ZCGPR GT 2).ZG88Q
                 AIF   ('&ZCGPR' EQ '0').ZG88Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG88Q  INVALID REG NAME
.ZG88P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG88R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG88Q
                 AIF   ('&ZCGPR' LE '12').ZG88R
.ZG88Q           ANOP  ,
&ZMS             SETC  '"TODBEG='
&ZMS             SETC  '&ZMS.&TODBEG"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG88R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&TODEND LE 1).ZG91A   CK NUM
&ZMS             SETC  '"TODEND='
&ZMS             SETC  '&ZMS.&TODEND"'
&ZMS             SETC  '&ZMS "TODEND"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG91A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXTODEND        SETC  'INPUT'     SET IN/OUTPUT
&XTODEND         SETC  '0'
                 AIF   (K'&TODEND(1) LE 0).ZG91B  PARM
&XTODEND         SETC  '&TODEND(1)'             SET XVARIABLE
                 AIF   (N'&TODEND GT 1).ZG91B   MULTI
&XTODEND         SETC  '&TODEND'   SET XVARIABLE
.ZG91B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXTODEND LE 0).ZG91R  NOT I/O
                 AIF   ('&XTODEND'(1,1) NE '(').ZG91R
&ZCGPR           SETC  '&XTODEND'(2,K'&XTODEND-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG91P
                 AIF   (K'&ZCGPR GT 2).ZG91Q
                 AIF   ('&ZCGPR' EQ '0').ZG91Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG91Q  INVALID REG NAME
.ZG91P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG91R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG91Q
                 AIF   ('&ZCGPR' LE '12').ZG91R
.ZG91Q           ANOP  ,
&ZMS             SETC  '"TODEND='
&ZMS             SETC  '&ZMS.&TODEND"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG91R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&CURDUR LE 1).ZG94A   CK NUM
&ZMS             SETC  '"CURDUR='
&ZMS             SETC  '&ZMS.&CURDUR"'
&ZMS             SETC  '&ZMS "CURDUR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG94A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXCURDUR        SETC  'INPUT'     SET IN/OUTPUT
&XCURDUR         SETC  '0'
                 AIF   (K'&CURDUR(1) LE 0).ZG94B  PARM
&XCURDUR         SETC  '&CURDUR(1)'             SET XVARIABLE
                 AIF   (N'&CURDUR GT 1).ZG94B   MULTI
&XCURDUR         SETC  '&CURDUR'   SET XVARIABLE
.ZG94B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXCURDUR LE 0).ZG94R  NOT I/O
                 AIF   ('&XCURDUR'(1,1) NE '(').ZG94R
&ZCGPR           SETC  '&XCURDUR'(2,K'&XCURDUR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG94P
                 AIF   (K'&ZCGPR GT 2).ZG94Q
                 AIF   ('&ZCGPR' EQ '0').ZG94Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG94Q  INVALID REG NAME
.ZG94P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG94R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG94Q
                 AIF   ('&ZCGPR' LE '12').ZG94R
.ZG94Q           ANOP  ,
&ZMS             SETC  '"CURDUR='
&ZMS             SETC  '&ZMS.&CURDUR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG94R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&EXINFOMASK LE 1).ZG97A  CK NUM
&ZMS             SETC  '"EXINFOMASK='
&ZMS             SETC  '&ZMS.&EXINFOMASK"'
&ZMS             SETC  '&ZMS "EXINFOMASK"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG97A           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXEXINFOMASK    SETC  'INPUT'     SET IN/OUTPUT
&XEXINFOMASK     SETC  'ATR_NOXINFO_MASK'
                 AIF   (K'&EXINFOMASK(1) LE 0).ZG97B  PARM
&XEXINFOMASK     SETC  '&EXINFOMASK(1)'         SET XVARIABLE
                 AIF   (N'&EXINFOMASK GT 1).ZG97B  MULTI
&XEXINFOMASK     SETC  '&EXINFOMASK'            SET XVARIABLE
.ZG97B           ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXEXINFOMASK LE 0).ZG97R  NOT I/O
         AIF   ('&XEXINFOMASK' EQ 'ATR_NOXINFO_MASK').ZG97R
                 AIF   ('&XEXINFOMASK'(1,1) NE '(').ZG97R
&ZCGPR           SETC  '&XEXINFOMASK'(2,K'&XEXINFOMASK-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG97P
                 AIF   (K'&ZCGPR GT 2).ZG97Q
                 AIF   ('&ZCGPR' EQ '0').ZG97Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG97Q  INVALID REG NAME
.ZG97P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG97R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG97Q
                 AIF   ('&ZCGPR' LE '12').ZG97R
.ZG97Q           ANOP  ,
&ZMS             SETC  '"EXINFOMASK='
&ZMS             SETC  '&ZMS.&EXINFOMASK"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG97R           ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&GNAME LE 1).ZG100A   CK NUM
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS "GNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG100A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXGNAME         SETC  'INPUT'     SET IN/OUTPUT
&XGNAME          SETC  'CURRENT_GNAME'
                 AIF   (K'&GNAME(1) LE 0).ZG100B  PARM
&XGNAME          SETC  '&GNAME(1)'              SET XVARIABLE
                 AIF   (N'&GNAME GT 1).ZG100B   MULTI
&XGNAME          SETC  '&GNAME'    SET XVARIABLE
.ZG100B          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXGNAME LE 0).ZG100R  NOT I/O
         AIF   ('&XGNAME' EQ 'CURRENT_GNAME').ZG100R
                 AIF   ('&XGNAME'(1,1) NE '(').ZG100R
&ZCGPR           SETC  '&XGNAME'(2,K'&XGNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG100P
                 AIF   (K'&ZCGPR GT 2).ZG100Q
                 AIF   ('&ZCGPR' EQ '0').ZG100Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG100Q  INVALID REG NAME
.ZG100P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG100R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG100Q
                 AIF   ('&ZCGPR' LE '12').ZG100R
.ZG100Q          ANOP  ,
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG100R          ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&SYSNAME LE 1).ZG103A  CK NUM
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS "SYSNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG103A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXSYSNAME       SETC  'INPUT'     SET IN/OUTPUT
&XSYSNAME        SETC  'CURRENT_SYSNAME'
                 AIF   (K'&SYSNAME(1) LE 0).ZG103B  PARM
&XSYSNAME        SETC  '&SYSNAME(1)'            SET XVARIABLE
                 AIF   (N'&SYSNAME GT 1).ZG103B  MULTI
&XSYSNAME        SETC  '&SYSNAME'  SET XVARIABLE
.ZG103B          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSYSNAME LE 0).ZG103R  NOT I/O
         AIF   ('&XSYSNAME' EQ 'CURRENT_SYSNAME').ZG103R
                 AIF   ('&XSYSNAME'(1,1) NE '(').ZG103R
&ZCGPR           SETC  '&XSYSNAME'(2,K'&XSYSNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG103P
                 AIF   (K'&ZCGPR GT 2).ZG103Q
                 AIF   ('&ZCGPR' EQ '0').ZG103Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG103Q  INVALID REG NAME
.ZG103P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG103R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG103Q
                 AIF   ('&ZCGPR' LE '12').ZG103R
.ZG103Q          ANOP  ,
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG103R          ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&SORTTAB LE 1).ZG106A  CK NUM
&ZMS             SETC  '"SORTTAB='
&ZMS             SETC  '&ZMS.&SORTTAB"'
&ZMS             SETC  '&ZMS "SORTTAB"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG106A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXSORTTAB       SETC  'INPUT'     SET IN/OUTPUT
&XSORTTAB        SETC  '0'
                 AIF   (K'&SORTTAB(1) LE 0).ZG106B  PARM
&XSORTTAB        SETC  '&SORTTAB(1)'            SET XVARIABLE
                 AIF   (N'&SORTTAB GT 1).ZG106B  MULTI
&XSORTTAB        SETC  '&SORTTAB'  SET XVARIABLE
.ZG106B          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSORTTAB LE 0).ZG106R  NOT I/O
                 AIF   ('&XSORTTAB'(1,1) NE '(').ZG106R
&ZCGPR           SETC  '&XSORTTAB'(2,K'&XSORTTAB-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG106P
                 AIF   (K'&ZCGPR GT 2).ZG106Q
                 AIF   ('&ZCGPR' EQ '0').ZG106Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG106Q  INVALID REG NAME
.ZG106P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG106R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG106Q
                 AIF   ('&ZCGPR' LE '12').ZG106R
.ZG106Q          ANOP  ,
&ZMS             SETC  '"SORTTAB='
&ZMS             SETC  '&ZMS.&SORTTAB"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG106R          ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&SORTNUM LE 1).ZG108A  CK NUM
&ZMS             SETC  '"SORTNUM='
&ZMS             SETC  '&ZMS.&SORTNUM"'
&ZMS             SETC  '&ZMS "SORTNUM"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG108A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR09 NAME, OPT RQD INPUT, KEYS -XVARIABLE
&ZXSORTNUM       SETC  'INPUT'     SET IN/OUTPUT
&XSORTNUM        SETC  '&SORTNUM(1)'            SET XVARIABLE
                 AIF   (N'&SORTNUM GT 1).ZG108B  MULTI PARMS
&XSORTNUM        SETC  '&SORTNUM'  SET XVARIABLE
.ZG108B          AIF   (K'&SORTTAB(1) GT 0).ZG108C  KEY
                 AIF   (K'&SORTNUM(1) LE 0).ZG108D  PARM
&ZMS             SETC  '"SORTNUM'
&ZMS             SETC  '&ZMS.=&SORTNUM"'
&ZMS             SETC  '&ZMS CAN ONLY BE SPECIFIED IF'
&ZMS             SETC  '&ZMS '
&ZMS             SETC  '&ZMS "SORTTAB"'
                 MNOTE 8,' &ZMS IS ALSO SPECIFIED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG108E
.*
.ZG108C          AIF   (K'&SORTNUM(1) GT 0).ZG108E  PARM
&ZXSORTNUM       SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  'WHEN "SORTTAB" IS SPECIFIED'
&ZMS             SETC  '&ZMS , "SORTNUM" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG108D          ANOP  ,
&XSORTNUM        SETC  '0'         SET DEFAULT
.ZG108E          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSORTNUM LE 0).ZG108R  NOT I/O
                 AIF   ('&XSORTNUM'(1,1) NE '(').ZG108R
&ZCGPR           SETC  '&XSORTNUM'(2,K'&XSORTNUM-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG108P
                 AIF   (K'&ZCGPR GT 2).ZG108Q
                 AIF   ('&ZCGPR' EQ '0').ZG108Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG108Q  INVALID REG NAME
.ZG108P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG108R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG108Q
                 AIF   ('&ZCGPR' LE '12').ZG108R
.ZG108Q          ANOP  ,
&ZMS             SETC  '"SORTNUM='
&ZMS             SETC  '&ZMS.&SORTNUM"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG108R          ANOP  ,
.*------------------------------------------------------------------
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG111           ANOP  ,
&ZXREQUEST       SETC  'INPUT'     SET IN/OUTPUT
                 AIF   (K'&XREQUEST GT 0).ZG111E  VALID ARG
                 AIF   (T'&REQUEST EQ 'O').ZG111D  OMITTED
&ZASYSLNDX       SETA  0
.ZG111A          ANOP  ,           POSITIONAL MACRO KEY
&ZASYSLNDX       SETA  &ZASYSLNDX+1
                 AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG111C
&ZTLC            SETC 'REQUEST'
                 AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG111A
.ZG111B          ANOP  ,
&ZXREQUEST       SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  'THE "REQUEST" KEY'
&ZMS             SETC  '&ZMS MUST CONTAIN ONE'
                 MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG111E
.ZG111C          ANOP  ,
&ZXREQUEST       SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  '"REQUEST='
&ZMS             SETC  '&ZMS.&REQUEST"'
&ZMS             SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'
&ZMS             SETC  '&ZMS "RMINFO",'
&ZMS             SETC  '&ZMS "WMINFO",'
&ZMS             SETC  '&ZMS "SYSINFO",'
&ZMS             SETC  '&ZMS OR "URINFO".'
                 MNOTE 8,' &ZMS '
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG111E
.ZG111D          ANOP  ,
&XREQUEST        SETC  'RMINFO'    SET DEFAULT KEYWORD
.ZG111E          ANOP  ,
.*------------------------------------------------------------------
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
                 AIF   (K'&REQUEST(1) GT 0).ZG111F  PARM
&XREQUEST        SETC  ''          ENSURE NULL KEYWORD
&ZXREQUEST       SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  'THE'
&ZMS             SETC  '&ZMS "REQUEST" KEY AND ITS'
&ZMS             SETC  '&ZMS ARGUMENT ARE REQUIRED.'
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'
&ZMS             SETC  '&ZMS "RMINFO",'
&ZMS             SETC  '&ZMS "WMINFO",'
&ZMS             SETC  '&ZMS "SYSINFO",'
&ZMS             SETC  '&ZMS OR "URINFO".'
                 MNOTE 8,' &ZMS '
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG111F          ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&AREAADDR LE 1).ZG113A  CK NUM
&ZMS             SETC  '"AREAADDR='
&ZMS             SETC  '&ZMS.&AREAADDR"'
&ZMS             SETC  '&ZMS "AREAADDR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG113A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE
&ZXAREAADDR      SETC  'INPUT'     SET IN/OUTPUT
&XAREAADDR       SETC  '&AREAADDR(1)'           SET XVARIABLE
                 AIF   (N'&AREAADDR GT 1).ZG113B  MULTI PARMS
&XAREAADDR       SETC  '&AREAADDR'              SET XVARIABLE
.ZG113B          AIF   (K'&AREAADDR(1) GT 0).ZG113C
&ZXAREAADDR      SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  ' '
&ZMS             SETC  '&ZMS "AREAADDR" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG113C          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXAREAADDR LE 0).ZG113R  NOT I/O
                 AIF   ('&XAREAADDR'(1,1) NE '(').ZG113R
&ZCGPR           SETC  '&XAREAADDR'(2,K'&XAREAADDR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG113P
                 AIF   (K'&ZCGPR GT 2).ZG113Q
                 AIF   ('&ZCGPR' EQ '0').ZG113Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG113Q  INVALID REG NAME
.ZG113P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG113R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG113Q
                 AIF   ('&ZCGPR' LE '12').ZG113R
.ZG113Q          ANOP  ,
&ZMS             SETC  '"AREAADDR='
&ZMS             SETC  '&ZMS.&AREAADDR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG113R          ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&AREAALET LE 1).ZG116A  CK NUM
&ZMS             SETC  '"AREAALET='
&ZMS             SETC  '&ZMS.&AREAALET"'
&ZMS             SETC  '&ZMS "AREAALET"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG116A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXAREAALET      SETC  'INPUT'     SET IN/OUTPUT
&XAREAALET       SETC  '0'
                 AIF   (K'&AREAALET(1) LE 0).ZG116B  PARM
&XAREAALET       SETC  '&AREAALET(1)'           SET XVARIABLE
                 AIF   (N'&AREAALET GT 1).ZG116B  MULTI
&XAREAALET       SETC  '&AREAALET'              SET XVARIABLE
.ZG116B          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXAREAALET LE 0).ZG116R  NOT I/O
                 AIF   ('&XAREAALET'(1,1) NE '(').ZG116R
&ZCGPR           SETC  '&XAREAALET'(2,K'&XAREAALET-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG116P
                 AIF   (K'&ZCGPR GT 2).ZG116Q
                 AIF   ('&ZCGPR' EQ '0').ZG116Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG116Q  INVALID REG NAME
.ZG116P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG116R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG116Q
                 AIF   ('&ZCGPR' LE '12').ZG116R
.ZG116Q          ANOP  ,
&ZMS             SETC  '"AREAALET='
&ZMS             SETC  '&ZMS.&AREAALET"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG116R          ANOP  ,
.*------------------------------------------------------------------
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
&XAREAOPT        SETC  ''          INITIALIZE XVARIABLE
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG120           ANOP  ,
                 AIF   (K'&AREAOPT(1) LE 0).ZG120A
&ZTLC            SETC 'BYADDR'
                 AIF   ('&AREAOPT(1)' NE '&ZTLC').ZG121
&XAREAOPT        SETC  'BYADDR'    SET KEYWORD
                 AIF   (N'&AREAOPT LE 1).ZG120A  CK NUM
&ZMS             SETC  '"AREAOPT='
&ZMS             SETC  '&ZMS.&AREAOPT"'
&ZMS             SETC  '&ZMS "AREAOPT"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG120A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG121           ANOP  ,
&ZTLC            SETC 'BYOFFSET'
                 AIF   ('&AREAOPT(1)' NE '&ZTLC').ZG122
&XAREAOPT        SETC  'BYOFFSET'  SET KEYWORD
                 AIF   (N'&AREAOPT LE 1).ZG121A  CK NUM
&ZMS             SETC  '"AREAOPT='
&ZMS             SETC  '&ZMS.&AREAOPT"'
&ZMS             SETC  '&ZMS "AREAOPT"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG121A          ANOP  ,
.*------------------------------------------------------------------
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG122           ANOP  ,
&ZXAREAOPT       SETC  'INPUT'     SET IN/OUTPUT
                 AIF   (K'&XAREAOPT GT 0).ZG122E  VALID ARG
                 AIF   (T'&AREAOPT EQ 'O').ZG122D  OMITTED
&ZASYSLNDX       SETA  0
.ZG122A          ANOP  ,           POSITIONAL MACRO KEY
&ZASYSLNDX       SETA  &ZASYSLNDX+1
                 AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG122C
&ZTLC            SETC 'AREAOPT'
                 AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG122A
.ZG122B          ANOP  ,
&ZXAREAOPT       SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  'THE "AREAOPT" KEY'
&ZMS             SETC  '&ZMS MUST CONTAIN ONE'
                 MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG122E
.ZG122C          ANOP  ,
&ZXAREAOPT       SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  '"AREAOPT='
&ZMS             SETC  '&ZMS.&AREAOPT"'
&ZMS             SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'
&ZMS             SETC  '&ZMS "BYADDR"'
&ZMS             SETC  '&ZMS OR "BYOFFSET".'
                 MNOTE 8,' &ZMS '
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG122E
.ZG122D          ANOP  ,
&XAREAOPT        SETC  'BYADDR'    SET DEFAULT KEYWORD
.ZG122E          ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&AREALEN LE 1).ZG124A  CK NUM
&ZMS             SETC  '"AREALEN='
&ZMS             SETC  '&ZMS.&AREALEN"'
&ZMS             SETC  '&ZMS "AREALEN"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG124A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE
&ZXAREALEN       SETC  'INPUT'     SET IN/OUTPUT
&XAREALEN        SETC  '&AREALEN(1)'            SET XVARIABLE
                 AIF   (N'&AREALEN GT 1).ZG124B  MULTI PARMS
&XAREALEN        SETC  '&AREALEN'  SET XVARIABLE
.ZG124B          AIF   (K'&AREALEN(1) GT 0).ZG124C
&ZXAREALEN       SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  ' '
&ZMS             SETC  '&ZMS "AREALEN" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG124C          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXAREALEN LE 0).ZG124R  NOT I/O
                 AIF   ('&XAREALEN'(1,1) NE '(').ZG124R
&ZCGPR           SETC  '&XAREALEN'(2,K'&XAREALEN-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG124P
                 AIF   (K'&ZCGPR GT 2).ZG124Q
                 AIF   ('&ZCGPR' EQ '0').ZG124Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG124Q  INVALID REG NAME
.ZG124P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG124R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG124Q
                 AIF   ('&ZCGPR' LE '12').ZG124R
.ZG124Q          ANOP  ,
&ZMS             SETC  '"AREALEN='
&ZMS             SETC  '&ZMS.&AREALEN"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG124R          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START
                 AIF   ('&XMF' EQ 'M').ZG128    BYPASS IF MF=M
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, RQD OUTPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&COUNT LE 1).ZG127A   CK NUM
&ZMS             SETC  '"COUNT='
&ZMS             SETC  '&ZMS.&COUNT"'
&ZMS             SETC  '&ZMS "COUNT"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG127A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR06 NAME, RQD OUTPUT, KEYS -XVARIABLE
&ZXCOUNT         SETC  'OUTPUT'    SET IN/OUTPUT
&XCOUNT          SETC  '&COUNT(1)'              SET XVARIABLE
                 AIF   (N'&COUNT GT 1).ZG127B   MULTI PARMS
&XCOUNT          SETC  '&COUNT'    SET XVARIABLE
.ZG127B          AIF   (K'&COUNT(1) GT 0).ZG127C
&ZXCOUNT         SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  ' '
&ZMS             SETC  '&ZMS "COUNT" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG127C          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXCOUNT LE 0).ZG127R  NOT I/O
                 AIF   ('&XCOUNT'(1,1) NE '(').ZG127R
&ZCGPR           SETC  '&XCOUNT'(2,K'&XCOUNT-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG127P
                 AIF   (K'&ZCGPR GT 2).ZG127Q
                 AIF   ('&ZCGPR' EQ '0').ZG127Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG127Q  INVALID REG NAME
.ZG127P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG127R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG127Q
                 AIF   ('&ZCGPR' LE '12').ZG127R
.ZG127Q          ANOP  ,
&ZMS             SETC  '"COUNT='
&ZMS             SETC  '&ZMS.&COUNT"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG127R          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END
.ZG128           ANOP  ,           END OF BYPASS CHECK
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&RCTABLE LE 1).ZG130A  CK NUM
&ZMS             SETC  '"RCTABLE='
&ZMS             SETC  '&ZMS.&RCTABLE"'
&ZMS             SETC  '&ZMS "RCTABLE"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG130A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXRCTABLE       SETC  'INPUT'     SET IN/OUTPUT
&XRCTABLE        SETC  '0'
                 AIF   (K'&RCTABLE(1) LE 0).ZG130B  PARM
&XRCTABLE        SETC  '&RCTABLE(1)'            SET XVARIABLE
                 AIF   (N'&RCTABLE GT 1).ZG130B  MULTI
&XRCTABLE        SETC  '&RCTABLE'  SET XVARIABLE
.ZG130B          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXRCTABLE LE 0).ZG130R  NOT I/O
                 AIF   ('&XRCTABLE'(1,1) NE '(').ZG130R
&ZCGPR           SETC  '&XRCTABLE'(2,K'&XRCTABLE-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG130P
                 AIF   (K'&ZCGPR GT 2).ZG130Q
                 AIF   ('&ZCGPR' EQ '0').ZG130Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG130Q  INVALID REG NAME
.ZG130P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG130R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG130Q
                 AIF   ('&ZCGPR' LE '12').ZG130R
.ZG130Q          ANOP  ,
&ZMS             SETC  '"RCTABLE='
&ZMS             SETC  '&ZMS.&RCTABLE"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG130R          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START
                 AIF   ('&XMF' EQ 'M').ZG133    BYPASS IF MF=M
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT RQD OUTPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&RCNUM LE 1).ZG132A   CK NUM
&ZMS             SETC  '"RCNUM='
&ZMS             SETC  '&ZMS.&RCNUM"'
&ZMS             SETC  '&ZMS "RCNUM"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG132A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR10 NAME, OPT RQD OUTPUT, KEYS -XVARIABLE
                 AIF   (K'&RCTABLE(1) GT 0).ZG132B  KEY
                 AIF   (K'&RCNUM(1) LE 0).ZG132D  NO PRM
&ZMS             SETC  '"RCNUM'
&ZMS             SETC  '&ZMS.=&RCNUM"'
&ZMS             SETC  '&ZMS CAN ONLY BE SPECIFIED IF'
&ZMS             SETC  '&ZMS '
&ZMS             SETC  '&ZMS "RCTABLE"'
                 MNOTE 8,' &ZMS IS ALSO SPECIFIED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZG132D
.*
.ZG132B          ANOP  ,
                 AIF   (K'&RCNUM(1) LE 0).ZG132C  NO PRM
&ZXRCNUM         SETC  'OUTPUT'    SET OUTPUT
&XRCNUM          SETC  '&RCNUM(1))'             SET XVARIABLE
                 AIF   (N'&RCNUM GT 1).ZG132C
&XRCNUM          SETC  '&RCNUM'    SET XVARIABLE
                 AGO   .ZG132D
.ZG132C          ANOP  ,
&ZMS             SETC  'WHEN "RCTABLE" IS SPECIFIED'
&ZMS             SETC  '&ZMS , "RCNUM" KEY AND ITS'
                 MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG132D          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT RQD OUTPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXRCNUM LE 0).ZG132R  NOT I/O
                 AIF   ('&XRCNUM'(1,1) NE '(').ZG132R
&ZCGPR           SETC  '&XRCNUM'(2,K'&XRCNUM-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG132P
                 AIF   (K'&ZCGPR GT 2).ZG132Q
                 AIF   ('&ZCGPR' EQ '0').ZG132Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG132Q  INVALID REG NAME
.ZG132P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG132R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG132Q
                 AIF   ('&ZCGPR' LE '12').ZG132R
.ZG132Q          ANOP  ,
&ZMS             SETC  '"RCNUM='
&ZMS             SETC  '&ZMS.&RCNUM"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG132R          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END
.ZG133           ANOP  ,           END OF BYPASS CHECK
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&RETCODE LE 1).ZG136A  CK NUM
&ZMS             SETC  '"RETCODE='
&ZMS             SETC  '&ZMS.&RETCODE"'
&ZMS             SETC  '&ZMS "RETCODE"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG136A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE
                 AIF   (K'&RETCODE(1) LE 0).ZG136C  NO PARM
&ZXRETCODE       SETC  'OUTPUT'    SET OUTPUT
&XRETCODE        SETC  '&RETCODE(1)'            SET XVARIABLE
                 AIF   (N'&RETCODE GT 1).ZG136C
&XRETCODE        SETC  '&RETCODE'  SET XVARIABLE
.ZG136C          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXRETCODE LE 0).ZG136R  NOT I/O
                 AIF   ('&XRETCODE'(1,1) NE '(').ZG136R
&ZCGPR           SETC  '&XRETCODE'(2,K'&XRETCODE-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG136P
                 AIF   (K'&ZCGPR GT 2).ZG136Q
                 AIF   ('&ZCGPR' EQ '0').ZG136Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG136Q  INVALID REG NAME
.ZG136P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG136R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG136Q
                 AIF   ('&ZCGPR' LE '12').ZG136R
.ZG136Q          ANOP  ,
&ZMS             SETC  '"RETCODE='
&ZMS             SETC  '&ZMS.&RETCODE"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG136R          ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY
                 AIF   (N'&RSNCODE LE 1).ZG139A  CK NUM
&ZMS             SETC  '"RSNCODE='
&ZMS             SETC  '&ZMS.&RSNCODE"'
&ZMS             SETC  '&ZMS "RSNCODE"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG139A          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE
                 AIF   (K'&RSNCODE(1) LE 0).ZG139C  NO PARM
&ZXRSNCODE       SETC  'OUTPUT'    SET OUTPUT
&XRSNCODE        SETC  '&RSNCODE(1)'            SET XVARIABLE
                 AIF   (N'&RSNCODE GT 1).ZG139C
&XRSNCODE        SETC  '&RSNCODE'  SET XVARIABLE
.ZG139C          ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXRSNCODE LE 0).ZG139R  NOT I/O
                 AIF   ('&XRSNCODE'(1,1) NE '(').ZG139R
&ZCGPR           SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG139P
                 AIF   (K'&ZCGPR GT 2).ZG139Q
                 AIF   ('&ZCGPR' EQ '0').ZG139Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZG139Q  INVALID REG NAME
.ZG139P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZG139R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZG139Q
                 AIF   ('&ZCGPR' LE '12').ZG139R
.ZG139Q          ANOP  ,
&ZMS             SETC  '"RSNCODE='
&ZMS             SETC  '&ZMS.&RSNCODE"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZG139R          ANOP  ,
.******************************************************************
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES
.******************************************************************
                 ACTR  10000
.*----------------------------------------------------------------***
.***AH.P02 EXTRA POSITIONALS
                 AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS
                 AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL
                 AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL
                 AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL
.ZGLISTX1        ANOP  ,
&ZCVAL           SETC  ''          ERROR FIELD
&ZAWRK           SETA  0           POSITIONAL NUMBER
.ZGLIST2         ANOP  ,
&ZAWRK           SETA  &ZAWRK+1    NEXT POSITIONAL
                 AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE
&ZCVAL           SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA
                 AGO   .ZGLIST2
.*
.ZGLIST3         ANOP  ,
&ZCVAL           SETC '&ZCVAL'(2,K'&ZCVAL-1)    STRIP COMMA
&ZMS             SETC  'POSITIONAL ARGUMENT(S),'
&ZMS             SETC  '&ZMS "&ZCVAL"'
&ZMS             SETC  '&ZMS CANNOT BE USED.'
&ZMS             SETC  '&ZMS NO POSITIONAL ARGUMENTS'
                 MNOTE 8,' &ZMS ARE ALLOWED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZGLISTX         ANOP  ,
&ZASYSLNDX       SETA  0
.*-------------------------------------------------------------------
.***AG.MF04 MF=(SLME)
.ZGMFX           ANOP  ,           END OF FULL SYNTAX CHECK
.********************************************************************
.***AE.MF01   PARTIAL MACRO SYNTAX CHECKING
.********************************************************************
                 ACTR  10000
.*-------------------------------------------------------------------
.***AE.MF01 MF=(SLME)
                 AIF   ('&XMF' EQ 'L').ZEMFX
                 AIF   ('&XMFSCK' NE 'NOCHECK').ZEMFX
.********************************************************************
.***AE.KC00 INITIALIZE KEYWORD CONTROL VARIABLES
.********************************************************************
&XREQUEST        SETC  ''          INITIALIZE XVARIABLE
&XMETADATA       SETC  ''          INITIALIZE XVARIABLE
&XAREAOPT        SETC  ''          INITIALIZE XVARIABLE
.*-------------------------------------------------------------------
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
&ZTLC            SETC 'RMINFO'
                 AIF   ('&REQUEST(1)' NE '&ZTLC').ZE3A
&XREQUEST        SETC  'RMINFO'    SET KEYWORD
                 AIF   (N'&REQUEST LE 1).ZE3A   CK NUM
&ZMS             SETC  '"REQUEST='
&ZMS             SETC  '&ZMS.&REQUEST"'
&ZMS             SETC  '&ZMS "REQUEST"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE3A            ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&RMNAME LE 1).ZE5A    CK NUM
&ZMS             SETC  '"RMNAME='
&ZMS             SETC  '&ZMS.&RMNAME"'
&ZMS             SETC  '&ZMS "RMNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE5A            ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&RMNAME(1) LE 0).ZE5B NO PRM
&ZXRMNAME        SETC  'INPUT'     SET IN/OUTPUT
&XRMNAME         SETC  '&RMNAME(1)'             SET XVARIABLE
                 AIF   (N'&RMNAME GT 1).ZE5B
.*               ANOP              MULTIPLE PARMS
&XRMNAME         SETC  '&RMNAME'   SET XVARIABLE
.ZE5B            ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXRMNAME LE 0).ZE5R  NOT I/O
                 AIF   ('&XRMNAME'(1,1) NE '(').ZE5R
&ZCGPR           SETC  '&XRMNAME'(2,K'&XRMNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE5P
                 AIF   (K'&ZCGPR GT 2).ZE5Q
                 AIF   ('&ZCGPR' EQ '0').ZE5Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE5Q   INVALID REG NAME
.ZE5P            ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE5R   NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE5Q
                 AIF   ('&ZCGPR' LE '12').ZE5R
.ZE5Q            ANOP  ,
&ZMS             SETC  '"RMNAME='
&ZMS             SETC  '&ZMS.&RMNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE5R            ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&GNAME LE 1).ZE6A     CK NUM
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS "GNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE6A            ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&GNAME(1) LE 0).ZE6B  NO PRM
&ZXGNAME         SETC  'INPUT'     SET IN/OUTPUT
&XGNAME          SETC  '&GNAME(1)'              SET XVARIABLE
                 AIF   (N'&GNAME GT 1).ZE6B
.*               ANOP              MULTIPLE PARMS
&XGNAME          SETC  '&GNAME'    SET XVARIABLE
.ZE6B            ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXGNAME LE 0).ZE6R   NOT I/O
                 AIF   ('&XGNAME'(1,1) NE '(').ZE6R
&ZCGPR           SETC  '&XGNAME'(2,K'&XGNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE6P
                 AIF   (K'&ZCGPR GT 2).ZE6Q
                 AIF   ('&ZCGPR' EQ '0').ZE6Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE6Q   INVALID REG NAME
.ZE6P            ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE6R   NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE6Q
                 AIF   ('&ZCGPR' LE '12').ZE6R
.ZE6Q            ANOP  ,
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE6R            ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&SYSNAME LE 1).ZE9A   CK NUM
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS "SYSNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE9A            ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&SYSNAME(1) LE 0).ZE9B NO PRM
&ZXSYSNAME       SETC  'INPUT'     SET IN/OUTPUT
&XSYSNAME        SETC  '&SYSNAME(1)'            SET XVARIABLE
                 AIF   (N'&SYSNAME GT 1).ZE9B
.*               ANOP              MULTIPLE PARMS
&XSYSNAME        SETC  '&SYSNAME'  SET XVARIABLE
.ZE9B            ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSYSNAME LE 0).ZE9R  NOT I/O
                 AIF   ('&XSYSNAME'(1,1) NE '(').ZE9R
&ZCGPR           SETC  '&XSYSNAME'(2,K'&XSYSNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE9P
                 AIF   (K'&ZCGPR GT 2).ZE9Q
                 AIF   ('&ZCGPR' EQ '0').ZE9Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE9Q   INVALID REG NAME
.ZE9P            ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE9R   NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE9Q
                 AIF   ('&ZCGPR' LE '12').ZE9R
.ZE9Q            ANOP  ,
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE9R            ANOP  ,
.*-------------------------------------------------------------------
.***AE.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
&ZTLC            SETC 'NO'
                 AIF   ('&METADATA(1)' NE '&ZTLC').ZE13A
&XMETADATA       SETC  'NO'        SET KEYWORD
                 AIF   (N'&METADATA LE 1).ZE13A  CK NUM
&ZMS             SETC  '"METADATA='
&ZMS             SETC  '&ZMS.&METADATA"'
&ZMS             SETC  '&ZMS "METADATA"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE13A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
&ZTLC            SETC 'YES'
                 AIF   ('&METADATA(1)' NE '&ZTLC').ZE14A
&XMETADATA       SETC  'YES'       SET KEYWORD
                 AIF   (N'&METADATA LE 1).ZE14A  CK NUM
&ZMS             SETC  '"METADATA='
&ZMS             SETC  '&ZMS.&METADATA"'
&ZMS             SETC  '&ZMS "METADATA"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE14A           ANOP  ,
.*------------------------------------------------------------------
.***AE.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZE15            AIF   (K'&XMETADATA GT 0).ZE15A
                 AIF   (K'&METADATA(1) LE 0).ZE15B
&ZMS             SETC  '"METADATA='
&ZMS             SETC  '&ZMS.&METADATA"'
&ZMS             SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'
&ZMS             SETC  '&ZMS "NO"'
&ZMS             SETC  '&ZMS OR "YES".'
                 MNOTE 8,' &ZMS '
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZE15B
.*
.ZE15A           ANOP  ,
&ZXMETADATA      SETC  'INPUT'     SET IN/OUTPUT
.ZE15B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
&ZTLC            SETC 'WMINFO'
                 AIF   ('&REQUEST(1)' NE '&ZTLC').ZE16A
&XREQUEST        SETC  'WMINFO'    SET KEYWORD
                 AIF   (N'&REQUEST LE 1).ZE16A  CK NUM
&ZMS             SETC  '"REQUEST='
&ZMS             SETC  '&ZMS.&REQUEST"'
&ZMS             SETC  '&ZMS "REQUEST"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE16A           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&WMNAME LE 1).ZE18A   CK NUM
&ZMS             SETC  '"WMNAME='
&ZMS             SETC  '&ZMS.&WMNAME"'
&ZMS             SETC  '&ZMS "WMNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE18A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&WMNAME(1) LE 0).ZE18B NO PRM
&ZXWMNAME        SETC  'INPUT'     SET IN/OUTPUT
&XWMNAME         SETC  '&WMNAME(1)'             SET XVARIABLE
                 AIF   (N'&WMNAME GT 1).ZE18B
.*               ANOP              MULTIPLE PARMS
&XWMNAME         SETC  '&WMNAME'   SET XVARIABLE
.ZE18B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXWMNAME LE 0).ZE18R  NOT I/O
                 AIF   ('&XWMNAME'(1,1) NE '(').ZE18R
&ZCGPR           SETC  '&XWMNAME'(2,K'&XWMNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE18P
                 AIF   (K'&ZCGPR GT 2).ZE18Q
                 AIF   ('&ZCGPR' EQ '0').ZE18Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE18Q  INVALID REG NAME
.ZE18P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE18R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE18Q
                 AIF   ('&ZCGPR' LE '12').ZE18R
.ZE18Q           ANOP  ,
&ZMS             SETC  '"WMNAME='
&ZMS             SETC  '&ZMS.&WMNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE18R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&GNAME LE 1).ZE19A    CK NUM
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS "GNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE19A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&GNAME(1) LE 0).ZE19B NO PRM
&ZXGNAME         SETC  'INPUT'     SET IN/OUTPUT
&XGNAME          SETC  '&GNAME(1)'              SET XVARIABLE
                 AIF   (N'&GNAME GT 1).ZE19B
.*               ANOP              MULTIPLE PARMS
&XGNAME          SETC  '&GNAME'    SET XVARIABLE
.ZE19B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXGNAME LE 0).ZE19R  NOT I/O
                 AIF   ('&XGNAME'(1,1) NE '(').ZE19R
&ZCGPR           SETC  '&XGNAME'(2,K'&XGNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE19P
                 AIF   (K'&ZCGPR GT 2).ZE19Q
                 AIF   ('&ZCGPR' EQ '0').ZE19Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE19Q  INVALID REG NAME
.ZE19P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE19R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE19Q
                 AIF   ('&ZCGPR' LE '12').ZE19R
.ZE19Q           ANOP  ,
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE19R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&SYSNAME LE 1).ZE22A  CK NUM
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS "SYSNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE22A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&SYSNAME(1) LE 0).ZE22B NO PRM
&ZXSYSNAME       SETC  'INPUT'     SET IN/OUTPUT
&XSYSNAME        SETC  '&SYSNAME(1)'            SET XVARIABLE
                 AIF   (N'&SYSNAME GT 1).ZE22B
.*               ANOP              MULTIPLE PARMS
&XSYSNAME        SETC  '&SYSNAME'  SET XVARIABLE
.ZE22B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSYSNAME LE 0).ZE22R  NOT I/O
                 AIF   ('&XSYSNAME'(1,1) NE '(').ZE22R
&ZCGPR           SETC  '&XSYSNAME'(2,K'&XSYSNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE22P
                 AIF   (K'&ZCGPR GT 2).ZE22Q
                 AIF   ('&ZCGPR' EQ '0').ZE22Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE22Q  INVALID REG NAME
.ZE22P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE22R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE22Q
                 AIF   ('&ZCGPR' LE '12').ZE22R
.ZE22Q           ANOP  ,
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE22R           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
&ZTLC            SETC 'SYSINFO'
                 AIF   ('&REQUEST(1)' NE '&ZTLC').ZE24A
&XREQUEST        SETC  'SYSINFO'   SET KEYWORD
                 AIF   (N'&REQUEST LE 1).ZE24A  CK NUM
&ZMS             SETC  '"REQUEST='
&ZMS             SETC  '&ZMS.&REQUEST"'
&ZMS             SETC  '&ZMS "REQUEST"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE24A           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&GNAME LE 1).ZE26A    CK NUM
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS "GNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE26A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&GNAME(1) LE 0).ZE26B NO PRM
&ZXGNAME         SETC  'INPUT'     SET IN/OUTPUT
&XGNAME          SETC  '&GNAME(1)'              SET XVARIABLE
                 AIF   (N'&GNAME GT 1).ZE26B
.*               ANOP              MULTIPLE PARMS
&XGNAME          SETC  '&GNAME'    SET XVARIABLE
.ZE26B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXGNAME LE 0).ZE26R  NOT I/O
                 AIF   ('&XGNAME'(1,1) NE '(').ZE26R
&ZCGPR           SETC  '&XGNAME'(2,K'&XGNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE26P
                 AIF   (K'&ZCGPR GT 2).ZE26Q
                 AIF   ('&ZCGPR' EQ '0').ZE26Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE26Q  INVALID REG NAME
.ZE26P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE26R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE26Q
                 AIF   ('&ZCGPR' LE '12').ZE26R
.ZE26Q           ANOP  ,
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE26R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&SYSNAME LE 1).ZE27A  CK NUM
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS "SYSNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE27A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&SYSNAME(1) LE 0).ZE27B NO PRM
&ZXSYSNAME       SETC  'INPUT'     SET IN/OUTPUT
&XSYSNAME        SETC  '&SYSNAME(1)'            SET XVARIABLE
                 AIF   (N'&SYSNAME GT 1).ZE27B
.*               ANOP              MULTIPLE PARMS
&XSYSNAME        SETC  '&SYSNAME'  SET XVARIABLE
.ZE27B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSYSNAME LE 0).ZE27R  NOT I/O
                 AIF   ('&XSYSNAME'(1,1) NE '(').ZE27R
&ZCGPR           SETC  '&XSYSNAME'(2,K'&XSYSNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE27P
                 AIF   (K'&ZCGPR GT 2).ZE27Q
                 AIF   ('&ZCGPR' EQ '0').ZE27Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE27Q  INVALID REG NAME
.ZE27P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE27R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE27Q
                 AIF   ('&ZCGPR' LE '12').ZE27R
.ZE27Q           ANOP  ,
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE27R           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
&ZTLC            SETC 'URINFO'
                 AIF   ('&REQUEST(1)' NE '&ZTLC').ZE29A
&XREQUEST        SETC  'URINFO'    SET KEYWORD
                 AIF   (N'&REQUEST LE 1).ZE29A  CK NUM
&ZMS             SETC  '"REQUEST='
&ZMS             SETC  '&ZMS.&REQUEST"'
&ZMS             SETC  '&ZMS "REQUEST"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE29A           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE
&XRQD1           SETC  ''          INITIALIZE XVARIABLE
                 AIF   (K'&DEFURONLY LE 0).ZE31C
&ZXRQD1          SETC  'INPUT'     SET IN/OUTPUT
&XRQD1           SETC  'DEFURONLY'              SET XVARIABLE
&ZXDEFURONLY     SETC  'INPUT'     SET IN/OUTPUT
&XDEFURONLY      SETC  '&DEFURONLY(1)'          SET XVARIABLE PARM
                 AIF   (N'&DEFURONLY GT 1).ZE31A  MULTIPLE PARMS
&XDEFURONLY      SETC  '&DEFURONLY'             SET XVARIABLE PARM
.ZE31A           AIF   (N'&DEFURONLY LE 1).ZE31B  CK NUM
&ZMS             SETC  '"DEFURONLY='
&ZMS             SETC  '&ZMS.&DEFURONLY"'
&ZMS             SETC  '&ZMS "DEFURONLY"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE31B           AIF   (K'&XDEFURONLY GT 0).ZE31C  ONE PARM
&ZXRQD1          SETC  ''          RESET IN/OUTPUT
&ZXDEFURONLY     SETC  ''          RESET IN/OUTPUT
.ZE31C           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KMEKY02 NAME, OPT INPUT, ME KEYS -NON-XVAR KEY
                 AIF   (K'&EXCLMASK LE 0).ZE32D  NO ME KEY
                 AIF   (N'&EXCLMASK LE 1).ZE32A  CK NUM
&ZMS             SETC  '"EXCLMASK='
&ZMS             SETC  '&ZMS.&EXCLMASK"'
&ZMS             SETC  '&ZMS "EXCLMASK"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE32A           AIF   (K'&XRQD1 LE 0).ZE32B
&ZMS             SETC  '"EXCLMASK'
&ZMS             SETC  '&ZMS.=&EXCLMASK"'
&ZMS             SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'
&ZMS             SETC  '&ZMS "&XRQD1"'
                 MNOTE 8,' &ZMS KEY.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZE32D
.*
.ZE32B           ANOP  ,
&ZXRQD1          SETC  'INPUT'     SET IN/OUTPUT
&XRQD1           SETC  'EXCLMASK'  SET XVARIABLE
&ZXEXCLMASK      SETC  'INPUT'     SET IN/OUTPUT
&XEXCLMASK       SETC  '&EXCLMASK(1)'           SET PARM
                 AIF   (N'&EXCLMASK GT 1).ZE32C  MULTIPLE PARMS
&XEXCLMASK       SETC  '&EXCLMASK'              SET PARM
.ZE32C           AIF   (K'&XEXCLMASK GT 0).ZE32D  ONE PARM
&ZXRQD1          SETC  ''          RESET IN/OUTPUT
&ZXEXCLMASK      SETC  ''          RESET IN/OUTPUT
.ZE32D           ANOP  ,
.*------------------------------------------------------------------
.***AE.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF ENTERED
                 AIF   (K'&XRQD1 GT 0).ZE33B
&ZXRQD1          SETC  ''          RESET IN/OUTPUT
&XRQD1           SETC  ''          SET NULL
&ZXDEFURONLY     SETC  ''          RESET OUTPUT
&XDEFURONLY      SETC  ''          SET NULL PARM
.ZE33B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY08 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZE31     AIF   ('&XRQD1' NE 'DEFURONLY').ZE32
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXDEFURONLY LE 0).ZE31R  NOT I/O
                 AIF   ('&XDEFURONLY'(1,1) NE '(').ZE31R
&ZCGPR           SETC  '&XDEFURONLY'(2,K'&XDEFURONLY-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE31P
                 AIF   (K'&ZCGPR GT 2).ZE31Q
                 AIF   ('&ZCGPR' EQ '0').ZE31Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE31Q  INVALID REG NAME
.ZE31P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE31R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE31Q
                 AIF   ('&ZCGPR' LE '12').ZE31R
.ZE31Q           ANOP  ,
&ZMS             SETC  '"DEFURONLY='
&ZMS             SETC  '&ZMS.&DEFURONLY"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE31R           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY08 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZE32     AIF   ('&XRQD1' NE 'EXCLMASK').ZE33
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXEXCLMASK LE 0).ZE32R  NOT I/O
                 AIF   ('&XEXCLMASK'(1,1) NE '(').ZE32R
&ZCGPR           SETC  '&XEXCLMASK'(2,K'&XEXCLMASK-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE32P
                 AIF   (K'&ZCGPR GT 2).ZE32Q
                 AIF   ('&ZCGPR' EQ '0').ZE32Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE32Q  INVALID REG NAME
.ZE32P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE32R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE32Q
                 AIF   ('&ZCGPR' LE '12').ZE32R
.ZE32Q           ANOP  ,
&ZMS             SETC  '"EXCLMASK='
&ZMS             SETC  '&ZMS.&EXCLMASK"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE32R           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY09 NAME, OPT INPUT, ME KEYS -END
.ZE33            ANOP  ,           END MUTUALLY EXCLUSIVE KEYS
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&ASID LE 1).ZE35A     CK NUM
&ZMS             SETC  '"ASID='
&ZMS             SETC  '&ZMS.&ASID"'
&ZMS             SETC  '&ZMS "ASID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE35A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&ASID(1) LE 0).ZE35B  NO PRM
&ZXASID          SETC  'INPUT'     SET IN/OUTPUT
&XASID           SETC  '&ASID(1)'  SET XVARIABLE
                 AIF   (N'&ASID GT 1).ZE35B
.*               ANOP              MULTIPLE PARMS
&XASID           SETC  '&ASID'     SET XVARIABLE
.ZE35B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXASID LE 0).ZE35R   NOT I/O
                 AIF   ('&XASID'(1,1) NE '(').ZE35R
&ZCGPR           SETC  '&XASID'(2,K'&XASID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE35P
                 AIF   (K'&ZCGPR GT 2).ZE35Q
                 AIF   ('&ZCGPR' EQ '0').ZE35Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE35Q  INVALID REG NAME
.ZE35P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE35R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE35Q
                 AIF   ('&ZCGPR' LE '12').ZE35R
.ZE35Q           ANOP  ,
&ZMS             SETC  '"ASID='
&ZMS             SETC  '&ZMS.&ASID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE35R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE
&XREQD1          SETC  ''          INITIALIZE XVARIABLE
                 AIF   (K'&URID LE 0).ZE38C
&ZXREQD1         SETC  'INPUT'     SET IN/OUTPUT
&XREQD1          SETC  'URID'      SET XVARIABLE
&ZXURID          SETC  'INPUT'     SET IN/OUTPUT
&XURID           SETC  '&URID(1)'  SET XVARIABLE PARM
                 AIF   (N'&URID GT 1).ZE38A     MULTIPLE PARMS
&XURID           SETC  '&URID'     SET XVARIABLE PARM
.ZE38A           AIF   (N'&URID LE 1).ZE38B     CK NUM
&ZMS             SETC  '"URID='
&ZMS             SETC  '&ZMS.&URID"'
&ZMS             SETC  '&ZMS "URID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE38B           AIF   (K'&XURID GT 0).ZE38C    ONE PARM
&ZXREQD1         SETC  ''          RESET IN/OUTPUT
&ZXURID          SETC  ''          RESET IN/OUTPUT
.ZE38C           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KMEKY02 NAME, OPT INPUT, ME KEYS -NON-XVAR KEY
                 AIF   (K'&URIDSTR LE 0).ZE39D  NO ME KEY
                 AIF   (N'&URIDSTR LE 1).ZE39A  CK NUM
&ZMS             SETC  '"URIDSTR='
&ZMS             SETC  '&ZMS.&URIDSTR"'
&ZMS             SETC  '&ZMS "URIDSTR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE39A           AIF   (K'&XREQD1 LE 0).ZE39B
&ZMS             SETC  '"URIDSTR'
&ZMS             SETC  '&ZMS.=&URIDSTR"'
&ZMS             SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'
&ZMS             SETC  '&ZMS "&XREQD1"'
                 MNOTE 8,' &ZMS KEY.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZE39D
.*
.ZE39B           ANOP  ,
&ZXREQD1         SETC  'INPUT'     SET IN/OUTPUT
&XREQD1          SETC  'URIDSTR'   SET XVARIABLE
&ZXURIDSTR       SETC  'INPUT'     SET IN/OUTPUT
&XURIDSTR        SETC  '&URIDSTR(1)'            SET PARM
                 AIF   (N'&URIDSTR GT 1).ZE39C  MULTIPLE PARMS
&XURIDSTR        SETC  '&URIDSTR'  SET PARM
.ZE39C           AIF   (K'&XURIDSTR GT 0).ZE39D  ONE PARM
&ZXREQD1         SETC  ''          RESET IN/OUTPUT
&ZXURIDSTR       SETC  ''          RESET IN/OUTPUT
.ZE39D           ANOP  ,
.*------------------------------------------------------------------
.***AE.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF ENTERED
                 AIF   (K'&XREQD1 GT 0).ZE40B
&ZXREQD1         SETC  ''          RESET IN/OUTPUT
&XREQD1          SETC  ''          SET NULL
&ZXURID          SETC  ''          RESET OUTPUT
&XURID           SETC  ''          SET NULL PARM
.ZE40B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY08 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZE38     AIF   ('&XREQD1' NE 'URID').ZE39
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXURID LE 0).ZE38R   NOT I/O
                 AIF   ('&XURID'(1,1) NE '(').ZE38R
&ZCGPR           SETC  '&XURID'(2,K'&XURID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE38P
                 AIF   (K'&ZCGPR GT 2).ZE38Q
                 AIF   ('&ZCGPR' EQ '0').ZE38Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE38Q  INVALID REG NAME
.ZE38P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE38R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE38Q
                 AIF   ('&ZCGPR' LE '12').ZE38R
.ZE38Q           ANOP  ,
&ZMS             SETC  '"URID='
&ZMS             SETC  '&ZMS.&URID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE38R           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY08 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZE39     AIF   ('&XREQD1' NE 'URIDSTR').ZE40
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXURIDSTR LE 0).ZE39R  NOT I/O
                 AIF   ('&XURIDSTR'(1,1) NE '(').ZE39R
&ZCGPR           SETC  '&XURIDSTR'(2,K'&XURIDSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE39P
                 AIF   (K'&ZCGPR GT 2).ZE39Q
                 AIF   ('&ZCGPR' EQ '0').ZE39Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE39Q  INVALID REG NAME
.ZE39P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE39R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE39Q
                 AIF   ('&ZCGPR' LE '12').ZE39R
.ZE39Q           ANOP  ,
&ZMS             SETC  '"URIDSTR='
&ZMS             SETC  '&ZMS.&URIDSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE39R           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY09 NAME, OPT INPUT, ME KEYS -END
.ZE40            ANOP  ,           END MUTUALLY EXCLUSIVE KEYS
.*----------------------------------------------------------------***
.***AE.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE
&XREQD1          SETC  ''          INITIALIZE XVARIABLE
                 AIF   (K'&SURID LE 0).ZE42C
&ZXREQD1         SETC  'INPUT'     SET IN/OUTPUT
&XREQD1          SETC  'SURID'     SET XVARIABLE
&ZXSURID         SETC  'INPUT'     SET IN/OUTPUT
&XSURID          SETC  '&SURID(1)'              SET XVARIABLE PARM
                 AIF   (N'&SURID GT 1).ZE42A    MULTIPLE PARMS
&XSURID          SETC  '&SURID'    SET XVARIABLE PARM
.ZE42A           AIF   (N'&SURID LE 1).ZE42B    CK NUM
&ZMS             SETC  '"SURID='
&ZMS             SETC  '&ZMS.&SURID"'
&ZMS             SETC  '&ZMS "SURID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE42B           AIF   (K'&XSURID GT 0).ZE42C   ONE PARM
&ZXREQD1         SETC  ''          RESET IN/OUTPUT
&ZXSURID         SETC  ''          RESET IN/OUTPUT
.ZE42C           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KMEKY02 NAME, OPT INPUT, ME KEYS -NON-XVAR KEY
                 AIF   (K'&SURIDSTR LE 0).ZE43D  NO ME KEY
                 AIF   (N'&SURIDSTR LE 1).ZE43A  CK NUM
&ZMS             SETC  '"SURIDSTR='
&ZMS             SETC  '&ZMS.&SURIDSTR"'
&ZMS             SETC  '&ZMS "SURIDSTR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE43A           AIF   (K'&XREQD1 LE 0).ZE43B
&ZMS             SETC  '"SURIDSTR'
&ZMS             SETC  '&ZMS.=&SURIDSTR"'
&ZMS             SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'
&ZMS             SETC  '&ZMS "&XREQD1"'
                 MNOTE 8,' &ZMS KEY.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZE43D
.*
.ZE43B           ANOP  ,
&ZXREQD1         SETC  'INPUT'     SET IN/OUTPUT
&XREQD1          SETC  'SURIDSTR'  SET XVARIABLE
&ZXSURIDSTR      SETC  'INPUT'     SET IN/OUTPUT
&XSURIDSTR       SETC  '&SURIDSTR(1)'           SET PARM
                 AIF   (N'&SURIDSTR GT 1).ZE43C  MULTIPLE PARMS
&XSURIDSTR       SETC  '&SURIDSTR'              SET PARM
.ZE43C           AIF   (K'&XSURIDSTR GT 0).ZE43D  ONE PARM
&ZXREQD1         SETC  ''          RESET IN/OUTPUT
&ZXSURIDSTR      SETC  ''          RESET IN/OUTPUT
.ZE43D           ANOP  ,
.*------------------------------------------------------------------
.***AE.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF ENTERED
                 AIF   (K'&XREQD1 GT 0).ZE44B
&ZXREQD1         SETC  ''          RESET IN/OUTPUT
&XREQD1          SETC  ''          SET NULL
&ZXSURID         SETC  ''          RESET OUTPUT
&XSURID          SETC  ''          SET NULL PARM
.ZE44B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY08 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZE42     AIF   ('&XREQD1' NE 'SURID').ZE43
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSURID LE 0).ZE42R  NOT I/O
                 AIF   ('&XSURID'(1,1) NE '(').ZE42R
&ZCGPR           SETC  '&XSURID'(2,K'&XSURID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE42P
                 AIF   (K'&ZCGPR GT 2).ZE42Q
                 AIF   ('&ZCGPR' EQ '0').ZE42Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE42Q  INVALID REG NAME
.ZE42P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE42R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE42Q
                 AIF   ('&ZCGPR' LE '12').ZE42R
.ZE42Q           ANOP  ,
&ZMS             SETC  '"SURID='
&ZMS             SETC  '&ZMS.&SURID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE42R           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY08 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZE43     AIF   ('&XREQD1' NE 'SURIDSTR').ZE44
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSURIDSTR LE 0).ZE43R  NOT I/O
                 AIF   ('&XSURIDSTR'(1,1) NE '(').ZE43R
&ZCGPR           SETC  '&XSURIDSTR'(2,K'&XSURIDSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE43P
                 AIF   (K'&ZCGPR GT 2).ZE43Q
                 AIF   ('&ZCGPR' EQ '0').ZE43Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE43Q  INVALID REG NAME
.ZE43P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE43R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE43Q
                 AIF   ('&ZCGPR' LE '12').ZE43R
.ZE43Q           ANOP  ,
&ZMS             SETC  '"SURIDSTR='
&ZMS             SETC  '&ZMS.&SURIDSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE43R           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY09 NAME, OPT INPUT, ME KEYS -END
.ZE44            ANOP  ,           END MUTUALLY EXCLUSIVE KEYS
.*----------------------------------------------------------------***
.***AE.KXVAR03 VALUE, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&URTYPE LE 1).ZE46A   CK NUM
&ZMS             SETC  '"URTYPE='
&ZMS             SETC  '&ZMS.&URTYPE"'
&ZMS             SETC  '&ZMS "URTYPE"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE46A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 VALUE, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&URTYPE(1) LE 0).ZE46B NO PRM
&ZXURTYPE        SETC  'INPUT'     SET IN/OUTPUT
&XURTYPE         SETC  '&URTYPE(1)'             SET XVARIABLE
                 AIF   (N'&URTYPE GT 1).ZE46B
.*               ANOP              MULTIPLE PARMS
&XURTYPE         SETC  '&URTYPE'   SET XVARIABLE
.ZE46B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 VALUE, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXURTYPE LE 0).ZE46R  NOT I/O
                 AIF   ('&XURTYPE'(1,1) NE '(').ZE46R
&ZCGPR           SETC  '&XURTYPE'(2,K'&XURTYPE-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE46P
                 AIF   (K'&ZCGPR GT 2).ZE46Q
                 AIF   ('&ZCGPR' EQ '0').ZE46Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE46Q  INVALID REG NAME
.ZE46P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE46R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE46Q
                 AIF   ('&ZCGPR' LE '12').ZE46R
.ZE46Q           ANOP  ,
&ZMS             SETC  '"URTYPE='
&ZMS             SETC  '&ZMS.&URTYPE"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE46R           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK06 VALUE, OPT INPUT, KEYS -KMG RANGE OR EQUATE
                 AIF   (K'&ZXURTYPE LE 0).ZE46W  NOT I/O
&ZCVAL           SETC  '&XURTYPE'
                 AIF   ('&ZCVAL'(1,1) EQ '(').ZE46W  IN GPR
                 AIF   (T'&ZCVAL EQ 'N').ZE46U  NUMBER
&ZCLNG           SETC  '&ZCVAL'(1,K'&ZCVAL-1)   GET PREFIX
                 AIF   (T'&ZCLNG EQ 'N').ZE46S  NUMERIC
&ZCGPR           SETC  '&ZCVAL'(1,1)            FIRST CHAR
                 AIF   (T'&ZCGPR EQ 'N').ZE46V  NUMERIC ERR
                 AGO               .ZE46W
.*
.ZE46S           ANOP  ,
&ZAWRK           SETA  &ZCLNG      CONVERT
&ZCGPR           SETC  '&ZCVAL'(K'&ZCVAL,1)     GET FACTOR
&ZASIZ           SETA  1024
                 AIF   ('&ZCGPR' EQ 'K').ZE46T  K FACTOR
&ZASIZ           SETA  1024*1024
                 AIF   ('&ZCGPR' EQ 'M').ZE46T  M FACTOR
&ZASIZ           SETA  1024*1024*1024
                 AIF   ('&ZCGPR' NE 'G').ZE46V  NOT G FACTOR
                 AIF   (&ZAWRK GT 2).ZE46V      NOT MAX G FACTOR
.ZE46T           ANOP  ,
&ZCVAL           SETC  '&ZASIZ*&ZAWRK'          EQUIVALENT NUMBER
.ZE46U           ANOP  ,
&ZASIZ           SETA  &ZCVAL      CONVERT
                 AIF   (&ZASIZ LT 0).ZE46V      TOO LOW
                 AIF   (&ZASIZ GT 2147483647).ZE46V  TOO HIGH
&XURTYPE         SETC '&ZASIZ'     SET XVARIABLE NUMBER
                 AGO   .ZE46W
.*
.ZE46V           ANOP  ,
&ZXURTYPE        SETC  ''          RESET IN/OUTPUT
&XURTYPE         SETC 'ATR_NOFILTER'            SET DEFAULT
&ZMS             SETC  '"URTYPE='
&ZMS             SETC  '&ZMS.&URTYPE"'
&ZMS             SETC  '&ZMS THE RANGE IS "0-2147483647"'
                 MNOTE 8,' &ZMS FOR ARGUMENT 1.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE46W           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KMEKY01 VALUE, OPT INPUT, ME KEYS -XVARIABLE
&XRQD2           SETC  ''          INITIALIZE XVARIABLE
                 AIF   (K'&URSTATE LE 0).ZE49C
&ZXRQD2          SETC  'INPUT'     SET IN/OUTPUT
&XRQD2           SETC  'URSTATE'   SET XVARIABLE
&ZXURSTATE       SETC  'INPUT'     SET IN/OUTPUT
&XURSTATE        SETC  '&URSTATE(1)'            SET XVARIABLE PARM
                 AIF   (N'&URSTATE GT 1).ZE49A  MULTIPLE PARMS
&XURSTATE        SETC  '&URSTATE'  SET XVARIABLE PARM
.ZE49A           AIF   (N'&URSTATE LE 1).ZE49B  CK NUM
&ZMS             SETC  '"URSTATE='
&ZMS             SETC  '&ZMS.&URSTATE"'
&ZMS             SETC  '&ZMS "URSTATE"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE49B           AIF   (K'&XURSTATE GT 0).ZE49C  ONE PARM
&ZXRQD2          SETC  ''          RESET IN/OUTPUT
&ZXURSTATE       SETC  ''          RESET IN/OUTPUT
.ZE49C           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KMEKY02 VALUE, OPT INPUT, ME KEYS -NON-XVAR KEY
                 AIF   (K'&URSTMASK LE 0).ZE50D  NO ME KEY
                 AIF   (N'&URSTMASK LE 1).ZE50A  CK NUM
&ZMS             SETC  '"URSTMASK='
&ZMS             SETC  '&ZMS.&URSTMASK"'
&ZMS             SETC  '&ZMS "URSTMASK"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE50A           AIF   (K'&XRQD2 LE 0).ZE50B
&ZMS             SETC  '"URSTMASK'
&ZMS             SETC  '&ZMS.=&URSTMASK"'
&ZMS             SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'
&ZMS             SETC  '&ZMS "&XRQD2"'
                 MNOTE 8,' &ZMS KEY.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZE50D
.*
.ZE50B           ANOP  ,
&ZXRQD2          SETC  'INPUT'     SET IN/OUTPUT
&XRQD2           SETC  'URSTMASK'  SET XVARIABLE
&ZXURSTMASK      SETC  'INPUT'     SET IN/OUTPUT
&XURSTMASK       SETC  '&URSTMASK(1)'           SET PARM
                 AIF   (N'&URSTMASK GT 1).ZE50C  MULTIPLE PARMS
&XURSTMASK       SETC  '&URSTMASK'              SET PARM
.ZE50C           AIF   (K'&XURSTMASK GT 0).ZE50D  ONE PARM
&ZXRQD2          SETC  ''          RESET IN/OUTPUT
&ZXURSTMASK      SETC  ''          RESET IN/OUTPUT
.ZE50D           ANOP  ,
.*------------------------------------------------------------------
.***AE.KMEKY07 VALUE, OPT INPUT, ME KEYS -CHECK IF ENTERED
                 AIF   (K'&XRQD2 GT 0).ZE51B
&ZXRQD2          SETC  ''          RESET IN/OUTPUT
&XRQD2           SETC  ''          SET NULL
&ZXURSTATE       SETC  ''          RESET OUTPUT
&XURSTATE        SETC  ''          SET NULL PARM
.ZE51B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY08 VALUE, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZE49     AIF   ('&XRQD2' NE 'URSTATE').ZE50
.*-------------------------------------------------------------------
.***AE.KCK02 VALUE, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXURSTATE LE 0).ZE49R  NOT I/O
                 AIF   ('&XURSTATE'(1,1) NE '(').ZE49R
&ZCGPR           SETC  '&XURSTATE'(2,K'&XURSTATE-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE49P
                 AIF   (K'&ZCGPR GT 2).ZE49Q
                 AIF   ('&ZCGPR' EQ '0').ZE49Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE49Q  INVALID REG NAME
.ZE49P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE49R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE49Q
                 AIF   ('&ZCGPR' LE '12').ZE49R
.ZE49Q           ANOP  ,
&ZMS             SETC  '"URSTATE='
&ZMS             SETC  '&ZMS.&URSTATE"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE49R           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK06 VALUE, OPT INPUT, ME KEYS -KMG RANGE OR EQUATE
                 AIF   (K'&ZXURSTATE LE 0).ZE49W  NOT I/O
&ZCVAL           SETC  '&XURSTATE'
                 AIF   ('&ZCVAL'(1,1) EQ '(').ZE49W  IN GPR
                 AIF   (T'&ZCVAL EQ 'N').ZE49U  NUMBER
&ZCLNG           SETC  '&ZCVAL'(1,K'&ZCVAL-1)   GET PREFIX
                 AIF   (T'&ZCLNG EQ 'N').ZE49S  NUMERIC
&ZCGPR           SETC  '&ZCVAL'(1,1)            FIRST CHAR
                 AIF   (T'&ZCGPR EQ 'N').ZE49V  NUMERIC ERR
                 AGO               .ZE49W
.*
.ZE49S           ANOP  ,
&ZAWRK           SETA  &ZCLNG      CONVERT
&ZCGPR           SETC  '&ZCVAL'(K'&ZCVAL,1)     GET FACTOR
&ZASIZ           SETA  1024
                 AIF   ('&ZCGPR' EQ 'K').ZE49T  K FACTOR
&ZASIZ           SETA  1024*1024
                 AIF   ('&ZCGPR' EQ 'M').ZE49T  M FACTOR
&ZASIZ           SETA  1024*1024*1024
                 AIF   ('&ZCGPR' NE 'G').ZE49V  NOT G FACTOR
                 AIF   (&ZAWRK GT 2).ZE49V      NOT MAX G FACTOR
.ZE49T           ANOP  ,
&ZCVAL           SETC  '&ZASIZ*&ZAWRK'          EQUIVALENT NUMBER
.ZE49U           ANOP  ,
&ZASIZ           SETA  &ZCVAL      CONVERT
                 AIF   (&ZASIZ LT 0).ZE49V      TOO LOW
                 AIF   (&ZASIZ GT 2147483647).ZE49V  TOO HIGH
&XURSTATE        SETC '&ZASIZ'     SET XVARIABLE NUMBER
                 AGO   .ZE49W
.*
.ZE49V           ANOP  ,
&ZXURSTATE       SETC  ''          RESET IN/OUTPUT
&XURSTATE        SETC 'ATR_NOFILTER'            SET DEFAULT
&ZMS             SETC  '"URSTATE='
&ZMS             SETC  '&ZMS.&URSTATE"'
&ZMS             SETC  '&ZMS THE RANGE IS "0-2147483647"'
                 MNOTE 8,' &ZMS FOR ARGUMENT 1.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE49W           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY08 VALUE, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZE50     AIF   ('&XRQD2' NE 'URSTMASK').ZE51
.*-------------------------------------------------------------------
.***AE.KCK02 VALUE, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXURSTMASK LE 0).ZE50R  NOT I/O
                 AIF   ('&XURSTMASK'(1,1) NE '(').ZE50R
&ZCGPR           SETC  '&XURSTMASK'(2,K'&XURSTMASK-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE50P
                 AIF   (K'&ZCGPR GT 2).ZE50Q
                 AIF   ('&ZCGPR' EQ '0').ZE50Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE50Q  INVALID REG NAME
.ZE50P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE50R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE50Q
                 AIF   ('&ZCGPR' LE '12').ZE50R
.ZE50Q           ANOP  ,
&ZMS             SETC  '"URSTMASK='
&ZMS             SETC  '&ZMS.&URSTMASK"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE50R           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK04 VALUE, OPT INPUT, ME KEYS -BIT CHECK
                 AIF   (K'&ZXURSTMASK LE 0).ZE50T  NOT I/O
                 AIF   (T'&XURSTMASK NE 'N').ZE50T  SYMBOL
                 AIF   ('&XURSTMASK' EQ '').ZE50T  VALUE IS EMPTY
                 AIF   ('&XURSTMASK' EQ '0').ZE50T  VALUE IS 0
                 AIF   (K'&XURSTMASK NE 32).ZE50S  LNG ERR
.*
                 ACTR  10000
&ZN              SETA  0
.ZE50U           ANOP  ,
&ZN              SETA  1+&ZN
&ZC              SETC  '&XURSTMASK'(&ZN,1)
                 AIF   ('&ZC' EQ '0').ZE50V     STRING OK
                 AIF   ('&ZC' NE '1').ZE50S     STRING NOT OK
.ZE50V           AIF   (K'&XURSTMASK NE &ZN).ZE50U  CHK NXT BIT
                 AGO    .ZE50T
.*
.ZE50S           ANOP  ,
&ZXURSTMASK      SETC  ''          RESET IN/OUTPUT
&ZMS             SETC  '"URSTMASK='
&ZMS             SETC  '&ZMS.&URSTMASK"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST CONTAIN 32'
                 MNOTE 8,' &ZMS BITS SPECIFIED AS "0"S AND "1"S.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE50T           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY09 VALUE, OPT INPUT, ME KEYS -END
.ZE51            ANOP  ,           END MUTUALLY EXCLUSIVE KEYS
.*----------------------------------------------------------------***
.***AE.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE
&XRQD3           SETC  ''          INITIALIZE XVARIABLE
                 AIF   (K'&LUWID LE 0).ZE53C
&ZXRQD3          SETC  'INPUT'     SET IN/OUTPUT
&XRQD3           SETC  'LUWID'     SET XVARIABLE
&ZXLUWID         SETC  'INPUT'     SET IN/OUTPUT
&XLUWID          SETC  '&LUWID(1)'              SET XVARIABLE PARM
                 AIF   (N'&LUWID GT 1).ZE53A    MULTIPLE PARMS
&XLUWID          SETC  '&LUWID'    SET XVARIABLE PARM
.ZE53A           AIF   (N'&LUWID LE 1).ZE53B    CK NUM
&ZMS             SETC  '"LUWID='
&ZMS             SETC  '&ZMS.&LUWID"'
&ZMS             SETC  '&ZMS "LUWID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE53B           AIF   (K'&XLUWID GT 0).ZE53C   ONE PARM
&ZXRQD3          SETC  ''          RESET IN/OUTPUT
&ZXLUWID         SETC  ''          RESET IN/OUTPUT
.ZE53C           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KMEKY02 NAME, OPT INPUT, ME KEYS -NON-XVAR KEY
                 AIF   (K'&LUWIDSTR LE 0).ZE54D  NO ME KEY
                 AIF   (N'&LUWIDSTR LE 1).ZE54A  CK NUM
&ZMS             SETC  '"LUWIDSTR='
&ZMS             SETC  '&ZMS.&LUWIDSTR"'
&ZMS             SETC  '&ZMS "LUWIDSTR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE54A           AIF   (K'&XRQD3 LE 0).ZE54B
&ZMS             SETC  '"LUWIDSTR'
&ZMS             SETC  '&ZMS.=&LUWIDSTR"'
&ZMS             SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'
&ZMS             SETC  '&ZMS "&XRQD3"'
                 MNOTE 8,' &ZMS KEY.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZE54D
.*
.ZE54B           ANOP  ,
&ZXRQD3          SETC  'INPUT'     SET IN/OUTPUT
&XRQD3           SETC  'LUWIDSTR'  SET XVARIABLE
&ZXLUWIDSTR      SETC  'INPUT'     SET IN/OUTPUT
&XLUWIDSTR       SETC  '&LUWIDSTR(1)'           SET PARM
                 AIF   (N'&LUWIDSTR GT 1).ZE54C  MULTIPLE PARMS
&XLUWIDSTR       SETC  '&LUWIDSTR'              SET PARM
.ZE54C           AIF   (K'&XLUWIDSTR GT 0).ZE54D  ONE PARM
&ZXRQD3          SETC  ''          RESET IN/OUTPUT
&ZXLUWIDSTR      SETC  ''          RESET IN/OUTPUT
.ZE54D           ANOP  ,
.*------------------------------------------------------------------
.***AE.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF ENTERED
                 AIF   (K'&XRQD3 GT 0).ZE55B
&ZXRQD3          SETC  ''          RESET IN/OUTPUT
&XRQD3           SETC  ''          SET NULL
&ZXLUWID         SETC  ''          RESET OUTPUT
&XLUWID          SETC  ''          SET NULL PARM
.ZE55B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY08 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZE53     AIF   ('&XRQD3' NE 'LUWID').ZE54
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXLUWID LE 0).ZE53R  NOT I/O
                 AIF   ('&XLUWID'(1,1) NE '(').ZE53R
&ZCGPR           SETC  '&XLUWID'(2,K'&XLUWID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE53P
                 AIF   (K'&ZCGPR GT 2).ZE53Q
                 AIF   ('&ZCGPR' EQ '0').ZE53Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE53Q  INVALID REG NAME
.ZE53P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE53R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE53Q
                 AIF   ('&ZCGPR' LE '12').ZE53R
.ZE53Q           ANOP  ,
&ZMS             SETC  '"LUWID='
&ZMS             SETC  '&ZMS.&LUWID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE53R           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY08 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZE54     AIF   ('&XRQD3' NE 'LUWIDSTR').ZE55
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXLUWIDSTR LE 0).ZE54R  NOT I/O
                 AIF   ('&XLUWIDSTR'(1,1) NE '(').ZE54R
&ZCGPR           SETC  '&XLUWIDSTR'(2,K'&XLUWIDSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE54P
                 AIF   (K'&ZCGPR GT 2).ZE54Q
                 AIF   ('&ZCGPR' EQ '0').ZE54Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE54Q  INVALID REG NAME
.ZE54P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE54R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE54Q
                 AIF   ('&ZCGPR' LE '12').ZE54R
.ZE54Q           ANOP  ,
&ZMS             SETC  '"LUWIDSTR='
&ZMS             SETC  '&ZMS.&LUWIDSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE54R           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY09 NAME, OPT INPUT, ME KEYS -END
.ZE55            ANOP  ,           END MUTUALLY EXCLUSIVE KEYS
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&TID LE 1).ZE57A      CK NUM
&ZMS             SETC  '"TID='
&ZMS             SETC  '&ZMS.&TID"'
&ZMS             SETC  '&ZMS "TID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE57A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&TID(1) LE 0).ZE57B   NO PRM
&ZXTID           SETC  'INPUT'     SET IN/OUTPUT
&XTID            SETC  '&TID(1)'   SET XVARIABLE
                 AIF   (N'&TID GT 1).ZE57B
.*               ANOP              MULTIPLE PARMS
&XTID            SETC  '&TID'      SET XVARIABLE
.ZE57B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXTID LE 0).ZE57R    NOT I/O
                 AIF   ('&XTID'(1,1) NE '(').ZE57R
&ZCGPR           SETC  '&XTID'(2,K'&XTID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE57P
                 AIF   (K'&ZCGPR GT 2).ZE57Q
                 AIF   ('&ZCGPR' EQ '0').ZE57Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE57Q  INVALID REG NAME
.ZE57P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE57R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE57Q
                 AIF   ('&ZCGPR' LE '12').ZE57R
.ZE57Q           ANOP  ,
&ZMS             SETC  '"TID='
&ZMS             SETC  '&ZMS.&TID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE57R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&TIDHIGH LE 1).ZE60A  CK NUM
&ZMS             SETC  '"TIDHIGH='
&ZMS             SETC  '&ZMS.&TIDHIGH"'
&ZMS             SETC  '&ZMS "TIDHIGH"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE60A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&TIDHIGH(1) LE 0).ZE60B NO PRM
&ZXTIDHIGH       SETC  'INPUT'     SET IN/OUTPUT
&XTIDHIGH        SETC  '&TIDHIGH(1)'            SET XVARIABLE
                 AIF   (N'&TIDHIGH GT 1).ZE60B
.*               ANOP              MULTIPLE PARMS
&XTIDHIGH        SETC  '&TIDHIGH'  SET XVARIABLE
.ZE60B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXTIDHIGH LE 0).ZE60R  NOT I/O
                 AIF   ('&XTIDHIGH'(1,1) NE '(').ZE60R
&ZCGPR           SETC  '&XTIDHIGH'(2,K'&XTIDHIGH-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE60P
                 AIF   (K'&ZCGPR GT 2).ZE60Q
                 AIF   ('&ZCGPR' EQ '0').ZE60Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE60Q  INVALID REG NAME
.ZE60P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE60R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE60Q
                 AIF   ('&ZCGPR' LE '12').ZE60R
.ZE60Q           ANOP  ,
&ZMS             SETC  '"TIDHIGH='
&ZMS             SETC  '&ZMS.&TIDHIGH"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE60R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&TIDLOW LE 1).ZE63A   CK NUM
&ZMS             SETC  '"TIDLOW='
&ZMS             SETC  '&ZMS.&TIDLOW"'
&ZMS             SETC  '&ZMS "TIDLOW"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE63A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&TIDLOW(1) LE 0).ZE63B NO PRM
&ZXTIDLOW        SETC  'INPUT'     SET IN/OUTPUT
&XTIDLOW         SETC  '&TIDLOW(1)'             SET XVARIABLE
                 AIF   (N'&TIDLOW GT 1).ZE63B
.*               ANOP              MULTIPLE PARMS
&XTIDLOW         SETC  '&TIDLOW'   SET XVARIABLE
.ZE63B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXTIDLOW LE 0).ZE63R  NOT I/O
                 AIF   ('&XTIDLOW'(1,1) NE '(').ZE63R
&ZCGPR           SETC  '&XTIDLOW'(2,K'&XTIDLOW-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE63P
                 AIF   (K'&ZCGPR GT 2).ZE63Q
                 AIF   ('&ZCGPR' EQ '0').ZE63Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE63Q  INVALID REG NAME
.ZE63P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE63R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE63Q
                 AIF   ('&ZCGPR' LE '12').ZE63R
.ZE63Q           ANOP  ,
&ZMS             SETC  '"TIDLOW='
&ZMS             SETC  '&ZMS.&TIDLOW"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE63R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE
&XRQD6           SETC  ''          INITIALIZE XVARIABLE
                 AIF   (K'&GTID LE 0).ZE66C
&ZXRQD6          SETC  'INPUT'     SET IN/OUTPUT
&XRQD6           SETC  'GTID'      SET XVARIABLE
&ZXGTID          SETC  'INPUT'     SET IN/OUTPUT
&XGTID           SETC  '&GTID(1)'  SET XVARIABLE PARM
                 AIF   (N'&GTID GT 1).ZE66A     MULTIPLE PARMS
&XGTID           SETC  '&GTID'     SET XVARIABLE PARM
.ZE66A           AIF   (N'&GTID LE 1).ZE66B     CK NUM
&ZMS             SETC  '"GTID='
&ZMS             SETC  '&ZMS.&GTID"'
&ZMS             SETC  '&ZMS "GTID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE66B           AIF   (K'&XGTID GT 0).ZE66C    ONE PARM
&ZXRQD6          SETC  ''          RESET IN/OUTPUT
&ZXGTID          SETC  ''          RESET IN/OUTPUT
.ZE66C           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KMEKY02 NAME, OPT INPUT, ME KEYS -NON-XVAR KEY
                 AIF   (K'&GTIDSTR LE 0).ZE67D  NO ME KEY
                 AIF   (N'&GTIDSTR LE 1).ZE67A  CK NUM
&ZMS             SETC  '"GTIDSTR='
&ZMS             SETC  '&ZMS.&GTIDSTR"'
&ZMS             SETC  '&ZMS "GTIDSTR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE67A           AIF   (K'&XRQD6 LE 0).ZE67B
&ZMS             SETC  '"GTIDSTR'
&ZMS             SETC  '&ZMS.=&GTIDSTR"'
&ZMS             SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'
&ZMS             SETC  '&ZMS "&XRQD6"'
                 MNOTE 8,' &ZMS KEY.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZE67D
.*
.ZE67B           ANOP  ,
&ZXRQD6          SETC  'INPUT'     SET IN/OUTPUT
&XRQD6           SETC  'GTIDSTR'   SET XVARIABLE
&ZXGTIDSTR       SETC  'INPUT'     SET IN/OUTPUT
&XGTIDSTR        SETC  '&GTIDSTR(1)'            SET PARM
                 AIF   (N'&GTIDSTR GT 1).ZE67C  MULTIPLE PARMS
&XGTIDSTR        SETC  '&GTIDSTR'  SET PARM
.ZE67C           AIF   (K'&XGTIDSTR GT 0).ZE67D  ONE PARM
&ZXRQD6          SETC  ''          RESET IN/OUTPUT
&ZXGTIDSTR       SETC  ''          RESET IN/OUTPUT
.ZE67D           ANOP  ,
.*------------------------------------------------------------------
.***AE.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF ENTERED
                 AIF   (K'&XRQD6 GT 0).ZE68B
&ZXRQD6          SETC  ''          RESET IN/OUTPUT
&XRQD6           SETC  ''          SET NULL
&ZXGTID          SETC  ''          RESET OUTPUT
&XGTID           SETC  ''          SET NULL PARM
.ZE68B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY08 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZE66     AIF   ('&XRQD6' NE 'GTID').ZE67
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXGTID LE 0).ZE66R   NOT I/O
                 AIF   ('&XGTID'(1,1) NE '(').ZE66R
&ZCGPR           SETC  '&XGTID'(2,K'&XGTID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE66P
                 AIF   (K'&ZCGPR GT 2).ZE66Q
                 AIF   ('&ZCGPR' EQ '0').ZE66Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE66Q  INVALID REG NAME
.ZE66P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE66R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE66Q
                 AIF   ('&ZCGPR' LE '12').ZE66R
.ZE66Q           ANOP  ,
&ZMS             SETC  '"GTID='
&ZMS             SETC  '&ZMS.&GTID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE66R           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY08 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES
.ZE67     AIF   ('&XRQD6' NE 'GTIDSTR').ZE68
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXGTIDSTR LE 0).ZE67R  NOT I/O
                 AIF   ('&XGTIDSTR'(1,1) NE '(').ZE67R
&ZCGPR           SETC  '&XGTIDSTR'(2,K'&XGTIDSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE67P
                 AIF   (K'&ZCGPR GT 2).ZE67Q
                 AIF   ('&ZCGPR' EQ '0').ZE67Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE67Q  INVALID REG NAME
.ZE67P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE67R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE67Q
                 AIF   ('&ZCGPR' LE '12').ZE67R
.ZE67Q           ANOP  ,
&ZMS             SETC  '"GTIDSTR='
&ZMS             SETC  '&ZMS.&GTIDSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE67R           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KMEKY09 NAME, OPT INPUT, ME KEYS -END
.ZE68            ANOP  ,           END MUTUALLY EXCLUSIVE KEYS
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&XID LE 1).ZE70A      CK NUM
&ZMS             SETC  '"XID='
&ZMS             SETC  '&ZMS.&XID"'
&ZMS             SETC  '&ZMS "XID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE70A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&XID(1) LE 0).ZE70B   NO PRM
&ZXXID           SETC  'INPUT'     SET IN/OUTPUT
&XXID            SETC  '&XID(1)'   SET XVARIABLE
                 AIF   (N'&XID GT 1).ZE70B
.*               ANOP              MULTIPLE PARMS
&XXID            SETC  '&XID'      SET XVARIABLE
.ZE70B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXXID LE 0).ZE70R    NOT I/O
                 AIF   ('&XXID'(1,1) NE '(').ZE70R
&ZCGPR           SETC  '&XXID'(2,K'&XXID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE70P
                 AIF   (K'&ZCGPR GT 2).ZE70Q
                 AIF   ('&ZCGPR' EQ '0').ZE70Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE70Q  INVALID REG NAME
.ZE70P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE70R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE70Q
                 AIF   ('&ZCGPR' LE '12').ZE70R
.ZE70Q           ANOP  ,
&ZMS             SETC  '"XID='
&ZMS             SETC  '&ZMS.&XID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE70R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&XIDFORMATID LE 1).ZE73A  CK NUM
&ZMS             SETC  '"XIDFORMATID='
&ZMS             SETC  '&ZMS.&XIDFORMATID"'
&ZMS             SETC  '&ZMS "XIDFORMATID"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE73A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&XIDFORMATID(1) LE 0).ZE73B NO PRM
&ZXXIDFORMATID   SETC  'INPUT'     SET IN/OUTPUT
&XXIDFORMATID    SETC  '&XIDFORMATID(1)'        SET XVARIABLE
                 AIF   (N'&XIDFORMATID GT 1).ZE73B
.*               ANOP              MULTIPLE PARMS
&XXIDFORMATID    SETC  '&XIDFORMATID'           SET XVARIABLE
.ZE73B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXXIDFORMATID LE 0).ZE73R  NOT I/O
                 AIF   ('&XXIDFORMATID'(1,1) NE '(').ZE73R
&ZCGPR           SETC  '&XXIDFORMATID'(2,K'&XXIDFORMATID-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE73P
                 AIF   (K'&ZCGPR GT 2).ZE73Q
                 AIF   ('&ZCGPR' EQ '0').ZE73Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE73Q  INVALID REG NAME
.ZE73P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE73R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE73Q
                 AIF   ('&ZCGPR' LE '12').ZE73R
.ZE73Q           ANOP  ,
&ZMS             SETC  '"XIDFORMATID='
&ZMS             SETC  '&ZMS.&XIDFORMATID"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE73R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&XIDGTRIDSTR LE 1).ZE76A  CK NUM
&ZMS             SETC  '"XIDGTRIDSTR='
&ZMS             SETC  '&ZMS.&XIDGTRIDSTR"'
&ZMS             SETC  '&ZMS "XIDGTRIDSTR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE76A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&XIDGTRIDSTR(1) LE 0).ZE76B NO PRM
&ZXXIDGTRIDSTR   SETC  'INPUT'     SET IN/OUTPUT
&XXIDGTRIDSTR    SETC  '&XIDGTRIDSTR(1)'        SET XVARIABLE
                 AIF   (N'&XIDGTRIDSTR GT 1).ZE76B
.*               ANOP              MULTIPLE PARMS
&XXIDGTRIDSTR    SETC  '&XIDGTRIDSTR'           SET XVARIABLE
.ZE76B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXXIDGTRIDSTR LE 0).ZE76R  NOT I/O
                 AIF   ('&XXIDGTRIDSTR'(1,1) NE '(').ZE76R
&ZCGPR           SETC  '&XXIDGTRIDSTR'(2,K'&XXIDGTRIDSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE76P
                 AIF   (K'&ZCGPR GT 2).ZE76Q
                 AIF   ('&ZCGPR' EQ '0').ZE76Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE76Q  INVALID REG NAME
.ZE76P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE76R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE76Q
                 AIF   ('&ZCGPR' LE '12').ZE76R
.ZE76Q           ANOP  ,
&ZMS             SETC  '"XIDGTRIDSTR='
&ZMS             SETC  '&ZMS.&XIDGTRIDSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE76R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&XIDBQUALSTR LE 1).ZE79A  CK NUM
&ZMS             SETC  '"XIDBQUALSTR='
&ZMS             SETC  '&ZMS.&XIDBQUALSTR"'
&ZMS             SETC  '&ZMS "XIDBQUALSTR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE79A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&XIDBQUALSTR(1) LE 0).ZE79B NO PRM
&ZXXIDBQUALSTR   SETC  'INPUT'     SET IN/OUTPUT
&XXIDBQUALSTR    SETC  '&XIDBQUALSTR(1)'        SET XVARIABLE
                 AIF   (N'&XIDBQUALSTR GT 1).ZE79B
.*               ANOP              MULTIPLE PARMS
&XXIDBQUALSTR    SETC  '&XIDBQUALSTR'           SET XVARIABLE
.ZE79B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXXIDBQUALSTR LE 0).ZE79R  NOT I/O
                 AIF   ('&XXIDBQUALSTR'(1,1) NE '(').ZE79R
&ZCGPR           SETC  '&XXIDBQUALSTR'(2,K'&XXIDBQUALSTR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE79P
                 AIF   (K'&ZCGPR GT 2).ZE79Q
                 AIF   ('&ZCGPR' EQ '0').ZE79Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE79Q  INVALID REG NAME
.ZE79P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE79R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE79Q
                 AIF   ('&ZCGPR' LE '12').ZE79R
.ZE79Q           ANOP  ,
&ZMS             SETC  '"XIDBQUALSTR='
&ZMS             SETC  '&ZMS.&XIDBQUALSTR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE79R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&RMNAME LE 1).ZE82A   CK NUM
&ZMS             SETC  '"RMNAME='
&ZMS             SETC  '&ZMS.&RMNAME"'
&ZMS             SETC  '&ZMS "RMNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE82A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&RMNAME(1) LE 0).ZE82B NO PRM
&ZXRMNAME        SETC  'INPUT'     SET IN/OUTPUT
&XRMNAME         SETC  '&RMNAME(1)'             SET XVARIABLE
                 AIF   (N'&RMNAME GT 1).ZE82B
.*               ANOP              MULTIPLE PARMS
&XRMNAME         SETC  '&RMNAME'   SET XVARIABLE
.ZE82B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXRMNAME LE 0).ZE82R  NOT I/O
                 AIF   ('&XRMNAME'(1,1) NE '(').ZE82R
&ZCGPR           SETC  '&XRMNAME'(2,K'&XRMNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE82P
                 AIF   (K'&ZCGPR GT 2).ZE82Q
                 AIF   ('&ZCGPR' EQ '0').ZE82Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE82Q  INVALID REG NAME
.ZE82P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE82R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE82Q
                 AIF   ('&ZCGPR' LE '12').ZE82R
.ZE82Q           ANOP  ,
&ZMS             SETC  '"RMNAME='
&ZMS             SETC  '&ZMS.&RMNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE82R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&WMNAME LE 1).ZE85A   CK NUM
&ZMS             SETC  '"WMNAME='
&ZMS             SETC  '&ZMS.&WMNAME"'
&ZMS             SETC  '&ZMS "WMNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE85A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&WMNAME(1) LE 0).ZE85B NO PRM
&ZXWMNAME        SETC  'INPUT'     SET IN/OUTPUT
&XWMNAME         SETC  '&WMNAME(1)'             SET XVARIABLE
                 AIF   (N'&WMNAME GT 1).ZE85B
.*               ANOP              MULTIPLE PARMS
&XWMNAME         SETC  '&WMNAME'   SET XVARIABLE
.ZE85B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXWMNAME LE 0).ZE85R  NOT I/O
                 AIF   ('&XWMNAME'(1,1) NE '(').ZE85R
&ZCGPR           SETC  '&XWMNAME'(2,K'&XWMNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE85P
                 AIF   (K'&ZCGPR GT 2).ZE85Q
                 AIF   ('&ZCGPR' EQ '0').ZE85Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE85Q  INVALID REG NAME
.ZE85P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE85R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE85Q
                 AIF   ('&ZCGPR' LE '12').ZE85R
.ZE85Q           ANOP  ,
&ZMS             SETC  '"WMNAME='
&ZMS             SETC  '&ZMS.&WMNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE85R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&TODBEG LE 1).ZE88A   CK NUM
&ZMS             SETC  '"TODBEG='
&ZMS             SETC  '&ZMS.&TODBEG"'
&ZMS             SETC  '&ZMS "TODBEG"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE88A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&TODBEG(1) LE 0).ZE88B NO PRM
&ZXTODBEG        SETC  'INPUT'     SET IN/OUTPUT
&XTODBEG         SETC  '&TODBEG(1)'             SET XVARIABLE
                 AIF   (N'&TODBEG GT 1).ZE88B
.*               ANOP              MULTIPLE PARMS
&XTODBEG         SETC  '&TODBEG'   SET XVARIABLE
.ZE88B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXTODBEG LE 0).ZE88R  NOT I/O
                 AIF   ('&XTODBEG'(1,1) NE '(').ZE88R
&ZCGPR           SETC  '&XTODBEG'(2,K'&XTODBEG-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE88P
                 AIF   (K'&ZCGPR GT 2).ZE88Q
                 AIF   ('&ZCGPR' EQ '0').ZE88Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE88Q  INVALID REG NAME
.ZE88P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE88R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE88Q
                 AIF   ('&ZCGPR' LE '12').ZE88R
.ZE88Q           ANOP  ,
&ZMS             SETC  '"TODBEG='
&ZMS             SETC  '&ZMS.&TODBEG"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE88R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&TODEND LE 1).ZE91A   CK NUM
&ZMS             SETC  '"TODEND='
&ZMS             SETC  '&ZMS.&TODEND"'
&ZMS             SETC  '&ZMS "TODEND"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE91A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&TODEND(1) LE 0).ZE91B NO PRM
&ZXTODEND        SETC  'INPUT'     SET IN/OUTPUT
&XTODEND         SETC  '&TODEND(1)'             SET XVARIABLE
                 AIF   (N'&TODEND GT 1).ZE91B
.*               ANOP              MULTIPLE PARMS
&XTODEND         SETC  '&TODEND'   SET XVARIABLE
.ZE91B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXTODEND LE 0).ZE91R  NOT I/O
                 AIF   ('&XTODEND'(1,1) NE '(').ZE91R
&ZCGPR           SETC  '&XTODEND'(2,K'&XTODEND-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE91P
                 AIF   (K'&ZCGPR GT 2).ZE91Q
                 AIF   ('&ZCGPR' EQ '0').ZE91Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE91Q  INVALID REG NAME
.ZE91P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE91R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE91Q
                 AIF   ('&ZCGPR' LE '12').ZE91R
.ZE91Q           ANOP  ,
&ZMS             SETC  '"TODEND='
&ZMS             SETC  '&ZMS.&TODEND"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE91R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&CURDUR LE 1).ZE94A   CK NUM
&ZMS             SETC  '"CURDUR='
&ZMS             SETC  '&ZMS.&CURDUR"'
&ZMS             SETC  '&ZMS "CURDUR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE94A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&CURDUR(1) LE 0).ZE94B NO PRM
&ZXCURDUR        SETC  'INPUT'     SET IN/OUTPUT
&XCURDUR         SETC  '&CURDUR(1)'             SET XVARIABLE
                 AIF   (N'&CURDUR GT 1).ZE94B
.*               ANOP              MULTIPLE PARMS
&XCURDUR         SETC  '&CURDUR'   SET XVARIABLE
.ZE94B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXCURDUR LE 0).ZE94R  NOT I/O
                 AIF   ('&XCURDUR'(1,1) NE '(').ZE94R
&ZCGPR           SETC  '&XCURDUR'(2,K'&XCURDUR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE94P
                 AIF   (K'&ZCGPR GT 2).ZE94Q
                 AIF   ('&ZCGPR' EQ '0').ZE94Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE94Q  INVALID REG NAME
.ZE94P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE94R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE94Q
                 AIF   ('&ZCGPR' LE '12').ZE94R
.ZE94Q           ANOP  ,
&ZMS             SETC  '"CURDUR='
&ZMS             SETC  '&ZMS.&CURDUR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE94R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&EXINFOMASK LE 1).ZE97A  CK NUM
&ZMS             SETC  '"EXINFOMASK='
&ZMS             SETC  '&ZMS.&EXINFOMASK"'
&ZMS             SETC  '&ZMS "EXINFOMASK"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE97A           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&EXINFOMASK(1) LE 0).ZE97B NO PRM
&ZXEXINFOMASK    SETC  'INPUT'     SET IN/OUTPUT
&XEXINFOMASK     SETC  '&EXINFOMASK(1)'         SET XVARIABLE
                 AIF   (N'&EXINFOMASK GT 1).ZE97B
.*               ANOP              MULTIPLE PARMS
&XEXINFOMASK     SETC  '&EXINFOMASK'            SET XVARIABLE
.ZE97B           ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXEXINFOMASK LE 0).ZE97R  NOT I/O
                 AIF   ('&XEXINFOMASK'(1,1) NE '(').ZE97R
&ZCGPR           SETC  '&XEXINFOMASK'(2,K'&XEXINFOMASK-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE97P
                 AIF   (K'&ZCGPR GT 2).ZE97Q
                 AIF   ('&ZCGPR' EQ '0').ZE97Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE97Q  INVALID REG NAME
.ZE97P           ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE97R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE97Q
                 AIF   ('&ZCGPR' LE '12').ZE97R
.ZE97Q           ANOP  ,
&ZMS             SETC  '"EXINFOMASK='
&ZMS             SETC  '&ZMS.&EXINFOMASK"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE97R           ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&GNAME LE 1).ZE100A   CK NUM
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS "GNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE100A          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&GNAME(1) LE 0).ZE100B NO PRM
&ZXGNAME         SETC  'INPUT'     SET IN/OUTPUT
&XGNAME          SETC  '&GNAME(1)'              SET XVARIABLE
                 AIF   (N'&GNAME GT 1).ZE100B
.*               ANOP              MULTIPLE PARMS
&XGNAME          SETC  '&GNAME'    SET XVARIABLE
.ZE100B          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXGNAME LE 0).ZE100R  NOT I/O
                 AIF   ('&XGNAME'(1,1) NE '(').ZE100R
&ZCGPR           SETC  '&XGNAME'(2,K'&XGNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE100P
                 AIF   (K'&ZCGPR GT 2).ZE100Q
                 AIF   ('&ZCGPR' EQ '0').ZE100Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE100Q  INVALID REG NAME
.ZE100P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE100R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE100Q
                 AIF   ('&ZCGPR' LE '12').ZE100R
.ZE100Q          ANOP  ,
&ZMS             SETC  '"GNAME='
&ZMS             SETC  '&ZMS.&GNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE100R          ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&SYSNAME LE 1).ZE103A  CK NUM
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS "SYSNAME"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE103A          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&SYSNAME(1) LE 0).ZE103B NO PRM
&ZXSYSNAME       SETC  'INPUT'     SET IN/OUTPUT
&XSYSNAME        SETC  '&SYSNAME(1)'            SET XVARIABLE
                 AIF   (N'&SYSNAME GT 1).ZE103B
.*               ANOP              MULTIPLE PARMS
&XSYSNAME        SETC  '&SYSNAME'  SET XVARIABLE
.ZE103B          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSYSNAME LE 0).ZE103R  NOT I/O
                 AIF   ('&XSYSNAME'(1,1) NE '(').ZE103R
&ZCGPR           SETC  '&XSYSNAME'(2,K'&XSYSNAME-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE103P
                 AIF   (K'&ZCGPR GT 2).ZE103Q
                 AIF   ('&ZCGPR' EQ '0').ZE103Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE103Q  INVALID REG NAME
.ZE103P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE103R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE103Q
                 AIF   ('&ZCGPR' LE '12').ZE103R
.ZE103Q          ANOP  ,
&ZMS             SETC  '"SYSNAME='
&ZMS             SETC  '&ZMS.&SYSNAME"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE103R          ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&SORTTAB LE 1).ZE106A  CK NUM
&ZMS             SETC  '"SORTTAB='
&ZMS             SETC  '&ZMS.&SORTTAB"'
&ZMS             SETC  '&ZMS "SORTTAB"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE106A          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&SORTTAB(1) LE 0).ZE106B NO PRM
&ZXSORTTAB       SETC  'INPUT'     SET IN/OUTPUT
&XSORTTAB        SETC  '&SORTTAB(1)'            SET XVARIABLE
                 AIF   (N'&SORTTAB GT 1).ZE106B
.*               ANOP              MULTIPLE PARMS
&XSORTTAB        SETC  '&SORTTAB'  SET XVARIABLE
.ZE106B          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSORTTAB LE 0).ZE106R  NOT I/O
                 AIF   ('&XSORTTAB'(1,1) NE '(').ZE106R
&ZCGPR           SETC  '&XSORTTAB'(2,K'&XSORTTAB-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE106P
                 AIF   (K'&ZCGPR GT 2).ZE106Q
                 AIF   ('&ZCGPR' EQ '0').ZE106Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE106Q  INVALID REG NAME
.ZE106P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE106R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE106Q
                 AIF   ('&ZCGPR' LE '12').ZE106R
.ZE106Q          ANOP  ,
&ZMS             SETC  '"SORTTAB='
&ZMS             SETC  '&ZMS.&SORTTAB"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE106R          ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY
                 AIF   (N'&SORTNUM LE 1).ZE108A  CK NUM
&ZMS             SETC  '"SORTNUM='
&ZMS             SETC  '&ZMS.&SORTNUM"'
&ZMS             SETC  '&ZMS "SORTNUM"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE108A          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&SORTNUM(1) LE 0).ZE108B NO PRM
&ZXSORTNUM       SETC  'INPUT'     SET IN/OUTPUT
&XSORTNUM        SETC  '&SORTNUM(1)'            SET XVARIABLE
                 AIF   (N'&SORTNUM GT 1).ZE108B
.*               ANOP              MULTIPLE PARMS
&XSORTNUM        SETC  '&SORTNUM'  SET XVARIABLE
.ZE108B          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXSORTNUM LE 0).ZE108R  NOT I/O
                 AIF   ('&XSORTNUM'(1,1) NE '(').ZE108R
&ZCGPR           SETC  '&XSORTNUM'(2,K'&XSORTNUM-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE108P
                 AIF   (K'&ZCGPR GT 2).ZE108Q
                 AIF   ('&ZCGPR' EQ '0').ZE108Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE108Q  INVALID REG NAME
.ZE108P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE108R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE108Q
                 AIF   ('&ZCGPR' LE '12').ZE108R
.ZE108Q          ANOP  ,
&ZMS             SETC  '"SORTNUM='
&ZMS             SETC  '&ZMS.&SORTNUM"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE108R          ANOP  ,
.*------------------------------------------------------------------
.***AE.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZE111           AIF   (K'&XREQUEST GT 0).ZE111A
                 AIF   (K'&REQUEST(1) LE 0).ZE111B
&ZMS             SETC  '"REQUEST='
&ZMS             SETC  '&ZMS.&REQUEST"'
&ZMS             SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'
&ZMS             SETC  '&ZMS "RMINFO",'
&ZMS             SETC  '&ZMS "WMINFO",'
&ZMS             SETC  '&ZMS "SYSINFO",'
&ZMS             SETC  '&ZMS OR "URINFO".'
                 MNOTE 8,' &ZMS '
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZE111B
.*
.ZE111A          ANOP  ,
&ZXREQUEST       SETC  'INPUT'     SET IN/OUTPUT
.ZE111B          ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY
                 AIF   (N'&AREAADDR LE 1).ZE113A  CK NUM
&ZMS             SETC  '"AREAADDR='
&ZMS             SETC  '&ZMS.&AREAADDR"'
&ZMS             SETC  '&ZMS "AREAADDR"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE113A          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&AREAADDR(1) LE 0).ZE113B NO PRM
&ZXAREAADDR      SETC  'INPUT'     SET IN/OUTPUT
&XAREAADDR       SETC  '&AREAADDR(1)'           SET XVARIABLE
                 AIF   (N'&AREAADDR GT 1).ZE113B
.*               ANOP              MULTIPLE PARMS
&XAREAADDR       SETC  '&AREAADDR'              SET XVARIABLE
.ZE113B          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXAREAADDR LE 0).ZE113R  NOT I/O
                 AIF   ('&XAREAADDR'(1,1) NE '(').ZE113R
&ZCGPR           SETC  '&XAREAADDR'(2,K'&XAREAADDR-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE113P
                 AIF   (K'&ZCGPR GT 2).ZE113Q
                 AIF   ('&ZCGPR' EQ '0').ZE113Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE113Q  INVALID REG NAME
.ZE113P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE113R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE113Q
                 AIF   ('&ZCGPR' LE '12').ZE113R
.ZE113Q          ANOP  ,
&ZMS             SETC  '"AREAADDR='
&ZMS             SETC  '&ZMS.&AREAADDR"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE113R          ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&AREAALET LE 1).ZE116A  CK NUM
&ZMS             SETC  '"AREAALET='
&ZMS             SETC  '&ZMS.&AREAALET"'
&ZMS             SETC  '&ZMS "AREAALET"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE116A          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&AREAALET(1) LE 0).ZE116B NO PRM
&ZXAREAALET      SETC  'INPUT'     SET IN/OUTPUT
&XAREAALET       SETC  '&AREAALET(1)'           SET XVARIABLE
                 AIF   (N'&AREAALET GT 1).ZE116B
.*               ANOP              MULTIPLE PARMS
&XAREAALET       SETC  '&AREAALET'              SET XVARIABLE
.ZE116B          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXAREAALET LE 0).ZE116R  NOT I/O
                 AIF   ('&XAREAALET'(1,1) NE '(').ZE116R
&ZCGPR           SETC  '&XAREAALET'(2,K'&XAREAALET-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE116P
                 AIF   (K'&ZCGPR GT 2).ZE116Q
                 AIF   ('&ZCGPR' EQ '0').ZE116Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE116Q  INVALID REG NAME
.ZE116P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE116R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE116Q
                 AIF   ('&ZCGPR' LE '12').ZE116R
.ZE116Q          ANOP  ,
&ZMS             SETC  '"AREAALET='
&ZMS             SETC  '&ZMS.&AREAALET"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE116R          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
&ZTLC            SETC 'BYADDR'
                 AIF   ('&AREAOPT(1)' NE '&ZTLC').ZE120A
&XAREAOPT        SETC  'BYADDR'    SET KEYWORD
                 AIF   (N'&AREAOPT LE 1).ZE120A  CK NUM
&ZMS             SETC  '"AREAOPT='
&ZMS             SETC  '&ZMS.&AREAOPT"'
&ZMS             SETC  '&ZMS "AREAOPT"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE120A          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
&ZTLC            SETC 'BYOFFSET'
                 AIF   ('&AREAOPT(1)' NE '&ZTLC').ZE121A
&XAREAOPT        SETC  'BYOFFSET'  SET KEYWORD
                 AIF   (N'&AREAOPT LE 1).ZE121A  CK NUM
&ZMS             SETC  '"AREAOPT='
&ZMS             SETC  '&ZMS.&AREAOPT"'
&ZMS             SETC  '&ZMS "AREAOPT"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE121A          ANOP  ,
.*------------------------------------------------------------------
.***AE.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZE122           AIF   (K'&XAREAOPT GT 0).ZE122A
                 AIF   (K'&AREAOPT(1) LE 0).ZE122B
&ZMS             SETC  '"AREAOPT='
&ZMS             SETC  '&ZMS.&AREAOPT"'
&ZMS             SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'
&ZMS             SETC  '&ZMS "BYADDR"'
&ZMS             SETC  '&ZMS OR "BYOFFSET".'
                 MNOTE 8,' &ZMS '
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
                 AGO   .ZE122B
.*
.ZE122A          ANOP  ,
&ZXAREAOPT       SETC  'INPUT'     SET IN/OUTPUT
.ZE122B          ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY
                 AIF   (N'&AREALEN LE 1).ZE124A  CK NUM
&ZMS             SETC  '"AREALEN='
&ZMS             SETC  '&ZMS.&AREALEN"'
&ZMS             SETC  '&ZMS "AREALEN"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE124A          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&AREALEN(1) LE 0).ZE124B NO PRM
&ZXAREALEN       SETC  'INPUT'     SET IN/OUTPUT
&XAREALEN        SETC  '&AREALEN(1)'            SET XVARIABLE
                 AIF   (N'&AREALEN GT 1).ZE124B
.*               ANOP              MULTIPLE PARMS
&XAREALEN        SETC  '&AREALEN'  SET XVARIABLE
.ZE124B          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXAREALEN LE 0).ZE124R  NOT I/O
                 AIF   ('&XAREALEN'(1,1) NE '(').ZE124R
&ZCGPR           SETC  '&XAREALEN'(2,K'&XAREALEN-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE124P
                 AIF   (K'&ZCGPR GT 2).ZE124Q
                 AIF   ('&ZCGPR' EQ '0').ZE124Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE124Q  INVALID REG NAME
.ZE124P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE124R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE124Q
                 AIF   ('&ZCGPR' LE '12').ZE124R
.ZE124Q          ANOP  ,
&ZMS             SETC  '"AREALEN='
&ZMS             SETC  '&ZMS.&AREALEN"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE124R          ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, RQD OUTPUT, KEYS -XVAR KEY
                 AIF   (N'&COUNT LE 1).ZE127A   CK NUM
&ZMS             SETC  '"COUNT='
&ZMS             SETC  '&ZMS.&COUNT"'
&ZMS             SETC  '&ZMS "COUNT"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE127A          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, RQD OUTPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&COUNT(1) LE 0).ZE127B NO PRM
&ZXCOUNT         SETC  'OUTPUT'    SET IN/OUTPUT
&XCOUNT          SETC  '&COUNT(1)'              SET XVARIABLE
                 AIF   (N'&COUNT GT 1).ZE127B
.*               ANOP              MULTIPLE PARMS
&XCOUNT          SETC  '&COUNT'    SET XVARIABLE
.ZE127B          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXCOUNT LE 0).ZE127R  NOT I/O
                 AIF   ('&XCOUNT'(1,1) NE '(').ZE127R
&ZCGPR           SETC  '&XCOUNT'(2,K'&XCOUNT-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE127P
                 AIF   (K'&ZCGPR GT 2).ZE127Q
                 AIF   ('&ZCGPR' EQ '0').ZE127Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE127Q  INVALID REG NAME
.ZE127P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE127R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE127Q
                 AIF   ('&ZCGPR' LE '12').ZE127R
.ZE127Q          ANOP  ,
&ZMS             SETC  '"COUNT='
&ZMS             SETC  '&ZMS.&COUNT"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE127R          ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                 AIF   (N'&RCTABLE LE 1).ZE130A  CK NUM
&ZMS             SETC  '"RCTABLE='
&ZMS             SETC  '&ZMS.&RCTABLE"'
&ZMS             SETC  '&ZMS "RCTABLE"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE130A          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&RCTABLE(1) LE 0).ZE130B NO PRM
&ZXRCTABLE       SETC  'INPUT'     SET IN/OUTPUT
&XRCTABLE        SETC  '&RCTABLE(1)'            SET XVARIABLE
                 AIF   (N'&RCTABLE GT 1).ZE130B
.*               ANOP              MULTIPLE PARMS
&XRCTABLE        SETC  '&RCTABLE'  SET XVARIABLE
.ZE130B          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXRCTABLE LE 0).ZE130R  NOT I/O
                 AIF   ('&XRCTABLE'(1,1) NE '(').ZE130R
&ZCGPR           SETC  '&XRCTABLE'(2,K'&XRCTABLE-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE130P
                 AIF   (K'&ZCGPR GT 2).ZE130Q
                 AIF   ('&ZCGPR' EQ '0').ZE130Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE130Q  INVALID REG NAME
.ZE130P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE130R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE130Q
                 AIF   ('&ZCGPR' LE '12').ZE130R
.ZE130Q          ANOP  ,
&ZMS             SETC  '"RCTABLE='
&ZMS             SETC  '&ZMS.&RCTABLE"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE130R          ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, RQD OUTPUT, KEYS -XVAR KEY
                 AIF   (N'&RCNUM LE 1).ZE132A   CK NUM
&ZMS             SETC  '"RCNUM='
&ZMS             SETC  '&ZMS.&RCNUM"'
&ZMS             SETC  '&ZMS "RCNUM"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE132A          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, RQD OUTPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&RCNUM(1) LE 0).ZE132B NO PRM
&ZXRCNUM         SETC  'OUTPUT'    SET IN/OUTPUT
&XRCNUM          SETC  '&RCNUM(1)'              SET XVARIABLE
                 AIF   (N'&RCNUM GT 1).ZE132B
.*               ANOP              MULTIPLE PARMS
&XRCNUM          SETC  '&RCNUM'    SET XVARIABLE
.ZE132B          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXRCNUM LE 0).ZE132R  NOT I/O
                 AIF   ('&XRCNUM'(1,1) NE '(').ZE132R
&ZCGPR           SETC  '&XRCNUM'(2,K'&XRCNUM-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE132P
                 AIF   (K'&ZCGPR GT 2).ZE132Q
                 AIF   ('&ZCGPR' EQ '0').ZE132Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE132Q  INVALID REG NAME
.ZE132P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE132R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE132Q
                 AIF   ('&ZCGPR' LE '12').ZE132R
.ZE132Q          ANOP  ,
&ZMS             SETC  '"RCNUM='
&ZMS             SETC  '&ZMS.&RCNUM"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE132R          ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY
                 AIF   (N'&RETCODE LE 1).ZE136A  CK NUM
&ZMS             SETC  '"RETCODE='
&ZMS             SETC  '&ZMS.&RETCODE"'
&ZMS             SETC  '&ZMS "RETCODE"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE136A          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&RETCODE(1) LE 0).ZE136B NO PRM
&ZXRETCODE       SETC  'OUTPUT'    SET IN/OUTPUT
&XRETCODE        SETC  '&RETCODE(1)'            SET XVARIABLE
                 AIF   (N'&RETCODE GT 1).ZE136B
.*               ANOP              MULTIPLE PARMS
&XRETCODE        SETC  '&RETCODE'  SET XVARIABLE
.ZE136B          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXRETCODE LE 0).ZE136R  NOT I/O
                 AIF   ('&XRETCODE'(1,1) NE '(').ZE136R
&ZCGPR           SETC  '&XRETCODE'(2,K'&XRETCODE-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE136P
                 AIF   (K'&ZCGPR GT 2).ZE136Q
                 AIF   ('&ZCGPR' EQ '0').ZE136Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE136Q  INVALID REG NAME
.ZE136P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE136R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE136Q
                 AIF   ('&ZCGPR' LE '12').ZE136R
.ZE136Q          ANOP  ,
&ZMS             SETC  '"RETCODE='
&ZMS             SETC  '&ZMS.&RETCODE"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE136R          ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY
                 AIF   (N'&RSNCODE LE 1).ZE139A  CK NUM
&ZMS             SETC  '"RSNCODE='
&ZMS             SETC  '&ZMS.&RSNCODE"'
&ZMS             SETC  '&ZMS "RSNCODE"'
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE139A          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT
                 AIF   (K'&RSNCODE(1) LE 0).ZE139B NO PRM
&ZXRSNCODE       SETC  'OUTPUT'    SET IN/OUTPUT
&XRSNCODE        SETC  '&RSNCODE(1)'            SET XVARIABLE
                 AIF   (N'&RSNCODE GT 1).ZE139B
.*               ANOP              MULTIPLE PARMS
&XRSNCODE        SETC  '&RSNCODE'  SET XVARIABLE
.ZE139B          ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE
                 AIF   (K'&ZXRSNCODE LE 0).ZE139R  NOT I/O
                 AIF   ('&XRSNCODE'(1,1) NE '(').ZE139R
&ZCGPR           SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)
                 AIF   ('&ZCGPR'(1,1) NE '0').ZE139P
                 AIF   (K'&ZCGPR GT 2).ZE139Q
                 AIF   ('&ZCGPR' EQ '0').ZE139Q
&ZCGPR           SETC  '&ZCGPR'(2,1)
                 AIF   (T'&ZCGPR NE 'N').ZE139Q  INVALID REG NAME
.ZE139P          ANOP  ,
                 AIF   (T'&ZCGPR NE 'N').ZE139R  NON NUMERIC
                 AIF   ('&ZCGPR' LT '2').ZE139Q
                 AIF   ('&ZCGPR' LE '12').ZE139R
.ZE139Q          ANOP  ,
&ZMS             SETC  '"RSNCODE='
&ZMS             SETC  '&ZMS.&RSNCODE"'
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZE139R          ANOP  ,
.******************************************************************
.***AF.P00 CHECK STANDALONE POSITIONAL VARIABLES
.******************************************************************
                 ACTR  10000
.*----------------------------------------------------------------***
.***AF.P02 EXTRA POSITIONALS
                 AIF   (N'&SYSLIST LE 0).ZELISTX  NO EXTRAS
&ZCVAL           SETC  ''          ERROR FIELD
&ZAWRK           SETA  0           POSITIONAL NUMBER
.ZELIST2         ANOP  ,
&ZAWRK           SETA  &ZAWRK+1    NEXT POSITIONAL
                 AIF   (&ZAWRK GT N'&SYSLIST).ZELIST3  DONE
&ZCVAL           SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA
                 AGO   .ZELIST2
.*
.ZELIST3         ANOP  ,
&ZCVAL           SETC '&ZCVAL'(2,K'&ZCVAL-1)    STRIP COMMA
&ZMS             SETC  'POSITIONAL ARGUMENT(S),'
&ZMS             SETC  '&ZMS "&ZCVAL"'
&ZMS             SETC  '&ZMS CANNOT BE USED.'
&ZMS             SETC  '&ZMS NO POSITIONAL ARGUMENTS'
                 MNOTE 8,' &ZMS ARE ALLOWED.'
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE
.ZELISTX         ANOP  ,
&ZASYSLNDX       SETA  0
.*-------------------------------------------------------------------
.***AE.MF02 MF=(SLME)
.ZEMFX           ANOP  ,           END OF PARTIAL SYNTAX CHECK
.*******************************************************************
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED
.*******************************************************************
                 AIF   (&ZMACRET NE 0).ZLX2     ERROR DETECTED
.*******************************************************************
.***AE.01  START OF ATRQUERY MACRO CODE
.*******************************************************************
                 LCLC  &M0M0001                 NAME
&M0M0001         SETC  '&XLABEL'                SET NAME
                 AIF   (K'&XLABEL NE 0).XLAB2
&M0M0001         SETC  'M00M&SYSNDX'            DEFAULT NAME
.*
.XLAB2           ANOP  ,
                 AIF   ('&XMF' EQ 'L').XLAB3
&M0M0001 DS    0H                             ATRQUERY-8
.XLAB3           ANOP  ,
.*******************************************************************
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES
.*******************************************************************
              PUSH  PRINT
                 AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON
                 PRINT OFF         ++ PR01
                 AGO   .ZPRNTXX
.ZPRINTX         PRINT ON
.ZPRNTXX         ANOP  ,
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
              AIF   ('&TID' NE '').QRYA
              AGO   .QRYD INVOCATION OKAY
.QRYA         ANOP  ,
              AIF   ('&TIDHIGH' NE '' OR '&TIDLOW' NE '').QRYC
              AGO   .QRYD INVOCATION OKAY
.QRYC         ANOP  ,
&ZMS          SETC  '"TID" MAY NOT BE SPECIFIED '
&ZMS          SETC  '&ZMS IF EITHER "TIDHIGH" OR "TIDLOW" '
              MNOTE 8,'&ZMS IS SPECIFIED'
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE
.QRYD         ANOP  ,
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
.********************************************************************
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE
.********************************************************************
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX
                      LCLA  &ZOPN1         INVOCATION INDEX
                      LCLC  &ZOPL(4095)    LABEL
                      LCLC  &ZOPO(4095)    OPERATION
                      LCLC  &ZOPV(4095)    VALUE
                      LCLC  &ZOPD(4095)    DESCRIPTION
.*
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE
.******************************************************************
.***AL.L10 ATRQUERY FMT=LIST MF=S]L PARAMETERS
.******************************************************************
                      AIF   ('&XMF' EQ 'L').ZLMFSL2
                      AIF   ('&XMF' NE 'S').ZLMFSLX
&XMFCTRL              SETC  '#Z'.'&SYSNDX'.'A'
&XMFATTR              SETC  '0D'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
                      AIF   (&SYSALVL NE 0).ZALVL6A
&ZOPO(&ZOPN)          SETC  'B'
&ZOPV(&ZOPN)          SETC  '&XMFCTRL.S'
                      AGO   .ZALVL6B
.ZALVL6A              ANOP
&ZOPO(&ZOPN)          SETC  'CNOP'
&ZOPV(&ZOPN)          SETC  '4,8'
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'BRAS'
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL.S'
.ZALVL6B              ANOP
&ZOPD(&ZOPN)          SETC  '++ ATRQUERY ARG PARMS'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'SPACE'
&ZOPV(&ZOPN)          SETC  '1'
&ZOPD(&ZOPN)          SETC  ' '
.*
.ZLMFSL2              ANOP  ,
.*-------------------------------------------------------------------
.***AM.L00  ATRQUERY FMT=LIST name
                      AIF   ('&XMF' NE 'L').ZLMFSL2M
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&M0M0001'
&ZOPO(&ZOPN)          SETC 'EQU'
&ZOPV(&ZOPN)          SETC '&XMFCTRL'
&ZOPD(&ZOPN)          SETC '++ ATRQUERY NAME'
.ZLMFSL2M             ANOP  ,
.*-------------------------------------------------------------------
.***AM.L01  ATRQUERY FMT=LIST PARAMETERS
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC '&XMFATTR'
&ZOPD(&ZOPN)          SETC '++ ATRQUERY PARM LIST'
.*-------------------------------------------------------------------
.***AM.L09  XID CL8
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XID'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL8'
&ZOPD(&ZOPN)          SETC '++ CONSTANT '
.*-------------------------------------------------------------------
.***AM.L02 XVERSION XL1
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'XL1'
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'
.*-------------------------------------------------------------------
.***AM.L03 XFLAGS BL.16
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XFLAGS'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'BL.16'
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_RMINFO'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''1000000000000000'''
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).RMINFO'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_URINFO'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''0100000000000000'''
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).URINFO'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_RMNAME'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''0010000000000000'''
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).RMNAME'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_URID'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''0001000000000000'''
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).URID'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_LUWID'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''0000100000000000'''
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).LUWID'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_TID'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''0000010000000000'''
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).TID'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_GTID'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''0000001000000000'''
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).GTID'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_DEFURONLY'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''0000000100000000'''
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).DEFURONLY'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_URSTATE'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''0000000010000000'''
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).URSTATE'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_WMINFO'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''0000000001000000'''
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).WMINFO'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_WMNAME'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''0000000000100000'''
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).WMNAME'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_SYSINFO'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''0000000000010000'''
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SYSINFO'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XAREAOPT_BYOFFSET'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''0000000000001000'''
&ZOPD(&ZOPN)          SETC  '++ XAREAOPT.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).BYOFFSET'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_AREAALET'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''0000000000000100'''
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).AREAALET'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_SYSNAME'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''0000000000000010'''
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SYSNAME'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_GNAME'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''0000000000000001'''
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).GNAME'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*-------------------------------------------------------------------
.***AM.L09  XRSV00001 CL1
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV00001'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL1'
&ZOPD(&ZOPN)          SETC '++ RESERVED '
.*-------------------------------------------------------------------
.***AM.L09  XASID XL2
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XASID'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'XL2'
&ZOPD(&ZOPN)          SETC '++ &ZXASID '
.*-------------------------------------------------------------------
.***AM.L09  XRSV00002 CL2
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV00002'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL2'
&ZOPD(&ZOPN)          SETC '++ RESERVED '
.*-------------------------------------------------------------------
.***AM.L09  XAREAADDR A
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XAREAADDR'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'A'
&ZOPD(&ZOPN)          SETC '++ &ZXAREAADDR '
.*-------------------------------------------------------------------
.***AM.L09  XAREALEN F
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XAREALEN'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'F'
&ZOPD(&ZOPN)          SETC '++ &ZXAREALEN '
.*-------------------------------------------------------------------
.***AM.L09  XCOUNT F
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCOUNT'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'F'
&ZOPD(&ZOPN)          SETC '++ &ZXCOUNT '
.*-------------------------------------------------------------------
.***AM.L09  XURID CL16
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XURID'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL16'
&ZOPD(&ZOPN)          SETC '++ &ZXURID '
.*-------------------------------------------------------------------
.***AM.L09  XRMNAME CL32
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRMNAME'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL32'
&ZOPD(&ZOPN)          SETC '++ &ZXRMNAME '
.*-------------------------------------------------------------------
.***AM.L09  XURTYPE F
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XURTYPE'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'F'
&ZOPD(&ZOPN)          SETC '++ &ZXURTYPE '
.*-------------------------------------------------------------------
.***AM.L09  XURSTATE F
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XURSTATE'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'F'
&ZOPD(&ZOPN)          SETC '++ &ZXURSTATE '
.*-------------------------------------------------------------------
.***AM.L09  XLUWID CL26
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XLUWID'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL26'
&ZOPD(&ZOPN)          SETC '++ &ZXLUWID '
.*-------------------------------------------------------------------
.***AM.L09  XTID CL4
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XTID'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL4'
&ZOPD(&ZOPN)          SETC '++ &ZXTID '
.*-------------------------------------------------------------------
.***AM.L09  XGTID CL40
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XGTID'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL40'
&ZOPD(&ZOPN)          SETC '++ &ZXGTID '
.*-------------------------------------------------------------------
.***AM.MLM2 SAVED LOCATION COUNTER
                      AIF  (&XPLISTVER GE 2).ZL33LA
                      AIF  ('&ZENDBASEPL' NE '').ZL33LA
&ZENDBASEPL           SETC 'YES'
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'
&ZOPO(&ZOPN)          SETC 'EQU'
&ZOPV(&ZOPN)          SETC '*'
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'
.ZL33LA               ANOP  ,
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 2).ZL33L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XDEFURONLY CL3
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XDEFURONLY'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL3'
&ZOPD(&ZOPN)          SETC '++ &ZXDEFURONLY '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL33L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 2).ZL34L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XRSV00003 CL1
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV00003'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL1'
&ZOPD(&ZOPN)          SETC '++ RESERVED '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL34L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.MLM2 SAVED LOCATION COUNTER
                      AIF  (&XPLISTVER GE 3).ZL35LA
                      AIF  ('&ZENDBASEPL' NE '').ZL35LA
&ZENDBASEPL           SETC 'YES'
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'
&ZOPO(&ZOPN)          SETC 'EQU'
&ZOPV(&ZOPN)          SETC '*'
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'
.ZL35LA               ANOP  ,
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 3).ZL35L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XGTIDSTR CL80
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XGTIDSTR'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL80'
&ZOPD(&ZOPN)          SETC '++ &ZXGTIDSTR '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL35L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 3).ZL36L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XTIDLOW CL4
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XTIDLOW'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL4'
&ZOPD(&ZOPN)          SETC '++ &ZXTIDLOW '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL36L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 3).ZL37L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XTIDHIGH CL4
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XTIDHIGH'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL4'
&ZOPD(&ZOPN)          SETC '++ &ZXTIDHIGH '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL37L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 3).ZL38L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XURIDSTR CL32
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XURIDSTR'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL32'
&ZOPD(&ZOPN)          SETC '++ &ZXURIDSTR '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL38L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 3).ZL39L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XURSTMASK BL.32
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XURSTMASK'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'BL.32'
&ZOPD(&ZOPN)          SETC '++ &ZXURSTMASK '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL39L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 3).ZL40L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XTODBEG CL8
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XTODBEG'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL8'
&ZOPD(&ZOPN)          SETC '++ &ZXTODBEG '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL40L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 3).ZL41L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XTODEND CL8
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XTODEND'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL8'
&ZOPD(&ZOPN)          SETC '++ &ZXTODEND '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL41L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 3).ZL42L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XCURDUR CL13
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCURDUR'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL13'
&ZOPD(&ZOPN)          SETC '++ &ZXCURDUR '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL42L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 3).ZL43L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XEXCLMASK BL.32
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XEXCLMASK'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'BL.32'
&ZOPD(&ZOPN)          SETC '++ &ZXEXCLMASK '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL43L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 3).ZL44L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XEXINFOMASK BL.32
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XEXINFOMASK'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'BL.32'
&ZOPD(&ZOPN)          SETC '++ &ZXEXINFOMASK '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL44L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 3).ZL45L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XWMNAME CL32
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XWMNAME'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL32'
&ZOPD(&ZOPN)          SETC '++ &ZXWMNAME '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL45L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 3).ZL46L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XLUWIDSTR CL35
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XLUWIDSTR'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL35'
&ZOPD(&ZOPN)          SETC '++ &ZXLUWIDSTR '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL46L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 3).ZL47L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XRSV00004 CL2
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV00004'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL2'
&ZOPD(&ZOPN)          SETC '++ RESERVED '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL47L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 3).ZL48L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XSORTTAB A
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSORTTAB'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'A'
&ZOPD(&ZOPN)          SETC '++ &ZXSORTTAB '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL48L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 3).ZL49L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XSORTNUM F
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSORTNUM'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'F'
&ZOPD(&ZOPN)          SETC '++ &ZXSORTNUM '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL49L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.MLM2 SAVED LOCATION COUNTER
                      AIF  (&XPLISTVER GE 4).ZL50LA
                      AIF  ('&ZENDBASEPL' NE '').ZL50LA
&ZENDBASEPL           SETC 'YES'
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'
&ZOPO(&ZOPN)          SETC 'EQU'
&ZOPV(&ZOPN)          SETC '*'
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'
.ZL50LA               ANOP  ,
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 4).ZL50L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XAREAALET F
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XAREAALET'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'F'
&ZOPD(&ZOPN)          SETC '++ &ZXAREAALET '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL50L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 4).ZL51L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XSYSNAME CL8
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSYSNAME'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL8'
&ZOPD(&ZOPN)          SETC '++ &ZXSYSNAME '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL51L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 4).ZL52L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XGNAME CL8
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XGNAME'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL8'
&ZOPD(&ZOPN)          SETC '++ &ZXGNAME '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL52L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 4).ZL53L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XRCTABLE A
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRCTABLE'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'A'
&ZOPD(&ZOPN)          SETC '++ &ZXRCTABLE '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL53L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 4).ZL54L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XRCNUM F
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRCNUM'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'F'
&ZOPD(&ZOPN)          SETC '++ &ZXRCNUM '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL54L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.MLM2 SAVED LOCATION COUNTER
                      AIF  (&XPLISTVER GE 5).ZL55LA
                      AIF  ('&ZENDBASEPL' NE '').ZL55LA
&ZENDBASEPL           SETC 'YES'
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'
&ZOPO(&ZOPN)          SETC 'EQU'
&ZOPV(&ZOPN)          SETC '*'
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'
.ZL55LA               ANOP  ,
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 5).ZL55L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XXID CL140
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XXID'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL140'
&ZOPD(&ZOPN)          SETC '++ &ZXXID '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL55L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 5).ZL56L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XXIDFORMATID CL4
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XXIDFORMATID'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL4'
&ZOPD(&ZOPN)          SETC '++ &ZXXIDFORMATID '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL56L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 5).ZL57L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XXIDGTRIDSTR CL128
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XXIDGTRIDSTR'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL128'
&ZOPD(&ZOPN)          SETC '++ &ZXXIDGTRIDSTR '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL57L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 5).ZL58L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XXIDBQUALSTR CL128
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XXIDBQUALSTR'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL128'
&ZOPD(&ZOPN)          SETC '++ &ZXXIDBQUALSTR '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL58L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.MLM2 SAVED LOCATION COUNTER
                      AIF  (&XPLISTVER GE 6).ZL59LA
                      AIF  ('&ZENDBASEPL' NE '').ZL59LA
&ZENDBASEPL           SETC 'YES'
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'
&ZOPO(&ZOPN)          SETC 'EQU'
&ZOPV(&ZOPN)          SETC '*'
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'
.ZL59LA               ANOP  ,
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 6).ZL59L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XSURID CL32
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSURID'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL32'
&ZOPD(&ZOPN)          SETC '++ &ZXSURID '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL59L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 6).ZL60L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XSURIDSTR CL64
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSURIDSTR'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL64'
&ZOPD(&ZOPN)          SETC '++ &ZXSURIDSTR '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL60L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.MLM2 SAVED LOCATION COUNTER
                      AIF  (&XPLISTVER GE 7).ZL61LA
                      AIF  ('&ZENDBASEPL' NE '').ZL61LA
&ZENDBASEPL           SETC 'YES'
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'
&ZOPO(&ZOPN)          SETC 'EQU'
&ZOPV(&ZOPN)          SETC '*'
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'
.ZL61LA               ANOP  ,
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 7).ZL61L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XPLISTLEN XL2
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTLEN'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'XL2'
&ZOPD(&ZOPN)          SETC '++ INPUT '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL61L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 7).ZL62L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L03 XFLAGS1 BL.16
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XFLAGS1'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'BL.16'
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL62L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 7).ZL63L
.*-------------------------------------------------------------------
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_METADATA'
&ZOPO(&ZOPN)          SETC  'EQU'
&ZOPV(&ZOPN)          SETC  'B''1000000000000000'''
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).METADATA'
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL63L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.LVER1
                      AIF  (&XPLISTVER LT 7).ZL64L
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L09  XMETADATA CL8
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMETADATA'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'CL8'
&ZOPD(&ZOPN)          SETC '++ &ZXMETADATA '
.*-------------------------------------------------------------------
.***AM.LVER2
.ZL64L                ANOP  ,
.*-------------------------------------------------------------------
.*-------------------------------------------------------------------
.***AM.L10 END OF ATRQUERY LIST PARAMETERS
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'
&ZOPO(&ZOPN)          SETC 'EQU'
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'
.*
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC ' '
&ZOPO(&ZOPN)          SETC 'SPACE'
&ZOPV(&ZOPN)          SETC '1'
&ZOPD(&ZOPN)          SETC ' '
.*-------------------------------------------------------------------
.***AL.L12 ATRQUERY FMT=LIST MF=S]L PARAMETERS
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'
&ZOPO(&ZOPN)          SETC  'DC'
&ZOPV(&ZOPN)          SETC  '0H''0'''
&ZOPD(&ZOPN)          SETC  '++ ATRQUERY ARG PARMS'
.*
.ZLMFSLX              ANOP  ,
.*-------------------------------------------------------------------
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE
&ZPLLEN               SETA 154
.*
                      AIF  (&XPLISTVER LT 2).ZLLEN2Z
&ZPLLEN               SETA 158
.ZLLEN2Z              ANOP  ,
.*
                      AIF  (&XPLISTVER LT 3).ZLLEN3Z
&ZPLLEN               SETA 396
.ZLLEN3Z              ANOP  ,
.*
                      AIF  (&XPLISTVER LT 4).ZLLEN4Z
&ZPLLEN               SETA 424
.ZLLEN4Z              ANOP  ,
.*
                      AIF  (&XPLISTVER LT 5).ZLLEN5Z
&ZPLLEN               SETA 824
.ZLLEN5Z              ANOP  ,
.*
                      AIF  (&XPLISTVER LT 6).ZLLEN6Z
&ZPLLEN               SETA 920
.ZLLEN6Z              ANOP  ,
.*
                      AIF  (&XPLISTVER LT 7).ZLLEN7Z
&ZPLLEN               SETA 932
.ZLLEN7Z              ANOP  ,
.*
.******************************************************************
.***AI.L01 ATRQUERY FMT=LIST FILL IN PARAMETER AREA
.******************************************************************
                      ACTR  10000
&ZCVAL                SETC  'LA'           ASSUME XA MODE
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI
&ZCVAL                SETC  'LAE'          XAX MODE
.ZIMFXA               ANOP ,
.*
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  '&ZCVAL'
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'
                      AGO   .ZIMFNX
.*
.ZIMFN2               ANOP ,
                      AIF   (&SYSALVL EQ 0).ZIMFNX1
                      AIF   ('&XMF' NE 'S').ZIMFNX1
                      AIF   ('&ZCVAL' NE 'LAE').ZIMFNX
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'LAE'
&ZOPV(&ZOPN)          SETC  '1,0(1,0)'
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'
                      AGO   .ZIMFNX
.ZIMFNX1              ANOP ,
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  '&ZCVAL'
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'
.ZIMFNX               ANOP ,
.********************************************************************
.***AI.L02 ATRQUERY FMT=LIST INITIALIZE PARAMETER AREA
.********************************************************************
.***AI.L03 MF=(SLME)
                      AIF   ('&XMF' EQ 'L').ZIMFLX
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZIMFLX
&ZAWRK                SETA  0
&ZN                   SETA  &ZPLLEN
.ZCLRCONT             AIF   (&ZN LE 256).ZCLRX
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'XC'
&ZOPV(&ZOPN)          SETC  '&ZAWRK.(256,1),&ZAWRK.(1)'
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'
.*
&ZAWRK                SETA &ZAWRK+256
&ZN                   SETA  &ZN-256
                      AGO   .ZCLRCONT
.*
.ZCLRX                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'XC'
&ZOPV(&ZOPN)          SETC  '&ZAWRK.(&ZN,1),&ZAWRK.(1)'
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'
.ZIMFLX               ANOP  ,
.*-------------------------------------------------------------------
.***AI.L60 XID CL8
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '0(8,1),=CL8''ATRQUERY'''
&ZOPD(&ZOPN)          SETC  '++ CL8 CONSTANT'
.*-------------------------------------------------------------------
.***AI.L04B XVERSION XL1
                      AIF   (&XPLISTVER EQ 0).ZIMFVX
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZIMFVY
.ZIMFVX               ANOP  ,
                      AIF   ('&PLISTVER' EQ '').ZIMFVZ
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZIMFVZ
.ZIMFVY               ANOP  ,
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVI'
&ZOPV(&ZOPN)          SETC  '8(1),&XPLISTVER'
&ZOPD(&ZOPN)          SETC  '++ INPUT XVERSION XL1'
.ZIMFVZ               ANOP  ,
.*-------------------------------------------------------------------
.***AI.L05 XFLAGS BL2
&ZW                   SETC  ''
&ZCLNG                SETC  ''             RESET BIT ON FLAG
&ZMS                  SETC  ''
&ZC                   SETC  ''
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "RMINFO"
.***      BL2'1XXXXXXXXXXXXXXX'
         AIF   ('&XREQUEST' NE 'RMINFO').ZI4A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.1'
                      AGO   .ZI4C
.*
.ZI4A                 ANOP  ,
&ZW                   SETC  '&ZW.0'
         AIF   ('&ZXREQUEST' EQ '').ZI4B
&ZMS                  SETC  '&ZMS.0'
&ZC                   SETC  'YES'          SET BIT OFF FLAG
                      AGO   .ZI4C
.*
.ZI4B                 ANOP  ,
&ZMS                  SETC  '&ZMS.1'
.ZI4C                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "URINFO"
.***      BL2'X1XXXXXXXXXXXXXX'
         AIF   ('&XREQUEST' NE 'URINFO').ZI5A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.1'
                      AGO   .ZI5C
.*
.ZI5A                 ANOP  ,
&ZW                   SETC  '&ZW.0'
         AIF   ('&ZXREQUEST' EQ '').ZI5B
&ZMS                  SETC  '&ZMS.0'
&ZC                   SETC  'YES'          SET BIT OFF FLAG
                      AGO   .ZI5C
.*
.ZI5B                 ANOP  ,
&ZMS                  SETC  '&ZMS.1'
.ZI5C                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "RMNAME"
.***      BL2'XX1XXXXXXXXXXXXX'
         AIF   ('&RMNAME' EQ '').ZI6A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.0'
                      AGO   .ZI6C
.*
.ZI6A                 ANOP  ,
&ZW                   SETC  '&ZW.0'
&ZMS                  SETC  '&ZMS.1'
.ZI6C                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "URID"
.***      BL2'XXX1XXXXXXXXXXXX'
         AIF   ('&URID' EQ '').ZI7A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.0'
                      AGO   .ZI7C
.*
.ZI7A                 ANOP  ,
&ZW                   SETC  '&ZW.0'
&ZMS                  SETC  '&ZMS.1'
.ZI7C                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "LUWID"
.***      BL2'XXXX1XXXXXXXXXXX'
         AIF   ('&LUWID' EQ '').ZI8A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.0'
                      AGO   .ZI8C
.*
.ZI8A                 ANOP  ,
&ZW                   SETC  '&ZW.0'
&ZMS                  SETC  '&ZMS.1'
.ZI8C                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "TID"
.***      BL2'XXXXX1XXXXXXXXXX'
         AIF   ('&TID' EQ '').ZI9A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.0'
                      AGO   .ZI9C
.*
.ZI9A                 ANOP  ,
&ZW                   SETC  '&ZW.0'
&ZMS                  SETC  '&ZMS.1'
.ZI9C                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "GTID"
.***      BL2'XXXXXX1XXXXXXXXX'
         AIF   ('&GTID' EQ '').ZI10A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.0'
                      AGO   .ZI10C
.*
.ZI10A                ANOP  ,
&ZW                   SETC  '&ZW.0'
&ZMS                  SETC  '&ZMS.1'
.ZI10C                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "DEFURONLY"
.***      BL2'XXXXXXX1XXXXXXXX'
         AIF   ('&DEFURONLY' EQ '').ZI11A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.0'
                      AGO   .ZI11C
.*
.ZI11A                ANOP  ,
&ZW                   SETC  '&ZW.0'
&ZMS                  SETC  '&ZMS.1'
.ZI11C                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "URSTATE"
.***      BL2'XXXXXXXX1XXXXXXX'
         AIF   ('&URSTATE' EQ '').ZI12A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.0'
                      AGO   .ZI12C
.*
.ZI12A                ANOP  ,
&ZW                   SETC  '&ZW.0'
&ZMS                  SETC  '&ZMS.1'
.ZI12C                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "WMINFO"
.***      BL2'XXXXXXXXX1XXXXXX'
         AIF   ('&XREQUEST' NE 'WMINFO').ZI13A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.1'
                      AGO   .ZI13C
.*
.ZI13A                ANOP  ,
&ZW                   SETC  '&ZW.0'
         AIF   ('&ZXREQUEST' EQ '').ZI13B
&ZMS                  SETC  '&ZMS.0'
&ZC                   SETC  'YES'          SET BIT OFF FLAG
                      AGO   .ZI13C
.*
.ZI13B                ANOP  ,
&ZMS                  SETC  '&ZMS.1'
.ZI13C                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "WMNAME"
.***      BL2'XXXXXXXXXX1XXXXX'
         AIF   ('&WMNAME' EQ '').ZI14A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.0'
                      AGO   .ZI14C
.*
.ZI14A                ANOP  ,
&ZW                   SETC  '&ZW.0'
&ZMS                  SETC  '&ZMS.1'
.ZI14C                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "SYSINFO"
.***      BL2'XXXXXXXXXXX1XXXX'
         AIF   ('&XREQUEST' NE 'SYSINFO').ZI15A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.1'
                      AGO   .ZI15C
.*
.ZI15A                ANOP  ,
&ZW                   SETC  '&ZW.0'
         AIF   ('&ZXREQUEST' EQ '').ZI15B
&ZMS                  SETC  '&ZMS.0'
&ZC                   SETC  'YES'          SET BIT OFF FLAG
                      AGO   .ZI15C
.*
.ZI15B                ANOP  ,
&ZMS                  SETC  '&ZMS.1'
.ZI15C                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "BYOFFSET"
.***      BL2'XXXXXXXXXXXX1XXX'
         AIF   ('&XAREAOPT' NE 'BYOFFSET').ZI16A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.1'
                      AGO   .ZI16C
.*
.ZI16A                ANOP  ,
&ZW                   SETC  '&ZW.0'
         AIF   ('&ZXAREAOPT' EQ '').ZI16B
&ZMS                  SETC  '&ZMS.0'
&ZC                   SETC  'YES'          SET BIT OFF FLAG
                      AGO   .ZI16C
.*
.ZI16B                ANOP  ,
&ZMS                  SETC  '&ZMS.1'
.ZI16C                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "AREAALET"
.***      BL2'XXXXXXXXXXXXX1XX'
         AIF   ('&AREAALET' EQ '').ZI17A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.0'
                      AGO   .ZI17C
.*
.ZI17A                ANOP  ,
&ZW                   SETC  '&ZW.0'
&ZMS                  SETC  '&ZMS.1'
.ZI17C                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "SYSNAME"
.***      BL2'XXXXXXXXXXXXXX1X'
         AIF   ('&SYSNAME' EQ '').ZI18A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.0'
                      AGO   .ZI18C
.*
.ZI18A                ANOP  ,
&ZW                   SETC  '&ZW.0'
&ZMS                  SETC  '&ZMS.1'
.ZI18C                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS "GNAME"
.***      BL2'XXXXXXXXXXXXXXX1'
         AIF   ('&GNAME' EQ '').ZI19A
&ZW                   SETC  '&ZW.1'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.0'
                      AGO   .ZI19C
.*
.ZI19A                ANOP  ,
&ZW                   SETC  '&ZW.0'
&ZMS                  SETC  '&ZMS.1'
.ZI19C                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L10 XFLAGS BL2
                      AIF   ('&XMFSCK' NE 'NOCHECK').ZI19D
                      AIF   ('&ZC' NE 'YES').ZI19D
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'NC'
&ZOPV(&ZOPN)          SETC  '9(2,1),=BL2''&ZMS'''
&ZOPD(&ZOPN)          SETC  '++ INPUT BL2'
.ZI19D                ANOP  ,
                      AIF   ('&ZCLNG' NE 'YES').ZI19E  ALL ZERO BITS
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'OC'
&ZOPV(&ZOPN)          SETC  '9(2,1),=BL2''&ZW'''
&ZOPD(&ZOPN)          SETC  '++ INPUT BL2'
.ZI19E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XASID XL2
                      AIF   ('&ZXASID' EQ '').ZI21E
                      AIF   ('&ZXASID' EQ 'OUTPUT').ZI21E
&ZCGPR                SETC  '&XASID'
         AIF   ('&XASID' NE '0').ZI21A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI21E
.*
&ZCGPR                SETC  '=XL2''00'''
.ZI21A                ANOP  ,
.*
                      AIF   ('&XASID'(1,1) NE '(').ZI21B
&ZCGPR   SETC  '0('.'&XASID'(2,K'&XASID-2).')'
                      AGO   .ZI21D
.ZI21B                ANOP  ,
.*
&ZC                   SETC  '&XASID'(1,1)
                      AIF   (T'&ZC NE 'N').ZI21D
&ZC                   SETC  '&XASID'
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI21D
&ZCGPR                SETC  '=FL2''&XASID'''
.*
.ZI21D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '12(2,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXASID XASID'
.*
.ZI21E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XAREAADDR AL4
                      AIF   ('&ZXAREAADDR' EQ '').ZI23E
                      AIF   ('&ZXAREAADDR' EQ 'OUTPUT').ZI23E
&ZCGPR                SETC  '&XAREAADDR'
.*
                      AIF   ('&XAREAADDR'(1,1) NE '(').ZI23B
&ZCGPR   SETC  '0('.'&XAREAADDR'(2,K'&XAREAADDR-2).')'
                      AGO   .ZI23D
.ZI23B                ANOP  ,
.*
&ZC                   SETC  '&XAREAADDR'(1,1)
                      AIF   (T'&ZC NE 'N').ZI23D
&ZC                   SETC  '&XAREAADDR'
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI23D
&ZCGPR                SETC  '=AL4(&XAREAADDR)'
.*
.ZI23D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '16(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXAREAADDR XAREAADDR'
.*
.ZI23E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XAREALEN F
                      AIF   ('&ZXAREALEN' EQ '').ZI24E
                      AIF   ('&ZXAREALEN' EQ 'OUTPUT').ZI24E
&ZCGPR                SETC  '&XAREALEN'
.*
                      AIF   ('&XAREALEN'(1,1) NE '(').ZI24B
&ZCGPR   SETC  '0('.'&XAREALEN'(2,K'&XAREALEN-2).')'
                      AGO   .ZI24D
.ZI24B                ANOP  ,
.*
&ZC                   SETC  '&XAREALEN'(1,1)
                      AIF   (T'&ZC NE 'N').ZI24D
&ZC                   SETC  '&XAREALEN'
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI24D
&ZCGPR                SETC  '=FL4''&XAREALEN'''
.*
.ZI24D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '20(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXAREALEN XAREALEN'
.*
.ZI24E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XURID CL16
                      AIF   ('&ZXURID' EQ '').ZI26E
                      AIF   ('&ZXURID' EQ 'OUTPUT').ZI26E
&ZCGPR                SETC  '&XURID'
         AIF   ('&XURID' NE '0').ZI26A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI26E
.*
&ZCGPR                SETC  '=XL16''00'''
.ZI26A                ANOP  ,
.*
                      AIF   ('&XURID'(1,1) NE '(').ZI26B
&ZCGPR   SETC  '0('.'&XURID'(2,K'&XURID-2).')'
                      AGO   .ZI26D
.ZI26B                ANOP  ,
.*
                      AIF   ('&URID(1)' EQ '').ZI26I
&ZC                   SETC  '0'
                      AIF   ('&XURID' NE '&ZC').ZI26C
.ZI26I                ANOP  ,
&ZCGPR                SETC  '=CL16''&XURID'''
.ZI26C                ANOP  ,
.*
.ZI26D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '28(16,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXURID XURID'
.*
.ZI26E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L18  XRMNAME CL32
         AIF   ('&XRMNAME' NE 'NONE').ZI27
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI27  CK *
&ZXRMNAME             SETC  ''             RESET INPUT/OUTPUT
.ZI27                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XRMNAME CL32
                      AIF   ('&ZXRMNAME' EQ '').ZI27E
                      AIF   ('&ZXRMNAME' EQ 'OUTPUT').ZI27E
&ZCGPR                SETC  '&XRMNAME'
         AIF   ('&XRMNAME' NE 'NONE').ZI27A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI27E
.*
&ZCGPR                SETC  '=XL32''00'''
.ZI27A                ANOP  ,
.*
                      AIF   ('&XRMNAME'(1,1) NE '(').ZI27B
&ZCGPR   SETC  '0('.'&XRMNAME'(2,K'&XRMNAME-2).')'
.ZI27B                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '44(32,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXRMNAME XRMNAME'
.*
.ZI27E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L29  XURTYPE F
                      AIF   ('&ZXURTYPE' EQ '').ZI28C
                      AIF   ('&ZXURTYPE' EQ 'OUTPUT').ZI28C
&ZCGPR                SETC  '=AL4(&XURTYPE)'
         AIF   ('&XURTYPE'(1,1) EQ '(').ZI28B  IN GPR
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '76(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXURTYPE XURTYPE'
                      AGO   .ZI28C
.*
.ZI28B                ANOP  ,
&ZCGPR   SETC '&XURTYPE'(2,K'&XURTYPE-2)
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'ST'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,76(,1)'
&ZOPD(&ZOPN)          SETC  '++ &ZXURTYPE XURTYPE'
.*
.ZI28C                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L29  XURSTATE F
                      AIF   ('&ZXURSTATE' EQ '').ZI29C
                      AIF   ('&ZXURSTATE' EQ 'OUTPUT').ZI29C
&ZCGPR                SETC  '=AL4(&XURSTATE)'
         AIF   ('&XURSTATE'(1,1) EQ '(').ZI29B  IN GPR
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '80(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXURSTATE XURSTATE'
                      AGO   .ZI29C
.*
.ZI29B                ANOP  ,
&ZCGPR   SETC '&XURSTATE'(2,K'&XURSTATE-2)
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'ST'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,80(,1)'
&ZOPD(&ZOPN)          SETC  '++ &ZXURSTATE XURSTATE'
.*
.ZI29C                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XLUWID CL26
                      AIF   ('&ZXLUWID' EQ '').ZI30E
                      AIF   ('&ZXLUWID' EQ 'OUTPUT').ZI30E
&ZCGPR                SETC  '&XLUWID'
         AIF   ('&XLUWID' NE '0').ZI30A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI30E
.*
&ZCGPR                SETC  '=XL26''00'''
.ZI30A                ANOP  ,
.*
                      AIF   ('&XLUWID'(1,1) NE '(').ZI30B
&ZCGPR   SETC  '0('.'&XLUWID'(2,K'&XLUWID-2).')'
                      AGO   .ZI30D
.ZI30B                ANOP  ,
.*
                      AIF   ('&LUWID(1)' EQ '').ZI30I
&ZC                   SETC  '0'
                      AIF   ('&XLUWID' NE '&ZC').ZI30C
.ZI30I                ANOP  ,
&ZCGPR                SETC  '=CL26''&XLUWID'''
.ZI30C                ANOP  ,
.*
.ZI30D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '84(26,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXLUWID XLUWID'
.*
.ZI30E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XTID CL4
                      AIF   ('&ZXTID' EQ '').ZI31E
                      AIF   ('&ZXTID' EQ 'OUTPUT').ZI31E
&ZCGPR                SETC  '&XTID'
         AIF   ('&XTID' NE '0').ZI31A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI31E
.*
&ZCGPR                SETC  '=XL4''00'''
.ZI31A                ANOP  ,
.*
                      AIF   ('&XTID'(1,1) NE '(').ZI31B
&ZCGPR   SETC  '0('.'&XTID'(2,K'&XTID-2).')'
                      AGO   .ZI31D
.ZI31B                ANOP  ,
.*
                      AIF   ('&TID(1)' EQ '').ZI31I
&ZC                   SETC  '0'
                      AIF   ('&XTID' NE '&ZC').ZI31C
.ZI31I                ANOP  ,
&ZCGPR                SETC  '=CL4''&XTID'''
.ZI31C                ANOP  ,
.*
.ZI31D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '110(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXTID XTID'
.*
.ZI31E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XGTID CL40
                      AIF   ('&ZXGTID' EQ '').ZI32E
                      AIF   ('&ZXGTID' EQ 'OUTPUT').ZI32E
&ZCGPR                SETC  '&XGTID'
         AIF   ('&XGTID' NE '0').ZI32A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI32E
.*
&ZCGPR                SETC  '=XL40''00'''
.ZI32A                ANOP  ,
.*
                      AIF   ('&XGTID'(1,1) NE '(').ZI32B
&ZCGPR   SETC  '0('.'&XGTID'(2,K'&XGTID-2).')'
                      AGO   .ZI32D
.ZI32B                ANOP  ,
.*
                      AIF   ('&GTID(1)' EQ '').ZI32I
&ZC                   SETC  '0'
                      AIF   ('&XGTID' NE '&ZC').ZI32C
.ZI32I                ANOP  ,
&ZCGPR                SETC  '=CL40''&XGTID'''
.ZI32C                ANOP  ,
.*
.ZI32D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '114(40,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXGTID XGTID'
.*
.ZI32E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 2).ZI33Z
.*-------------------------------------------------------------------
.***AI.L25  XDEFURONLY CL3
                      AIF   ('&ZXDEFURONLY' EQ '').ZI33E
                      AIF   ('&ZXDEFURONLY' EQ 'OUTPUT').ZI33E
&ZCGPR                SETC  '&XDEFURONLY'
.*
                      AIF   ('&XDEFURONLY'(1,1) NE '(').ZI33B
&ZCGPR   SETC  '0('.'&XDEFURONLY'(2,K'&XDEFURONLY-2).')'
                      AGO   .ZI33D
.ZI33B                ANOP  ,
.*
                      AIF   ('&DEFURONLY(1)' EQ '').ZI33I
&ZC                   SETC  'NO'
                      AIF   ('&XDEFURONLY' NE '&ZC').ZI33C
.ZI33I                ANOP  ,
&ZCGPR                SETC  '=CL3''&XDEFURONLY'''
.ZI33C                ANOP  ,
.*
.ZI33D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '154(3,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXDEFURONLY XDEFURONLY'
.*
.ZI33E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI33Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 2).ZI34Z
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI34Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 3).ZI35Z
.*-------------------------------------------------------------------
.***AI.L25  XGTIDSTR CL80
                      AIF   ('&ZXGTIDSTR' EQ '').ZI35E
                      AIF   ('&ZXGTIDSTR' EQ 'OUTPUT').ZI35E
&ZCGPR                SETC  '&XGTIDSTR'
         AIF   ('&XGTIDSTR' NE '0').ZI35A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI35E
.*
&ZCGPR                SETC  '=XL80''00'''
.ZI35A                ANOP  ,
.*
                      AIF   ('&XGTIDSTR'(1,1) NE '(').ZI35B
&ZCGPR   SETC  '0('.'&XGTIDSTR'(2,K'&XGTIDSTR-2).')'
                      AGO   .ZI35D
.ZI35B                ANOP  ,
.*
                      AIF   ('&GTIDSTR(1)' EQ '').ZI35I
&ZC                   SETC  '0'
                      AIF   ('&XGTIDSTR' NE '&ZC').ZI35C
.ZI35I                ANOP  ,
&ZCGPR                SETC  '=CL80''&XGTIDSTR'''
.ZI35C                ANOP  ,
.*
.ZI35D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '158(80,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXGTIDSTR XGTIDSTR'
.*
.ZI35E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI35Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 3).ZI36Z
.*-------------------------------------------------------------------
.***AI.L18  XTIDLOW CL4
         AIF   ('&XTIDLOW' NE 'ATR_LOW_TID_VALUE').ZI36
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI36  CK *
&ZXTIDLOW             SETC  ''             RESET INPUT/OUTPUT
.ZI36                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XTIDLOW CL4
                      AIF   ('&ZXTIDLOW' EQ '').ZI36E
                      AIF   ('&ZXTIDLOW' EQ 'OUTPUT').ZI36E
&ZCGPR                SETC  '&XTIDLOW'
         AIF   ('&XTIDLOW' NE 'ATR_LOW_TID_VALUE').ZI36A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI36E
.*
&ZCGPR                SETC  '=XL4''00'''
.ZI36A                ANOP  ,
.*
                      AIF   ('&XTIDLOW'(1,1) NE '(').ZI36B
&ZCGPR   SETC  '0('.'&XTIDLOW'(2,K'&XTIDLOW-2).')'
.ZI36B                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '238(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXTIDLOW XTIDLOW'
.*
.ZI36E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI36Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 3).ZI37Z
.*-------------------------------------------------------------------
.***AI.L18  XTIDHIGH CL4
         AIF   ('&XTIDHIGH' NE 'ATR_HIGH_TID_VALUE').ZI37
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI37  CK *
&ZXTIDHIGH            SETC  ''             RESET INPUT/OUTPUT
.ZI37                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XTIDHIGH CL4
                      AIF   ('&ZXTIDHIGH' EQ '').ZI37E
                      AIF   ('&ZXTIDHIGH' EQ 'OUTPUT').ZI37E
&ZCGPR                SETC  '&XTIDHIGH'
         AIF   ('&XTIDHIGH' NE 'ATR_HIGH_TID_VALUE').ZI37A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI37E
.*
&ZCGPR                SETC  '=XL4''00'''
.ZI37A                ANOP  ,
.*
                      AIF   ('&XTIDHIGH'(1,1) NE '(').ZI37B
&ZCGPR   SETC  '0('.'&XTIDHIGH'(2,K'&XTIDHIGH-2).')'
.ZI37B                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '242(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXTIDHIGH XTIDHIGH'
.*
.ZI37E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI37Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 3).ZI38Z
.*-------------------------------------------------------------------
.***AI.L25  XURIDSTR CL32
                      AIF   ('&ZXURIDSTR' EQ '').ZI38E
                      AIF   ('&ZXURIDSTR' EQ 'OUTPUT').ZI38E
&ZCGPR                SETC  '&XURIDSTR'
         AIF   ('&XURIDSTR' NE '0').ZI38A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI38E
.*
&ZCGPR                SETC  '=XL32''00'''
.ZI38A                ANOP  ,
.*
                      AIF   ('&XURIDSTR'(1,1) NE '(').ZI38B
&ZCGPR   SETC  '0('.'&XURIDSTR'(2,K'&XURIDSTR-2).')'
                      AGO   .ZI38D
.ZI38B                ANOP  ,
.*
                      AIF   ('&URIDSTR(1)' EQ '').ZI38I
&ZC                   SETC  '0'
                      AIF   ('&XURIDSTR' NE '&ZC').ZI38C
.ZI38I                ANOP  ,
&ZCGPR                SETC  '=CL32''&XURIDSTR'''
.ZI38C                ANOP  ,
.*
.ZI38D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '246(32,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXURIDSTR XURIDSTR'
.*
.ZI38E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI38Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 3).ZI39Z
.*-------------------------------------------------------------------
.***AI.L29  XURSTMASK XL4
                      AIF   ('&ZXURSTMASK' EQ '').ZI39C
                      AIF   ('&ZXURSTMASK' EQ 'OUTPUT').ZI39C
&ZCGPR                SETC  '=BL4''&XURSTMASK'''
         AIF   ('&XURSTMASK'(1,1) EQ '(').ZI39B  IN GPR
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '278(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXURSTMASK XURSTMASK'
                      AGO   .ZI39C
.*
.ZI39B                ANOP  ,
&ZCGPR   SETC '&XURSTMASK'(2,K'&XURSTMASK-2)
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'ST'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,278(,1)'
&ZOPD(&ZOPN)          SETC  '++ &ZXURSTMASK XURSTMASK'
.*
.ZI39C                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI39Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 3).ZI40Z
.*-------------------------------------------------------------------
.***AI.L25  XTODBEG CL8
                      AIF   ('&ZXTODBEG' EQ '').ZI40E
                      AIF   ('&ZXTODBEG' EQ 'OUTPUT').ZI40E
&ZCGPR                SETC  '&XTODBEG'
         AIF   ('&XTODBEG' NE '0').ZI40A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI40E
.*
&ZCGPR                SETC  '=XL8''00'''
.ZI40A                ANOP  ,
.*
                      AIF   ('&XTODBEG'(1,1) NE '(').ZI40B
&ZCGPR   SETC  '0('.'&XTODBEG'(2,K'&XTODBEG-2).')'
                      AGO   .ZI40D
.ZI40B                ANOP  ,
.*
                      AIF   ('&TODBEG(1)' EQ '').ZI40I
&ZC                   SETC  '0'
                      AIF   ('&XTODBEG' NE '&ZC').ZI40C
.ZI40I                ANOP  ,
&ZCGPR                SETC  '=CL8''&XTODBEG'''
.ZI40C                ANOP  ,
.*
.ZI40D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '282(8,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXTODBEG XTODBEG'
.*
.ZI40E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI40Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 3).ZI41Z
.*-------------------------------------------------------------------
.***AI.L25  XTODEND CL8
                      AIF   ('&ZXTODEND' EQ '').ZI41E
                      AIF   ('&ZXTODEND' EQ 'OUTPUT').ZI41E
&ZCGPR                SETC  '&XTODEND'
         AIF   ('&XTODEND' NE '0').ZI41A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI41E
.*
&ZCGPR                SETC  '=XL8''00'''
.ZI41A                ANOP  ,
.*
                      AIF   ('&XTODEND'(1,1) NE '(').ZI41B
&ZCGPR   SETC  '0('.'&XTODEND'(2,K'&XTODEND-2).')'
                      AGO   .ZI41D
.ZI41B                ANOP  ,
.*
                      AIF   ('&TODEND(1)' EQ '').ZI41I
&ZC                   SETC  '0'
                      AIF   ('&XTODEND' NE '&ZC').ZI41C
.ZI41I                ANOP  ,
&ZCGPR                SETC  '=CL8''&XTODEND'''
.ZI41C                ANOP  ,
.*
.ZI41D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '290(8,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXTODEND XTODEND'
.*
.ZI41E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI41Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 3).ZI42Z
.*-------------------------------------------------------------------
.***AI.L25  XCURDUR CL13
                      AIF   ('&ZXCURDUR' EQ '').ZI42E
                      AIF   ('&ZXCURDUR' EQ 'OUTPUT').ZI42E
&ZCGPR                SETC  '&XCURDUR'
         AIF   ('&XCURDUR' NE '0').ZI42A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI42E
.*
&ZCGPR                SETC  '=XL13''00'''
.ZI42A                ANOP  ,
.*
                      AIF   ('&XCURDUR'(1,1) NE '(').ZI42B
&ZCGPR   SETC  '0('.'&XCURDUR'(2,K'&XCURDUR-2).')'
                      AGO   .ZI42D
.ZI42B                ANOP  ,
.*
                      AIF   ('&CURDUR(1)' EQ '').ZI42I
&ZC                   SETC  '0'
                      AIF   ('&XCURDUR' NE '&ZC').ZI42C
.ZI42I                ANOP  ,
&ZCGPR                SETC  '=CL13''&XCURDUR'''
.ZI42C                ANOP  ,
.*
.ZI42D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '298(13,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXCURDUR XCURDUR'
.*
.ZI42E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI42Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 3).ZI43Z
.*-------------------------------------------------------------------
.***AI.L18  XEXCLMASK XL4
         AIF   ('&XEXCLMASK' NE 'ATR_NOEXCLUSION_MASK').ZI43
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI43  CK *
&ZXEXCLMASK           SETC  ''             RESET INPUT/OUTPUT
.ZI43                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XEXCLMASK XL4
                      AIF   ('&ZXEXCLMASK' EQ '').ZI43E
                      AIF   ('&ZXEXCLMASK' EQ 'OUTPUT').ZI43E
&ZCGPR                SETC  '&XEXCLMASK'
         AIF   ('&XEXCLMASK' NE 'ATR_NOEXCLUSION_MASK').ZI43A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI43E
.*
&ZCGPR                SETC  '=XL4''00'''
.ZI43A                ANOP  ,
.*
                      AIF   ('&XEXCLMASK'(1,1) NE '(').ZI43B
&ZCGPR   SETC  '0('.'&XEXCLMASK'(2,K'&XEXCLMASK-2).')'
                      AGO   .ZI43D
.ZI43B                ANOP  ,
.*
&ZC                   SETC  '&XEXCLMASK'(1,1)
                      AIF   (T'&ZC NE 'N').ZI43D
&ZC                   SETC  '&XEXCLMASK'
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI43D
&ZCGPR                SETC  '=BL4''&XEXCLMASK'''
.*
.ZI43D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '311(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXEXCLMASK XEXCLMASK'
.*
.ZI43E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI43Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 3).ZI44Z
.*-------------------------------------------------------------------
.***AI.L18  XEXINFOMASK XL4
         AIF   ('&XEXINFOMASK' NE 'ATR_NOXINFO_MASK').ZI44
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI44  CK *
&ZXEXINFOMASK         SETC  ''             RESET INPUT/OUTPUT
.ZI44                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XEXINFOMASK XL4
                      AIF   ('&ZXEXINFOMASK' EQ '').ZI44E
                      AIF   ('&ZXEXINFOMASK' EQ 'OUTPUT').ZI44E
&ZCGPR                SETC  '&XEXINFOMASK'
         AIF   ('&XEXINFOMASK' NE 'ATR_NOXINFO_MASK').ZI44A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI44E
.*
&ZCGPR                SETC  '=XL4''00'''
.ZI44A                ANOP  ,
.*
                      AIF   ('&XEXINFOMASK'(1,1) NE '(').ZI44B
&ZCGPR   SETC  '0('.'&XEXINFOMASK'(2,K'&XEXINFOMASK-2).')'
                      AGO   .ZI44D
.ZI44B                ANOP  ,
.*
&ZC                   SETC  '&XEXINFOMASK'(1,1)
                      AIF   (T'&ZC NE 'N').ZI44D
&ZC                   SETC  '&XEXINFOMASK'
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI44D
&ZCGPR                SETC  '=BL4''&XEXINFOMASK'''
.*
.ZI44D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '315(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXEXINFOMASK XEXINFOMASK'
.*
.ZI44E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI44Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 3).ZI45Z
.*-------------------------------------------------------------------
.***AI.L18  XWMNAME CL32
         AIF   ('&XWMNAME' NE 'NONE').ZI45
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI45  CK *
&ZXWMNAME             SETC  ''             RESET INPUT/OUTPUT
.ZI45                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XWMNAME CL32
                      AIF   ('&ZXWMNAME' EQ '').ZI45E
                      AIF   ('&ZXWMNAME' EQ 'OUTPUT').ZI45E
&ZCGPR                SETC  '&XWMNAME'
         AIF   ('&XWMNAME' NE 'NONE').ZI45A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI45E
.*
&ZCGPR                SETC  '=XL32''00'''
.ZI45A                ANOP  ,
.*
                      AIF   ('&XWMNAME'(1,1) NE '(').ZI45B
&ZCGPR   SETC  '0('.'&XWMNAME'(2,K'&XWMNAME-2).')'
.ZI45B                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '319(32,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXWMNAME XWMNAME'
.*
.ZI45E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI45Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 3).ZI46Z
.*-------------------------------------------------------------------
.***AI.L25  XLUWIDSTR CL35
                      AIF   ('&ZXLUWIDSTR' EQ '').ZI46E
                      AIF   ('&ZXLUWIDSTR' EQ 'OUTPUT').ZI46E
&ZCGPR                SETC  '&XLUWIDSTR'
         AIF   ('&XLUWIDSTR' NE '0').ZI46A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI46E
.*
&ZCGPR                SETC  '=XL35''00'''
.ZI46A                ANOP  ,
.*
                      AIF   ('&XLUWIDSTR'(1,1) NE '(').ZI46B
&ZCGPR   SETC  '0('.'&XLUWIDSTR'(2,K'&XLUWIDSTR-2).')'
                      AGO   .ZI46D
.ZI46B                ANOP  ,
.*
                      AIF   ('&LUWIDSTR(1)' EQ '').ZI46I
&ZC                   SETC  '0'
                      AIF   ('&XLUWIDSTR' NE '&ZC').ZI46C
.ZI46I                ANOP  ,
&ZCGPR                SETC  '=CL35''&XLUWIDSTR'''
.ZI46C                ANOP  ,
.*
.ZI46D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '351(35,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXLUWIDSTR XLUWIDSTR'
.*
.ZI46E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI46Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 3).ZI47Z
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI47Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 3).ZI48Z
.*-------------------------------------------------------------------
.***AI.L25  XSORTTAB AL4
                      AIF   ('&ZXSORTTAB' EQ '').ZI48E
                      AIF   ('&ZXSORTTAB' EQ 'OUTPUT').ZI48E
&ZCGPR                SETC  '&XSORTTAB'
         AIF   ('&XSORTTAB' NE '0').ZI48A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI48E
.*
&ZCGPR                SETC  '=XL4''00'''
.ZI48A                ANOP  ,
.*
                      AIF   ('&XSORTTAB'(1,1) NE '(').ZI48B
&ZCGPR   SETC  '0('.'&XSORTTAB'(2,K'&XSORTTAB-2).')'
                      AGO   .ZI48D
.ZI48B                ANOP  ,
.*
&ZC                   SETC  '&XSORTTAB'(1,1)
                      AIF   (T'&ZC NE 'N').ZI48D
&ZC                   SETC  '&XSORTTAB'
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI48D
&ZCGPR                SETC  '=AL4(&XSORTTAB)'
.*
.ZI48D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '388(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXSORTTAB XSORTTAB'
.*
.ZI48E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI48Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 3).ZI49Z
.*-------------------------------------------------------------------
.***AI.L25  XSORTNUM F
                      AIF   ('&ZXSORTNUM' EQ '').ZI49E
                      AIF   ('&ZXSORTNUM' EQ 'OUTPUT').ZI49E
&ZCGPR                SETC  '&XSORTNUM'
         AIF   ('&XSORTNUM' NE '0').ZI49A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI49E
.*
&ZCGPR                SETC  '=XL4''00'''
.ZI49A                ANOP  ,
.*
                      AIF   ('&XSORTNUM'(1,1) NE '(').ZI49B
&ZCGPR   SETC  '0('.'&XSORTNUM'(2,K'&XSORTNUM-2).')'
                      AGO   .ZI49D
.ZI49B                ANOP  ,
.*
&ZC                   SETC  '&XSORTNUM'(1,1)
                      AIF   (T'&ZC NE 'N').ZI49D
&ZC                   SETC  '&XSORTNUM'
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI49D
&ZCGPR                SETC  '=AL4(&XSORTNUM)'
.*
.ZI49D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '392(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXSORTNUM XSORTNUM'
.*
.ZI49E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI49Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 4).ZI50Z
.*-------------------------------------------------------------------
.***AI.L25  XAREAALET F
                      AIF   ('&ZXAREAALET' EQ '').ZI50E
                      AIF   ('&ZXAREAALET' EQ 'OUTPUT').ZI50E
&ZCGPR                SETC  '&XAREAALET'
         AIF   ('&XAREAALET' NE '0').ZI50A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI50E
.*
&ZCGPR                SETC  '=XL4''00'''
.ZI50A                ANOP  ,
.*
                      AIF   ('&XAREAALET'(1,1) NE '(').ZI50B
&ZCGPR   SETC  '0('.'&XAREAALET'(2,K'&XAREAALET-2).')'
                      AGO   .ZI50D
.ZI50B                ANOP  ,
.*
&ZC                   SETC  '&XAREAALET'(1,1)
                      AIF   (T'&ZC NE 'N').ZI50D
&ZC                   SETC  '&XAREAALET'
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI50D
&ZCGPR                SETC  '=AL4(&XAREAALET)'
.*
.ZI50D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '396(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXAREAALET XAREAALET'
.*
.ZI50E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI50Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 4).ZI51Z
.*-------------------------------------------------------------------
.***AI.L18  XSYSNAME CL8
         AIF   ('&XSYSNAME' NE 'CURRENT_SYSNAME').ZI51
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI51  CK *
&ZXSYSNAME            SETC  ''             RESET INPUT/OUTPUT
.ZI51                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XSYSNAME CL8
                      AIF   ('&ZXSYSNAME' EQ '').ZI51E
                      AIF   ('&ZXSYSNAME' EQ 'OUTPUT').ZI51E
&ZCGPR                SETC  '&XSYSNAME'
         AIF   ('&XSYSNAME' NE 'CURRENT_SYSNAME').ZI51A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI51E
.*
&ZCGPR                SETC  '=XL8''00'''
.ZI51A                ANOP  ,
.*
                      AIF   ('&XSYSNAME'(1,1) NE '(').ZI51B
&ZCGPR   SETC  '0('.'&XSYSNAME'(2,K'&XSYSNAME-2).')'
.ZI51B                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '400(8,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXSYSNAME XSYSNAME'
.*
.ZI51E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI51Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 4).ZI52Z
.*-------------------------------------------------------------------
.***AI.L18  XGNAME CL8
         AIF   ('&XGNAME' NE 'CURRENT_GNAME').ZI52
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI52  CK *
&ZXGNAME              SETC  ''             RESET INPUT/OUTPUT
.ZI52                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XGNAME CL8
                      AIF   ('&ZXGNAME' EQ '').ZI52E
                      AIF   ('&ZXGNAME' EQ 'OUTPUT').ZI52E
&ZCGPR                SETC  '&XGNAME'
         AIF   ('&XGNAME' NE 'CURRENT_GNAME').ZI52A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI52E
.*
&ZCGPR                SETC  '=XL8''00'''
.ZI52A                ANOP  ,
.*
                      AIF   ('&XGNAME'(1,1) NE '(').ZI52B
&ZCGPR   SETC  '0('.'&XGNAME'(2,K'&XGNAME-2).')'
.ZI52B                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '408(8,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXGNAME XGNAME'
.*
.ZI52E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI52Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 4).ZI53Z
.*-------------------------------------------------------------------
.***AI.L25  XRCTABLE AL4
                      AIF   ('&ZXRCTABLE' EQ '').ZI53E
                      AIF   ('&ZXRCTABLE' EQ 'OUTPUT').ZI53E
&ZCGPR                SETC  '&XRCTABLE'
         AIF   ('&XRCTABLE' NE '0').ZI53A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI53E
.*
&ZCGPR                SETC  '=XL4''00'''
.ZI53A                ANOP  ,
.*
                      AIF   ('&XRCTABLE'(1,1) NE '(').ZI53B
&ZCGPR   SETC  '0('.'&XRCTABLE'(2,K'&XRCTABLE-2).')'
                      AGO   .ZI53D
.ZI53B                ANOP  ,
.*
&ZC                   SETC  '&XRCTABLE'(1,1)
                      AIF   (T'&ZC NE 'N').ZI53D
&ZC                   SETC  '&XRCTABLE'
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI53D
&ZCGPR                SETC  '=AL4(&XRCTABLE)'
.*
.ZI53D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '416(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXRCTABLE XRCTABLE'
.*
.ZI53E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI53Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 5).ZI55Z
.*-------------------------------------------------------------------
.***AI.L25  XXID CL140
                      AIF   ('&ZXXID' EQ '').ZI55E
                      AIF   ('&ZXXID' EQ 'OUTPUT').ZI55E
&ZCGPR                SETC  '&XXID'
         AIF   ('&XXID' NE '0').ZI55A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI55E
.*
&ZCGPR                SETC  '=XL140''00'''
.ZI55A                ANOP  ,
.*
                      AIF   ('&XXID'(1,1) NE '(').ZI55B
&ZCGPR   SETC  '0('.'&XXID'(2,K'&XXID-2).')'
                      AGO   .ZI55D
.ZI55B                ANOP  ,
.*
                      AIF   ('&XID(1)' EQ '').ZI55I
&ZC                   SETC  '0'
                      AIF   ('&XXID' NE '&ZC').ZI55C
.ZI55I                ANOP  ,
&ZCGPR                SETC  '=CL140''&XXID'''
.ZI55C                ANOP  ,
.*
.ZI55D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '424(140,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXXID XXID'
.*
.ZI55E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI55Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 5).ZI56Z
.*-------------------------------------------------------------------
.***AI.L25  XXIDFORMATID CL4
                      AIF   ('&ZXXIDFORMATID' EQ '').ZI56E
                      AIF   ('&ZXXIDFORMATID' EQ 'OUTPUT').ZI56E
&ZCGPR                SETC  '&XXIDFORMATID'
         AIF   ('&XXIDFORMATID' NE '0').ZI56A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI56E
.*
&ZCGPR                SETC  '=XL4''00'''
.ZI56A                ANOP  ,
.*
                      AIF   ('&XXIDFORMATID'(1,1) NE '(').ZI56B
&ZCGPR   SETC  '0('.'&XXIDFORMATID'(2,K'&XXIDFORMATID-2).')'
                      AGO   .ZI56D
.ZI56B                ANOP  ,
.*
                      AIF   ('&XIDFORMATID(1)' EQ '').ZI56I
&ZC                   SETC  '0'
                      AIF   ('&XXIDFORMATID' NE '&ZC').ZI56C
.ZI56I                ANOP  ,
&ZCGPR                SETC  '=CL4''&XXIDFORMATID'''
.ZI56C                ANOP  ,
.*
.ZI56D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '564(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXXIDFORMATID XXIDFORMATID'
.*
.ZI56E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI56Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 5).ZI57Z
.*-------------------------------------------------------------------
.***AI.L25  XXIDGTRIDSTR CL128
                      AIF   ('&ZXXIDGTRIDSTR' EQ '').ZI57E
                      AIF   ('&ZXXIDGTRIDSTR' EQ 'OUTPUT').ZI57E
&ZCGPR                SETC  '&XXIDGTRIDSTR'
         AIF   ('&XXIDGTRIDSTR' NE '0').ZI57A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI57E
.*
&ZCGPR                SETC  '=XL128''00'''
.ZI57A                ANOP  ,
.*
                      AIF   ('&XXIDGTRIDSTR'(1,1) NE '(').ZI57B
&ZCGPR   SETC  '0('.'&XXIDGTRIDSTR'(2,K'&XXIDGTRIDSTR-2).')'
                      AGO   .ZI57D
.ZI57B                ANOP  ,
.*
                      AIF   ('&XIDGTRIDSTR(1)' EQ '').ZI57I
&ZC                   SETC  '0'
                      AIF   ('&XXIDGTRIDSTR' NE '&ZC').ZI57C
.ZI57I                ANOP  ,
&ZCGPR                SETC  '=CL128''&XXIDGTRIDSTR'''
.ZI57C                ANOP  ,
.*
.ZI57D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '568(128,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXXIDGTRIDSTR XXIDGTRIDSTR'
.*
.ZI57E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI57Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 5).ZI58Z
.*-------------------------------------------------------------------
.***AI.L25  XXIDBQUALSTR CL128
                      AIF   ('&ZXXIDBQUALSTR' EQ '').ZI58E
                      AIF   ('&ZXXIDBQUALSTR' EQ 'OUTPUT').ZI58E
&ZCGPR                SETC  '&XXIDBQUALSTR'
         AIF   ('&XXIDBQUALSTR' NE '0').ZI58A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI58E
.*
&ZCGPR                SETC  '=XL128''00'''
.ZI58A                ANOP  ,
.*
                      AIF   ('&XXIDBQUALSTR'(1,1) NE '(').ZI58B
&ZCGPR   SETC  '0('.'&XXIDBQUALSTR'(2,K'&XXIDBQUALSTR-2).')'
                      AGO   .ZI58D
.ZI58B                ANOP  ,
.*
                      AIF   ('&XIDBQUALSTR(1)' EQ '').ZI58I
&ZC                   SETC  '0'
                      AIF   ('&XXIDBQUALSTR' NE '&ZC').ZI58C
.ZI58I                ANOP  ,
&ZCGPR                SETC  '=CL128''&XXIDBQUALSTR'''
.ZI58C                ANOP  ,
.*
.ZI58D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '696(128,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXXIDBQUALSTR XXIDBQUALSTR'
.*
.ZI58E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI58Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 6).ZI59Z
.*-------------------------------------------------------------------
.***AI.L25  XSURID CL32
                      AIF   ('&ZXSURID' EQ '').ZI59E
                      AIF   ('&ZXSURID' EQ 'OUTPUT').ZI59E
&ZCGPR                SETC  '&XSURID'
         AIF   ('&XSURID' NE '0').ZI59A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI59E
.*
&ZCGPR                SETC  '=XL32''00'''
.ZI59A                ANOP  ,
.*
                      AIF   ('&XSURID'(1,1) NE '(').ZI59B
&ZCGPR   SETC  '0('.'&XSURID'(2,K'&XSURID-2).')'
                      AGO   .ZI59D
.ZI59B                ANOP  ,
.*
                      AIF   ('&SURID(1)' EQ '').ZI59I
&ZC                   SETC  '0'
                      AIF   ('&XSURID' NE '&ZC').ZI59C
.ZI59I                ANOP  ,
&ZCGPR                SETC  '=CL32''&XSURID'''
.ZI59C                ANOP  ,
.*
.ZI59D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '824(32,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXSURID XSURID'
.*
.ZI59E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI59Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 6).ZI60Z
.*-------------------------------------------------------------------
.***AI.L25  XSURIDSTR CL64
                      AIF   ('&ZXSURIDSTR' EQ '').ZI60E
                      AIF   ('&ZXSURIDSTR' EQ 'OUTPUT').ZI60E
&ZCGPR                SETC  '&XSURIDSTR'
         AIF   ('&XSURIDSTR' NE '0').ZI60A
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI60E
.*
&ZCGPR                SETC  '=XL64''00'''
.ZI60A                ANOP  ,
.*
                      AIF   ('&XSURIDSTR'(1,1) NE '(').ZI60B
&ZCGPR   SETC  '0('.'&XSURIDSTR'(2,K'&XSURIDSTR-2).')'
                      AGO   .ZI60D
.ZI60B                ANOP  ,
.*
                      AIF   ('&SURIDSTR(1)' EQ '').ZI60I
&ZC                   SETC  '0'
                      AIF   ('&XSURIDSTR' NE '&ZC').ZI60C
.ZI60I                ANOP  ,
&ZCGPR                SETC  '=CL64''&XSURIDSTR'''
.ZI60C                ANOP  ,
.*
.ZI60D                ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '856(64,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXSURIDSTR XSURIDSTR'
.*
.ZI60E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI60Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 7).ZI61Z
.*-------------------------------------------------------------------
.***AI.L04 XPLISTLEN XL2
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '920(2,1),=AL2(&ZPLLEN)'
&ZOPD(&ZOPN)          SETC  '++ INPUT XPLISTLEN XL2'
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI61Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 7).ZI62Z
.*-------------------------------------------------------------------
.***AI.L05 XFLAGS1 BL2
&ZW                   SETC  ''
&ZCLNG                SETC  ''             RESET BIT ON FLAG
&ZMS                  SETC  ''
&ZC                   SETC  ''
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI62Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 7).ZI63Z
.*-------------------------------------------------------------------
.***AI.L08 XFLAGS1 "METADATA"
.***      BL2'1XXXXXXXXXXXXXXX'
         AIF   ('&METADATA' EQ '').ZI63A
         AIF   ('&METADATA' EQ 'NO').ZI63A
&ZW                   SETC  '&ZW.1000000000000000'
&ZCLNG                SETC  'YES'          SET BIT ON FLAG
&ZMS                  SETC  '&ZMS.0111111111111111'
                      AGO   .ZI63C
.*
.ZI63A                ANOP  ,
&ZW                   SETC  '&ZW.0000000000000000'
&ZMS                  SETC  '&ZMS.1111111111111111'
.ZI63C                ANOP  ,
.*-------------------------------------------------------------------
.***AI.L10 XFLAGS1 BL2
                      AIF   ('&XMFSCK' NE 'NOCHECK').ZI63D
                      AIF   ('&ZC' NE 'YES').ZI63D
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'NC'
&ZOPV(&ZOPN)          SETC  '922(2,1),=BL2''&ZMS'''
&ZOPD(&ZOPN)          SETC  '++ INPUT BL2'
.ZI63D                ANOP  ,
                      AIF   ('&ZCLNG' NE 'YES').ZI63E  ALL ZERO BITS
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'OC'
&ZOPV(&ZOPN)          SETC  '922(2,1),=BL2''&ZW'''
&ZOPD(&ZOPN)          SETC  '++ INPUT BL2'
.ZI63E                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI63Z                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER01
                      AIF  (&XPLISTVER LT 7).ZI64Z
.*-------------------------------------------------------------------
.***AI.L29  XMETADATA CL8
                      AIF   ('&ZXMETADATA' EQ '').ZI64C
                      AIF   ('&ZXMETADATA' EQ 'OUTPUT').ZI64C
&ZCGPR                SETC  '=CL8''&XMETADATA'''
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '924(8,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXMETADATA XMETADATA'
.*
.ZI64C                ANOP  ,
.*-------------------------------------------------------------------
.***AI.LVER02
.ZI64Z                ANOP  ,
.*-------------------------------------------------------------------
&ZOPN1                SETA &ZOPN
.*-------------------------------------------------------------------
.***AI.C00 MF=M CHECK TO BYPASS INVOCATION
                      AIF   ('&XMF' EQ 'M').ZMFLX  DONE IF MF=M
.*******************************************************************
.***  PROCESS ATRQUERY OUTPUT PARAMETERS
.*******************************************************************
                      ACTR  10000
.*------------------------------------------------------------------
.***AO.L02 XCOUNT F
         AIF   ('&ZXCOUNT' EQ 'OUTPUT').ZO25A  OUTPUT
         AIF   ('&ZXCOUNT' NE 'INOUT').ZO25C  INOUT
.ZO25A    AIF   ('&XCOUNT'(1,1) NE '(').ZO25B  ADDR IN GPR
&ZCGPR   SETC  '&XCOUNT'(2,K'&XCOUNT-2)
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),24(1)'
&ZOPD(&ZOPN)          SETC  '++ XCOUNT F'
                      AGO   .ZO25C
.*
.ZO25B                ANOP  ,
&ZAWRK   SETA  K'&XCOUNT
         AIF   ('&XCOUNT'(&ZAWRK,1) NE ')').ZO25G
&ZN      SETA  2
.ZO25H    ANOP
         AIF   (&ZN GE &ZAWRK).ZO25G
         AIF   ('&XCOUNT'(&ZN,1) NE '(').ZO25I
&ZC      SETC  '&XCOUNT'(1,&ZN).'4'.','
&ZC      SETC  '&ZC'.'&XCOUNT'(&ZN+1,&ZAWRK-&ZN).',24(1)'
         AGO   .ZO25J
.ZO25I    ANOP
&ZN      SETA  &ZN+1
         AGO   .ZO25H
.ZO25G    ANOP
&ZC      SETC  '&XCOUNT.(4),24(1)'
.ZO25J    ANOP
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '&ZC'
&ZOPD(&ZOPN)          SETC  '++ XCOUNT F'
.ZO25C                ANOP  ,
.*------------------------------------------------------------------
.***AO.LVER01
                      AIF  (&XPLISTVER LT 4).ZO54Z  PLVER
.*------------------------------------------------------------------
.***AO.L02 XRCNUM F
         AIF   ('&ZXRCNUM' EQ 'OUTPUT').ZO54A  OUTPUT
         AIF   ('&ZXRCNUM' NE 'INOUT').ZO54C  INOUT
.ZO54A    AIF   ('&XRCNUM'(1,1) NE '(').ZO54B  ADDR IN GPR
&ZCGPR   SETC  '&XRCNUM'(2,K'&XRCNUM-2)
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),420(1)'
&ZOPD(&ZOPN)          SETC  '++ XRCNUM F'
                      AGO   .ZO54C
.*
.ZO54B                ANOP  ,
&ZAWRK   SETA  K'&XRCNUM
         AIF   ('&XRCNUM'(&ZAWRK,1) NE ')').ZO54G
&ZN      SETA  2
.ZO54H    ANOP
         AIF   (&ZN GE &ZAWRK).ZO54G
         AIF   ('&XRCNUM'(&ZN,1) NE '(').ZO54I
&ZC      SETC  '&XRCNUM'(1,&ZN).'4'.','
&ZC      SETC  '&ZC'.'&XRCNUM'(&ZN+1,&ZAWRK-&ZN).',420(1)'
         AGO   .ZO54J
.ZO54I    ANOP
&ZN      SETA  &ZN+1
         AGO   .ZO54H
.ZO54G    ANOP
&ZC      SETC  '&XRCNUM.(4),420(1)'
.ZO54J    ANOP
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '&ZC'
&ZOPD(&ZOPN)          SETC  '++ XRCNUM F'
.ZO54C                ANOP  ,
.*------------------------------------------------------------------
.***AO.LVER02
.ZO54Z                ANOP  ,
.*******************************************************************
.***AO.X01  LABEL TO BYPASS INVOCATION
.*******************************************************************
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  'AMGE&SYSNDX'
&ZOPO(&ZOPN)          SETC  'DS'
&ZOPV(&ZOPN)          SETC  '0H'
&ZOPD(&ZOPN)          SETC  '++ BYPASS INVOCATION'
.*******************************************************************
.***AO.X02  RETURN CODE PROCESSING
.*******************************************************************
                      AIF   (N'&RETCODE LE 0).ZMRETX
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX
                      AIF   ('&XRETCODE' EQ '15').ZMRETX
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'ST'
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'
                      AGO   .ZMRETX
.*
.ZMRET2               ANOP  ,
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX
                      AIF   ('&ZCGPR' EQ '15').ZMRETX
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'
.ZMRETX               ANOP  ,
.*******************************************************************
.***AO.X03  REASON CODE PROCESSING
.*******************************************************************
                      AIF   (N'&RSNCODE LE 0).ZMRSNX
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'ST'
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'
                      AGO   .ZMRSNX
.*
.ZMRSN2               ANOP  ,
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'
.ZMRSNX               ANOP  ,
.*******************************************************************
.***AO.X04  LABEL FOR MF=L PROCESSING
.*******************************************************************
.ZMFLX                ANOP  ,              MF=L PROCESSING
.*******************************************************************
.***AO.X05  FORMAT GENERATED INSTRUCTIONS
.*******************************************************************
                      ACTR  10000
.*
                      LCLA  &ZLC           COLUMN POSITION
                      LCLA  &ZOPX          LIST TABLE INDEX
                      LCLC  &ZLL           LABEL
                      LCLC  &ZLOP          OPERATION
                      LCLC  &ZLV           VALUE
                      LCLC  &ZLD           DESCRIPTION
.*
&ZOPX                 SETA  1
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE
&ZLL                  SETC  '&ZOPL(&ZOPX)'
&ZLOP                 SETC  '&ZOPO(&ZOPX)'
&ZLV                  SETC  '&ZOPV(&ZOPX)'
&ZLD                  SETC  '&ZOPD(&ZOPX)'
                      AIF   (K'&ZLD LE 0).ZL5
&ZLC                  SETA  35             COMMENT COLUMN
                      AIF   ('&ZLD'(1,1) NE '*').ZL3
&ZLC                  SETA  33             COMMMENT COLUMN
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4
&ZLV                  SETC  '&ZLV'.' '
                      AGO   .ZL3
.*
.ZL4                  ANOP  ,
&ZLV                  SETC  '&ZLV'.' '
.ZL5                  ANOP  ,
&ZLV                  SETC  '&ZLV'.'&ZLD'
.*
&ZLL     &ZLOP &ZLV
.*
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE
                      AGO   .ZL2           CONTINUE LOOPING
.*
.ZLX                  ANOP  ,
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L
                      AIF   ('&XMF' EQ 'M').ZLINKX  MF=M
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
         L     14,16(0,0)
         L     14,CVTECVT-CVTMAP(14)
         TM    ECVTRRSW-ECVT(14),B'10000000'
         BNZ   NSRV&SYSNDX
         L     14,ECVTRRSW-ECVT(14)
         L     14,156(14)
         PC    0(14)
         B     DONE&SYSNDX
NSRV&SYSNDX EQU *
         LA    15,ATRQUERY_FAILURE
         LA    0,ATRQUERY_RRS_NOT_ACTIVE
DONE&SYSNDX EQU *
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
.ZLINKX               ANOP  ,
.*******************************************************************
.***AP.X01  FORMAT GENERATED CODE
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE
&ZLL                  SETC  '&ZOPL(&ZOPX)'
&ZLOP                 SETC  '&ZOPO(&ZOPX)'
&ZLV                  SETC  '&ZOPV(&ZOPX)'
&ZLD                  SETC  '&ZOPD(&ZOPX)'
                      AIF   (K'&ZLD LE 0).ZL51
&ZLC                  SETA  35             COMMENT COLUMN
                      AIF   ('&ZLD'(1,1) NE '*').ZL31
&ZLC                  SETA  33             COMMENT COLUMN
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41
&ZLV                  SETC  '&ZLV'.' '
                      AGO   .ZL31
.*
.ZL41                 ANOP  ,
&ZLV                  SETC  '&ZLV'.' '
.ZL51                 ANOP  ,
&ZLV                  SETC  '&ZLV'.'&ZLD'
.*
&ZLL     &ZLOP &ZLV
.*
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE
                      AGO   .ZL21          CONTINUE LOOPING
.*
.ZLX1                 ANOP  ,
.*******************************************************************
.***AP.X02  END OF ATRQUERY MACRO
&ZATRQUERY            SETC  'YES'          SET ATRQUERY USED
         POP   PRINT
*                                            ATRQUERY-8
         SPACE 1
.ZLX2                 ANOP  ,
         MEND
**********************************************************************/
*/*PB.OC01 INVOKE MACRO---------------------------------------------*/
*%ATRQUERY: MACRO KEYS(REQUEST,RMNAME,GNAME,SYSNAME,METADATA,WMNAME,
*                 DEFURONLY,EXCLMASK,ASID,URID,URIDSTR,SURID,SURIDSTR,
*                 URTYPE,URSTATE,URSTMASK,LUWID,LUWIDSTR,TID,TIDHIGH,
*                 TIDLOW,GTID,GTIDSTR,XID,XIDFORMATID,XIDGTRIDSTR,
*                 XIDBQUALSTR,TODBEG,TODEND,CURDUR,EXINFOMASK,SORTTAB,
*                 SORTNUM,AREAADDR,AREAALET,AREAOPT,AREALEN,COUNT,
*                 RCTABLE,RCNUM,RETCODE,RSNCODE,PLISTVER,MF);
*  ANS('?']]MACLABEL]]' ']]'ATRQUERP ']]MACLIST]]
*         ' ']]MACKEYS]]';') COL(MACLMAR);
*%END ATRQUERY;
