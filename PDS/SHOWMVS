*PROCESS BATCH,USING(NOMAP,WARN(8)),FLAG(NOPUSH)
***********************************************************************
*                                                                     *
*              SSSS  H   H  OOOOO  W   W  M   M  V   V   SSSS         *
*            S      H   H  O   O  W   W  MM MM  V   V  S              *
*            SSS   HHHHH  O   O  W W W  M M M  V   V   SSS            *
*              S  H   H  O   O  WW WW  M   M   V V       S            *
*         SSSS   H   H  OOOOO  W   W  M   M    V    SSSS              *
*                                                                     *
*     This program displays information obtained from various         *
*     control blocks of the MVS system on which it is run.            *
*     The information can be displayed under ISPF using EDIF or       *
*     BRIF, written to the TSO terminal using PUTLINE or to           *
*     a data set using QSAM.                                          *
*                                                                     *
*     SHOWMVS displays two different types of data:                   *
*                                                                     *
*       1. Data related to the MVS operating system:                  *
*                                                                     *
*          MVS LEVEL, DFP LEVEL, OSLVL FLAGS, JES2 LEVEL              *
*          IPL DATE, TIME, VOLSER, NUC-ID, CLPA, CVTUSER              *
*          Date and time of last CLPA                           (auth)*
*          Time Zone, Primary sub-system name and type                *
*          Software Level: TSO/E, ISPF, DSS, HSM, RACF, VTAM, SORT    *
*                          DSF, DB2, CICS, MQ Series, TCP/IP, LE      *
*          Run-time Environments (CBL, PLI, FORTRAN, C/370, LE, RTLS) *
*          USS configuration and data                                 *
*          ICSF configuration (Cyrpto)                                *
*          SMF Information: SID, JWT, data sets, exits                *
*          SMS Configuration:  SCDS, system names, last update        *
*          HSM information                                            *
*          SDM information                                            *
*          GRS Configuration                                          *
*          XCF Configuration                                    (auth)*
*          Hardware configuration                                     *
*            Central Processing Complex Node Description (CPC ND)     *
*            On-line CPUs and storage                                 *
*            Performance (SU/sec, estimated MIPS)                     *
*            Service Processor data                                   *
*            CSRSI support                                            *
*            Other CPU related attributes                             *
*            I/O configuration Definition (IODF)                      *
*            LPAR configuration                                       *
*          VM host information                                  (auth)*
*          VIRTUAL STORAGE MAP (CSA, SQA, LPA, etc)                   *
*          Subpool attributes                                         *
*          Global Cellpools                                           *
*          Common Storage Usage                                       *
*          Dataspaces                                           (auth)*
*          CSM Communication Storage Manager                          *
*          XCF Configuration                                    (auth)*
*          Path data                                            (auth)*
*          Coupling facility                                    (auth)*
*          External timer                                       (auth)*
*          SRM data (IPS/ICS/OPT, APG, etc)                           *
*          WLM data (MODE, ETC)                                       *
*          System Logger (IXGLOGR)                              (auth)*
*          Resource Recovery Manager (RRS)                            *
*          Automatic Restart Manager (ARM)                            *
*          OPEN catalogs                                              *
*          PAGE data sets in use                                      *
*          Dump data sets status and dump options                     *
*          Dump data sets date, time and title                  (auth)*
*          Automatically-allocated dump data sets               (auth)*
*          DAE Parameters                                       (auth)*
*          SLIP data                                            (auth)*
*          GTF status and options                                     *
*          DIAG settings                                              *
*          Initialization Parameters (IPA)                            *
*          Master JCL (IEEMSJCL)                                      *
*          Sub-system vector table with functions processed           *
*          Primary Sub-system JCL                               (auth)*
*          TCAS parameters                                      (auth)*
*          TSO PARMLIB data (IKJTSOxx)                                *
*          TSO Exits and Tables                                       *
*          RACF options, data sets and tables                         *
*          Address space usage:                                       *
*            Batch Jobs                                               *
*            TSO users                                                *
*            Started tasks                                            *
*            USS tasks                                                *
*          JES2 Initiators and corresponding jobs                     *
*          Link-list data sets, with creation date                    *
*          LPA-list data sets, with creation date                     *
*          List of authorized libraries                               *
*          Dynamic Exit Facility                                (auth)*
*          Static system symbols                                      *
*          LLA parameters and managed libraries                 (auth)*
*          ACTIVE LPA QUEUE                                           *
*          SVC Table with name of the corresponding module            *
*          T1, T2, T3 and T6 ESR tables                               *
*          Linkage Index (LX) Table                             (auth)*
*          Auth Index (LX) Table                                (auth)*
*          Cross Memory Connection (XMS)                        (auth)*
*          Memory Delete Queue (MDQ)                            (auth)*
*          PC usage (ETE)                                       (auth)*
*          Program Properties Table (PPT)                       (auth)*
*          I/O Appendage Table                                        *
*          Resource Manager List (IEAVTRML)                           *
*          Products Information                                       *
*          Device Classes and corresponding unit names                *
*          On-line devices, with unit-name, VOLSER, owning job,       *
*                use attribute, storage group                         *
*          Channel Path information                                   *
*          System consoles, with status & Routcde list                *
*              EMCS-Consoles                                    (auth)*
*          Message Processing Facility (MPF)                          *
*          Command Prefix Table (CPFT)                                *
*          Name/Token information                                     *
*          Device Allocation Defaults (ALLOCxx)                       *
*          Addresses of selected global control blocks                *
*                                                                     *
*       2. Data related to the current address space                  *
*                                                                     *
*          JCL information for current JOB/STEP                       *
*          RACF profile (from ACEE)                                   *
*          TSO profile (from PSCB & UPT)                              *
*          REXX environments, host cmd tables and func pkg directories*
*          Allocated Data sets (from TIOT, SWA, TCT)                  *
*          TCB tree and PRB chain                                     *
*          Attention Routines                                         *
*          Enhanced view of the JPAQ and Load-lists                   *
*          Local Cellpools                                            *
*          Recovery exits and timers                                  *
*          Local Name/Token                                           *
*          Addresses of selected local control blocks                 *
*                                                                     *
*       SHOWMVS can be invoked as a program, as a TSO command, or     *
*       as an edit macro and can run authorized or non-authorized.    *
*       Some of the displays are only produced when SHOWMVS runs      *
*       authorized.                                                   *
*       SHOWMVS should run in hard-copy mode under CICS. ShowMvs      *
*       can't be run native under CICS you need to use a simple       *
*       stub which is available from Roland@schiradin.de              *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*     Compatibility                                                   *
*                                                                     *
*       SHOWMVS V7nn supports OS/390 R1 through R10 and z/OS R4.      *
*       For older system environments use Show629.                    *
*                                                                     *
*       At the object level, SHOWMVS is fully downward-compatible     *
*       and partially up-ward compatible.  This means the following:  *
*       If SHOWMVS has been assembled on an OS/390 system at level n, *
*       it will be fully compatible with any older OS/390 system      *
*       (except the USS Display cause bad info).                      *
*       The same object code, however, will generally execute on      *
*       newer systems, but with reduced functionality.                *
*                                                                     *
*       For example, SHOWMVS assembled on an OS/390 R10 system and    *
*       running on an OS/390 R8 system will produce the same output   *
*       as if it had been assembled on a R8 system.  If the same      *
*       object executes on an z/OS R1 system, however, it will not    *
*       produce the same output as if the same SHOWMVS source had     *
*       been assembled on the R1 system on which it is run.           *
*                                                                     *
*       If you intend to run SHOWMVS on different OS/390 levels,      *
*       make sure you assemble it on the most recent one.             *
*                                                                     *
*       SHOWMVS requires the following levels of the STRING macro:    *
*                                                                     *
*       o  R512 for OS/390 and z/OS                                   *
*                                                                     *
*       SHOWMVS assembled with STRING R509 will not run on MVS/XA.    *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*     Output Modes                                                    *
*                                                                     *
*       SHOWMVS provides six output modes.                            *
*                                                                     *
*       1. BROWSE (using BRIF)                                        *
*                                                                     *
*       This is the default mode when running in ISPF.                *
*                                                                     *
*       2. EDIT (using EDIF)                                          *
*                                                                     *
*       This mode is used when invoked in TSO on-line with ISPF via   *
*       PGM(SHOWMVS) PARM(EDIT) or CMD(SHOWMVS EDIT).                 *
*       Note that EDIT mode is actually VIEW, i.e there is no SAVE    *
*       capability (CREATE and REPLACE can be used to save the data,  *
*       EDIT macros can also be used).                                *
*                                                                     *
*       3. SHORT_PUTLINE
*                                                                     *
*       This is the default mode when running in TSO/E without ISPF.  *
*       In this mode, SHOWMVS clears the screen and produces the      *
*       first two displays (System Level and IPL)                     *
*                                                                     *
*       4. PUTLINE (using PUTLINE)                                    *
*                                                                     *
*       This mode is used under TSO when SHOWMVS is invoked as a      *
*       program with PARM(PUTLINE) or as a command with the PUTLINE   *
*       parameter.  This mode is useful if you want to use the        *
*       OUTTRAP function to process the output of SHOWMVS.            *
*                                                                     *
*       5. HARD-COPY (using QSAM)                                     *
*                                                                     *
*       In Hard-copy mode, SHOWMVS writes the output to a QSAM DCB    *
*       with RECFM=FBA,LRECL=121 instead of displaying it on the      *
*       terminal.  Hard-copy mode is automatically activated in the   *
*       following circumstances:                                      *
*                                                                     *
*         1. SHOWMVS runs outside of the TSO/E environment.           *
*            If no //SHOWMVS DD is present in the JCL, SHOWMVS        *
*            allocates one with SYSOUT=*.                             *
*                                                                     *
*         2. SHOWMVS runs in an on-line TSO/ISPF environment,         *
*            and a //SHOWMVS DD is currently allocated to the         *
*            TSO session.                                             *
*                                                                     *
*       SHOWMVS output is in lower case. If you want to print it      *
*       in upper case, you must invoke SHOWMVS with the CAPS          *
*       parameter.                                                    *
*                                                                     *
*       6. TCPIP mode                                                 *
*                                                                     *
*       At first you may confused with the terms Client/Server.       *
*       ShowMVS running on your HOST is a CLIENT and NOT a Server     *
*       using the TCPIP-terms. This mode can be used under ANY        *
*       environment except CICS/IMS because of the socket-stubs.      *
*       This mode is useful if you want to present the output         *
*       on ANY other platform which support TCPIP. We provide a       *
*       simple C-source for OS/390 and a REXX-Server (SHOWRXSV)       *
*       The C-Source will also work under NT but it's not a part      *
*       of this distribution.                                         *
*       We ara highly interesting for a better server-code            *
*       as SHOWRXSV provide. Maybe also JAVA!!                        *
*       In case of problems to establish a TCPIP-connection, we       *
*       report that situation and switch to the default mode          *
*       (e.g. BRIF if TSO)                                            *
*                                                                     *
*       Specify PARM(TCP=10.1.1.1:8000) or parameter TCP=10.1.1.1:8000*
*       if you want to route the output to a server running on the    *
*       the given IP-Address and port                                 *
*                                                                     *
*    Dynamic Displays                                                 *
*                                                                     *
*       When MODE=BRIF is used, some of the displays produced by      *
*       SHOWMVS are dynamic, i.e. they are refreshed each time the    *
*       user hits the ENTER key or enters any of the scroll commands. *
*       The dynamic displays are:                                     *
*                                                                     *
*       o  GTF Status                                                 *
*       o  JES2 Initiators                                            *
*       o  On-line devices                                            *
*       o  CPU Time Used                                              *
*       o  Virtual Storage Usage                                      *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    Assembly/link-edit information:                                  *
*                                                                     *
*         Environment:          OS/390 R1 thru z/OS any release       *
*         Processor:            HLASM                                 *
*         Non-IBM macro used:   STRING                                *
*         AMODE:                31                                    *
*         RMODE:                ANY                                   *
*         LKED Attributes:      RENT                                  *
*         Size of load-module:  aprox 120K                            *
*         Authorization:        None required (see below)             *
*         Memory requirement:   A lot but never seen a problem        *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    AUTHORIZED FUNCTIONS                                             *
*                                                                     *
*      The following displays are only produced if SHOWMVS is         *
*      authorized:                                                    *
*      o  Last CLPA                                                   *
*      o  VM Host                                                     *
*      o  WLM                                                         *
*      o  DUMP Title                                                  *
*      o  Automatic Dump Data sets                                    *
*      o  DAE                                                         *
*      o  Primary Sub-system                                          *
*      o  TCAS                                                        *
*      o  LLA                                                         *
*      o  LXinfo                                                      *
*      o  AXinfo                                                      *
*      o  XMS                                                         *
*      o  PPT                                                         *
*      o  XCF                                                         *
*      o  Dynamic Exits                                               *
*      o  EMCS-Consoles                                               *
*      o  MDQ                                                         *
*      o  LOGGER                                                      *
*                                                                     *
*      Whether SHOWMVS is authorized or not depends on how it has     *
*      been installed and in which environment it executes.           *
*                                                                     *
*      1. If SHOWMVS runs as an APF-authorized job step (authorized   *
*         library and AC=1), then it is authorized.                   *
*                                                                     *
*      2. If SHOWMVS is defined as an authorized TSO/E command or     *
*         program (e.g. in IKJTSOxx) and is invoked as such in a      *
*         batch or on-line TSO/E environment, then it is authorized.  *
*         Note that ISPF services are not available to authorized     *
*         TSO/E commands.                                             *
*                                                                     *
*      3. SHOWMVS is link-edited in such a way that it can take       *
*         advantage of the SDSF SVC.  All of the following condi-     *
*         tions must be met:                                          *
*                                                                     *
*         o The load-library is APF-authorized                        *
*                                                                     *
*         o The name of the load-module starts with "ISF"             *
*           (if you want to invoke it under the name "SHOWMVS",       *
*           define it as an alias)                                    *
*                                                                     *
*         o The load-module is marked RENT                            *
*                                                                     *
*         o SDSF V1R3, V1R4 or V1R5 is installed on the system        *
*                                                                     *
*         o You need to excplicit specify the <lib> on your TSO       *
*           CALL command even this <lib> can be accessed via          *
*           regular ISPF/TSO search features                          *
*                                                                     *
*         In this case, and in this case only, will SHOWMVS be        *
*         able to invoke BRIF (or EDIF) and access authorized         *
*         functions at the same time.                                 *
*                                                                     *
*    Note on SDSF V1R6:                                               *
*                                                                     *
*      Starting with HQX1600, the SDSF SVC checks the full name of    *
*      the invoker which *must* be ISFINIT; previous versions only    *
*      check the first three characters of the name.                  *
*                                                                     *
*      To use the SDSF V1R6 SVC with SHOWMVS, do as follows:          *
*                                                                     *
*      1. link SHOWMVS into an APF-authorized library under the       *
*         name ISFINIT; do not define SHOWMVS as an alias.            *
*                                                                     *
*      2. create a CLIST (or REXX EXEC) called SHOWMVS:               *
*                                                                     *
*           CALL '-dsname-(ISFINIT)'                                  *
*                                                                     *
*      3. invoke SHOWMVS by typing  TSO %SHOWMVS                      *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    How to invoke ShowMvs?                                           *
*                                                                     *
*    There are several ways to run ShowMVS, in batch, in batch and    *
*    foreground TSO, in ISPF, authorised via APF, the SDSF SVC,       *
*    IGX00GSF, or unauthorised.                                       *
*                                                                     *
*    This keeps confusing many people, including, as recently as      *
*    last night,both Roland Schiradin (the lead developer) and        *
*    myself.  Running ShowMVS authorised is optional but it is        *
*    required when data has to be retrieved from certain fetch-       *
*    protected areas, or via authorised services, or from             *
*    other address-spaces, as is the case with JES2's start-up JCL.   *
*                                                                     *
*    1. You can run ShowMVS in batch, as Mark said, just with         *
*                                                                     *
*      //SHOWMVS EXEC PGM=SHOWMVS                                     *
*      //SHOWMVS DD SYSOUT=*                                          *
*                                                                     *
*    If you need the displays that require authorisation, make        *
*    sure you execute SHOWMVS off of an APF-authorised library        *
*    and that the load-module (which can have any name you want)      *
*    was link-edited with AC=1.  BTW, the SHOWMVS DD is optional;     *
*    if you don't provide one, the program allocates it to            *
*    SYSOUT=*.                                                        *
*                                                                     *
*    2. You can run ShowMVS in TSO batch, just with:                  *
*                                                                     *
*      //SHOWMVS EXEC PGM=IKJEFT01                                    *
*       /SYSTSPRT DD SYSOUT=*                                         *
*      //SYSTSIN DD *                                                 *
*      SHOWMVS PUTLINE                                                *
*                                                                     *
*    The PUTLINE operand is required to obtain the full display;      *
*    if you omit PUTLINE (or specify the SHORT_PUTLINE option),       *
*    ShowMVS only produces the first two sections of the display      *
*    (20 lines or so).   If you need any of the displays that         *
*    require authorisation, add SHOWMVS to the AUTHCMD                *
*    section of your IKJTSOxx member in SYS1.PARMLIB.                 *
*                                                                     *
*    When run in batch TSO, ShowMVS writes its output to the          *
*    SYSTSPRT DD using the PUTLINE macro, or to the SHOWMVS DD        *
*    if present.  The format of the output is different between       *
*    the two: on the SHOWMVS DD output, blank lines are inserted      *
*    to improve readability; on SYSTSPRT, there are no blank          *
*    lines.                                                           *
*                                                                     *
*    You can also invoke ShowMVS via the CALL command, and add        *
*    SHOWMVS to the AUTHPGM section of IKJTSOxx to obtain the         *
*    authorised displays.  To obtain the full display, specify        *
*    the PARM as 'PUTLINE' in the CALL command. e.g.                  *
*    CALL lib(SHOWMVS) 'PUTLINE'.                                     *
*                                                                     *
*    3. You can also run ShowMVS in ISPF, in which case the           *
*    output is, by default, presented using BRIF which allows         *
*    you to scroll back and forth and issue FIND commands.            *
*    If you invoke SHOWMVS as a TSO command with the EDIT             *
*    parameter (e.g. TSO SHOWMVS EDIT), then the output is            *
*    presented using EDIF, allowing you to EDIT the report and        *
*    issue commands or run macros agains it.                          *
*                                                                     *
*    If you invoke ShowMVS in the ISPF environment with the           *
*    SHORT_PUTLINE or PUTLINE option, then ShowMVS uses the           *
*    PUTLINE macro (instead of BRIF) to display its output in         *
*    line mode.  You can trap its output using the TSOFS              *
*    function of the FASTPATH utility or one of the numerous          *
*    CLISTs or REXX execs provided on the CBT tape that use           *
*    OUTTRAP to provide a similar service.  If FASTPATH is            *
*    installed, for example, you can set up a function key to         *
*    TSOFS SHOWMVS SHORT_PUTLINE for a quick display of the system    *
*    level and IPL date.                                              *
*                                                                     *
*    To obtain the authorised displays under ISPF, you can add        *
*    ShowMVS to IKJTSOxx and run it off of an APF-authorised          *
*    library; this, unfortunately, leads ShowMVS to think that        *
*    it's NOT running under ISPF and it defaults to SHORT_PUTLINE     *
*    which produces the first two sections of its normal output       *
*    in line mode.  To obtain a full display (that can be OUTTRAP'd), *
*    specify the PUTLINE parameter, e.g. TSO SHOWMVS PUTLINE or CALL  *
*    lib(SHOWMVS) 'PUTLINE'.                                          *
*                                                                     *
*    Authorising ShowMVS using IKJTSOxx and, at the same time, using  *
*    OUTTRAP to enable BROWSE, EDIT or VIEW prevents you from taking  *
*    advantage of two ShowMVS features: multi-tasking, which speeds   *
*    up the display of the first screen, and dynamic update, which    *
*    refreshes certain sections of the display each time you hit ENTER*
*    To have the best of both worlds (i.e. authorised displays AND    *
*    dynamic updates), then you have to use an extended SVC routine   *
*    (ESR) to authorise ShowMVS.                                      *
*                                                                     *
*    ShowMVS is designed to look for (and use, if present) two        *
*    different type-3 ESRs: the SDSF SVC (ISFSVC or IGX00011)         *
*    or IGX00GSF, which is supplied in file 183 of the CBT tape.      *
*    To take advantage of the SDSF SVC (which is readily available    *
*    on the majority of the OS/390 systems), ShowMVS must be link-    *
*    edited under the name ISFINIT and, of course, be marked RENT and *
*    executed out of an APF-authorised library.  Calling the module   *
*    ISFINIT may conflict with SDSF's own ISFINIT module, although    *
*    on an R10 system, having ShowMVS under the name ISFINIT in an    *
*    authorised STEPLIB or TSOLIB doesn't seem to affect SDSF at all. *
*                                                                     *
*    If you don't have SDSF on your system, or are worried about      *
*    linking ShowMVS under the name ISFINIT, you can install the      *
*    IGX00GSF Type-3 ESR, which requires an IPL or a dynamic SVC      *
*    update capability.  After ShowMVS is link-edited into an         *
*    APF-authorised library with the RENT attribute, you should       *
*    be able to invoke it under ISPF and obtain the authorised        *
*    displays via BRIF or EDIF.                                       *
*                                                                     *
*    If both the ISFSVC and IGX00GSF are installed, ShowMVS only      *
*    uses the first one, i.e. the one with the lowest ESR number.     *
*    For example if IGX00GSF is installed under the name IGX00000     *
*    (i.e. type-3 ESR 0, which is the default for IGX00GSF) and the   *
*    SDSF SVC is installed as IGX00011, then ShowMVS uses IGX00GSF    *
*    (i.e. IGX00000) and ignores the SDSF SVC.  If IGX00GSF is        *
*    installed as IGX00015 and the SDSF SVC is also installed,        *
*    then the SDSF SVC is used and IGX00015 is ignored.               *
*                                                                     *
*    Applications such as SDSF which run authorised within ISPF       *
*    execute in a hostile environment and have to be designed         *
*    to prevent the integrity of the system from being compromised.   *
*    When authorised via an ESR, ShowMVS uses key=4 work areas and    *
*    large quantity of SYNCH RESTORE=YES macros and BAKR/PR           *
*    instructions to prevent hi-jacking of its authorised status.     *
*    How air-tight the code really is, I'm not 100% sure, and if you're
*    security-conscious, stick to the IKJTSOxx method.                *
*                                                                     *
*                                                                     *
*    Gilbert posted this doc in ng IBM-Main (03/25/01)                *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    Undocumented Interfaces                                          *
*                                                                     *
*    As SHOWMVS is enhanced to support additional functions,          *
*    it uses an increasing number of undocumented interfaces          *
*    and control blocks, many of them OCO.  This is required          *
*    to provide full support for recently introduced features,        *
*    such as Dynamic UCBs, CDE Extension, TSO/E tables, etc.          *
*                                                                     *
*    Besides the initial difficulty to understand them, which in      *
*    itself can be a source of problems, the format, contents, or     *
*    chaining method of undocumented control blocks may change in     *
*    future releases (or when PTFs are applied) and erroneous         *
*    results may occur (S0C4 is the most likely symptom).             *
*                                                                     *
***********************************************************************
&REL      SETC 'R710'                  Release number            RS0704
&NUMLINES SETA 60000                   Max number of lines       RS0302
&LINESIZE SETA 125                     Max line width              JM
&LINESPPG SETA 60                      Lines per Page            DL1199
&TITLEPFX SETC '>'            Prefix for section title           RS0803
*
*$710
*     Implement enhancements contributed by Roland Schiradin
*       TCTDCTR last DD is always EXCP=0 (G. Saint-Flour)        GS1104
*       Macro SYS1.MODGEN(IHASCA) gone in z/OS R5 (Shane Ginnane)SJG704
*       Bug fix using VLDSYSOF                                   RS1004
*       VSMLIST area again to small                              RS1004
*$709
*     Implement enhancements contributed by Roland Schiradin
*       Change BRASL to BAS                                      RS0704
*       Subpool usage display miss some data (area to small)     RS0704
*$708
*     Implement enhancements contributed by Andreas Freybier
*       Save some literals (several locations)                   AF0404
*     Implement enhancements contributed by GSF
*       Deliver new STRING R512 (required)                       SF0903
*     Implement enhancements contributed by Roland Schiradin
*       z/OS R3 changed the SYS1.PLPA layout (all OCO)           RS0404
*       Bug fix beta 708 (Tnx Sam Golob)                         RS0404
*       Support for GRS RNLDEF TYPE(PATTERN) z/OS R2             RS0404
*       Tested with z/OS R5 maclib/modgen                        RS0204
*       Display AMDPIOXT for PATHIN                              RS0204
*       Add minimal support for z/OS R5 (HBB7708)                RS1103
*       Avoid BRAS in SNAP00                                     RS0903
*       New Display for HFS filesystem info (confighfs)          RS0903
*          Require GFUMPCTL in SYS1.MODGEN !!! If this doesn't   RS0903
*          exist please check APAR OW55760/OW47836               RS0903
*          Require z/OS R4 and ARCHLVL=2                         RS0903
*       Support for new GDA fields (OS/390 R10)                  RS0903
*$707
*     Implement enhancements contributed by MK                   MK0803
*       Added routine AUTHLVL to display if ShowMvs is running   MK0803
*       authorized or not                                        MK0803
*     Implement enhancements contributed by Roland Schiradin
*       I'm reaching more and more the limits so I have to       RS0703
*          redesign the code. Not sure if my time allow such     RS0703
*          rewrote at all.                                       RS0703
*       PAGE-SYS display is limited added to my Todo list        RS0803
*       Avoid AbendS0D5 because no IXGLOGR active                RS0803
*       Display time in Section IPL-Statistics                   RS0803
*       CPMF display (OS 390 R10 and z/OS R2)                    RS0803
*       Added a '>' in front of section title. This allow a      RS0803
*          find '>' 1 when browsing the output under ISPF        RS0803
*          If you don't like it please change &TITLEPFX to ' '   RS0803
*       OW57714 changed IOSDSHID which caused duplicates         RS0803
*       For OS/390 R8 and below: I assume OW37043 is applied     RS0803
*       (no more bypass for this)                                RS0803
*       Support channel/status for Coupling facility display     RS0803
*          Notify from TA (z/OS R2)                              RS0803
*       Bug fix in the ICSF/MVS if not installed/enabled         RS0803
*       Support for F CATALOG,REPORT (auth) OS/390 R10           RS0803
*       Support for AUTHPGMLIST (USS) and some minor changes     RS0803
*       Minor changes in CSM (macro IVTDATSP)                    RS0703
*          DATSP_SLEN contains the length of all entries and     RS0703
*          not of single entry (doc is a bit confusing)          RS0703
*       Minor changes in ETEINFO                                 RS0703
*       SPQX (OS/390 R10) along with TCBWSA and TCBUKYSP         RS0703
*          Notify from Rob Scott (MXI) Thanks                    RS0703
*       Moved the HWM for CSA/ECSA/SQA/ESQA as a VMAP column     RS0603
*          because of Mark Zelden IPLINFO and it looks better    RS0603
*       Display the source of IPA settings                       RS0603
*       Display Subpool-Usage (VSMLIST)                          RS0303
*       Display Control Register                                 RS0203
*       Count PAGE-DS (total/used) and SYSEVENT FREEAUX to       RS0203
*         display number of free slots                           RS0203
*       Fixed abend S206 running on z/OS R2 with DIAG TRAPS      RS0203
*       Count number of CADS and total MAXCAD in the dataspace   RS0203
*       I assume OW42971 is applied on all systems (mac ANTRQST) RS0203
*       Jerry Morris retired                                     RS0103
*         All the best to him. I'll miss him                     RS0103
*       If you seen CSV003I with an address as a name you        RS0103
*         linked ShowMvs with NORENT. ShowMvs is RENT            RS0103
*       Droped OpenMvs-Status add LPAR and SYSNAME               RS0103
*       Garbage in the USS PID display                           RS0103
*       Merged 706 bug fixes                                     RS0103
*       New display for CSFDACC (z/OS R4 and ARCHLVL=2)          RS0103
*         Works on z/OS R2 but require OW51003 applied           RS0103
*       CSFDACC (HBB7704) cause RC8 (APAR OA01618)               RS0103
*$706
*     Implement enhancements contributed by Jerry Morris
*       Exit-Status (Dynamic Exits)                              JM1202
*     Implement enhancements contributed by Roland Schiradin
*       ICHPCNST require RACF FMID installed. IRRPCNST used      RS1202
*       New display for WLM Activity (IWMRQRY) OS/390 R4         RS1202
*         Include a display for enclaves                         RS1002
*       Fixed bug running ShowMvs under OS/390 R9 without        RS1202
*         SYSSTATE ARCHLVL=1. Changed BRAS R14,STCKCONV to       RS1202
*         BAS R14,STCKCONV at some location                      RS1202
*       Fixed bug BEGIN_PROC if far offset contains a value      RS1202
*         > 32767 now it's handled unsigned                      RS1202
*       Small bug at label WLM078 display the duration           RS1002
*         (tnx Jim Connelly)                                     RS1002
*       Unlimit display for connected RACF groups                RS1002
*       New LOGGER display (OS/390 R10) Version1                 RS1002
*          The display may work on older versions but not tested RS1002
*          You may lower AIF/TM limit and post the results       RS1002
*       Basic support to display SMS optical drives (Sugliani)   RS1002
*       Support MEMLIMIT (z/OS R2 and ARCHLVL=2)                 RS1002
*          Just two instruction but a bunch of code to do this   RS0902
*          without z/Architecture                                RS0902
*       Fixed bug in the SMS display which leave the SMS display RS1002
*          to early (Bruno Sugliani)                             RS0902
*       Changed ATTACH to ATTACHX as ATTACHX will be invoked     RS0902
*          on z/OS R4 if runing in z/Architectur                 RS0902
*       Support for MSU (PSLC pricing) display                   RS1002
*          SYSEVENT QVS (z/OS R1)                                RS1002
*       Support for SYSEVENT STGTEST (Virtual Storage Effects)   RS1002
*          Will be updated dynamicly in browse mode              RS1002
*       Changed SYNCH to SYNCHX as SYNCHX will be invoked        RS0902
*          on z/OS R4 if runing in z/Architectur                 RS0902
*       Avoid ASMA045W after base-less                           RS0902
*       Save some bytes in the literal pool R11/RB               RS0902
*       Tested with SYSSTATE ARCHLVL=1 (except STORAGE_SP230)    RS0902
*          The following macros generate NON-ARCHLVL=1 code      RS0902
*          on z/OS R4 if invoked with ARCHLVL=1                  RS0902
*          Not delivered as this require OS/390 R10+             RS0902
*              LOAD with option ERRRET (fixed in z/OS R5?)       RS0902
*              FREEPOOL                                          RS0902
*              IARR2V                                            RS0902
*              IEFSSREQ                                          RS0902
*              ANTRQST                                           RS0902
*              IVTCSM                                            RS0902
*              PGSER                                             RS0902
*              IWMPQRY                                           RS0902
*              ATRQUERY                                          RS0902
*              SYSEVENT                                          RS0902
*              NUCLKUP                                           RS0902
*              EZASMI (TCP/IP)                                   RS0902
*              CEEENTRY (LE)                                     RS0902
*              STRING (Internal)                                 RS0902
*       Display SCOPE=COMMON for dataspaces (Rob Scott)          RS0902
*       New DIAG display (z/OS R3) (Jim Mulder)                  RS0902
*       Avoid LogRec entries for SMS IEFSSREQ                    RS0902
*          Redesign of this code to let SMS do the getmains      RS0902
*          and just freemain the returned area                   RS0902
*       Support new MDQ layout z/OS R3                           RS0902
*       Support for new SMS info (destinations)                  RS0902
*          Unfortunally I don't have such entries, so please     RS0902
*          contact me if you get a #SNAP display in ShowMvs      RS0902
*$705
*     Implement enhancements contributed by Jerry Morris
*       Display SMF Subparms                                     JM1101
*       Add display for ADD/OVER mode in dump options            JM1101
*       Add display for MPF numbers (specific/generic)           JM0302
*       Display the execution mode (31 or 64bit)                 JM0702
*     Implement enhancements contributed by Roland Schiradin
*       Support for DSAB above the line z/OS R2                  RS0802
*       Add minimal support for z/OS R4 (HBB7707)                RS0602
*       Add CPU model, newer CPUs (2064) support CSRSI and will  RS0602
*       not added to the interal table                           RS0602
*       Changes in the Run-Time display (tnx Mr. Tschikart)      RS0502
*       Use VLDSTSMS instead of VLDSMSS                          RS0502
*          VLDSYSDT provide support for 256 systems. Look at     RS0502
*          SYS1.MODGEN(IGDVLD) for more info                     RS0502
*       New display Common Storage Usage                         RS0502
*       Int. macro Validate supports now "base-less"             RS0402
*          79 of possible 110 sections works without a base      RS0402
*          register.                                             RS0402
*       Display dynamic SLIP settings (SLIP SET command)         RS0402
*       Wrong jump in CATALOG Display (tnx Marcel Schmidt)       RS0402
*       Wrong display for Timezone if CVTLDTO is zero            RS0402
*       Check MQCTT57I/MQCTT58I for spaces                       RS0302
*       Suport for sections without a base register              RS0302
*          50 of possible 110 sections works without a base      RS0302
*          register.                                             RS0302
*       Tested with SYSSTATE ARCHLVL=1 and IEABRC but not        RS0302
*          delivered. Reason: IEABRC is not included in all      RS0302
*          OS/390 releases. IBM didn't allow to distribute       RS0302
*          IEABRC in the SHOWMACS.                               RS0302
*       Delete R&I display as ShowMvs require R&I                RS0302
*       Change code to use R&I if possible                       RS0302
*       Display more info about RACF                             RS0302
*          Most code based on RACFINFO from Tobias Doerkens      RS0302
*          I'm not a RACF person. Tnx David Alcock pointing      RS0302
*          me to RACFINFO. This code will not work for ACF2/TSS  RS0302
*          Droped support for pre RACF 2.1 code                  RS0302
*       Abend0C4 in MDQ display if MDQ is empty                  RS0302
*$704
*     Implement enhancements contributed by Jerry Morris
*       Note in the DAE display changed                          RS0302
*     Implement enhancements contributed by Roland Schiradin
*       Subpool-No decimal for JPAQ, LOAD LIST, Active LPA       RS0302
*       Add Amode display for JPAQ,LOAD LIST, Active LPA         RS0302
*       Support for changed macros                               RS0302
*          Add flag for CDATTR3 (OS/390 R9)                      RS0302
*          Bug in BAL output for IHALPDE (z/OS R3)               RS0302
*            Apply ptf for APAR OW53691 or change IHALPDE        RS0302
*       Merge old code to support a TCP/IP display               RS0302
*          ShowMvs is a client in terms of TCP/IP. This mean     RS0302
*          it connects to a port (server) and send the complete  RS0302
*          output to this listener (server) running on any       RS0302
*          platform.                                             RS0302
*          I provide a C prog (same source for OS/390 and        RS0302
*          Windows) and a Rexx-source to retrieve all the data   RS0302
*          from ShowMvs. Sorry but this can't be used under CICS.RS0302
*          In order to tell ShowMvs you need to specify a PARM   RS0302
*          like TCP=148.251.1.2:8000. While 148.251.1.2 specify  RS0302
*          the ip-address of the listener (server) and 8000 the  RS0302
*          port assigned for this listener.                      RS0302
*          In case of problems to connect to the given server    RS0302
*          ShowMvs switch to default mode depending              RS0302
*          on the current environment                            RS0302
*       Couple display in IHAIPA is wrong (parenthesis)          RS0302
*          It's a an IBM problem but it's not a defect because   RS0302
*          Couple doesn't allow parenthesis even it works        RS0302
*          New IPADESC for IKJTSO and LICENSE (z/OS R3)          RS0302
*       Support new USS options starting with OS/390 R10         RS0302
*       Changed &NUMLINES from 24000 to 60000                    RS0302
*          ShowMvs require now about 7 MB to buffer the output   RS0302
*       Support for DFAZOS (IHADFA) starting with z/OS R3        RS0302
*          Redesign for this section is on the ToDo list         RS0302
*          HDZ11G0 flag added                                    RS0302
*       VTS flag for tape devices (tnx Bruce Black)              RS0302
*       On z/OS R3 use IHAETE1 instead of IHAETEX                RS0302
*       In few cases the thread display (USS) miss some threads  RS0302
*       (APAR OW53233)                                           RS0302
*$703
*     Implement enhancements contributed by Jerry Morris
*       Correct code to display Dump-Option GRSQ                 JM1101
*       Avoid loop in the hardware display (V702)                JM0701
*         Fixed bug and the loop                                 RS1101
*     Implement enhancements contributed by David Alcock
*       Display LE-Version. Make sure you add CEE.SCEEMAC        DA0701
*         on your SYSLIB and CEE.SCEELKED on your Binder-JCL     DA0701
*         If missed no problem just no display                   DA0701
*         During runtime the SCEERUN should be linklisted or     DA0701
*         added to STEPLIB/JOBLIB                                DA0701
*     Implement enhancements contributed by Roland Schiradin
*       IPL-Statistic moved to another place                     RS0202
*       No LE level for OS/390 R5 and lower                      RS0202
*       Remove garbage (unprintable) in the ISPF display         RS0102
*       DSNALI no longer work with MQS V5R2 (ABEND0C4)           RS0102
*       Add minimal support for z/OS R3 (HBB7706)                RS0102
*         ASMSART no longer exist                                RS0102
*         ShowMvs run fine with z/OS R3 MACLIB/MODGEN except     RS0102
*         IHARTSD (APAR OW51976)                                 RS0102
*       Abend0C1 in the CSRSI code (OW44581+OW46242)             RS0102
*       Fixed bug in CF display (ABEND0C4 if RSN x'154' and      RS1201
*         other minor changes in this area)                      RS1201
*       DAE display was wrong in case of DAE sharing             RS1201
*       Abend0C4 (Debug-code was delivered, sorry my fault)      RS1101
*       Add display for CVTLSO (Leap Seconds)                    RS1101
*       Use CVTLDTO instead of old CVTTZ for timezone stuff      RS1101
*         (CVTTZ technique is 10 years out of date)              RS1101
*       Capture UCB if PAREUCBP contains an UCB above            RS1101
*       Report GDA HWM values under R10 (tnx Jim Mulder)         RS1101
*       IPA display include now MTLSHARE                         RS1101
*       IHARTSD (HBB7705) cause RC8 (see APAR OW51976)           RS1101
*       Report class in the WLM display was wrong (tnx Tim D.)   RS1001
*       Add display for global DeServ-Exits (tnx Greg Price)     RS1001
*       Fixed abend S46D and S0C4 reporting the LE-Version       RS1001
*       Fixed a bug reporting the timestamps of the USS-Display  RS1001
*       Changed the ASID-display to hex in the USS display       RS1001
*       Fixed a bug reporting the real version of DB2 and MQS    RS0701
*         Add SDSNLOAD to STEPLIB/JOBLIB for this display        RS0701
*       Add minimal support for z/OS R2 (HBB7705)                RS0701
*       Use CVTOSLV3 for level check of z/OS R1                  RS0701
*       USS display: All timer display are UTC based             RS0701
*         Support for local time is not planed, because          RS0701
*         I have to call GMTIME which is difficult               RS0701
*       USS display: Add a IPC (Interprocess Cmmunication)       RS0701
*         display                                                RS0701
*       Some minor changes to suport the web display from        RS0701
*       FILE#509. Try it yourself.                               RS0701
*       Add a dummy macro CVT to detect wrong SYSLIB concat      RS0701
*       Catalog cache Report (F CATALOG,REPORT,CACHE) R1         RS0701
*          lost the alphabetic order, now same as F CATALOG      RS0701
*$702
*     Implement enhancements contributed by John Hamlet
*       Support for MQ Series V5R2 (product code)                JH0501
*     Implement enhancements contributed by Roland Schiradin
*       Program Call usage (ETEINFO) R1                          RS0601
*          use IHAETEX in case of ESAME                          RS0601
*       New IPADESC for UNIP (R10) ILMLIB+ILMMODE (z/OS R1)      RS0601
*       Memory Delete Queue (MDQINFO) OS/390 R3                  RS0601
*       Avoid some EREP entries (not all) for SMS-display        RS0601
*       Correct display for ARCHLVL (my fault)                   RS0601
*       ATS flag (auto-switchable) tnx Mr. Jaffe, IDAW flag      RS0601
*       USS Thread display if R7 and higher                      RS0601
*       IPL Statistics (R3)                                      RS0601
*       TCPIP version no longer require macro EZASMI (native     RS0601
*       mode using cblocks) but leave EZASMI inside the prog     RS0601
*       because it will be required if my NT-Display is finished RS0601
*       More usage of AHI/LHI                                    RS0601
*$701
*     Implement enhancements contributed by Roland Schiradin
*       Name/Token bug                                           RS0401
*       Display GRS Mode STAR if present                         RS0401
*       USS changes for R10/R9                                   RS0401
*       EMCS-Console Display                                     RS0301
*       IOSCMXA contains bad parameters RETCODE/RSNCODE          RS0301
*         if invoked by UCB220 as R13 is bad                     RS0301
*       **** ATTENTION ******                                    RS0301
*       ShowMvs support OS/390 and z/OS ONLY, use Show628        RS0301
*       and ShowM628 (maclib for this version) for older         RS0301
*       releases                                                 RS0301
*       **** ATTENTION ******                                    RS0301
*       Catalog display contains now ECS and Locked flag         RS0301
*       Dump-Display: Add support for 4digit devices             RS0201
*          Default is 3digit's only                              RS0201
*          Avoid EXCP for compressed and PS-E datasets           RS0201
*       IVTCSM REQUEST=DUMP_INFO can return null Dataspaces      RS0101
*         This cause a loop. Happen if VTAM/TCPIP is not up      RS0101
*       IPA display include now Architecure level                RS0101
*       SRM MIPS display was wrong (R6 corrupted by CSRSI code)  RS0101
*       Some bug fixes or typo error                             RS0101
*       The GDA-address was wrong, used CVTDFA instead of CVTGDA RS0101
*$627
*     Implement enhancements contributed by Roland Schiradin
*       IXCMG require a fixed area even of DONTSWAP              RS1200
*         This happen on very large systems only                 RS1200
*         (thank you Dean for helping in this area)              RS1200
*       Avoid abend0C4 on HSM-MWE (no dump so no idea)           RS1200
*       Update documentation, looking for help in TCPIP-stuff    RS1200
*       Increase the "getmain" storage in sub-routine WORKADDR   RS1200
*         This has to be done because IXCMG returns RC8 RSN24    RS1200
*         Checked a larger area for access then the returned areaRS1200
*         Also fixed an old bug reported since 625               RS1200
*       Fix a bug reporting the PSA+System values (REAL=0)       RS1200
*       Fix a bug reporting the SMS release on OS/390 R10        RS1100
*       Support for big Real-Storage introduced with Freeway     RS1100
*         (thank you Mr. NN for your support)                    RS1100
*       Support for the new STSI instruction via CSRSI service   RS1000
*       Add new entries (CPU table)                              RS1000
*       Add new switch for z/OS                                  RS1000
*       Some bug fixes or typo error                             RS1000
*$626
*     Implement enhancements contributed by Dietmar Ley
*       Enhancements to system level name/token pair
*       Fixed a bug in CF which avoid to display any info
*     Implement enhancements contributed by Jerry Morris
*       Fixed S0C4 in the XMS display                            JM1000
*       Some bug fixes after the latest big public release       JM0900
*       Support for additional WLM attributes
*       ICSF Display (Crypto)
*       Avoid to cut some SMF record nummbers
*       Fixed bad RRS SSI-Request 54 data
*       CHPID and Path display
*       System Availability Manager status
*       SLIP data
*       Changed CPU-Weightings Display for more CPUs
*       Support for high number of SMF-Type
*       Subsystem-Display hex
*       Some bug fixes
*     Implement enhancements contributed by Roland Schiradin
*       &NUMLINES 16000 is to low for very big systems (high number
*       XMS-connection and a lot of DASD)
*       Add minimal support for 64-Bit
*       Add new info for USS settings (OS/390 R8)
*       Add ADMF (Async Data Mover) status (Auth)
*       Add new info for USS files systems (OS/390 R9)
*       Add minimal support for OS/390 R10 (HBB7703)
*       SDM (System Data Mover) level
*       Cross Memory Usage Display (auth)
*       Dataspace/Hiperspace Display (auth)
*       AXINFO (auth)
*       Make ShowMvs 626 happy with older releases starting XA 2.2
*       HSM info (non Auth) and HSM active work (Auth)
*       Fixed bad WLM display
*       Communication Storage Manager Display (Auth)
*       Retrieve DS-Name from dynamic activated Linklist instead
*       of the CSVLLTA
*       Support for SMS vector table
*       Support for SVCUpdate
*       Expanded Catalog-Display
*       Avoid garbage characters on some Display
*       UNIX System Service (OMVS) Display
*       Display all OMVS users (STC,TSO,JOB) "USS users:"
*       ShowMvs itself can be assembled with HLASM R3 FLAG(PAGE0)
*       EDCMSGT C-runtime is now called IEDCMSGT
*       Save some bytes in the DYNAM Dsect
*       Add new product code for MQ Series V2
*       SMS info
*       TCPIP version and used stacks (>=V3.2, EZASMI-Macro required)
*       GRS resource (RNL-entries)
*       SMS attributes for LNK/LPA DSN
*       Display Path instead of DSNAME if HFS
*
*$624 Add minimal support for OS/390 R7 & R8
*     Add support for dynamic link-list in DOBLDL
*     ShowMVS now requires STRING R507
*$623 Add EXTRN OPSYN WXTRN for ILRASMVT in OS/390 V2R6
*     IHALLCB, IRAWMST and ISGGVT now supplied in MACLIB/MODGEN
*     Name of PVTMACS macro library changed to SHOWMVS.MACLIB
*     Calculate MIPS rating from SRM's SU/sec factor
*     Implement enhancements contributed by JWM:
*       Path Information
*       External Time Reference (ETR)
*     Implement enhancements contributed by DL:
*       Coupling Facility Data                                     $DL
*$622 Check for empty tables in IKJTSOnn
*     Display JESDSNID from JESCT extension                       @DMT
*     Show SMS volume status on current system                     @TR
*     Display TOKEN information for the current IODF              @JWM
*     Correct number of link-list extents
*     Retrieve ACF2 release from ACCVT (instead of ACF2RLSE)
*     Implement enhancements contributed by RS:
*       Run-time Library Services (RTLS)                           $RS
*       Resource Recovery Manager (RRS)                            $RS
*       Automatic Restart Manager (ARM)                            $RS
*$621 Major Changes
*       More support for OS/390 R4
*       Display IPL type: Cold, Quick, Warm
*       Change V=V Region display, support VRREGN=0
*       Detect the Relative-and-Immediate instruction set
*       Prevent CSV003I REQUESTED MODULE HASMPIT  NOT FOUND
*       List modules on the Dynamic LPA Queue
*$620 Major Changes
*       More support for OS/390 R3
*     Implement enhancements contributed by RS
*       Name/Token (System and Address-space)                      $RS
*       Added subpool defintion and attributes                     $RS
*       Cell Pools (Global and Local)                              $RS
*       Enhanced SVC-Table Display                                 $RS
*       Product Registration info in table format                  $RS
*       Added CDATTR3 for LPA/JPAQ/TCB                             $RS
*     Implement enhancements contributed by JWM
*       LNKLST set information (OS/390 R3)                        @JWM
*       Work Load Manager definitions                             @JWM
*$619 Major Changes
*       Initialization Parameter Area (OS/390 R2)
*       Product Enable/Disable (OS/390 R1)
*       Resource Manager List (IEAVTRML)
*       Display ranges in SMF NOTYPE, SSI codes, ROUTCDE
*     Implement enhancements contributed by RS                     @RS
*       Sysplex-Environment (auth)                                 @RS
*       Enhanced Command Prefix Table (CPFT)                       @RS
*       TCP/IP Version                                             @RS
*     Miscellaneous enhancements:
*       Check for dummy RDS (lost SMF data)
*       Fix ddname identification error in RTE display
*       Fix GETUNIT5 code to support UCBs above the 16M line
*       SSCT for primary sub-system doesn't have to be first
*$618 Major Changes
*       Move in-line DSECTs to the PVTMACS library
*       SHOWMVS must now be assembled with the PVTMACS library
*       Use IGX00GSF for authorization when available
*     Implement enhancements contributed by DL
*       SYS1.DUMP Support for dynamic allocation
*       WLM Workload Manager information (auth)
*       DYNEXIT Dynamic Exit Facility information (auth)
*       SYMBOLS Show static symbols
*     New Displays:
*       Run-time Environments (Cobol, PL/I, LE, etc)
*       Primary Sub-system
*       Date and time of last CLPA if IPL'd with CLPA=NO
*       Date, time and title of SYS1.DUMP data sets
*       TSO Exits and Tables
*       Device Allocation Defaults (ALLOCxx)
*       DAE Parameters (ADYSETxx)
*       Message Processing Facility (MPF)
*       Command Prefix Table (CPFT)
*     Miscellaneous enhancements:
*       Restructure the initialization code to improve robustness
*       Show dates in ISO-recommended format (yyyy-mm-dd)
*       Reactivate AUTH=ESR support for MVS/XA and REXX
*       VMDATA now shows correct CPU id (wrong addr in DIAG 218)
*       Version codes for more AMDAHL CPUs
*       Adjust size of IGDBCD if SSSA1RSN=5001
*       Issue DIAG 204 to obtain PR/SM Config data if RMF not available
*       Replace CDX scan with CSVQUERY macro
*       Make Virtual Storage Usage display dynamic
*       Improve CPU Usage display
*       Add new entries to CPU table: CMOS-3, Multiprise, P/390
*$617 Use protected work areas when authorized by the SDSF SVC
*     Recovery Exits and Timers (by TCB)
*     Minor changes in GRS and RACF displays
*     Display ACF2 version from ACF2RLSE module
*$616 Display CPC ND and CPC ID from HID
*     Check for MAN=NONE in SMF display
*     Correct VTAM version
*$615 Support for OS/390 R1 and DFSMS/MVS 1.3
*     New output modes: EDIT, PUTLINE and SHORT_PUTLINE
*     Default mode at TSO READY changed to SHORT_PUTLINE
*     Implement enhancements contributed by JWM:
*       SYSPLEX name, OpenMVS Status, ACF2, DB2+,
*       SMF exits, ETR status, Dump options, Console name
*       More TSO/E Tables, CDA date & time
*       Linkage Index (LX) Table (if authorized)
*     Implement enhancements suggested by MXT:
*       CPU model for 308X,4381,3090,5995,9021,9121,9221,9672
*       Service units per second (using RMCTADJC)
*       Remove % sign from LPAR weights (can exceed 100)
*       Status of the Automatic Cartridge Loader (ACL)
*       2-char names in TSO tables no longer missing from display
*       JES2 Initiators (refreshed when you press ENTER)
*     New Displays:
*       LLA parameters and dsnames (thanks to MSCH)
*       GRS Configuration
*       VM Data: Real CPU Id, User ID, CP level
*       GTF Status
*       I/O Appendage Table (IEAAPPxx)
*       TSO Attention Exits
*       Addresses of some local & global control blocks (CVT, ASCB etc)
*     Miscellaneous enhancements:
*       ICKDSF level (from ICKRELVL) and CICS level (from DFHCSVC)
*       Primary sub-system name and type
*       Time Zone (from CLOCKxx)
*       Use DS1LSTAR to determine status of SYS1.DUMP data set
*       Version Information from sub-systems that supply it
*       Enlarge YYMMDD field in preparation for 4-digit years
*       Message displayed on 3480 screen (e.g. K 020436)
*       Address-space type: Batch/TSO-batch/TSO-on-line
*       Initial LOGON command (from TSO/E LOGON screen)
*       CPU Time Used value refreshed when TSO user presses ENTER
*$514 Implement the JUL2DAYS date calculation routine.
*     SHOWMVS must now be compiled with the BATCH option.
*     Reduce size of code generated by the STATUS macro
*     Prevent S0C4 when ICHRIN03 header has invalid number of entries
*$513 Detect Top-secret's presence in pseudo RCVT
*     Minor changes to JOB card formatting routine
*     Locate DDname for JPAQ modules loaded from a PDSE
*     Split MIPS table into bipolar and CMOS using IBM numbers
*$512 Add support for MVS SP 5.1.0 and RACF 2.1.0
*     Add RACF GROUP on JOB card
*     Implement NEXTLLE routine, 1st load-list entry is now the oldest
*     Display IPLPARM & HSA data from SCCB
*     Expand BCD to support DFSMS/MVS 1.2 (HDZ11B0)
*     Inactivate ESPIE environment created by invoking pgm
*     Use EQUates from IEFZB4UV macro
*     Fix error in LPAR display when lowest CPU ID is zero
*$411 Master JCL (IEEMSJCL)
*     Hash-code name to access CDX
*     PR/SM config if ESA 4.3 with RMF active
*     Prevent S0C4 when accessing fetch-protected SSVT
*$410 Format JOB and EXEC statements
*     Storage Allocation Table (using TCTCORE and LDA)
*$409 SMS Configuration Data from BCD
*     PR/SM partition number (ESA 4.3)
*     I/O Configuration from CDA (ESA 4.1)
*     LOG Class, LOG limit, CSCB location
*     Flag MLPA/FLPA modules that make PLPA modules inaccessible.
*     Opening msg with pgm assembly information and exec auth status
*     Space allocated in common area (ESA 4.3)
*     Status of GFS Trace (ESA 3.1) and CSA/SQA Tracking (ESA 4.3)
*$408 Display REXX environments with Host cmd tbl & func packge dirs.
*     Fix LNK/LPA flagging in TIOT display
*     Convert DDname to data set name for JPAQ entries
*     Implement NEXTCDE routine, first JPAQ entry is now the oldest
*$407 Display REGION parameter and actual below/above sizes
*     Replace RB table with NEXTRB routine
*     Consider IEAVESVC as equivalent to IGCERROR (unused SVC)
*     Retrieve DDname associated with JPAQ entries from CDEX (ESA 4.3)
*$406 Move sub-routines to $FARRTNE LOCTR to save addressable space
*     Incorporate enhancements from CBT375.FILE453
*     - Memory Map
*     - Use old WMSTIPM field at offset X'9C' before ESA 313
*     - Get SYS1.DUMP information from RTCT/SDDSQ, remove catalog scan
*     - RACF data sets and tables
*     - add 25% to MIPS rating if it's an AMDAHL box
*$405 Add support for Dynamic UCBs (ESA V4), display RACF mod lvl
*$404 Sort TSU and JOB names, add support for 4-digit device numbers
*$403 may now be executed via the DFP LOADER (or the LOADGO command)
*$402 Issue LOCATE for *SMS* and *MCAT* volsers (dynamic APFTABLE)
*$401 Switch to APPL(ISR) if invoked with APPL(ISF)
*$400 Document Code with sample output, reorg paragraphs further
*     Reorg Code, remove SPLEVEL macro, set hard-copy lrecl to 121
*$392 Use OBR codes instead of MDR to determine 3380/3390 model type
*$391 Display the PPT (if authorized)
*$390 Implement SDSF SVC to get into MODE=SUP, if available
*$389 Add Dynamic APF support (ESA 4.3)
*$388 Reorg JES2 identification code
*$387 Fix XA compatibility bugs
*$386 Display 3390-9 device type
*$385 Support MVS/ESA 4.3, JES2 4.3, DFSMS/MVS
*$384 TSO PARMLIB data and authorization tables (IKJTSOxx)
*$383 Use NUCLKUP to find the address of IGCERROR
*$382 A few glitches corrected
*$381 TCAS data (only if APF-authorized)
*     System consoles, with status and route codes
*     RACF and TSO profiles (from ACEE, PSCB, UPT)
*     IDENTIFY removed, ATTACH now uses main entry point
*$380 Enhanced device status which is refreshed when you hit ENTER
*$373 Address space usage, active jobs, TSU, STC
*     Hardcopy gets title, gets converted to uppercase if PARM=CAPS
*$372 Display device class table and corresponding unit names
*     Display extent information for link-list data sets
*     Change register assignment and TRTPRINT build routine
*$371 Added a SNAP routine (and #SNAP macro) for debugging purposes
*     Moved Processor speed loop to sub-task
*$370 DISPLAY EXISTING SYS1.DUMP DATA SETS WITH FULL/EMPTY STATUS
*     DISPLAY RESOURCE MANAGER PARAMETERS (SRM)
*$364 FIXED RANDOM ABENDS (S0C4 & SA03) AND BRIF FAILURES
*$363 FIXED JES2 410 OFFSETS (WITH A LITTLE HELP FROM MY FRIEND SAM)
*$362 ESTIMATE PROCESSOR SPEED IN "MIPS", IMPROVE IPL DATE FORMAT
*$361 PREVENT S13E ABENDS
*
SHOWMVS  CSECT
SHOWMVS  RMODE ANY
*        SYSSTATE ARCHLVL=1     Optional for OS/390 R10+         RS1002
         MACRO
&NAME    BRASL &REG,&WHERE
&NAME    BAS   &REG,&WHERE
         MEND
         SAVE  (14,12),,'SHOWMVS &REL '
         BALR  R11,0
         USING *,R11
BASEADDR LTR   R1,R1                   SUB_TASK call ?
         JM    SUB_TASK                yes, go there
*
         BRAS  R10,INITIAL             INITIALIZE THE ENVIRONMENT
         USING DYNAM,R13
INIT_R10_ADDR EQU *
         TM    INIT_DONE,L'INIT_DONE   VALID ISPF/BATCH ENVIRONMENT?
         JZ    GOBACK                  NO, QUIT
         BRAS  R14,BLANK1              BLANK LINE AT THE TOP
*
         BRAS  R14,AUTHLVL             Running Authorized?       MK0803
         BRAS  R14,SPLEVEL             MVS/SP & DFP LEVELS
         BRAS  R14,IPLDATA             IPL DATE
         TM    SHORT_PUTLINE,L'SHORT_PUTLINE SHORT_PUTLINE mode ?
         JO    MAIN_BRIF               YES, SKIP THE REST
         BRAS  R14,OPENMSG             Issue ISRZ001 message
         BRAS  R14,PRODUCTS            TSO, SPF, DFDSS, HSM, RACF, VTAM
         BRAS  R14,SORT                SORT ALIAS
         BRAS  R14,USSOPT              UNIX System Service Opt.  RS0504
         BRAS  R14,USS                 UNIX System Service       RS1199
         BRAS  R14,CSF                 Cryptography info         JM0300
         BRAS  R14,SMFDATA             SMF DATA
         BRAS  R14,SMSDATA             SMS Base Config Data
         BRAS  R14,HSM                 HSM Data                  RS0400
         BRAS  R14,SDM                 System data mover (SDM)   RS0800
         BRAS  R14,GRSDATA             GRS Configuration
         BRAS  R14,HARDWARE            HARDWARE DATA
         BRAS  R14,VMDATA              VM DATA
         BRAS  R14,LPAR00              LPAR Configuration
         BRAS  R14,MEMORY              VIRTUAL MEMORY MAP
         BRAS  R14,VSM00               Virtual Storage Manager   RS0303
         BRAS  R14,CSSTOR00            Common Storage Usage      RS0502
         BRAS  R14,DSPLST00            DataSpace/HiperSpace      RS0700
         BRAS  R14,CSMLS00       Communications Storage Manager +RS0200
         BRAS  R14,XCFDATA             XCF Configuration
         BRAS  R14,PATH00              Path Data
         BRAS  R14,CFD00               Coupling Facility Data      +DL
         BRAS  R14,ETR00               External Time Reference (ETR)
         BRAS  R14,SRM00               SRM DATA
         BRAS  R14,WLM00               WLM DATA                    $JWM
         BRAS  R14,LOGR00              System Logger             RS1002
         BRAS  R14,RRS00               Resource Recovery Manager    +RS
         BRAS  R14,ARM00               Automatic Restart Manager   +RS
         BRAS  R14,OPENCAT             OPEN CATALOGS
         BRAS  R14,PAGEDS              PAGE DATA SETS
         BRAS  R14,DUMPDS              DUMP DATA SETS
         BRAS  R14,DAE00               DAE Parameters (ADYSETxx)
         BRAS  R14,SLIP00              SLIP data                  JWM
         BRAS  R14,GTF00               GTF DATA
         BRAS  R14,DIAG00              DIAG data                 RS0902
         BRAS  R14,IPA000              Initialization Parameter Area
         BRAS  R14,IPST00              IPL Statistics
         BRAS  R14,MSTJCL00            Master JCL (IEEMSJCL)       @411
         BRAS  R14,SUBSYSTM            SUB-SYSTEMS
         BRAS  R14,PRISUB00            Primary sub-system
         BRAS  R14,TCAS00              TCAS data (APF)
         BRAS  R14,IKJTSO00            TSO PARMLIB data (IKJTSOxx)
         BRAS  R14,EXTAB00             TSO Exits and Tables
         BRAS  R14,RACFDATA            RACF DATA                   @406
         BRAS  R14,USERS               Active jobs, STC, TSU
         BRAS  R14,JES2INIT            JES2 Initiators
         BRAS  R14,LNKLST00            LNKLSTXX
         BRAS  R14,LPALST00            LPALSTXX
         BRAS  R14,APFLIST             APF LIST
         BRAS  R14,DYNXIT              Dynamic Exits
         BRAS  R14,SYMBOLS             System static symbols
         BRAS  R14,LLALIST             LLA LIST
         BRAS  R14,ATTACH           <- attach sub-task
         BRAS  R14,LPAQ                ACTIVE LPA
         BRAS  R14,SVCTABLE            SVC TABLE
         BRAS  R14,LXINFO              Linkage Index info      JWMJUN96
         BRAS  R14,AXINFO              Auth index info           RS0700
         BRAS  R14,XMSINFO             Cross Memory Connection   RS0700
         BRAS  R14,MDQINFO             Memory Delete Queue       RS0601
         BRAS  R14,ETEINFO             PC usage                  RS0601
         BRAS  R14,PPT00               Program Properties Table (APF)
         BRAS  R14,APP00               Appendage ID table (IEAAPPxx)
         BRAS  R14,RML00               Resource Manager List (IEAVTRML)
         BRAS  R14,PRED00              Product Enable/Disable
         BRAS  R14,DEVICES             DEVICE CLASS & UNIT NAMES       X
                                       ON-LINE UNITS
         BRAS  R14,CHPID00             CHPID & PATH              JM0799
         BRAS  R14,CPMF00              CPMF Data                 RS0803
         BRAS  R14,CONSOLES            CONSOLES
         BRAS  R14,CPFTAB00            Command Prefix Table
         BRAS  R14,NTTAB00             Name/Token (SYSTEM)         $RS
         BRAS  R14,ALLOC00             Allocation defaults
         BRAS  R14,ADDR100             Addresses of Globalcontrol blks
*
*        Data from user's address space
*
         BRAS  R14,JOBSTEP             JOB/STEP data
         BRAS  R14,RACF00              RACF Profile
         BRAS  R14,PROF00              TSO profile
         BRAS  R14,REXX00              REXX Environment
         BRAS  R14,TIOT00              TIOT
         BRAS  R14,TREE                TCB TREE
         BRAS  R14,ATTNX00             Attention exits
         BRAS  R14,JPAQ                JPAQ
         BRAS  R14,LOADLIST            LOAD LISTS
         BRAS  R14,CELLPLOC            Local Cell Pools
         BRAS  R14,TIMERS              Recovery and Timers
         BRAS  R14,NTTAB50             Name/Token (LOCAL)          $RS
         BRAS  R14,ADDR200             Addresses of Local control blks
         ICM   R0,B'1111',OLDPICA      did we issue ESPIE?
         JZ    MAIN_BRIF               no, jump
         ESPIE RESET,OLDPICA           Reset SPIE/ESPIE environment
MAIN_BRIF EQU  *
         BRAS  R14,ATTACH           <- attach sub-task (again)
         BRAS  R14,BRIF                START BROWSE MODE
GOBACK   EQU   *
         LM    R1,R2,LINE1PTR          start/length of line buffer
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    GOBACK7                 YES, JUMP
         LTR   R1,R1                   buffer allocated?
         JZ    GOBACK5                 NO, JUMP
         FREEMAIN RC,LV=(R2),A=(R1)    FREE DYNAMIC STORAGE
GOBACK5  EQU   *
         LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA
         LR    R1,R13                  ADDRESS OF DYNAMIC STORAGE AREA
         L     R13,4(,R13)
         FREEMAIN R,LV=(0),A=(1)       FREE DYNAMIC STORAGE
         RETURN (14,12),RC=00
*
*        Free working-storage when AUTH=ESR
*
GOBACK7  LTR   R1,R1                   buffer allocated?
         JZ    GOBACK7B                NO, JUMP
         LR    R0,R2                   length for FREEMAIN
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES             RS1002
GOBACK7B LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA
         L     R1,UNPROTWK             unprotected work area
         FREEMAIN R,LV=(0),A=(1)
         LR    R1,R13                  ADDRESS OF DYNAMIC STORAGE AREA
         L     R13,4(,R13)
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES             RS1002
         SLR   R15,R15                 RC=00
         EXIT
*
*        CAUTION: If the previous instruction fails with an
*                 "Undefined Operation Code" message, check the SYSLIB
*                 concatenation: the SHOWMVS.MACLIB macros are missing.
*
         DS    0A(@STRING)
*
*        CAUTION: If the previous instruction fails with an
*                 "UNDEFINED SYMBOL" message, check the SYSLIB
*                 concatenation: the STRING macro is missing.
*
         TITLE 'SHOWMVS &REL - Define the CVT and DFA'
*---------------------------------------------------------------------*
*                                                                     *
*        Define the CVT (Comunication Vector Table)                   *
*                                                                     *
*        The CVTOSLVL flags are later tested to conditionally         *
*        invoke PPT scan and dynamic APF macros.                      *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  PRINT
         PRINT NOGEN
         CVT   PREFIX=YES,DSECT=YES,LIST=NO
CVT      EQU   CVTMAP                  IWMQUERY
*---------------------------------------------------------------------*
*                                                                     *
*        Define the DFA map (Data Facilities area).                   *
*                                                                     *
*        The DFP V3 version of this macro defines the                 *
*        DFASMS symbol.  The existence of DFASMS is                   *
*        tested in the DEVSTAT routine to generate                    *
*        SMS-dependent code and macros.                               *
*                                                                     *
*---------------------------------------------------------------------*
         IHADFA  DSECT=YES             DFP AREA
*---------------------------------------------------------------------*
*                                                                     *
*        Define the CEECAA map (Language Environment)                 *
*                                                                     *
*        The existence of CEECAA is tested in the LE code             *
*                                                                     *
*---------------------------------------------------------------------*
         CEECAA    ,                   Language Environment
*---------------------------------------------------------------------*
*                                                                     *
*        Define the ATR map (Resource Recovery Manager).              *
*                                                                     *
*        The existence of ATRFZRMVERSION is tested in                 *
*        the RRS code.                                                *
*                                                                     *
*---------------------------------------------------------------------*
         AIF   (NOT D'CVTH6603).RRS001 OS/390 R3?
         ATRFZQRY                      Resource Recovery Manager   +RS
.RRS001  ANOP
         POP   PRINT
SHOWMVS  CSECT                         ADDRESSABLE CODE
         TITLE 'SHOWMVS &REL - Internal Macro Instructions'
***********************************************************************
*                                                                     *
*        Internal Macro-instructions                                  *
*                                                                     *
***********************************************************************
         MACRO                                                    MACRO
&NAME    BEGIN_PROC &SAVE=YES,&KW=,&AUTH=NO,&BASEREG=YES         RS0302
         GBLC  &ENDPROC                                           MACRO
&ENDPROC SETC  'PROC&SYSNDX'                                      MACRO
$LTORG   LOCTR                         ADDRESSABLE CODE           MACRO
&NAME    BRAS  R15,BEGIN_PROC          Go To Bootstrap
         DC    AL2((&ENDPROC-BASEADDR)/2) demi-offset to far routine
&PCE     SETC  '&KW._PCE'
         AIF   ('&KW' EQ '').KW2
         AIF   (D'&PCE).KW2
&PCE     IKJKEYWD ,                                          &KW
         IKJNAME '&KW'                                       &KW
.KW2     ANOP                                                &KW
$FARRTNE LOCTR                         FAR ROUTINES               MACRO
         DC    0D'0',C'&NAME',0H'0'
         AIF   ('&SAVE' EQ 'NO').NOSAVE
         AIF   ('&SAVE' EQ 'STDSAVE').STDSAVE
         AIF   ('&BASEREG' EQ 'NO').NOBASEREG                    RS0302
&ENDPROC BALR  R12,0                   LOCAL BASE                 MACRO
         USING *,R12                                              MACRO
         LA    R15,PEND&SYSNDX         LOAD RETRY ADDRESS         MACRO
         AGO   .BASECON                                          RS0302
.NOBASEREG ANOP                        No base register          RS0302
         BASR  R15,0                   Next instruction          RS0302
&ENDPROC AHI   R15,PEND&SYSNDX-&ENDPROC  + End for Recovery      RS0302
.BASECON STM   R14,R15,END_PROC        RETURN/RETRY ADDRESSES     MACRO
         AIF   ('&AUTH' NE 'YES').AUTH4                      &AUTH
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         BNOR  R14                     no, exit
.AUTH4   ANOP                                                &KW
         AIF   ('&KW' EQ '').KW4                             &KW
         BRAS  R14,SECTION_SELECTION
         DC    AL2(&KW._PCE+1-IKJPARMD)
.KW4     ANOP                                                &KW
&ENDPROC SETC  'PEND&SYSNDX'           FOR END_PROC MACRO         MACRO
         MEXIT
.NOSAVE  ANOP
&ENDPROC DS    0H
         MEXIT
.STDSAVE ANOP
&ENDPROC STM   R14,R12,12(R13)         save registers
.MEND    MEND                                                     MACRO
*---------------------------------------------------------------------*
         MACRO                                                    MACRO
&NAME    END_PROC ,                                               MACRO
         GBLC  &ENDPROC                                           MACRO
         AIF   (T'&NAME EQ 'O').END2                              MACRO
&NAME    EQU   *
.END2    ANOP                                                     MACRO
&ENDPROC L     R14,END_PROC            RETURN ADDR
         BR    R14
         DROPTEMP                      RELEASE TEMP BASE REGS
         MEND                                                     MACRO
*---------------------------------------------------------------------*
         MACRO                                                    MACRO
&NAME    DROPTEMP ,                                               MACRO
         USING PSA,R0,R1,R2,R3,R4,R5,R6,R7,R12,R14,R15           RS0902
         DROP  R1,R2,R3,R4,R5,R6,R7,R12,R14,R15 RELEASE TEMP BASE REGS
         MEND                                                     MACRO
*---------------------------------------------------------------------*
         MACRO                                                    macro
&NAME    XCALL &EP,&OPRNDS,&ERRET=,&VL=1,&LINKAGE=BALR            macro
         GBLB  &IHBSWA                                            macro
&IHBSWA  SETB  (&VL EQ 1)              VL=1                       macro
&NAME    LA    R1,TENWORDS             parm list
         IHBOPLST ,&OPRNDS,MF=(E,(1))                             macro
         AIF   ('&LINKAGE' EQ 'SYNCH').SYNCH                      macro
         AIF   ('&EP'(1,1) EQ '(').BALRREG                        macro
         L     R15,&EP                 EP address
         BALR  R14,R15                 invoke routine
         AGO   .ERRET                                             macro
.BALRREG LR    R15,&EP(1)              EP address
         BALR  R14,R15                 invoke routine
         AGO   .ERRET                                             macro
.SYNCH   SYNCHX SYNCH_&EP,RESTORE=YES  invoke with TCB key       RS1002
.ERRET   AIF   (T'&ERRET EQ 'O').MEND                             macro
         LTR   R15,R15                 Any error?
         JNZ   &ERRET                  yes, jump
.MEND    MEND                                                     macro
*---------------------------------------------------------------------*
         MACRO                                                    MACRO
&NAME    UCB_NAME &LEFT,&JES=NO                                   MACRO
&LAB     SETC  'IHB&SYSNDX'                                       MACRO
         AIF   ('&LEFT' EQ 'LEFT').LEFT                           MACRO
&NAME    MVI   UCB_NAME,C' '           first char is blank
         MVC   UCB_NAME+1(3),UCBNAME   3-character name
         UCBDEVN DEVN=UCB_NAME         get UCB name (ESA V4 only)
         MEXIT                                                    MACRO
.LEFT    ANOP                                                     MACRO
&NAME    MVC   UCB_NAME(3),UCBNAME     3-character name
         MVI   UCB_NAME+3,C' '         4th char is blank
         AIF   ('&JES' NE 'YES').LEFT4                            MACRO
         CLC   =C'JES ',UCB_NAME       JES console?
         JE    &LAB.X                  yes, jump
.LEFT4   L     R1,CVTPTR(,0)           point at CVT
         UCBDEVN DEVN=UCB_NAME         get UCB name (ESA only)
         CLI   UCB_NAME,C' '           3-char name?
         JNE   &LAB.X                  no, jump
         MVC   UCB_NAME(3),UCB_NAME+1  left justify
         MVI   UCB_NAME+3,C' '         4th char is blank
&LAB.X   EQU   *
.MEND    MEND                                                     MACRO
*---------------------------------------------------------------------*
         MACRO                                                    MACRO
&NAME   #SNAP  &ADDR=(1),&LENGTH=(0)                              MACRO
&NAME    STM   R14,R3,SNAPREGS         save registers             MACRO
         IHBINNRA &ADDR,&LENGTH                                   MACRO
         BRAS  R14,SNAP00           <- SNAP STORAGE               MACRO
         LM    R14,R3,SNAPREGS         restore registers          MACRO
.MEND    MEND                                                     MACRO
*---------------------------------------------------------------------*
         MACRO
&NAME   #STATUS &BYTE,&BIT,&MSG
         AIF   ('&BYTE'(1,3) EQ 'CVT' AND NOT D'&BIT).MEND
&NAME    TM    &BYTE,&BIT              check flag
         BAS   R14,$$STATUS            check CC, move, bump ptr
&N       SETA  K'&MSG-3
         DC    AL1(&N),C&MSG,0H'0'     Length,text,alignment
.MEND    MEND
*---------------------------------------------------------------------*
         MACRO
&NAME    VALIDATE &ADDR,&ERRET=                                  RS0402
&NAME    MVI   RCVYSAVE,X'C4'          set flag for RECOVERY routine
         BASR  R14,0                                             RS0402
         AHI   R14,&ERRET-*                                      RS0402
*        LA    R14,&ERRET              return address            RS0402
         CLI   &ADDR,0                 CHECK ADDRESS (get S0C4)
         MVI   RCVYSAVE,0              reset flag
         MEND
         MACRO
        #SWITCH &NAME
         GBLA  &BSWITCHES
&BSWITCHES SETA &BSWITCHES+1
&O       SETA  (&BSWITCHES-1)/8        OFFSET
&L       SETA  &BSWITCHES-&O*8         REMAINDER
&STR(1)  SETA  128,64,32,16,8,4,2,1
&L       SETA  &STR(&L)                MASK
&NAME    EQU   SWITCHES+&O,&L
         MEND
*---------------------------------------------------------------------*
         TITLE 'SHOWMVS &REL - Initialise The Environment'
***********************************************************************
*                                                                     *
*        INITIALISATION                                               *
*                                                                     *
*          1. Allocate Key=8 work area                                *
*          2. invoke INIT600 to determine environment                 *
*          3. check for APF authorization                             *
*          4. check for ESR authorization                             *
*          5. re-invoke myself                                        *
*              IF AUTH=ESR and not alone in TCB                       *
*              OR running in ISPF under wrong application             *
*          6. If AUTH=ESR, allocate KEY=4,SP=230 work area            *
*                                                                     *
***********************************************************************
INITIAL  BEGIN_PROC SAVE=NO
         BALR  R12,0                    Getmain req
         USING *,R12
INIT_R12_ADDR EQU *
*
*        Allocate small work area
*
         LA    R0,DYNAML               temp dynamic storage area
         GETMAIN R,LV=(0)              get small work area
         ST    R13,4(,R1)              chain save area
         ST    R1,8(,R13)              chain save area
         LM    R13,R1,8(R13)           chain save area
         USING DYNAM,R13
         LA    R14,DYNAM+72            clear storage
         LA    R15,DYNAML-72           clear storage
         SLR   R3,R3                   clear storage
         MVCL  R14,R2                  clear storage
         ST    R1,PARMADDR             SAVE PARM/CPPL ADDRESS
         ST    R13,UNPROTWK            save addr
         ST    R10,RDRTNR14            save return address
         L     R8,CVTPTR(,0)           CVT ADDRESS
         SH    R8,=Y(CVTMAP-CVTFIX)    SUBTRACT PREFIX LENGTH
         USING CVTFIX,R8               PERMANENT ASSIGNMENT
         L     R9,PSATOLD-PSA(,0)      my TCB
         USING TCB,R9
*
         SYNCHX INIT600,RESTORE=YES    Initialise working-storageRS1002
*
*        If I re-invoked myself in INIT600, exit now.
*
         LTR   R15,R15                 did I re-invoke myself ?
         JZ    INIT120                 no, continue
         LA    R0,DYNAML               temp dynamic storage area
         LR    R1,R13                  ADDR OF WORK AREA
         L     R13,4(,R13)             caller's save area
         FREEMAIN R,LV=(0),A=(1)       FREE SMALL WORK AREA
         LM    R2,R12,28(R13)          RESTORE CALLER'S R2-R12
         EXIT                          goback
*
*        Check for APF authorization
*
INIT120  TESTAUTH FCTN=1               CHECK APF STATUS
         LTR   R4,R15                  OK?
         JZ    INIT180                 yes, jump
*
*        Issue SVC 109 to switch to supervisor mode
*
         LH    R15,IGX00NNN            get extended SVC number
         LTR   R15,R15                 Auth ESR Available ?
         JM    INIT180                 NO, JUMP
*
         SLR   R0,R0                   OPTION CODE (ISFSVC)
         LA    R1,1                    OPTION CODE
SVC109   SVC   109                     TYPE-3 ESR
         LTR   R4,R15                  OK?
         JNZ   INIT180                 NO, JUMP
*
*  IGX00GSF/ISFSVC error codes (in R15)
*
*        BADOPT     4                  BAD OPTION PASSED TO SVC IN R1
*        NOTPRB     8                  CALLER NOT RUNNING UNDER A PRB
*        NOTSDS     12                 UNKNOWN CALLER
*        NOTALIB    16                 CALLER NOT FROM APF LIB
*        BADMOD     20                 MODULE PREFIX INVALID
*        BADSTAE    24                 CALLER ISSUED (E)STAE
*        BADXCTL    28                 CALLER ENTERED FROM XCTL
*        NOTREN     32                 CALLER NOT REENTRANT
*        BADADDR    36                 SVC NOT IN CALLER'S STORAGE
*
*        NOSVC109   109                IGX00GSF/ISFSVC not available
*
INIT140  BALR  R1,0
         LM    R10,R12,INIT_R10_R11_R12-*(R1) reload main base regs
         L     R9,PSATOLD-PSA(,0)      reload TCB address
         MODESET KEYADDR=TCBPKF,WORKREG=2 KEY=1 -> KEY=8 (ESR only)
         ICM   R0,B'1111',TCBTME       Active timer ?
         JNZ   INIT_NOT_ALONE          not alone, ABEND
         L     R5,TCBRBP               my PRB
         USING RBBASIC,R5
         TM    RBSTAB2,RBTCBNXT        oldest RB (end of chain) ?
         JNO   INIT_NOT_ALONE          not alone, ABEND
*
*        AUTH=ESR: allocate work area in KEY=4
*
INIT160  LR    R7,R13                  save addr of temp work-area
         L     R13,4(,R13)             caller's save area
         LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA
         SLR   R1,R1                   LOC=BELOW
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES             RS1002
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0
         ST    R1,TCBUSER              save addr into TCBUSER
         MODESET KEYREG=(2)            switch back to TCB key
         ST    R1,8(,R13)              chain save area
         L     R2,24(,R13)             caller's R1
         MODESET EXTKEY=KEY4           KEY=4
         LR    R3,R1                   save R1                   RS0203
         LR    R14,R1                  clear storage             RS0203
         LA    R15,DYNAML              clear storage             RS0203
         SLR   R1,R1                   clear storage             RS0203
         SLR   R0,R0                   clear storage             RS0203
         MVCL  R14,R0                  clear storage             RS0203
         LR    R1,R3                   reload R1                 RS0203
         ST    R13,4(,R1)              chain save area
         LR    R13,R1                  work area
*
         MVC   OLDPKF,TCBPKF           save TCB key for MODESET
         MVI   PROTKEY,KEY4*16         own protection key
         OI    AUTHORIZED,L'AUTHORIZED REMEMBER I'M AUTHORIZED
         OI    AUTH_ESR,L'AUTH_ESR     AUTH=ESR
         ST    R2,PARMADDR             SAVE PARM/CPPL ADDRESS
         ST    R7,UNPROTWK             addr of unprotected save area
         LA    R0,DYNAML               length
         ST    R0,UNPROTWK+4           store length
         BRAS  R14,EXECKEY0            execute next instruction in key0
         LH    R0,IGX00NNN-DYNAM(,R7)  get extended SVC number
         STH   R0,IGX00NNN             pass it to open msg
*
         L     R0,=A(LINESL)           LENGTH OF LINES BUFFER
         ST    R0,LINE1PTR+4           save length
         LA    R1,1                    LOC=ANY
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES             RS1002
         ST    R1,LINE1PTR             save addr
         SYNCHX INIT600,STATE=SUPV,KEYADDR=PROTKEY,AMODE=31,           X
               RESTORE=YES,MF=(E,SYNCHL)                         RS1002
*
*        Inactivate ESTAI exits
*
         ICM   R5,B'1111',TCBSTAB      First SCB
         JZ    INIT200                 no SCB, exit
         USING SCB,R5
*--loop
INIT168  BRAS  R14,EXECKEY0            execute next instruction in key0
         OI    SCBFLGS3,SCBDUMMY       THIS SCB WILL NOT BE SCHEDULED
         ICM   R5,B'1111',SCBCHAIN     next SCB
         JNZ   INIT168                 loop through SCB chain
*--endloop
         J     INIT200                 continue
         DROP  R5                      SCB
*
INIT_NOT_ALONE LA R15,TCB              TCB address
         ABEND 1112,REASON=(15)  not alone in this task
*---------------------------------------------------------------------*
*                                                                     *
*        Allocate work areas in KEY=TCB                               *
*                                                                     *
*        This code is executed in two situations:                     *
*                                                                     *
*          1. SHOWMVS is APF authorized                               *
*          2. SHOWMVS is *not* authorized                             *
*                                                                     *
*---------------------------------------------------------------------*
INIT180  BALR  R1,0
         LM    R10,R12,INIT_R10_R11_R12-*(R1) reload main base regs
         L     R0,=A(LINESL)           LENGTH OF LINES BUFFER
         ST    R0,LINE1PTR+4           save length
         GETMAIN RU,LV=(0),BNDRY=PAGE
         ST    R1,LINE1PTR             save addr
         STC   R4,AUTH_RC              Authorization return code
         ST    R13,UNPROTWK            save addr
         LTR   R4,R4                   Authorized?
         JNZ   INIT190                 No, goback (MODE=PROB,KEY=TCB)
         OI    AUTHORIZED,L'AUTHORIZED REMEMBER I'M AUTHORIZED
         MODESET MODE=SUP              Switch to MODE=SUP
         L     R1,PSATOLD-PSA(,0)      MY TCB
         IC    R1,TCBPKF-TCB(,R1)      PSW KEY
         STC   R1,OLDPKF               save TCB key for MODESET
         STC   R1,PROTKEY              own protection key
         J     INIT200
*
*        IDENTIFY main entry point if invoked by the LOADER
*
INIT190  CLI   OWN_NAME,C'0'           IDENTIFY required?
         JL    INIT200                 no, jump
         L     R1,ISF$SHOW+4           own entry point
         IDENTIFY EPLOC=OWN_NAME,ENTRY=(R1)
*---------------------------------------------------------------------*
*                                                                     *
*        INITIALIZE THE ENVIRONMENT                                   *
*                                                                     *
*---------------------------------------------------------------------*
INIT200  EQU   *
*
*        BUILD A TRANSLATE TABLE FOR NON-PRINTABLE CHARACTERS
*
INIT210  MVI   TRTPRINT,C' '           PRINTABLE CHARACTERS
         MVC   TRTPRINT+1(255),TRTPRINT
         MVC   BLANKS,TRTPRINT         a bunch of blanks
         SLR   R15,R15
         SLR   R0,R0
         BRAS  R1,INIT212
         DC    X'4A,7,5A,8,6A,6,7A,6'  Special characters
         DC    X'81,9,91,9,A2,8'       Lowercase
         DC    X'C1,9,D1,9,E2,8'       Uppercase
         DC    X'F0,A'                 Digits
         DC    X'00,0'                 end of table
*LOOP
INIT212  IC    R15,0(,R1)              FIRST BYTE
         IC    R0,1(,R1)               ITERATIONS
*--LOOP
INIT213  STC   R15,TRTPRINT(R15)       STORE X'4A' INTO TRTPRINT+X'4A'
         LA    R15,1(,R15)             BUMP INDEX
         BRCT  R0,INIT213              NEXT CHARACTER
*--ENDLOOP
         LA    R1,2(,R1)               NEXT ENTRY IN TABLE
         CLI   0(R1),0                 END OF TABLE?
         JNE   INIT212                 NEXT STRING
*ENDLOOP
         MVC   TRTDOTS,TRTPRINT        all spaces
         MVI   TRTDOTS+C' ',C'.'       change space to dot
         TR    TRTDOTS,TRTDOTS         change spaces to dots
         MVI   TRTDOTS+C' ',C' '       space remains space
*
         L     R10,LINE1PTR            First line
         USING LINE,R10
*
INIT220  EQU   *
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         JZ    INIT230                 not TSO+ISPF, exit
         XCALL ISPLINK,                ISPF interface                  X
               (=C'ISREDIT',           ISPF FUNCTION                   X
               =F'5',                  length                          X
               =C'MACRO'),             Key-words                       X
               LINKAGE=SYNCH
INIT230  EQU   *
         OC    JCLPARM,BLANKS          CONVERT TO UPPERCASE
*
*        If PARM=CAPS, convert to uppercase
*
         CLC   =C'CAPS',JCLPARM        is it PARM=CAPS?
         JNE   INIT240                 no, jump
         OI    PARMCAPS,L'PARMCAPS     turn flag on
         OC    TRTPRINT+X'80'(48),BLANKS yes, convert to uppercase
*
*        Check for a //SHOWMVS DD
*
INIT240  DEVTYPE MY_DDN,WKCELL1        CHECK FOR "SHOWMVS" DD
         LTR   R15,R15                 DD allocated?
         JNZ   INIT242                 no, jump
         OI    HARDCOPY,L'HARDCOPY     yes, remember it's hardcopy
*---------------------------------------------------------------------*
*                                                                     *
*        Non-TSO mode                                                 *
*                                                                     *
*---------------------------------------------------------------------*
INIT242  TM    NON_TSO,L'NON_TSO       MODE=NON_TSO ?
         JNO   INIT250                 no, exit
         CLC   =C'TCP=',JCLPARM        is it PARM=TCP=?          RS0302
         JE    INIT252                 yes, jump                 RS0302
         TM    HARDCOPY,L'HARDCOPY     //SHOWMVS allocated already?
         JO    INIT249                 yes, skip DYNALLOC
*
*        Allocate //SHOWMVS DD SYSOUT=*
*
         LA    R1,TENWORDS+4           WORK AREA ADDRESS
         XC    0(20,R1),0(R1)          CLEAR STORAGE
         MVI   0(R1),20                LENGTH
         MVI   1(R1),1                 VERB=ALLOC
         LA    R0,S99TXTPT             TEXT UNIT POINTERS
         ST    R0,8(,R1)               S99TUPTR
         ST    R1,TENWORDS             S99RBPTR
         OI    TENWORDS,X'80'          S99RBPTR
         LA    R1,TENWORDS             S99RBPTR
         DYNALLOC                      ALLOC SYSOUT=*,TERM=TS
         LTR   R15,R15                 DYNALLOC WENT OK?
         JNZ   INIT299                 NO, QUIT
         OI    HARDCOPY,L'HARDCOPY     yes, remember it's hardcopy
INIT249  EQU   *
         J     INIT260                 print title line
*
*        DYNALLOC stuff for //SHOWMVS DD
*
         CNOP  0,4
S99TXTPT DC    A(S99T1,S99T18+VL)      TEXT UNIT POINTERS
S99T1    DC    Y(1,1,L'MY_DDN)         DDN=SHOWMVS
MY_DDN   DC    CL8'SHOWMVS '           DDN=SHOWMVS
S99T18   DC    X'0018,0000'            SYSOUT=*
*---------------------------------------------------------------------*
*                                                                     *
*        TSO mode                                                     *
*                                                                     *
*---------------------------------------------------------------------*
INIT250  EQU   *
         CLC   =C'TCP=',JCLPARM        is it PARM=TCP=?          RS0302
         JE    INIT252                 yes, jump                 RS0302
         CLC   =C'PUTLINE ',JCLPARM    PARM=PUTLINE?
         JNE   INIT251                 NO, EXIT                  RS0302
         OI    PUTLINE,L'PUTLINE       PUTLINE=ON
         NI    HARDCOPY,255-L'HARDCOPY HARDCOPY=OFF
         J     INIT260                 write title line
*
*        Determine output mode in the TSO/ISPF environment
*
INIT251  TM    HARDCOPY,L'HARDCOPY     hard-copy mode?
         JO    INIT260                 yes, write title
         TM    TSO_ON_LINE,L'TSO_ON_LINE
         JZ    INIT255                 not TSO+ISPF, exit
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         JZ    INIT255                 not TSO+ISPF, exit
         CLC   =C'SHORT_PUTLINE',JCLPARM is it PARM=SHORT_PUTLINE ?
         JE    INIT255                 yes, jump
         CLC   =C'EDIT',JCLPARM        is it PARM=EDIT?
         JE    INIT251E                yes, jump
         OI    BRIF_MODE,L'BRIF_MODE   NO, USE BRIF
         J     INIT290                 exit
INIT251E OI    EDIF_MODE,L'EDIF_MODE   NO, USE EDIF
         J     INIT290                 exit
INIT252  OI    TCP_MODE,L'TCP_MODE     use TCPIP                 RS0302
         LA    R2,JCLPARM                                        RS0302
         LA    R2,4(R2)                jump around TCP=          RS0302
         SR    R0,R0                   clear R0                  RS0302
*Loop                                                            RS0302
INIT252_1 LR   R3,R2                                             RS0302
*  Loop                                                          RS0302
INIT252_2 CLI  0(R2),C':'              is this a port?           RS0302
         JE    INIT252_3                 yes                     RS0302
         CLI   0(R2),C'.'              dot?                      RS0302
         JE    INIT252_3                 yes                     RS0302
         LA    R2,1(,R2)               +1                        RS0302
         J     INIT252_2               loop                      RS0302
*  Endloop                                                       RS0302
INIT252_3 LR   R4,R2                   copy                      RS0302
         SR    R4,R3                   minus start               RS0302
         LTR   R4,R4                   is it null ?              RS0302
         JZ    INIT254_1                 yes, error              RS0302
         BCTR  R4,0                    -1 now the length         RS0302
         EX    R4,INIT252_X            pack data                 RS0302
         CVB   R1,WKCELL1              convert to binary         RS0302
         CHI   R1,256                  result > 256 ?            RS0302
         JNL   INIT254_1                 yes, error              RS0302
         SLL   R0,8                                              RS0302
         OR    R0,R1                                             RS0302
         CLI   0(R2),C':'              Next a port ?             RS0302
         JE    INIT252_4                 yes                     RS0302
         LA    R2,1(,R2)               +1                        RS0302
         J     INIT252_1                                         RS0302
*Endloop                                                         RS0302
INIT252_X PACK  WKCELL1,0(,R3)                                   RS0302
INIT252_4 DS   0H                      port (:)                  RS0302
         LA    R2,1(,R2)               +1                        RS0302
         LR    R3,R2                                             RS0302
*Loop                                                            RS0302
INIT252_5 CLI  0(R2),C' '              end of parms              RS0302
         JE    INIT252_6                                         RS0302
         LA    R2,1(,R2)               +1                        RS0302
         J     INIT252_5                                         RS0302
*Endloop                                                         RS0302
INIT252_6 SR   R2,R3                                             RS0302
         LTR   R2,R2                   is it null ?              RS0302
         JZ    INIT254_1                 yes error               RS0302
         BCTR  R2,0                    -1                        RS0302
         EX    R2,INIT252_X            pack data                 RS0302
         CVB   R1,WKCELL1                                        RS0302
INIT252_7 SR   R2,R3                                             RS0302
         STCM  R0,B'1111',IP_ADDRESS                             RS0302
         STCM  R1,B'0011',IP_PORT_NO                             RS0302
         BRAS  R14,WORKADDR            32K work area             RS0302
         LR    R3,R1                                             RS0302
         USING IP_BUFFER,R3                                      RS0302
         MVC   WKCELL1(4),=F'1'                                  RS0302
         EZASMI TYPE=GETIBMOPT,RETCODE=LRETCODE,ERRNO=LRSNCODE,        X
               BUF=(R3),COMMAND=WKCELL1                          RS0302
         CLC   LRETCODE,=X'FFFFFFFF'    -1 indicate error        RS0302
         JE    INIT254_2                                         RS0302
         L     R4,IP_NUM_IMAGES                                  RS0302
*loop                                                            RS0302
INIT252_9 DS   0H                                                RS0302
         TM    IP_STATUS,BIT0        Is this TCP-stack active??  RS0302
         JZ    INIT252_10                                        RS0302
         MVC   IP_NAME,IP_TCPIPNAME  remember 1. act IP-stack    RS0302
         J     INIT253                                           RS0302
INIT252_10 DS   0H                                               RS0302
         LA    R3,IP_BUF_ENTRY(R3)                               RS0302
         BRCT  R4,INIT252_9                                      RS0302
*endloop                                                         RS0302
         J     INIT254_2                                         RS0302
INIT253  EQU   *                                                 RS0302
*        MVC   IP_FAMILY,=H'2'     INET!!                        RS0302
         MVC   IP_FAMILY,INET      INET!!                        RS0302
         MVC   MY_NAME,OWN_NAME                                  RS0302
         EZASMI TYPE=INITAPI,     ISSUE INITAPI MACRO                  X
               SUBTASK=OWN_NAME,  SPECIFY SUBTASK IDENTIFIER           X
               MAXSOC=MAXSOC,     SPECIFY MAXIMUM NUMBER OF SOCKETS    X
               MAXSNO=MAXSNO,     (HIGHEST SOCKET NUMBER ASSIGNED)     X
               APITYPE=APITYPE,   (SPECIFY APITYPE FIELD)              X
               IDENT=IDENT_IP,    NAME local                           X
               RETCODE=LRETCODE,ERRNO=LRSNCODE                   RS0302
         CLC   LRETCODE,=X'FFFFFFFF'    -1 indicate error        RS0302
         JE    INIT254_2                                         RS0302
         EZASMI TYPE=SOCKET,AF='INET',SOCTYPE='STREAM',                X
               RETCODE=LRETCODE,ERRNO=LRSNCODE                   RS0302
         CLC   LRETCODE,=X'FFFFFFFF'    -1 indicate error        RS0302
         JE    INIT254_2                                         RS0302
         L     R7,LRETCODE             Socket descriptor         RS0302
         STH   R7,SOC_DESC                                       RS0302
         EZASMI TYPE=CONNECT,S=SOC_DESC,NAME=IP_NAME_VAR,              X
               RETCODE=LRETCODE,ERRNO=LRSNCODE                   RS0302
         CLC   LRETCODE,=X'FFFFFFFF'    -1 indicate error        RS0302
         JE    INIT254_2                                         RS0302
         EZASMI TYPE=GETPEERNAME,S=SOC_DESC,NAME=IP_NAME_VAR,          X
               RETCODE=LRETCODE,ERRNO=LRSNCODE                   RS0302
         CLC   LRETCODE,=X'FFFFFFFF'    -1 indicate error        RS0302
         JE    INIT254_2                                         RS0302
         J     INIT290                 exit                      RS0302
APITYPE  DC H'2'                                                 RS0302
MAXSOC   DC H'10'                                                RS0302
INET     DC H'2'                                                 RS0302
INIT254_1 EQU   *                                                RS0302
         STRING 'Can not interpret the given TCP= parm',               X
               INTO=LINE                                         RS0302
         BRAS  R14,SPACE1              Single Space              RS0302
         STRING ' Parm was: ',(JCLPARM,,T),                            X
               'and should be somethink like TCP=10.1.1.1:8000',       X
               INTO=LINE                                         RS0302
         BRAS  R14,SPACE1              Single Space              RS0302
         MVC   JCLPARM,BLANKS                                    RS0302
         NI    TCP_MODE,255-L'TCP_MODE TCPMODE=OFF               RS0302
         J     INIT230                 exit                      RS0302
*                                                                RS0302
*        Switch to default Mode because of some problems to      RS0302
*        establish a TCPIP-Connection                            RS0302
*                                                                RS0302
INIT254_2 EQU   *                                                RS0302
         STRING 'TCP/IP Returncode: ',                                 X
               (LRETCODE,F,L),' with RSN (ErrNo): ',                   X
               (LRSNCODE,F,L),' No Connection established',            X
               (JCLPARM),                                        RS0302X
               INTO=LINE                                         RS0302
         BRAS  R14,SPACE1              Single Space              RS0302
         MVC   JCLPARM,BLANKS                                    RS0302
         NI    TCP_MODE,255-L'TCP_MODE TCPMODE=OFF               RS0302
         J     INIT230                 exit                      RS0302
*
*        Set SHORT_PUTLINE mode
*
INIT255  EQU   *
         OI    PUTLINE,L'PUTLINE       PUTLINE mode
         OI    SHORT_PUTLINE,L'SHORT_PUTLINE SHORT_PUTLINE mode
         TM    TSO_ON_LINE,L'TSO_ON_LINE
         JZ    INIT260                 no, do not clear the screen
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         JO    INIT260                 yes, do not clear the screen
         STFSMODE ON,INITIAL=YES       CLEAR SCREEN
         STFSMODE OFF                  CLEAR SCREEN
*
*        Print Title line
*
INIT260  TIME  DEC
         STM   R0,R1,WKCELL1           HHMMSSHH,00YYDDDF
         STRING (TITLE,TITLE_L),INTO=LINE
         STRING (WKCELL1+4,P,YYYY-MM-DD),INTO=(LINE+60,20),            X
               2X,(WKCELL1,1,X),'.',(WKCELL1+1,1,X)
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRAS  R14,SPACE1          <== First line is title
*
*        Retrieve the address of IEFEB4UV in LPA
*
INIT290  BRAS  R1,*+12                 br around CL8
         DC    C'IEFEB4UV'             device type scan rtne
         BRAS  R14,LPASEARCH           GET ADDRESS OF IEFEB4UV ROUTINE
         ST    R15,IEFEB4UV            keep the address
*
*        establish the recovery environment
*
INIT295  EQU   *
         L     R2,=A(RECOVERY)         RECOVERY ROUTINE
         ESTAE (R2),                   RECOVERY ROUTINE                X
               CT,                     CREATE                          X
               PARAM=DYNAM,            PARAM FOR RECOVERY ROUTINE      X
               MF=(E,ESTAEL)
*
*        Inactivate any ESPIE environment created earlier
*        which could interfere with the trapping of my
*        own addressing and protection exceptions.
*
         ICM   R0,B'1111',TCBPIE       any ESPIE created earlier?
         JZ    ESPIE12                 no, exit
         TESTAUTH KEY=YES,STATE=YES,RBLEVEL=1    Check PSW key
         LTR   R15,R15                 running in mode=sup or key 0-7 ?
         JZ    ESPIE12                 yes, exit
         ESPIE SET,MF=(E,ESPIE11L)     Override existing PICA
         ST    R1,OLDPICA              Save its address for later
         J     ESPIE12
ESPIE11L ESPIE SET,ESPIE11X,PARAM=X'DEADBEEF',MF=L
ESPIE11X LR    R0,R1                   save addr of EPIE
         ICM   R1,B'1111',ESPIE11Z-ESPIE11X(R15)   get completion code
         ABEND (1)                     ABEND0C0
ESPIE11Z DC    X'80,0C0000'            S0C0 completion code
ESPIE12  EQU   *
*
         OI    INIT_DONE,L'INIT_DONE   initialization complete
*
INIT299  L     R14,INIT_R10_R11_R12    load return address
         BR    R14
INIT_R10_R11_R12 DC A(INIT_R10_ADDR,BASEADDR,INIT_R12_ADDR)
***********************************************************************
*                                                                     *
*        Initialize working storage.                                  *
*                                                                     *
*        This code is invoked twice, once to initialise the           *
*        unprotected work area and once again, when AUTH=ESR,         *
*        to initialise the protected work area.                       *
*                                                                     *
***********************************************************************
INIT600  EQU   *
         MVC   JSTCB,TCBJSTCB          THE JOB STEP TCB
         MVC   OLDPKF,TCBPKF           source key
         L     R1,CVTQLPAQ             first CDE on ALPAQ
         MVC   ALPACDE1,0(R1)          first CDE on ALPAQ
*
*        Move parm or command to JCLPARM
*
         ICM   R1,B'1111',PARMADDR     caller's R1
         JZ    INIT630                 zero, jump
         BRAS  R14,EXECKEY0            execute next instr in key=0
         L     R2,0(,R1)               PARM/CPPL
         BRAS  R14,EXECKEY0            execute next instr in key=0
         LH    R3,0(,R2)               length of parm or command
         LA    R4,2(,R2)               first byte of parm
         LTR   R2,R2                   INVOKED AS A PROGRAM?
         JM    INIT623M                YES, JUMP
*
         BRAS  R14,EXECKEY0            execute next instr in key=0
         LH    R4,2(,R2)               LENGTH OF COMMAND NAME
         LA    R0,4(,R4)               OFFSET TO MESSSAGE TEXT
         SLR   R3,R0                   LENGTH OF MESSAGE TEXT
         LA    R4,4(R4,R2)             START OF MESSAGE TEXT
*
INIT623M MVC   JCLPARM,BLANKS          initialize parm area
         LA    R0,L'JCLPARM            length of "to" area
         CLR   R3,R0                   adjust length
         JNH   *+6                     adjust length
         LR    R3,R0                   adjust length
         IC    R15,OLDPKF              source key
         MVCK  JCLPARM(R3),0(R4),R15   Move data to working-storage
*
*        Check that the current PRB points at my entry point
*        and save my own name for ATTACH.
*
INIT630  L     R2,TCBRBP               Point to INIT600 PRB
         USING RBBASIC,R2
****     ICM   R2,B'0111',RBLINK+1     Point to SHOWMVS PRB
         L     R2,RBLINK               Point to SHOWMVS PRB
         TM    RBCDFLGS,RBCDSYNC       invoked via SYNCH?
         JO    INIT635                 yes, jump
         SLR   R3,R3
         ICM   R3,B'0111',RBCDE1       my own CDE or LPDE
         USING CDENTRY,R3
         L     R0,ISF$SHOW+4           A(SHOWMVS+VL)
         LA    R1,ISF$SHOW-SHOWMVS     offset to other entry point
         ALR   R1,R0                   A(ISF$SHOW+VL)
         CL    R0,CDENTPT              current PRB pointing at me?
         JE    INIT634                 yes, jump
         CL    R1,CDENTPT              current PRB pointing at me?
         JNE   INIT637                 no, jump
INIT634  TM    CDATTR,CDMIN            minor entry point?
         JNO   INIT634S                no, jump
         L     R3,CDXLMJP              YES, POINT TO MAJOR CDE/LPDE
 ORG INIT634 <<<<<<<<
INIT634S ST    R3,OWN_CDE              my own CDE or LPDE
         TM    CDATTR,CDREN            am I re-entrant?
         JNO   INIT637                 no, jump
         MVC   OWN_NAME,CDNAME         my own name
         J     INIT640                 exit
*
*        Invoked via SYNCH
*
INIT635  L     R1,RBGRS15              addr of my entry point (R15)
*
*        If I've been invoked via SYNCH or BALR,
*        IDENTIFY my entry point for ATTACH.
*
INIT637  LA    R1,0(,R1)               get rid of AMODE bit
         STRING ((R1),,X),INTO=OWN_NAME convert addr to EBCDIC
*---------------------------------------------------------------------*
*                                                                     *
*        Determine address-space type                                 *
*                                                                     *
*---------------------------------------------------------------------*
INIT640  MVC   ZSCREENW,=A(L'LINE)     default ISPF screen size
         L     R2,TCBJSCB              my JSCB
         USING IEZJSCB,R2
         ICM   R3,B'1111',JSCBPSCB     TSO PSCB
         JNZ   INIT645L                TSO, jump
INIT645N OI    NON_TSO,L'NON_TSO
         J     INIT680                 no TSO, no ISPF
INIT645L ST    R3,PSCB@                save PSCB address
         MVC   UPT@,PSCBUPT-PSCB(R3)   save ECT address
         L     R3,PSAAOLD-PSA(,0)      point at ASCB
         USING ASCB,R3
         L     R4,ASCBASXB             my ASXB
         L     R4,ASXBLWA-ASXB(,R4)    Logon Work Area
         ST    R4,LWA@                 save LWA address
         USING LWA,R4
         MVC   ECT@,LWAPECT            SAVE FOR PUTLINE
         ICM   R14,B'1111',ASCBTSB     check TSB address
         JNZ   INIT645T                TSO on-line, jump
INIT645B OI    TSO_BATCH,L'TSO_BATCH
         J     INIT645X
INIT645T OI    TSO_ON_LINE,L'TSO_ON_LINE
         GTSIZE ,                      get terminal size
         ST    R1,ZSCREENW             save screen width
         MVC   TSB@,ASCBTSB            save TSB address
INIT645X EQU   *
         DROP  R3,R4                   ASCB,LWA
*---------------------------------------------------------------------*
*                                                                     *
*        Retrieve ISPF variables                                      *
*                                                                     *
*---------------------------------------------------------------------*
         WXTRN ISPLNK,ISPQRY           make them optional
INIT650  ICM   R0,B'1111',=A(ISPQRY)   ISPLINK linked with us?
         JNZ   INIT652                 yes, do not load it
         LOAD  EP=ISPQRY,ERRET=INIT680   LOAD ISPQRY
INIT652  ST    R0,ISPQRY@              STORE THE ADDRESS
         SYNCHX SYNCH_ISPQRY,RESTORE=YES invoke ISPQRY           RS1002
         LTR   R15,R15                 running under ISPF?
         JNZ   INIT680                 no, exit
         OI    ISPF_AVAILABLE,L'ISPF_AVAILABLE
*
         ICM   R0,B'1111',=A(ISPLNK)   ISPLINK linked with us?
         JNZ   INIT653                 yes, do not load it
         LOAD  EP=ISPLINK              LOAD ISPLINK
INIT653  ST    R0,ISPLINK              save address
         SYNCHX INIT660,RESTORE=YES                              RS1002
         CHI   R15,20                  ISPF really available?
         JL    INIT670                 yes, continue
         NI    ISPF_AVAILABLE,255-L'ISPF_AVAILABLE
         J     INIT680                 no, exit
*
*        This code always executes in key=8
*
INIT660  L     R13,UNPROTWK            Point at unprotected area
         ST    R0,ISPLINK              store A(ISPLINK)
         XCALL ISPLINK,                ISPF interface                  X
               (=C'CONTROL',           ISPF FUNCTION                   X
               =C'ERRORS',             Key-word                        X
               =C'RETURN'),            Key-word                        X
               ERRET=INIT669           invoked via REXX
*
         LA    R14,L'ZENVIR            LENGTH
         LA    R15,L'ZPDFREL           LENGTH
         LA    R0,L'ZAPPLID            LENGTH
         LA    R1,L'ZSCREENW           LENGTH
         STM   R14,R1,WORK256          LENGTH ARRAY
         XCALL ISPLINK,                                                X
               (=C'VCOPY',             ISPF SERVICE                    X
               VARLIST1,               Variable list                   X
               WORK256,                LENGTH ARRAY                    X
               ISPFVARS,               AREA ADDRESS                    X
               =C'MOVE')               MOVE MODE
         LA    R1,ISPFVARS             data returned by ISPF
INIT669  EXIT                          goback to SYNCH and INIT670
VARLIST1 DC    C'(ZENVIR ZPDFREL ZAPPLID ZSCREENW)',0H'0'
*
INIT670  LA    R14,L'ISPFVARS          length
         IC    R15,OLDPKF              source key
         MVCK  ISPFVARS(R14),0(R1),R15 Move data to protected storage
*
INIT671  CLI   ZPDFREL,C'P'            ZPDFREL variable exists?
         JE    INIT672                 yes, jump
         MVC   ZPDFREL,=C'PDF 3.1 '    no, use ISPF version
         MVC   ZPDFREL+4(3),ZENVIR+5   no, use ISPF version
*
INIT672  PACK  WKCELL3,ZSCREENW        convert to binary
         CVB   R0,WKCELL3              convert to binary
         CL    R0,=A(L'LINE)           too long?
         JL    *+8                     no, jump
         L     R0,=A(L'LINE)           yes, use line length
         ST    R0,ZSCREENW             save binary value
*
INIT674  MVC   NEWAPPL,=C'ISR '        convert to binary
         CLC   =C'ISF ',ZAPPLID        invoked under SDSF?
         JE    INIT679                 yes, JUMP
         CLC   =C'EPIC',ZAPPLID        invoked under EPIC/MVS?
         JE    INIT679                 yes, JUMP
         CLC   =C'SAR ',ZAPPLID        invoked under SAR?
         JE    INIT679                 yes, JUMP
         MVC   NEWAPPL,ZAPPLID         no, keep current APPLID
INIT679  EQU   *
*
*        Locate IGX00GSF module via the Type-3 SVC router table
*
INIT680  EQU   *
         TM    AUTHORIZED,L'AUTHORIZED
         JO    INIT690                 YES, EXIT
         MVI   IGX00NNN,X'FF'          IGX00NNN not available
         L     R1,CVTABEND             SECONDARY CVT
         L     R5,SCVTSVCT-SCVTSECT(,R1) START OF SVC TABLE
         USING SVCENTRY,R5
         L     R5,SVCENTRY+109*8       ADDR OF T3-ESR TABLE
         L     R1,SVCESRMX             get max ESR number
         LA    R0,1(,R1)               R0 = number of entries
         SLR   R1,R1                   init ctr
         LA    R5,SVCENTRY+8           SKIP HEADER
*loop
INIT681L L     R2,SVCEP                entry point
         CLC   =C'IGX00GSF',4(R2)      is this my own IGX00GSF ?
         JE    INIT685                 yes, exit loop
         LA    R5,SVCENTRY+8           NEXT SVC
         LA    R1,1(,R1)               count entries
         BRCT  R0,INIT681L             try next SVC entry
*endloop
*
*        If IGX00GSF was not found, check that the SDSF SVC (IGX00011)
*        is in MLPA or PLPA
*
INIT684  EQU   *
         BRAS  R1,*+12                 br around CL8
         DC    C'IGX00011'             ISFSVC
         BRAS  R14,LPASEARCH           GET ADDRESS OF IGX00011 ROUTINE
         LTR   R1,R1                   CDE/LPDE located ?
         JZ    INIT690                 NO, EXIT
         LA    R1,11                   IGX00011
INIT685  EQU   *
         STH   R1,IGX00NNN             IGX00NNN available
*
*        Check that I'm alone in this TCB
*
INIT686  EQU   *
         L     R9,PSATOLD-PSA(,0)      my TCB
         USING TCB,R9
         L     R5,TCBRBP               my PRB (SYNCH)
         USING RBBASIC,R5
         L     R5,RBLINK               SHOWMVS PRB
         SLR   R6,R6
         ICM   R6,B'0111',RBCDE1       my CDE
         USING CDENTRY,R6
         TM    CDATTR2,CDSYSLIB        LOADED FROM AUTHORIZED LIBRARY ?
         JZ    INIT690                 no, exit
         ICM   R0,B'1111',TCBTME       Active timer ?
         JNZ   INIT687                 not alone, jump
         TM    RBSTAB2,RBTCBNXT        oldest RB (end of chain) ?
         JO    INIT690                 yes, jump
*
INIT687  EQU   *
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         JO    INIT689                 YES, ATTACH
INIT688  EQU   *
         L     R1,PARMADDR             caller's PARM or CPPL
         ATTACHX EPLOC=CDNAME,          my own name                    X
               SZERO=NO,               do not share SP0                X
               ECB=SUB_ECB1,           end of task ECB                 X
               SF=(E,ATTACHL)                                    RS1002
         ST    R1,SUB_ECB1+4           save TCB address
         WAIT  ECB=SUB_ECB1            wait for sub-task completion
         DETACH SUB_ECB1+4             detach the sub-task
         LA    R15,12                  RC=12
         EXIT
*
*        ISPF
*
INIT689  EQU   *
         STRING 'CMD(',(OWN_NAME,,T),1X,(JCLPARM,,T),') MODE(FSCR)',   X
               INTO=WORK256
         CLC   NEWAPPL,ZAPPLID         APPLID=ISR?
         JE    INIT695                 yes, jump
         STRING (WORK256,,T),' NEWAPPL(',(NEWAPPL,,T),')',INTO=WORK256
         J     INIT695                 yes, jump
*
*        re-invoke myself
*
INIT690  EQU   *
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         JZ    INIT699                 not TSO+ISPF, exit
         CLC   NEWAPPL,ZAPPLID         APPLID=ISR?
         JE    INIT699                 yes, jump
         STRING 'PGM(',(OWN_NAME,,T),') PARM(',(JCLPARM,,T),           X
               ') NEWAPPL(',(NEWAPPL,,T),')',INTO=WORK256
INIT695  EQU   *
         XCALL ISPLINK,                                                X
               (=C'SELECT',            ISPF SERVICE                    X
               =A(L'WORK256),          length                          X
               WORK256)                text
         LTR   R2,R15                  OK?
         JZ    INIT698                 yes, jump
         STRING 'SELECT Service failed at label INIT185, R15=',        X
               ((R2),,L),INTO=CSVDWORK
         TPUT  CSVDWORK,(R15)          issue error message
         TPUT  WORK256,256             issue error message
INIT698  EQU   *
         LA    R15,200(,R2)            auth failure code
         EXIT                          goback
INIT699  SLR   R15,R15                 RC=0
         EXIT                          goback
*---------------------------------------------------------------------*
*                                                                     *
*        Start key-word definitions for TSO Parse                     *
*                                                                     *
*---------------------------------------------------------------------*
PCLCSECT IKJPARM
PCLCSECT RMODE ANY
CAPS_PCE IKJKEYWD
         IKJNAME 'CAPS'
EDIT_PCE IKJKEYWD
         IKJNAME 'EDIT'
PUTLINE_PCE IKJKEYWD
         IKJNAME 'PUTLINE'
*
         TITLE 'SHOWMVS &REL - Authorization State'              MK0803
*---------------------------------------------------------------------*
*                                                                     *
*Just a quick check to indicate if we are running authorized          *
*                                                                     *
*---------------------------------------------------------------------*
AUTHLVL  BEGIN_PROC KW=AUTHLVL,BASEREG=NO                        MK0803
         TM    AUTHORIZED,L'AUTHORIZED Are we authorized?        MK0803
         JO    AUTHLVL1                Y, skip the not           NK0803
         STRING 'SHOWMVS is ** NOT ** running authorized',INTO=LINE
         J     AUTHLVL9                                          MK0803
AUTHLVL1 EQU   *                                                 MK0803
         STRING 'SHOWMVS is running authorized',INTO=LINE        MK0803
AUTHLVL9 DS    0H                                                MK0803
         BRAS  R14,SPACE2                                        MK0803
         END_PROC                                                MK0803
*
         TITLE 'SHOWMVS &REL - Operating System Level'
*---------------------------------------------------------------------*
*                                                                     *
*Operating System:                                                    *
*                                                                     *
*  OS/390 01.01.00         CVTOSLVL: FF E7 C4 00 00                   *
*                                                                     *
*  DFSMS/MVS 1.1.0         Licensed Components: hsm dss rmm           *
*                                                                     *
*  JES2 Level: OS 1.1.0    NJE Node: SYS1                             *
*                                                                     *
*---------------------------------------------------------------------*
SPLEVEL  BEGIN_PROC KW=SPLEVEL,BASEREG=YES  PGSER require        RS0302
         STRING '&TITLEPFX.Operating System:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R5,CVTJESCT             JES COMM TABLE
         USING JESCT,R5
         MVC   PRISUBNM,JESPJESN       NAME OF PRIMARY SUB-SYSTEM
         MVC   PRISUBTY,=C'JES2'       TYPE OF PRIMARY SUB-SYSTEM
         L     R7,CVTDFA               DATA FACILITIES AREA
         USING DFA,R7
         L     R4,CVTECVT              -> ECVT
         USING ECVT,R4
         ST    R4,ECVT@                save addr for later
         GBLC  &IHADFARELS                                      HDZ11C0
&SMSLEVEL SETC '&IHADFARELS'
*
*        Make last page read-only (output-Buffer)
*
         LM    R2,R3,LINE1PTR          addr/len of lines buffer
         ALR   R2,R3                   first byte after buffer
         BCTR  R2,0                    last byte of last page
         PGSER R,PROTECT,A=(R2),EA=(R2)
         STRING 2X,(ECVTPNAM,,T),1X,   OS/390                          X
               ECVTPVER,'.',ECVTPREL,'.',ECVTPMOD,                     X
               3X,'FMID: ',(CVTPRODI,8),3X,                    DL9809  X
               'CVTOSLVL: ',                                   DL9809  X
               (CVTOSLV0,1,X),1X,(CVTOSLV1,1,X),1X,                    X
               (CVTOSLV2,1,X),1X,(CVTOSLV3,1,X),1X,                    X
               (CVTOSLV4,1,X),1X,(CVTOSLV5,1,X),1X,                    X
               (CVTOSLV6,1,X),1X,(CVTOSLV7,1,X),1X,                    X
               INTO=LINE
         OI    HBB6601,L'HBB6601       keep it for later
         L     R1,CVTLINK              SYS1.LINKLIB
         LOAD  EP=IFAEDLIS,DCB=(R1)    ENABLE/DISABLE LIST
         ST    R0,IFAEDLIS             SAVE EP ADDRESS
&MVSLEVEL SETC '601'
         AIF   (D'CVTH6601).SPLVL31A
         STRING 'ShowMvs V701 is designed to run under OS/390 R1 and', X
               ' above',INTO=LINE
         BRAS  R14,SPACE1
         STRING 'Your environment indicated you are running an older', X
               ' system',INTO=LINE
         BRAS  R14,SPACE1
         STRING 'Please use ShowMvs V629 for older releases',INTO=LINE
         BRAS  R14,SPACE1
.SPLVL31A ANOP
         AIF   (NOT D'CVTJ6602).SPLVL31S
         TM    CVTOSLV1,CVTJ6602       OS/390 R2?
         JZ    SPLVL31S                no, jump
         OI    JBB6602,L'JBB6602       keep it for later
&MVSLEVEL SETC '602'
         AIF   (NOT D'CVTH6603).SPLVL31S
         TM    CVTOSLV1,CVTH6603       OS/390 R3?
         JZ    SPLVL31S                no, jump
         OI    HBB6603,L'HBB6603       keep it for later
&MVSLEVEL SETC '603'
         AIF   (NOT D'CVTJ6604).SPLVL31S
         TM    CVTOSLV2,CVTJ6604       OS/390 R4?
         JZ    SPLVL31S                no, jump
         OI    JBB6604,L'JBB6604       keep it for later
         ICM   R0,B'1111',ECVTDLPF     first CDE on DLPAQ
         JZ    *+8                     zero, ignore
         ST    R0,ALPACDE1             first CDE on ALPAQ or DLPAQ
&MVSLEVEL SETC '604'
         AIF   (NOT D'CVTH6605).SPLVL31S
         TM    CVTOSLV2,CVTH6605       OS/390 R5?
         JZ    SPLVL31S                no, jump
         OI    HBB6605,L'HBB6605       keep it for later
&MVSLEVEL SETC '605'
         AIF   (NOT D'CVTH6606).SPLVL31S
         TM    CVTOSLV2,CVTH6606       OS/390 R6?
         JZ    SPLVL31S                no, jump
         OI    HBB6606,L'HBB6606       keep it for later
&MVSLEVEL SETC '606'
         AIF   (NOT D'CVTJ6607).SPLVL31S
         TM    CVTOSLV2,CVTJ6607       OS/390 R7?
         JZ    SPLVL31S                no, jump
         OI    JBB6607,L'JBB6607       keep it for later
&MVSLEVEL SETC '607'
         AIF   (NOT D'CVTH6608).SPLVL31S
         TM    CVTOSLV2,CVTH6608       OS/390 R8?
         JZ    SPLVL31S                no, jump
         OI    HBB6608,L'HBB6608       keep it for later
&MVSLEVEL SETC '608'
         AIF   (NOT D'CVTJ6609).SPLVL31S
         TM    CVTOSLV2,CVTJ6609       OS/390 R9?
         JZ    SPLVL31S                no, jump
         OI    JBB6609,L'JBB6609       keep it for later
&MVSLEVEL SETC '609'
         AIF   (NOT D'CVTH7703).SPLVL31S                         RS0800
         TM    CVTOSLV2,CVTH7703       OS/390 R10?               RS0800
         JZ    SPLVL31S                no, jump                  RS0800
         OI    HBB7703,L'HBB7703       keep it for later         RS0800
&MVSLEVEL SETC '701'                                             RS0800
         AIF   (NOT D'CVTJ7713).SPLVL31S                         RS1000
         TM    CVTOSLV3,CVTJ7713       z/OS R1?                  RS0701
         JZ    SPLVL31S                no, jump                  RS1000
         OI    JBB7713,L'JBB7713       keep it for later         RS0301
&MVSLEVEL SETC '702'                                             RS1000
         AIF   (NOT D'CVTH7705).SPLVL31S                         RS0701
         TM    CVTOSLV3,CVTH7705       z/OS R2?                  RS0701
         JZ    SPLVL31S                no, jump                  RS0701
         OI    HBB7705,L'HBB7705       keep it for later         RS0701
&MVSLEVEL SETC '703'                                             RS0701
         AIF   (NOT D'CVTH7706).SPLVL31S                         RS0102
         TM    CVTOSLV3,CVTH7706       z/OS R3?                  RS0102
         JZ    SPLVL31S                no, jump                  RS0102
         OI    HBB7706,L'HBB7706       keep it for later         RS0102
&MVSLEVEL SETC '704'                                             RS0602
         AIF   (NOT D'CVTH7707).SPLVL31S                         RS0602
         TM    CVTOSLV3,CVTH7707       z/OS R4?                  RS0602
         JZ    SPLVL31S                no, jump                  RS0602
         OI    HBB7707,L'HBB7707       keep it for later         RS0602
&MVSLEVEL SETC '705'                                             RS1103
         AIF   (NOT D'CVTH7708).SPLVL31S                         RS1103
         TM    CVTOSLV3,CVTH7708       z/OS R5?                  RS1103
         JZ    SPLVL31S                no, jump                  RS1103
         OI    HBB7708,L'HBB7708       keep it for later         RS1103
.SPLVL31S ANOP
SPLVL31S BRAS  R14,SPACE2              Double Space
         AIF   (NOT D'CVTVERID).CVT1N                               JWM
         CLI   CVTVERID,C' '           blank                        JWM
         JE    CVT1N                   yes                          JWM
         STRING 38X,'CVTVERID: ',CVTVERID,INTO=LINE                 JWM
         BRAS  R14,SPACE2              Double Space                 JWM
CVT1N    EQU   *
.CVT1N   ANOP
*
*        DFSMS/MVS LEVEL
*
*        In future release I have to redesign the complete       RS0302
*        section                                                 RS0302
         CLI   DFAPROD,DFADFSMS        DO WE HAVE DFSMS only?
         JE    SPLVL31E                  yes,not z/OS or OS/390  RS1100
         AIF   (NOT D'DFAZOS).SPLVL31D jump around               RS0302
         TM    DFAPROD,DFAZOS          DO WE HAVE DFSMS z/OS?    RS0302
         JNO   SPLVL31D                  no,jump                 RS0302
         OI    HDZ11G0,L'HDZ11G0       SET FLAG ON               RS0302
.SPLVL31D ANOP                                                   RS0302
SPLVL31D EQU   *                                                 RS0302
         AIF   (NOT D'DFAOS390).SPLVL31E jump around             RS1100
         TM    DFAPROD,DFAOS390        DO WE HAVE DFSMS z/OS?    RS0302
         JNO   SPLVL320                  no,jump                 RS0302
         OI    HDZ11C0,L'HDZ11C0       turn on all prev.         RS1100
         OI    HDZ11D0,L'HDZ11D0       turn on all prev.         RS1100
         OI    HDZ11E0,L'HDZ11E0       turn on all prev.         RS1100
         OI    HDZ11F0,L'HDZ11F0       SET FLAG ON               RS1100
.SPLVL31E ANOP                                                   RS1100
SPLVL31E EQU   *                                                 RS1100
         L     R2,CVTLINK              link-list DCB
         LOAD  EP=IGWASMS,DCB=(R2)     SMS callable service         +RS
         ST    R0,IGWASMS              SAVE EP ADDRESS              +RS
         LOAD  EP=IGWLSHR,DCB=(R2)     SMS callable service         +RS
         ST    R0,IGWLSHR              SAVE EP ADDRESS              +RS
         STRING '  DFSMS/MVS ',                                    @385X
               (DFAVER,FL1,L),'.',     VERS                        @385X
               (DFARLSE,FL1,L),'.',    REL                         @385X
               (DFAMOD,FL1,L),         MOD                         @385X
               INTO=LINE
         CLI   DFARLSE,3               1.3.0 ?
         JL    *+8                     no, jump
         OI    HDZ11C0,L'HDZ11C0       SET FLAG ON
         CLI   DFARLSE,4               1.4.0 ?
         JL    *+8                     no, jump
         OI    HDZ11D0,L'HDZ11D0       SET FLAG ON
         CLI   DFARLSE,5               1.5.0 ?
         JL    *+8                     no, jump
         OI    HDZ11E0,L'HDZ11E0       SET FLAG ON
         AIF   (NOT D'DFADYNL).SPLVL31U                        +RS0199
         TM    DFAFEAT4,DFADYNL        Dynamic linklist?       DL9809
         JNO   SPLVL31U                no, jump                DL9809
         STRING (LINE,,T),                                     DL9809  X
               9X,'Dynamic Linklist is supported',INTO=LINE    DL9809
         BRAS  R14,SPACE1              Single Space
SPLVL31U EQU   *                                               DL9809
.SPLVL31U ANOP                                                 +RS0199
         AIF   (NOT D'DFADYLPA).SPLVL31V                       RS0400
         TM    DFAFEAT4,DFADYLPA       Dynamic LPA available?  DL9809
         JNO   SPLVL31V                no, jump                DL9809
         STRING 26X,'Dynamic LPA is available',INTO=LINE       DL9809
         BRAS  R14,SPACE1              Single Space            DL9809
SPLVL31V EQU   *                                               DL9809
.SPLVL31V ANOP                                                 RS0400
         AIF   (NOT D'DFAFORK).SPLVL31W                       RS0400
         TM    DFAFEAT4,DFAFORK        DFSMS loader fork?      DL9809
         JNO   SPLVL31W                no, jump                DL9809
         STRING 26X,'DFSMS Loader Fork Exit is present',INTO=LINE DL98
         BRAS  R14,SPACE1              Single Space                 +JM
SPLVL31W EQU   *                                                 RS0799
.SPLVL31W ANOP                                                   RS0400
         AIF   (NOT D'DFASNBK).SPLVL31X                          RS0400
         TM    DFAFEAT4,DFASNBK        DFSMS Snapshot?           RS0799
         JNO   SPLVL31X                no, jump                  RS0799
         STRING 26X,'DFSMS RVA SnapShot is available',INTO=LINE  RS0799
         BRAS  R14,SPACE1              Single Space              RS0799
SPLVL31X EQU   *                                                 RS0799
.SPLVL31X ANOP                                                   RS0400
         AIF   (NOT D'DFASNAP).SPLVL31Y                        RS624
         TM    DFAFEAT4,DFASNAP        DFSMS SnapShow API?       RS0799
         JNO   SPLVL31Y                no, jump                  RS0799
         STRING 26X,'DFSMS RVA SnapShot API is available',INTO=LINE
         BRAS  R14,SPACE1              Single Space              RS0799
SPLVL31Y EQU   *
.SPLVL31Y ANOP                                                   HDZ11E
         AIF   (NOT D'DFAVERBO).SPLVL31Z                         HDZ11E
         TM    DFAVERBO,DFATVS         Transactional Vsam inst   HDZ11E
         JNO   SPLVL31Z                no, jump                  HDZ11E
         STRING 26X,'Transactional Vsam is installed',INTO=LINE  HDZ11E
         BRAS  R14,SPACE1              Single Space              HDZ11E
SPLVL31Z EQU   *                                                 HDZ11E
.SPLVL31Z ANOP                                                   HDZ11E
         BRAS  R14,BLANK1              Double Space                 +JM
SPLVL320 EQU   *                                                 RS0799
*
*        JES2 LEVEL (MVS/ESA ONLY)
*
SPLVL32J EQU   *
         L     R6,JESCTEXT             JESCT Extension
         USING JESPEXT,R6
*
         LA    R0,=CL8'HASMHCCT'       MODEL NAME ($HCCT)
         BRAS  R14,DOBLDL3             issue BLDL (tasklib)
         LTR   R15,R15                 HASMHCCT module found?
         JNZ   SPLVL32K                NO, JUMP
         OI    SHASMIG,L'SHASMIG       SHASMIG available
SPLVL32K EQU   *
*
         L     R5,JESSSCT              FIRST JSCVT
         USING SSCT,R5
*
*        Scan SSCT chain to locate the primary sub-system
*
*loop
SPLVL32L CLC   SSCTSNAM,PRISUBNM       is this the primary sub-system?
         JE    SPLVL32M                yes, exit loop
         ICM   R5,B'1111',SSCTSCTA     NEXT SSCVT
         JNZ   SPLVL32L                check next sub-system
*endloop
         J     SPLVL32N                exit
SPLVL32M ST    R5,PRISUBCT             JSCVT for primary sub-system
         CLI   SSCTSSID,SSCTJES3       TYPE=JES3?
         JNE   SPLVL32N                no, jump
         MVI   PRISUBTY+3,C'3'         TYPE OF PRIMARY SUB-SYSTEM
SPLVL32N EQU   *
*
*        Retrieve JES version and NJE node using the SSVI interface.
*
         LA    R1,PRISUBNM             POINT AT SUB-SYSTEM NAME
         BRAS  R14,GET_SSVI         <- get SSVI info
         LTR   R15,R15                 supported by this sub-system?
         JNZ   SPLVL32X                no, jump
         USING SSVI,R1
         LA    R2,SSVIVER1             start of data
         USING SSVIVDAT,R2
         LH    R0,SSVIVLEN             length
         LA    R3,SSVIDAT              START OF DATA
*loop
SPLVL32E CLC   =C',JES_NODE=',0(R3)    KEY-WORD FOUND?
         JE    SPLVL32F                YES, EXIT LOOP
         LA    R3,1(,R3)               NO, BUMP POINTER UP
         BRCT  R0,SPLVL32E             KEEP ON SCANNING
*endloop
         J     SPLVL32X                NJE node not found
SPLVL32F LA    R4,10+1(,R3)            point at NJE node
         STRING 2X,PRISUBNM,           JES2                            X
               ' Level: ',SSVIVERS,    OS 1.1.0                        X
               '    NJE Node: ',((R4),8),                              X
               '    DSNID: ',JESDSNID,                                 X
               INTO=LINE
         J     SPLVL99                 exit
         DROP  R1,R2                   SSVI,SSVIVDAT
SPLVL32X DS    0H                      point at NJE node
         STRING '  Unable to detect JES level',INTO=LINE
.SPLVL99 ANOP
SPLVL99  TR    LINE,TRTPRINT           clean up non-printable
         BRAS  R14,SPACE2              Double Space
         END_PROC
*
*        HASP Common Storage Communication Table
*
HCCT     DSECT
CCTVR430 EQU   5                   HCCT version equate (430)
CCTVR420 EQU   1                   HCCT version equate (420)
CCTVRSN  DS    AL1(CCTVR430)    00 CONTROL BLOCK VERSION
         DS    XL7              01 RESERVED FOR FUTURE USE
CCTSSSMN DS   0C'HASPSSSM'      08 HASPSSSM LOAD MODULE NAME (420)
CCTOFSTB DS    A                08 Address of offset table (430)
         DS    A                12 Reserved for future use
CCTSMBEG DS   0F                16 HASPSSSM/HASPAM START ADDR (420)
CCTPVRSN DS    C'SP 4.3.0'      16 SP V.R.M, product version (430)
*
CCTSNV   DSECT
CCTSSNM  DS    C'JES2'             NAME OF SUBSYSTEM
CCTSSVS  DS    C'430 '             VERSION, RELEASE, MOD
*
CCTNDE   DSECT
CCTNDENL DS    X'0'                Actual length of node name
CCTNDENM DS    C'POKVSSY2'         NODE NAME
         TITLE 'SHOWMVS &REL - Opening Message'
*---------------------------------------------------------------------*
*                                                                     *
*        Issue an opening message when running under ISPF             *
*                                                                     *
*---------------------------------------------------------------------*
OPENMSG  BEGIN_PROC BASEREG=YES         SYNCH (XCALL) require    RS0302
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         JZ    OPENMSG9                no, exit
         TM    HARDCOPY,L'HARDCOPY     Hard-copy mode?
         JO    OPENMSG9                yes, exit
         TM    PUTLINE,L'PUTLINE       PUTLINE mode?
         JO    OPENMSG9                yes, exit
         STRING 'SHOWMVS &REL',INTO=LINE
         ST    R15,WKCELL1             save length
         XCALL ISPLINK,(=C'VREPLACE',=C'ZEDSMSG ',WKCELL1,LINE),       X
               LINKAGE=SYNCH           KEY=8
*
*        Using the official ASMH/HLASM distinction trick,
*        simulate the SYSVER and SYSDATC variables
*        of HLASM when assembled under ASMH
*
         LCLA  &ASMH_HLASM
         AIF   (T'&ASMH_HLASM EQ 'N').ASMH1X
&SYSVER  SETC  'ASMH'
&SYSDATC SETC  '20'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)
         AIF   ('&SYSDATC' LT '20500000').ASMH1X
&SYSDATC SETC  '19'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)
.ASMH1X  ANOP                                                                019
         GBLC  &STRING_MACRO_VERSION                                         019
*
         STRING 'REL=&REL &SYSDATC &SYSTIME',                          X
               ' MVS=&MVSLEVEL SMS=&SMSLEVEL',                         X
               ' HLASM=&SYSVER',                                       X
               ' STRING=R&STRING_MACRO_VERSION',                       X
               ' Switches=',(SWITCHES,,X),                             X
               ' Auth=Yes,ESR=IGX',(IGX00NNN,H,R5Z),                   X
               INTO=WORK256
         LA    R1,WORK256-16(R15)      point at YES
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED ?
         JO    OPENMSG4                yes, jump
         STRING 'No,ESR=N/A',INTO=((R1),32)
         CLI   IGX00NNN,X'FF'          ESR available?
         JE    OPENMSG5                no, jump
         STRING 'No,ESR=IGX',(IGX00NNN,H,R5Z),                         X
               ',RC=',(AUTH_RC,FL1,L),                                 X
               INTO=((R1),32)
         J     OPENMSG5                continue
OPENMSG4 EQU   *
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?
         JO    OPENMSG5                yes, jump
         STRING 'APF',INTO=((R1),32)   no, must be APF
OPENMSG5 EQU   *
*
*        Retrieve the dsname of the library I've been loaded from
*
         L     R1,OWN_CDE              own CDE
         L     R0,CDENTPT-CDENTRY(,R1) R0=EP ADDR
         BRAS  R14,CSVDSN              get dsname
         LTR   R15,R15                 dsname found?
         JNZ   OPENMSG8                no, jump
         STRING (WORK256,,T),1X,((R1),44,T),'(',(OWN_NAME,,T),')',     X
               INTO=WORK256
*
OPENMSG8 XCALL ISPLINK,                                                X
               (=C'VREPLACE',=C'ZEDLMSG ',=A(L'WORK256),WORK256),      X
               LINKAGE=SYNCH           KEY=8
         XCALL ISPLINK,(=C'SETMSG ',=C'ISRZ000 '),                     X
               LINKAGE=SYNCH           KEY=8
OPENMSG9 END_PROC
         TITLE 'SHOWMVS &REL - Last IPL'
*---------------------------------------------------------------------*
*                                                                     *
*Last IPL:                                                            *
*                                                                     *
*  Date: Thursday 1989-12-16 (Yesterday) Time: 09.08 Julian: 1989.350 *
*  From: MVSRES/02E0  NUC Id: 1  Type: Warm Start  CVTUSER: 00C80000  *
*  Last Cold Start (CLPA):  1989-11-02   Time: 11.12.13               *
*  Last Quick Start (CVIO): 1989-12-03   Time: 12.13.14               *
*  SYSPLEX name: NSSPLEX   SYSPLEX ID: D1  OpenMVS available: YES     *
*  Timezone: E 01.00.00  Leap-Seconds:                                *
*                                                                     *
*---------------------------------------------------------------------*
IPLDATA  BEGIN_PROC KW=IPL,BASEREG=NO                            RS0302
         STRING '&TITLEPFX.Last IPL:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R6,CVTSMCA              SMF SMCA
         USING SMCABASE,R6
*
*        CALCULATE NUMBER OF DAYS SINCE LAST IPL
*
         TIME  DEC                     TODAY'S GMT DATE
         L     R15,=V(JUL2DAYS)        julian-days calc rtne
         BALR  R14,R15                 calc num of days since 1901.001
         LR    R2,R0                   save # of days
         L     R1,SMCAIDTE             IPL's YY.DDD
         L     R15,=V(JUL2DAYS)        julian-days calc rtne
         BALR  R14,R15                 calc num of days since 1901.001
         LR    R7,R1                   POINT TO DAY-OF-THE-WEEK
         STRING '(Today)',INTO=NEXTLINE
         SR    R2,R0                   R2 = days since IPL
         JZ    IPLDATA6                TODAY, JUMP
         STRING '(Yesterday)',INTO=NEXTLINE
         CHI   R2,1                    WAS IT YESTERDAY?
         JE    IPLDATA6                YES, JUMP
         STRING '(',((R2),,L0),' days ago)',INTO=NEXTLINE
*
*        CONVERT IPL TIME FROM BINARY TO HH:MM
*
IPLDATA6 EQU   *
         L     R1,SMCAITME             IPL TIME (BINARY)
         BRAS  R14,BINTIME             convert time to HH MM SS
         ZAP   WKCELL1,SMCAIDTE        PACKED JULIAN DATE
         AP    WKCELL1,=P'1900000'     00YY -> 19YY
         STRING '  Date: ',((R7),9,T),1X,                              X
               (SMCAIDTE,P,YYYY-MM-DD),1X,(NEXTLINE,,T),               X
               '    Time: ',((R3),,R2Z),'.',((R2),,R2Z),               X
               '    Julian: ',(WKCELL1+4,2,X),'.',                     X
               (WKCELL1+6,P,R3Z),INTO=LINE
         BRAS  R14,SPACE1          <== next line
*
         L     R7,CVTSYSAD             IPL UCB
         USING UCBOB,R7
         L     R3,CVTEXT2              CVT EXTENSION
         USING CVTXTNT2,R3
         L     R4,CVTASMVT             POINT TO ASM VECTOR TABLE
         USING ASMVT,R4
         LA    R5,=C'Warm '            warm start  (noCVIO,noCLPA)
         TM    ASMFLAG2,ASMWARM        Warm START ?
         JO    IPLDATA7                YES, JUMP
         LA    R5,=C'Quick'            quick start (CVIO,noCLPA)
         TM    ASMFLAG2,ASMQUICK       Quick START ?
         JO    IPLDATA7                YES, JUMP
         LA    R5,=C'Cold '            Cold start  (CVIO,CLPA)
IPLDATA7 EQU   *
         UCB_NAME LEFT                 get 4-character device number
         STRING  '  From: ',UCBVOLI,'/',UCB_NAME,                      X
               '    NUC Id: ',CVTNUCLS,                                X
               '    Type: ',((R5),5,T),' Start',                       X
               '    CVTUSER: ',(CVTUSER,,X),INTO=LINE
         BRAS  R14,SPACE1
*
*        Reserve blank line for LASTCLPA routine in sub-task
*
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         JZ    IPLDATA8                NO, JUMP
         L     R1,ASMPART              POINT TO PAGE ACT REF TABLE
         LA    R1,PARTENTS-PART(,R1)   FIRST PART ENTRY (PLPA)
         L     R7,PAREUCBP-PARTENT(,R1) UCB address (PLPA)
         USING UCBOB,R7
         TM    UCBTBYT4,X'0E'          3380/3390?
         JNO   IPLDATA8                no, exit
         CLI   0(R5),C'C'              Cold START ?
         JE    IPLDATA8                yes, exit
         ST    R10,CLPALINE            save line addr for sub-task
         STRING '  ?',INTO=LINE        place-holder
         BRAS  R14,SPACE1
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         CLI   0(R5),C'Q'              Quick START ?
         JE    IPLDATA8                YES, JUMP
         ST    R10,CVIOLINE            save line addr for sub-task
         STRING '  ?',INTO=LINE        place-holder
         BRAS  R14,SPACE1
IPLDATA8 EQU   *
*
*        SYSPLEX name, ID, Sysname, Lparname
*
         L     R4,CVTECVT              -> ECVT
         USING ECVT,R4                                         JWMJUN95
         STRING '  SYSPLEX name: ',ECVTSPLX,2X,                JWMJUN95X
               'SYSPLEX ID: ',ECVTCLON,2X,                     JWMJUN95X
               'Sysname: ',CVTSNAME,2X,                          RS0103X
               'Lparname: ',ECVTLPNM,                            RS0103X
               INTO=LINE
.ECVT98  ANOP
ECVT99   DS    0H
         BRAS  R14,SPACE1                                      JWMJUN95
.ECVT99  ANOP
         AIF   (NOT D'CVTH6606).CVTNFO01                         JM1199
         L     R7,CVTABEND                                       JM1199
         USING SCVTSECT,R7                                       JM1199
         ICM   R2,15,SCVTAMSP          Sys  Ava Manager active   JM1199
         JZ    CVTNFO01                no                        JM1199
         STRING '  System Availability Manager active',INTO=LINE JM1199
         BRAS  R14,SPACE1              Single Space              JM1199
CVTNFO01 DS    0H                                                JM1199
         DROP  R7                                                JM1199
.CVTNFO01 ANOP                                                   JM1199
.CVTNFO99 ANOP                                                   JM1199
*
*        TIMEZONE from CLOCKxx
*
         MVI   WKCELL1,C'W'            east                      RS0402
*        ICM   R1,B'1111',CVTTZ        diff. local and GMT       RS1101
         STRING '00','.','00','.','00',INTO=STCKTIME  Default !! RS0402
         ICM   R1,B'1111',CVTLDTOL     diff. local and GMT       RS1101
         JZ    IPLDAT42                is it zero ?              RS0402
         JM    *+8                     Negative difference       RS0402
         MVI   WKCELL1,C'E'            positive                  RS0402
         LM    R0,R1,CVTLDTO           get Timezone TOD          RS1101
         LPR   R0,R0                   make it positive
         ICM   R15,B'1111',CVTLDTOL    was it negative ?
         JP    IPLDAT40                  no leave
         BCTR  R0,0                    borrow
IPLDAT40 LPR   R1,R1                   make it positive
         STM   R0,R1,WKCELL2           store
         LA    R1,WKCELL2              set R1 to this TOD
         BRAS  R14,STCKCONV            calculate the time/day
IPLDAT42 STRING  '  Timezone: ',(WKCELL1,1),1X,   E/W            RS0402X
               (STCKTIME,8),1X,'Leap Seconds: ',(CVTLSO,,X),INTO=LINE
         BRAS  R14,SPACE2                                        RS1101
.IPLDAT99 ANOP
IPLDAT99 DS 0H
         END_PROC
         TITLE 'SHOWMVS &REL - Installed Software Products'
*---------------------------------------------------------------------*
*                                                                     *
*System Software:                                                     *
*                                                                     *
*  TSO/E Level:   2.4.0                                               *
*                                                                     *
*  ISPF Level:    3.5     PDF 3.5                                     *
*                                                                     *
*  RACF Level:    1.9                                                 *
*                                                                     *
*  ICKDSF Level:  1.16.0                                              *
*                                                                     *
*  VTAM Level:    3.4.1       VE341           00BFF288                *
*                                                                     *
*  DB2 Level:     5740XYR01   SSCTSNAM=DSN    Inactive                *
*                                                                     *
*  CICS Level:    2.1.2       DFHCSVC                                 *
*                                                                     *
*  LE Version:    2.10.0                                              *
*                                                                     *
*  DB2 Level:     6.1.0       SSCTSNAM=DB2P   Active                  *
*  MQ Series:     2.1.0       SSCTSNAM=MQSP   Active                  *
*                                                                     *
*  TCP/IP:        97.231 5655-HAL    MVPTASK                          *
*    Tseb     SI Proc     Ver   Tsdb     Tsdx     Asid TraceOpts Statu*
*    0C2700F8 01 TCPIP    05.10 0B841000 0B8410C8 0051 80000000  Activ*
*                                                                     *
*---------------------------------------------------------------------*
PRODUCTS BEGIN_PROC KW=PRODUCTS,BASEREG=NO                       RS0302
         STRING '&TITLEPFX.System Software:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
*        Retrieve the address of the ACF2 SSVT
*
         L     R4,CVTJESCT             JES COMM TABLE
         USING JESCT,R4
         L     R5,JESSSCT              FIRST JSCVT
         USING SSCT,R5
*LOOP
ACF2CVT1 ICM   R6,B'1111',SSCTSSVT     SUB-SYSTEM VECTOR TABLE
         JZ    ACF2CVT2                INACTIVE SUB-SYSTEM
         USING SSVT,R6
         CLC   =C'ACF2',SSCTSNAM       IS THIS ACF2?
         JNE   ACF2CVT2                NO, JUMP
         MVC   ACF2CVT,SSCTSUSE        save ACCVT address
ACF2CVT2 ICM   R5,B'1111',SSCTSCTA     NEXT SSCVT
         JNZ   ACF2CVT1
*ENDLOOP
         L     R7,CVTTVT               TSO VECTOR TABLE
         USING TSVT,R7
         PACK  WKCELL1,TSVTLREL        2-DIGIT RELEASE NUMBER
         STRING '  TSO/E Level:   ',TSVTLVER,'.',(WKCELL1,P,L0),'.',   X
               TSVTLMOD,INTO=LINE
         BRAS  R14,SPACE2              Double Space
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         JNO   DFDSS                   no jump
         STRING '  ISPF Level:    ',(ZENVIR+5,3),                      X
               5X,ZPDFREL,INTO=LINE
         BRAS  R14,SPACE2              Double Space
DFDSS    DS    0H
         BRAS  R0,DOBLDL1              issue BLDL
         DC    C'ADRRELVL'             DF/DSS
         LTR   R15,R15
         JNZ   DFDSS8                  NOT FOUND, JUMP
         BRAS  R14,SAFELOAD            load ADRRELVL
         STRING '  DF/DSS Level:  ',(1(R1),FL1,L),'.',                 X
               (2(R1),FL1,L),'.',(3(R1),FL1,L),INTO=LINE
DFDSS8   BRAS  R14,SPACE2              Double Space
*
         AIF   (D'CVTH7703).DFDSS9     OS/390 R10 jump around    RS1001
         ICM   R7,B'1111',CVTHSM       HSM VECTOR TABLE
         JZ    RACFVM00
         USING MQCT,R7
         CLI   MQCTID,C'Q'             CHECK CB ID
         JNE   RACFVM00
*        TM    MQCTFLG1,MQCTFACT       HSM active?               RS0601
*        JZ    RACFVM00                   no, leave              RS0601
         STRING '  DF/HSM Level: ',MQCTVER,'.',MQCTREL,'.',MQCTMOD,    X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
*
.DFDSS9  ANOP                                                    RS1101
RACFVM00 ICM   R7,B'1111',CVTRAC       RACF VECTOR TABLE
         JZ    RACFVM99
         USING RCVT,R7
         STRING '  RACF Level:    ',(RCVTVRMN,1),'.',(RCVTVRMN+1,2),   X
               '.',(RCVTVRMN+3,1),INTO=LINE
*
*        Flag ACF2 and TopSecret pseudo-RCVT
*
         CLC   RCVTID,=C'ACF2'         Is this ACF2?
         JE    RACFVM95                yes, jump
         CLC   RCVTID,=C'RTSS'         Is this Top-secret?
         JE    RACFVM97                yes, jump
*
*        Check if ACF2 is on the system when RACFID='RCVT'
*
         TM    RCVTSTAT,RCVTRNA        RACF Inactive?
         JO    RACFVM98                yes, exit
         CLI   RCVTDSNL,0              Is it really RACF?
         JNZ   RACFVM98                yes, exit
*
*        Locate ACF2 ACCVT
*
RACFVM95 EQU   *
         ICM   R5,B'1111',ACF2CVT      ACCVT
         JZ    RACFVM98                INACTIVE SUB-SYSTEM
         USING ACCVT,R5
         LA    R6,ACCVT-ACCPFXP        offset to prefix address
         LNR   R6,R6                   negative pointer
         L     R6,ACCVT(R6)            =A(ACPFX)
         USING ACCPFX,R6
         STRING (LINE,,T),16X,(ACCPIDS,13),    ACF2 6.1 9703           X
               INTO=LINE
         J     RACFVM98
*
*        Display Top-Secret level
*
RACFVM97 EQU   *
         STRING (LINE,,T),16X,'(Top-Secret)',INTO=LINE
RACFVM98 BRAS  R14,SPACE2              Double Space
RACFVM99 EQU   *
         DROP  R4,R5,R6,R7
*
*        DSF level
*
ICKDSF   BRAS  R0,DOBLDL1              issue BLDL
         DC    C'ICKRELVL'             EPNAME
         LTR   R15,R15
         JNZ   ICKDSF8                 NOT FOUND, JUMP
         BRAS  R14,SAFELOAD            load ICKDSF
         STRING '  ICKDSF Level:  ',(1(R1),FL1,L),'.',                 X
               (2(R1),FL1,L),'.',(3(R1),FL1,L),INTO=LINE
         BRAS  R14,SPACE2              Double Space
ICKDSF8  EQU   *
*
*        VTAM level
*
VTAM00   L     R3,PSAATCVT-PSA(,0)     ADDR OF VTAM CVT
         USING ATCVT,R3
         STRING (ATCVTLVL+2,1),'.',(ATCVTLVL+3,1),'.',(ATCVTLVL+4,1),  X
               INTO=WKCELL1
         OI    WKCELL1+4,C'0'          4.3.  ->  4.3.0
         STRING '  VTAM Level:    ',WKCELL1,4X,                        X
               ATCVTLVL,8X,            first 8 bytes of ATCVT          X
               (PSAATCVT-PSA,,X),      ADDR OF ATCVT                   X
               INTO=LINE
         TR    LINE,TRTPRINT           VTAM 3.2
         BRAS  R14,SPACE2              Double Space
         DROP  R3
*
*        CICS level
*
CICS00   EQU   *
         BRAS  R1,*+12                 br around CL8
         DC    C'DFHCSVC '             CICS SVC
         BRAS  R14,LPASEARCH        <- search LPA
         LTR   R3,R0                   found?
         JZ    CICS99                  no, exit
         STRING '  CICS Level:    ',                                   X
               (22(R3),1),'.',(23(R3),1),'.',(24(R3),1),7X,   3.3.0    X
               'DFHCSVC',                                              X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
CICS99   EQU   *
         AIF   (NOT D'CEECAA).LEINFOE   .Did user specify CEE.SCEEMAC?
         AIF   (NOT D'CVTH6606).LEINFOX OS/390 R6?               RS0202
         TM    HBB6606,L'HBB6606       running on OS390 R6 ?     RS0202
         JNO   DB2SYS00                no, jump                  RS0202
*                                                                DA0701
** Obtain the LE version and platform ID                         DA0701
*                                                                DA0701
         LA    R0,=CL8'CEEGPID'                                  RS0302
         BRAS  R14,DOBLDL3             issue BLDL                RS0701
         LTR   R15,R15                 found?                    DA0701
         JNZ   DB2SYS00                no, jump                  DA0701
         SLR   R0,R0                                             DA0701
         MVC   WORK256(2),=H'80'                                 RS1001
*        MVC   WORK256+2(24),=CL24'TRAP(ON,NOSPIE)/PTR1'         RS1001
         STRING 'TRAP(ON,NOSPIE)/PTR1',INTO=WORK256+2            RS0903
         LA    R1,TENWORDS        returned area                  RS1001
         STCM  R1,B'1111',WORK256+18    move to user-parm (PTR1) RS0201
         LA    R1,WORK256                                        RS1001
         ST    R1,WKCELL1                                        RS1001
         LA    R1,WKCELL1                                        RS1001
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?                 RS1001
         JNO   LE$1                    yes, don't call           RS1001
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0         RS1001
LE$1     DS    0H                                                RS1001
         L     R15,=V(LESERV)          Locate our LE Services routine
         BALR  R14,R15                 Call our LE Services routine
*                                                                DA0701
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?                 RS1001
         JNO   LE$2                    yes, don't call           RS1001
         MODESET KEYREG=(2)            switch back to own key    RS1001
LE$2     DS    0H                                                RS1001
         CLC   TENWORDS+4(4),=A(3)     Right platform?           DA0701
         JNE   LE$LOLD                 No, do the old way        DA0701
         CLC   TENWORDS(4),=X'00,00,02,90' R10 and higher?       DA0701
         JH    LE$LNEW                                           DA0701
*-Here we format the old way                                     DA0701
LE$LOLD  DS    0H                                                DA0701
         STRING (TENWORDS,F,R9B),INTO=(TENWORDS+4,9)             DA0701
         STRING '  LE Version:    ',(TENWORDS+10,1),'.',               X
               (TENWORDS+11,1),'.',                                    X
               (TENWORDS+12,1),INTO=LINE                         DA0701
         J     LE$LX                                             DA0701
*-Here we format the OS/390 R10 and higher way                   DA0701
LE$LNEW  DS    0H                                                DA0701
         STRING '  LE Version:    ',                                   X
               (TENWORDS+1,FL1,L),'.',                                 X
               (TENWORDS+2,FL1,L),'.',                                 X
               (TENWORDS+3,FL1,L),                                     X
               INTO=LINE                                         DA0701
LE$LX    DS    0H                                                DA0701
         BRAS  R14,SPACE2              Double Space              DA0701
         J     DB2SYS00                leave                     RS0701
*                                                                DA0701
** Error message handling if CEECAA isn't found                  DA0701
*                                                                DA0701
         AGO   .LEINFOX                                          DA0701
.LEINFOE ANOP  ,                                                 DA0701
         STRING 'CEE.SCEEMAC was not found at assembly time',INTO=LINE
         BRAS  R14,SPACE2              Double Space              DA0701
*                                                                DA0701
         MNOTE 4,'The LE macro CEECAA could not be found, by normal'
         MNOTE 4,'MACRO search lookup. Please add CEE.SCEEMAC to '
         MNOTE 4,'the SHOWMVS assembly //SYSLIB'                 DA0701
.LEINFOX ANOP  ,                                                 DA0701
         J     DB2SYS00
$CEEGPID DC    C'CEEGPID '
*
*
*        DB2 level(s)
*
DB2SYS00 L     R1,CVTJESCT             JES COMM TABLE
         L     R5,JESSSCT-JESCT(,R1)   FIRST JSCVT
         USING SSCT,R5
         SLR   R4,R4                   no DB2 sub-system found
*LOOP
DB2SYS22 VALIDATE SSCT,ERRET=DB2SYS27  SSCT may be fetch-prot.
         ICM   R6,B'1111',SSCTSUSE     DB2'S ERLY
         JZ    DB2SYS27                INACTIVE SUB-SYSTEM
         USING ERLY,R6
         VALIDATE ERLY,ERRET=DB2SYS27  SSCT may be fetch-prot.
         CLC   =C'ERLY',ERLYCBID       IS THIS DB2?
         JNE   DB2SYS27                no, ignore for now
         LA    R4,=C'Inactive'                                 JWMFEB96
         ICM   R0,B'1111',ERLYSCOM     Pointer to SCOM         JWMFEB96
         JZ    DB2SYS24                No, jump                     +RS
         LA    R4,=C'Active  '         Yes                     JWMFEB96
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                   +RS
         JO    DB2SYS24                yes, don't call DSANALI     +RS
         CLC   =C'5655F1000',ERLYPROD  DSNALI doesn't work with  RS0102
         JE    DB2SYS24                  MQSeries V5R2
*------------------------------------------------------------*     +RS
*        Load DB2 CAF routine                                *     +RS
*------------------------------------------------------------*     +RS
         LA    R0,=CL8'DSNALI'         program name
         BRAS  R14,DOBLDL3             issue BLDL (tasklib)
         LTR   R15,R15                 found?                      +RS
         JNZ   DB2SYS24                no, jump                    +RS
         LOAD  EPLOC==CL8'DSNALI'   Load the CAF service EP        +RS
         ST    R0,DSNALI           save the address                +RS
         ICM   R15,B'1111',DSNALI      load address of CAF         +RS
         JZ    DB2SYS24                  if zero leave             +RS
*------------------------------------------------------------*     +RS
*        Connect to Subsystem DB2 or MQ                      *     +RS
*        In case of tracing the requests, just add a         *     +RS
*        DD-Name for DSNTRACE SYSOUT=*                       *     +RS
*------------------------------------------------------------*     +RS
DB2SYS23 EQU   *                                                   +RS
         STRING 'CONNECT',INTO=DB2_REQ
         XCALL DSNALI,(DB2_REQ,SSCTSNAM,DB2_TECB,DB2_SECB,DB2_RIB,     X
               LRETCODE,LRSNCODE)                                  +RS
         ICM   R7,B'1111',DB2_RIB      Rib-Pointer                 +RS
         JZ    DB2SYS24                  If zero leave             +RS
         USING RIB,R7                  tell assembly               +RS
         CLC   =C'RIB ',RIBEYEC        check Eyecatcher            +RS
         JNE   DB2SYS24
         STRING '  DB2 Level:     ',                                   X
               (RIBREL,1),'.',(RIBREL+1,1),'.',(RIBREL+2,1),4X,        X
               '   SSCTSNAM=',SSCTSNAM,                                X
               3X,((R4),8),            Active/Inactive                 X
               INTO=LINE                                           +RS
         STRING 'DISCONNECT',INTO=DB2_REQ
         XCALL DSNALI,(DB2_REQ,LRETCODE,LRSNCODE)                  +RS
         CLC   =C'5655F1000',ERLYPROD  MQ Series? V5 Rel 2       JH0501
         JE    DB2SYS25                yes, jump                 RS0302
         CLC   =C'569513700',ERLYPROD  MQ Series? V1           RSJUN99
         JE    DB2SYS25                yes, jump                 RS0302
         CLC   =C'5655A9500',ERLYPROD  MQ Series? V2           RSJUN99
         JE    DB2SYS25                yes, jump                 RS0302
         J     DB2SYS26                                            +RS
DB2SYS24 EQU   *                                                   +RS
         STRING '  DB2 Level:     ',ERLYPROD,                  JWMJUN95X
               '   SSCTSNAM=',SSCTSNAM,                        JWMJUN95X
               3X,((R4),8),            Active/Inactive         JWMFEB96X
               INTO=LINE                                       JWMJUN95
         CLC   =C'5655F1000',ERLYPROD  MQ Series? V5 Rel 2       JH0501
         JE    DB2SYS25                yes, jump                 RS0302
         CLC   =C'569513700',ERLYPROD  MQ Series? V1           RSJUN99
         JE    DB2SYS25                yes, jump                 RS0302
         CLC   =C'5655A9500',ERLYPROD  MQ Series? V2           RSJUN99
         JE    DB2SYS25                yes, jump                 RS0302
         J     DB2SYS26                might be DB2            RSJUN99
DB2SYS25 EQU   *                                               RSJUN99
         MVC   LINE+2(10),=C'MQ Series:'
DB2SYS26 EQU   *
         BRAS  R14,SPACE1              Single Space
DB2SYS27 EQU   *
         LA    R0,1                    count sub-systems
         AH    R0,SUBSYSNO             count sub-systems
         STH   R0,SUBSYSNO             count sub-systems
         ICM   R5,B'1111',SSCTSCTA     NEXT SSCVT
         JNZ   DB2SYS22
*ENDLOOP
         LTR   R4,R4                   any DB2 system found?
         JZ    DB2SYS99                no, exit
         BRAS  R14,BLANK1              Blank Line
DB2SYS99 EQU   *
         DROP  R5,R6,R7
*---------------------------------------------------------------------*
*                                                                     *
*        TCP/IP                                5655-HAL Version 3     *
*                                              5735-HAL Version 2     *
*---------------------------------------------------------------------*
TCPIP00  EQU   *                                                   @RS
         BRAS  R1,*+12                 br around CL8               @RS
         DC    C'MVPTASK '             TCPIP                       @RS
         BRAS  R14,LPASEARCH        <- search LPA                  @RS
         LTR   R3,R0                   found?                      @RS
         JZ    TCPIP99                 no, exit                    @RS
         STRING '  TCP/IP:',8X,                                        X
               (15(R3),6),' ',(58(R3),8),4X,        96.085  5655-HAL   X
               'MVPTASK',                                              X
               INTO=LINE                                           @RS
         BRAS  R14,SPACE2              Double Space                @RS
         AIF   (NOT D'CVTH6603).TCP99  TCP 3.2?                    &RS
         TM    HBB6603,L'HBB6603       running on OS390 R3 ?       &RS
         JNO   TCPIP99                 no, jump                    &RS
         L     R2,CVTECVT              ECVT                     RS0601
         USING ECVT,R2                                          RS0601
         L     R3,ECVTTCP-ECVT(,R2)    TCPIP                    RS0601
         USING TSAB,R3                                          RS0601
         LTR   R3,R3
         JZ    TCPIP99
         LA    R3,TSAB_L(R3)
         USING TSEB,R3
         LHI   R6,8
         STRING 4X,'Tseb     SI Proc     Ver   Tsdb     Tsdx',         X
               '     Asid TraceOpts Status',INTO=LINE
         BRAS  R14,SPACE1
TCPIP01  DS    0H
         L     R5,TSEB_TSDB
         USING TSDB,R5
         CLI   TSEB_TCPIP_NAME,0      Jobname low-value?
         JE    TCPIP05                  yes, ingore
* If you see an assembly error please verify if member EZAZTSEB
* exit in your TCPIP(.SEZACMAC please move TCPIP.EZACMAC after
* the SHOWMACS SYSLIB
         STRING 4X,((R3),,X),1X,(TSEB_SI,,X),1X,(TSEB_TCPIP_NAME),     X
               1X,(TSEB_TCPIP_VERSION,1,X),'.',                        X
               (TSEB_TCPIP_VERSION+1,1,X),1X,                          X
               (TSEB_TSDB,,X),1X,(TSDB_TSDX,,X),1X,(TSEB_ASID,,X),     X
               1X,(TSEB_Trace,,X),INTO=LINE
         LA    R4,LINE+2(R15)
        #STATUS TSEB_STATUS,TSEB_ACTIVE,'Active'
        #STATUS TSEB_STATUS,TSEB_TERM,'Terminating'
        #STATUS TSEB_STATUS,TSEB_DOWN,'Down'
        #STATUS TSEB_STATUS,TSEB_STOP,'Stoped'
         BRAS  R14,SPACE1
TCPIP05  DS    0H
         AH    R3,TSEB_LENGTH
         BRCT  R6,TCPIP01
         BRAS  R14,BLANK1
         DROP  R2,R3,R5
.TCP99   ANOP                                                      @RS
TCPIP99  EQU   *                                                   @RS
*---------------------------------------------------------------------*
*                                                                     *
*Run-time Environments                                                *
*                                                                     *
*   Name         DDname    Dsname                                     *
*   OS/VS COBOL  ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*                -LNKLST-  COB2.V1R4M0.COB2LIB                        *
*   VS COBOL II  ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*                -LNKLST-  COB2.V1R4M0.COB2LIB                        *
*   PL/I         ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*   FORTRAN      ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*   C/C++        ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*   LE           ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*   RTLS         n/a                                               +RS*
*                                                                     *
*---------------------------------------------------------------------*
RTE00    STRING '  Run-time Environments',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '    Name',9X,'DDname    Dsname',39X,'Module',INTO=LINE
         BRAS  R14,SPACE1              Single Space
         BRAS  R3,RTE11                branch around table
         DC    C'ILBOCOM ',C'OS/VS COBOL' VSCLLIB
         DC    C'IGZCTCO ',C'VS COBOL II' COB2LIB
         DC    C'IBMBCCLA',C'PL/I       ' PLILINK
         DC    C'AFBNAMEP',C'FORTRAN    ' VSF2FORT
         DC    C'IEDCMSGT',C'C/C++      ' SEDC?                RSOCT99
         DC    C'CEEBLRR ',C'LE         ' SCEERUN
         DC    C'PASRTLIB',C'PASCAL/VS  ' SAMPRUN2
         DC    C'RPGII   ',C'RPG II     ' RG1LOAD
         DC    C'EAGIVVER',C'REXX Alt.  ' SEAGLMD
         DC    C'EAGRTXIN',C'REXX       ' SEAGLPA
         DC    C'LSCLDBCS',C'SAS/C      ' SISPSASC
         DC    X'00',0H'0'
*LOOP
RTE11    LR    R0,R3                   program name
         BRAS  R14,DOBLDL3             issue BLDL (tasklib)
         LTR   R15,R15                 found?
         JNZ   RTE13                   no, jump
         STRING 4X,(8(R3),11),2X,PDATA_DDN,2X,PDATA_DSN,1X,((R3),8),   X
               INTO=LINE
         TR    LINE,TRTPRINT
         J     RTE14
RTE13    EQU   *
         STRING 4X,(8(R3),11),'  n/a',52X,((R3),8),INTO=LINE
RTE14    EQU   *
         BRAS  R14,SPACE1              Single Space
*
*        if found in tasklib, look for 2nd copy in linklib or lpa
*
         DEVTYPE PDATA_DDN,WKCELL1     check ddname
         LTR   R15,R15                 loaded from tasklib?
         JNZ   RTE19                   no, exit
         LR    R0,R3                   program name
         BRAS  R14,DOBLDL2             issue BLDL (linklib)
         LTR   R15,R15                 found?
         JNZ   RTE19                   no, exit
         STRING 17X,PDATA_DDN,2X,PDATA_DSN,1X,((R3),8),INTO=LINE
         TR    LINE,TRTPRINT
         J     RTE18
*
RTE17    EQU   *                       MLPA/PLPA
         STRING 4X,(8(R3),11),2X,PDATA_DDN,47X,((R3),8),INTO=LINE
RTE18    EQU   *
         BRAS  R14,SPACE1              Single Space
RTE19    EQU   *
         LA    R3,8+11(,R3)            next table entry
         CLI   0(R3),0                 end of table?
         JNE   RTE11                   no, loop
*ENDLOOP
*
*        Run-time Library Services (RTLS)
*
         AIF   (NOT D'CVTRTLS).RTE299  OS/390 R4 MACLIB            +RS
         TM    JBB6604,L'JBB6604       running on OS/390 2.4?
         JNO   RTE299                  No, exit
         BRAS  R14,WORKADDR            32K work area
         ST    R0,ANSLEN               pass length                 +RS
         LR    R4,R1                   length is zero, for now     +RS
         USING RTAAHDR,R4                                          +RS
*
*        Find out how much storage is needed for the answer area   +RS
*
         CSVRTLS MF=(E,RTLS,COMPLETE),ANSAREA=RTAAHDR,                 X
               ANSLEN=ANSLEN,REQUEST=LIST,LISTTYPE=PHYSICAL,           X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE                   +RS
         CLC   LRETCODE,=AL4(CSVRTLSRC_OK) OK?                     +RS
         JH    RTE293                  No, error                   +RS
*                                                                  +RS
*        Process information in answer area when RC=0              +RS
*                                                                  +RS
         ICM   R5,B'1111',RTAAHNUMPH   how many RTAAPH entries?    +RS
         JZ    RTE293                  zero, exit                  +RS
         L     R3,RTAAHFIRSTPHADDR     Get first entry             +RS
         USING RTAAPH,R3                                           +RS
*loop                                                              +RS
RTE240   DS    0H                      RTAAPH loop                 +RS
         STRING 4X,RTAAPHNAME,INTO=LINE Physical name              +RS
         L     R6,RTAAPHFIRSTDSADDR    get first DS entry          +RS
         USING RTAADS,R6                                           +RS
         ICM   R7,B'1111',RTAAPHNUMDS  how many DS entries?        +RS
         JNZ   RTE242                  a few, process them         +RS
         STRING 'DSName n/a',INTO=LINE+27 no entries               +RS
         BRAS  R14,SPACE1              Single Space                +RS
         J     RTE245                                              +RS
*--loop                                                            +RS
RTE242   DS    0H                      DS loop                     +RS
         STRING RTAADSNAME,INTO=LINE+27                            +RS
         BRAS  R14,SPACE1                                          +RS
         L     R6,RTAADSNEXTADDR       point to next DS            +RS
         BRCT  R7,RTE242                                           +RS
*--endloop                                                         +RS
RTE245   DS    0H                                                  +RS
         L     R3,RTAAPHNEXTADDR       Get next RTAAPH             +RS
         BRCT  R5,RTE240             Continue while there are more +RS
*endloop                                                           +RS
         J     RTE299                                              +RS
RTE293   DS    0H                                                  +RS
         CLC   LRETCODE,=AL4(CSVRTLSRC_WARN) warn?                 +RS
         JH    RTE298                  No, error                   +RS
         CLC   LRSNCODE,=AL4(CSVRTLSRSNLISTNOMATCHES) none?
         JNE   RTE298                  no, loop
         STRING '    RTLS',9X,'is not managing any physical libraries',X
               INTO=LINE
         BRAS  R14,SPACE1              Double Space                +RS
         J     RTE299                                              +RS
RTE298   DS    0H                                                  +RS
         STRING '    RTLS',9X,'RC: ',(LRETCODE,,X),    no RTLS         X
               ' RSN: ',(LRSNCODE,,X),INTO=LINE                    +RS
         BRAS  R14,SPACE1              Double Space                +RS
RTE299   DS    0H
.RTE299  ANOP
         BRAS  R14,BLANK1              Double Space
         END_PROC
         TITLE 'SHOWMVS &REL - Installed SORT Utility'
*---------------------------------------------------------------------*
*                                                                     *
*  SORT's true name is ICEMAN     (First 100 Bytes Follow)            *
*                                                                     *
*    D3C9C3C5 D5E2C5C4 40D4C1E3 C5D9C9C1 D3E24060   LICENSED MATERIAL *
*    40D7D9D6 D7C5D9E3 E840D6C6 40C9C2D4 40F5F7F4    PROPERTY OF IBM  *
*    F060E2D4 F1404DC3 5D40C3D6 D7E8D9C9 C7C8E340   0-SM1 (C) COPYRIG *
*    C9C2D440 C3D6D9D7 4B40F1F9 F7F36B40 F1F9F9F2   IBM CORP. 1973, 1 *
*    404DC35D 40C3D6D7 E8D9C9C7 C8E340E6 C1E3E2D6    (C) COPYRIGHT WA *
*                                                                     *
*---------------------------------------------------------------------*
SORT     BEGIN_PROC KW=PRODUCTS,BASEREG=NO                       RS0302
         LA    R0,=CL8'SORT'           program name
         BRAS  R14,DOBLDL3             issue BLDL (tasklib)
         LTR   R15,R15
         JNZ   SORT99                  NOT FOUND, JUMP
         BRAS  R14,SAFELOAD            load SORT
         LR    R7,R1                   save load point
         STRING '  SORT loaded from ',                                 X
               'DDN(',(PDATA_DDN,,T),') ',                             X
               'DSN(''',(PDATA_DSN,,T),'(',(PDS2NAME,,T),')'')',       X
               INTO=LINE
         CLC   PDATA_DDN,MLPADDN       found in MLPA?
         JE    SORTLPA                 yes, jump
         CLC   PDATA_DDN,PLPADDN       found in PLPA?
         JNE   SORT40                  no, jump
SORTLPA  EQU   *
         STRING '  SORT loaded from ',                                 X
               'DDN(',(PDATA_DDN,,T),') ',                             X
               'PGM(',(PDS2NAME,,T),')',                               X
               INTO=LINE
*
SORT40   EQU     *
         BRAS  R14,SPACE2              Double Space
*
*        Detect the ICEMAN eye-catcher (40 bytes at loadpt+X'120')
*
         CLC   PDS2NAME,X'120'(R7)     ICEMAN ?
         JNE   SORT41                  no, jump                  RS0302
         LA    R3,040/20               LOOP COUNTER (40 bytes)
         LA    R7,X'120'(R7)           skip copyright notice
         J     SORT42
*
*        DUMP THE FIRST 100 BYTES OF THE "SORT" FOR IDENTIFICATION
*
SORT41   EQU   *
         STRING '   (First 100 Bytes Follow)',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         LA    R3,100/20               LOOP COUNTER
SORT42   EQU   *
*LOOP
SORT42L  STRING 4X,((R7),4,X),1X,(4(R7),4,X),1X,(8(R7),4,X),1X,        X
               (12(R7),4,X),1X,(16(R7),4,X),3X,((R7),20),INTO=LINE
         TR    LINE,TRTPRINT           GET RID OF NON-PRINTABLE CHARS
         BRAS  R14,SPACE1          <== next line
         LA    R7,020(,R7)             BUMP POINTER
         BRCT  R3,SORT42L
*ENDLOOP
         BRAS  R14,BLANK1              BLANK LINE
SORT99   END_PROC
         TITLE 'SHOWMVS &REL - UNIX System Services Data Opt.'   RS1199
*---------------------------------------------------------------------*
*                                                                     *
* UNIX System Services (USS)                                          *
*                                                                     *
*   OMVS     000E Parm=BPXPRMF0 Trace=CTIBPXF0                        *
*   KernelToken: 0000003800000001                                     *
*   MAXPROCSYSTEM      =      200    MAXPROCUSER     =       25       *
*   MAXFILEPROC        =       64    MAXFILESIZE     =  NoLimit       *
*   MAXCPUTIME         =     1000    MAXUIDS         =       64       *
*   MAXRTYS            =      256    MAXPTYS         =      256       *
*   MAXMMAPAREA        =     4096    MAXASSIZE       = 41943040       *
*   MAXTHREADS         =      200    MAXTHREADTASKS  =       50       *
*   MAXCORESIZE        =  4194304    MAXSHAREPAGES   =   131072       *
*   IPCMSGQBYTES       =   262144    IPCMSGQMNUM     =    10000       *
*   IPCMSGNIDS         =      500    IPCSEMNIDS      =      500       *
*   IPCSEMNOPS         =       25    IPCSEMNSEMS     =       25       *
*   IPCSHMMPAGES       =      256    IPCSHMNIDS      =      500       *
*   IPCSHMNSEGS        =       10    IPCSHMSPAGES    =   262144       *
*   SUPERUSER          = $SYSMV2     FORKCOPY        =     Cow        *
*   TTYGROUP           = TTY                                          *
*   STEPLIBLIST(60Byte)= /system/steplib                              *
*   USERIDALIAS(60Byte)= /1                                           *
*   PRIORITYPG VALUES: NONE                                           *
*   PRIORITYGOAL VALUES: NONE                                         *
*   MAXQUEUEDSIGS      =       1000    SHRLIBRGNSIZE   =   67108864   *
*   SHRLIBMAXPAGES     =       4096    VERSION         = /            *
*   SYSCALL COUNTS     =         No    TTYGROUP        = #SYSTTY      *
*   SYSPLEX            =        Yes                                   *
*   LIMMSG             =       None    AUTOCVT         =        Off   *
*   RESOLVER PROC      = DEFAULT                                      *
*   AUTHPGMLIST(60Byte)= NONE                                         *
*                                                                     *
*   HFS Statistics                                                    *
*     Maximum virtual storage:     1161 MB    Minimum fixed storage:  *
*     Virtual Storage        :    12211 Pages Fixed Storage        :  *
*     LookUp cache hit       :   178949       LookUp cache miss    :  *
*     1st data page hit      :   350917       1st data page miss   :  *
*     # of subtasks          :       20                               *
*     Pool  Size #DS   BP_pages      Fixed Already_fixed Not_already_ *
*        1     1   1       6747          0             0              *
*        2     4   1        584          0             0              *
*        3    16   1       1232          0             0              *
*        4    64   1       3648          0             0              *
*                                                                     *
*---------------------------------------------------------------------*
USSOPT   BEGIN_PROC KW=USSOPT,BASEREG=YES    LOAD require
         L     R2,CVTECVT              ECVT                      RS0500
         USING ECVT,R2                                           RS0500
         L     R3,ECVTOCVT-ECVT(,R2)   OCVT
         LTR   R3,R3
         JZ    USSOPT999
         TM    ECVTOCVT,ECVTOMVS       Check for OpenMVS
         JZ    USSOPT999               No
         USING OCVT,R3
         ICM   R4,B'1111',OCVTOCVE     OCVE
         JZ    USSOPT999
         USING OCVE,R4
         ICM   R5,B'1111',OCVEOPNT     OPNT (Options)
         JZ    USSOPT999
         USING OPNT,R5
         AIF   (NOT D'CVTH6606).USSOPT001                        RS0301
         TM    HBB6606,L'HBB6606       running on OS/390 R6?     RS0301
         JZ    USSOPT001               no, jump                  RS0301
         USING OPTN,R5
         STRING '&TITLEPFX.UNIX System Services (USS)',INTO=LINE RS0701
         BRAS  R14,SPACE2              single space
         STRING '  All date/time info are based on the UTC(GMT)',      X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 2X,OCVT_STCNAME,1X,(OCVTASID,2,X),' Parm(up to 5)=',   X
               (OPTN_BPXPRM,6,T),'(',                                  X
               (OPTN_PARMMEMLISTMVS,2,T),',',                          X
               (OPTN_PARMMEMLISTMVS+2,2,T),',',                        X
               (OPTN_PARMMEMLISTMVS+4,2,T),',',                        X
               (OPTN_PARMMEMLISTMVS+6,2,T),',',                        X
               (OPTN_PARMMEMLISTMVS+8,2,T),')',                        X
               ' Trace=',OPTN_TRACEPARM,                               X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  KernelToken: ',(OCVTSTOKEN,,X),                     X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  MAXPROCSYSTEM      = ',                             X
               (OPTN_MAXPROCSYSTEM,F,R10B),                            X
               '    MAXPROCUSER     = ',(OPTN_MAXPROCUSER,F,R10B),     X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING (OPTN_MAXFILESIZE,F,L),INTO=WKCELL1
         CLC   OPTN_MAXFILESIZE,=X'FFFFFFFF' NoLimit?
         JNE   *+4+6
         MVC   WKCELL1(8),=CL8'NoLimit'
         STRING '  MAXFILEPROC        = ',                             X
               (OPTN_MAXFILEPROC,F,R10B),                              X
               '    MAXFILESIZE     =  ',(WKCELL1,8,T),                X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  MAXCPUTIME         = ',                             X
               (OPTN_MAXCPUTIME,F,R10B),                               X
               '    MAXUIDS         = ',(OPTN_MAXUIDS,F,R10B),         X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  MAXRTYS            = ',                             X
               (OPTN_MAXRTYS,F,R10B),                                  X
               '    MAXPTYS         = ',(OPTN_MAXPTYS,F,R10B),         X
               INTO=LINE
         AIF   (NOT D'CVTH7703).USSOPT008 R10 ?
         TM    HBB7703,L'HBB7703       running on OS/390 R10
         JZ    USSOPT008               no, jump
         STRING '  MAXPTYS            = ',                             X
               (OPTN_MAXPTYS,F,R10B),INTO=LINE
.USSOPT008 ANOP
USSOPT008 DS   0H
         BRAS  R14,SPACE1              single space
         STRING '  MAXMMAPAREA        = ',                             X
               (OPTN_MAXMMAPAREA,F,R10B),                              X
               '    MAXASSIZE       = ',(OPTN_MAXASSIZE,F,R10B),       X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  MAXTHREADS         = ',                             X
               (OPTN_MAXTHREADS,F,R10B),                               X
               '    MAXTHREADTASKS  = ',(OPTN_MAXTHREADTASKS,F,R10B),  X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  MAXCORESIZE        = ',                             X
               (OPTN_MAXCORESIZE,F,R10B),                              X
               '    MAXSHAREPAGES   = ',(OPTN_MAXSHAREPAGES,F,R10B),   X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  IPCMSGQBYTES       = ',                             X
               (OPTN_IPCMSGQBYTES,F,R10B),                             X
               '    IPCMSGQMNUM     = ',(OPTN_IPCMSGQMNUM,F,R10B),     X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  IPCMSGNIDS         = ',                             x
               (OPTN_IPCMSGNIDS,F,R10B),                               X
               '    IPCSEMNIDS      = ',(OPTN_IPCSEMNIDS,F,R10B),      X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  IPCSEMNOPS         = ',                             X
               (OPTN_IPCSEMNOPS,F,R10B),                               X
               '    IPCSEMNSEMS     = ',(OPTN_IPCSEMNSEMS,F,R10B),     X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  IPCSHMMPAGES       = ',                             X
               (OPTN_IPCSHMMPAGES,F,R10B),                             X
               '    IPCSHMNIDS      = ',(OPTN_IPCSHMNIDS,F,R10B),      X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  IPCSHMNSEGS        = ',                             X
               (OPTN_IPCSHMNSEGS,F,R10B),                              X
               '    IPCSHMSPAGES    = ',(OPTN_IPCSHMSPAGES,F,R10B),    X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  SUPERUSER          = ',OPTN_SUPERUSER,              X
               '      FORKCOPY        = ',                             X
               INTO=LINE
         LA    R4,LINE+2(R15)
         MVC   0(4,R4),=C' Cow'             Default
        #STATUS OPTN_OPTION_FLAG,OPTN_FORKCOPY,'Copy'
         BRAS  R14,SPACE1              single space
         STRING '  STEPLIBLIST(60Byte)= ',(OPTN_STEPLIBLIST,60,T),     X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRAS  R14,SPACE1              single space
         STRING '  USERIDALIAS(60Byte)= ',INTO=LINE
         CLI   OPTN_USERIDALIAS,0      low value ??
         JE    USSOPT010
         STRING (LINE,,L),(OPTN_USERIDALIAS,60,T),INTO=LINE
USSOPT010 DS   0H
         BRAS  R14,SPACE1
         ICM   R6,B'1111',OPTN_PRIORITYGOALS
         JZ    USSOPT020
         USING OPTN_SETP,R6
         STRING '  PRIORITYPG',' VALUES: ','NONE',                     X
               INTO=LINE
         TM    SETP_PG,X'01'
         JZ    USSOPT015
         STRING '  PRIORITYPG',' VALUES: ','PROPAGATE',                X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING 4X,(SETP_PG1,H,R3B),2X,(SETP_PG2,H,R3B),2X,            X
               (SETP_PG3,H,R3B),2X,(SETP_PG4,H,R3B),2X,                X
               (SETP_PG5,H,R3B),2X,(SETP_PG6,H,R3B),2X,                X
               (SETP_PG7,H,R3B),2X,(SETP_PG8,H,R3B),2X,                X
               (SETP_PG9,H,R3B),2X,(SETP_PG10,H,R3B),2X,               X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING 4X,(SETP_PG11,H,R3B),2X,(SETP_PG12,H,R3B),2X,          X
               (SETP_PG13,H,R3B),2X,(SETP_PG14,H,R3B),2X,              X
               (SETP_PG15,H,R3B),2X,(SETP_PG16,H,R3B),2X,              X
               (SETP_PG17,H,R3B),2X,(SETP_PG18,H,R3B),2X,              X
               (SETP_PG19,H,R3B),2X,(SETP_PG20,H,R3B),2X,              X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING 4X,(SETP_PG21,H,R3B),2X,(SETP_PG22,H,R3B),2X,          X
               (SETP_PG23,H,R3B),2X,(SETP_PG24,H,R3B),2X,              X
               (SETP_PG25,H,R3B),2X,(SETP_PG26,H,R3B),2X,              X
               (SETP_PG27,H,R3B),2X,(SETP_PG28,H,R3B),2X,              X
               (SETP_PG29,H,R3B),2X,(SETP_PG30,H,R3B),2X,              X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING 4X,(SETP_PG31,H,R3B),2X,(SETP_PG32,H,R3B),2X,          X
               (SETP_PG33,H,R3B),2X,(SETP_PG34,H,R3B),2X,              X
               (SETP_PG35,H,R3B),2X,(SETP_PG36,H,R3B),2X,              X
               (SETP_PG37,H,R3B),2X,(SETP_PG38,H,R3B),2X,              X
               (SETP_PG39,H,R3B),2X,(SETP_PG40,H,R3B),2X,              X
               INTO=LINE
USSOPT015 DS   0H
         BRAS  R14,SPACE1
         TM    SETP_GOALS,X'01'
         JZ    USSOPT023
         STRING '  PRIORITYGOAL',' VALUES: ','PROPAGATE',              X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING 4X,(SETP_GOAL1),1X,(SETP_GOAL2),1X,                    X
               (SETP_GOAL3),1X,(SETP_GOAL4),1X,                        X
               (SETP_GOAL5),                                           X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING 4X,(SETP_GOAL6),1X,(SETP_GOAL7),1X,                    X
               (SETP_GOAL8),1X,(SETP_GOAL9),1X,                        X
               (SETP_GOAL10),                                          X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING 4X,(SETP_GOAL11),1X,(SETP_GOAL12),1X,                  X
               (SETP_GOAL13),1X,(SETP_GOAL14),1X,                      X
               (SETP_GOAL15),                                          X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING 4X,(SETP_GOAL16),1X,(SETP_GOAL17),1X,                  X
               (SETP_GOAL18),1X,(SETP_GOAL19),1X,                      X
               (SETP_GOAL20),                                          X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING 4X,(SETP_GOAL21),1X,(SETP_GOAL22),1X,                  X
               (SETP_GOAL23),1X,(SETP_GOAL24),1X,                      X
               (SETP_GOAL25),                                          X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING 4X,(SETP_GOAL26),1X,(SETP_GOAL27),1X,                  X
               (SETP_GOAL28),1X,(SETP_GOAL29),1X,                      X
               (SETP_GOAL30),                                          X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING 4X,(SETP_GOAL31),1X,(SETP_GOAL32),1X,                  X
               (SETP_GOAL33),1X,(SETP_GOAL34),1X,                      X
               (SETP_GOAL35),                                          X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING 4X,(SETP_GOAL36),1X,(SETP_GOAL37),1X,                  X
               (SETP_GOAL38),1X,(SETP_GOAL39),1X,                      X
               (SETP_GOAL40),                                          X
               INTO=LINE
         BRAS  R14,SPACE1
         J     USSOPT025
USSOPT020 DS   0H
         STRING '  PRIORITYPG',' VALUES: ','NONE',                     X
               INTO=LINE
         BRAS  R14,SPACE1
USSOPT023 DS   0H
         STRING '  PRIORITYGOAL',' VALUES: ','NONE',                   X
               INTO=LINE
         BRAS  R14,SPACE1
USSOPT025 DS   0H
         AIF   (NOT D'CVTH6606).USSOPT100 R6 ?
         TM    HBB6606,L'HBB6606       running on OS/390 R6
         JZ    USSOPT100               no, jump
         STRING '  MAXQUEUEDSIGS      = ',                             X
               (OPTN_MAXQUEUEDSIGS,F,R10B),INTO=LINE
         AIF   (NOT D'CVTJ6609).USSOPT026 R9 ?
         TM    JBB6609,L'JBB6609       running on OS/390 R9
         JZ    USSOPT026               no, jump
         STRING '  MAXQUEUEDSIGS      = ',                             X
               (OPTN_MAXQUEUEDSIGS,F,R10B),                            X
               '    SHRLIBRGNSIZE   = ',(OPTN_SHRLIBRGNSIZE,F,R10B),   X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  SHRLIBMAXPAGES     = ',                             X
               (OPTN_SHRLIBMAXPAGES,F,R10B),                           X
               '    VERSION         = ',OPTN_VERSIONMVS,               X
               INTO=LINE
.USSOPT026 ANOP
USSOPT026 DS   0H
         BRAS  R14,SPACE1              single space
         STRING '  SYSCALL COUNTS     = ',                             X
               INTO=LINE
         LA    R4,LINE+7(R15)
         MVC   0(3,R4),=C' No'             Default
        #STATUS OPTN_OPTION_FLAG,OPTN_SYSCALL_COUNT,'Yes'
         STRING (LINE,,L),'    TTYGROUP        = ',                    X
               OPTN_TTYGROUP,                                          X
               INTO=LINE
         BRAS  R14,SPACE1              Single space
         AIF   (NOT D'CVTH7703).USSOPT001 R10 ?                  RS0302
         TM    HBB7703,L'HBB7703       running on OS/390 R10     RS0302
         JZ    USSOPT100               no, jump                  RS0302
         STRING '  SYSPLEX            = ',                             X
               INTO=LINE                                         RS0302
         LA    R4,LINE+7(R15)                                    RS0302
         MVC   0(3,R4),=C' No'         Default No                RS0803
        #STATUS OPTN_OPTION_FLAG2,OPTN_SYSPLEX,'Yes'
         BRAS  R14,SPACE1              Single space
         STRING '  LIMMSG             = ',                             X
               INTO=LINE                                         RS0302
         LA    R4,LINE+4(R15)                                    RS0302
         MVC   0(6,R4),=C'  None'      System  =F'1'             RS0803
         CLI   OPTN_LIMMSG+3,X'01'                               RS0803
         JE    USSOPT027                                         RS0803
         MVC   0(6,R4),=C'System  '    System  =F'2'             RS0803
         CLI   OPTN_LIMMSG+3,X'02'                               RS0803
         JE    USSOPT027                                         RS0803
         MVC   0(6,R4),=C'   All'      All     =F'3'             RS0803
USSOPT027 DS   0H
         AIF   (NOT D'CVTH7705).USSOPT028 z/OS R2?               RS0302
         TM    HBB7705,L'HBB7705       running on z/OS R2        RS0302
         JZ    USSOPT028               no, jump and display      RS0803
         STRING (LINE,,L),'    AUTOCVT         = ',              RS0803X
               INTO=LINE                                         RS0803
         LA    R4,LINE+7(R15)                                    RS0803
         MVC   0(3,R4),=C'Off'             Default               RS0803
        #STATUS OPTN_OPTION_FLAG2,OPTN_AUTOCVT,' On'             RS0803
         BRAS  R14,SPACE1              Single space              RS0803
         STRING '  RESOLVER PROC      = ',OPTN_RESOLVER_PROC,          X
               INTO=LINE                                         RS0302
         AIF   (NOT D'CVTH7707).USSOPT028 z/OS R4?               RS0302
         TM    HBB7707,L'HBB7707       running on z/OS R4        RS0302
         JZ    USSOPT028               no, jump and display      RS0803
         BRAS  R14,SPACE1              Single space              RS0803
         STRING '  AUTHPGMLIST(60Byte)= ',(OPTN_AUTHPGMLIST,60,T),     X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
.USSOPT028 ANOP          pre OS/390 2.6
USSOPT028 DS   0H
         BRAS  R14,SPACE1              Single space              RS0803
.USSOPT001 ANOP          pre OS/390 2.6
USSOPT001 DS   0H
         AIF   (D'CVTH6606).USSOPT100 OS/390 R6?, yes leave
         STRING 'UNIX System Services (USS)',INTO=LINE
         BRAS  R14,SPACE2              single space
         STRING '  All date/time info are based on the UTC(GMT)',      X
               INTO=LINE
         STRING 2X,OCVT_STCNAME,1X,(OCVTASID,2,X),' Parm=',OPNT_BPXPRM,X
               ' Trace=',OPNT_TRACEPARM,                               X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  KernelToken: ',(OCVTSTOKEN,,X),                     X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  MAXPROCSYSTEM      = ',                             X
               (OPNT_MAXPROCSYSTEM,F,R10B),                            X
               '    MAXPROCUSER     = ',(OPNT_MAXPROCUSER,F,R10B),     X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING (OPNT_MAXFILESIZE,F,L),INTO=WKCELL1
         CLC   OPNT_MAXFILESIZE,=X'FFFFFFFF' NoLimit?
         JNE   *+4+6                                             RS0302
         MVC   WKCELL1(8),=CL8'NoLimit'
         STRING '  MAXFILEPROC        = ',                             X
               (OPNT_MAXFILEPROC,F,R10B),                              X
               '    MAXFILESIZE     =  ',(WKCELL1,8,T),                X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  MAXCPUTIME         = ',                             X
               (OPNT_MAXCPUTIME,F,R10B),                               X
               '    MAXUIDS         = ',(OPNT_MAXUIDS,F,R10B),         X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  MAXRTYS            = ',                             X
               (OPNT_MAXRTYS,F,R10B),                                  X
               '    MAXPTYS         = ',(OPNT_MAXPTYS,F,R10B),         X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  MAXMMAPAREA        = ',                             X
               (OPNT_MAXMMAPAREA,F,R10B),                              X
               '    MAXASSIZE       = ',(OPNT_MAXASSIZE,F,R10B),       X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  MAXTHREADS         = ',                             X
               (OPNT_MAXTHREADS,F,R10B),                               X
               '    MAXTHREADTASKS  = ',(OPNT_MAXTHREADTASKS,F,R10B),  X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  MAXCORESIZE        = ',                             X
               (OPNT_MAXCORESIZE,F,R10B),                              X
               '    MAXSHAREPAGES   = ',(OPNT_MAXSHAREPAGES,F,R10B),   X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  IPCMSGQBYTES       = ',                             X
               (OPNT_IPCMSGQBYTES,F,R10B),                             X
               '    IPCMSGQMNUM     = ',(OPNT_IPCMSGQMNUM,F,R10B),     X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  IPCMSGNIDS         = ',                             x
               (OPNT_IPCMSGNIDS,F,R10B),                               X
               '    IPCSEMNIDS      = ',(OPNT_IPCSEMNIDS,F,R10B),      X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  IPCSEMNOPS         = ',                             X
               (OPNT_IPCSEMNOPS,F,R10B),                               X
               '    IPCSEMNSEMS     = ',(OPNT_IPCSEMNSEMS,F,R10B),     X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  IPCSHMMPAGES       = ',                             X
               (OPNT_IPCSHMMPAGES,F,R10B),                             X
               '    IPCSHMNIDS      = ',(OPNT_IPCSHMNIDS,F,R10B),      X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  IPCSHMNSEGS        = ',                             X
               (OPNT_IPCSHMNSEGS,F,R10B),                              X
               '    IPCSHMSPAGES    = ',(OPNT_IPCSHMSPAGES,F,R10B),    X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  SUPERUSER          = ',OPNT_SUPERUSER,              X
               '    FORKCOPY        = ',                         RS0800X
               INTO=LINE
         LA    R4,LINE+2(R15)
         MVC   2(4,R4),=C' Cow'             Default              RS0800
        #STATUS OPNT_FORKCOPY_FLAG,BIT0,'Copy'
         BRAS  R14,SPACE1              single space
         STRING '  TTYGROUP           = ',OPNT_TTYGROUP,               X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  STEPLIBLIST(60Byte)= ',OPNT_STEPLIBLIST,INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRAS  R14,SPACE1              single space
         STRING '  USERIDALIAS(60Byte)= ',INTO=LINE
         CLI   OPNT_USERIDALIAS,0      low value ??
         JE    USSOPT010
         STRING (LINE,,L),(OPNT_USERIDALIAS,60,T),                     X
               INTO=LINE
USSOPT010 DS   0H                                                RS0800
         BRAS  R14,SPACE1                                        RS0800
.USSOPT100 ANOP                                                  RS0800
USSOPT100 DS   0H
         DROP  R2,R3,R4,R5             no longer used
         BRAS  R14,BLANK1                                        RS0903
         AIF   (NOT D'CVTH7707).USSOPT100N z/OS R4?              RS0504
         TM    HBB7705,L'HBB7707       running on z/OS R4        RS0504
         JZ    USSOPT100N              no, jump                  RS0504
         BRAS  R14,WORKADDR            32K work area             RS0903
         LR    R5,R1                                             RS0903
         LOAD  EP=BPX1PCT              USS callable service      RS0903
         ST    R0,BPX_MOD              SAVE EP ADDRESS           RS0903
         STRING '  HFS Statistics',INTO=LINE                     RS0903
         BRAS  R14,SPACE2                                        RS0903
         LA    R0,PCTL_BFRLIMITS_TYPE_LENGTH                     RS0903
         ST    R0,WKCELL1                                        RS0903
         USING PCTL_BFRLIMITS_TYPE,R5                            RS0903
         L     R15,BPX_MOD                                       RS0903
         CALL (15),                    pfsctl                    RS0903X
               (=CL8'HFS',             type                      RS0903X
               =A(DISPLAYBUFFERLIMITS),                          RS0903X
               WKCELL1,                length                    RS0903X
               PCTL_BFRLIMITS_TYPE,    Info                      RS0903X
               WKCELL2,                Return_value              RS0903X
               LRETCODE,               Returncode                RS0903X
               LRSNCODE),              Resoncode                 RS0903X
               MF=(E,WORK256+100)                                RS0903
         ICM   R15,B'1111',WKCELL2                               RS0903
         JM    USSOPT100E              Minus = Error             RS0903
         STRING '    Maximum virtual storage:',                  RS0903X
               (PCTL_BL_VMAX_VAL,F,R9B),' MB   ',                RS0903X
               ' Minimum fixed storage:',                        RS0903X
               (PCTL_BL_FMIN_VAL,F,R9B),                         RS0903X
               ' MB',INTO=LINE                                   RS0903
         BRAS  R14,SPACE1                                        RS0903
         J     USSOPT100G                                        RS0903
USSOPT100E DS  0H                      Error                     RS0903
*        #SNAP ADDR=(R5),LENGTH=PCTL_BFRLIMITS_TYPE_LENGTH
         STRING 4X,'BPX1PCT',                                    RS0903X
               ' Returncode=',(LRETCODE,,X),                     RS0903X
               ' Reasoncode=',(LRSNCODE,,X),                     RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE2              Double Space              RS0903
USSOPT100G DS  0H                      Global Statistics         RS0903
         BRAS  R14,WORKADDR            32K work area             RS0903
         LR    R5,R1                                             RS0903
         LA    R0,PCTL_GLOBALSTATS_TYPE_LENGTH                   RS0903
         ST    R0,WKCELL1                                        RS0903
         USING PCTL_GLOBALSTATS_TYPE,R5                          RS0903
         L     R15,BPX_MOD                                       RS0903
         CALL (15),                    pfsctl                    RS0903X
               (=CL8'HFS',             type                      RS0903X
               =A(DISPLAYGLOBALSTATS), #                         RS0903X
               WKCELL1,                length                    RS0903X
               PCTL_GLOBALSTATS_TYPE,  Info                      RS0903X
               WKCELL2,                Return_value 0 or -1      RS0903X
               LRETCODE,               Returncode                RS0903X
               LRSNCODE),              Resoncode                 RS0903X
               MF=(E,WORK256+100)                                RS0903
         ICM   R15,B'1111',WKCELL2                               RS0903
         JM    USSOPT100GE             Minus = Error             RS0903
         STRING '    Virtual Storage        :',                  RS0903X
               (PCTL_GS_TOTVIRT,F,R9B),' Pages',                 RS0903X
               ' Fixed Storage        :',                        RS0903X
               (PCTL_GS_TOTFIX,F,R9B),' Pages',                  RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         TM    CVTFLAG3,CVTZARCH       running ALS-2 ?           RS0903
         JZ    USSOPT100N                                        RS0903
         LG    R0,PCTL_GS_META_Y                                 RS0903
         CVDG  R0,WKCELL2                                        RS0903
         LG    R0,PCTL_GS_META_N                                 RS0903
         CVDG  R0,TENWORDS                                       RS0903
         STRING '    LookUp cache hit       :',(WKCELL2,P,R9B),6X,     X
               ' LookUp cache miss    :',(TENWORDS,P,R9B),       RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         LG    R0,PCTL_GS_RPN0_Y                                 RS0903
         CVDG  R0,WKCELL2                                        RS0903
         LG    R0,PCTL_GS_RPN0_N                                 RS0903
         CVDG  R0,TENWORDS                                       RS0903
         STRING '    1st data page hit      :',(WKCELL2,P,R9B),6X,     X
               ' 1st data page miss   :',(TENWORDS,P,R9B),       RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         AIF   (NOT D'CVTH7707).USSOPT100R2 z/OS R4              RS0903
         TM    HBB7707,L'HBB7707       running on z/OS R4        RS0903
         JZ    USSOPT100R2             no, jump and display      RS0903
         STRING '    # of subtasks          :',(PCTL_GS_TASKS,F,R9B),  X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
.USSOPT100R2 ANOP                                                RS0903
USSOPT100R2 DS 0H                                                RS0903
         STRING '    Pool  Size #DS   BP_pages      Fixed',      RS0903X
               ' Already_fixed Not_already_fixed',               RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         STRING '       1 ',(PCTL_GS_BP1_BFRSIZE,H,R5B),1X,      RS0903X
               (PCTL_GS_BP1_DSCNT,H,R3B),2X,                     RS0903X
               (PCTL_GS_BP1_TOTVIRT,F,R9B),2X,                   RS0903X
               (PCTL_GS_BP1_TOTFIX,F,R9B),5X,                    RS0903X
               (PCTL_GS_BP1_FIXD_Y,F,R9B),9X,                    RS0903X
               (PCTL_GS_BP1_FIXD_N,F,R9B),                       RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         STRING '       2 ',(PCTL_GS_BP2_BFRSIZE,H,R5B),1X,      RS0903X
               (PCTL_GS_BP2_DSCNT,H,R3B),2X,                     RS0903X
               (PCTL_GS_BP2_TOTVIRT,F,R9B),2X,                   RS0903X
               (PCTL_GS_BP2_TOTFIX,F,R9B),5X,                    RS0903X
               (PCTL_GS_BP2_FIXD_Y,F,R9B),9X,                    RS0903X
               (PCTL_GS_BP2_FIXD_N,F,R9B),                       RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         STRING '       3 ',(PCTL_GS_BP3_BFRSIZE,H,R5B),1X,      RS0903X
               (PCTL_GS_BP3_DSCNT,H,R3B),2X,                     RS0903X
               (PCTL_GS_BP3_TOTVIRT,F,R9B),2X,                   RS0903X
               (PCTL_GS_BP3_TOTFIX,F,R9B),5X,                    RS0903X
               (PCTL_GS_BP3_FIXD_Y,F,R9B),9X,                    RS0903X
               (PCTL_GS_BP3_FIXD_N,F,R9B),                       RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         STRING '       4 ',(PCTL_GS_BP4_BFRSIZE,H,R5B),1X,      RS0903X
               (PCTL_GS_BP4_DSCNT,H,R3B),2X,                     RS0903X
               (PCTL_GS_BP4_TOTVIRT,F,R9B),2X,                   RS0903X
               (PCTL_GS_BP4_TOTFIX,F,R9B),5X,                    RS0903X
               (PCTL_GS_BP4_FIXD_Y,F,R9B),9X,                    RS0903X
               (PCTL_GS_BP4_FIXD_N,F,R9B),                       RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         J     USSOPT100N                                        RS0903
USSOPT100GE DS 0H                      Global Statistics Error   RS0903
*        #SNAP ADDR=(R5),LENGTH=PCTL_GLOBALSTATS_TYPE_LENGTH     RS0903
         STRING 4X,'BPX1PCT',                                    RS0903X
               ' Returncode=',(LRETCODE,,X),                     RS0903X
               ' Reasoncode=',(LRSNCODE,,X),                     RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE2              Double Space              RS0903
.USSOPT100N ANOP                                              RS0903
USSOPT100N DS 0H
.USSOPT999 ANOP
USSOPT999 DS 0H
         END_PROC
         TITLE 'SHOWMVS &REL - UNIX System Services Data'        RS1199
*---------------------------------------------------------------------*
*                                                                     *
* UNIX System Services (USS)                                          *
*                                                                     *
*                                                                     *
*   HFS Statistics                                                    *
*     Maximum virtual storage:     1161 MB    Minimum fixed storage:  *
*     Virtual Storage        :    12211 Pages Fixed Storage        :  *
*     LookUp cache hit       :   178949       LookUp cache miss    :  *
*     1st data page hit      :   350917       1st data page miss   :  *
*     # of subtasks          :       20                               *
*     Pool  Size #DS   BP_pages      Fixed Already_fixed Not_already_ *
*        1     1   1       6747          0             0              *
*        2     4   1        584          0             0              *
*        3    16   1       1232          0             0              *
*        4    64   1       3648          0             0              *
*                                                                     *
*   Files:                                                            *
*     TypeName   Device ----------Status----------- Mode QJobName    Q*
*     AUTOMNT        14 Active                      RDWR              *
*       Name=*AMD/u/al/public                                         *
*       Path=/u/al/public                                             *
*     AUTOMNT        13 Active                      RDWR              *
*       Name=*AMD/xuser                                               *
*       Path=/u/xt/user                                               *
*     AUTOMNT        12 Active                      RDWR              *
*       Name=*AMD/hnuser                                              *
*       Path=/u/hn/user                                               *
*     AUTOMNT        11 Active                      RDWR              *
*       Name=*AMD/aluser                                              *
*       Path=/u/al/user                                               *
*     HFS            22 Active                      RDWR              *
*       Name=XGCSSCH.OMVSALF0.HFSFILE                                 *
*       Path=/u/xt/user/xgcssch                                       *
*       File system size:    47208 Pages Used pages     :    18839 Pag*
*       Attribute pages :       13 Pages Cached pages   :        0 Pag*
*       Seq I/O reqs    :        0       Random I/O reqs:        0    *
*       Lookup hit      :        4       Lookup miss    :       92    *
*       1st page hit    :        0       1st page miss  :        0    *
*       Index new tops  :        0       Index splits   :        0    *
*       Index joins     :        0       Index read hit :      406    *
*       Index read miss :        5       Index write hit:        4    *
*       Index write miss:        0                                    *
*       RFS Flags       :       83       RFS error flags:       00    *
*       High format RFN :    47199       Member count   :       47    *
*       Sync interval   :       60                                    *
*                                                                     *
*  PID: (with OE-threads info and real Userid)                        *
*    User     Jobname  ASID         PID        PPID State  Start      *
*    $STCOEK  BPXOINIT  0038           1           0 MI   2003-08-28 1*
*             0 CMD=BPXPINPR                                          *
*      Thread_ID        TCB      User        SC  State ACC-Time      S*
*      0D12B81000000000 008EF920             FRK .X... 000H00M00S06  2*
*      0D12C50000000001 008EF788             WAT .W... 000H13M19S61  2*
*      0D1312A000000002 008EF4D0                 .Y... 000H00M00S01  2*
*      0D131F9000000003 008EC788             KIN .K... 000H00M00S00  2*
*      0D132C8000000004 008EC4E0             ACP .F... 000H00M00S00  2*
*                                                                     *
*---------------------------------------------------------------------*
USS      BEGIN_PROC KW=USS                 LOAD require          RS0302
         L     R2,CVTECVT              ECVT                      RS0500
         USING ECVT,R2                                           RS0500
         L     R3,ECVTOCVT-ECVT(,R2)   OCVT
         LTR   R3,R3
         JZ    USS999
         TM    ECVTOCVT,ECVTOMVS       Check for OpenMVS
         JZ    USS999                 No
         USING OCVT,R3
         BRAS  R14,WORKADDR            32K work area
         LA    R0,2000                 length for one entry only
         ST    R0,WKCELL4              pass length               RS0903
         LR    R5,R1
         USING MNTEH,R5                tell assembler
         LR    R6,R5                   point to the entries
         LA    R6,MNTEH#LENGTH(R6)     +Header
         USING MNTE,R6                 tell assembler
         STRING '  Files:',                                            X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING '    TypeName   ','Device ','----------','Status',     X
               '-----------',' Mode ','QJobName  ','  QPid',           X
               INTO=LINE
         BRAS  R14,SPACE1
         LOAD  EP=BPX1GMN              USS callable service
         ST    R0,BPX_MOD              SAVE EP ADDRESS
*Loop
USS110   DS    0H
         MVC   WORK256(3),=C'GMN'
         AIF   (NOT D'CVTJ6609).USS115 OS/390 R9 ?               RS0800
         TM    JBB6609,L'JBB6609       running on OS/390 R9?     RS0800
         JZ    USS115                  no, jump                  RS0800
         MVC   MNTEHID,=C'MNT2'        Set the parms to get a    RS0800
         LHI   R0,MNTE#LENGTH          MNT2 reply                RS0601
         ST    R0,MNTEHBLEN            pass length               RS0800
.USS115  ANOP                                                    RS0800
USS115   DS    0H                                                RS0800
         XCALL BPX_MOD,                w_getmntent                     X
               (WKCELL4,               Length MNTE+MNTEH         RS0903X
               MNTEH,                  BPXYMNTH                        X
               WKCELL1,                -1 or Mount-entries             X
               LRETCODE,               Returncode                      X
               LRSNCODE)               Resoncode
         CLC   LRETCODE,=F'156'  X'9C' bad rc from USS
         JE    USS980
         ICM   R15,B'1111',WKCELL1     Check ReturnValue
         JM    USS980                   minus is an error
         JZ    USS200                   zero no (more) entries
         STRING 4X,(MNTENTFSTNAME,8),1X,(MNTENTFSDEV,F,R8B),           X
               INTO=LINE
         LA    R4,LINE+1(R15)
         MVC   0(6,R4),=C'Active  '   Default
        #STATUS MNTENTSTATUS,MNTENTFILEDEAD,'Not active'
        #STATUS MNTENTSTATUS,MNTENTFILERESET,'Reset UnMount'
        #STATUS MNTENTSTATUS,MNTENTFILEDRAIN,'Drain UnMount'
        #STATUS MNTENTSTATUS,MNTENTFILEFORCE,'Force UnMount'
        #STATUS MNTENTSTATUS,MNTENTFILEIMMED,'Immediate Unmount'
        #STATUS MNTENTSTATUS,MNTENTFILENORM,'Normal UnMount'
        #STATUS MNTENTSTATUS,MNTENTIMMEDTRIED,'Immed UnMount attempted'
        #STATUS MNTENTSTATUS,MNTENTQUIESCED,'Quiesced'
        #STATUS MNTENTSTATUS,MNTENTMNTINPROGRESS,'Mount in Progress'
         LA    R4,LINE+50                                        RS0902
         MVC   0(4,R4),=C'RDWR'   Default
*?      #STATUS MNTENTFSMODE4,MNTENTFSMODEEXPORT,'DFS Exported'
*?      #STATUS MNTENTFSMODE4,MNTENTFSMODENOSUID,'No SetUID'
        #STATUS MNTENTFSMODE4,MNTENTFSMODERDONLY,'READ'
         STRING (LINE,,L),1X,MNTENTJOBNAME,(MNTENTPID,F,R8B),INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRAS  R14,SPACE1
         STRING '      Name=',(MNTENTFSNAM44,44),                      X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRAS  R14,SPACE1
         STRING '      Path=',(MNTENTMOUNTPOINT,60),                   X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRAS  R14,SPACE1
         AIF   (NOT D'CVTJ6609).USS192 OS/390 R9 ?               RS0800
         TM    JBB6609,L'JBB6609       running on OS/390 R9?     RS0800
         JZ    USS192                  no, jump                  RS0800
         STRING 6X,'OWNER=',(MNTENTSYSNAME),' AUTOMOVE=',INTO=LINE
         LA    R4,LINE+1(R15)                                    RS0800
         MVI   0(R4),C'Y'              default automove          DT0800
        #STATUS MNTENTFSMODE4,MNTENTFSNOAUTOMOVE,'N'             DT0800
         STRING (LINE,,L),' CLIENT=',INTO=LINE                   RS0800
         LA    R4,LINE+1(R15)                                    RS0800
         MVI   0(R4),C'N'              default client            RS0800
        #STATUS MNTENTFSMODE4,MNTENTFSCLIENT,'Y'                 RS0800
         BRAS  R14,SPACE1                                        RS0800
         AIF   (NOT D'CVTH7707).USS192 z/OS R4?                  RS0504
         TM    HBB7707,L'HBB7707       running on z/OS R4        RS0504
         JZ    USS192                  no, jump                  RS0504
         TM    CVTFLAG3,CVTZARCH       running ALS-2 ?           RS0903
         JZ    USS192                                            RS0903
         CLI   MNTENTFSNAM44,C'*'      Automount ???             RS0903
         JE    USS192                    yes, leave              RS0903
         LA    R2,PCTL_FSSTATS_TYPE_LENGTH                       RS0903
         ST    R2,WKCELL1                                        RS0903
*                                                                RS0903
*        Allocate an answer area                                 RS0903
*                                                                RS0903
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS0903
         JO    USS150                  yes, jump                 RS0903
         GETMAIN RU,LV=(R2),BNDRY=PAGE allocate PATH work area   RS0903
         J     USS151                                            RS0903
USS150   DS    0H                                                RS0903
         LA    R1,1                    LOC=ANY                   RS0903
         LR    R0,R2                   Length of storage         RS0903
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES             RS0903
USS151   DS    0H                                                RS0903
         LR    R7,R1                   where did we find it      RS0903
         STM   R1,R2,WLM_QUACF_AREA    save addr and length      RS0903
         USING PCTL_FSSTATS_TYPE,R7                              RS0903
         MVC   PCTL_FS_NAME,MNTENTFSNAM44                        RS0903
         LOAD  EP=BPX1PCT              USS callable service      RS0903
         LR    R15,R0                                            RS0903
         CALL (15),                    pfsctl                    RS0903X
               (=CL8'HFS',             type                      RS0903X
               =A(DISPLAYFSSTATS),     #                         RS0903X
               WKCELL1,                length                    RS0903X
               PCTL_FSSTATS_TYPE,      Info                      RS0903X
               WKCELL2,                Return_value 0 or -1      RS0903X
               LRETCODE,               Returncode                RS0903X
               LRSNCODE),              Resoncode                 RS0903X
               MF=(E,WORK256+100)                                RS0903
         ICM   R15,B'1111',WKCELL2                               RS0903
         JM    USS180                  Minus = Error             RS0903
         STRING 6X,'File system size:',                          RS0903X
               (PCTL_FS_SIZE,F,R9B),' Pages',                    RS0903X
               ' Used pages     :',                              RS0903X
               (PCTL_FS_USED,F,R9B),' Pages',                    RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         STRING 6X,'Attribute pages :',                          RS0903X
               (PCTL_FS_AD_ALLOC,F,R9B),' Pages',                RS0903X
               ' Cached pages   :',                              RS0903X
               (PCTL_FS_PGS_CACHED,F,R9B),' Pages',              RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         LG    R0,PCTL_FS_SEQ_IO                                 RS0903
         CVDG  R0,WKCELL2                                        RS0903
         LG    R0,PCTL_FS_RANDOM_IO                              RS0903
         CVDG  R0,TENWORDS                                       RS0903
         STRING 6X,'Seq I/O reqs    :',(WKCELL2,P,R9B),6X,       RS0903X
               ' Random I/O reqs:',(TENWORDS,P,R9B),             RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         LG    R0,PCTL_FS_META_Y                                 RS0903
         CVDG  R0,WKCELL2                                        RS0903
         LG    R0,PCTL_FS_META_N                                 RS0903
         CVDG  R0,TENWORDS                                       RS0903
         STRING 6X,'Lookup hit      :',(WKCELL2,P,R9B),6X,       RS0903X
               ' Lookup miss    :',(TENWORDS,P,R9B),             RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         LG    R0,PCTL_FS_RPN0_Y                                 RS0903
         CVDG  R0,WKCELL2                                        RS0903
         LG    R0,PCTL_FS_RPN0_N                                 RS0903
         CVDG  R0,TENWORDS                                       RS0903
         STRING 6X,'1st page hit    :',(WKCELL2,P,R9B),6X,       RS0903X
               ' 1st page miss  :',(TENWORDS,P,R9B),             RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         LG    R0,PCTL_FS_IX_TOPS                                RS0903
         CVDG  R0,WKCELL2                                        RS0903
         LG    R0,PCTL_FS_IX_SPLITS                              RS0903
         CVDG  R0,TENWORDS                                       RS0903
         STRING 6X,'Index new tops  :',(WKCELL2,P,R9B),6X,       RS0903X
               ' Index splits   :',(TENWORDS,P,R9B),             RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         LG    R0,PCTL_FS_IX_JOINS                               RS0903
         CVDG  R0,WKCELL2                                        RS0903
         LG    R0,PCTL_FS_IX_RDHIT                               RS0903
         CVDG  R0,TENWORDS                                       RS0903
         STRING 6X,'Index joins     :',(WKCELL2,P,R9B),6X,       RS0903X
               ' Index read hit :',(TENWORDS,P,R9B),             RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         LG    R0,PCTL_FS_IX_RDMISS                              RS0903
         CVDG  R0,WKCELL2                                        RS0903
         LG    R0,PCTL_FS_IX_WRHIT                               RS0903
         CVDG  R0,TENWORDS                                       RS0903
         STRING 6X,'Index read miss :',(WKCELL2,P,R9B),6X,       RS0903X
               ' Index write hit:',(TENWORDS,P,R9B),             RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         LG    R0,PCTL_FS_IX_WRMISS                              RS0903
         CVDG  R0,WKCELL2                                        RS0903
         STRING 6X,'Index write miss:',(WKCELL2,P,R9B),          RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         STRING 6X,'RFS Flags       :',7X,(PCTL_FS_RFS_FLAGS,,X),6X,   X
               ' RFS error flags:',7X,(PCTL_FS_RFS_SYNC_ERR,,X), RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         STRING 6X,'High format RFN :',(PCTL_FS_HFRFN,F,R9B),6X, RS0903X
               ' Member count   :',(PCTL_FS_MEM_CNT,F,R9B),      RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         STRING 6X,'Sync interval   :',(PCTL_FS_SYNC,H,R9B),     RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1                                        RS0903
         J     USS190                                            RS0903
USS180   DS    0H                                                RS0903
         STRING 4X,'BPX1PCT',                                    RS0903X
               ' Returncode=',(LRETCODE,,X),                     RS0903X
               ' Reasoncode=',(LRSNCODE,,X),                     RS0903X
               INTO=LINE                                         RS0903
         BRAS  R14,SPACE1              DOUBLE SPACE              RS0903
USS190   DS    0H                                                RS0903
         LM    R1,R2,WLM_QUACF_AREA    save addr and length      RS0903
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS0903
         JO    USS191                  yes, jump                 RS0903
         FREEMAIN RU,LV=(R2),A=(R1)    free getmained work area  RS0903
         J     USS192                  jump to next display      RS0903
USS191   DS    0H                                                RS0903
         LR    R0,R2                   length for FREEMAIN       RS0903
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES Free        RS0903
         DROP  R7                                                RS0903
.USS192  ANOP                                                    RS0903
USS192   DS    0H                                                RS0903
         J     USS110
*Endloop
USS200   DS    0H
         BRAS  R14,BLANK1              BLANK LINE
         AIF   (D'CVTJ6607).USS400     OS/390 R7 ?               RS0601
         TM    JBB6607,L'JBB6607       running on OS/390 R7?     RS0601
         JNZ   USS400                  yes, jump                 RS0601
         BRAS  R14,WORKADDR            32K work area
         LHI   R0,PGPS#LENGTH
         ST    R0,ANSLEN               pass length
         LR    R5,R1
         USING PGPS,R5                 tell assembler
         XC    WKCELL2,WKCELL2         Clear Process-Token
         LA    R2,PGPSCONTTYBUF        Controlling TTY  ->buffer
         ST    R2,PGPSCONTTYPTR                       Store into PGPS
         MVC   PGPSCONTTYBLEN,=A(L'PGPSCONTTYBUF)     Length
         LA    R2,PGPSPATHBUF          Pathname         ->buffer
         ST    R2,PGPSPATHPTR                         Store into PGPS
         MVC   PGPSPATHBLEN,=A(L'PGPSPATHBUF)         Length
         LA    R2,PGPSCMDBUF           Command          ->buffer
         ST    R2,PGPSCMDPTR                          Store into PGPS
         MVC   PGPSCMDBLEN,=A(L'PGPSCMDBUF)           Length
         LA    R2,PGPS
         ST    R2,PGPSA
         STRING '  PID:',INTO=LINE
         BRAS  R14,SPACE1
         STRING '    User     ','Jobname  ','ASID         ',           X
               'PID        ','PPID ','State   ','Start        ',       X
               '         CT_Secs',INTO=LINE
         BRAS  R14,SPACE1
         LOAD  EP=BPX1GPS              USS callable service
         ST    R0,BPX_MOD              SAVE EP ADDRESS
*Loop
USS210   DS    0H
         MVC   WORK256(3),=C'GPS'
         XCALL BPX_MOD,                w_getpsent                      X
               (WKCELL2,               ProcessToken                    X
               PGPSL,                  Length PGPS                     X
               PGPSA,                  BPXYPGPS                        X
               WKCELL1,                -1 or ProcessToken              X
               LRETCODE,               Returncode                      X
               LRSNCODE)               Resoncode
         CLC   LRETCODE,=F'156'  X'9C' bad rc from USS           RS0500
         JE    USS980                                            RS0500
         ICM   R15,B'1111',WKCELL1
         JM    USS980                  Minus = Error
         JZ    USS400                  Null  = No (more) entries RS0803
         STCM  R15,B'1111',WKCELL2
         SLR   R14,R14
         L     R1,PGPSSTARTTIME  get epoch time
         BRAS  R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value
         BRAS  R14,STCKCONV            convert TOD clock to decimal
         LOAD  EP=BPX1SYC              Sysconf
         LR    R3,R0                   Entry point
         MVC   WORK256(3),=C'SYC'
         XCALL (R3),                   w_getconf                       X
               (=A(SC_CLK_TCK),        For the clock_t                 X
               WKCELL1,                -1 or Clock_t value             X
               LRETCODE,               Returncode                      X
               LRSNCODE)               Resoncode
         ICM   R15,B'1111',WKCELL1
         JM    USS980                  Minus = Error
         LOAD  EP=BPX1GPU              USS callable service
         LR    R3,R0                   entry point
         MVC   WORK256(3),=C'GPU'
         MVC   WKCELL3,BLANKS
         MVC   WKCELL3(3),=C'n/a'
         XCALL (R3),                   getpwuid                        X
               (PGPSEUID,              Effective UID                   X
               WKCELL1,                0 or pointer                    X
               LRETCODE,               Returncode                      X
               LRSNCODE)               Resoncode
         ICM   R1,B'1111',WKCELL1
         JZ    USS230                  zero = no entry
         USING GIDN,R1
         STRING (GIDN_U_NAME,8),INTO=WKCELL3                     RS0701
         DROP  R1
         MVI   WORK256+4,C'1'          Single thread (default)
         TM    PGPSSTATUS1,PGPSMULTHREAD  Multithread process
         JZ    USS240
         MVI   WORK256+4,C'M'
USS240   TM    PGPSSTATUS1,PGPSPTHREAD    pthread ?
         JZ    USS241
         MVI   WORK256+4,C'H'
USS241   MVI   WORK256+5,C'-'
         TM    PGPSSTATUS0,PGPSSWAP    Swapped?
         JNO   USS242                    no, don't set the I
         MVI   WORK256+5,C'I'
USS242   MVC   WORK256+6(1),PGPSSTATUS3
         L     R1,PGPSUSERTIME         User-CPU
         A     R1,PGPSSYSTIME          System time
         BRAS  R14,BINTIME             convert time to HH MM SS
*        Divide by WKCELL1 (not yet finished, because
*        I hate division in Assembler)
USS230   DS    0H
         STRING 4X,(WKCELL3,8),1X,'n/a      ','n/a ',3X,               X
               (PGPSPID,F,R9B),3X,(PGPSPPID,F,R9B),1X,(WORK256+4,3),   X
               2X,STCKDATE,1X,(STCKTIME,8),1X,                         X
               ((R3),,R3Z),'H',((R2),,R2Z),'M',                        X
               ((R1),,R2Z),'S',((R0),,R2Z),                            X
               INTO=LINE
         AIF   (NOT D'CVTH6606).USS250
         TM    HBB6606,L'HBB6606       OS/390 R6?
         JNO   USS250                   No, jump
         STRING 4X,(WKCELL3,8),1X,(PGPSJOBNAME,8),1X,(PGPSASID,,X),    X
               3X,(PGPSPID,F,R9B),3X,(PGPSPPID,F,R9B),1X,(WORK256+4,3),X
               2X,STCKDATE,1X,(STCKTIME,8),1X,                         X
               ((R3),,R3Z),'H',((R2),,R2Z),'M',                        X
               ((R1),,R2Z),'S',((R0),,R2Z),                            X
               INTO=LINE
.USS250   ANOP
USS250   DS    0H
         BRAS  R14,SPACE1
         ICM   R0,B'1111',PGPSCMD      Length of Command (Alignment)
         BCTR  R0,0                    Minus one for CMD
         STRING 3X,(PGPSEUID,F,R9B),' CMD=',(PGPSCMD+4,(R0)),          X
               INTO=LINE
         TR    LINE,TRTDOTS      convert non-printable to dots   RS0102
         BRAS  R14,SPACE1
         J     USS210
*Endloop
.USS400  ANOP                                                    RS0601
USS400   DS    0H                                                RS0601
         AIF   (NOT D'CVTJ6607).USS980  leave                    RS0803
         TM    JBB6607,L'JBB6607       running on OS/390 R7?     RS0601
         JZ    USS999                  no, jump                  RS0601
         BRAS  R14,WORKADDR            work area                 RS0601
         L     R0,=A(PGTHA#LEN+PGTHB#LEN+PGTHC#LEN+PGTHJ#LEN)    RS0601
         LR    R3,R1                   where did we find it      RS0601
         USING PGTHA,R3                tell assembler            RS0601
         XC    PGTHA,PGTHA             clear                     RS0601
         LA    R4,PGTHA#LEN(R3)                                  RS0601
         USING PGTHB,R4                tell assembler            RS0601
         MVI   PGTHAFLAG1,PGTHAPROCESS+PGTHACOMMAND+PGTHATHREAD  RS0601
         MVI   PGTHAACCESSPID,PGTH#NEXT                          RS0601
         STRING '  PID: (with OE-threads info and real Userid)',       X
               INTO=LINE                                         RS0601
         BRAS  R14,SPACE1                                        RS0601
         STRING 4X,'User     ','Jobname  ','ASID         ',            X
               'PID        ','PPID ','State  ','Start',                X
               '              CT_Secs',INTO=LINE                 RS0601
         BRAS  R14,SPACE1                                        RS0601
         LOAD  EP=BPX1GTH              USS callable service      RS0601
         ST    R0,BPX_MOD              SAVE EP ADDRESS           RS0601
*Loop                                                            RS0601
USS410   DS    0H                                                RS0601
*        #SNAP ADDR=(R3),LENGTH=PGTHA#LEN                        RS0601
         ST    R3,WKCELL1              pass address of PGTHA     RS0601
         ST    R4,WKCELL2              pass address of PGTHB     RS0601
         MVC   WORK256(3),=C'GTH'      Save ID of callable serviceS0601
         L     R15,BPX_MOD             load entry point          RS0601
         CALL (15),                    __getthent                      X
               (=A(PGTHA#LEN),         Length PGTHA                    X
               WKCELL1,                PGTHA (inout area)              X
               =A(PGTHB#LEN+PGTHC#LEN+PGTHJ#LEN+2048), length          X
               WKCELL2,                PGTHB and others                X
               WKCELL3,                Return_value 0 or -1            X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)                                RS0601
         CLC   LRETCODE,=F'156'  X'9C' bad rc from USS           RS0601
         JE    USS980                                            RS0601
         ICM   R15,B'1111',WKCELL3     load returncode           RS0601
         JM    USS500                  Minus = End of data       RS0601
*        #SNAP ADDR=(R3),LENGTH=PGTHA#LEN  debug code            RS0601
         SR    R5,R5                   clear R5                  RS0601
         ICM   R5,B'0111',PGTHBOFFC    get offset of PGTHC       RS0601
         AR    R5,R4                   add base                  RS0601
         USING PGTHC,R5                tell assembler            RS0601
         SR    R6,R6                   clear R6                  RS0601
         ICM   R6,B'0111',PGTHBOFFF    get offset of PGTHF       RS0601
         AR    R6,R4                   add base                  RS0601
         USING PGTHF,R6                tell assembler            RS0601
         SR    R7,R7                   clear R7                  RS0601
         ICM   R7,B'0111',PGTHBOFFJ    get offset of PGTHJ       RS0601
         AR    R7,R4                   add base                  RS0601
         USING PGTHJ,R7                tell assembler            RS0601
*        #SNAP ADDR=(R4),LENGTH=PGTHB#LEN  debug code            RS0601
*        #SNAP ADDR=(R5),LENGTH=PGTHC#LEN  debug code            RS0601
*        #SNAP ADDR=(R6),LENGTH=64         debug code            RS0601
*        #SNAP ADDR=(R7),LENGTH=300        debug code            RS0601
         L     R1,PGTHCSTARTTIME       get epoch time            RS0601
*        #SNAP ADDR=PGTHCSTARTTIME,LENGTH=4 debug code
         BRAS  R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value      RS0601
         BRAS  R14,STCKCONV            convert TOD clock to decimal0601
         LOAD  EP=BPX1SYC              Sysconf                   RS0601
         LR    R15,R0                  Entry point               RS0601
         MVC   WORK256(3),=C'SYC'                                RS0601
         CALL (15),                    w_getconf                       X
               (=A(SC_CLK_TCK),        For the clock_t                 X
               WKCELL3,                -1 or Clock_t value             X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)                                RS0601
         ICM   R15,B'1111',WKCELL3     check returncode          RS0601
         JM    USS980                  Minus = Error             RS0601
*        #SNAP ADDR=WKCELL3,LENGTH=4   debug code                RS0601
         MVI   WORK256+4,C'M'          Multithread (default)     RS0601
         TM    PGTHCFLAG1,PGTHCMULPROCESS  Multithread process   RS0601
         JZ    USS420_1                                          RS0601
         MVI   WORK256+4,C'1'          Single                    RS0601
USS420_1 MVI   WORK256+5,C'-'                                    RS0601
         TM    PGTHCFLAG1,PGTHCSWAP    Swapped?                  RS0601
         JNO   USS422_1                  no, don't set the I     RS0601
         MVI   WORK256+5,C'I'                                    RS0601
USS422_1 DS    0H                                                RS0601
         L     R1,PGTHCUSERTIME        User-CPU                  RS0601
         A     R1,PGTHCSYSTIME         System time               RS0601
         ST    R3,WKCELL1              save R3                   RS0601
         BRAS  R14,BINTIME             convert time to HH MM SS  RS0601
*        L     R3,WKCELL1              restore R3                RS0601
USS430   DS    0H                                                RS0601
         STRING 4X,PGTHCLOGINNAME,1X,PGTHCJOBNAME,                     X
               2X,(PGTHCASID,,X),3X,(PGTHCPID,F,R9B),                  X
               3X,(PGTHCPPID,F,R9B),1X,(WORK256+4,2),                  X
               3X,STCKDATE,1X,(STCKTIME,8),1X,                         X
               ((R3),,R3Z),'H',((R2),,R2Z),'M',                        X
               ((R1),,R2Z),'S',((R0),,R2Z),                            X
               INTO=LINE                                         RS0601
         L     R3,WKCELL1              restore R3                RS1101
         TR    LINE,TRTPRINT           get rid of garbage        RS0601
         BRAS  R14,SPACE1                                        RS0601
         CLI   PGTHBLIMITF,C'A'       info present ?             RS0103
         JNE   USS465                    no leave                RS0103
         LH    R0,PGTHFLEN             Length of Command (Alignment)601
         BCTR  R0,0                    Minus one for CMD         RS0601
         STRING 5X,(PGTHCEUID,F,R9B),' CMD=',(PGTHFCOMMAND,(R0)),      X
               INTO=LINE                                         RS0601
         TR    LINE,TRTDOTS      convert non-printable to dots   RS0102
         BRAS  R14,SPACE1                                        RS0601
         DROP  R6                      No longer needed          RS0601
         LH    R6,PGTHCCNTOE           No. of Threads            RS0601
         LTR   R6,R6                   some thread?              RS0601
         JZ    USS465                    no                      RS0601
         STRING 6X,'Thread_ID        ','TCB      ',                    X
               'User     ',3X,'SC  ','State ','ACC-Time',6X,           X
               'Start',INTO=LINE                                 RS0601
         BRAS  R14,SPACE1                                        RS0601
*  loop                                                          RS0601
USS460   DS    0H                                                RS0601
*        #SNAP ADDR=(R7),LENGTH=PGTHJ#LEN  debug code            RS0601
         L     R1,PGTHJTTIME           Time                      RS0601
         ST    R3,WKCELL1              save R3                   RS0601
         BRAS  R14,BINTIME             convert time to HH MM SS  RS0601
         STRING 6X,(PGTHJTHID,8,X),1X,(PGTHJTCB,4,X),1X,               X
               (PGTHJLOGINNAME),4X,(PGTHJSYSCALL+1,3),1X,              X
               (PGTHJSTATUSCHARS,5),1X,                                X
               ((R3),,R3Z),'H',((R2),,R2Z),'M',                        X
               ((R1),,R2Z),'S',((R0),,R2Z),1X,                         X
               1X,STCKDATE,1X,(STCKTIME,8),                            X
               INTO=LINE                                         RS0601
         L     R3,WKCELL1              restore R3                RS1101
         TR    LINE,TRTPRINT           get rid of garbage        RS0601
         BRAS  R14,SPACE1                                        RS0601
         CLI   PGTHJLIMITJ,PGTH#NOTCONNECTED End of area         RS0601
         JE    USS465                         yes                RS0601
         CLI   PGTHJLIMITJ,PGTH#STORAGE     More entries !!!     RS0601
         JNE   USS463                        no                  RS0601
         MVC   PGTHACONTINUE,PGTHBCONTINUE  get next             RS0601
         ST    R3,WKCELL1                                        RS0601
         ST    R4,WKCELL2                                        RS0601
         MVC   WORK256(3),=C'GTH'                                RS0601
         L     R15,BPX_MOD                                       RS0601
         CALL (15),                    __getthent                      X
               (=A(PGTHA#LEN),         Length PGTHA                    X
               WKCELL1,                PGTHA (inout area)              X
               =A(PGTHB#LEN+PGTHC#LEN+2048+PGTHJ#LEN), length          X
               WKCELL2,                PGTHB and others                X
               WKCELL3,                Return_value 0 or -1            X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)                                RS0601
         ICM   R15,B'1111',WKCELL3    Check returncode           RS0601
         JM    USS980                 Minus = Error              RS0601
         SR    R5,R5                  Clear R5                   RS0601
         ICM   R5,B'0111',PGTHBOFFC   get offset of PGTHC        RS0601
         AR    R5,R4                  add base                   RS0601
         SR    R7,R7                  Clear R7                   RS0601
         ICM   R7,B'0111',PGTHBOFFJ   get offset of PGTHJ        RS0601
         AR    R7,R4                  add base                   RS0601
         LH    R6,PGTHCCNTOE          No. of Threads             RS0601
         LTR   R6,R6                  Are there some thread?     RS0601
         JZ    USS465                    no                      RS0601
         J     USS460                                            RS0601
*  Endloop                                                       RS0601
USS463   DS    0H                                                RS0601
         SR    R1,R1                  Clear R1                   RS0601
         ICM   R1,B'0111',PGTHJOFFJ   get next entry             RS0601
         LR    R7,R4                  load base                  RS0601
         AR    R7,R1                  add offset                 RS0601
         BRCT  R6,USS460              loop                       RS0601
USS465   DS    0H                                                RS0601
         BRAS  R14,BLANK1             BLANK LINE                 RS0601
         MVC   PGTHACONTINUE,PGTHBCONTINUE  next entry           RS0601
         J     USS410                 loop                       RS0601
         DROP  R3,R4,R5,R7                                       RS0701
*Endloop                                                         RS0601
USS500   DS    0H                                                RS0601
         BRAS  R14,BLANK1             BLANK LINE
         LOAD  EP=BPX1GEU             USS callable service
         LR    R15,R0                 entry point
         MVC   WORK256(3),=C'GEU'
         CALL (15),                    w_getconf                       X
               (WKCELL1),                                              X
               MF=(E,WORK256+100)
         CLC   LRETCODE,=F'156'  X'9C' bad rc from USS
         JE    USS980
         ICM   R1,B'1111',WKCELL1
         JZ    USS505
         STRING 4X,'The PID-list MIGHT be incomplete because your ',   X
               'UID= ',(WKCELL1,F,R9B),' is not a SuperUID(0)',        X
               INTO=LINE
         BRAS  R14,SPACE2                                        RS0800
USS505   DS    0H                                                RS0601
         BRAS  R14,WORKADDR            32K work area
         LR    R3,R1                   WHERE DID WE FIND IT
         USING IPCQ,R3                 tell assembler
         ST    R3,WKCELL2
         XC    WKCELL1,WKCELL1         token
         STRING '  IPC:',INTO=LINE
         BRAS  R14,SPACE2
         LOAD  EP=BPX1GET              USS callable service      RS0601
         ST    R0,BPX_MOD              SAVE EP ADDRESS           RS0601
*Loop
USS510   DS    0H
         MVC   WORK256(3),=C'GET'
         L     R15,BPX_MOD             Entry point
         CALL (15),                    w_getipc                        X
               (WKCELL1,               token                           X
               WKCELL2,                PGTHA (inout area)              X
               =A(IPCQ#LENGTH),        length                          X
               =A(IPCQ#ALL),           return all                      X
               WKCELL3,                Return_value 0 or -1            X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)
         ICM   R15,B'1111',WKCELL3
         JZ    USS590                  Zero = end of data
         C     R15,=X'FFFFFFFF'        -1
         JZ    USS980                  Error
         LA    R4,IPCQIPCP
         USING IPC_PERM,R4
         LA    R5,IPC_MODE
         USING S_MODE,R5
         CLC   IPCQTYPE,=C'IMSG'       msg queue
         JNE   USS520
         CLI   WKCELL4,C'1'            Header already printed?
         JE    USS515                    yes, jump around
         MVI   WKCELL4,C'1'            Mark header as printed
         STRING '    Message Queues:',INTO=LINE
         BRAS  R14,SPACE1
         STRING '            ID Key      Mode          Owner',         X
               '     CBytes       QNum STime     RTime     CTime',     X
               INTO=LINE
         BRAS  R14,SPACE1
USS515   DS    0H
         MVC   WORK256(3),=C'GPU'
         MVC   WORK256+10(8),BLANKS
         MVC   WORK256+15(3),=C'n/a'
         LOAD  EP=BPX1GPU              getpwuid
         LR    R15,R0                  Entry point
         CALL  (15),                   w_getipc                        X
               (IPC_UID,               Userid                          X
               WKCELL4+4,              Return_value 0 or ptr           X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)
         ICM   R6,B'1111',WKCELL4+4
         JZ    USS515_1
         USING GIDN,R6
         STRING (GIDN_U_NAME,8),INTO=WORK256+10
USS515_1 DS    0H
         STRING  4X,(IPCQMID,F,R10B),1X,(IPCQKEY,,X),1X,               X
               (IPC_MODE,,X),3X,(WORK256+10,8),1X,                     X
               (IPCQQBYTES,F,R10B),1X,(IPCQNUM,F,R10B),                X
               INTO=LINE
         ICM   R1,B'1111',IPCQSTIME      get epoch time
         JZ    USS516
         BRAS  R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value
         BRAS  R14,STCKCONV
         STRING  (STCKTIME,,8),INTO=(LINE+66,8)
USS516   DS    0H
         ICM   R1,B'1111',IPCQRTIME      get epoch time
         JZ    USS517
         BRAS  R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value
         BRAS  R14,STCKCONV
         STRING  (STCKTIME,,8),INTO=(LINE+76,8)
USS517   DS    0H
         ICM   R1,B'1111',IPCQCTIME      get epoch time
         JZ    USS518
         BRAS  R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value
         BRAS  R14,STCKCONV
         STRING  (STCKTIME,,8),INTO=(LINE+86,8)
USS518   DS    0H
         BRAS  R14,SPACE1
         J     USS580
USS520   DS    0H
         CLC   IPCQTYPE,=C'ISEM'       Semaphore
         JNE   USS530
         CLI   WKCELL4,C'2'            Header already printed?
         JE    USS525                    yes, jump around
         MVI   WKCELL4,C'2'            Mark header as printed
         STRING '    Semaphores:',INTO=LINE
         BRAS  R14,SPACE1
         STRING '            ID Key      Mode          Owner',         X
               ' NSems OTime     CTime',                               X
               INTO=LINE
         BRAS  R14,SPACE1
USS525   DS    0H
         MVC   WORK256(3),=C'GPU'
         MVC   WORK256+10(8),BLANKS
         MVC   WORK256+15(3),=C'n/a'
         LOAD  EP=BPX1GPU              getpwuid
         LR    R15,R0                  Entry point
         CALL  (15),                   w_getipc                        X
               (IPC_UID,               Userid                          X
               WKCELL4+4,              Return_value 0 or ptr           X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)
         ICM   R6,B'1111',WKCELL4+4
         JZ    USS525_1
         USING GIDN,R6
         STRING (GIDN_U_NAME,8),INTO=WORK256+10
USS525_1 DS    0H
         STRING  4X,(IPCQMID,F,R10B),1X,(IPCQKEY,,X),1X,               X
               (IPC_MODE,,X),3X,(WORK256+10,8),1X,                     X
               (IPCQNSEMS,H,R5B),INTO=LINE
         ICM   R1,B'1111',IPCQOTIME      get epoch time
         JZ    USS526
         BRAS  R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value
         BRAS  R14,STCKCONV
         STRING  (STCKTIME,,8),INTO=(LINE+50,8)
USS526   DS    0H
         ICM   R1,B'1111',IPCQCTIME      get epoch time
         JZ    USS527
         BRAS  R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value
         BRAS  R14,STCKCONV
         STRING  (STCKTIME,,8),INTO=(LINE+60,8)
USS527   DS    0H
         BRAS  R14,SPACE1
         J     USS580
USS530   DS    0H
         CLC   IPCQTYPE,=C'ISHM'       Shared memory
         JNE   USS580
         CLI   WKCELL4,C'3'            Header already printed?
         JE    USS535                    yes, jump around
         MVI   WKCELL4,C'3'            Mark header as printed
         STRING '     Shared Memory:',INTO=LINE
         BRAS  R14,SPACE1
         STRING '            ID Key      Mode          Owner',         X
               '       ACnt    SegSize        PID',                    X
               INTO=LINE
         BRAS  R14,SPACE1
USS535   DS    0H
         MVC   WORK256(3),=C'GPU'
         MVC   WORK256+10(8),BLANKS
         MVC   WORK256+15(3),=C'n/a'
         LOAD  EP=BPX1GPU              getpwuid
         LR    R15,R0                  Entry point
         CALL  (15),                   w_getipc                        X
               (IPC_UID,               Userid                          X
               WKCELL4+4,              Return_value 0 or ptr           X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)
         ICM   R6,B'1111',WKCELL4+4
         JZ    USS535_1
         USING GIDN,R6
         STRING (GIDN_U_NAME,8),INTO=WORK256+10
USS535_1 DS    0H
         STRING  4X,(IPCQMID,F,R10B),1X,(IPCQKEY,,X),1X,               X
               (IPC_MODE,,X),3X,(WORK256+10,8),1X,                     X
               (IPCQACNT,F,R10B),1X,(IPCQSEGSZ,F,R10B),1X,             X
               (IPCQCPID,F,R10B),INTO=LINE
         BRAS  R14,SPACE1
         J     USS580
USS580   DS    0H
*        #SNAP ADDR=(R3),LENGTH=IPCQ#LENGTH
         MVC   WKCELL1,WKCELL3         set token for next call
         J     USS510
USS590   DS    0H
         MVC   WORK256(3),=C'GET'
         LOAD  EP=BPX1GET              w_getipc
         LR    R15,R0                  Entry point
         CALL (15),                    w_getipc                        X
               (WKCELL1,               token                           X
               WKCELL2,                PGTHA (inout area)              X
               =A(IPCQ#LENGTH),        length                          X
               =A(IPCQ#OVER),          return all                      X
               WKCELL3,                Return_value 0 or -1            X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)
         ICM   R15,B'1111',WKCELL3
         JM    USS999                  Zero = end of data
*        #SNAP ADDR=(R3),LENGTH=IPCQ#LENGTH
         STRING '    Summary:',INTO=LINE
         BRAS  R14,SPACE1
         STRING '      Message Queues:',INTO=LINE
         BRAS  R14,SPACE1
         STRING '        MNIDS: ',(IPCQOMSGNIDS,F,R10B),               X
               ' HWIDS: ',(IPCQOMSGHIGHH2O,F,R10B),                    X
               ' CIDSA: ',(IPCQOMSGFREE,F,R10B),                       X
               ' CPRIV: ',(IPCQOMSGPRIVATE,F,R10B),                    X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING '        CKEY:  ',(IPCQOMSGKEYED,F,R10B),              X
               ' GETEX: ',(IPCQOMSGREJECTS,F,R10B),                    X
               ' MAXQB: ',(IPCQOMSGQBYTES,F,R10B),                     X
               ' QMNUM: ',(IPCQOMSGQMNUM,F,R10B),                      X
               ' ENOMEM: ',(IPCQOMSGNOALC,F,R10B),                     X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING '      Semaphores:',INTO=LINE
         BRAS  R14,SPACE1
         STRING '        MNIDS: ',(IPCQOSEMNIDS,F,R10B),               X
               ' HWIDS: ',(IPCQOSEMHIGHH2O,F,R10B),                    X
               ' CIDSA: ',(IPCQOSEMFREE,F,R10B),                       X
               ' CPRIV: ',(IPCQOSEMPRIVATE,F,R10B),                    X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING '        CKEY:  ',(IPCQOSEMKEYED,F,R10B),              X
               ' GETEX: ',(IPCQOSEMREJECTS,F,R10B),                    X
               ' MNSEM: ',(IPCQOSEMSNSEMS,F,R10B),                     X
               ' MNOPS: ',(IPCQOSEMSNOPS,F,R10B),                      X
               ' SBYTES: ',(IPCQOSEMSBYTES,F,R10B),                    X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING '        CBYTE: ',(IPCQOSEMCBYTES,F,R10B),INTO=LINE
         BRAS  R14,SPACE1
         STRING '      Shared Memory:',INTO=LINE
         BRAS  R14,SPACE1
         STRING '        MNIDS: ',(IPCQOSHMNIDS,F,R10B),               X
               ' HWIDS: ',(IPCQOSHMHIGHH2O,F,R10B),                    X
               ' CIDSA: ',(IPCQOSHMFREE,F,R10B),                       X
               ' CPRIV: ',(IPCQOSHMPRIVATE,F,R10B),                    X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING '        CKEY:  ',(IPCQOSHMKEYED,F,R10B),              X
               ' GETEX: ',(IPCQOSHMREJECTS,F,R10B),                    X
               ' TPAGE: ',(IPCQOSHMSPAGES,F,R10B),                     X
               ' SPAGE: ',(IPCQOSHMMPAGES,F,R10B),                     X
               ' SEGPR:  ',(IPCQOSHMNSEGS,F,R10B),                     X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING '        CPAG:  ',(IPCQOSHMCPAGES,F,R10B),             X
               ' MXSEG: ',(IPCQOSHMBIGGEST,F,R10B),                    X
               INTO=LINE
         BRAS  R14,SPACE2
         J     USS999
         DROP  R3,R4,R5,R6          no longer used
.USS980  ANOP
USS980   DS    0H
         STRING 2X,'BPX1',(WORK256,3),                                 X
               ' Returncode=',(LRETCODE,,X),                           X
               ' Reasoncode=',(LRSNCODE,,X),                           X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         J     USS999
PGPSL    DC    A(PGPS#LENGTH)
.USS999  ANOP
USS999   DS    0H
         END_PROC
         TITLE 'SHOWMVS &REL - Cryptography Information'         JM0300
*---------------------------------------------------------------------*
*                                                                     *
*ICSF/MVS information                                                 *
*                                                                     *
*   Jobname: ICSF                                                     *
*   Cryptography is active: YES  Valid master key : NO                *
*   Initialization complete: YES  Active: YES                         *
*   Compatibility permitted: NO   At least one valid crypto unit: NO  *
*   CMOS hardware installed: NO                                       *
*   Installation exit word1 and word2: 00000000 00000000              *
*   FMID: HCRP220                                                     *
*   Userparm: E4E2C5D9D7C1D9D4(USERPARM)                              *
*                                                                     *
*   Measurements:                                                     *
*   Service            Calls           Bytes    Instructions          *
*   ENCSDES                0               0               0          *
*   ENCTDES              256            3632             256          *
*   DECSDES                0               0               0          *
*   DECTDES                0               0               0          *
*   MACGEN                 3             744               3          *
*   MACVER                 5            1240               5          *
*   OWH                  735       370196544             756          *
*   PTR                    0               0               0          *
*   PVR                    0               0               0          *
*                                                                     *
*---------------------------------------------------------------------*
CSF      BEGIN_PROC KW=CSF,BASEREG=NO                            RS0302
         AIF   (NOT D'CVTJ6604).CSF99
         TM    JBB6604,L'JBB6604 running on OS/390 2.4?
         JZ    CSF99                   no, jump
         STRING '&TITLEPFX.ICSF/MVS information',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R7,CVTABEND
         USING SCVTSECT,R7
         ICM   R7,15,SCVTCCVT          CRYPTOGRAPHY CVT
         JZ    CSF0090                 no
         USING CCVT,R7
         LH    R4,CCVTASID             ASID of ICSF/MVS address space
         LTR   R4,R4                   Valid asid?
         JZ    CSF0010                 no
         LOCASCB ASID=(R4)             Get addr of ASCB
         LTR   R15,R1                  Valid ASID?
         JNP   CSF0020                 No, jump
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   CSF0010                 Yes - continue
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         JNZ   CSF0010                 No - continue
         LA    R1,BLANKS
CSF0010  DS    0H
         STRING '  Jobname: ',((R1),8),INTO=LINE
         BRAS  R14,SPACE1              Double Space
CSF0020  DS    0H
         LA    R1,=C'No '
         TM    CCVTSFG1,CCVTACT        Crypto active
         JNO   *+8                     no
         LA    R1,=C'Yes'
         LA    R2,=C'No '
         TM    CCVTSFG1,CCVTMK         Valid master key
         JNO   *+8                     no
         LA    R2,=C'Yes'
         STRING '  Cryptography is active: ',((R1),3),2X,              X
               'Valid master key : ',((R2),3),                         X
               INTO=LINE
         BRAS  R14,SPACE1          <== First line is title
         LA    R1,=C'No '
         TM    CCVTSFG1,CCVTINIT       ICSF/MVS init complete
         JNO   *+8                     no
         LA    R1,=C'Yes'
         LA    R2,=C'No '
         TM    CCVTSFG1,CCVTCSF        ICSF/MVS is active
         JNO   *+8                     no
         LA    R2,=C'Yes'
         STRING '   Initialization complete: ',((R1),3),2X,            X
               'Active: ',((R2),3),                                    X
               INTO=LINE
         BRAS  R14,SPACE1          <== First line is title
         LA    R1,=C'No '
         TM    CCVTSFG1,CCVTCOMP       Compatibility permitted
         JNO   *+8                     no
         LA    R1,=C'Yes'
         LA    R2,=C'No '
         TM    CCVTSFG1,CCVTMK         Valid master key
         JNO   *+8                     no
         LA    R2,=C'Yes'
         STRING '  Compatibility permitted: ',((R1),3),2X,             X
               'At least one valid crypto unit: ',((R2),3),            X
               INTO=LINE
         BRAS  R14,SPACE1          <== First line is title
         LA    R1,=C'No '
         TM    CCVTSFG1,CCVTCMOS       CMOS hardware installed?
         JNO   *+8                     no
         LA    R1,=C'Yes'
         STRING '  CMOS hardware installed: ',((R1),3),                X
               INTO=LINE
         BRAS  R14,SPACE1          <== First line is title
         STRING '  Installation exit word1 and word2: ',               X
               (CCVTINW1,,X),1X,(CCVTINW2,,X),                         X
               INTO=LINE
         BRAS  R14,SPACE1          <== First line is title
         STRING '  FMID: ',CCVTFMID,INTO=LINE
         BRAS  R14,SPACE1          <== First line is title
         STRING '  Userparm: ',                                        X
               (CCVT_USERPARM,,X),'(',CCVT_USERPARM,')',               X
               INTO=LINE
         BRAS  R14,SPACE1              Single Space
         AIF   (NOT D'CVTH7707).CSF0085    z/OS R4 ?             RS0103
         TM    HBB7707,L'HBB7707       running on z/OS R4 ?      RS0103
         JNO   CSF0085                 no, jump                  RS0103
         TM    CVTFLAG3,CVTZARCH       running ALS-2 ?           RS0803
         JZ    CSF0085                                           RS0803
*        STRING '  z/OS R4',INTO=LINE  debug code
*        BRAS  R14,SPACE1              Single Space
         ICM   R5,B'1111',CCVTDACC     RMF measurement data      RS0103
         JZ    CSF0085                   not present             RS0103
         USING DACC,R5                                           RS0103
*        #SNAP ADDR=(R5),LENGTH==DACC_LEN_TOT debug code
         LH    R6,DACC_ENT_CNT         number of entries         RS0803
         JZ    CSF0085                   leave if zero           RS0103
         STRING '  Measurements:',INTO=LINE                      RS0103
         BRAS  R14,SPACE1              Single Space              RS0103
         STRING '  Service            Calls           Bytes',    RS0103X
               '    Instructions',INTO=LINE                      RS0103
         BRAS  R14,SPACE1              Single Space              RS0103
         LA    R5,DACC_ENTRIES                                   RS0103
         DROP  R5                                                RS0103
         USING DACC_ENTRY,R5                                     RS0103
*loop                                                            RS0103
CSF0080  DS    0H                                                RS0103
         LG    R1,DACC_ENT_SVC_CNT     load 64 bit double        RS0103
         CVDG  R1,WORK256              convert to decimal (PL16) RS0103
         LG    R1,DACC_ENT_BYT_CNT     load 64 bit double        RS0103
         CVDG  R1,WORK256+16           convert to decimal (PL16) RS0103
         LG    R1,DACC_ENT_INT_CNT     load 64 bit double        RS0103
         CVDG  R1,WORK256+32           convert to decimal (PL16) RS0103
         STRING 2X,(DACC_ENT_ID),                                RS0103X
               (WORK256,P,R16B),                                 RS0103X
               (WORK256+16,P,R16B),                              RS0103X
               (WORK256+32,P,R16B),                              RS0103X
               INTO=LINE                                         RS0103
         BRAS  R14,SPACE1                                        RS0103
         LA    R5,DACC_ENTRY_LEN(,R5)                            RS0103
         BRCT  R6,CSF0080                                        RS0103
*endloop                                                         RS0103
         DROP  R5                                                RS0103
.CSF0085  ANOP
CSF0085  DS    0H
         J     CSF0095
CSF0090  DS    0H
         STRING '  Cryptography is not active/installed',INTO=LINE
         BRAS  R14,SPACE1              Single space              RS0803
CSF0095  DS    0H
         BRAS  R14,BLANK1              Empty line
.CSF99   ANOP
CSF99    END_PROC
         TITLE 'SHOWMVS &REL - SMF Data'
*---------------------------------------------------------------------*
*                                                                     *
*SMF Data:                                                            *
*                                                                     *
*  Member(SMFPRM00)                                                   *
*    MAN(All) SID(P390) JWT(0030) MAXDORM(3000) STATUS(010000)        *
*                                                                     *
*  SYS1.MAN1                     DUMP REQUIRED    MVSRES         100% *
*  SYS1.MAN2                     ACTIVE           MVSRES          81% *
*  SYS1.MAN3                                      MVSRES           0% *
*                                                                     *
*  SYS   TYPE(1-13,15,17-39,41-59,61,64,70-255)                       *
*        EXITS(IEFUSI,IEFU83)                                         *
*                                                                     *
*---------------------------------------------------------------------*
SMFDATA  BEGIN_PROC KW=SMF,BASEREG=NO                            RS0302
         STRING '&TITLEPFX.SMF Data:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R6,CVTSMCA              SMF SMCA
         USING SMCABASE,R6
         LA    R1,=C'None'             MAN=NONE
         TM    SMCAMISC,SMCAUSER+SMCAMAN Recording active?
         JZ    SMFDATA3                no, jump
         LA    R1,=C'All '             MAN=ALL
         JO    SMFDATA3                no, jump
         LA    R1,=C'User'             MAN=NONE
SMFDATA3 EQU   *
         L     R7,SMCAACTP             ACT address
         USING IEEMBACT,R7
         STRING '  Member(SMFPRM',ACTMEMID,')',INTO=LINE
         BRAS  R14,SPACE1              Single Space
         STRING '    MAN(',((R1),4,T),  MAN(All)                       X
               ') SID(',SMCASID,       SID(IPO1)                       X
               ') JWT(',SMCASJWT,      JWT(0030)                       X
               ') MAXDORM(',SMCASMDM,  MAXDORM(3000)                   X
               ') STATUS(',SMCASSTS,   STATUS(010000)                  X
               ')',INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
         TM    SMCAMISC,SMCAUSER+SMCAMAN Recording active?
         JZ    SMF999                  no, exit
         ICM   R7,B'1111',SMCAFRDS     FIRST RDS
         JZ    SMF999                  SMF not active, exit
         USING IEEMBRDS,R7
*LOOP
SMFDS1   MVC   LINE,BLANKS             CLEAR LINE
         TM    RDSFLG2,RDSLOST         dummy RDS for lost data?
         JO    SMFDS6                  yes, jump
         MVC   DSNAME,RDSNAME          SYS1.PROD.MAN%
         MVC   VOLSER,RDSVOLID         VOLSER
         L     R1,RDSNXTBL             NEXT BLOCK
         M     R0,=F'100'              CALCULATE PERCENTAGE USED
         D     R0,RDSCAPTY             CALCULATE PERCENTAGE USED
SMFDS2   STRING ((R1),,R3B),'%',INTO=CATUNCAT
         TM    RDSFLG1,RDSREADY        READY?
         JO    *+10                    YES, BRANCH AROUND MVC
         MVC   DSNAME+30(6),=C'Active  ' THIS IS THE CURRENT DATA SET
         TM    RDSFLG1,RDSDUMP         DATA-SET FULL MSG ISSUED?
         JNO   *+10                    NO, BRANCH AROUND MVC
         MVC   DSNAME+30(13),=C'DUMP REQUIRED'
         J     SMFDS7
SMFDS6   EQU   *
         STRING '<Dummy RDS for Lost Data>',INTO=DSNAME
SMFDS7   EQU   *
         BRAS  R14,SPACE1          <== next line
         CLC   SMCAFRDS,SMCALRDS       only one RDS ?
         JE    SMFDS8                  yes, exit
         L     R7,RDSNEXT              NEXT RDS IN CHAIN
         C     R7,SMCALRDS             IS THIS THE END OF THE CHAIN?
         JNE   SMFDS1                  NO, PROCESS NEXT DATA SET
*ENDLOOP
SMFDS8   EQU   *
         BRAS  R14,BLANK1              BLANK LINE
         DROP  R7                      RDS
*
*        SMF records not written, by sub-system
*
         L     R3,SMCASSTP             SMF SELECTION CONTROL TABLE
         USING SST,R3                                          JWMFEB96
         LH    R4,SMCANSST             number of SST's
*LOOP
SMF201   CLI   SSTNAME,0               this SST in use?        JWMFEB96
         JZ    SMF249                  no, skip it
         LA    R0,256/8                BYTE LOOP
         LA    R1,0                    1st bit is TYPE(0)
         LA    R2,SSTRCDON             SELECTION BIT STRING
         BRAS  R14,BITSTR              edit bit string
         STRING 2X,SSTNAME,'  TYPE(',(NEXTLINE,,T),')',INTO=LINE
         CLI   LINE+L'LINE-1,C' '      only one line                +JM
         JE    SMF220                  yes                          +JM
         BRAS  R14,WORKADDR            locate work area             +JM
         LR    R2,R1                   our work area                +JM
         LA    R15,NEXTLINE            start of move                +JM
         MVC   0*L'LINE(L'LINE,R2),0*L'LINE(R15) move line 1        +JM
         MVC   1*L'LINE(L'LINE,R2),1*L'LINE(R15) move line 2        +JM
         MVC   2*L'LINE(L'LINE,R2),2*L'LINE(R15) move line 3        +JM
         MVC   3*L'LINE(L'LINE,R2),3*L'LINE(R15) move line 4        +JM
         MVC   4*L'LINE(L'LINE,R2),4*L'LINE(R15) move line 5        +JM
         MVC   5*L'LINE(L'LINE,R2),5*L'LINE(R15) move line 6        +JM
         XC    0*L'LINE(L'LINE,R15),0*L'LINE(R15) clear             +JM
         XC    1*L'LINE(L'LINE,R15),1*L'LINE(R15) clear             +JM
         XC    2*L'LINE(L'LINE,R15),2*L'LINE(R15) clear             +JM
         XC    3*L'LINE(L'LINE,R15),3*L'LINE(R15) clear             +JM
         XC    4*L'LINE(L'LINE,R15),4*L'LINE(R15) clear             +JM
         XC    5*L'LINE(L'LINE,R15),5*L'LINE(R15) clear             +JM
*LOOP                                                               +JM
SMF205   DS    0H                                                   +JM
         LA    R15,LINE+L'LINE-1       end of line                  +JM
*LOOP                                                               +JM
SMF210   DS    0H                                                   +JM
         CLI   0(R15),C','             Look for the previous comma  +JM
         JE    SMF215                  found it                     +JM
         MVI   0(R15),C' '             remove the digit             +JM
         BRCT  R15,SMF210              go look again                +JM
*ENDLOOP                                                            +JM
SMF215   DS    0H                                                   +JM
         LA    R1,LINE+13                                           +JM
         SR    R15,R1                  how much did we string       +JM
         LA    R2,1(R15,R2)                                         +JM
         BRAS  R14,SPACE1              Single Space                 +JM
         TR    0(L'LINE,R2),TRTPRINT   get rid of X'00'             +JM
         STRING 13X,((R2),L'LINE,T),')',INTO=LINE                   +JM
         CLI   LINE+L'LINE-1,C' '      did we get it all            +JM
         JNE   SMF205                  get the length               +JM
*ENDLOOP                                                            +JM
SMF220   DS    0H                                                   +JM
*
*        Display exit table
*
         L     R2,SSTEXTAB             @ exit table            JWMFEB96
         USING EXITTAB,R2                                      JWMFEB96
         ICM   R5,B'1111',EXITNMBR     number of exits         JWMFEB96
         JZ    SMF248X                 no                      JWMFEB96
         BRAS  R14,SPACE1              Single Space
         STRING 6X,'  EXITS(',INTO=LINE                        JWMFEB96
         LA    R2,EXITNTRY             @ first exit entry      JWMFEB96
         USING EXITNTRY,R2                                     JWMFEB96
SMF248B  DS    0H                                              JWMFEB96
         STRING (LINE,,L),(EXITNAME,,L),',',INTO=LINE          JWMFEB96
         LA    R2,EXITEND              skip this one           JWMFEB96
         BRCT  R5,SMF248B                                      JWMFEB96
         LA    R15,LINE(R15)           get OFFSET ADDRESS      JWMFEB96
         BCTR  R15,0                                           JWMFEB96
         MVI   0(R15),C')'             CLOSE PARENTHESIS       JWMFEB96
SMF248X  BRAS  R14,SPACE2              Double Space
SMF249   AH    R3,SMCALSST             bump SST pointer
         BRCT  R4,SMF201               process next SST
*ENDLOOP
*
*        SMF SUBPARMS
*
         L     R6,CVTSMCA              SMF SMCA                  JM1101
*        USING SMCABASE,R6                                       JM1101
         ICM   R4,B'1111',SMCASUBP     Any SUBPARM entries?      JM1101
         JZ    SMF259                  no                        JM1101
         USING IEESUBP,R4                                        JM1101
SMF250   EQU   *                                                 JM1101
         STRING '  SUBPARM(',(SUBPNAME,,T),'(',(SUBPPARM,,T),'))',     X
               INTO=LINE                                         JM1101
         BRAS  R14,SPACE2              Double Space              JM1101
         ICM   R4,B'1111',SUBPNPRM     Any more SMF parms?       JM1101
         JNZ   SMF250                  Yes                       JM1101
SMF259   EQU   *                                                 JM1101
*ENDLOOP                                                         JM1101
SMF269   EQU   *
SMF999   END_PROC
IEESUBP  DSECT                                                   JM1101
SUBPNPRM DS    A                       Address of next SUBPARM   JM1101
SUBPNAME DS    CL4                     subsystem name            JM1101
SUBPPARM DS    CL60                    subsystem parms           JM1101
         TITLE 'SHOWMVS &REL - SMS Configuration'
*---------------------------------------------------------------------*
*                                                                     *
*SMS Configuration:                                                   *
*                                                                     *
*  Description: SMS CONFIGURATION FOR ESAPROD1 SYSTEM                 *
*                                                                     *
*  Last Update: IBMUSER   1991-04-23  12.23                           *
*        Flags: 00000000                                              *
*     Defaults: MANAGEMENT_CLASS(STANDARD)   UNIT(3380)               *
*               TRACK_SIZE(47476)   TRACKS/CYL(15)                    *
* System Names: IPO1                                                  *
*    SCDS Name: SMS.SCDS                                              *
*  PDSE-SHR   : Normal                                                *
*                                                                     *
*  DataClas UserId   Date       Time   Spec1 Spec2 Description        *
*  DEXTCOM  AL13429  1998/07/20 13:40    00    00  HW-COMPRESSION ON  *
*  ...                                                                *
*                                                                     *
*  StorClas UserId   Date       Time   Flag1 Flag2 Description        *
*  NONSMS   SMM      1994/10/27 09:06    00    80  PSEUDO STORCLAS FOR*
*  ...                                                                *
*                                                                     *
*  MgmtClas UserId   Date       Time   Flag1 Flag2 Description        *
*  MALA0### SMM      1997/04/07 18:53    40    FE  DEFAULT FOR AL-AE  *
*  ...                                                                *
*                                                                     *
*---------------------------------------------------------------------*
SMSDATA  BEGIN_PROC KW=SMS,BASEREG=YES IEFSSREQ require          RS0302
         STRING '&TITLEPFX.SMS Configuration:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
         L     R1,CVTJESCT             JES COMM TABLE
         L     R1,JESCTEXT-JESCT(,R1)  JESCT Extension
         ICM   R5,B'1111',JESSMSIB-JESPEXT(R1) SMS SSIB
         JZ    SMSB98                  SMS not active, exit
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS0902
         JZ    SMSB04                  no, jump                  RS0902
         MODESET EXTKEY=ZERO             switch to KEY=0         RS0902
SMSB04   EQU   *                                                 RS0902
         MVC   IGDSSIVT,SSIBSUSE-SSIB(R5)
*
         BRAS  R14,WORKADDR            LOCATE WORK AREA
         ST    R1,SMS_SSOB             save addr for IEFSSREQ calls
         ST    R0,WKCELL3              save length               RS0601
         OI    SMS_SSOB,X'80'          SSOB_PTR
         LR    R3,R1                   get addr of SMS work area
         USING SMS_WORK,R3
*
         LA    R4,SSOB_WRK             POINT TO WORK AREA
         USING SSOB,R4
         MVI   SSOBLEN+1,SSOBHSIZ      SSOB length
         MVC   SSOBID,=C'SSOB'         SSOB
         MVI   SSOBFUNC+1,SSOBSSMS     FUNCTION
         ST    R5,SSOBSSIB             SMS SSIB
*
         LA    R5,SSSA_WRK             SSSA WORK AREA
         ST    R5,SSOBINDV             FUNCTION-DEPENDENT AREA
         USING IEFSSSA,R5
         LA    R0,SSSALN+SSSA1LN       LENGTH
         STH   R0,SSSALEN
         MVC   SSSAID,=C'SSSA'         SSSA
         MVI   SSSAVER+1,SSOBSSVR      VERSION
         MVI   SSSASFN+1,SSSAACTV      SUB-FUNCTION CODE
         MVI   SSSAIFLG,SSSANAUT       NON-AUTHORIZED CALLER
*
*        LH    R0,=Y(SMS_SUB_FUNCTION_WORK_AREA_LENGTH)
*        ST    R0,SSSA1LEN             LENGTH OF WORK AREA
*
*        TYP=2: return base configuration mapped by IGDBCD
*
         MVI   SSSA1TYP,SSSA1CON       RETURN ACTIVE CONFIGURATION
         LA    R1,SMS_SSOB             SSOB_PTR
         IEFSSREQ                  <== CALL SMS
         LTR   R1,R15                  SMS active?
         JNZ   SMSB97                  no, exit                     +JM
         ICM   R0,B'1111',SSOBRETN     TEST RETURN CODE
         JNZ   SMSB96                  OK, jump                  RS0902
*
SMSB40   EQU   *
         L     R6,SSSA1PTR             ADDR OF WORK AREA         RS0902
         USING IGDBCD,R6                                         RS0902
         STRING '  Description: ',BCDFDESC,INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  Last Update: ',BCDFUSER,2X,BCDFDATE,2X,BCDFTIME,    X
               INTO=LINE
         BRAS  R14,SPACE1              next line
         STRING '        Flags: ',(BCDFLAGS,,X),INTO=LINE
         BRAS  R14,SPACE1              next line
         OC    BCDMCNAM,BLANKS         00 -> 40
         STRING '     Defaults: MANAGEMENT_CLASS(',(BCDMCNAM,,T),')',  X
               '   UNIT(',(BCDDUNIT,,T),')',                           X
               INTO=LINE
         BRAS  R14,SPACE1              next line
         STRING 14X,                                                   X
               ' TRACK_SIZE(',(BCDTRKSZ,F,L),')',                      X
               '   TRACKS/CYL(',(BCDCYLCP,F,L),')',                    X
               INTO=LINE
         BRAS  R14,SPACE1              next line
*******  STRING '  Systm Names: ',(BCDFSYSN,8*8),INTO=LINE
         STRING ' System Names: ',INTO=LINE
         LA    R1,BCDFSYSN             1st system name
         LA    R2,1                    count systems
         LA    R3,8                    max no of system names
*loop
SMSB50   CLC   CVTSNAME,0(R1)          is this my own system?
         JNE   SMSB51                  no, jump
         STH   R2,OWNSMSSYS            yes, remember it
SMSB51   STRING (LINE,,T),1X,((R1),L'BCDFSYSN),INTO=LINE
         LA    R1,L'BCDFSYSN(,R1)      point to next system name
         LA    R2,1(,R2)               SYSN),INTO=LINE
         BRCT  R3,SMSB50               loop through array
*endloop
         BRAS  R14,SPACE1              next line
         L     R1,SSSA1PTR             load addr and length      RS0902
         L     R2,SSSA1LEN                                       RS0902
         FREEMAIN RU,LV=(R2),A=(R1)    free work area            RS0902
         L     R3,IGDSSIVT             SMS vector table          RS0100
         USING IGDSSIVTAB,R3                                     RS0100
         STRING '    Parmlib  : IGDSMS',IGDSPARM,INTO=LINE       RS0100
         BRAS  R14,SPACE1              next line                 RS0100
         STRING '    SCDS Name: ',BCDSCDSN,INTO=LINE
         BRAS  R14,SPACE1              next line
         STRING '    ACDS Name: ',IGDSACDS,INTO=LINE             RS0100
         BRAS  R14,SPACE1              next line                 RS0100
         STRING '    Comm-DSN : ',IGDSCODS,INTO=LINE             RS0100
         BRAS  R14,SPACE1              next line                 RS0100
         STRING '    ACS-Exits: ',(IGDSACSC,,X),' ',(IGDSACDC,,X),' ', X
               (IGDSACMC,,X),INTO=LINE                           RS0100
         BRAS  R14,SPACE1              next line                 RS0100
*
*        Determine status of PDSE Sharing
*
*MSB75   LA    R5,=CL8'n/a'            undetermined
SMSB75   STRING 'n/a     ',INTO=WORK256 undetermined             RS0902
         ICM   R6,B'1111',IGWLSHR      IGWLSHR module available?
         JZ    SMSB75F                 no, exit
         SYNCHX SMSB75T,RESTORE=YES    CALL IGWLSHR in key=8     RS1002
         LTR   R15,R15                 Test return code
         JNZ   SMSB75F                 bad rc, ignore
         CL    R1,=F'1'                Check status                 +RS
         JNE   SMSB75D                 no, jump
         STRING 'Normal  ',INTO=WORK256 Normal Sharing           RS0902
SMSB75D  CL    R1,=F'2'                Check status                 +RS
         JNE   SMSB75F                 no, jump
         STRING 'Extended',INTO=WORK256 Extented Sharing         RS0902
SMSB75F  STRING '  PDSE-SHR   : ',(WORK256,8),INTO=LINE          RS0902
         BRAS  R14,SPACE1              next line                    +JM
         J     SMSB75X                 exit
*
*        this code executes in key=8
*
SMSB75T  L     R13,UNPROTWK            Point at unprotected area
         XCALL (R6),                   IGWLSHR                         X
               (LRETCODE,              Returcode                       X
               LRSNCODE,               Reasoncode                      X
               WORK256+25,             Problemdata                     X
               =F'1',                  Input attr_selector             X
               =F'1',                  Input attr_array length         X
               WKCELL2)                Output attr_array            +RS
         L     R1,WKCELL2              return status index
         EXIT                                                       +RS
*
SMSB75X  EQU   *
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?          RS1001
         JZ    SMSB75Z                 NO, JUMP                  RS1001
         MVC   WORK256(DESERVL),DESERV
         DESERV FUNC=EXIT,EXIT_SCOPE=GLOBAL,EXIT_OPTION=QUERY,   RS1001X
               EXIT_PREV_DSTPTR=WKCELL1,RETCODE=LRETCODE,        RS1001X
               RSNCODE=LRSNCODE,MF=(E,WORK256)                   RS1001
         STRING '  DeServ-Exit:',' RC: ',(LRETCODE,,X),                X
               ' RSN: ',(LRSNCODE,,X),INTO=LINE
         CLC   LRETCODE,=F'0'          Retruncode = 0?           RS1001
         JNE   SMSB75Y                   no, leave               RS1001
         STRING '  DeServ-Exit:',' n/a',INTO=LINE                RS1001
         ICM   R3,B'1111',WKCELL1      load DSTPTR               RS1001
         JZ    SMSB75Y                   leave if zero           RS1001
         USING DST,R3                                            RS1001
         STRING '  DeServ-Exit:',' GloBRASexit at x''',                X
               (DST_EXIT_PTR,,X),'''',INTO=LINE
SMSB75Y  EQU   *                                                 RS1001
         BRAS  R14,SPACE1              next line                 RS1001
SMSB75Z  EQU   *                                                 RS1001
         BRAS  R14,BLANK1              double space                 +JM
         MVI   WKCELL1,X'00'           getmain done ?               +RS
*        TYP=9: return list of data classes                         +RS
*                                                                   +RS
         L     R3,SMS_SSOB             save addr for IEFSSREQ calls
         USING SMS_WORK,R3
*
         LA    R4,SSOB_WRK             POINT TO WORK AREA
         USING SSOB,R4
*
         LA    R5,SSSA_WRK             SSSA WORK AREA  RSNEW
         MVI   SSSA1TYP,SSSA1DCL       RETURN all data classes      +JM
         BRAS  R14,IEFSS               call SMS                     +RS
         LTR   R1,R1                                                +RS
         JNZ   SMSB98X                                              +RS
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?                  +JM
         JE    SMSB84                  no, try next type
         USING IGDDCDH,R6                                           +RS
         STRING '  DataClas',1X,'UserId',3X,'Date',7X,'Time',3X,       X
               'Spec1',1X,'Spec2',1X,'Description',INTO=LINE        +RS
         BRAS  R14,SPACE2          <== next line                    +RS
         L     R7,DCDPCNT              LOOP COUNTER                 +RS
         L     R1,DCDPLEN              Load length of a entry       +RS
         ST    R1,WKCELL4              Save length                  +RS
         LA    R6,DCDH_LENGTH(,R6)    point to entry                +RS
         USING IGDSCDE,R6           Caution this dsect maps not     +RS
*LOOP                               only the dataclass              +RS
SMSB82   DS    0H                                                   +RS
         STRING 2X,(SCDNAME,8,T),1X,SCDUSER,1X,SCDDATE,1X,SCDTIME,1X,  X
               (SCDFLG1,,X),4X,(SCDFLG2,,X),2X,(SCDDESC,80,T),INTO=LINE
         TR    LINE,TRTPRINT                                        +JM
         BRAS  R14,SPACE1          <== next line                    +RS
         AL    R6,WKCELL4              Skip this entry              +JM
         BRCT  R7,SMSB82               Do loop                      +RS
         BRAS  R14,BLANK1              BLANK LINE                   +RS
*ENDLOOP                                                            +RS
         L     R1,SSSA1PTR             load addr and length         +RS
         L     R2,SSSA1LEN                                          +RS
         FREEMAIN RU,LV=(R2),A=(R1)    free work area               +RS
         J     SMSB82C                                              +JM
SMSB82A  DS    0H                                                   +JM
SMSB82C  DS    0H                                                   +JM
SMSB84   DS    0H                                                   +RS
         CLI   SSSA1TYP,SSSA1DCL       Dataclass ?                  +RS
         JE    SMSB86                    yes do StorClas
         CLI   SSSA1TYP,SSSA1SCL       Storageclass ?               +RS
         JE    SMSB85                    yes do MgmgtClass
         CLI   SSSA1TYP,SSSA1MCL       Mgmtclass ?                  +RS
         JE    SMSB87                    yes do Storgrp
         CLI   SSSA1TYP,SSSA1SGL       Storgrp ?                    +JM
         JE    SMSB88                    yes do Aggregrp def
         CLI   SSSA1TYP,SSSA1AGL       Aggregrp ?                   +JM
         JE    SMSB90                    yes do Optical lib def
         CLI   SSSA1TYP,SSSA1OLL       Optical lib's ?              +RS
         JE    SMSB92                    yes do Optical drive
         CLI   SSSA1TYP,SSSA1ODL       Optical drive ?              +RS
         JE    SMSB93                    yes do Destination      RS0902
         CLI   SSSA1TYP,SSSA1DSL       Destination definition    RS0902
         JE    SMSB94                    yes do end              RS0902
SMSB85   DS    0H                                                   +RS
*        TYP=10: return list of managment classes                   +RS
*                                                                   +RS
         MVI   SSSA1TYP,SSSA1MCL       RETURN all managment classes +RS
         BRAS  R14,IEFSS               call SMS                     +RS
         LTR   R1,R1                                                +RS
         JNZ   SMSB98X                                              +RS
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?                  +JM
         JE    SMSB84                  no, try next type            +JM
         USING IGDMCDH,R6                                           +RS
         STRING '  MgmtClas',1X,'UserId',3X,'Date',7X,'Time',3X,       X
               'Flag1',1X,'Flag2',1X,'Description',INTO=LINE        +RS
         BRAS  R14,SPACE2          <== next line                    +RS
         L     R7,MCDPCNT              LOOP COUNTE                  +RS
         L     R1,MCDPLEN              Load length of a entry       +JM
         ST    R1,WKCELL4              Save length                  +JM
         LA    R6,MCDH_LENGTH(,R6)    point to entry                +RS
         J     SMSB82                                               +RS
SMSB86   DS    0H                                                   +RS
*        TYP=11: return list of storage classes                     +RS
*                                                                   +RS
         L     R3,SMS_SSOB             save addr for IEFSSREQ calls
         USING SMS_WORK,R3
*
         LA    R4,SSOB_WRK             POINT TO WORK AREA
         USING SSOB,R4
*
         LA    R5,SSSA_WRK             SSSA WORK AREA  RSNEW
         MVI   SSSA1TYP,SSSA1SCL       RETURN all storage class     +RS
         BRAS  R14,IEFSS               Call SMS                     +RS
         LTR   R1,R1                                                +RS
         JNZ   SMSB98X                                              +RS
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?                  +JM
         JE    SMSB84                  no, try next type
         L     R6,SSSA1PTR             use this address             +RS
         USING IGDSCDH,R6                                           +RS
         STRING '  StorClas',1X,'UserId',3X,'Date',7X,'Time',3X,       X
               'Flag1',1X,'Flag2',1X,'Description',INTO=LINE        +RS
         BRAS  R14,SPACE2          <== next line                    +RS
         L     R7,SCDPCNT              LOOP COUNTE                  +RS
         L     R1,SCDPLEN              Load length of a entry       +JM
         ST    R1,WKCELL4              Save length                  +JM
         LA    R6,SCDH_LENGTH(,R6)     point to entry               +RS
         J     SMSB82                                               +RS
SMSB87   DS    0H                                                   +JM
*        TYP=12: return list of storage groups                      +JM
*                                                                   +JM
         MVI   SSSA1TYP,SSSA1SGL       RETURN all storage groups    +JM
         BRAS  R14,IEFSS               call SMS                     +JM
         LTR   R1,R1                                                +JM
         JNZ   SMSB98X                                              +JM
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?                  +JM
         JE    SMSB84                  no, try next type
         USING IGDSGD,R6                                            +JM
         STRING '  Storgrp ',1X,'UserId',3X,'Date',7X,'Time',3X,       X
               'Spec1',1X,'Spec2',1X,'Description',INTO=LINE        +JM
         BRAS  R14,SPACE2          <== next line                    +JM
         L     R7,SGDPCNT              LOOP COUNTE                  +JM
         L     R1,SGDPLEN              Load length of a entry       +JM
         ST    R1,WKCELL4              Save length                  +JM
         LA    R6,SGDEF               point to entry                +JM
         J     SMSB82                                               +JM
SMSB88   DS    0H                                                   +JM
*                                                                   +JM
*        TYP=22: return list of aggrgate groups (ABARS)             +JM
*                                                                   +JM
         MVI   SSSA1TYP,SSSA1AGL       RETURN all aggrgate groups   +JM
         BRAS  R14,IEFSS               call SMS                     +JM
         LTR   R1,R1                                                +JM
         JNZ   SMSB98X                                              +JM
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?                  +JM
         JE    SMSB84                  no, try next type
         USING IGDAGD,R6                                            +JM
         STRING '  Aggregrp',1X,'UserId',3X,'Date',7X,'Time',3X,       X
               'Spec1',1X,'Spec2',1X,'Description',INTO=LINE        +JM
         BRAS  R14,SPACE2          <== next line                    +JM
         L     R7,AGDPCNT              LOOP COUNTE                  +JM
         L     R1,AGDPLEN              Load length of a entry       +JM
         ST    R1,WKCELL4              Save length                  +JM
         LA    R6,AGDEF               point to entry                +JM
         J     SMSB82                                               +JM
SMSB90   DS    0H                                                   +JM
*        TYP=24: return list of optical libraries                   +RS
*                                                                   +RS
         MVI   SSSA1TYP,SSSA1OLL       RETURN all                   +RS
         BRAS  R14,IEFSS               call SMS                     +RS
         LTR   R1,R1                                                +RS
         JNZ   SMSB98X                                              +RS
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?                  +RS
         JE    SMSB84                  no, try next type
         USING IGDLBDH,R6                                           +RS
         L     R7,LBDPCNT              LOOP COUNTER
         STRING '  LibName ',1X,'UserId',3X,'Date',7X,'Time',          X
               INTO=LINE                                            +RS
         BRAS  R14,SPACE2          <== next line                    +RS
         L     R1,LBDELNG              Load length of a entry       +JM
         ST    R1,WKCELL4              Save length                  +JM
         LA    R6,LBDH_LENGTH(,R6)     point to entry               +RS
         USING IGDLBDE,R6           Caution this dsect maps not     +RS
SMSB90_1 DS    0H                                                   +JM
         STRING 2X,(LBDNAME,8,T),1X,LBDUSER,1X,LBDDATE,1X,LBDTIME,     X
               INTO=LINE
         BRAS  R14,SPACE1          <== next line                    +RS
         AL    R6,WKCELL4              Skip this entry              +JM
         BRCT  R7,SMSB90_1                                          +JM
         L     R1,SSSA1PTR             load addr and length      RS0902
         L     R2,SSSA1LEN                                       RS0902
         FREEMAIN RU,LV=(R2),A=(R1)    free work area            RS0902
         BRAS  R14,BLANK1              BLANK LINE                   +JM
SMSB92   DS    0H                                                   +JM
*        TYP=26: return list of optical drives                   RS1002
*        partial dsect-info available                            RS1002
         MVI   SSSA1TYP,SSSA1ODL       RETURN all                RS1002
         BRAS  R14,IEFSS               call SMS                  RS1002
         LTR   R1,R1                                             RS1002
         JNZ   SMSB98X                                           RS1002
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?               RS1002
         JE    SMSB84                  no, exit                  RS1002
         USING IGDDRDH,R6                                        RS1002
         L     R7,DRDPCNT              LOOP COUNTER              RS1002
         STRING '  Optical Drives',INTO=LINE                     RS1002
         BRAS  R14,SPACE2          <== next line                 RS1002
*        #SNAP ADDR=(R6),LENGTH=2500   debug                     RS0902
         STRING '  DevName ',1X,'UserId',3X,'Date',7X,'Time',          X
               INTO=LINE                                         RS1002
         BRAS  R14,SPACE2          <== next line                 RS1002
         L     R1,DRDELNG              Load length of a entry    RS1002
         ST    R1,WKCELL4              Save length               RS1002
         LA    R6,DRDH_LENGTH(,R6)     point to entry            RS1002
         USING IGDDRDE,R6           Caution this dsect maps not  RS1002
SMSB92_1 DS    0H                                                RS1002
         STRING 2X,(DRDNAME,8,T),1X,DRDUSER,1X,DRDDATE,1X,DRDTIME,     X
               INTO=LINE                                         RS1002
         BRAS  R14,SPACE1          <== next line                 RS1002
         AL    R6,WKCELL4              Skip this entry           RS1002
         BRCT  R7,SMSB92_1                                       RS1002
         L     R1,SSSA1PTR             load addr and length      RS1002
         L     R2,SSSA1LEN                                       RS1002
         FREEMAIN RU,LV=(R2),A=(R1)    free work area            RS1002
         BRAS  R14,BLANK1              BLANK LINE                RS1002
SMSB93   DS    0H                                                RS0902
*        TYP=28: return list of destination definition           RS0902
*        sorry no dsect-info available                           RS0902
         MVI   SSSA1TYP,SSSA1DSL       RETURN all                RS0902
         BRAS  R14,IEFSS               call SMS                  RS0902
         LTR   R1,R1                                             RS0902
         JNZ   SMSB98X                                           RS0902
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?               RS0902
         JE    SMSB84                  no, exit                  RS0902
*        USING IGDSGD,R6                                         RS0902
         STRING '  Destination Definition',INTO=LINE             RS0902
         BRAS  R14,SPACE2          <== next line                 RS0902
         #SNAP ADDR=(R6),LENGTH=100                              RS0902
SMSB94   EQU   *                                                    +JM
*
*        Allocate an un-protected work area for the READ Routine
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS0902
         JZ    SMSB94X                 no, jump                  RS0902
         MODESET KEYADDR=PROTKEY,WORKREG=2                       RS0902
SMSB94X  DS    0H                                                RS0902
         LHI   R2,SMS_WORK_LENGTH
         GETMAIN RU,LV=(R2)            ALLOCATE SMS WORK AREA
         STM   R1,R2,SMS_SSOB          save addr for IEFSSREQ calls
         OI    SMS_SSOB,X'80'          SSOB_PTR
         J     SMSB99                  exit
*
SMSB96   STRING '  IEFSSREQ FAILED - ',                                X
               'R15=',((R1),,L),                                       X
               ' SSOBRETN=',(SSOBRETN,F,L),                            X
               ' SSSA1TYP=',(SSSA1TYP,FL1,L),                          X
               ' SSSASFN=',(SSSASFN,H,L),                              X
               ' SSSARSN=',(SSSARSN,F,L),                              X
               ' SSSA1LEN=',(SSSA1LEN,F,L),                            X
               ' SSSA1ALN=',(SSSA1ALN,F,L),                            X
               INTO=LINE                                            +JM
         BRAS  R14,SPACE1              Double Space
         J     SMSB98X                 exit
*
SMSB97   STRING '  SMS is not active on this system, R15=',((R1),,L),  X
               INTO=LINE                                            +JM
         BRAS  R14,SPACE1              Double Space
         J     SMSB98X                 exit
*
SMSB98   STRING '  SMS is not active on this system.',INTO=LINE
         BRAS  R14,SPACE1              Double Space
*
*        Reaquire a SMS work arae                                   +JM
*
SMSB98X  DS    0H
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS0902
         JZ    SMSB98Y                 no, jump                  RS0902
         MODESET KEYADDR=PROTKEY,WORKREG=2                       RS0902
SMSB98Y  DS    0H                                                RS0902
         XC    SMS_SSOB,SMS_SSOB       clear SSOB pointer        RS0902
         LHI   R2,SMS_WORK_LENGTH
         GETMAIN RU,LV=(R2)            ALLOCATE SMS WORK AREA       +JM
         STM   R1,R2,SMS_SSOB          save addr for IEFSSREQ calls +JM
         OI    SMS_SSOB,X'80'          SSOB_PTR                     +JM
*
SMSB99   DS    0H                                                   +JM
*
SMSD999  END_PROC
DESERV   DESERV FUNC=EXIT,EXIT_SCOPE=GLOBAL,EXIT_OPTION=QUERY,         X
               MF=L                                              RS1001
DESERVL  EQU   *-DESERV                                          RS1001
*---------------------------------------------------------------------*
*                                                                     *
*        IEFSSA-Request for StorClas/MgmtClass/DataClas               *
*                                                                     *
*---------------------------------------------------------------------*
IEFSS    BEGIN_PROC SAVE=NO            BASEREG=YES IEFSSREQ req     +RS
         STM   R12,R14,WORK256+32      save three register          +RS
         BALR  R12,0                   IEFSSREQ req                 +RS
         USING *,R12                                                +RS
*                                                                   +RS
         L     R1,CVTJESCT             JES COMM TABLE               +RS
         L     R1,JESCTEXT-JESCT(,R1)  JESCT Extension              +RS
         ICM   R5,B'1111',JESSMSIB-JESPEXT(R1) SMS SSIB             +RS
         JZ    IEFSS6                  SMS not active, exit         +JM
         L     R3,SMS_SSOB                                          +RS
         USING SMS_WORK,R3                                          +RS
*                                                                   +RS
         LA    R4,SSOB_WRK             POINT TO WORK AREA           +RS
         USING SSOB,R4                                              +RS
         MVI   SSOBLEN+1,SSOBHSIZ      SSOB length                  +RS
         MVC   SSOBID,=C'SSOB'         SSOB                         +RS
         MVI   SSOBFUNC+1,SSOBSSMS     FUNCTION                     +RS
         ST    R5,SSOBSSIB             SMS SSIB                     +RS
*                                                                   +RS
         LA    R5,SSSA_WRK             SSSA WORK AREA               +RS
         ST    R5,SSOBINDV             FUNCTION-DEPENDENT AREA      +RS
         USING IEFSSSA,R5                                           +RS
         LA    R0,SSSALN+SSSA1LN       LENGTH                       +RS
         STH   R0,SSSALEN                                           +RS
         MVC   SSSAID,=C'SSSA'         SSSA                         +RS
         MVI   SSSAVER+1,SSOBSSVR      VERSION                      +RS
         MVI   SSSASFN+1,SSSAACTV      SUB-FUNCTION CODE            +RS
         MVI   SSSAIFLG,SSSANAUT       NON-AUTHORIZED CALLER        +RS
         XC    SSSA1LEN,SSSA1LEN                                 RS0902
         XC    SSSA1PTR,SSSA1PTR                                 RS0902
         XC    SSSARSN,SSSARSN                                   RS1002
         LA    R1,SMS_SSOB             SSOB_PTR                     +RS
         IEFSSREQ                  <== CALL SMS                     +RS
         LTR   R1,R15                  SMS active?                  +RS
         JNZ   IEFSS6                  no, exit                     +RS
*        If req failed with RSN=5002, leave                         +RS
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?                  +RS
         JE    IEFSS9                  no, exit
         ICM   R1,B'1111',SSOBRETN     TEST RETURN CODE             +RS
         JZ    IEFSS9                  OK, jump                     +RS
*                                                                   +RS
IEFSS3   DS    0H                                                   +JM
*                                                                   +RS
IEFSS5   STRING '  IEFSSREQ FAILED - ',                                X
               'R15=',((R1),,L),                                       X
               ' SSOBRETN=',(SSOBRETN,F,L),                            X
               ' SSSA1TYP=',(SSSA1TYP,FL1,L),                          X
               ' SSSASFN=',(SSSASFN,H,L),                              X
               ' SSSARSN=',(SSSARSN,F,L),                              X
               ' SSSA1LEN=',(SSSA1LEN,F,L),                            X
               ' SSSA1ALN=',(SSSA1ALN,F,L),                            X
               INTO=LINE                                            +RS
         LA    R1,4                                                 +RS
         BRAS  R14,SPACE1              Double Space                 +RS
         J     IEFSS9                  exit                         +RS
*                                                                   +RS
IEFSS6   STRING '  SMS is not active on this system, R15=',((R1),,L),  X
               INTO=LINE                                            +RS
         BRAS  R14,SPACE1              Double Space                 +RS
IEFSS9   DS    0H                                                   +RS
         L     R6,SSSA1PTR             ADDR OF WORK AREA         RS0902
IEFSSEND DS    0H                                                   +RS
         LM    R12,R14,WORK256+32      restore three register       +RS
         BR    R14                                                  +RS
         DROP  R3,R4,R5                                             +JM
         TITLE 'SHOWMVS &REL - HSM Data'
*---------------------------------------------------------------------*
*                                                                     *
*HSM Info                                                             *
*                                                                     *
*  Jobname: SYSHSMF  Latest number of Requests:        27             *
*  Maximum Storage for MWE:   102400 in used:       864               *
*  Inactivity Limit: 30% Active: 90% MWE:  4                          *
*  Time of ARC0057I: n/a                                              *
*  Time of ARC0058I: n/a                                              *
*                                                                     *
*  HSM Activity (MWE):                                                *
*  Date       Time        Function     UserID  Req-No DS-Name         *
*  2000-04-25 19:10:59.48 03 Recall    XSSGSCH     25 XSSGSCH.ADATA.CN*
*  2000-04-25 19:10:59.83 07 Backup    XSSGSCH     26 XSSGSCH.ARCHHFS.*
*  2000-04-25 19:11:00.57 06 Migrate   XSSGSCH     27 XSSGSCH.ATR.REPO*
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
HSM      BEGIN_PROC KW=HSM,BASEREG=NO                            RS0402
         STRING '&TITLEPFX.HSM Info',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  HSM not active',INTO=LINE
         ICM   R3,B'1111',CVTHSM
         JZ    HSM98
         USING MQCT,R3             FDR set MQCTFACT but not MQCTASCB
         TM    MQCTFLG1,MQCTFACT       HSM active?
         JZ    HSM98                  no, leave
         ICM   R15,B'1111',MQCTASCB    HSM ASCB present?
         JZ    HSM98                  no, leave
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   HSM10                Yes - continue
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         JNZ   HSM10                No - continue
         LA    R1,BLANKS
HSM10    DS    0H
         STRING '  Jobname: ',((R1),8),                                X
               ' Latest number of Requests: ',(MQCTRQN,F,R9B),         X
               INTO=LINE
         BRAS  R14,SPACE1              Double Space
         STRING '  Maximum Storage for MWE:',(MQCTCSHL,F,R9B),         X
               ' in used: ',(MQCTCSCU,F,R9B),INTO=LINE
         BRAS  R14,SPACE1              Double Space
         STRING '  Inactivity Limit: ',(MQCTCSIL,H,R2B),'% Active: ',  X
               (MQCTCSAL,H,R2B),'% MWE: ',(MQCTCSNL,H,R2B),INTO=LINE
         BRAS  R14,SPACE1              Double Space
*
         STRING 'n/a                 ',INTO=WORK256
         CLC   MQCTT57I,=D'0'          present?
         JE    HSM20
         CLC   MQCTT57I,BLANKS         present?                  RS0302
         JE    HSM20                                             RS0302
         LM    R14,R15,MQCTT57I        load double               RS0302
         SLDL  R14,12                 Re-shift to make STCK format @JRH
         STM   R14,R15,WORK256+L'WORK256-8 Save @ end of WORK256   @JRH
         LA    R1,WORK256+L'WORK256-8  Adjust STCKCONV input       @JRH
         BRAS  R14,STCKCONV            convert TOD clock to decimal
         STRING STCKDATE,2X,(STCKTIME,8),INTO=WORK256
HSM20    DS    0H
         STRING '  Time of ARC0057I: ',(WORK256,20),                   X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING 'n/a                 ',INTO=WORK256
         CLC   MQCTT58I,=D'0'          present?
         JE    HSM30
         CLC   MQCTT58I,BLANKS         present?                  RS0302
         JE    HSM30                                             RS0302
         LM    R14,R15,MQCTT58I        load double               RS0302
         SLDL  R14,12                 Re-shift to make STCK format @JRH
         STM   R14,R15,WORK256+L'WORK256-8 Save @ end of WORK256   @JRH
         LA    R1,WORK256+L'WORK256-8  Adjust STCKCONV input       @JRH
         BRAS  R14,STCKCONV            convert TOD clock to decimal
         STRING STCKDATE,2X,(STCKTIME,8),INTO=WORK256
HSM30    DS    0H
         STRING '  Time of ARC0058I: ',(WORK256,20),                   X
               INTO=LINE
         BRAS  R14,SPACE2
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         JZ    HSM99                   no jump
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JZ    HSM40                   no, jump
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0
HSM40    DS    0H
         STRING '  HSM Activity (MWE): ',INTO=LINE
         BRAS  R14,SPACE1
         STRING '  No active MWE found',INTO=LINE
         ICM   R4,B'1111',MQCTMEWH
         JZ    HSM98
         USING MWE,R4
         VALIDATE MWE,ERRET=HSM97     avoid 0C4 on MWE
         STRING '  Date',7X,'Time',8X,'Function     ','UserID',7X,     X
               'Req-No',' DS-Name',INTO=LINE
         BRAS  R14,SPACE1
*loop
HSM80    DS    0H
         BRAS  R1,HSM801
         DC    AL1(MWEFX00),CL9'RetQCTPtr'
         DC    AL1(MWEFX01),CL9'Start HSM'
         DC    AL1(MWEFX02),CL9'Stop HSM'
         DC    AL1(MWEFX03),CL9'Recall'
         DC    AL1(MWEFX04),CL9'Unused'
         DC    AL1(MWEFX05),CL9'Reocver'
         DC    AL1(MWEFX06),CL9'Migrate'
         DC    AL1(MWEFX07),CL9'Backup'
         DC    AL1(MWEFX08),CL9'ReadCDS'
         DC    AL1(MWEFX09),CL9'Command'
         DC    AL1(MWEFX10),CL9'Post MWE'
         DC    AL1(MWEFX11),CL9'Purge MWE'
         DC    AL1(MWEFX12),CL9'HDelete'
         DC    AL1(MWEFX13),CL9'AggBackup'
         DC    AL1(MWEFX14),CL9'AggRecov.'
         DC    AL1(00),CL9'*********'
*--loop
HSM801   DS    0H
         CLC   MWEFUNC,0(R1)           found type
         JE    HSM802                  yes
         LA    R1,10(,R1)              skip this entry
         CLI   0(R1),X'00'             end of list
         JNE   HSM801
*--endloop
HSM802   DS    0H
         ZAP   WKCELL1,MWESDAT
         STRING 2X,(WKCELL1,P,YYYY-MM-DD),                       RS0500X
               1X,(MWESTIM,1,X),':',(MWESTIM+1,1,X),':',         RS0500X
               (MWESTIM+2,1,X),'.',(MWESTIM+3,1,X),              RS0500X
               1X,(MWEFUNC,,X),1X,(1(R1),9),                     RS0500X
               1X,MWEUID,2X,(MWERQN,F,R9B),1X,                   RS0500X
               INTO=LINE                                         RS0500
         LA    R6,LINE(R15)                                      RS0500
         CLI   MWEFUNC,X'09' Command ??                          RS0500
         JNE   HSM820
         LH    R0,MWECMDL                                        RS0500
         STRING (MWECMD,(R0),T),INTO=(0(R6),NEXTLINE)            RS0500
HSM820   DS    0H                                                RS0500
         BRAS  R14,SPACE1
         ICM   R4,B'1111',MWEFWD
         JNZ   HSM80
         BRAS  R14,BLANK1              Blank line
*endloop
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JZ    HSM99                   no, jump
         MODESET KEYREG=(2)            switch back to own key
         J     HSM99
*
HSM97    DS    0H                                                RS1200
         STRING '  Could not access the MWE-queue',INTO=LINE     RS1200
HSM98    DS    0H
         BRAS  R14,SPACE2              Double Space
HSM99    END_PROC
         TITLE 'SHOWMVS &REL - SDM Data'                         RS0800
*---------------------------------------------------------------------*
*                                                                     *
*SDM (System Data Mover) Info                                         *
*                                                                     *
*  SDM (ANTAS00) active  Level: 00000004                              *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
SDM      BEGIN_PROC KW=SDM,BASEREG=YES  ANTRQST require          RS0302
         AIF   (NOT D'CVTH6606).SDM99
         TM    HBB6606,L'HBB6606       OS/390 R6?
         JZ    SDM99                      no,leave
         STRING '&TITLEPFX.SDM (System Data Mover) Info',INTO=LINE
         BRAS  R14,SPACE2              Double Space
* In case of assembly error see OW42971
         ANTRQST REQUEST=LEVEL,RETINFO=WORK256,RETCODE=LRETCODE,       X
               RSNCODE=LRSNCODE,ILK=VERSION1,MF=(E,WORK256+100)  RS0800
         STRING '  SDM (ANTAS000)',' not',' active',INTO=LINE
         CLC   LRETCODE,=A(RQST_PC_NUMBER_ZERO)
         JE    SDM90
         CLC   LRETCODE,=A(RQST_SUCCESSFUL)
         JNE   SDM90                                             RS0302
         STRING '  SDM (ANTAS00)',' active',                           X
               '  Level: ',(WORK256,4,X),INTO=LINE
         J     SDM90
SDM80    DS    0H
         STRING '  SDM',9X,'RC: ',(LRETCODE,,X),                       X
               ' RSN: ',(LRSNCODE,,X),INTO=LINE
SDM90    DS    0H
         BRAS  R14,SPACE2
.SDM99   ANOP
SDM99    END_PROC
         TITLE 'SHOWMVS &REL - GRS Configuration'
*---------------------------------------------------------------------*
*                                                                     *
*GRS Data                                                             *
*  Status: Join TryJoin     SYSNAME=M2                                *
*  Member(GRSCNFM2)                                                   *
*    RESMIL(10)    TOLINT(180)    ACCELSYS(2)                         *
*  Member(GRSRNLxx)                                                   *
*    RNLDEF RNL(EXCL) TYPE(Generic ) QNAME(SYSZVVDS)                  *
*    RNLDEF RNL(EXCL) TYPE(Generic ) QNAME(SYSVTOC )                  *
*    RNLDEF RNL(EXCL) TYPE(Generic ) QNAME(SYSZJES2)                  *
*    RNLDEF RNL(EXCL) TYPE(Generic ) QNAME(ACFVSAM )                  *
*    RNLDEF RNL(EXCL) TYPE(Generic ) QNAME(SYSDSN  ) RNAME(SYS1.DUMP) *
*    RNLDEF RNL(EXCL) TYPE(Generic ) QNAME(SYSDSN  ) RNAME(SYS1.MAN)  *
*                                                                     *
*    RNLDEF RNL(INCL) TYPE(Generic ) QNAME(SYSDSN  )                  *
*    RNLDEF RNL(INCL) TYPE(Generic ) QNAME(SYSZVOLS)                  *
*                                                                     *
*    RNLDEF RNL(CON) TYPE(Generic ) QNAME(SYSIGGV2)                   *
*    RNLDEF RNL(CON) TYPE(Generic ) QNAME(SPFEDIT )                   *
*    RNLDEF RNL(CON) TYPE(Generic ) QNAME(SOFTCTL )                   *
*    RNLDEF RNL(CON) TYPE(Generic ) QNAME(DSPURI0 )                   *
*    RNLDEF RNL(CON) TYPE(Generic ) QNAME(UCC11CMT)                   *
*    RNLDEF RNL(CON) TYPE(Generic ) QNAME(CTLIMSTR)                   *
*                                                                     *
*GRS Data                                                             *
*                                                                     *
*  Status: Join TryJoin     SYSNAME=D1                                *
*  Member(GRSCNF00)                                                   *
*    RESMIL(10)    TOLINT(300)    ACCELSYS(99)                        *
*  GRSRNL=EXCLUDE is in affect                                        *
*                                                                     *
*---------------------------------------------------------------------*
GRSDATA  BEGIN_PROC KW=GRS,BASEREG=NO                            RS0302
         L     R6,CVTGVT               GVT (GRS Vector Table)
         USING GVT,R6
         STRING '&TITLEPFX.GRS Data',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  Status: ',INTO=LINE
         LA    R4,LINE(R15)
        #STATUS GVTGRSOP,GVTSTART,'Start'
        #STATUS GVTGRSOP,GVTJOIN,'Join'
        #STATUS GVTGRSOP,GVTNONE,'None'
        #STATUS GVTGRSOP,GVTTRYJN,'TryJoin'
        #STATUS GVTGRSOP,GVTSTAR,'Star'                          RS0401
         STRING '    SYSNAME=',GVTSYSNM,INTO=((R4),NEXTLINE)
         BRAS  R14,SPACE2              Single Space              RS0202
         ICM   R5,B'1111',GVTJCNFD     addr of GRSCNFxx data
         JZ    GRSD50                  zero, exit              RSAUG99
         USING GCC,R5
         STRING '  Member(',GCCMBRNM,')',INTO=LINE
         BRAS  R14,SPACE1              Single Space
         SLR   R0,R0
         L     R1,GVTOLINT             Tolerance Time Interval
         D     R0,=F'1000'             milliseconds -> seconds
         STRING '    RESMIL(',(GCCRESMIL,F,L),')',                     X
               '    TOLINT(',((R1),,L),')',                            X
               '    ACCELSYS(',(GVTTHRS,H,L),')',                      X
               INTO=LINE
         BRAS  R14,SPACE1              Single Space
GRSD50   EQU   *                                               RSAUG99
         TM    GVTGRSOP,GVTNONE        GRS=NONE                RSAUG99
         JO    GRSD99                    Yes                   RSAUG99
         ICM   R5,B'1111',GVTSERNL     RNL Exlcude present     JMSEP99
         JZ    GRSD60                  No                      JMSEP99
         USING RNLE,R5                                         JMSEP99
         TM    RNLEFLGS,RNLEXALL       GRSRN=EXCLUDE           JMSEP99
         JZ    GRSD60                    No                    JMSEP99
         STRING '  GRSRNL=EXCLUDE is in affect',INTO=LINE      JMSEP99
         BRAS  R14,SPACE2              Double space            JMSEP99
         DROP  R5                                              JMSEP99
         J     GRSD99                                          JMSEP99
GRSD60   EQU   *                                               JMSEP99
         STRING '  Member(GRSRNLxx)',INTO=LINE                 RSAUG99
         BRAS  R14,SPACE1              Single Space            RSAUG99
         MVC   WORK256(4),=C'EXCL'                             RSAUG99
         ICM   R5,B'1111',GVTSERNL     RNL Exlcude present     RSAUG99
         BRAS  R7,GRSLP100             display RNLE-entries    RSAUG99
         BRAS  R14,BLANK1                                      RSAUG99
         MVC   WORK256(4),=C'INCL'                             RSAUG99
         ICM   R5,B'1111',GVTSIRNL     RNL Include present     RSAUG99
         BRAS  R7,GRSLP100             display RNLE-entries    RSAUG99
         BRAS  R14,BLANK1                                      RSAUG99
         MVC   WORK256(4),=C'CON '                             RSAUG99
         ICM   R5,B'1111',GVTRCRNL     RNL Include present     RSAUG99
         BRAS  R7,GRSLP100             display RNLE-entries    RSAUG99
         BRAS  R14,BLANK1              Double Space            RSAUG99
GRSD99   END_PROC
*---------------------------------------------------------------------
*
*
*
*        RNLE entries sub-routine
*
*
*
*---------------------------------------------------------------------
*
GRSLP100 BEGIN_PROC SAVE=NO            BASEREG=NO              RSAUG99
         USING RNLE,R5                                         RSAUG99
         LTR   R5,R5                   any entries ?           RSAUG99
         JNZ   GRSLP110                 yes, process them      RSAUG99
         STRING '    No RNL(',(WORK256,4,T),') entries',INTO=LINE
         BRAS  R14,SPACE1                                      RSAUG99
         J     GRSLP900                goback                  RSAUG99
*Loop                                                          RSAUG99
GRSLP110 EQU   *                                               RSAUG99
         TM    RNLEFLGS,RNLELAST       last entry?             RSAUG99
         JO    GRSLP900                  yes, back             RSAUG99
         STRING '    RNLDEF RNL(',(WORK256,4,T),') TYPE(',INTO=LINE
         LA    R4,LINE(R15)                                    RSAUG99
         MVC   0(8,R4),=C'Specific'   RNLEFLGS = X'00'         RSAUG99
         CLI   RNLEFLGS,0                                      RS0404
         JNE   GRSLP112                                        RS0404
         LA    R4,8(,R4)                                       RSAUG99
GRSLP112 EQU   *                                               RSAUG99
        #STATUS RNLEFLGS,RNLEGENR,'Generic '                   RS0404
         AIF   (NOT D'CVTH7705).GRSLP115 z/OS R2               RS0404
        #STATUS RNLEFLGS,RNLEPATT,'Pattern '                   RS0404
.GRSLP115 ANOP                                                 RS0404
GRSLP115 EQU   *                                               RS0404
         STRING ') QNAME(',RNLEQNME,')',INTO=((R4),NEXTLINE)   RSAUG99
         SLR   R0,R0                                           RSAUG99
         IC    R0,1(,R5)               pickup length           RSAUG99
         LTR   R0,R0                   Qname present?          RSAUG99
         JZ    GRSLP120                  no, length zero       RSAUG99
         STRING ') QNAME(',RNLEQNME,')',                       RSAUG99 x
               ' RNAME(',(10(R5),(R0)),')',INTO=((R4),NEXTLINE) RSAUG99
GRSLP120 EQU   *                                               RSAUG99
         BRAS  R14,SPACE1                                      RSAUG99
*#SNAP ADDR=RNLEFLGS,LENGTH=18                                 RSAUG99
         LA    R5,10(R5)                                       RSAUG99
         AR    R5,R0     + variable length                     RSAUG99
         J     GRSLP110                                        RSAUG99
*EndLoop                                                       RSAUG99
GRSLP900 EQU   *                                               RSAUG99
         BR    R7                                              RSAUG99
         DROP  R5                                               RS0302
         TITLE 'SHOWMVS &REL - Hardware Configuration'
*---------------------------------------------------------------------*
*                                                                     *
*Hardware Configuration:                                              *
*                                                                     *
*  Central Processing Complex Node Description:                       *
*                                                                     *
*    Type(009000) Model(942) Manufacturer(IBM) Plant(00) Seqno(0000...*
*                                                                     *
*  On-line Processors:                                                *
*                                                                     *
*    CPU 0 Serial: 027506 Version: D4  Model: 9021-942                *
*    CPU 1 Serial: 127506 Version: D4  Model: 9021-942                *
*                                                                     *
*  CSRSI Info                                                         *
*                                                                     *
*    PCCACPID:8102054B9672 PCCACPUA:   PCCACAFM:   CSRSR-FLG:E0       *
*                                                                     *
*    Type(9672) Model(R16) Manufacturer(IBM) Plant(83) Seqno(000000000*
*                                                                     *
*    CPU Info :                                                       *
*      Total:   5      Configured:   1 Standby:   0 Reserv.:   4 Capab*
*      Adjustment Factor:                                             *
*      92%                                                            *
*    CPC Number:   6                                                  *
*      Total:   1      Configured:   1 Standby:   0 Reserv.:   0      *
*      LPAR : LP0102   Dedicate:     0 Shared:    1 Capability:      1*
*                                                                     *
*  This system can deliver 2776 service units per second              *
*                                                                     *
*  Processor Speed: 188.8 MIPS    (Estimated using a BCTR loop)       *
*                                                                     *
*  CVTFLAGS: 7C C0 00 00  SVPRC CUSE MVPG OVER CSTR CMPSC CMPSH       *
*                                                                     *
*  On-line Real Storage: 90112K   Highest Real Storage Address: 90112K*
*                                                                     *
*    Expanded Storage: 65536K                                         *
*                                                                     *
*  Service Processor Data:                                            *
*                                                                     *
*    LOADPARM: 0E6A 00 M                LPAR: YES                     *
*                                                                     *
*  I/O Configuration Data:                                            *
*                                                                     *
*    IODF Data Set Name: SYS1.IODF00                                  *
*    IODF Configuration Id: PROD00  Date: 96/04/01  Time: 11:12:13    *
*      Update Count: 0                                                *
*    EDT ID: 00                                                       *
*    Flags: 10000000                                                  *
*                                                                     *
*---------------------------------------------------------------------*
HARDWARE BEGIN_PROC KW=HARDWARE,BASEREG=YES   LOAD require       RS0302
         STRING '&TITLEPFX.Hardware Configuration:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
*  Central Processing Complex Node Description:
*
*    Type(009000) Model(942) Manufacturer(IBM) Plant(00) Seqno(0000...
*
         L     R4,CVTHID               Host ID
         USING SHID,R4
         CLI   CPCND_FLAGS,0           HID Available?
         JE    HARD16X                 no, exit
         TM    CPCND_FLAGS,B'01000000'
         JZ    HARD16F
         TM    CPCND_FLAGS,B'10100000'
         JZ    HARD16X
HARD16F  EQU   *
         STRING '  Central Processing Complex Node Description:',      X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '    Type(',CPCND_TYPE,    3090                        X
               ') Model(',CPCND_MODEL,     40J                         X
               ') Manufacturer(',CPCND_MAN, IBM/AMH/HTC                X
               ') Plant(',CPCND_PLANT,     00                          X
               ') Seqno(',CPCND_SEQNO,')',                             X
               INTO=LINE
         TM    CPCID_FLAGS,B'10000000'
         JO    HARD16S
         STRING (LINE,,T),' Id(',(CPCID_MAP,,X),')',INTO=LINE
HARD16S  EQU   *
         BRAS  R14,SPACE2              Double Space
HARD16X  EQU   *
*
*  On-line Processors:
*
*    CPU 0 Serial: 027506 Version: D4  Model: 9021-942
*    CPU 1 Serial: 127506 Version: D4  Model: 9021-942
*
         STRING '  On-line Processors:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         SLR   R6,R6                   NUMBER OF CPU'S ON-LINE
         L     R7,CVTPCCAT             PCCA VECTOR TABLE
         LA    R3,0016                 16 IS THE MAX NUMBER OF CPU'S
         MVC   WKCELL2,BLANKS          model code
*LOOP
HARDW1   ICM   R4,B'1111',0(R7)        PCCA
         JZ    HARDW4                  THIS CPU ACTIVE, JUMP
         USING PCCA,R4
         LA    R0,2                    EBCDIC VERSION CODE (2 BYTES)
         LA    R1,PCCACPID             EBCDIC VERSION CODE (2 BYTES)
         LA    R15,STIDP_VERSION       output area
         BRAS  R14,X2B                 convert hex digits to binary
         IC    R0,STIDP_VERSION        version code (binary)
         BRAS  R14,HARDCPU             convert 9021-C4 to 9021-941
         STRING '    CPU ',(PCCACPUA,H,L2),                            X
               '  Serial: ',(PCCACPID+2,6),                            X
               '  Version: ',(PCCACPID+0,2),                           X
               '  Model: ',(PCCACPID+8,4),                             X
               WKCELL2,                -742                            X
               INTO=LINE
         LA    R6,1(,R6)               COUNT ON-LINE CPU'S
         BRAS  R14,SPACE1          <== next line
HARDW4   LA    R7,4(,R7)               BUMP PCCAT PTR
         BRCT  R3,HARDW1
*ENDLOOP
         ST    R6,WKCELL3              keep # of CPU for later   RS0101
         BRAS  R14,BLANK1              BLANK LINE
         AIF   (NOT D'CVTH6608).HARD20 OS/390 R8?                RS1000
         TM    HBB6608,L'HBB6608       running on OS/390 R8?     RS1000
         JZ    HARD20                  no, jump                  RS1000
         LOAD  EP=CSRSI                                          RS1000
         ST    R0,BPX_MOD              Save EP address           RS1000
         STRING '  CSRSI',' Info',INTO=LINE                      RS1000
         BRAS  R14,SPACE2              Double Space              RS1000
         LHI   R2,SIV1V2V3_LEN         length of dynamic storage RS1000
*                                                                RS1000
*        Allocate an answer area                                 RS1000
*                                                                RS1000
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS1000
         JO    HARDW4_1                yes, jump                 RS1000
         GETMAIN RU,LV=(R2),BNDRY=PAGE allocate PATH work area   RS1000
         J     HARDW4_2                                          RS1000
HARDW4_1 DS    0H                                                RS1000
         LA    R1,1                    LOC=ANY                   RS1000
         LR    R0,R2                   Length of storage         RS1000
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES             RS1002
HARDW4_2 DS    0H                                                RS1000
         LR    R3,R1                   where did we find it      RS1000
         LHI   R2,SIV1V2V3_LEN         length of dynamic storage RS1000
         STM   R1,R2,WLM_QUACF_AREA    save addr and length      RS1000
         USING SIV1V2V3,R3             tell assembly             RS1000
         L     R15,BPX_MOD             Load CSRSI                RS1000
         CALL  (15),(=F'7',=A(SIV1V2V3_LEN),SIV1V2V3,LRETCODE),        X
               VL,MF=(E,WORK256)       call the CSRSI service    RS1000
         CLC   LRETCODE,=A(CSRSI_STSINOTAVAILABLE) Available     RS1000
         JH    HARDW4_E                             no, higher rcRS1000
         USING SI00,R3                 tell assembly             RS1000
         STRING '    PCCACPID:',SI00PCCACPID,                          X
               ' PCCACPUA:',SI00PCCACPUA,                              X
               ' PCCACAFM:',SI00PCCACAFM,                              X
               ' CSRSR-FLG:',(SI00VALIDITYFLAGS,1,X),                  X
               INTO=LINE                                         RS1000
         TR    LINE,TRTPRINT           get rid of garbage        RS1000
         BRAS  R14,SPACE2                       Double Space     RS1000
         CLC   LRETCODE,=A(CSRSI_STSINOTAVAILABLE) STSI availableRS1000
         JE    HARDW4_9                         no, no more info RS1000
         MVC   WKCELL1(1),SI00VALIDITYFLAGS     keep it for laterRS1000
         LA    R3,L'SIV1V2V3SI00(R3)   point to the next area    RS1000
         TM    WKCELL1,SI00VALIDSI11V1 Check if info present     RS1000
         JZ    HARDW4_3                  no, jump to next area   RS1000
         USING SI11V1,R3                                         RS1000
*        #SNAP ADDR=(R3),LENGTH=200      debug code              RS1000
         STRING '    Type(',(SI11V1CPCTYPE,,T),  9672                  X
               ') Model(',(SI11V1CPCMODEL,,T),   R16                   X
               ') Manufacturer(',(SI11V1CPCMANUFACTURER,,T), IBM       X
               ') Plant(',(SI11V1CPCPLANTOFMANUFACTURE,,T),  83        X
               ') Seqno(',(SI11V1CPCSEQUENCECODE,,T),')',              X
               INTO=LINE                                         RS1000
         BRAS  R14,SPACE2              Double Space              RS1000
HARDW4_3 DS    0H                                                RS1000
         AHI   R3,SI22V1_LEN           Offset of next area       RS0601
         TM    WKCELL1,SI00VALIDSI22V1 Check if info present     RS1000
         JZ    HARDW4_6                  no, jump to next area   RS1000
         USING SI22V1,R3               Tell assembly             RS1000
         STRING '    CPU Info :',                                RS1000X
               INTO=LINE                                         RS1000
         BRAS  R14,SPACE1              Single space              RS1000
         STRING 6X,'Total: ',(SI22V1TOTALCPUCOUNT,H,R3B),5X,           X
               ' Configured: ',(SI22V1CONFIGUREDCPUCOUNT,H,R3B),       X
               ' Standby: ',(SI22V1STANDBYCPUCOUNT,H,R3B),             X
               ' Reserv.: ',(SI22V1RESERVEDCPUCOUNT,H,R3B),            X
               ' Capability: ',(SI22V1CPUCAPABILITY,F,R9B),            X
               INTO=LINE                                         RS1000
         BRAS  R14,SPACE1              Single Space              RS1000
         LA    R4,SI22V1MPCPUCAPABILITYAF  Point to factor table RS1000
         STRING '      Adjustment Factor:',                            X
               INTO=LINE                                         RS1000
         BRAS  R14,SPACE1              Single Space              RS1000
         MVC   LINE(4),BLANKS          blank out next line       RS1000
         LA    R5,LINE+4               first entry               RS1000
         LA    R6,5                    length of each display entry1000
         LA    R7,LINE+90              end of line               RS1000
*Loop                                                            RS1000
HARDW4_4 DS    0H                                                RS1000
         STRING ' ',((R4),H,R3B),'%',INTO=((R5),(R6))            RS1000
         BRXLE R5,R6,HARDW4_5          this line full?           RS1000
         TR    LINE,TRTPRINT           get rid of garbage        RS1000
         BRAS  R14,SPACE1              Single space              RS1000
         MVC   LINE(4),BLANKS          blank out next line       RS1000
         LA    R5,LINE+4               first entry               RS1000
         LA    R7,LINE+90              end of line               RS1002
HARDW4_5 DS    0H                                                RS1000
         LA    R4,L'SI22V1MPCPUCAPABILITYAF(R4) next entry       RS1000
         CLC   0(2,R4),=H'0'           end of list ?             RS0301
         JNE   HARDW4_5                  no                      RS0301
*Endloop                                                         RS1000
         TR    LINE,TRTPRINT           get rid of garbage        RS1000
         BRAS  R14,SPACE1              Single space              RS1000
HARDW4_6 DS    0H                                                RS1000
         AHI   R3,SI22V2_LEN           Offset of next area       RS0601
         TM    WKCELL1,SI00VALIDSI22V2 Check if info present     RS1000
         JZ    HARDW4_7                  no, leave               RS1000
         USING SI22V2,R3               tell assembly             RS1000
*        #SNAP ADDR=(R3),LENGTH=200    debug code                RS1000
         STRING 4X,'CPC Number: ',(SI22V2CPCNUMBER,H,R3B), '           X
               INTO=LINE                                         RS1000
         BRAS  R14,SPACE1                                        RS1000
         STRING 6X,'Total: ',(SI22V2TOTALLCPUCOUNT,H,R3B),5X,          X
               ' Configured: ',(SI22V2CONFIGUREDLCPUCOUNT,H,R3B),      X
               ' Standby: ',(SI22V2STANDBYLCPUCOUNT,H,R3B),            X
               ' Reserv.: ',(SI22V2RESERVEDLCPUCOUNT,H,R3B),           X
               INTO=LINE                                         RS1000
         BRAS  R14,SPACE1                                        RS1000
         STRING 6X,'LPAR : ',SI22V2CPCNAME,                            X
               ' Dedicate:   ',(SI22V2DEDICATEDLCPUCOUNT,H,R3B),       X
               ' Shared:  ',(SI22V2SHAREDLCPUCOUNT,H,R3B),             X
               ' Capability: ',(SI22V2CPCCAPABILITYAF,F,R9B),          X
               INTO=LINE                                         RS1000
         BRAS  R14,SPACE2                                        RS1000
HARDW4_7 DS    0H                                                RS1000
         AHI   R0,SI22V3_LEN           Offset of next area       RS0601
         TM    WKCELL1,SI00VALIDSI22V3 Check if VM info present  RS1000
         JZ    HARDW4_9                  no, leave               RS1000
         USING SI22V3,R3                                         RS1000
         SR    R5,R5                   clear R5                  RS1000
         IC    R5,SI22V3DBCOUNTFIELD   load counter              RS1000
         LTR   R5,R5                   is this zero              RS1000
         JZ    HARDW4_9                  yes, leave              RS1000
         STRING '    VM Info :',       not tested on my system         X
               INTO=LINE                                         RS1000
         LA    R4,SI22V3DBS                                      RS1000
         USING SI22V3DB,R4                                       RS1000
         STRING '    Total ','Config. ','Standby ','Reserv.',          X
               '   CpName ','AF% ',' HP-Identifier',INTO=LINE    RS1000
         BRAS  R14,SPACE2              Double space              RS1000
*loop                                                            RS1000
HARDW4_8 DS    0H                                                RS1000
         STRING 6X,(SI22V3DBTOTALLCPUCOUNT,H,R3B),                     X
               5X,(SI22V3DBCONFIGUREDLCPUCOUNT,H,R3B),                 X
               5X,(SI22V3DBSTANDBYLCPUCOUNT,H,R3B),                    X
               5X,(SI22V3DBSTANDBYLCPUCOUNT,H,R3B),                    X
               5X,(SI22V3DBRESERVEDLCPUCOUNT,H,R3B),                   X
               1X,SI22V3DBCPCNAME,                                     X
               1X,(SI22V3DBCPCCAF,H,R3B),'%',                          X
               1X,SI22V3DBVMHPIDENTIFIER,                              X
               INTO=LINE                                         RS1000
         BRAS  R14,SPACE1              Single space              RS1000
         LA    R4,SI22V3DB_LEN(,R4)     next entry               RS1000
         BRCT  R5,HARDW4_8              Do until                 RS1000
*endloop                                                         RS1000
         J     HARDW4_9                 leave                    RS1000
HARDW4_E DS    0H                       Bad rc from CSRSI        RS1000
         CLC   LRETCODE,=A(CSRSI_STSINOTAVAILABLE) Available     RS1000
         JNE   HARDW4_E1                            no, higher rcRS1000
         STRING '  CSRSI',' not',' active',INTO=LINE  the defaultRS1000
         BRAS  R14,SPACE1              Single space              RS1000
         J     HARDW4_9                 leave                    RS1000
HARDW4_E1 DS    0H                       Bad rc from CSRSI       RS1000
         STRING '  CSRSI',9X,'RC: ',(LRETCODE,,X),                     X
               INTO=LINE                                         RS1000
         BRAS  R14,SPACE1              Single space              RS1000
HARDW4_9 DS    0H                                                RS1000
         BRAS  R14,BLANK1              empty line                RS1000
         LM    R1,R2,WLM_QUACF_AREA    save addr and length      RS1000
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS1000
         JO    HARDW4_10               yes, jump                 RS1000
         FREEMAIN RU,LV=(R2),A=(R1)    free getmained work area  RS1000
         J     HARD20                  jump to next display      RS1000
HARDW4_10 DS    0H                                               RS1000
         LR    R0,R2                   length for FREEMAIN       RS1000
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES Free        RS1002
         DROP  R3,R4                                             RS1000
.HARD20  ANOP                                                    RS1000
*
*        Service units per second (using RMCTADJC)
*
*        Source: IRARMCPU module in SYS1.NUCLEUS(IEAVNP10)
*
HARD20   L     R6,WKCELL3              restore CPU no            RS0101
         L     R3,=F'16000000'         16,000,000
         M     R2,=F'10000'            10K
         L     R14,CVTOPCTP            RESOURCE MANAGER CONTROL TABLE
         D     R2,RMCTADJC-RMCT(,R14)  adjustment factor for CPU
         CVD   R3,WKCELL3              R3=SU*10000
         MVC   WORK256(11),=X'4020202020214B20202020' 99999.9999
         ED    WORK256(11),WKCELL3+3   EDIT
         STRING '  This system can deliver',(WORK256,11),              X
               ' service units per second',                            X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
* MIPS = (SU/sec / 48.5) * CPUno    (From T. Falissard's MIPSMVS exec)
         SLR   R2,R2
         D     R2,=F'485'              MIPS=SU/48.5
         MR    R2,R6                   mult by num of CPUs
         CVD   R3,WKCELL3              R3=MIPS*1000
         MVC   WORK256(9),=X'40202020214B202020' 9999.999
         ED    WORK256(9),WKCELL3+4
         STRING '  SRM MIPS:',(WORK256,9),'  (SU/sec) / 48.5',         X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
* SYSEVENT QVS                                                   RS1002
         AIF   (NOT D'CVTJ7713).HARD22                           RS1002
         TM    JBB7713,L'JBB7713       running on z/OS R1        RS1002
         JZ    HARD22                  no, jump                  RS1002
         LA    R1,WORK256                                        RS1002
         SYSEVENT QVS                                            RS1002
*        #SNAP ADDR=WORK256,LENGTH=92  DEBUG                     RS1002
         LA    R4,WORK256                                        RS1002
         USING QVS,R4                                            RS1002
         STRING '  MSU QVS: ',' At least no CEC value',INTO=LINE RS1002
         TM    QVSFLAGS,QVSCECVALID    CEC data available?       RS1002
         JZ    HARD21                    no                      RS1002
         STRING '  MSU QVS: ',                                   RS1002X
               ' CEC: ',(QVSCECCAPACITY,F,L9B),INTO=LINE         RS1002
         TM    QVSFLAGS,QVSIMGVALID    IMG data available?       RS1002
         JZ    HARD21                    no                      RS1002
         STRING (LINE,,T),                                       RS1002X
               ' IMG: ',(QVSIMGCAPACITY,F,L9B),INTO=LINE         RS1002
         TM    QVSFLAGS,QVSVMVALID     VM data available?        RS1002
         JZ    HARD21                    no                      RS1002
         STRING (LINE,,T),                                       RS1002X
               ' VM: ',(QVSVMCAPACITY,F,L9B),INTO=LINE           RS1002
HARD21   DS    0H                                                RS1002
         BRAS  R14,SPACE2              Double Space              RS1002
HARD22   DS    0H                                                RS1002
.HARD22  ANOP                                                    RS1002
*
*        Place holder for processor speed (filled in by sub-task)
*
         LA    R5,LINE                 Addr of current line
         STM   R5,R6,CPUONLINE         save them for the sub-task
         BRAS  R14,SPACE2              Double Space
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
*
*        Display CVTFLAGS (misc hardware features)
*
         STRING '  CVTFLAGS: ',(CVTFLAG1,,X),1X,(CVTFLAGS+1,1,X),      X
               1X,(CVTFLAGS+2,1,X),1X,(CVTFLAGS+3,1,X),                X
               INTO=LINE
         LA    R4,LINE+2(R15)          POINT PAST TEXT
        #STATUS CVTFLAG1,CVTRSMWD,'RSMWD'
        #STATUS CVTFLAG1,CVTSVPRC,'SVPRC'
        #STATUS CVTFLAG1,CVTCUSE,'CUSE'
        #STATUS CVTFLAG1,CVTMVPG,'MVPG'
        #STATUS CVTFLAG1,CVTOVER,'OVER'
        #STATUS CVTFLAG1,CVTCSTR,'CSTR'
        #STATUS CVTFLAG2,CVTCMPSC,'CMPSC'
        #STATUS CVTFLAG2,CVTCMPSH,'CMPSH'
        #STATUS CVTFLAG2,CVTSOPF,'SOPF'
         AIF   (NOT D'CVTH6606).HARD24                           JM1199
        #STATUS CVTFLAG2,CVTBFPH,'BFPH'                          JM1199
        #STATUS CVTFLAG2,CVTPER2,'PER2'                          JM1199
         AIF   (NOT D'CVTH7705).HARD23                           RS0203
        #STATUS CVTFLAG2,CVTIQD,'IQD'                            RS0203
.HARD23  ANOP                                                    RS0203
         TM    CVTFLAG2,CVTBFPH        hardware installed        JM1199
         JO    HARD24                  yes                       JM1199
         TM    CVTOSLV2,CVTBFP         BFP support available     JM1199
         JNO   HARD24                  no, jump                  JM1199
         BRAS  R14,SPACE2              Double Space              JM1199
         STRING '  Binary Floating Point support is simulated',        X
               INTO=LINE                                         JM1199
HARD24   DS    0H                                                JM1199
.HARD24  ANOP                                                    JM1199
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?          RS0203
         JZ    HARD25                  no jump                   RS0203
         BRAS  R14,SPACE2                                        RS0203
         STCTL R0,R15,WORK256          Store CR0-CR15            RS0203
         STRING '  Control Register:',INTO=LINE                  RS0203
         BRAS  R14,SPACE2                                        RS0203
         STRING 4X,'0-3 ',(WORK256,4,X),1X,(WORK256+4,4,X),      RS0203X
               1X,(WORK256+8,4,X),1X,(WORK256+12,4,X),           RS0203X
               '  4-7 ',(WORK256+16,4,X),1X,(WORK256+20,4,X),    RS0203X
               1X,(WORK256+24,4,X),1X,(WORK256+28,4,X),INTO=LINE RS0203
         BRAS  R14,SPACE1          <== next line                 RS0203
         STRING 4X,'8-B ',(WORK256+32,4,X),1X,(WORK256+36,4,X),  RS0203X
               1X,(WORK256+40,4,X),1X,(WORK256+44,4,X),          RS0203X
               '  C-F ',(WORK256+48,4,X),1X,(WORK256+52,4,X),    RS0203X
               1X,(WORK256+56,4,X),1X,(WORK256+60,4,X),INTO=LINE RS0203
HARD25   DS    0H                                                RS0302
         AIF   (NOT D'CVTH7703).HARD25X1 OS/390 R10?             RS1000
         TM    HBB7703,L'HBB7703       running on OS/390 R10?    RS1000
         JZ    HARD25X1                no, jump                  RS1000
         BRAS  R14,SPACE2                                        JM0702
         STRING '  Execution Mode: ','31-bit',INTO=LINE          JM0702
         TM    FLCARCH,PSAESAME        running ALS-2 ?           RS1000
         JZ    HARD25X1                                          RS1000
         OI    ARCHLVL2,L'ARCHLVL2     keep it for later         RS1002
         STRING '  Execution Mode: ','64-bit',INTO=LINE          JM0702
.HARD25X1 ANOP                                                   RS1000
HARD25X1 DS    0H                                                RS1000
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?          RS0800
         JZ    HARD25Y                 no jump                   RS0800
         BRAS  R14,SPACE2              Double Space              RS0800
         STRING '  ADMF (Async Data Mover) ',' not ','active',INTO=LINE
         IOSADMF AQUERY,CROSSOVER=WKCELL1,RETCODE=LRETCODE,            X
               RSNCODE=LRSNCODE,MF=(E,WORK256)                   RS0800
         LTR   R15,R15                                           RS0800
         JNZ   HARD25Y                                           RS0800
         STRING '  ADMF (Async Data Mover) ','active',' Crossover: ',  X
               (WKCELL1,4,X),INTO=LINE                           RS0800
.HARD25Y ANOP                                                    RS0800
HARD25Y  DS    0H                                                JM0701
         BRAS  R14,SPACE2              Double Space
*
*        REAL STORAGE
*
         AIF   (NOT D'CVTH7703).HARD26B OS/390 R10?              RS1100
         TM    HBB7703,L'HBB7703       running on OS/390 R10?    RS1100
         JZ    HARD26B                 no, jump                  RS1100
         TM    FLCARCH,PSAESAME        running ALS-2 ?           RS1100
         JZ    HARD26B                                           RS1100
         ICM   R3,B'1111',CVTSCPIN     Service Call Control BlockRS1100
         JZ    HARD26B                 no, jump                  RS1100
         USING SCCB,R3                                           RS1100
         SR    R2,R2                   Clear R2                  RS1100
         IC    R2,SCCBSAI              load Base                 RS1100
         MH    R2,SCCBSAR              Increment counter (*1M)   RS1100
         CLC   SCCBSAR,=H'0'           Is this zero              RS1100
         JNE   HARD26A                   no, use this
         ICM   R5,B'1111',SCCBSAIX     Use SCCBSAIX instead      RS1100
         JZ    HARD26B                   if zero leave           RS1100
         IC    R2,SCCBSAI              load Base                 RS1100
         M     R2,SCCBSAIX             *increment counter        RS1100
HARD26A  DS    0H                                                RS1100
         STRING '  Online Real Storage: ',                             *
               ((R2),,L),'M',' Base:',(SCCBSAR,FL2,R5B),'M',           *
               ' Increment: ',(SCCBSAI,FL1,L3B),'/',                   *
               (SCCBSAIX,F,L9B),INTO=LINE                        RS1100
         J     HARD27                                            RS1100
         DROP  R3                                                RS1100
.HARD26B ANOP                                                    RS1100
HARD26B  DS    0H                                                RS1100
         LA    R1,0001
         AL    R1,CVTEORM              HI-ADDR
         SRL   R1,0010                 GET IT IN "K"
         STRING '  On-line Real Storage: ',(CVTRLSTG,F,L),'K',         X
               '   Highest Real Storage Address: ',((R1),,L),'K',      X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R3,CVTRCEP              RSM CTL & ENUM AREA
         L     R4,RCEESPL-RCE(,R3)     # OF Expanded STORAGE FRAMES
         SLL   R4,2                    CHANGE TO "K"
         STRING '      Expanded Storage: ',((R4),,L),'K',INTO=LINE
.HARD27  ANOP                                                    RS1000
HARD27   DS    0H                                                RS1000
         BRAS  R14,SPACE2              Double Space
*
*        Service Processor Data: IPLPARM and HSA
*
HARD30   ICM   R5,B'1111',CVTSCPIN     Service Call Control Block
         JZ    HARD39                  no, jump
         USING SCCB,R5
         STRING '  Service Processor Data:',INTO=LINE
         BRAS  R14,SPACE2              double space
         LA    R1,=C'No '              LPAR=NO
         TM    SCCBCON1,SCCBBFY        running under PR/SM?
         JNO   *+8                     no, jump
         LA    R1,=C'Yes'              LPAR=YES
         LA    R2,=C'Yes'              ETR=YES                 JWMJUN95
         ICM   R0,B'1111',SCCBETR      ETR installed ?         JWMJUN95
         JNZ   *+8                     No                      JWMJUN95
         LA    R2,=C'No '              ETR=NO                  JWMJUN95
         ANOP
         STRING 4X,'LOADPARM: ',                                       X
               (SCCBPARM+0,4),1X,      addr of SYS1.IPLPARM            X
               (SCCBPARM+4,2),1X,      xx of LOADxx                    X
               (SCCBPARM+6,1),1X,      Message option   M P A          X
               (SCCBPARM+7,1),         NUC-ID                          X
               '    LPAR: ',((R1),3),  LPAR mode YES/NO                X
               '    ETR installed:  ',((R2),3),                JWMJUN95X
               INTO=LINE
         BRAS  R14,SPACE2              double space
*
*        Hardware Storage Areas (HSA)
*
         LH    R2,SCCBNHSA             number of HSA's
         LTR   R2,R2                   any HSA used in this system?
         JZ    HARD39                  no, jump
         LH    R3,SCCBOHSA             offset to first HSA
         LA    R3,SCCB(R3)             change offset to address
         USING SCCBHSA,R3
         SLR   R4,R4                   HSA seqno
*loop
HARD36   LH    R1,SCCBHSSZ             HSA size (in 4K pages)
         SLL   R1,2                    make it in K
         STRING 12X,'HSA number: ',((R4),,R3B),                        X
               '    HSA size: ',((R1),,R5B),'K',                       X
               '    HSA Address: ',(SCCBAHSA,,X),                      X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         LA    R3,6(,R3)               next HSA entry
         LA    R4,1(,R4)               bump up seq no
         BRCT  R2,HARD36               print next HSA
*endloop
         BRAS  R14,BLANK1              double space
HARD39   EQU   *
         DROP  R5,R3                   SCCB,SCCBHSA
*
*        I/O Configuration data
*
         L     R5,CVTIXAVL             IOS COMM AREA
         L     R6,IOCIOVTP-IOCOM(,R5)  IOS Vector Table
         USING IOVT,R6
         L     R7,IOVTCDA              Config Data area
         USING CDA,R7
         CLC   =C'CDA ',CDACDA         is this a CDA?
         JNE   HARD49                  no, exit
HARD40   STRING '  I/O Configuration Data:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         TM    CDAFLAGS,CDAINACT       HCD in use?
         JO    HARD45                  NO, JUMP
         STRING '    IODF Data Set Name: ',CDAIODF,INTO=LINE
         BRAS  R14,SPACE1              next line
         STRING '    IODF Configuration Id: ',CDACONID,                X
               '   Date: ',(CDALDATE,P,YYYY-MM-DD),            JWMMAY96X
               '   Time: ',(CDALTIME+0,1,X),'.',               JWMMAY96X
               (CDALTIME+1,1,X),'.',(CDALTIME+2,1,X),          JWMMAY96X
               INTO=LINE
         BRAS  R14,SPACE1              next line
         STRING '      Update Count: ',(CDAUPDCT,H,L),INTO=LINE
         BRAS  R14,SPACE1              next line
         STRING '    EDT ID: ',CDAEDTID,INTO=LINE
         BRAS  R14,SPACE1              next line
         STRING '    TOKEN: Processor : ',CDAPROCE,            JWMJAN98X
               '   Date: ',CDASDAT,                            JWMMAY96X
               '   Time: ',CDASTIM,                            JWMJAN98X
               INTO=LINE                                       JWMJAN98
         BRAS  R14,SPACE1              next line               JWMJAN98
         STRING 11X,'Description: ',CDASDESC,INTO=LINE         JWMJAN98
         BRAS  R14,SPACE1              next line               JWMJAN98
.HARD45  ANOP
HARD45   EQU   *
         STRING '    Flags: ',(CDAFLAGS,,X),INTO=LINE
         BRAS  R14,SPACE2              Double Space
HARD49   EQU   *
*
HARD99   END_PROC
         TITLE 'SHOWMVS &REL - VM Data'
*---------------------------------------------------------------------*
*                                                                     *
*VM Data                                                              *
*                                                                     *
*  VM/ESA Release 2.0, Service Level 9207  USER(MVSPROD1)             *
*                                                                     *
*  Real CPU Serial: 027506 Version: D4 Model: 9021-942                *
*                                                                     *
*---------------------------------------------------------------------*
VMDATA   BEGIN_PROC KW=VM,AUTH=YES,BASEREG=NO                    RS0302
         STIDP STIDP_WORKAREA          GET CPU ID
         CLI   STIDP_VERSION,X'FF'     VM GUEST?
         JNE   VMDATA9                 NO,EXIT
         STRING '&TITLEPFX.VM Data:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
*        DIAG 000: Store Extended Identification
*
         PGSER R,FIX,A=WORK256,EA=WORK256+255,ECB=0 FIX PAGE
         SYSEVENT DONTSWAP             PGFIX/LRA
         LRA   R1,WORK256              LOAD REAL ADDRESS
         LA    R2,L'WORK256            length
         DIAG  R1,R2,X'0000'           store extended identification
         SYSEVENT OKSWAP               undo DONTSWAP
         PGSER R,FREE,A=WORK256,EA=WORK256+255,ECB=0 FREE PAGE
*
         LA    R3,WORK256              work area for diagnose
         USING VMDIAG,R3
         STRING 2X,(VMPRODNO,,T),      VM/ESA                          X
               ' Release ',(VMRELS,FL1,L),'.', Release 2.              X
               (VMMODLVL,FL1,L),              Release 2.0              X
               ', Service Level ',     service level                   X
               (VMSVCLVL,H,R4Z),       Service Level 9207              X
               '   User(',(VMUSERID,,T),')',                           X
               INTO=LINE
         BRAS  R14,SPACE2          <== double space
         MVC   STIDP_VERSION,VMCPUVER  CPU Version Code
*
*        DIAG 218: Get Real CPU ID (VM/ESA R2 and up)
*
         TM    VMBITMAP+1,X'C0'        VM/ESA R2?
         JNO   VMDATA3                 NO, SKIP DIAG 218
         PGSER R,FIX,A=STIDP_WORKAREA,EA=STIDP_WORKAREA+7,ECB=0 PGFIX
         SYSEVENT DONTSWAP             PGFIX/LRA
         LA    R1,0                    FUNCTION CODE
         LRA   R2,STIDP_WORKAREA       LOAD REAL ADDRESS
         DIAG  R1,R2,X'0218'           ISSUE STIDP DIAGNOSE
         SYSEVENT OKSWAP               undo DONTSWAP
         PGSER R,FREE,A=STIDP_WORKAREA,EA=STIDP_WORKAREA+7,ECB=0 PGFREE
VMDATA3  EQU   *
*
         MVC   WKCELL2,BLANKS          model code
         LA    R4,NEXTLINE             fake PCCA
         USING PCCA,R4
         IC    R0,STIDP_VERSION        CPU Version code
         BRAS  R14,HARDCPU             convert 9021-C4 to 9021-941
         STRING '  Real CPU',                                          X
               '  Serial: ',(STIDP_SERIAL,,X),                         X
               '  Version: ',(STIDP_VERSION,,X),                       X
               '  Model: ',(STIDP_MODEL,,X),                           X
               WKCELL2,                -742                            X
               INTO=LINE
         BRAS  R14,SPACE2          <== double space
VMDATA9  END_PROC
*
*        Data returned by VM Diagnose 0
*
VMDIAG   DSECT
VMPRODNO DS    CL8'VM/ESA'             CP PROD NO
VMENVIR  DS    XL3                     VM Execution Environment
VMCPUVER DS    X'F8'                   Real CPU Version
VMMCEL   DS    XL2                     Machine Check Extended Logout
VMPROC   DS    H                       Processor addr
VMUSERID DS    CL8'MVSTEST'            CMS User
VMBITMAP DS    X'7FE0000000000000'     Feature map
VMTIMEZ  DS    X'FFFFD7C0'             Time zone difference in seconds
VMRELS   DS    FL1'2'                  VM Release
VMMODLVL DS    FL1'1'                  VM Mod level
VMSVCLVL DS    H'9207'                 VM service level
*
*        convert processor version code to model number
*
*        RE: IEAVNP10(IRARMCPU) in SYS1.NUCLEUS
*            Large Systems Performance Reference (SC28-1187)
*
HARDCPU  BEGIN_PROC SAVE=NO            BASEREG=NO
*        USING *,R15                   RS0402 Who need this
         CLI   WKCELL2,C' '            first time?
         BNER  R14                     no, goback
         USING PCCA,R4
*
         BRAS  R1,HARDCPU2
         DC    X'2003',Y(HARD2003-(*-2))
         DC    X'3000',Y(HARD3000-(*-2))                         RS0602
         DC    X'3081',Y(HARD308X-(*-2))
         DC    X'3083',Y(HARD308X-(*-2))
         DC    X'3084',Y(HARD308X-(*-2))
         DC    X'3090',Y(HARD3090-(*-2))
         DC    X'4381',Y(HARD4381-(*-2))
         DC    X'5995',Y(HARD5995-(*-2))     OAC
         DC    X'7490',Y(HARD7490-(*-2))
         DC    X'9021',Y(HARD9021-(*-2))
         DC    X'9121',Y(HARD9121-(*-2))
         DC    X'9221',Y(HARD9221-(*-2))
         DC    X'9672',Y(HARD9672-(*-2))
         DC    X'0400',Y(HARD0400-(*-2))
         DC    X'0500',Y(HARD0500-(*-2))
         DC    X'FF',0H'0'
*LOOP
HARDCPU2 CLC   CVTMDL,0(R1)            SAME MODEL TYPE?
         JE    HARDCPU4                YES, EXIT LOOP
         LA    R1,2+2(,R1)             NEXT TYPE
         CLI   0(R1),X'FF'             END OF TABLE?
         JNE   HARDCPU2                NOT YET
*ENDLOOP
         BR    R14                     MODEL-TYPE NOT FOUND
*
HARDCPU4 AH    R1,2(,R1)               Add OFFSET TO MODEL TABLE
*LOOP
HARDCPU5 CLM   R0,B'0001',0(R1)        SAME VERSION NUMBER?
         JE    HARDCPU6
         LA    R1,1+5(,R1)             NEXT TYPE
         CLI   0(R1),X'FF'             END OF TABLE?
         JNE   HARDCPU5                NOT YET
*ENDLOOP
         BR    R14                     VERSION NOT FOUND
HARDCPU6 MVI   WKCELL2,C'-'            move model code
         MVC   WKCELL2+1(5),1(R1)      move model code
         BR    R14
*
HARD2003 DC    X'01',C'115  '          Multiprise 2000      1996-09-10
         DC    X'02',C'125  '
         DC    X'03',C'135  '
         DC    X'0B',C'102  '
         DC    X'0C',C'103  '
         DC    X'0D',C'104  '
         DC    X'0E',C'105  '
         DC    X'0F',C'106  '
         DC    X'11',C'116  '
         DC    X'12',C'126  '
         DC    X'13',C'136  '
         DC    X'14',C'146  '
         DC    X'15',C'156  '
         DC    X'FF'
HARD3000 DC    X'01',C'A10  '
         DC    X'02',C'A20  '
         DC    X'FF'
HARD308X DC    X'01',C'E    '
         DC    X'03',C'D    '
         DC    X'11',C'B    '
         DC    X'13',C'G    '
         DC    X'21',C'J    '
         DC    X'23',C'K    '
         DC    X'26',C'Q    '
         DC    X'53',C'G+   '
         DC    X'63',C'K+   '
         DC    X'66',C'Q+   '
         DC    X'81',C'EX   '
         DC    X'91',C'BX   '
         DC    X'93',C'GX   '
         DC    X'A1',C'JX   '
         DC    X'A3',C'KX   '
         DC    X'A6',C'QX   '
         DC    X'B1',C'CX   '
         DC    X'FF'
HARD3090 DC    X'01',C'120S '
         DC    X'02',C'150J '
         DC    X'03',C'120J '
         DC    X'05',C'150  '
         DC    X'06',C'150E '
         DC    X'08',C'280S '
         DC    X'10',C'180  '
         DC    X'11',C'180E '
         DC    X'12',C'180S '
         DC    X'13',C'180J '
         DC    X'14',C'150S '
         DC    X'15',C'170S '
         DC    X'16',C'250S '
         DC    X'17',C'170J '
         DC    X'18',C'280J '
         DC    X'19',C'100S '
         DC    X'20',C'200  '
         DC    X'21',C'200E '
         DC    X'22',C'200S '
         DC    X'23',C'200J '
         DC    X'25',C'250J '
         DC    X'31',C'300E '
         DC    X'32',C'300S '
         DC    X'33',C'300J '
         DC    X'34',C'380S '
         DC    X'35',C'380J '
         DC    X'40',C'400  '
         DC    X'41',C'400E '
         DC    X'42',C'400S '
         DC    X'43',C'400J '
         DC    X'50',C'500S '
         DC    X'51',C'500E '
         DC    X'52',C'500J '
         DC    X'55',C'110J '
         DC    X'56',C'120J '
         DC    X'57',C'150JX'
         DC    X'58',C'170JK'
         DC    X'59',C'250JX'
         DC    X'61',C'600E '
         DC    X'62',C'600S '
         DC    X'63',C'600J '
         DC    X'FF'
HARD4381 DC    X'00',C'2    '
         DC    X'01',C'3    '
         DC    X'02',C'1    '
         DC    X'03',C'13   '
         DC    X'04',C'14   '
         DC    X'05',C'24   '
         DC    X'06',C'11   '
         DC    X'07',C'23   '
         DC    X'08',C'12   '
         DC    X'09',C'21   '
         DC    X'0A',C'22   '
         DC    X'0D',C'90E  '
         DC    X'0B',C'91E  '
         DC    X'0C',C'92E  '
         DC    X'FF'
HARD5995 DC    X'00',C'350A '
         DC    X'28',C'500A '    firmware-level dependent
         DC    X'30',C'500A '    firmware-level dependent
         DC    X'20',C'700A '    MXT
         DC    X'40',C'790A '
         DC    X'60',C'1100A'
         DC    X'80',C'1400A'
         DC    X'01',C'3550M'    3550M
         DC    X'41',C'3550E'    3550M EPF
         DC    X'09',C'4550M'    4550M
         DC    X'49',C'4550E'    4550M EPF
         DC    X'11',C'6650M'    6650M
         DC    X'51',C'6650E'    6650M EPF
         DC    X'19',C'8650M'    8650M
         DC    X'59',C'8650E'    8650M EPF
         DC    X'C5',C'2570M'    2570M
         DC    X'C1',C'3570M'    3570M
         DC    X'C9',C'4570M'    4570M
         DC    X'8D',C'5570M'    5570M
         DC    X'B5',C'6570M'    6570M
         DC    X'F9',C'4670M'    4670M
         DC    X'E1',C'5670M'    5670M
         DC    X'D1',C'6670M'    6670M
         DC    X'F1',C'7670M'    7670M
         DC    X'D9',C'8670M'    8670M
         DC    X'AF',C'10670'    10670M
         DC    X'BB',C'12670'    12670M
         DC    X'13',C'535  '    Millenium
         DC    X'14',C'545  '    Millenium
         DC    X'15',C'555  '    Millenium
         DC    X'16',C'565  '    Millenium
         DC    X'17',C'575  '    Millenium
         DC    X'18',C'585  '    Millenium
         DC    X'FF'
HARD7490 DC    X'01',C'32M  '     MCA with 32MB memory            P390
         DC    X'03',C'64M  '     MCA with 32MB daughter-board
         DC    X'04',C'128M '     MCA with 96MB daughter-board
         DC    X'08',C'32M  '     PCI with 32MB memory
         DC    X'09',C'128M '     PCI with 128MB memory (64 Mbit DRAMs)
         DC    X'0A',C'128M-'     PCI with 128MB memory (16 Mbit DRAMs)
         DC    X'FF'
HARD9021 DC    X'28',C'500  '
         DC    X'38',C'580  '
         DC    X'39',C'330  '
         DC    X'45',C'620  '
         DC    X'49',C'340  '
         DC    X'65',C'720  '
         DC    X'A1',C'520  '
         DC    X'A2',C'640  '
         DC    X'A3',C'740  '
         DC    X'A4',C'820  '
         DC    X'A6',C'900  '
         DC    X'A7',C'660  '
         DC    X'B5',C'860  '
         DC    X'C1',C'711  '
         DC    X'C2',C'821  '
         DC    X'C3',C'831  '
         DC    X'C4',C'941  '
         DC    X'D2',C'822  '
         DC    X'D4',C'942  '
         DC    X'D5',C'952  '
         DC    X'D6',C'962  '
         DC    X'D7',C'972  '
         DC    X'D8',C'982  '
         DC    X'DA',C'9X2  '      ?
         DC    X'FF'
HARD9121 DC    X'A0',C'190  '
         DC    X'A1',C'210  '
         DC    X'A2',C'260  '
         DC    X'A3',C'320  '
         DC    X'A4',C'440  '
         DC    X'A5',C'480  '
         DC    X'A6',C'490  '
         DC    X'A7',C'570  '
         DC    X'A8',C'610  '
         DC    X'B0',C'180  '
         DC    X'F0',C'311  '
         DC    X'F3',C'411  '
         DC    X'F4',C'511  '
         DC    X'F5',C'521  '
         DC    X'F6',C'621  '
         DC    X'F7',C'622  '
         DC    X'F8',C'732  '
         DC    X'F9',C'742  '
         DC    X'FF'
HARD9221 DC    X'09',C'120  '
         DC    X'10',C'120  '
         DC    X'11',C'130  '
         DC    X'12',C'130  '
         DC    X'13',C'150  '
         DC    X'14',C'150  '
         DC    X'16',C'170  '
         DC    X'21',C'170  '
         DC    X'22',C'200  '
         DC    X'FF'
HARD9672 DC    X'06',C'R53  '   mesc
         DC    X'08',C'R63  '
         DC    X'09',C'R73  '   jwm
         DC    X'0A',C'R83  '
         DC    X'0C',C'RX3  '
         DC    X'1F',C'RA2  '
         DC    X'12',C'R12  '
         DC    X'13',C'R22  '
         DC    X'14',C'R32  '
         DC    X'15',C'R42  '
         DC    X'16',C'R52  '
         DC    X'18',C'R72  '
         DC    X'32',C'R11  ' SEC D57262
         DC    X'33',C'R21  ' SEC D57262
         DC    X'34',C'R31  ' SEC D57262
         DC    X'35',C'R41  ' SEC D57262
         DC    X'36',C'R51  ' SEC D57262
         DC    X'37',C'R61  ' SEC D57262
         DC    X'3A',C'Y66  '                                    RS0602
         DC    X'3B',C'Y56  '                                    RS0602
         DC    X'3C',C'Y46  '                                    RS0602
         DC    X'3D',C'Y36  '                                    RS0602
         DC    X'3E',C'Y26  '                                    RS0602
         DC    X'3F',C'Y16  '                                    RS0602
         DC    X'42',C'R11  '
         DC    X'43',C'R21  '
         DC    X'44',C'R31  '
         DC    X'45',C'R41  '
         DC    X'46',C'R51  '
         DC    X'47',C'R61  '
         DC    X'4B',C'Y96  '                                    RS0602
         DC    X'4C',C'Y86  '                                    RS0602
         DC    X'4D',C'Y76  '                                    RS0602
         DC    X'4E',C'T26  '                                    RS0602
         DC    X'4F',C'T16  '                                    RS0602
         DC    X'51',C'R14  ' CMOS-3
         DC    X'52',C'R24  ' CMOS-3
         DC    X'53',C'R34  ' CMOS-3
         DC    X'54',C'R44  ' CMOS-3
         DC    X'55',C'R54  ' CMOS-3 losa
         DC    X'56',C'R64  ' CMOS-3
         DC    X'57',C'R74  ' CMOS-3
         DC    X'58',C'R84  ' CMOS-3
         DC    X'59',C'R94  ' CMOS-3
         DC    X'5A',C'RX4  ' CMOS-3
         DC    X'5B',C'RY4  ' CMOS-3                             RS0602
         DC    X'5D',C'RC4  ' CMOS-3
         DC    X'5E',C'RB4  ' CMOS-3
         DC    X'5F',C'RA4  ' CMOS-3
         DC    X'71',C'R15  ' CMOS-4     6/1997
         DC    X'72',C'R25  ' CMOS-4     6/1997
         DC    X'73',C'R35  ' CMOS-4     6/1997  bost
         DC    X'74',C'R45  ' CMOS-4     6/1997
         DC    X'75',C'R55  ' CMOS-4     6/1997
         DC    X'76',C'R65  ' CMOS-4     6/1997
         DC    X'77',C'R75  ' CMOS-4     6/1997
         DC    X'78',C'R85  ' CMOS-4     6/1997
         DC    X'79',C'R95  ' CMOS-4     6/1997
         DC    X'79',C'R95  ' CMOS-4                             RS1000
         DC    X'7A',C'RX5  ' CMOS-4                             RS1000
         DC    X'7B',C'RY5  ' CMOS-4                             RS1000
         DC    X'7D',C'RC5  ' CMOS-4                             RS1000
         DC    X'7E',C'RB5  ' CMOS-4                             RS1000
         DC    X'7F',C'RA5  ' CMOS-4                             RS1000
         DC    X'81',C'R16  ' CMOS-5                             RS1000
         DC    X'82',C'R26  ' CMOS-5                             RS1000
         DC    X'83',C'R36  ' CMOS-5                             RS1000
         DC    X'84',C'R46  ' CMOS-5                             RS1000
         DC    X'85',C'R56  ' CMOS-5                             RS1000
         DC    X'86',C'R66  ' CMOS-5                             RS1000
         DC    X'87',C'R76  ' CMOS-5                             RS1000
         DC    X'88',C'R86  ' CMOS-5                             RS1000
         DC    X'89',C'R96  ' CMOS-5                             RS1000
         DC    X'8A',C'RX6  ' CMOS-5                             RS1000
         DC    X'8B',C'YX6  '                                    RS0602
         DC    X'8C',C'RD6  ' CMOS-5                             RS1000
         DC    X'8D',C'RC6  ' CMOS-5                             RS1000
         DC    X'8E',C'RB6  ' CMOS-5                             RS1000
         DC    X'8F',C'RA6  ' CMOS-5                             RS1000
         DC    X'91',C'X17  '                                    RS0602
         DC    X'92',C'X27  '                                    RS0602
         DC    X'93',C'X37  '                                    RS0602
         DC    X'94',C'X47  '                                    RS0602
         DC    X'95',C'X57  '                                    RS0602
         DC    X'96',C'X67  '                                    RS0602
         DC    X'97',C'X77  '                                    RS0602
         DC    X'98',C'X87  '                                    RS0602
         DC    X'99',C'X97  '                                    RS0602
         DC    X'9A',C'XX7  '                                    RS0602
         DC    X'9B',C'XY7  '                                    RS0602
         DC    X'9C',C'XZ7  '                                    RS0602
         DC    X'A1',C'Z17  '                                    RS0602
         DC    X'A2',C'Z27  '                                    RS0602
         DC    X'A3',C'Z37  '                                    RS0602
         DC    X'A4',C'Z47  '                                    RS0602
         DC    X'A5',C'Z57  '                                    RS0602
         DC    X'A6',C'Z67  '                                    RS0602
         DC    X'A7',C'Z77  '                                    RS0602
         DC    X'A8',C'Z87  '                                    RS0602
         DC    X'A9',C'Z97  '                                    RS0602
         DC    X'AA',C'ZX7  '                                    RS0602
         DC    X'AB',C'ZY7  '                                    RS0602
         DC    X'AC',C'ZZ7  '                                    RS0602
         DC    X'FF'
HARD0400 DC    X'00',C'GS415' Amdahl Millennium Global Server    RS1002
         DC    X'00',C'GS422'  Version codes are expected 1Q.97
         DC    X'00',C'GS425'
         DC    X'FF'
HARD0500 DC    X'13',C'GS535' Amdahl Millennium Global Server
         DC    X'14',C'GS545'
         DC    X'15',C'GS555'
         DC    X'16',C'GS565'
         DC    X'17',C'GS575'
         DC    X'18',C'GS585'
         DC    X'FF'
         DC    0H'0'
*---------------------------------------------------------------------*
*                                                                     *
*  PR/SM Partition Number: 3                                          *
*                                                                     *
*  LPAR Configuration as of 1994-06-20  13.19.34          01973000    *
*                                                                     *
*     LPAR    LPAR               Weightings                           *
*      NO     NAME      CPU0   CPU1  CPU2  CPU3  CPU4                 *
*       1    MVSPROD1    80     80    80                              *
*       2    MVSTEST1    20     20    20                              *
*       0    PHYSICAL     0      0     0                              *
*                                                                     *
*---------------------------------------------------------------------*
LPAR00   BEGIN_PROC KW=LPAR,BASEREG=NO                           RS0302
         MVI   FAILCODE,1              failure code
         ICM   R5,B'1111',CVTSCPIN     Service Call Control Block
         JZ    LPAR990                 no, exit
         MVI   FAILCODE,2              failure code
         USING SCCB,R5
         TM    SCCBCON1,SCCBBFY        running under PR/SM?
         JZ    LPAR990                 no, exit
*
*        Get partition number from CSD
*
         L     R4,CVTCSD               common system data area
         USING CSD,R4
         CLI   CSDPLPN,0               running under PR/SM?
         JE    LPAR19                  no, exit
         STRING '  PR/SM Partition Number: ',(CSDPLPN,FL1,L),          X
               INTO=LINE
         MVC   OWN_LPAR,CSDPLPN        save LPAR number for later
         BRAS  R14,SPACE2              Double Space
LPAR19   EQU   *
*
*        PR/SM config table (ESA 4.2 with RMF)
*
         ICM   R5,B'1111',CVTMFCTL     GLOBAL SUPERVISOR TABLE
         JZ    LPAR25                  LOST, QUIT
         USING ERBSTGST,R5
         CLC   =C'STGS',STGSNAME       RIGHT CB ID?
         JNE   LPAR25                  LOST, QUIT
         ICM   R6,B'1111',STGSCPU      CPU DATA TABLE
         JNP   LPAR25                  LOST, QUIT
         USING ERBCPUDT,R6
         L     R7,CPUD204              LPAR CONFIGURATION TABLE
         DROP  R5,R6                   ERBSTGST,ERBCPUDT
         LTR   R7,R7                   VALID POINTER?
         JP    LPAR30                  yes, continue
         USING D204,R7
*
*        PR/SM config table (DIAG 204)
*
LPAR25   EQU   *
         MVI   FAILCODE,25             failure code
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         JNO   LPAR990                 no, exit
         BRAS  R14,WORKADDR            LOCATE WORK AREA
         LR    R7,R1                   save addr
         PGSER R,FIX,A=D204,EA=D204+4095,ECB=0 PGFIX
         SYSEVENT DONTSWAP             PGFIX/LRA
         LRA   R2,D204                 LOAD REAL ADDRESS
         LA    R3,4                    FUNCTION CODE
         DIAG  R2,R3,X'0204'           ISSUE PR/SM DIAGNOSE
         SYSEVENT OKSWAP               undo DONTSWAP
         PGSER R,FREE,A=D204,EA=D204+4095,ECB=0 PGFIX
*
LPAR30   EQU   *
         LH    R3,D204OWNP             OFFSET TO OWN PARTITION
         LA    R3,D204(R3)             CHANGE OFFSET TO ADDRESS
         USING D204LPAR,R3
         MVI   FAILCODE,38             failure code
         CLC   D204LPNO,CSDPLPN        OWN PARTITION NUMBER
         JNE   LPAR990                 LOST, QUIT
         MVI   FAILCODE,39             failure code
         CLC   D204LPCP,CSDCPUOL+1     # OF CPU'S ONLINE IN MY LPAR
         JNE   LPAR990                 LOST, QUIT
         DROP  R3                      D204LPAR
*
         STCKSYNC TOD=WKCELL1          GET CURRENT TOD CLOCK VALUE
         MVI   FAILCODE,40             failure code
         CLC   WKCELL1(2),D204STCK     COMPARE YEAR/MONTH
         JNE   LPAR990                 LOST, QUIT
         LA    R1,D204STCK             pass TOD clock value
         BRAS  R14,STCKCONV            convert TOD clock to decimal
         STRING '  LPAR Configuration as of ',                         X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),2X,        HH.MM.SS                        X
               10X,((R7),,X),          address of D204 area            X
               INTO=LINE
         BRAS  R14,SPACE2           <- Double Space
*
*     Scan LPAR entries to build map of all physical CPU's
*
         LA    R3,L'D204HDR(,R7)       FIRST LPAR ENTRY
         USING D204LPAR,R3
*LOOP
LPAR511  SLR   R1,R1
         IC    R1,D204LPCP             # OF PROCESSORS FOR THIS LPAR
*        MH    R1,=H'24'               size of all proc entries
         MHI   R1,24                   size of all proc entries
         LA    R3,L'D204LPAR(R1,R3)    SKIP LPAR ENTRY
         CLI   D204LPNO,0              PHYSICAL entry ?
         JNE   LPAR511                 not yet, try next LPAR
*ENDLOOP
         MVC   PHYSICAL_LPAD,D204LPAD  addr of 1st CPU (0 or 1)
*
LPAR520  STRING '     LPAR   LPAR               Weightings',INTO=LINE
         LH    R2,PHYSICAL_LPAD        First CPU
         STRING '      NO    NAME     ',INTO=NEXTLINE
         LA    R3,NEXTLINE(R15)        FIRST "CPU n"
*LOOP
LPAR521  STRING 'CPU',((R2),,R2Z),INTO=((R3),10)
         LA    R2,1(,R2)               BUMP CPU NO
         LA    R3,07(,R3)              NEXT CPU #
         LH    R0,D204PCCT             Max CPU ID
         AH    R0,PHYSICAL_LPAD        First CPU
         CLR   R2,R0                   end of table yet?
         JL    LPAR521                 NO, NEXT CPU NO
*ENDLOOP
         BRAS  R14,SPACE1           <- NEXT LINE
         BRAS  R14,SPACE1           <- NEXT LINE
*
         LA    R3,L'D204HDR(,R7)       FIRST LPAR ENTRY
*LOOP
LPAR541  LA    R2,D204LPNO             save addr of partition number
         STRING (D204LPNO,FL1,R8B),4X, LPAR NUMBER                     X
               D204LPNM,               LPAR NAME                       X
               INTO=LINE
         CLC   OWN_LPAR,D204LPNO       own LPAR?
         JNE   *+8                     no, jump
         MVI   LINE+8,C'<'             Flag own LPAR
         SLR   R0,R0
         ICM   R0,B'0001',D204LPCP     # OF PROCESSORS FOR THIS LPAR
         JZ    LPAR548                 NOT ACTIVE, IGNORE
         LA    R3,D204LPAD             FIRST PROCESSOR
         USING D204LPAD,R3
*--LOOP
LPAR545  LH    R1,D204LPAD             CPU ADDR
         SH    R1,PHYSICAL_LPAD        First CPU
         MHI   R1,7                    column width
         LA    R1,LINE+21(R1)          CHANGE OFFSET TO ADDRESS
         STRING (D204LPRS,H,R5B),INTO=((R1),10)
         CLI   D204LPRS,255            dedicated processor?
         JNE   *+10                    no, skip MVC
         MVC   0(5,R1),=C'  ded'       yes, show it
         LA    R3,24(,R3)              NEXT CPU ENTRY
         BRCT  R0,LPAR545              NEXT CPU
*--ENDLOOP
         BRAS  R14,SPACE1           <- NEXT LINE
         J     LPAR549
LPAR548  LA    R3,L'D204LPAR(,R3)      SKIP INACTIVE LPAR ENTRY
         BRAS  R14,SPACE1           <- NEXT LINE
LPAR549  CLI   0(R2),0                 end of table?
         JNE   LPAR541                 not yet, keep on going
*ENDLOOP
         BRAS  R14,BLANK1           <- blank line
         J     LPAR999                 exit
.LPAR999 ANOP
LPAR990  EQU   *                       LPAR config could not be gen'd
         STRING '  LPAR Configuration could not be accessed (code=',   X
               (FAILCODE,FL1,R3Z),')',INTO=LINE
         BRAS  R14,SPACE2           <- Double space
LPAR999  END_PROC
         TITLE 'SHOWMVS &REL - Display Map of Virtual Memory'
*---------------------------------------------------------------------*
*                                                                     *
*Virtual Storage Map:                                                 *
*                                                                     *
*          Area   Start(hex)-End(hex)    Size(K)    Size(M)           *
*                                                                     *
*    PSA+System    00000000  00005000        20K        .0M           *
*    Region V=R    00005000  00024FFF       128K        .1M           *
*    Region V=V    00025000  009FFFFF     10092K       9.8M           *
*           CSA    00A00000  00C79FFF      2536K       2.4M           *
*          MLPA    00C7A000  00C7BFFF         8K        .0M           *
*          FLPA    00C7C000  00C84FFF        36K        .0M           *
*          PLPA    00C85000  00ED8FFF      2384K       2.3M           *
*           SQA    00ED9000  00FCFFFF       988K        .9M           *
*       Nucleus    00FD0000  00FFFFFF       192K        .1M           *
*        16M-line  ----------------------------------------           *
*    Nucl. Ext.    01000000  013D6FFF      3932K       3.8M           *
*      SQA EXT.    013D7000  01D77E64      9859K       9.6M           *
*     PLPA Ext.    01D78000  0342CFFF     23252K      22.7M           *
*     FLPA Ext.    0342D000  0342FFFF        12K        .0M           *
*     MLPA Ext.    00000000  00000000         0K        .0M           *
*      CSA Ext.    03430000  03FFFFFF     12096K      11.8M           *
*     Reg. Ext.    04000000  7FFFFFFF   2031616K    1984.0M           *
*                                                                     *
*  CSA space converted to SQA:        0K                              *
*  Common Area Space Available:    2248K  (CSA+SQA)                   *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO                                               EU17 MACRO
         MEMORY_MAP &MSG,&START,&END,&SIZE,&ALLOC,&HWM       EU17 MACRO
         AIF   (T'&START NE 'O').AA                          EU17 MACRO
         MNOTE 8,'--- Start Address missing '                EU17 MACRO
         AGO   .ZZ                                           EU17 MACRO
.AA      L     R1,&START               START ADDRESS         EU17 MACRO
         AIF   (T'&END EQ 'O').CC                            EU17 MACRO
         L     R2,&END                 END ADDRESS           EU17 MACRO
         AIF   (T'&SIZE NE 'O').BB                           EU17 MACRO
         LA    R0,1                    ONE BYTE              EU17 MACRO
         ALR   R0,R2                   END ADDRESS           EU17 MACRO
         SLR   R0,R1                   SIZE IN BYTES         EU17 MACRO
         AGO   .EE                                           EU17 MACRO
.BB      L     R0,&SIZE                SIZE IN BYTES         EU17 MACRO
         AGO   .EE                                           EU17 MACRO
.CC      AIF   (T'&SIZE NE 'O').DD                           EU17 MACRO
         MNOTE 8,'--- End Address and/or Size missing '      EU17 MACRO
         AGO   .ZZ                                           EU17 MACRO
.DD      L     R0,&SIZE                SIZE IN BYTES         EU17 MACRO
         LTR   R2,R0                   size=0?               EU17 MACRO
         JZ    *+4+2+2                 yes, EA=0 too         EU17 MACRO
         AR    R2,R1                   END ADDRESS           EU17 MACRO
         BCTR  R2,0                    END ADDRESS           EU17 MACRO
.EE      STM   R1,R2,TENWORDS          START-END ADDRESSES   EU17 MACRO
         BRAS  R14,MEM_SUB             EDIT SIZE (KB AND MB) EU17 MACRO
&STR     SETC  '&MSG'(2,K'&MSG-2)                            EU17 MACRO
         STRING '  &STR  ',                                      RS0603X
               (TENWORDS,4,X),2X,(TENWORDS+4,4,X),2X,        EU17 MACROX
               WKCELL1,'K  ',WKCELL2,'M',INTO=LINE           EU17 MACRO
         AIF   ('&ALLOC' EQ '').MEM59
&LABEL   SETC  'IHB&SYSNDX'
         L     R0,GDA_&ALLOC._ALLOC    allocation, in Bytes
         SRL   R0,10                   allocation, in Kilos
         STRING ((R0),,R9B),'K',INTO=(LINE+58,LINE+L'LINE)
         AIF   ('&HWM' EQ '').MEM59
&LABEL   SETC  'IHB&SYSNDX'
         L     R0,GDA&HWM.HWM         allocation, in Bytes
         SRL   R0,10                   allocation, in Kilos
         STRING ((R0),,R9B),'K',INTO=(LINE+69,LINE+L'LINE)
.MEM59   BRAS  R14,SPACE1          <== NEXT LINE             EU17 MACRO
.ZZ      MEND                                                EU17 MACRO
MEMORY   BEGIN_PROC KW=MEMORY,BASEREG=NO                         RS0302
         STRING '&TITLEPFX.Virtual Storage Map:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING 8X,'Area   Start(hex)-End(hex)    Size(K)    Size(M) ',+
               '    Used(K)     HWM(K)',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R7,CVTSMEXT             STORAGE MAP EXTENSION
         USING CVTVSTGX,R7
         L     R6,CVTGDA               GLOBAL DATA AREA           EU17
         USING GDA,R6                                             EU17
         XC    TENWORDS,TENWORDS                                  EU17
         L     R4,PSAAOLD-PSA          MY ASCB                   RS1200
         L     R5,ASCBLDA-ASCB(,R4)    MY LDA                    RS1200
         USING LDA,R5                                            RS1200
         CLC   GDAVR,TENWORDS      is it null ? REAL=0 IEASYSxx  RS1200
         JE    MEMORY24              yes no real storage
         MEMORY_MAP 'PSA+System  ',TENWORDS,GDAVR                 EU17
         J     MEMORY25                                          RS1200
MEMORY24 DS    0H                                                RS1200
         MEMORY_MAP 'PSA+System  ',TENWORDS,LDASTRTA             RS1200
MEMORY25 DS    0H                                                RS1200
         MEMORY_MAP 'Region V=R  ',GDAVR,,GDAVRSZ                 EU17
*        subroutine MEM_SUB destroy R5 so we need to recover     RS1200
         L     R4,PSAAOLD-PSA          MY ASCB
         L     R5,ASCBLDA-ASCB(,R4)    MY LDA
         USING LDA,R5
         MEMORY_MAP 'Region V=V  ',LDASTRTA,,LDASIZA              621D
         AIF   (NOT D'CVTH7703).MEMORY26 OS/390 R10?             RS0603
         TM    HBB7703,L'HBB7703       running on OS/390 R10?    RS0603
         JZ    MEMORY26                no, jump                  RS0603
         MEMORY_MAP '       CSA  ',GDACSA,,GDACSASZ,CSA,CSA      RS0603
         J     MEMORY26_END            leave                     RS0603
.MEMORY26 ANOP                                                   RS0603
MEMORY26 EQU   *                                                 RS0603
         MEMORY_MAP '       CSA  ',GDACSA,,GDACSASZ,CSA           EU17
MEMORY26_END EQU  *                                              RS0603
         MEMORY_MAP '      MLPA  ',CVTMLPAS,CVTMLPAE              EU17
         MEMORY_MAP '      FLPA  ',CVTFLPAS,CVTFLPAE              EU17
         MEMORY_MAP '      PLPA  ',CVTPLPAS,CVTPLPAE              EU17
         AIF   (NOT D'CVTH7703).MEMORY27 OS/390 R10?             RS0603
         TM    HBB7703,L'HBB7703       running on OS/390 R10?    RS0603
         JZ    MEMORY27                no, jump                  RS0603
         MEMORY_MAP '       SQA  ',GDASQA,,GDASQASZ,SQA,SQA      RS0603
         J     MEMORY27_END            leave                     RS0603
.MEMORY27 ANOP                                                   RS0603
MEMORY27 EQU   *                                                 RS0603
         MEMORY_MAP '       SQA  ',GDASQA,,GDASQASZ,SQA           EU17
MEMORY27_END EQU  *                                              RS0603
         MEMORY_MAP '   Nucleus  ',CVTRWNS,=X'00FFFFFF'
         STRING 8X,'16M-line',2X,                                 EU17 X
               '----------------------------------------',INTO=LINE
         BRAS  R14,SPACE1          <== next line                  EU17
         MEMORY_MAP 'Nucl. Ext.  ',=X'01000000',CVTERWNE
         AIF   (NOT D'CVTH7703).MEMORY28 OS/390 R10?             RS0603
         TM    HBB7703,L'HBB7703       running on OS/390 R10?    RS0603
         JZ    MEMORY28                no, jump                  RS0603
         MEMORY_MAP '  SQA Ext.  ',GDAESQA,,GDAESQAS,ESQA,ESQA   RS0603
         J     MEMORY28_END            leave                     RS0603
.MEMORY28 ANOP                                                   RS0603
MEMORY28 EQU   *                                                 RS0603
         MEMORY_MAP '  SQA Ext.  ',GDAESQA,,GDAESQAS,ESQA         EU17
MEMORY28_END EQU  *                                              RS0603
         MEMORY_MAP ' PLPA Ext.  ',CVTEPLPS,CVTEPLPE              EU17
         MEMORY_MAP ' FLPA Ext.  ',CVTEFLPS,CVTEFLPE              EU17
         MEMORY_MAP ' MLPA Ext.  ',CVTEMLPS,CVTEMLPE              EU17
         AIF   (NOT D'CVTH7703).MEMORY29 OS/390 R10?             RS0603
         TM    HBB7703,L'HBB7703       running on OS/390 R10?    RS0603
         JZ    MEMORY29                no, jump                  RS0603
         MEMORY_MAP '  CSA Ext.  ',GDAECSA,,GDAECSAS,ECSA,ECSA   RS0603
         J     MEMORY29_END            leave                     RS0603
.MEMORY29 ANOP                                                   RS0603
MEMORY29 EQU   *                                                 RS0603
         MEMORY_MAP '  CSA Ext.  ',GDAECSA,,GDAECSAS,ECSA         EU17
MEMORY29_END EQU  *                                              RS0603
         MEMORY_MAP ' Reg. Ext.  ',GDAEPVT,,GDAEPVTS              EU17
         BRAS  R14,BLANK1              BLANK LINE                RS1100
         AIF   (D'CVTH7703).MEMORY40     OS/390 R10?             RS0903
         TM    HBB7703,L'HBB7703       running on OS/390 R10?    RS0903
         JNZ   MEMORY40                yes, jump                 RS0903
         L     R1,GDACSACV             CSA space converted to SQA
         SRL   R1,10                   in kilobytes
         STRING '  CSA space converted to SQA  :',                     X
               ((R1),,R8B),'K',INTO=LINE                         RS0903
         BRAS  R14,SPACE1          <== next line
MEMORY40 EQU   *                                                 RS0903
         AIF   (NOT D'CVTH7703).MEMORY41     OS/390 R10?         RS0404
         TM    HBB7703,L'HBB7703       running on OS/390 R10?    RS0404
         JNZ   MEMORY41                yes, jump                 RS0404
.MEMORY40 ANOP                                                   RS0903
         L     R1,GDA_CSA_CONV         CSA space converted to SQARS0903
         SRL   R1,10                   in kilobytes              RS0903
         STRING '  CSA space converted to SQA  :',                     X
               ((R1),,R8B),'K',INTO=LINE                         RS0903
         BRAS  R14,SPACE1          <== next line                 RS0902
         L     R1,GDA_ECSA_CONV        ECSA space converted to ESQA
         SRL   R1,10                   in kilobytes              RS0903
         STRING '  ECSA space converted to ESQA:',                     X
               ((R1),,R8B),'K',INTO=LINE                         RS0903
         BRAS  R14,SPACE1          <== next line                 RS0903
.MEMORY41 ANOP                                                   RS0903
MEMORY41 EQU   *                                                 RS0404
         L     R1,GDACSARE             unallocated space in common area
         SRL   R1,10                   in kilobytes
         STRING '  Common Area Space Available :',                     X
               ((R1),,R8B),'K  (CSA+SQA)',INTO=LINE
         BRAS  R14,SPACE2              Double Space              RS0903
         AIF   (NOT D'CVTH7703).MEMORY42     OS/390 R10?         RS0903
         TM    HBB7703,L'HBB7703       running on OS/390 R10?    RS0903
         JZ    MEMORY42                yes, jump                 RS0903
         L     R1,GDA_CSA_ALLOC        unallocated space in CSA  RS0903
         A     R1,GDA_SQA_ALLOC        unallocated space in SQA  RS0903
         SRL   R1,10                   in kilobytes              RS0903
         STRING '  Common Area Space Alloc     :',               RS0903X
               ((R1),,R8B),'K  (CSA+SQA)',INTO=LINE              RS0903
         BRAS  R14,SPACE1              Single Space              RS0903
         L     R1,GDA_ECSA_ALLOC       unallocated space in ECSA RS0903
         A     R1,GDA_ESQA_ALLOC       unallocated space in ESQA RS0903
         SRL   R1,10                   in kilobytes              RS0903
         STRING '  Common Area Space Alloc     :',               RS0903X
               ((R1),,R8B),'K  (ECSA+ESQA)',INTO=LINE            RS0903
         BRAS  R14,SPACE2              Double Space              RS0903
.MEMORY42 ANOP                                                   RS0903
MEMORY42 DS    0H                                                RS0903
*
         MVC   WORK256(9),=C'OFFOFFOFF' init work area
         TM    GDAFLGS,GDAGFSTR        GFS Trace active?
         JZ    *+10                    no, jump
         MVC   WORK256+0(3),=C'On '    yes, remember it
         TM    GDAFLGS,GDACSATR        CSA Tracking active?
         JZ    *+10                    no, jump
         MVC   WORK256+3(3),=C'On '    yes, remember it
         TM    GDAFLGS,GDASQATR        SQA Tracking active?
         JZ    *+10                    no, jump
         MVC   WORK256+6(3),=C'On '    yes, remember it
         STRING '  GFS Trace: ',(WORK256,3),                           X
               '   CSA Tracking: ',(WORK256+3,3),                      X
               '   SQA Tracking: ',(WORK256+6,3),                      X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
MEMORY47 EQU   *
*---------------------------------------------------------------------*
*        Sub-Pool description                                         *
*---------------------------------------------------------------------*
MEMORY51 EQU   *                                                   $RS
         STRING '&TITLEPFX.Subpools:',INTO=LINE                    $RS
         BRAS  R14,SPACE2              Double Space                $RS
         STRING '  Number  Type     Owner  Fix FProt Back  Dref Key',  X
               ' DKey Aloc Free Conv Rpt Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  000-127 PVT/EPVT Task       FProt Below         ',  X
               ' TCB  Low  Free        0',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  128     Undefined',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  129     PVT/EPVT Job        FProt Any        Any',  X
               ' PSW  Low  Free      129 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  130     PVT/EPVT Job              Any        Any',  X
               ' PSW  Low  Free      130 Auth',INTO=LINE
         STRING '  131     PVT/EPVT Job        FProt Any        Any',  X
               ' PSW  Low  Free      131',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  132     PVT/EPVT Job              Any        Any',  X
               ' PSW  Low  Free      132',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  133-202 Undefined',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  203     ELSQA    Task             Any   Dref   0',  X
               '      High Free      203 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  204     ELSQA    Job              Any   Dref   0',  X
               '      High Free      204 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  205     ELSQA    Memory           Any   Dref   0',  X
               '      High           205 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  206-212 Undefined',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  213     ELSQA    Task       FProt Any   Dref   0',  X
               '      High Free      213 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  214     ELSQA    Job        FProt Any   Dref   0',  X
               '      High Free      214 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  215     ELSQA    Memory     Fprot Any   Dref   0',  X
               '      High           215 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  216-222 Undefined',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  223     ELSQA    Task   Fix FProt Any          0',  X
               '      High Free      223 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  224     ELSQA    Job    Fix FProt Any          0',  X
               '      High Free      224 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  225     ELSQA    Memory Fix FProt Any          0',  X
               '      High           225 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  226     SQA      None   Fix       Below        0',  X
               '      High      Conv 226 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  227     CSA/ECSA None   Fix FProt Below      Any',  X
               ' PSW  High           227 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  228     CSA/ECSA None   Fix       Below      Any',  X
               ' PSW  High           228 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  229     PVT/EPVT Task       FProt Below      Any',  X
               ' PSW  High Free      229 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  230     PVT/EPVT Task             Below      Any',  X
               ' PSW  High Free      230 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  231     CSA/ECSA None       FProt Below      Any',  X
               ' PSW  High           231 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  232     Undefined',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  233     L-/ELSQA Task   Fix       Any          0',  X
               '      High Free      253 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  234     L-/ELSQA Job    Fix       Any          0',  X
               '      High           254 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  235     L-/ELSQA Memory Fix       Any          0',  X
               '      High           255 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  236     PVT/EPVT Task             Any          1',  X
               '      High Free      236 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  237     PVT/EPVT Task             Any          1',  X
               '      High Free      237 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  238     Undefined',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  239     SQA/ESQA None   Fix FProt Any          0',  X
               '      High      Conv 237 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  240     PVT/EPVT Task       FProt Below         ',  X
               ' TCB  Low  Free        0 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  241     CSA/ECSA None             Below      Any',  X
               ' PSW  High Free      241 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  242-244 Undefined',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  245     SQA/ESQA None   Fix       Any          0',  X
               '      High           245 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  246     Undefined',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  247     ESQA     None       FProt Any   Dref   0',  X
               '      High      Conv 247 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  248     ESQA     None             Any   Dref   0',  X
               '      High      Conv 248 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  249     PVT/EPVT Job              Below      Any',  X
               ' PSW  High Free      249 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  250     PVT/EPVT Task       FProt Below         ',  X
               ' TCB  Low  Free        0 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  251     PVT/EPVT Job        FProt Below         ',  X
               ' TCB  Low  Free      251 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  252     PVT/EPVT Job              Below        0',  X
               '      Low  Free      252 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  253     L-/ELSQA Task   Fix       Any          0',  X
               '      High Free      253 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  254     L-/ELSQA Job    Fix       Any          0',  X
               '      High           254 Auth',INTO=LINE
         BRAS  R14,SPACE1              Single Space                $RS
         STRING '  255     L-/ELSQA Memory Fix       Any          0',  X
               '      High           255 Auth',INTO=LINE
         BRAS  R14,SPACE2              Double Space                $RS
*---------------------------------------------------------------------*
*                                                                     *
*Global Cellpools:                                                    *
*                                                                     *
*  PoolId   Ext  C-Size   P-Num   S-Num SPN Key TCB    Header         *
*  02003E00   1     216      21      20 239   0 000000 DAE SYMPTOM Q  *
*  020281C0   1      96      10      10 245   0 000000 SYS1.DUMP DAT  *
*                                                                     *
*---------------------------------------------------------------------*
         STRING '&TITLEPFX.Global Cellpools:',INTO=LINE            $RS
         BRAS  R14,SPACE2              Double Space                $RS
         STRING '  PoolId   Ext  C-Size   P-Num   S-Num SPN Key TCB    X
               Header',INTO=LINE                                   $RS
         BRAS  R14,SPACE1              Single Space                $RS
         L     R4,GDAPPDFX             fixed PPD queue             $RS
         BRAS  R7,CELLP100             display cell-pools          $RS
         L     R4,GDAPPDPG             pageable PPD queue          $RS
         BRAS  R7,CELLP100             display cell-pools          $RS
         BRAS  R14,BLANK1              BLANK LINE                  $RS
         DROP  R5,R6
         J     MEMORY99
*---------------------------------------------------------------- EU17
* "MEM_SUB" routine => EDIT SIZE IN K-BYTES AND M-BYTES           EU17
*                      R14 - link register                        EU17
*---------------------------------------------------------------- EU17
MEM_SUB  LR    R5,R0                   size to compute Mb         EU17
         M     R4,=F'10'               multiply by 10             EU17
         SRDL  R4,20                   and divide by 1 Mb         EU17
         CVD   R5,WKCELL3              convert                    EU17
         MVC   WKCELL2,=XL8'4040202020214B20' mask                EU17
         ED    WKCELL2,WKCELL3+5       edit                       EU17
         SRA   R0,10                   size in Kb                 EU17
         CVD   R0,WKCELL3              convert                    EU17
         MVC   WKCELL1,=XL8'4020202020202120' mask                EU17
         ED    WKCELL1,WKCELL3+4       edit                       EU17
         BR    R14                     return                     EU17
MEMORY99 END_PROC                                                 EU17
*---------------------------------------------------------------------*
*                                                                     *
*Subpool Usage:                                                       *
*  Location: CSA  No: 15                                              *
*  SP-Key     Alloc      Free    AAlloc    BAlloc     AFree     BFree *
*  227-00         7         4     90112     28672      3000     11368 *
*  227-60        99        44   5115904     12288     10552      3072 *
*  227-70         1         0     24576         0         0         0 *
*  228-00        50        29   2277376     20480      3720      9272 *
*  228-10         3         4      8192      4096      3288      1216 *
*  228-20         6         6   1617920         0     14424         0 *
*  228-40         8         7    217088      4096      1896      3288 *
*  228-50         2         1     86016         0      1856         0 *
*  228-60        11         5    618496     12288      3896         8 *
*  228-70         7         4    172032      8192      3056      3072 *
*  228-80        12        15    192512      8192      3256      3600 *
*  231-00        29        45    409600     49152     19976      6584 *
*  231-10         9         6    135168         0      2000         0 *
*  231-40         4         4     32768         0      7848         0 *
*  231-50       293         2   2584576         0      8016         0 *
*  Total                       13582336    147456     86784     41480 *
*                                                                     *
*---------------------------------------------------------------------*
VSM00    BEGIN_PROC KW=VSM,BASEREG=YES  GETMAIN
         LHI   R2,4096                 length of dynamic storage
*
*        Allocate an workarea
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    VSM01                   yes, jump
         GETMAIN RU,LV=(R2),BNDRY=PAGE allocate work area
         J     VSM02
VSM01    DS    0H
         LA    R1,1                    LOC=ANY
         LR    R0,R2                   Length of storage
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES
VSM02    DS    0H
         LR    R4,R1                   where did we find it
         STM   R1,R2,WLM_QUACF_AREA    save addr and length
         STRING '&TITLEPFX.Subpool Usage:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         BRAS  R14,WORKADDR            allocate  Answer Area
         LR    R3,R1                   point to area
         ST    R3,WKCELL1              remember start
         MVI   WKCELL3,C'1'            CSA switch
         STRING 'CSA',INTO=(0(R4),4)
         BRAS  R14,VSMP100             display CSA/ECSA subpools
         BRAS  R14,WORKADDR            allocate  Answer Area
         LR    R3,R1                   point to area
         ST    R3,WKCELL1              remember start
         MVI   WKCELL3,C'2'            SQA switch
         STRING 'SQA',INTO=(0(R4),4)
         BRAS  R14,VSMP100             display SQA/ESQA subpools
         BRAS  R14,WORKADDR            allocate  Answer Area
         LR    R3,R1                   point to area
         ST    R3,WKCELL1              remember start
         MVI   WKCELL3,C'3'            LSQA switch
         STRING 'LSQA',INTO=(0(R4),4)
         BRAS  R14,VSMP100             Display LSQA subpool
         BRAS  R14,BLANK1              BLANK LINE
         LM    R1,R2,WLM_QUACF_AREA    save addr and length
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    VSM98                   yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free getmained work area
         J     VSM99                   jump to next display
VSM98    DS    0H
         LR    R0,R2                   length for FREEMAIN
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES Free        RS1002
VSM99    DS    0H
         END_PROC
         TITLE 'SHOWMVS &REL - Common Storage Display'          RS0502
*---------------------------------------------------------------------*
*                                                                     *
* Common Storage Usage                                                *
*                                                                     *
*   JobName  JobID   Asid St       CSA     E-CSA       SQA     E-SQA  *
*   *SYSTEM*            0 Ac     88264  24771488    535952  11722872  *
*   *UNKNOW*            0 Ac         0         0         0         0  *
*   *MASTER*            1 Ac    182896   2477432    190512   2698608  *
*   PCAUTH              2 Ac         0         0        32      1520  *
*   RASP                3 Ac         0         0         0      3360  *
*   TRACE               4 Ac         0         0         0      4464  *
*   DUMPSRV             5 Ac         0      4664        64     36712  *
*   and so on                                                         *
*                                                                     *
*---------------------------------------------------------------------*
CSSTOR00 BEGIN_PROC KW=CSSTOR,BASEREG=NO
         STRING '&TITLEPFX.Common Storage Usage',                      *
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  JobName  JobID   Asid St       CSA',                *
               '     E-CSA       SQA     E-SQA     Total',INTO=LINE
         BAL   R14,SPACE1              Single Space
         LA    R4,1                    first ASID
         L     R5,CVTASVT              ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
         ST    R10,APFTABLE            For sort
*loop
CSSTOR11 LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R2,R1                   VALID ASID?
         JNP   CSSTOR18                NO, JUMP
         L     R2,ASCBASSB-ASCB(,R2)   ASSB address
         L     R2,ASSBVAB-ASSB(,R2)    VAB address
         USING VAB,R2
*        Test access (Recovery!!)
*        #SNAP ADDR=(R2),LENGTH=16
         L     R6,VAB_CAUB             get CAUB cblock
         USING CAUB,R6
         MVC   WKCELL3,=CL2'Ac'        Active
         BRAS  R7,CSSTOR100            Display data
         MVC   WKCELL3,=CL2'AS'        ASID
         CLC   VAB_CAUB,VAB_AS_CAUB    Equal ?
         JE    CSSTOR18                  yes, don't display
         L     R6,VAB_AS_CAUB          Initiators (JES, USS and so on)
         USING CAUB,R6
         BRAS  R7,CSSTOR100            display data
CSSTOR18 DS    0H
         LA    R4,1(,R4)               bump ASID
         BRCT  R5,CSSTOR11             next address space
*endloop
CSSTOR80 DS    0H
         L     R3,CVTGDA               GDA
         USING GDA,R3
         L     R6,GDASCAUB             System
         USING CAUB,R6
         MVC   WKCELL3,=CL2'Ac'        Active
         BRAS  R7,CSSTOR100
         L     R6,GDAUCAUB             Unknown queue
         USING CAUB,R6
         BRAS  R7,CSSTOR100            display data
         L     R6,GDAFCAUB             Unowned
         USING CAUB,R6
         MVC   WKCELL3,=CL2'OG'        Owner gone
         BRAS  R7,CSSTOR100
         LA    R2,APFTABLE             TABLE DESC
         MVI   WKCELL1,C'A'            Sort Asid
         BRAS  R14,TRIZO               SORT BY ASID
         J     CSSTOR99
*loop
CSSTOR100 DS    0H
*        #SNAP ADDR=(R6),LENGTH=72     CAUB
         L     R1,CAUB_CSA_BELOW
         A     R1,CAUB_CSA_ABOVE
         A     R1,CAUB_SQA_BELOW
         A     R1,CAUB_SQA_ABOVE
         ST    R1,WKCELL2
         STRING 2X,CAUB_JOBNAME,1X,CAUB_JOBID,                         *
               1X,(CAUB_ASN,H,R3B),1X,(WKCELL3,2),                     *
               1X,(CAUB_CSA_BELOW,F,R9B),1X,(CAUB_CSA_ABOVE,F,R9B),    *
               1X,(CAUB_SQA_BELOW,F,R9B),1X,(CAUB_SQA_ABOVE,F,R9B),    *
               1X,(WKCELL2,F,R9B),INTO=LINE
         TR    LINE,TRTPRINT           get rid of garbage
         BRAS  R14,SPACE1              Single Space
         CL    R6,GDALCAUB             last entry ?
         JE    CSSTOR999                 yes leave
         ICM   R6,B'1111',CAUB_UNOWNED_NEXT
         JNZ   CSSTOR100
CSSTOR999 DS    0H
*endloop
         BR    R7
.CSSTOR99 ANOP
CSSTOR99 DS    0H
         BRAS  R14,BLANK1
         STRING '  ST: Ac-Active AS-VAB_AS_CAUB OG-Owner gone',        *
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         END_PROC
*---------------------------------------------------------------------*
*                                                                     *
* Dataspace/Hiperspace                                                *
*                                                                     *
*   Name     ASID Dataspace ASTE     DSToken          Scope      RS0902
*                                                                     *
*   *MASTER*   1  IRR0001F  04DB9880 80001201000002D3                 *
*                 IRR0001E  04DB9C00 80001901000002D2                 *
*                 IRR0001D  04DB9B80 80001801000002D1                 *
*                 IRR0001C  04DB9A80 80001601000002D0                 *
*                 IRR0001B  04DB9B00 80001701000002CF                 *
*                 IRR0001A  04DB9A00 80001501000002CE                 *
*                 IRR00019  04DB9C80 80001A01000002CD                 *
*                 IRR00018  03B92500 80008B01000002CC                 *
*                 IRR00011  04DB9980 8000140100000015                 *
*                 00000CSM  1861E480 8000230000000074                 *
*                 IRR0000E  04DB9780 8000100100000011                 *
*                 IRR0000D  04DB9700 80000F0100000010                 *
*                 IRR0000C  04DB9680 80000E010000000F                 *
*                                                                     *
*---------------------------------------------------------------------*
DSPLST00 BEGIN_PROC KW=DSPLST,AUTH=YES,BASEREG=NO                RS0302
         AIF   (NOT D'CVTH6606).DSPLST99   Datapace list
         TM    HBB6606,L'HBB6606       running on OS390 R6 ?
         JNO   DSPLST99                no, jump
         MODESET EXTKEY=ZERO        <- switch to KEY=0
         STRING '&TITLEPFX.Dataspace/Hiperspace',                      X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  Name     ','ASID ','Dataspace ','ASTE     ',        X
               'DSToken',10X,'Scope',INTO=LINE                   RS0902
         BRAS  R14,SPACE2              Double Space
*
*        Locate the ASCB
*
DSPLST05 LA    R5,1                    first ASID
         L     R6,CVTASVT              point to ASVT
         L     R6,ASVTMAXU-ASVT(,R6)   max ASID
         XC    WKCELL2,WKCELL2         no of common dsp          RS0203
*loop
DSPLST10 LOCASCB ASID=(R5)             GET ADDR OF OWNER'S
         LTR   R2,R1                   VALID ASID?
         JNP   DSPLST80                NO, JUMP
         USING ASCB,R2
         ICM   R1,B'1111',ASCBJBNI-ASCB(R2) JOBNAME
         JNZ   DSPLST30                Yes - continue
         ICM   R1,B'1111',ASCBJBNS-ASCB(R2) START/MOUNT/LOGON
         JNZ   DSPLST30                No - continue
DSPLST20 DS    0H
         LA    R1,BLANKS
DSPLST30 DS    0H
         MVC   WORK256(8),0(R1)        Save Jobname
         XC    TENWORDS(8),TENWORDS    undocumented DSPCALL DSPLIST
         STH   R5,TENWORDS+2           services
         LA    R1,TENWORDS             PARM1 = Asid
         L     R4,CVTPTR(,0)           point to CVT
         L     R4,356(0,R4)            CVTPVTP
         L     R15,200(0,R4)           PVTCCDSL
         BALR  R14,R15                 DSPCALL DSPLIST service
         LTR   R15,R15                 returncode?
         JNZ   DSPLST80                  Yep try next asid
         L     R2,TENWORDS+4
         USING DSD,R2
         ICM   R3,B'1111',DSDNO                number of entries RS0902
         JZ    DSPLST80
         BRAS  R7,DSPCADS              Check Common dataspace    RS0902
         STRING 2X,(WORK256,8),1X,((R5),,R3B),2X,(DSDNAME),2X,         X
               (DSDASTE,4,X),1X,(DSDSTKN,8,X),1X,(WORK256+8,6),        X
               INTO=LINE
         BRAS  R14,SPACE1
         BCTR  R3,0                      -1                      RS0902
         LTR   R3,R3                     only one entry?         RS0902
         JZ    DSPLST80
* loop
DSPLST60 DS    0H
         LA    R2,DSDENTRY_LENGTH(,R2)   next entry
         BRAS  R7,DSPCADS              Check Common dataspace    RS0902
         STRING 16X,(DSDNAME),2X,(DSDASTE,4,X),1X,                     X
               (DSDSTKN,8,X),1X,(WORK256+8,6),INTO=LINE
         BRAS  R14,SPACE1
         BRCT  R3,DSPLST60             No - continue             RS0902
* endloop
DSPLST80 DS    0H
         LA    R5,1(,R5)               bump ASID
         BRCT  R6,DSPLST10             No - continue
*endloop
         BRAS  R14,BLANK1
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
         L     R4,CVTECVT              Load addr of ECVT         RS0203
         L     R4,ECVTIPA-ECVT(,R4)    Init parm area            RS0203
         USING IPA,R4                                            RS0203
         L     R5,IPAPDES                                        RS0203
         USING IPAPDE,R5                                         RS0203
         LA    R5,IPAMAXCA             Point to MAXCAD           RS0203
         ICM   R1,B'1111',IPAPDESA     storage address           RS0203
         LH    R2,IPAPDESL             storage length            RS0203
         STRING '  Total MAXCAD=',((R1),(R2)),                   RS0203X
               ' Total used CADS=',(WKCELL2,H,L3B),INTO=LINE     RS0203
         BRAS  R14,SPACE2              Double Space              RS0203
.DSPLST99 ANOP
DSPLST99 END_PROC
DSD      DSECT
         DS     CL8
DSDEYEC  DS     CL4    eyecatcher
         DS     H      ??
         DS     H      ??
DSDLEN   DS     F      length
DSDAID   DS     H      asid
         DS     H      ??
DSDNO    DS     F      Number of entries
DSDENTRY DS     0CL20
DSDNAME  DS     CL8    Dataspacename
DSDSTKN  DS     CL8    DSToken
DSDASTE  DS     CL4    ASTE
DSDENTRY_LENGTH EQU *-DSDENTRY
         TITLE 'SHOWMVS &REL - COMMUNICATIONS STORAGE MANAGER' +RS0200
*---------------------------------------------------------------------*
*                                                                     *
* Communication Storage Manager (CSM) Status                          *
*                                                                     *
*  Status      ECSA: ok                                               *
*         Fix. Stor: ok                                               *
*         DataSpace: ok          Name     Token            Alet       *
*                                00000CSM 8000290000000072 01FF0007   *
*                                                                     *
*---------------------------------------------------------------------*
CSMLS00  BEGIN_PROC KW=CSM,AUTH=YES,BASEREG=YES IVTCSM req       RS0302
         AIF   (NOT D'CVTH6603).CSMLS99 Communications Storage Manager
         TM    HBB6603,L'HBB6603       running on OS390 R3 ?
         JNO   CSMLS99                 no, jump
         STRING '&TITLEPFX.Communications Storage Manager ',           X
               '(CSM) Status',INTO=LINE
         BRAS  R14,SPACE2              double Space
         IVTCSM REQUEST=RESOURCE_STATS,STATAREA=WKCELL1,               X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,WORK256)
         CLC   LRETCODE,=F'0'           RetCode from IVTCSM Service
         JH    CSMLS80                   display RC and RSN if ne 0
         L     R3,WKCELL1
         USING IVTSTATA,R3
*        #SNAP ADDR=(R3),LENGTH=10
*        BRAS  R14,SPACE1              double Space
         MVC   WKCELL2,BLANKS
         MVC   WKCELL2(2),=C'ok'
         TM    STATA_FLAG,STATA_ESTAT
         JZ    CSMLS40
         MVC   WKCELL2(8),=C'Critical'
         TM    STATA_FLAG,STATA_ECRIT
         JO    CSMLS40
         MVC   WKCELL2(11),=C'Constrained'
         TM    STATA_FLAG,STATA_ECONS
         JO    CSMLS40
         MVC   WKCELL2(7),=C'Unknown'
CSMLS40  DS    0H
         STRING '  Status      ECSA: ',(WKCELL2,,T),INTO=LINE
         BRAS  R14,SPACE1              single Space
         MVC   WKCELL2,BLANKS
         MVC   WKCELL2(2),=C'ok'
         TM    STATA_FLAG,STATA_FSTAT
         JZ    CSMLS50
         MVC   WKCELL2(8),=C'Critical'
         TM    STATA_FLAG,STATA_FCRIT
         JO    CSMLS50
         MVC   WKCELL2(11),=C'Constrained'
         TM    STATA_FLAG,STATA_FCONS
         JO    CSMLS50
         MVC   WKCELL2(7),=C'Unknown'
CSMLS50  DS    0H
         STRING '         Fix. Stor: ',(WKCELL2,,T),INTO=LINE
         BRAS  R14,SPACE1              single Space
         MVC   WKCELL2,BLANKS
         MVC   WKCELL2(2),=C'ok'
         TM    STATA_FLAG,STATA_DSTAT
         JZ    CSMLS60
         MVC   WKCELL2(8),=C'Critical'
         TM    STATA_FLAG,STATA_DCRIT
         JO    CSMLS60
         MVC   WKCELL2(11),=C'Constrained'
         TM    STATA_FLAG,STATA_DCONS
         JO    CSMLS60
         MVC   WKCELL2(7),=C'Unknown'
CSMLS60  DS    0H
         STRING '         Dataspace: ',(0(R2),11,),1X,'Name     ',     X
               'Token',12X,'Alet',INTO=LINE
         TR    LINE,TRTPRINT           get rid of garbage        RS0803
         BRAS  R14,SPACE1              single Space
         IVTCSM REQUEST=DUMP_INFO,DS_INFO=WKCELL1,                     X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,WORK256)
         CLC   LRETCODE,=F'4'           RetCode from IVTCSM Service
         JH    CSMLS80                   display RC and RSN if > 4
         JE    CSMLS65                   end if RC = 4
         L     R3,WKCELL1
         USING IVTDATSP,R3
*        #SNAP ADDR=(R3),LENGTH=112                              RS0101
         ICM   R4,B'1111',DATSP_SNUM   number of DataSpaces      RS0101
         JNZ   CSMLS68                                           RS0101
CSMLS65  DS    0H                                                RS0101
         STRING '         No Dataspace active',INTO=LINE         RS0101
         BRAS  R14,SPACE2              double Space              RS0101
         J     CSMLS99                                           RS0101
CSMLS68  DS    0H                                                RS0101
         LA    R5,DATSP_SINF
         USING DATSP_ENT,R5
CSMLS70  DS    0H
         STRING 32X,DATSP_NAME,1X,(DATSP_TOKN,,X),1X,(DATSP_ALET,,X),  X
               INTO=LINE
         BRAS  R14,SPACE1              single Space
*        A     R5,DATSP_SLEN           next Entry                RS0703
         AHI   R5,20                   next Entry                RS0703
         BRCT  R4,CSMLS70
         BRAS  R14,BLANK1              double Space
         J     CSMLS99
CSMLS80  DS    0H
         CLC   LRETCODE,=F'4'           RetCode from IVTCSM service
         JNE   CSMLS85                   display RC/RSN IF > 4
         CLC   LRSNCODE,=F'2'           not inited?
         JNE   CSMLS85                   no
         STRING '  CSM - Service has not been initialized',INTO=LINE
         BRAS  R14,SPACE2              double Space
         J     CSMLS99
CSMLS85  DS    0H
         STRING '  IVTCSM','RC: ',(LRETCODE,,X),                       X
               ' RSN: ',(LRSNCODE,,X),INTO=LINE
         BRAS  R14,SPACE2              double Space
         J     CSMLS99
.CSMLS99 ANOP
CSMLS99  END_PROC
         TITLE 'SHOWMVS &REL - SYSPLEX Information'                @RS
*---------------------------------------------------------------------*
*                                                                  @RS*
*XCF Data                                                          @RS*
*                                                                  @RS*
*  SysName=MVS1    Interval: Monitor= 90   Operator= 93            @RS*
*    Status: 1996-11-20  10.25.14   Active                         @RS*
*                                                                  @RS*
*  SysName=MVS2    Interval: Monitor= 90   Operator= 93            @RS*
*    Status: 1996-11-20  10.25.17   Active                         @RS*
*                                                                  @RS*
*  SysName=MVS3    Interval: Monitor= 90   Operator= 93            @RS*
*    Status: 1996-11-20  10.25.17   Active                         @RS*
*                                                                  @RS*
* SYSGRS    (3)                                                    @RS*
*   Member=MVS1               Created Systemname=MVS1    Status:   @RS*
*   Member=MVS2               Created Systemname=MVS2    Status:   @RS*
*   Member=MVS3               Created Systemname=MVS3    Status:   @RS*
* SYSIGW01  (3)                                                    @RS*
*   Member=IGWCLM01MVS1       Created Systemname=MVS1    Status:   @RS*
*   Member=IGWCLM01MVS2       Created Systemname=MVS2    Status:   @RS*
*   Member=IGWCLM01MVS3       Created Systemname=MVS3    Status:   @RS*
*                                                                  @RS*
* and so on                                                        @RS*
*---------------------------------------------------------------------*
XCFDATA  BEGIN_PROC KW=XCF,AUTH=YES,BASEREG=YES Getmain req      RS0302
         STRING '&TITLEPFX.XCF Data',INTO=LINE                     @RS
         BRAS  R14,SPACE2              Double Space                @RS
         BRAS  R14,WORKADDR            allocate XCF Answer Area    @RS
         LA    R0,QUAHLENG+QUASLENG*32 Length of Answer-Area (>5.1)
         STM   R0,R1,WKCELL1           store length                @RS
         LR    R5,R1                   remember getmained storage  @RS
         USING QUAHDR,R5               tell assembly               @RS
         IXCQUERY REQINFO=SYSPLEX,ANSAREA=QUAHDR,ANSLEN=WKCELL1,       X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   @RS
         LTR   R15,R15                 Success?                    @RS
         JNZ   XCFD90                  No, error                   @RS
         ICM   R7,B'1111',QUAH#REC     record counter              @RS
         JZ    XCFD99                  no record, quit             @RS
         L     R6,QUAHSGOF             get offset                  @RS
         LA    R6,QUAHDR(R6)           point to the records        @RS
         USING QUASYS,R6               tell assembly               @RS
         CLC   QUAH#REM,=F'0'          got all records?            @RS
         JE    XCFD10                  yes, suppress info
         STRING 'Got ',(QUAH#REC,F,L),' records,miss ',(QUAH#REM,F,L), X
               '==> increase MAXSYSPLEX-variable',INTO=LINE        @RS
         BRAS  R14,SPACE2              Double Space                @RS
*loop                                                              @RS
XCFD10   EQU   *                                                   @RS
         SLR   R0,R0                                               @RS
         L     R1,QUASINTV             Monitor Time Interval       @RS
         D     R0,=F'100'              hundred seconds -> seconds  @RS
         SLR   R2,R2                                               @RS
         L     R3,QUASOPIN             Operator Time Interval      @RS
         D     R2,=F'100'              hundred seconds -> seconds  @RS
         STRING '  SysName=',QUASNAME,                                 X
               'Interval: Monitor= ',((R1),,L),3X,                     X
               'Operator= ',((R3),,L),                                 X
               INTO=LINE                                           @RS
         BRAS  R14,SPACE1              Single Space                @RS
         LA    R1,QUASSUTO             pass TOD clock value        @RS
         BRAS  R14,STCKCONV            convert TOD clock to decimal@RS
         STRING '    Status: ',                                        X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),           HH.MM.SS                        X
               INTO=LINE                                           @RS
         LA    R4,LINE+35                                          @RS
        #STATUS QUASSTAT,QUASACTV,'Active'                         @RS
        #STATUS QUASSTAT,QUASSUM,'Status missing'                  @RS
        #STATUS QUASSTAT,QUASSYPT,'Sysplex part.'                  @RS
        #STATUS QUASSTAT,QUASLOCL,'Single System'                  @RS
        #STATUS QUASSTAT,QUASCLUP,'Cleanup Prog.'                  @RS
         BRAS  R14,SPACE2           <- Double Space                @RS
         LA    R6,QUASLENG(R6)         next entry                  @RS
         BRCT  R7,XCFD10               do until count = 0          @RS
*endloop
XCFD20   EQU   *                                                   @RS
*
*        First query to get the number of groups
*
         IXCQUERY REQINFO=GROUP,ANSAREA=QUAHDR,ANSLEN=WKCELL1,         X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   @RS
         CHI   R15,4                   Success? RC4 okay
         JH    XCFD90                  No, error                   @RS
         L     R1,QUAHTLEN             get total length needed     @RS
         LA    R2,QUAHDR(R1)           1st byte after data         @RS
         STM   R1,R2,WKCELL1           store length, nextaddr      @RS
*
*        next query to get the whole data
*
XCFD22   EQU   *                                                   @RS
         IXCQUERY REQINFO=GROUP,ANSAREA=QUAHDR,ANSLEN=WKCELL1,         X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   @RS
         LTR   R15,R15                 Success?                    @RS
         JNZ   XCFD90                  No, error                   @RS
         STRING '  Groups',INTO=LINE                               @RS
         BRAS  R14,SPACE2              Double Space                @RS
         L     R6,QUAHSGOF             get offset                  @RS
         LA    R6,QUAHDR(R6)           point to the records        @RS
         USING QUAGRP,R6               tell assembly               @RS
         L     R7,QUAH#REC             record counter              @RS
*loop                                                              @RS
XCFD30   EQU   *                                                   @RS
         STM   R5,R7,TENWORDS          save registers
         STRING 4X,QUAGNAME,'  (',(QUAG#MEM,F,L),')',INTO=LINE
         BRAS  R14,SPACE1              Single Space                @RS
         LA    R1,QUAMLENG+32          length of member+32 user st @RS
         M     R0,QUAG#MEM             number of members
         LA    R1,QUAHLENG(,R1)        length of header
         ST    R1,WKCELL1              store length                @RS
         L     R5,WKCELL1+4            point past header           @RS
         IXCQUERY REQINFO=GROUP,GRPNAME=QUAGNAME,                      X
               ANSAREA=QUAHDR,ANSLEN=WKCELL1,                          X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   @RS
         LTR   R15,R15                 Success?                    @RS
         JNZ   XCFD90                  No, error                   @RS
         ICM   R7,B'1111',QUAH#REC     record counter              @RS
         JZ    XCFD50                  jump if null
         L     R6,QUAHSGOF             add offset                  @RS
         LA    R6,QUAHDR(R6)           point to the records        @RS
         USING QUAMEM,R6               tell assembly               @RS
*  loop                                                            @RS
XCFD40   EQU   *                                                   @RS
         STRING 6X,'Member=',QUAMNAME,                                 X
               INTO=LINE                                           @RS
         CLI   QUAMSTA1,QUAMSCRE       Created?
         JNE   *+10                    no, jump
         MVC   LINE+32(7),=C'Created'  yes, move word
         CLI   QUAMSTA1,QUAMSACT       Active?
         JNE   *+10                    no, jump
         MVC   LINE+32(6),=C'Active  ' yes, move word
         CLI   QUAMSTA1,QUAMSQUI       Quiesced?
         JNE   *+10                    no, jump
         MVC   LINE+32(8),=C'Quiesced' yes, move word
         CLI   QUAMSTA1,QUAMSFLD       Failed?
         JNE   *+10                    no, jump
         MVC   LINE+32(6),=C'Failed'   yes, move word
         STRING 'Systemname=',QUAMSYS,                                 X
               INTO=(LINE+40,NEXTLINE)
         TR    LINE,TRTPRINT           get rid of garbage        RS0803
         LA    R1,QUAMTOD              pass TOD clock value        @RS
         BRAS  R14,STCKCONV            convert TOD clock to decimal@RS
         STRING '    Status: ',                                        X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),           HH.MM.SS                        X
               INTO=(LINE+60,NEXTLINE)
         BRAS  R14,SPACE1              Single Space                @RS
         LA    R6,QUAMLENG+32(R6)      next entry                  @RS
         BRCT  R7,XCFD40               do until count = 0          @RS
*  endloop                                                         @RS
XCFD50   EQU   *                                                   @RS
         LM    R5,R7,TENWORDS          restore register            @RS
         LA    R6,QUAGLENG(R6)         next entry                  @RS
         BRCT  R7,XCFD30               do until count = 0          @RS
*endloop                                                           @RS
         BRAS  R14,BLANK1              emty line                   @RS
         J     XCFD99                  end
XCFD90   STRING '  IXCQUERY (XCF) FAILED - ',                          X
               ' Returncode=',(LRETCODE,F,L),                          X
               ' Reasoncode=',(LRSNCODE,F,L),                          X
               ' Size=',(WKCELL1,F,L),                                 X
               INTO=LINE                                           @RS
         BRAS  R14,SPACE2              Double Space                @RS
.XCFD99  ANOP
XCFD99   END_PROC                                                  @RS
         TITLE 'SHOWMVS &REL - XCF Path Data'                      +JM
*---------------------------------------------------------------------*
*                                                                     *
* Path data:                                                          *
*                                                                     *
* PATHIN   Type: CTC                                                  *
*       Local/Remote: Sysname D1/  Device 03C9/                       *
*       Status: Restarting (Unconnected)                              *
*       Path retry limit: 10  Current path retry count: 0             *
*       Cumulative number of restarts: 3                              *
*       Path max message limit: 750                                   *
*       Current number of 1K blocks of message buffer space in use: 0 *
*       Number of times max message limit reached: 0                  *
*                                                                     *
* PATHOUT  Type: CTC                                                  *
*       Local/Remote: Sysname D1/  Device 03CB/                       *
*       Status: Restarting (Unconnected)                              *
*       Path retry limit: 10  Current path retry count: 0             *
*       Cumulative number of restarts: 3                              *
*       Path max message limit: 750                                   *
*       Current number of 1K blocks of message buffer space in use: 0 *
*       Total number of signals sent: 0                               *
*       Current number of signals pending transfer: 0                 *
*       Number of signal requests satisfied while path not busy: 0    *
*       Number of signal requests satisfied by this path while busy: 0*
*       Transport Class name: DEFAULT                                 *
*                                                                     *
*   PATHIN   Type: LIST                                               *
*       Local/Remote: Sysname D1/D2                                   *
*       Status: Working                                               *
*       Path retry limit: 10  Current path retry count: 0             *
*       Cumulative number of restarts: 3                              *
*       Path max message limit: 750                                   *
*       Current number of 1K blocks of message buffer space in use: 24*
*       Number of times max message limit reached: 0                  *
*       Structure name: IXCPLEX_PATH2                                 *
*       Number of lists that remain available for use: 8              *
*       Number of other systems connected to this structure: 0        *
*       Number of list signalling paths started by this system: 0     *
*                                                                     *
* PATHOUT  Type: LIST                                                 *
*       Local/Remote: Sysname D1/D2                                   *
*       Status: Working                                               *
*       Path retry limit: 10  Current path retry count: 0             *
*       Cumulative number of restarts: 2                              *
*       Path max message limit: 750                                   *
*       Current number of 1K blocks of message buffer space in use: 28*
*       Total number of signals sent: 92448                           *
*       Current number of signals pending transfer: 0                 *
*       Number of signal requests satisfied while path not busy: 91673*
*       Number of signal requests satisfied by this path while busy: 7*
*       Transport Class name: DEFAULT                                 *
*       Structure name: IXCPLEX_PATH1                                 *
*       Number of lists that remain available for use: 9              *
*       Number of other systems connected to this structure: 0        *
*       Number of list signalling paths started by this system: 0     *
*                                                                     *
* Pending message data:                                               *
*                                                                     *
*   Device: 03CB                                                      *
*         Member token of message sending message: 020004A800000008   *
*         ASID of member sending message: 6 0006                      *
*         Home ASID that initiated message out request: 6 0006        *
*         Name of system that is target of message:                   *
*         Name of transport class: DEFAULT                            *
*         Device type: CTC  Address: 03CB                             *
*                                                                     *
* System entries data:                                                *
*                                                                     *
*   Outbound  System name: D2                                         *
*       Transport class: DEFAULT                                      *
*       * The following counts refer to this transport class          *
*       4 - Current number of paths in service                        *
*       0 - Number of times a no path condition occured               *
*       0 - Number of times a no buffer condition occured             *
*       3750 - Max number of 1K blocks of message buffer space permitt*
*       38 - Current number of 1K blocks of message buffer space in us*
*       750 - Customer defined maxmsg value. Default number of 1K bloc*
*       956 - Length of longest message that fits the buffer size     *
*       * The following values may wrap                               *
*       11904536 - Messages sent whose length exceeded the buffer size*
*       5755056 - Number of messages sent whose length fit the buffer *
*       0 - Number of messages sent whose length was smaller than buff*
*       3997673 - Messages sent whose length exceeded the buffer size *
*                                                                     *
*   Inbound   System name: D2                                         *
*       4 - Current number of paths in service                        *
*       0 - Number of times a no path condition occured               *
*       0 - Number of times a no buffer condition occured             *
*       3000 - Max number of 1K blocks of message buffer space permitt*
*       90 - Current number of 1K blocks of message buffer space in us*
*       750 - Customer defined maxmsg value. Default number of 1K bloc*
*                                                                     *
*   Local     System name: D1                                         *
*       Transport class: DEFAULT                                      *
*       * The following counts refer to this transport class          *
*       0 - Number of times a no buffer condition occured             *
*       750 - Max number of 1K blocks of message buffer space permitte*
*       0 - Current number of 1K blocks of message buffer space in use*
*       750 - Customer defined maxmsg value. Default number of 1K bloc*
*       956 - Length of longest message that fits the buffer size     *
*       * The following values may wrap                               *
*       0 - Messages sent whose length exceeded the buffer size (trans*
*       913 - Number of messages sent whose length fit the buffer size*
*       0 - Number of messages sent whose length was smaller than buff*
*       0 - Messages sent whose length exceeded the buffer size (signi*
*                                                                     *
* Source/destination data:                                            *
*                                                                     *
*     System      Group       Member              Signals    Signals  *
*     name        name        name                   Sent   Received  *
*     D2          SYSGRS      D2                   944554          9  *
*     D1          SYSGRS      D1                   953391     953391  *
*     D3          SYSGRS      D3                     8837     953382  *
*                                                                     *
* and so on                                                           *
*                                                                     *
*---------------------------------------------------------------------*
PATH00   BEGIN_PROC KW=PATH,AUTH=YES,BASEREG=YES PGSER req       RS0302
         STRING '  Path data:',INTO=LINE                         RS0500
         BRAS  R14,SPACE2              double space              RS0500
         XC    ANSAREA,ANSAREA         Clear getmain area
         BRAS  R14,WORKADDR            allocate XCF Answer Area
         LR    R3,R1                   remember getmained storage
         USING AMDAREA,R3              IXCYAMDA Answer area
         AHI   R0,-4096                prevent 0C4 on last page  RS0601
         ST    R0,AMDATLEN             try this length first
         LR    R4,R0                                             RS1200
         LA    R2,0(R3,R4)                                       RS1200
         BCTR  R2,0                                              RS1200
         PGSER R,FIX,A=AMDAREA,EA=(R2),ECB=0 FIX PAGE            RS1200
         SYSEVENT DONTSWAP             PGFIX/LRA
*
*        Find out how much storage is needed for the answer area
*
         IXCMG DATAAREA=AMDAREA,DATALEN=AMDATLEN,                      X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,                      X
               MF=(E,IXCMG,COMPLETE)
         SYSEVENT OKSWAP               undo DONTSWAP
         PGSER R,FREE,A=AMDAREA,EA=(R2),ECB=0 FREE PAGE          RS1200
         CLC   LRETCODE,=F'4'          Return code 4?
         JL    PATH1000                less, ok
         JH    PATH9020                greater than, yes
         CLC   LRSNCODE,=F'4'          Return code 4?
         JNE   PATH9020                no.
         L     R4,AMDATLEN             Load length of answer area
         AR    R4,R4                   double it
*
*        Allocate a answer area
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    PATH0004                yes, jump
         GETMAIN RU,LV=(R4),BNDRY=PAGE allocate PATH work area
         J     PATH0008
PATH0004 DS    0H
         LR    R0,R4                   Length of storage
         LA    R1,1                    LOC=ANY
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES             RS1002
PATH0008 DS    0H
         LR    R3,R1                   answer goes here
         ST    R4,AMDATLEN             Save length of answer area
         STM   R3,R4,WLM_QUACF_AREA    save addr and length
         LA    R2,0(R3,R4)
         BCTR  R2,0
         PGSER R,FIX,A=AMDAREA,EA=(R2),ECB=0 FIX PAGE
         SYSEVENT DONTSWAP             PGFIX/LRA
*
*        Retrieve IXCMG information
*
         IXCMG DATAAREA=AMDAREA,DATALEN=AMDATLEN,                      X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,                      X
               MF=(E,IXCMG,COMPLETE)
         SYSEVENT OKSWAP               undo DONTSWAP
         PGSER R,FREE,A=AMDAREA,EA=(R2),ECB=0 FREE PAGE
         CLC   LRETCODE,=F'0'          Return code 0?
         JNE   PATH9030                No.
PATH1000 DS    0H
*        STRING 'XCF - Tuning and Capacity Planning Data',INTO=LINE
*        BRAS  R14,SPACE2              Double Space
*#SNAP ADDR=AMDAREA,LENGTH=AMDAREA_LEN
         ICM   R5,B'1111',AMDA#PTH     Any path entries?
         JZ    PATH1098                no
         L     R4,AMDAOPTH             Offset to path entries
         AR    R4,R3                   Start of Path entries
         USING AMDPATH,R4              Path data entry
*delete  STRING '  Path data:',INTO=LINE   move to beginning     RS0500
*delete  BRAS  R14,SPACE2              double space              RS0500
PATH1005 DS    0H
*#SNAP ADDR=AMDPATH,LENGTH=AMDPATH_LEN
         STRING 'PATHIN ',INTO=WKCELL1
         TM    AMDPDIR,AMDPINB         Inbound path?
         JO    PATH1006                yes
         STRING 'PATHOUT',INTO=WKCELL1
PATH1006 DS    0H
         LA    R1,=CL7'none'           none
         CLC   AMDPPHDT,=A(AMHDTNA)    Hardware type - n/a
         JE    PATH1010                yes
         LA    R1,=CL7'CTC '           CTC
         CLC   AMDPPHDT,=A(AMHDTCTC)   Hardware CTC (type 1)
         JE    PATH1010                yes
         LA    R1,=CL7'CF  '           CF
         CLC   AMDPPHDT,=A(AMHDTSTR)   Hardware CF (type 2)
         JE    PATH1010                yes
         LA    R1,=CL7'LIST'           list
         CLC   AMDPPHDT,=A(AMHDTLST)   Hardware list w/n CF (type 3)
         JE    PATH1010                yes
         LA    R1,=C'Unknown'          unknown
PATH1010 DS    0H
         STRING 4X,(WKCELL1,7),'  Type: ',((R1),7),                    X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         CLC   AMDPPHDT,=A(AMHDTCTC)   Hardware CTC (type 1)
         JNE   PATH1015                no
         STRING 10X,'Local/Remote: Sysname ',                          X
               (AMDPNAME,,L),'/',(AMDPONME,,L),                        X
               '  Device ',(AMDPDEV,,L),'/',(AMDPODEV,,L),             X
               INTO=LINE
         J     PATH1018
PATH1015 DS    0H
         STRING 10X,'Local/Remote: Sysname ',                          X
               (AMDPNAME,,L),'/',(AMDPONME,,L),                        X
               INTO=LINE
PATH1018 DS    0H
         BRAS  R14,SPACE1              single space
         SR    R15,R15                 clear for IC
         BRAS  R1,PATH1024
         DC    AL1(AMDPSTRT),CL15'Starting       '
         DC    AL1(AMDPREST),CL15'Restarting     '
         DC    AL1(AMDPWORK),CL15'Working        '
         DC    AL1(AMDPSTOP),CL15'Stopping       '
         DC    AL1(AMDPLINK),CL15'Not connected  '
         DC    AL1(AMDPNOP),CL15'Not operational'
         DC    AL1(AMDPFAIL),CL15'Stop failed.   '
         DC    AL1(AMDPRBLD),CL15'Rebuilding     '
         DC    X'00',0H'0'             end of table
PATH1023 TM    AMDPFLAG,*-*            check properties
PATH1024 DS    0H
         IC    R15,0(,R1)              pick up TM mask
         EX    R15,PATH1023            test status
         JO    PATH1035                jump if on
         LA    R1,16(,R1)              Skip entry
         CLI   0(R1),0                 end of table?
         JNE   PATH1024                not yet, loop
         BRAS  R1,PATH1030
         DC    AL1(AMDPQSCG),CL15'Quiescing      '
         DC    AL1(AMDPQSCD),CL15'Quiesced       '
         DC    X'00',CL15'unknown        '
PATH1031 TM    AMDPSTA2,*-*            check properties
PATH1030 DS    0H
         IC    R15,0(,R1)              pick up TM mask
         EX    R15,PATH1031            test status
         JO    PATH1035                jump if on
         LA    R1,16(,R1)              Skip entry
         CLI   0(R1),0                 end of table?
         JNE   PATH1030                not yet, loop
PATH1035 DS    0H
         STRING 10X,'Status: ',(1(R1),15,T),INTO=LINE
         TM    AMDPFLAG,AMDPREST       Restarting
         JZ    PATH1040                no
         CLC   AMDPONME,BLANKS         remote system here
         JNE   PATH1040                yes
         CLC   AMDPODEV,BLANKS         remote device here
         JNE   PATH1040                yes
         STRING (LINE,,T),' (Unconnected)',INTO=LINE
PATH1040 DS    0H
         BRAS  R14,SPACE1              single space
         STRING 10X,'Path retry limit: ',                              X
               (AMDPMRET,F,L),                                         X
               '  Current path retry count: ',(AMDP#RET,F,L),          X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Cumulative number of restarts: ',(AMDP#RST,F,L),  X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Path max message limit: ',                        X
               (AMDPMXMS,F,L),                                         X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         CLC   AMDPPHDT,=A(AMHDTSTR)   Hardware type CF (type 2)
         JE    PATH1050                yes
         STRING 10X,'Current number of 1K blocks of message buffer spacX
               e in use: ',(AMDP#USE,F,L),                             X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         TM    AMDPDIR,AMDPINB         Inbound path?
         JO    PATH1045                yes
         STRING 10X,'Total number of signals sent: ',(AMDP#SIG,F,L),   X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Current number of signals pending transfer: ',    X
               (AMDP#ACT,F,L),                                         X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Number of signal requests satisfied while path notX
                busy: ',                                               X
               (AMDP#SUS,F,L),                                         X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Number of signal requests satisfied by this path wX
               hile busy: ',(AMDP#APP,F,L),                            X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         J     PATH1050
PATH1045 DS    0H
         STRING 10X,'Number of times max message limit reached: ',     X
               (AMDP#IBR,F,L),                                         X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Average I/O transfer time: ',(AMDPIOXT,F,L),      X
               INTO=LINE                                         RS0204
         BRAS  R14,SPACE1              single space              RS0204
PATH1050 DS    0H
         TM    AMDPDIR,AMDPOUTB        outbound path?
         JZ    PATH1055                no
         STRING 10X,'Transport Class name: ',AMDPTCN,INTO=LINE
         BRAS  R14,SPACE1              single space
PATH1055 DS    0H
         CLC   AMDPPHDT,=A(AMHDTSTR)   Hardware type lower than 2
         JL    PATH1060                yes
         CLC   AMDPPHDT,=A(AMHDTLST)   Hardware type greater than 3
         JH    PATH1060                yes
         LA    R6,AMDPPHDD             Path hardware descriptor
         USING AMSTRHDD,R6
         STRING 10X,'Structure name: ',AMSTRNAM,                       X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Number of lists that remain available for use: ', X
               (AMSTR#AV,F,L),                                         X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Number of other systems connected to this structurX
               e: ',(AMSTR#OD,F,L),                                    X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Number of list signalling paths started by this syX
               stem: ',(AMSTR#LP,F,L),                                 X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         DROP  R6
PATH1060 DS    0H
         BRAS  R14,BLANK1              double space
         AH    R4,AMDPLENT             skip this entry
         BRCT  R5,PATH1005
         J     PATH2000
         DROP  R4
PATH1098 DS    0H
         STRING 4X,'No path data',INTO=LINE    was 10X           RS0500
         BRAS  R14,SPACE2              double space
PATH2000 DS    0H
         STRING '  Pending message data:',INTO=LINE              RS0500
         BRAS  R14,SPACE2              double space              RS0500
         ICM   R5,B'1111',AMDA#MPE     Any pending messages?
         JZ    PATH2098                no
         L     R4,AMDAOMPE             Offset to pending messages
         AR    R4,R3                   Start of Path entries
         USING AMDMPEND,R4             Pending messages entry
*delete  STRING '  Pending message data:',INTO=LINE              RS0500
*delete  BRAS  R14,SPACE2              double space              RS0500
PATH2010 DS    0H
*#SNAP ADDR=AMDMPEND,LENGTH=AMDMPEND_LEN
         STRING '    Device: ',AMDMDEVN,INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Member token of message sending message: ',       X
               (AMDMTOKN,,X),INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'ASID of member sending message: ',                X
               (AMDMASID,H,L),1X,      ASID (decimal)                  X
               (AMDMASID,,X),          ASID (hex)                      X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Home ASID that initiated message out request: ',  X
               (AMDMHOME,H,L),1X,      ASID (decimal)                  X
               (AMDMHOME,,X),          ASID (hex)                      X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Name of system that is target of message: ',      X
               AMDMTSNM,                                               X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Name of transport class: ',                       X
               AMDMTCN,                                                X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         CLC   AMDMPHDT,=A(AMHDTNA)    Hardware type - n/a
         JE    PATH2040                yes
         LA    R6,AMDMPHDD             Path hardware descriptor
         CLC   AMDMPHDT,=A(AMHDTCTC)   Hardware type CTC
         JE    PATH2020                yes
         CLC   AMDMPHDT,=A(AMHDTSTR)   Hardware type CF
         JE    PATH2030                yes
         CLC   AMDMPHDT,=A(AMHDTLST)   Hardware type list w/n CF
         JE    PATH2030                yes
PATH2020 DS    0H
         USING AMCTCHDD,R6
         STRING 10X,'Device type: CTC  Address: ',AMCTCDEV,INTO=LINE
         BRAS  R14,SPACE1               single space
         J     PATH2040
         DROP  R6
PATH2030 DS    0H
         USING AMSTRHDD,R6
         STRING 10X,'Structure name: ',AMSTRNAM,                       X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Number of lists that remain available for use: ', X
               (AMSTR#AV,F,L),                                         X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Number of other systems connected to this structurX
               e: ',(AMSTR#AV,F,L),                                    X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'Number of list signalling paths started by this syX
               stem: ',(AMSTR#LP,F,L),                                 X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         DROP  R6
PATH2040 DS    0H
         BRAS  R14,BLANK1              double space
         AH    R4,AMDMLENT             skip this entry
         BRCT  R5,PATH2010
         J     PATH3000
         DROP  R4
PATH2098 DS    0H
         STRING 4X,'No pending messages',INTO=LINE    was 10X    RS0500
         BRAS  R14,SPACE2              Double space
PATH3000 DS    0H
         ICM   R5,B'1111',AMDA#SYS     Any system entries?
         JZ    PATH3030                no
         L     R4,AMDAOSYS             Offset to system entries
         AR    R4,R3                   Start to system entries
         USING AMDSYS,R4               System entry
         STRING '  System entries data:',INTO=LINE
         BRAS  R14,SPACE2              double space
PATH3005 DS     0H
*#SNAP ADDR=AMDSYS,LENGTH=AMDSYS_LEN
         LA    R1,=CL8'Inbound '
         TM    AMDSYDIR,AMDSYIN        Inbound
         JO    PATH3010                yes
         LA    R1,=CL8'Outbound'
         TM    AMDSYDIR,AMDSYOUT       Outbound
         JO    PATH3010                yes
         LA    R1,=CL8'Local   '
         TM    AMDSYDIR,AMDSYLCL       Local
         JO    PATH3010                yes
         LA    R1,=CL8'unknown '
PATH3010 DS    0H
         STRING 4X,((R1),8),'  System name: ',AMDSYNME,INTO=LINE
         BRAS  R14,SPACE1              single space
         TM    AMDSYDIR,AMDSYIN        Inbound
         JO    PATH3015                yes
         STRING 10X,'Transport class: ',AMDSYTCN,                      X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'* The following counts refer to this transport claX
               ss',INTO=LINE
         BRAS  R14,SPACE1              single space
PATH3015 DS    0H
         TM    AMDSYDIR,AMDSYLCL       Local
         JO    PATH3020               yes
         STRING 10X,(AMDSYPTH,F,L),                                    X
               ' - Current number of paths in service',                X
               INTO=LINE
         BRAS  R14,SPACE1             single space
         STRING 10X,(AMDSYNOP,F,L),                                    X
               ' - Number of times a no path condition occured',       X
               INTO=LINE
         BRAS  R14,SPACE1             single space
PATH3020 DS    0H                     outbound
         STRING 10X,(AMDSYBSY,F,L),                                    X
               ' - Number of times a no buffer condition occured',     X
               INTO=LINE
         BRAS  R14,SPACE1             single space
         STRING 10X,(AMDSYMXB,F,L),                                    X
               ' - Max number of 1K blocks of message buffer space permx
               itted for system',                                      X
               INTO=LINE
         BRAS  R14,SPACE1             single space
         STRING 10X,(AMDSYUSE,F,L),                                    X
               ' - Current number of 1K blocks of message buffer space X
               in use on system',                                      X
               INTO=LINE
         BRAS  R14,SPACE1             single space
         STRING 10X,(AMDSYSMX,F,L),                                    X
               ' - Customer defined maxmsg value. Default number of 1K x
               blocks of message buffer space',                        X
               INTO=LINE
         BRAS  R14,SPACE1             single space
         TM    AMDSYDIR,AMDSYIN        Inbound
         JO    PATH3025                yes
         STRING 10X,(AMDSYTCL,F,L),                                    X
               ' - Length of longest message that fits the buffer size'X
               ,INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,'* The following values may wrap',INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,(AMDSYBIG,F,L),                                    X
               ' - Messages sent whose length exceeded the buffer size X
               (trans class)',                                         X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,(AMDSYFIT,F,L),                                    X
               ' - Number of messages sent whose length fit the buffer X
               size',                                                  X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,(AMDSYSML,F,L),                                    X
               ' - Number of messages sent whose length was smaller thaX
               n buffer size',                                         X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING 10X,(AMDSYOVR,F,L),                                    X
               ' - Messages sent whose length exceeded the buffer size X
               (signal service)',                                      X
               INTO=LINE
         BRAS  R14,SPACE1              single space
PATH3025 DS    0H
         BRAS  R14,BLANK1              double space
         AH    R4,AMDSYLEN             skip this entry
         BRCT  R5,PATH3005
         J     PATH4000
         DROP  R4
PATH3030 DS    0H
         STRING 10X,'No system entries',INTO=LINE
         BRAS  R14,SPACE2              Double space
PATH4000 DS    0H
         ICM   R5,B'1111',AMDA#SD      Any source/destinations?
         JZ    PATH4098                no
         L     R4,AMDAOSD              Offset to source/destination
         AR    R4,R3                   Start of source/destination data
         USING AMDSD,R4                source/destination data entries
         STRING '  Source/destination data:',INTO=LINE
         BRAS  R14,SPACE2              double space
         STRING 6X,'System      Group       Member              SignalsX
                   Signals',                                           X
               INTO=LINE                                        +JM0199
         BRAS  R14,SPACE1              single space
         STRING 6X,'name        name        name                   SentX
                  Received',                                           X
               INTO=LINE                                        +JM0199
         BRAS  R14,SPACE1              single space             +JM0199
PATH4010 DS     0H                                              +JM0199
         STRING 6X,AMDSSNAM,                                           X
               4X,AMDSGRP,                                             X
               4X,AMDSMEM,                                             X
               4X,(AMDSSCNT,F),                                        X
               4X,(AMDSRCNT,F),                                        X
               INTO=LINE                                        +JM0199
         BRAS  R14,SPACE1              single space             +JM0199
         AH    R4,AMDSLENT             skip this entry          +JM0199
         BRCT  R5,PATH4010                                      +JM0199
         BRAS  R14,BLANK1              blank line               +JM0199
         J     PATH9000                                         +JM0199
         DROP  R4                                               +JM0199
PATH4098 DS    0H
         STRING 10X,'No source/destination entries',INTO=LINE
         BRAS  R14,SPACE2              double space
PATH9000 DS    0H
         LM    R1,R2,WLM_QUACF_AREA    load addr and length
         LTR   R1,R1                   did we do a getmain
         JZ    PATH99                  no
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    PATH9010                yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free IXCM work area
         J     PATH99
PATH9010 DS    0H
         LR    R0,R2                   length for FREEMAIN
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES Free IXCM workarea
         J     PATH99
PATH9020 DS    0H
         STRING '  IXCMG-1 FAILED - ',                                 X
               ' Returncode=',(LRETCODE,F,L),                          X
               ' Reasoncode=',(LRSNCODE,F,L),                          X
               ' Size=',(AMDATLEN,F,L),                                X
               INTO=LINE
         BRAS  R14,SPACE2          <== double space
         J     PATH99
PATH9030 DS    0H
         STRING '  IXCMG-2 FAILED - ',                                 X
               ' Returncode=',(LRETCODE,F,L),                          X
               ' Reasoncode=',(LRSNCODE,F,L),                          X
               ' Size=',(AMDATLEN,F,L),                                X
               INTO=LINE
         BRAS  R14,SPACE2              double space
         J    PATH99
.PATH99  ANOP
PATH99   END_PROC
         TITLE 'SHOWMVS &REL - Coupling Facility Data'             +DL
*---------------------------------------------------------------------*
*                                                                  +DL*
*Coupling Facility Data                                            +DL*
*                                                                  +DL*
*   CFLevel supported by operating system: 4                       +DL*
*                                                                  +DL*
*   CFRM active policy data                                        +DL*
*                                                                  +DL*
*      Policy Name                : CFRMPOL0                       +DL*
*      Time of last update        : 1998-06-25   10.02.22          +DL*
*      Time policy was activated                                   +DL*
*         via operator command    : 1998-06-25   10.16.50          +DL*
*                                                                  +DL*
*   CFName: CFT101                                                 +DL*
*      Coupling Facility          : 009672.A10.HTC.01.000000000133 +DL*
*                                   Partition: 8      CPCID: 00    +DL*
*                                   Storage is volatile/nonvolatile+DL*
*      CF architected functional                                   +DL*
*         level                   : 2                              +DL*
*                                                                  +DL*
*      CF devices       CU number : 0FFA                           +DL*
*                   Device number : 0FEE                           +DL*
*                   Device number : 0FEF                           +DL*
*                                                                  +DL*
*      Total facility space size  : 59392 k                        +DL*
*      Total free space size      : 50176 k                        +DL*
*      Total dumping space size   : 4096 k                         +DL*
*      Storage increment size     : 256 k                          +DL*
*                                                                  +DL*
*      Structures                                                  +DL*
*                                                                  +DL*
*      StructureName     Type   Status    Size(k)  Max Size(k)  Min Si*
*                                                                     *
*      ISTGENERIC        List   Active      1024        2048         5*
*      DSNDB2M_GBP0      Cache  Rebuild     2048        3072         5*
*                                                                  +DL*
*---------------------------------------------------------------------*
CFD00    BEGIN_PROC KW=CFD,AUTH=YES,BASEREG=YES  Getmain require RS0302
         STRING '&TITLEPFX.Coupling Facility Data',INTO=LINE       +DL
         BRAS  R14,SPACE2              Double Space                +DL
         IXCQUERY REQINFO=COUPLE,CFLEVEL=XCFLEVEL                  +DL
         STRING '   CFLevel supported by operating system: ',      +DL X
               (XCFLEVEL,F,L),INTO=LINE                            +DL
         BRAS  R14,SPACE2              Double Space                +DL
*        Allocate a work area for QUAHDR + QUACF                   +DL
         LHI   R2,QUAHLENG+(QUACFLENG*32) Length of Anwer-Area   RS1201
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                   +DL
         JO    CFD01                   yes, jump                   +DL
         GETMAIN RU,LV=(R2)                                        +DL
         J     CFD02                                               +DL
CFD01    DS    0H                                                  +DL
         LR    R0,R2                   Length of storage           +DL
         LA    R1,1                    LOC=ANY                     +DL
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES             RS1002
CFD02    DS    0H                                                  +DL
         STM   R1,R2,WLM_QUACF_AREA    addr, length              JM0900
         LR    R3,R1                   remember getmained storage  +DL
         USING QUAHDR,R3               tell assembly               +DL
         IXCQUERY REQINFO=CF,CFNAME=NO_CFNAME,                     +DL X
               ANSAREA=QUAHDR,ANSLEN=ANSLEN,                       +DL X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   +DL
         CH    R0,=Y(QUAARSNNOCFRMDSN) No CFRM                     +XX
         JE    CFD97                   No
         CH    R0,=Y(QUAARSNNOCFRMPOL) No CF activated           RS1201
         JE    CFD97                   No
         CLC   LRETCODE,=F'4'          Return code >4?           RS1201
         JH    CFD90                   Yes, display RC/RSN       RS1201
         ICM   R4,B'1111',QUAH#REC     check records             RS1201
         JNZ   CFD05                     Process recorde         RS1201
*        LTR   R4,R4                   is there a CF record        +DL
*        JNZ   CFD05                   yes, skip                   +DL
         STRING '   No Coupling Facility entries were provided',   +DL X
               INTO=LINE                                           +DL
         J     CFD95                   nothing to do               +DL
CFD05    DS    0H                                                  +DL
         L     R4,QUAHSGOF             offset from QUAHDR to 1. REC+DL
         LA    R4,QUAHDR(R4)           point to first CF record    +DL
         USING QUACF,R4                tell assembly               +DL
         L     R2,QUAH#REC             record counter              +DL
         STRING '   CFRM active policy data',INTO=LINE             +DL
         BRAS  R14,SPACE2              Double Space                +DL
         STRING '      Policy Name                : ',QUACFPOLNAME,    X
               INTO=LINE                                           +DL
         BRAS  R14,SPACE1              Single Space                +DL
         LA    R1,QUACFUPDTIME         pass TOD clock value        +DL
         BRAS  R14,STCKCONV            convert TOD clock to decimal+DL
         STRING '      Time of last update        : ',             +DL X
               STCKDATE,2X,            YYYY-MM-DD                  +DL X
               (STCKTIME,8),           HH.MM.SS                    +DL X
               INTO=LINE                                           +DL
         BRAS  R14,SPACE1              Single Space                +DL
         STRING '      Time policy was activated   ',INTO=LINE     +DL
         BRAS  R14,SPACE1              Single Space                +DL
         LA    R1,QUACFSETTIME         pass TOD clock value        +DL
         BRAS  R14,STCKCONV            convert TOD clock to decimal+DL
         STRING '         via operator command    : ',                 X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),           HH.MM.SS                        X
               INTO=LINE                                           +DL
         BRAS  R14,SPACE2              Double Space                +DL
*loop                                  Loop through the CFs        +DL
CFD10    DS    0H                                                  +DL
*        #SNAP ADDR=(R4),LENGTH=QUACFLENG        debug code
         BRAS  R14,WORKADDR            allocate XES Answer Area    +DL
         STM   R0,R1,WKCELL1           store length                +DL
         LR    R5,R1                   remember getmained storage  +DL
         USING IXLYAMDAREA,R5          tell assembly               +DL
         IXLMG DATAAREA=IXLYAMDAREA,DATALEN=WKCELL1,                   X
               CFNAME=QUACFNAME,HWSTATISTICS=YES,                      X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXLMGWK)    +DL
         LTR   R15,R15                 Success?                    +DL
         JNZ   CFD93                   No, error                   +DL
*
         STRING '   CFName: ',QUACFNAME,INTO=LINE               +DL0199
         BRAS  R14,SPACE1              Single Space             +DL0199
         ICM   R6,B'1111',IXLYAMDAREA_CFENT@
         JNZ   CFD12     zero, if not connected from this system+DL0199
         USING IXLYAMDCF,R6            tell assembly               +DL
&X SETC 'The running system is not connected to this coupling facility'
         STRING 12X,'&X',INTO=LINE
         BRAS  R14,SPACE2              Double Space             +DL0199
         J     CFD50                   try next entry           +DL0199
CFD12    DS    0H                                               +DL0199
*        #SNAP ADDR=(R6),LENGTH=IXLYAMDCF_LEN    debug code
         LA    R7,IXLYAMDCF_ND         addr of Hardware Node Descr.+DL
         USING NDE,R7                  tell assembly               +DL
         STRING '      Coupling Facility          : ',             +DL X
               NDETYPE,'.',NDEMODEL,'.',NDEMFG,'.',                +DL X
               NDEPLANT,'.',NDESEQUENCE,                           +DL X
               INTO=LINE                                           +DL
         BRAS  R14,SPACE1              Single Space                +DL
         STRING 35X,'Partition: ',(NDEPARTITION,FL1,L),            +DL X
               6X,'CPCID: ',(NDECPCID,1,X),INTO=LINE               +DL
         BRAS  R14,SPACE1              Single Space                +DL
         STRING 35X,'Storage is volatile ',INTO=LINE               +DL
         TM    IXLYAMDCF_FLAGS,IXLYAMDCF_VOLATILE volatile storage?+DL
         JO    CFD15                   yes, skip                   +DL
         STRING 'nonvolatile',INTO=LINE_CF_NV                      +DL
LINE_CF_NV    EQU LINE+46,11           nonvolatile storage         +DL
LINE_STR_TTY  EQU LINE+24,5            Structure Type              +DL
LINE_STR_STAT EQU LINE+31,7            Structure Status            +DL
LINE_STR_SIZE EQU LINE+40,7            Structure Size              +DL
LINE_STR_MXSZ EQU LINE+52,7            Structure Max Size          +DL
LINE_STR_MISZ EQU LINE+65,7            Structure Min Size          +DL
CFD15    DS    0H                                                  +DL
         BRAS  R14,SPACE1              Single Space                +DL
         DROP  R7                                                  +DL
         STRING '      CF architected functional',INTO=LINE        +DL
         BRAS  R14,SPACE1              Single Space                +DL
         STRING '         level                   : ',             +DL X
               (IXLYAMDCF_CFLEVEL,F,L),INTO=LINE                   +DL
         BRAS  R14,SPACE2              Double Space                +DL
         STRING '      CF devices       CU number : ',             +DL X
               (IXLYAMDCF_CUID,2,X),INTO=LINE                      +DL
         BRAS  R14,SPACE1              Single Space              RS0803
         ICM   R7,B'1111',IXLYAMDCF_SC@ addr of 1. subchannel entRS0803
         JZ    CFD25                                             RS0803
         USING IXLYAMDSC,R7                                        +DL
         AIF   (NOT D'CVTH7705).CFD20_E z/OS R2?                 RS0803
         TM    HBB7705,L'HBB7705       running on z/OS R2        RS0803
         JZ    CFD20_E                 no, jump                  RS0803
         ST    R6,WKCELL1              Save R6                   RS0803
         LHI   R6,8                                              RS0803
CFD20    DS    0H                                                  +DL
         CLI   IXLYAMDSC_CHPIDS,X'FF'  Not used                  RS0803
         JE    CFD20_N                                           RS0803
         CLI   IXLYAMDSC_CHPIDSTYPE,X'00' Not used               RS0803
         JE    CFD20_N                                           RS0803
         IC    R0,IXLYAMDSC_CHPIDS                               RS0803
         STH   R0,WKCELL2                                        RS0803
         IOSCHPD CHPID=WKCELL2,        Get path                        X
               ACRONYM=WKCELL3,                                        X
               MF=(E,WORK256+50,COMPLETE)                       RS0803
         LR    R1,R15               debug code
         STRING 28X,'Path : ',(IXLYAMDSC_CHPIDS,1,X),                  X
               ' Type : ',(IXLYAMDSC_CHPIDSTYPE,1,X),                  X
               ' Acronym : ',(WKCELL3,5),INTO=LINE               RS0803
         BRAS  R14,SPACE1              Single Space              RS0803
CFD20_N  DS    0H                                                RS0803
         LA    R7,1(R7)                Next CHPID                RS0803
         BRCT  R6,CFD20                do until count = 0        RS0803
*endloop                               Loop through the 8 bytes  RS0803
         BRAS  R14,BLANK1              Empty line                RS0803
         L     R6,WKCELL1              Restore R6                RS0803
.CFD20_E ANOP
CFD20_E  DS    0H
         ICM   R7,B'1111',IXLYAMDCF_SC@ addr of 1. subchannel entRS0803
         JZ    CFD25                                             RS0803
         USING IXLYAMDSC,R7                                        +DL
*loop                                  Loop through the SCs        +DL
CFD21    DS    0H                                                  +DL
*        #SNAP ADDR=(R7),LENGTH=IXLYAMDSSCC_LEN  debug code      RS0803
         STRING 19X,'Device number : ',(IXLYAMDSC_SCDEVICE,2,X),       X
               ' Subchannel : ',(IXLYAMDSC_SCNUMBER,2,X),              X
               ' Status : ',INTO=LINE                            RS0803
         ST    R4,WKCELL1              Save R4
         LA    R4,LINE+0(R15)                                    RS0803
        #STATUS IXLYAMDSC_SUBCH_STATUS,IXLYAMDSC_NOTOPERATIONAL,       X
               'Not Operational'                                 RS0803
        #STATUS IXLYAMDSC_SUBCH_STATUS,IXLYAMDSC_NOTINUSE,             X
               'Not used'                                        RS0803
        #STATUS IXLYAMDSC_SUBCH_STATUS,IXLYAMDSC_ACTIVE,               X
               'Active'                                          RS0803
         BRAS  R14,SPACE1              Single Space              RS0803
         L     R4,WKCELL1              Restore R4
         ICM   R7,B'1111',IXLYAMDSC_SCNEXT addr of next STR entryRS0803
         JNZ   CFD21                   loop if present             +DL
*endloop                               Loop through the SCs        +DL
         DROP  R7                                                  +DL
CFD25    DS    0H                                                  +DL
         BRAS  R14,BLANK1              Double Space                +JM
         L     R1,IXLYAMDCF_TS         number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING '      Total facility space size  : ',             +DL X
               ((R1),,L),' k',INTO=LINE                            +DL
         BRAS  R14,SPACE1              Single Space                +DL
         L     R1,IXLYAMDCF_FS         number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING '      Total free space size      : ',             +DL X
               ((R1),,L),' k',INTO=LINE                            +DL
         BRAS  R14,SPACE1              Single Space                +DL
         L     R1,IXLYAMDCF_TDS        number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING '      Total dumping space size   : ',             +DL X
               ((R1),,L),' k',INTO=LINE                            +DL
         BRAS  R14,SPACE1              Single Space                +DL
         XR    R1,R1                                               +DL
         LH    R1,IXLYAMDCF_STGI       number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING '      Storage increment size     : ',             +DL X
               ((R1),,L),' k',INTO=LINE                            +DL
         BRAS  R14,SPACE2              Double Space                +DL
         STRING 6X,'Structures',INTO=LINE                          +DL
         BRAS  R14,SPACE2              Double Space                +DL
         L     R7,IXLYAMDCF_STR@       addr of first structure entr+DL
         STRING 6X,'StructureName     Type   Status    Size(k)  Max ', X
               'Size(k)  Min Size(k)',INTO=LINE                    +DL
         BRAS  R14,SPACE2              Single Space                +DL
*loop                                  Loop through the STRs       +DL
CFD30    DS    0H
*        DROP  R7                                                  +JM
         LTR   R7,R7                   is there a STR entry?       +DL
         JZ    CFD50                   no, skip                    +DL
         CLI   0(R7),X'21'             list/lock structure?        +DL
         JE    CFD35                   yes
         CLI   0(R7),X'22'             cache structure?            +DL
         JE    CFD40                   yes
         STRING 6X,'Unknown CF Structure Type : ',((R7),1,X),      +DL X
               INTO=LINE                                           +DL
         BRAS  R14,SPACE1              Single Space                +DL
CFD35    DS    0H
* list/lock structure                                              +DL
         USING IXLYAMDSTRL,R7                                      +DL
         STRING 6X,IXLYAMDSTRL_STRNAME,INTO=LINE                   +DL
         STRING 'List ',INTO=LINE_STR_TTY                          +DL
         CLI   IXLYAMDSTRL_TTY,IXLYAMDA_LIST list structure?       +DL
         JE    CFD36                   yes, skip
         STRING 'Lock ',INTO=LINE_STR_TTY                          +DL
CFD36    DS    0H                                                  +DL
         STRING 'Active ',INTO=LINE_STR_STAT                       +DL
         AIF   (NOT D'CVTH6603).CFD37
         TM    IXLYAMDSTRL_TTY_STATUS,IXLYAMDSTRL_RBLDVALID        +DL
         JNO   CFD37                   STR rebuild indicat. not valid
         TM    IXLYAMDSTRL_RBLDSTATUS,IXLYAMDSTRL_STRINREBLD       +DL
         JNO   CFD37                   STR not in rebuild          +DL
         STRING 'Rebuild',INTO=LINE_STR_STAT                       +DL
CFD37    DS    0H                                                  +DL
.CFD37   ANOP
         L     R1,IXLYAMDSTRL_SS       number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING ((R1),,R),INTO=LINE_STR_SIZE                       +DL
         L     R1,IXLYAMDSTRL_MSS      number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING ((R1),,R),INTO=LINE_STR_MXSZ                       +DL
         L     R1,IXLYAMDSTRL_MINSS    number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING ((R1),,R),INTO=LINE_STR_MISZ                       +DL
         BRAS  R14,SPACE1              Single Space                +DL
         L     R7,IXLYAMDSTRL_STRNEXT  addr of next STR entry      +DL
         J     CFD30                                               +DL
CFD40    DS    0H                                                  +DL
* cache structure                                                  +DL
         USING IXLYAMDSTRC,R7                                      +DL
         STRING 6X,IXLYAMDSTRC_STRNAME,INTO=LINE                   +DL
         STRING 'Cache',INTO=LINE_STR_TTY                          +DL
         STRING 'Active ',INTO=LINE_STR_STAT                       +DL
         AIF   (NOT D'CVTH6603).CFD47
         TM    IXLYAMDSTRC_TTY_STATUS,IXLYAMDSTRC_RBLDVALID        +DL
         JNO   CFD47                   STR rebuild indicat. not valid
         TM    IXLYAMDSTRC_RBLDSTATUS,IXLYAMDSTRC_STRINREBLD       +DL
         JNO   CFD47                   STR not in rebuild          +DL
         STRING 'Rebuild',INTO=LINE_STR_STAT                       +DL
CFD47    DS    0H                                                  +DL
.CFD47   ANOP
         L     R1,IXLYAMDSTRC_SS       number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING ((R1),,R),INTO=LINE_STR_SIZE                       +DL
         L     R1,IXLYAMDSTRC_MSS      number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING ((R1),,R),INTO=LINE_STR_MXSZ                       +DL
         L     R1,IXLYAMDSTRC_MINSS    number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING ((R1),,R),INTO=LINE_STR_MISZ                       +DL
         BRAS  R14,SPACE1              Single Space                +DL
         L     R7,IXLYAMDSTRC_STRNEXT  addr of next STR entry      +DL
         J     CFD30                                               +DL
*endloop                               Loop through the STRs       +DL
CFD50    DS    0H                                                  +DL
         BRAS  R14,BLANK1              Double Space                +JM
         LA    R4,QUACFLENG(R4)        next entry                  +DL
         BRCT  R2,CFD10                do until count = 0          +DL
         J     CFD97                                               +JM
*endloop                               Loop through the CFs        +DL
CFD90    STRING '  IXCQUERY (CFD) FAILED - ',                    RS1201X
               ' Returncode=',(LRETCODE,F,L),                      +DL X
               ' Reasoncode=',(LRSNCODE,F,L),                      +DL X
               ' Size=',(WLM_QUACF_AREA,F,L),                    RS1201X
               INTO=LINE                                           +DL
         J     CFD95                                               +DL
CFD93    STRING '  IXLMG    FAILED - ',                            +DL X
               ' Returncode=',(LRETCODE,F,L),                      +DL X
               ' Reasoncode=',(LRSNCODE,F,L),                      +DL X
               ' Size=',(WKCELL1,F,L),                             +DL X
               INTO=LINE                                           +DL
CFD95    DS    0H                                                  +DL
         BRAS  R14,SPACE2              Double Space                +XX
CFD97    DS    0H                                                  +XX
*        Free work area for QUAHDR + QUACF                         +DL
         LM    R1,R2,WLM_QUACF_AREA    addr,length               JM0900
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                   +DL
         JO    CFD98                   yes, jump                   +DL
         FREEMAIN RU,LV=(R2),A=(R1)    free work area              +DL
         J     CFD99                                               +DL
CFD98    DS    0H                                                  +DL
         LR    R0,R2                   length for FREEMAIN         +DL
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES Free work area +DL
         J     CFD99                                               +DL
.CFD99   ANOP                                                      +DL
CFD99    END_PROC                                                  +DL
         TITLE 'SHOWMVS &REL - External Timer information'         +JM
*---------------------------------------------------------------------*
*                                                                     *
*External Time Reference (ETR) Data:                                  *
*                                                                     *
*  Synchronization Mode: ETR                                          *
*                                                                     *
*  Time of last update: 1998-11-15  20.18.05                          *
*                                                                     *
*  Port Information:                                                  *
*                                                                     *
*    The active port is tuned                                         *
*                                                                     *
*    ETR attached to a High Availability Configuration                *
*                                                                     *
*  CPC port 0: Operational  Enabled  Active                           *
*              Net id: 00  ETR id: 00  ETR Port: 04                   *
*                                                                     *
*  CPC port 1: Operational  Enabled                                   *
*              Net id: 00  ETR id: 01  ETR Port: 04                   *
*                                                                     *
*---------------------------------------------------------------------*
ETR00    BEGIN_PROC KW=ETR,BASEREG=NO                            RS0302
         AIF   (NOT D'CVTH6603).ETR99
         TM    HBB6603,L'HBB6603       running on OS390 R3 ?
         JZ    ETR99                   no, exit
         LA    R5,TENWORDS             output area
         USING ETRI,R5
         ST    R5,WKCELL1
         IEAMETR OUTADDR=WKCELL1,MF=(E,ETRAREA,COMPLETE)
* 00     ETR status and port data was successfully obtained.
* 04     ETR status information is available, but port data is not.
* 08     No status or port data is available.
* 0C     The parameter list is not in the user's primary address space.
         CHI   R15,8                   Bad param list?
         JH    ETR99                   Yes
         ST    R15,WKCELL1             Save for later
         STRING '&TITLEPFX.External Time Reference (ETR) Data:',       XE
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  Synchronization Mode:',INTO=LINE
         LA    R4,LINE+1(R15)
         TM    ETRIIMAGE,ETRIETR       ETR mode?
         JZ    ETR01                   No.
         STRING (LINE,,T),' ETR',INTO=LINE
         J     ETR04
ETR01    DS    0H
         TM    ETRIIMAGE,ETRILOCAL     LOCAL
         JZ    ETR02                   No.
         STRING (LINE,,T),' LOCAL',INTO=LINE
         J     ETR04
ETR02    DS    0H
         TM    ETRIIMAGE,ETRISIMETR    SIMETR?
         JZ    ETR04                   No.
         STRING (LINE,,T),' SIMETR',INTO=LINE
ETR03    DS    0H
         TM    ETRIIMAGE,ETRINOTINSTALLED ETR installed?
         JZ    ETR04                   No.
         STRING (LINE,,T),' ETR not installed',INTO=LINE
ETR04    DS    0H
         BRAS  R14,SPACE2              Double Space
         TM    ETRIIMAGE,ETRINOTINSTALLED ETR installed?
         JO    ETR99                   No.
         CLC   WKCELL1,=F'8'           Port info?
         JE    ETR10                   no
         TM    ETRIIMAGE,ETRISIMETR    SIMETR?
         JZ    ETR20                   No
         STRING '    SIMETR port id: ',(ETRISIMETRID,,X),INTO=LINE
         BRAS  R14,SPACE2              Double space
         J     ETR20
ETR10    DS    0H
         STRING '  No status or port data is available',INTO=LINE
         BRAS  R14,SPACE2              Double space
ETR20    DS    0H
         LA    R1,ETRITMSTMP           pass TOD clock value
         BRAS  R14,STCKCONV            convert TOD clock to decimal
         STRING '  Time of last update: ',                             X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),           HH.MM.SS                        X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         CLC   WKCELL1,=F'4'           Port info?
         JH    ETR40
         STRING '  Port Information:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         TM    ETRIIMAGE,ETRITUNED     Tuned port
         JZ    ETR30                   No
         STRING '    The active port is tuned',INTO=LINE
         BRAS  R14,SPACE2              Double space
ETR30    DS    0H
         TM    ETRIIMAGE,ETRICPLD      High Ava Config
         JZ    ETR40                   No
         STRING '    ETR attached to a High Availability Configuration'X
               ,INTO=LINE
         BRAS  R14,SPACE2              Double space
ETR40    DS    0H
         STRING '  CPC port 0: ',INTO=LINE
         LA    R4,LINE+0(R15)
        #STATUS ETRIP0FLAGS,ETRIP0OPER,'Operational '
        #STATUS ETRIP0FLAGS,ETRIP0ENABLED,'Enabled '
        #STATUS ETRIP0FLAGS,ETRIP0ACTIVE,'Active'
         BRAS  R14,SPACE1              Single Space
         STRING 14X,'Net id: ',(ETRIP0NETID,,X),                       X
               '  ETR id: ',(ETRIP0ETRID,,X),                          X
               '  ETR Port: ',(ETRIP0PORTN0,,X),INTO=LINE
         BRAS  R14,SPACE2              Double space
         STRING '  CPC port 1: ',INTO=LINE
         LA    R4,LINE+0(R15)
        #STATUS ETRIP1FLAGS,ETRIP0OPER,'Operational '
        #STATUS ETRIP1FLAGS,ETRIP0ENABLED,'Enabled '
        #STATUS ETRIP1FLAGS,ETRIP0ACTIVE,'Active'
         BRAS  R14,SPACE1              Single space
         STRING 14X,'Net id: ',(ETRIP1NETID,,X),                       X
               '  ETR id: ',(ETRIP1ETRID,,X),                          X
               '  ETR Port: ',(ETRIP1PORTN0,,X),INTO=LINE
         BRAS  R14,SPACE2              Double space
.ETR99   ANOP
ETR99    END_PROC
         TITLE 'SHOWMVS &REL - Resource Manager Data (SRM)'
*---------------------------------------------------------------------*
*                                                                     *
*Resource Manager Data:                                               *
*                                                                     *
*  IPS: 00        ICS: 00        OPT: 00      SELTAPE: NEXT           *
*  CPU: 10.0      IOC: 10.0      SRB: 10.0        MSO:  3.0000        *
*                                                                     *
*     DMN   MIN   MAX   CMPL    RUA    INC    NSW   OUTU   TWSR   CIDX*
*                                                                     *
*      0    999   999      4     64      0      4      0    397   9999*
*      1     30    30      0      0      0      0      0      0      0*
*                                                                     *
*---------------------------------------------------------------------*
SRM00    BEGIN_PROC KW=SRM,BASEREG=NO                            RS0302
         LA    R3,BLANKS               dummy work area
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         JNO   SRM10                   no, jump
         STRING '&TITLEPFX.Workload Manager Data:',INTO=LINE       @522
         BRAS  R14,SPACE2              BLANK LINE                  @522
         LA    R3,WORK256              get address of work area    @522
         USING SRMSTAT,R3              Establish addressability    @522
         PGSER R,FIX,A=SRMSTAT,EA=SRMSTAT,ECB=0                    @522
         LA    R1,SRMSTAT              load addr for SYSEVENT      @522
         LA    R0,SRMSTSIZ             Load real length of SRMSTAT @522
         STH   R0,SRMSTLEN             pass length                 @522
         SYSEVENT REQSRMST             Issue Requ. SRM status SYSEVENT
         PGSER R,FREE,A=SRMSTAT,EA=SRMSTAT                         @522
         TM    SRMSTFLG,SRMSTMDE       If ON - WLM compatibility mode
         JNO   SRM70                   OFF - WLM goal mode         @522
*WLM compatibility mode                                            @522
         STRING '  WLM is running in "COMPATIBILITY" mode',INTO=LINE
         BRAS  R14,SPACE2              BLANK LINE                  @522
.SRM10   ANOP
SRM10    EQU   *
         L     R2,CVTOPCTP             RESOURCE MANAGER CONTROL TABLE
         USING RMCT,R2
         L     R5,RMCTRMPT             SRM PARAMETER TABLE
         USING RMPT,R5
         L     R6,RMCTICST             SRM ICS TABLE
         USING ICST,R6
         CLI   RMCTICST,X'7F'          goal mode?
         JNE   *+8                     no, jump
         LA    R6,BLANKS               no ICS table
         L     R7,RMCTWMST             SRM WORKLOAD MANAGER TABLE
         USING WMST,R7
         STRING '&TITLEPFX.Resource Manager Data:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
         BRAS  R1,SRM20
         DC    AL1(RMCTSLTN),C'NEXT  '
         DC    AL1(RMCTSLTR),C'RANDOM'
         DC    AL1(RMCTSLTL),C'LAST  '
         DC    AL1(RMCTSLTF),C'FIRST '
         DC    AL1(00000000),C'????? ',0H'0'
SRM20    BRAS  R14,SCAN_TM             CALL SCAN RTNE
         DC    Y(1+6)               0  LENGTH OF A TABLE ENTRY
         TM    RMCTTAPE,*-*         2  TEST SELTAPE OPTION
         STRING '  IPS: ',WMSTID,      IEAIPSXX                        X
               '        ICS: ',ICSTID, IEAICSXX                        X
               '        OPT: ',RMPTOPTN, IEAOPTXX                      X
               '      SELTAPE: ',(1(R1),6),                            X
               INTO=LINE
         TR    LINE,TRTPRINT           get rid of garbage
         BRAS  R14,SPACE1          <== next line
*
SRM26    STRING '  CPU: ',WMSTIPC,     CPU SERVICE COEFFICIENT         X
               '      IOC: ',WMSTIPI,  I/O SERVICE COEFFICIENT         X
               '      SRB: ',WMSTIPB,  SRB SERVICE COEFFICIENT         X
               '        MSO: ',WMSTIPM, MSO SERVICE COEFFICIENT        X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
*        Check for WLM mode (5.1)
*
         TM    RMCTFLGS,RMCTWLM        WLM mode?
         JO    SRM70                   yes, jump
*
*        CALCULATE LENGTH OF A DOMAIN TABLE ENTRY FROM FIRST ENTRY,
*        LAST ENTRY, AND NUMBER OF ENTRIES.   THIS SHOULD WORK IN
*        MVS/XA THROUGH MVS/ESA 4.3 (DMDT LENGTH WAS INCREASED IN
*        MVS/ESA 4.2).
*
         SLR   R0,R0
         L     R1,RMCTDMDE             LAST ENTRY IN DOMAIN TABLE
         SL    R1,RMCTDMDT             LENGTH OF DOMAIN TABLE
         LH    R14,RMCTDMNC            NUMBER OF DOMAINS IN DOMAIN TBLE
         BCTR  R14,0                   MINUS ONE FOR "DR"
         DR    R0,R14                  SIZE OF AN ENTRY IN DOMAIN TABLE
         LH    R6,RMCTDMNC             NUMBER OF DOMAINS IN DOMAIN TBLE
         L     R7,RMCTDMDT             FIRST ENTRY IN DOMAIN TABLE
         USING DMDT,R7
         STRING '     DMN   MIN    MAX   CMPL    RUA    INC    NSW',   X
               '   OUTU   TWSR   CIDX',                                X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
*LOOP
SRM30    STRING (DMDTNO,FL1,R7B),(DMDTLO,H,R7B),(DMDTHI,H,R7B),        X
               (DMDTCMPL,H,R7B),(DMDTRUA,H,R7B),(DMDTINCU,H,R7B),      X
               (DMDTNSW,H,R7B),(DMDTOUTU,H,R7B),(DMDTTWSR,F,R7B),      X
               (DMDTCIDX,H,R7B),                                       X
               INTO=LINE
         BRAS  R14,SPACE1          <== next line
         LA    R7,0(R1,R7)             INCREMENT
         BRCT  R6,SRM30
*ENDLOOP
         BRAS  R14,BLANK1              BLANK LINE
         J     SRM99
         TITLE 'SHOWMVS &REL - WorkLoad Manager Data'              +JM
*---------------------------------------------------------------------*
*                                                                     *
*Workload Manager Data:                                               *
*                                                                     *
*  WLM is running in "GOAL" mode                                      *
*                                                                     *
*    OPT parmlib member in use: IEAOPT00                              *
*                                                                     *
*    Active service policy name: PROD                                 *
*      Activated by Userid: IBMUSER                                   *
*    Service definition was installed by Userid: IBMUSER              *
*    Service definition was installed on system: D1                   *
*                                                                     *
*---------------------------------------------------------------------*
SRM70    EQU   *
         STRING '  WLM is running in "GOAL" mode',INTO=LINE        @522
         BRAS  R14,SPACE2              BLANK LINE                  @522
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?          RS0799
         JNO   SRM99                   no, jump                  RS0799
         STRING '    OPT parmlib member in use: ',SRMSTOPT,INTO=LINE
         CLC   =C'--',SRMSTOPT+6       Is an OPT member in use?    @522
         JNE   SRM73                   Yes
         STRING '    No OPT parmlib member in use',INTO=LINE       @522
SRM73    DS    0H                                                  @522
         BRAS  R14,SPACE2          <== double space                @522
         STRING '    Active service policy name: ',SRMSTAPN,INTO=LINE
         BRAS  R14,SPACE1          <== next line                   @522
         STRING '    Activated by Userid: ',SRMSTAPU,INTO=LINE     @522
         BRAS  R14,SPACE1          <== next line                   @522
         STRING '    Service policy activation was initiated on ',     $
               'system: ',SRMSTAPS,INTO=LINE                       @522
         BRAS  R14,SPACE1          <== next line                   @522
         STRING '    Installed service definition name at time of ',   $
               'policy activation: ',SRMSTADN,INTO=LINE            @522
         BRAS  R14,SPACE1          <== next line                   @522
         STRING '    Service definition was installed by Userid: ',    $
               SRMSTADU,INTO=LINE                                  @522
         BRAS  R14,SPACE1          <== next line                   @522
         STRING '    Service definition was installed on system: ',    $
               SRMSTADS,INTO=LINE                                  @522
         BRAS  R14,SPACE2          <== double space                @522
.SRM99   ANOP
SRM99    END_PROC
         TITLE 'SHOWMVS &REL - WorkLoad Manager Data'              +JM
*---------------------------------------------------------------------*
*                                                                     *
*Active WorkLoad Manager Data:                                        *
*                                                                     *
*  Service policy: PROD - Normal Production Policy                    *
*  Activated at: 1997-02-21 07.00.19 by userid: DN02241 on: D1        *
*  Definition extracted from: SYS1  description: SYS1 Definition      *
*             at: 1997-02-21 06.59.45 by userid: DN02241 on: D1       *
*                                                                     *
*  Service coefficients - CPU: 1.00  IOC: 1.00  MSO: 0  SRB: 1.00     *
*                                                                     *
*  Workloads defined: 9                                               *
*                                                                     *
*    ADR       ADR Workload                                           *
*    BATCH     Batch Workload                                         *
*    CICS      CICS Workload                                          *
*    DB2       DB2 Workload                                           *
*    IMS       IMS Workload                                           *
*    ONLINES   Production Online Workload                             *
*    STC       STC Workload                                           *
*    TSO       TSO Workload                                           *
*    SYSTEM    THE SYSTEM WORKLOAD                                    *
*                                                                     *
*    Service classes defined: 19                                      *
*                                                                     *
*      Service class: ADR_MUF   ADR MUF Regions                       *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   Execution velocity of 25                     *
*                                                                     *
*      Service class: BAT_HOT   Batch - Hot                           *
*          Associated with workload: BATCH                            *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   Execution velocity of 20                     *
*                                                                     *
*      Service class: BAT_LOW   Batch - No-priority                   *
*          Associated with workload: BATCH                            *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1                  Discretionary                                *
*                                                                     *
*      Service class: BAT_REG   Batch - Default                       *
*          Associated with workload: BATCH                            *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              5   Execution velocity of 5                      *
*                                                                     *
*      Service class: BAT_WARM  Batch - Warm                          *
*          Associated with workload: BATCH                            *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              4   Execution velocity of 10                     *
*                                                                     *
*      Service class: CICS_REG  CICS Regions                          *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   Execution velocity of 30                     *
*                                                                     *
*      Service class: CICS_RSP  CICS Regions                          *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   90% Complete within 00.00.05.000             *
*                                                                     *
*      Service class: DB2_REGS  DB2 Regions                           *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   Execution velocity of 30                     *
*                                                                     *
*      Service class: IMS_CNTL  IMS Control Region                    *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   Execution velocity of 35                     *
*                                                                     *
*      Service class: IMS_REGS  IMS MSG Regions                       *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   Execution velocity of 30                     *
*                                                                     *
*      Service class: IMS_RSP   IMS Regions                           *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   90% Complete within 00.00.05.000             *
*                                                                     *
*      Service class: STC_HOT   Started Task - Hot                    *
*          Associated with workload: STC                              *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              1   Execution velocity of 40                     *
*                                                                     *
*      Service class: STC_REG   Started Task - Default                *
*          Associated with workload: STC                              *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              3   Execution velocity of 20                     *
*                                                                     *
*      Service class: STC_WARM  Started Task - Warm                   *
*          Associated with workload: STC                              *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   Execution velocity of 25                     *
*                                                                     *
*      Service class: TEST_TRN  Test/Trn Onlines                      *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              4   Execution velocity of 20                     *
*                                                                     *
*      Service class: TSO       TSO Service Class                     *
*          Associated with workload: TSO                              *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1  1000        2   85% Complete within 00.00.01.000             *
*     2  1900        3   70% Complete within 00.00.05.000             *
*     3              4   Execution velocity of 20                     *
*                                                                     *
*      Service class: SYSTEM    HIGH PRIORITY SYSTEM WORK             *
*          Associated with workload: SYSTEM                           *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1                  System                                       *
*                                                                     *
*      Service class: SYSSTC    STARTED TASK DEFAULT                  *
*          Associated with workload: SYSTEM                           *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1                  System                                       *
*                                                                     *
*      Service class: SYSOTHER  UNCLASSIFIED WORK                     *
*          Associated with workload: SYSTEM                           *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1                  System                                       *
*                                                                     *
*     Group     Qualifier Name(s)                                     *
*                                                                     *
*     BAT_HOT   SMF*      NMMJT0*                                     *
*     BAT_LOW   12345XYZ                                              *
*     BAT_WARM  WARMBAT                                               *
*     CICS_REG  CIC*      OCCI                                        *
*     DB2_REGS  DB2*                                                  *
*     IMS_CNTL  IM%%CNTL  IM%%DLI   IM%%DBRC  IM%%IRLM  BMCPNSS       *
*     IMS_REGS  IMS2*     IM1*      IM2*                              *
*     STC_SYS   JES2      NET       OMIIDMOD  OMIIRCOL  OMIIMVS   SMS *
*               MII       OMIICMS                                     *
*                                                                     *
*---------------------------------------------------------------------*
WLM00    BEGIN_PROC KW=WLM,BASEREG=YES IWMPQRY require           RS0302
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         JNO   WLM99                   no, jump
         XC    ANSLEN,ANSLEN           length is zero, for now
*
*        Find out how much storage is needed for the answer area
*
         IWMPQRY MF=(E,IWMPQRY,COMPLETE),ANSAREA=ANSAREA,              X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,                        X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE
         MVC   ANSLEN,QUERYLEN        set required length        RS0500
         CH    R15,=Y(IWMRETCODEWARNING) Warning
         JH    WLM180                  No
         CLM   R0,B'0011',=Y(IWMRSNCODEOUTPUTAREATOOSMALL) too small
         JNE   WLM180                  no
         L     R2,QUERYLEN             load length of answer area
*
*        Allocate a work area for the WLM PQRY answer area
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    WLM003                  yes, jump
         GETMAIN RU,LV=(R2)            allocate WLM work area
         J     WLM009
WLM003   DS    0H
         LR    R0,R2                   Length of storage
         LA    R1,1                    LOC=ANY
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES             RS1002
WLM009   DS    0H
         STM   R1,R2,WLM_QUACF_AREA    save addr and length
         LR    R3,R1                   answer goes here
*
*        Retrieve WLM information
*
         IWMPQRY MF=(E,IWMPQRY,COMPLETE),ANSAREA=(R3),                 X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,                        X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE
         AIF   (NOT D'CVTJ6604).WLM050 New responsecode V2R4       +RS
         CH    R15,=Y(IWMRETCODEWARNING)                           +RS
         JH    WLM160                                              +RS
         LTR   R0,R0                   default policy?            JWM98
         JE    WLM009X                 yes, jump
         CLM   R0,B'0011',=Y(IWMRSNCODEDEFAULTPOLICY)
         JNE   WLM160
         J     WLM009X                                             +RS
.WLM050  ANOP
         LTR   R15,R15                 did all go well
         JNZ   WLM160                  no
WLM009X  DS    0H                                                  +RS
         STRING '&TITLEPFX.Active WorkLoad Manager Data:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         USING SVPOLHD,R3              IWMPQRY Answer area
         LA    R4,SVPOLHD              Start of SVPO
         AL    R4,SVPOLDPO             Offset to service policy
         USING SVPOLSP,R4              Service policy information
         STRING '  Service policy: ',(SVPOLNSP,,L),' - ',SVPOLDSP,     X
               INTO=LINE
         BRAS  R14,SPACE1          <== next line
         LA    R1,SVPOLTPA             activation time/date
         BRAS  R14,STCKCONV            convert TOD clock to decimal
         STRING '  Activated at: ',STCKDATE,1X,(STCKTIME,8),           X
               ' by userid: ',(SVPOLIPU,,L),' on: ',SVPOLSNA,          X
               INTO=LINE
         BRAS  R14,SPACE1          <== next line
         LA    R1,SVPOLTDI             service definition time/date
         BRAS  R14,STCKCONV            convert TOD clock to decimal
         STRING '  Definition extracted from: ',(SVPOLIDN,,L),2X,      X
               'description: ',(SVPOLIDD,,L),                          X
               INTO=LINE
         BRAS  R14,SPACE1          <== next line
         STRING 13X,'at: ',STCKDATE,1X,(STCKTIME,8),                   X
               ' by userid: ',(SVPOLIDU,,L),' on: ',SVPOLIDS,          X
               INTO=LINE
         BRAS  R14,SPACE2          <== double space
         STRING '  Service coefficients - ',                           X
               'CPU: ',(SVPOLECP,,T),2X,'IOC: ',(SVPOLEIO,,T),2X,      X
               'MSO: ',(SVPOLEMS,,T),2X,'SRB: ',(SVPOLESR,,T),         X
               INTO=LINE
         BRAS  R14,SPACE2          <== next line
         STRING '  Workloads defined: ',(SVPOLDWC,H,L),INTO=LINE
         BRAS  R14,SPACE2          <== double space
         LH    R5,SVPOLDWC             number of entries
         LTR   R5,R5                   are any defined?
         JZ    WLM170                  no
         LA    R4,SVPOLHD              Start of SVPO
         AL    R4,SVPOLDWO             Offset to workload definition
         USING SVPOLWD,R4              Workload information
WLM010   DS    0H
         STRING 4X,SVPOLWNM,2X,SVPOLWDE,INTO=LINE
         BRAS  R14,SPACE1          <== next line
         AH    R4,SVPOLDWL             next section
         BRCT  R5,WLM010               loop
         BRAS  R14,BLANK1          <== double space
         STRING 4X,'Service classes defined: ',(SVPOLDCC,H,L),         X
               INTO=LINE
         BRAS  R14,SPACE2          <== double space
         LH    R5,SVPOLDCC             number of entries
         LTR   R5,R5                   are any defined?
         JZ    WLM140                  no
         LA    R4,SVPOLHD              Start of SVPO
         AL    R4,SVPOLDCO             Offset to service class def's
         USING SVPOLCD,R4              Service class information
*LOOP
WLM020   DS    0H
         STRING 6X,'Service class: ',SVPOLCNM,2X,SVPOLCDE,             X
               INTO=LINE
         BRAS  R14,SPACE1          <== next line
         STRING 10X,'Associated with workload: ',SVPOLCWN,INTO=LINE
         BRAS  R14,SPACE1          <== next line
         CLC   SVPOLCRN,BLANKS         any resource group tere?
         JE    WLM030                  no
         STRING 10X,'Associated resource group: ',SVPOLCRN,INTO=LINE
WLM030   DS    0H
         CLC   SVPOLCPN,=H'0'          Any service class period entries
         JNE   WLM040                  yes
         STRING '    No service class period entries are defined',     X
               INTO=LINE
         J     WLM130
WLM040   DS    0H
         BRAS  R14,BLANK1              double space
         LA    R6,SVPOLCD              Start of Service Class          X
                                         definition section
         AL    R6,SVPOLCPO             Offset to service class period  X
                                         entries for this service class
         USING SVPOLPD,R6              Service class period information
         LA    R7,0                    entry counter
         STRING '     #  Duration   Imp  Goal description',INTO=LINE
         BRAS  R14,SPACE1
         STRING '     -  --------    -   ----------------------------',X
               INTO=LINE
         BRAS  R14,SPACE1
*-LOOP
WLM050   DS    0H
         LA    R7,1(,R7)               entry number plus 1
         STRING (SVPOLVAL,F,R9Z),INTO=WORK256
         TM    SVPOLTYP,SVPOLPRC       Percentile response time goal
         JZ    WLM070                  no
         TM    SVPOLRTU,SVPOL_RTU_MS   Milliseconds ?            RS0300
         JZ    WLM051                    No, not supported yet   RS0300
         SLR   R0,R0                   clear R0                  RS0300
         ICM   R1,B'1111',SVPOLVAL     Dividend into R1          RS0300
         D     R0,=F'3600000'          Divide by 3.600.000       RS0300
         STCM  R1,B'0011',WORK256      Hours                     RS0300
         LR    R1,R0                   Reminder                  RS0300
         SLR   R0,R0                   clear R0                  RS0300
         D     R0,=F'60000'            Divide by 60.000          RS0300
         STCM  R1,B'0011',WORK256+2    Minutes                   RS0300
         LR    R1,R0                   Reminder                  RS0300
         SLR   R0,R0                   clear R0                  RS0300
         D     R0,=F'1000'             Divide by 1.000           RS0300
         STCM  R1,B'0011',WORK256+4    seconds                   RS0300
         J     WLM057                                            RS0300
WLM051   DS     0H                                               RS0300
         XC    WORK256(6),WORK256      Clear HHMMSS              RS0300
WLM057   DS     0H                                               RS0300
         CLC    SVPOLDUR,=F'0'         any duration
         JE     WLM060                 no
         STRING 4X,((R7),,R2B),2X,                                     X
               (SVPOLDUR,F,L8),4X,     duration                  RS0200X
               (SVPOLIMP,H,R1B),3X,    importance                      X
               (SVPOLPER,H,R2B),'% Complete within ',                  X
               (WORK256+0,H,R2Z),':',  Hours                     RS0300X
               (WORK256+2,H,R2Z),':',  Minutes                   RS0300X
               (WORK256+4,H,R2Z),'.',  Seconds                   RS0300X
               (WORK256+6,3),          Milliseconds              RS0300X
               INTO=LINE
         J     WLM120
WLM060   DS     0H
         STRING 4X,((R7),,R2B),2X,                                     X
               9X,3X,                  duration place holder           X
               (SVPOLIMP,H,R1B),3X,    importance                      X
               (SVPOLPER,H,R2B),'% Complete within ',                  X
               (WORK256+0,H,R2Z),':',  Hours                     RS0300X
               (WORK256+2,H,R2Z),':',  Minutes                   RS0300X
               (WORK256+4,H,R2Z),'.',  Seconds                   RS0300X
               (WORK256+6,3),          Milliseconds              RS0300X
               INTO=LINE
         J     WLM120
WLM070   DS    0H
         TM    SVPOLTYP,SVPOLAVG       Average response time goal
         JZ    WLM080                  no
         TM    SVPOLRTU,SVPOL_RTU_MS   Milliseconds ?            RS0300
         JZ    WLM071                    No, not supported yet   RS0300
         SLR   R0,R0                   clear R0                  RS0300
         ICM   R1,B'1111',SVPOLVAL     Dividend into R1          RS0300
         D     R0,=F'3600000'          Divide by 3.600.000       RS0300
         STCM  R1,B'0011',WORK256      Hours                     RS0300
         LR    R1,R0                   Reminder                  RS0300
         SLR   R0,R0                   clear R0                  RS0300
         D     R0,=F'60000'            Divide by 60.000          RS0300
         STCM  R1,B'0011',WORK256+2    Minutes                   RS0300
         LR    R1,R0                   Reminder                  RS0300
         SLR   R0,R0                   clear R0                  RS0300
         D     R0,=F'1000'             Divide by 1.000           RS0300
         STCM  R1,B'0011',WORK256+4    seconds                   RS0300
         J     WLM077                                            RS0300
WLM071   DS     0H                                               RS0300
         XC    WORK256(6),WORK256      Clear HHMMSS              RS0300
WLM077   DS     0H                                               RS0300
         CLC    SVPOLDUR,=F'0'         any duration
         JE     WLM078                 no
         STRING 4X,((R7),,R2B),2X,                                     X
               (SVPOLDUR,F,L8),4X,     duration                  RS0300X
               (SVPOLIMP,H,R1B),3X,    importance                      X
               'Average Response time of ',                            X
               (WORK256+0,H,R2Z),':',  Hours                     RS0300X
               (WORK256+2,H,R2Z),':',  Minutes                   RS0300X
               (WORK256+4,H,R2Z),'.',  Seconds                   RS0300X
               (WORK256+6,3),          Milliseconds              RS0300X
               INTO=LINE
         J     WLM120
WLM078   DS     0H                                               RS0300
         STRING 4X,((R7),,R2B),2X,                               RS0300X
               9X,3X,                  duration place holder           X
               (SVPOLIMP,H,R1B),3X,    importance                RS0300X
               'Average Response time of ',                      RS0300X
               (WORK256+0,H,R2Z),':',  Hours                     RS0300X
               (WORK256+2,H,R2Z),':',  Minutes                   RS0300X
               (WORK256+4,H,R2Z),'.',  Seconds                   RS0300X
               (WORK256+6,3),          Milliseconds              RS0300X
               INTO=LINE                                         RS0300
*              (SVPOLDUR,F,L8),4X,     duration                  RS1002
         J     WLM120                                            RS0300
WLM080   DS    0H
         TM    SVPOLTYP,SVPOLVEL       Velocity goal
         JZ    WLM090                  no
         CLC    SVPOLDUR,=F'0'         any duration              RS0200
         JE     WLM085                 no
         STRING 4X,((R7),,R2B),2X,                                     X
               (SVPOLDUR,F,L8),4X,     duration                  RS0200X
               (SVPOLIMP,H,R1B),3X,    importance                      X
               'Execution velocity of ',(SVPOLVAL,F,L),                X
               INTO=LINE
         J     WLM120
WLM085   DS    0H                                                RS0200
         STRING 4X,((R7),,R2B),2X,                               RS0200X
               9X,3X,                  duration place holder     RS0200X
               (SVPOLIMP,H,R1B),3X,    importance                RS0200X
               'Execution velocity of ',(SVPOLVAL,F,L),          RS0200X
               INTO=LINE                                         RS0200
         J     WLM120                                            RS0200
WLM090   DS    0H
         TM    SVPOLTYP,SVPOLDSC       Discretionary goal
         JZ    WLM100                  no
         STRING 4X,((R7),,R2B),2X,                                     X
               9X,3X,                  duration place holder           X
               1X,3X,                  importance                      X
               'Discretionary',                                        X
               INTO=LINE
         J     WLM120
WLM100   DS    0H
         TM    SVPOLTYP,SVPOLSTM       System goal
         JZ    WLM110                  no
         STRING 4X,((R7),,R2B),2X,                                     X
               9X,3X,                  duration place holder           X
               1X,3X,                  importance                      X
               'System',                                               X
               INTO=LINE
         J     WLM120
WLM110   DS    0H
         STRING ' Unknown SVPOLTYP ',(SVPOLTYP,,X),INTO=LINE
         J     WLM120
WLM120   DS    0H
         BRAS  R14,SPACE1          <== next line
         AH    R6,SVPOLDZL             skip entry
         CH    R7,SVPOLCPN             number of entries
         JL    WLM050                  loop
*-ENDLOOP
WLM130   DS    0H
         BRAS  R14,BLANK1              double space
         AH    R4,SVPOLDCL             next service class
         BRCT  R5,WLM020               loop
*ENDLOOP
WLM140   DS    0H
         STRING '    Report Classes defined: ',(SVPOLDRC,H,L),INTO=LINE
         BRAS  R14,SPACE2          <== double space
         LH    R5,SVPOLDRC             number of entries
         LTR   R5,R5                   any report class entries
         JZ    WLM170                  no
         STRING '      Class     Description',INTO=LINE
         BRAS  R14,SPACE1              Single space
         LA    R4,SVPOLHD              Start of SVPO
         AL    R4,SVPOLDRO             Offset to report class
         USING SVPOLRD,R4
*LOOP
WLM150   DS    0H
         STRING 6X,SVPOLRNM,2X,SVPOLRDE,INTO=LINE
         BRAS  R14,SPACE1          <== next line
         AH    R4,SVPOLDRL             next section
         BRCT  R5,WLM150               loop
         BRAS  R14,BLANK1              double space
         J     WLM170
*ENDLOOP
WLM160   DS    0H
         STRING '   IWMPQRY-1',' FAILED - Returncode=',(LRETCODE,,X),  X
               '  Reasoncode=',(LRSNCODE,,X),                          X
               INTO=LINE
         BRAS  R14,SPACE2          <== double space
         J     WLM200
WLM170   DS    0H
         LM    R1,R2,WLM_QUACF_AREA    load addr and length
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    WLM175                  yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free WLM work area
         J     WLM200
WLM175   DS    0H
         LR    R0,R2                   length for FREEMAIN
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES Free WLM work area
         J     WLM200
WLM180   DS    0H
         STRING '   IWMPQRY-2',' FAILED - Returncode=',(LRETCODE,,X),  X
               '  Reasoncode=',(LRSNCODE,,X),                          X
               INTO=LINE
         BRAS  R14,SPACE2          <== double space
WLM200   DS    0H
         XC    ANSLEN,ANSLEN           length is zero, for now
*
*        Find out how much storage is needed for the answer area
*
         IWMCQRY MF=(E,IWMCQRY,COMPLETE),ANSAREA=ANSAREA,              X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,                        X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE
         MVC   ANSLEN,QUERYLEN                                   RS0500
         CH    R15,=Y(IWMRETCODEWARNING) Warning
         JH    WLM330                  no
         CLM   R0,B'0011',=Y(IWMRSNCODEOUTPUTAREATOOSMALL) too small
         JNE   WLM330                  no
         L     R2,QUERYLEN             load length of answer area
*
*        Allocate a work area for the WLM CQRY answer area
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    WLM203                  yes, jump
         GETMAIN RU,LV=(R2)            allocate WLM work area
         J     WLM209
WLM203   DS    0H
         LR    R0,R2                   Length of storage
         LA    R1,1                    LOC=ANY
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES             RS1002
WLM209   DS    0H
         STM   R1,R2,WLM_QUACF_AREA    save addr and length
         LR    R3,R1                   answer goes here
*
*        Retrieve WLM information
*
         IWMCQRY MF=(E,IWMCQRY,COMPLETE),ANSAREA=(R3),                 X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,                        X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE
         LTR   R15,R15                 did all go well
         JNZ   WLM300                  no
         USING SVDCRHDR,R3             IWMCQRY Answer area
         STRING '  Subsystem Types defined: ',(SVDCRSN,H,L),INTO=LINE
         BRAS  R14,SPACE2          <== double space
         LH    R5,SVDCRSN              number of entries
         LTR   R5,R5                   are any defined?
         JZ    WLM222                  no
         LA    R4,SVDCRHDR             Start of SVD header
         AL    R4,SVDCRSO              Offset to subsystem definition
         USING SVDCRSST,R4             Subsystem information
*LOOP
WLM210   DS    0H
         STRING 4X,'Subsystem name: ',SVDCRSNM,INTO=LINE
         BRAS  R14,SPACE2              <== double space
         STRING 6X,'--------Qualifier-------------',12X,'-------Class--X
               ------',INTO=LINE
         BRAS  R14,SPACE1
         STRING 6X,'Type     Name     Start',20X,'Service   Report',   X
               INTO=LINE
         BRAS  R14,SPACE1
         LA    R1,BLANKS
         TM    SVDCRSFL,SVDCRSCI       Default service class name
         JZ    *+8                     no
         LA    R1,SVDCRSCN             yes
         LA    R2,BLANKS
         TM    SVDCRSFL,SVDCRSPI       Default report class name
         JZ    *+8                     no
         LA    R2,SVDCRSPN             yes
         STRING 39X,'Defaults: ',((R1),8),2X,((R2),8),INTO=LINE  RS1001
         BRAS  R14,SPACE1
         LH    R7,SVDCRSRN             number of classification rules
         LTR   R7,R7                   zero
         JZ    WLM219                  yes
         LA    R6,SVDCRSST             start of section
         AL    R6,SVDCRSRO             to classification section
         USING SVDCRRUL,R6
         ST    R8,WKCELL1              save address of CVT
*-LOOP
WLM211   DS    0H
         BRAS  R1,WLM212
         DC    AL1(SVDCRRTN),CL4'TN  ',CL4'TNG '
         DC    AL1(SVDCRRTC),CL4'TC  ',CL4'TCG '
         DC    AL1(SVDCRRUI),CL4'UI  ',CL4'UIG '
         DC    AL1(SVDCRRSN),CL4'SI  ',CL4'SIG '
         DC    AL1(SVDCRRNI),CL4'NET ',CL4'NETG'
         DC    AL1(SVDCRRLU),CL4'LU  ',CL4'LUG '
         DC    AL1(SVDCRRAC),CL4'AI  ',CL4'    '
         DC    AL1(SVDCRRSP),CL4'SPM ',CL4'    '
         DC    AL1(00),CL4'****',CL4'****'
*--LOOP
WLM212   DS    0H
         CLC   SVDCRRQT_BYTE1,0(R1)    found type
         JE    WLM213                  yes
         LA    R1,9(,R1)               skip this entry
         CLI   0(R1),X'00'             end of list
         JNE   WLM212                  no
*--ENDLOOP
         BRAS  R1,WLM212A                                        JM0411
         DC    AL1(SVDCRRQT_COLL_NAME),CL4'CN  ',CL4'    '       JM0411
         DC    AL1(SVDCRRQT_CORR_INFO),CL4'CI  ',CL4'    '       JM0411
         DC    AL1(SVDCRRQT_CONN_TYPE),CL4'CT  ',CL4'CTG '       JM0411
         DC    AL1(SVDCRRQT_PACK_NAME),CL4'PK  ',CL4'PKG '       JM0411
         DC    AL1(SVDCRRQT_PLAN_NAME),CL4'PN  ',CL4'PNG '       JM0411
         AIF   (NOT D'CVTH6603).WLM212X                          RS0500
         DC    AL1(SVDCRRQT_PERFORM),CL4'PF  ',CL4'PFG '         JM0411
         DC    AL1(SVDCRRQT_PROC_NAME),CL4'PN  ',CL4'PNG '       JM0411
         AIF   (NOT D'CVTJ6604).WLM212X                          RS0500
         DC    AL1(SVDCRRQT_PRIORITY),CL4'PRI ',CL4'    '        JM0411
.WLM212X  ANOP                                                   RS0500
         DC    AL1(00),CL4'****',CL4'****'                       JM0411
*--LOOP                                                          JM0411
WLM212A  DS    0H                                                JM0411
         CLC   SVDCRRQT_BYTE2,0(R1)    found type                JM0411
         JE    WLM213                  yes
         LA    R1,9(,R1)               skip this entry           JM0411
         CLI   0(R1),X'00'             end of list               JM0411
         JNE   WLM212A                 no
*--ENDLOOP                                                       JM0411
         BRAS  R1,WLM212B                                        JM0411
         AIF   (NOT D'CVTJ6607).WLM212Y                          RS0500
         DC    AL1(SVDCRRQT_PROCESS_NAME),CL4'PC  ',CL4'    '    JM0411
.WLM212Y  ANOP                                                   RS0500
         DC    AL1(00),CL4'****',CL4'****' Must be duplicate     RS0500
         DC    AL1(00),CL4'****',CL4'****' because of LA 1,9(1)  RS0500
*delete  DC    AL1(00),CL4'****',CL4'****'                       JM0411
*--LOOP                                                          JM0411
WLM212B  DS    0H                                                JM0411
         CLC   SVDCRRQT_BYTE3,0(R1)    found type                JM0411
         JE    WLM213                  yes
         LA    R1,9(,R1)               skip this entry           JM0411
         CLI   0(R1),X'00'             end of list               JM0411
         JNE   WLM212B                 no
*--ENDLOOP                                                       JM0411
WLM213   DS    0H
         TM    SVDCRRFL,SVDCRRGI       is it a group
         JZ    *+8                     no
         LA    R1,4(,R1)               over to the group
         LA    R2,BLANKS
         TM    SVDCRRFL,SVDCRRCI       Service class name specified
         JZ    *+8                     no
         LA    R2,SVDCRRCN             yes
         LA    R8,BLANKS
         TM    SVDCRRFL,SVDCRRPI       Report class name specified
         JZ    *+8                     no
         LA    R8,SVDCRRPN             yes
         STRING 3X,                                                    X
               (SVDCRRLV,H,R2B),1X,    nest level                      X
               (1(R1),4),5X,           type                            X
               SVDCRRQV,2X,            name                            X
               (SVDCRRSV,H,L0B),23X,   start                           X
               ((R2),8),2X,            service                         X
               ((R8),8),               report                    RS1001X
               INTO=LINE
         CLC   LINE+21(2),=C' 0'       Zero?
         JNE   *+10                    no
         MVC   LINE+21(2),BLANKS       blank it
         BRAS  R14,SPACE1              single space              JM0900
         CLI   1(R1),C'*'              Was it unknown            JM0411
         JNE   WLM214                  No
         STRING ' Unknown SVDCRRQT_BYTE1-3 ',                    JM0411X
               (SVDCRRQT_BYTE1,3,X),INTO=LINE                    JM0411
         BRAS  R14,SPACE1                                        JM0411
WLM214   DS    0H                                                JM0411
         AH    R6,SVDCRRS              skip this entry
         BRCT  R7,WLM211
*-ENDLOOP
         L     R8,WKCELL1              reload address of CVT
         BRAS  R14,BLANK1              double space
         J     WLM220
*
WLM219   DS    0H
         BRAS  R14,BLANK1              double space
         STRING 6X,'There are no classification rules',INTO=LINE
         BRAS  R14,SPACE2
WLM220   DS    0H
         AH    R4,SVDCRSS              skip this entry
         BRCT  R5,WLM210
*ENDLOOP
WLM222   DS    0H
         LH    R5,SVDCRGN              number of groups
         LTR   R5,R5                   are any defined?
         JZ    WLM298                  no
         STRING '    Group     Qualifier Name(s)',INTO=LINE
         BRAS  R14,SPACE2              Double space
         LA    R4,SVDCRHDR             Start of SVPO
         AL    R4,SVDCRGO              Offset to group definition
         USING SVDCRGRP,R4             Group information
*LOOP
WLM225   DS    0H
         MVC   LINE,BLANKS             Blank Line
         STRING 4X,SVDCRGRN,INTO=LINE
         LH    R7,SVDCRGVN             number of group values
         LTR   R7,R7                   zero
         JZ    WLM234                  yes
         LA    R6,SVDCRGRP             start of section
         AL    R6,SVDCRGVO             to Group values section
         USING SVDCRGVS,R6
         J     WLM226                                            JM0411
*-LOOP
WLM225A  DS    0H                                                JM0411
         MVC   LINE,BLANKS             Blank Line                JM0411
WLM226   DS    0H                                                JM0411
         LA    R1,LINE+14
         LA    R2,1                    Init inter loop
*-LOOP
WLM227   DS    0H
         MVC   0(L'SVDCRGVV,R1),SVDCRGVV move the field
         LA    R1,L'SVDCRGVV+2(,R1)    skip this entry
         LA    R6,SVDCRGVS_LEN(,R6)    skip this entry
         AIF   (NOT D'CVTH6606).WLM227Z
         TM    HBB6606,L'HBB6606       OS/390 R6?
         JO    WLM227Z                 yes, jump
         AHI   R6,-32                  R5 is shorter
WLM227Z  DS    0H
.WLM227Z ANOP
         CHI   R2,10                   Over count
         JE    WLM228                  Yes
         LA    R2,1(,R2)               Count plus 1
         BRCT  R7,WLM227
         BRAS  R14,SPACE1              Single Space
         J     WLM235
WLM228   DS    0H
         BRAS  R14,SPACE1              Single space
*delete  MVC   LINE,BLANKS             Blank Line                JM0411
         BRCT  R7,WLM225A                                        JM0900
*delete  BRAS  R14,BLANK1              Double Space              JM0411
         J     WLM235
*-ENDLOOP
WLM234   DS    0H
         BRAS  R14,SPACE1              Single space
         STRING 6X,'There are no Group Value entries defined',         X
               INTO=LINE
         BRAS  R14,SPACE2
WLM235   DS    0H
         AH    R4,SVDCRGS              skip this entry
         BRCT  R5,WLM225
         BRAS  R14,BLANK1              Double Space
         J     WLM310
*ENDLOOP
WLM298   DS    0H
         STRING '  Classification Groups defined: ',                   X
               (SVDCRGN,H,L),INTO=LINE
         BRAS  R14,SPACE2          <== double space
         J     WLM310
*
WLM300   DS    0H
         STRING '   IWMCQRY-1',' FAILED - Returncode=',(LRETCODE,,X),  X
               '  Reasoncode=',(LRSNCODE,,X),                          X
               INTO=LINE
         BRAS  R14,SPACE2          <== double space
         J     WLM400
WLM310   DS    0H
         LM    R1,R2,WLM_QUACF_AREA    load addr and length
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    WLM320                  yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free WLM work area
         J     WLM400                                            RS1202
WLM320   DS    0H
         LR    R0,R2                   length for FREEMAIN
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES Free WLM work area
         J     WLM400                                            RS1202
WLM330   DS    0H
         STRING '   IWMCQRY-2',' FAILED - Returncode=',(LRETCODE,,X),  X
               '  Reasoncode=',(LRSNCODE,,X),                          X
               INTO=LINE
         BRAS  R14,SPACE2          <== double space
WLM400   DS    0H                                                RS1202
         AIF   (NOT D'CVTJ6604).WLM99                            RS1202
         TM    JBB6604,L'JBB6604       running on OS/390 2.4?    RS1202
         JZ    WLM99                   no, jump                  RS1202
         XC    ANSLEN,ANSLEN           length is zero, for now   RS1202
*                                                                RS1202
*        Find out how much storage is needed for the answer area RS1202
*                                                                RS1202
         IWMRQRY MF=(E,WORK256,COMPLETE),ANSAREA=ANSAREA,              X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,INFO=ALL,ENCLAVES=ALL,  X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE                 RS1202
         MVC   ANSLEN,QUERYLEN                                   RS1202
         CH    R15,=Y(IWMRETCODEWARNING) Warning                 RS1202
         JH    WLM530                  no                        RS1202
         CLM   R0,B'0011',=Y(IWMRSNCODEOUTPUTAREATOOSMALL) too small
         JNE   WLM530                  no                        RS1202
         L     R2,QUERYLEN             load length of answer areaRS1202
*                                                                RS1202
*        Allocate a work area for the WLM CQRY answer area       RS1202
*                                                                RS1202
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS1202
         JO    WLM403                  yes, jump                 RS1202
         GETMAIN RU,LV=(R2)            allocate WLM work area    RS1202
         J     WLM409                                            RS1202
WLM403   DS    0H                                                RS1202
         LR    R0,R2                   Length of storage         RS1202
         LA    R1,1                    LOC=ANY                   RS1202
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES             RS1202
WLM409   DS    0H                                                RS1202
         STM   R1,R2,WLM_QUACF_AREA    save addr and length      RS1202
         LR    R4,R1                   answer goes here          RS1202
*                                                                RS1202
*        Reinvoke IWMRQRY                                        RS1202
*                                                                RS1202
         IWMRQRY MF=(E,WORK256,COMPLETE),ANSAREA=(R4),                 X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,INFO=ALL,ENCLAVES=ALL,  X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE                 RS1202
         LTR   R15,R15                 did all go well           RS1202
         JNZ   WLM500                  no                        RS1202
         USING RQAA,R4                                           RS1202
         STRING '  WLM Activity',INTO=LINE                       RS1202
         BRAS  R14,SPACE2          <== double space              RS1202
         LR    R5,R4                                             RS1202
         A     R5,RQAASCOF         point to RQAE entries         RS1202
         USING RQAE,R5             tell assembly                 RS1202
         STRING '  JobName Asid SrvClass RptClass ResGroup WorkLoad',  X
               ' Server',INTO=LINE                               RS1202
         BRAS  R14,SPACE1          <== single space              RS1202
         LH    R6,RQAASCA#         number                        RS1202
         LA    R7,1                asid                          RS1202
*loop                                                            RS1202
WLM410   DS   0H                                                 RS1202
         CLC   RQAEACRO,=C'RQAE'   in use ?                      RS1202
         JNE   WLM450                 no                         RS1202
*        #SNAP ADDR=(R4),LENGTH=134  Debug                       RS1202
         LOCASCB ASID=(R7)         GET ADDR OF OWNER'S           RS1202
         LTR   R2,R1               VALID ASID?                   RS1202
         JNP   WLM450              NO, JUMP                      RS1202
         USING ASCB,R2                                           RS1202
         ICM   R1,B'1111',ASCBJBNI-ASCB(R2) JOBNAME              RS1202
         JNZ   WLM420              Yes - continue                RS1202
         ICM   R1,B'1111',ASCBJBNS-ASCB(R2) START/MOUNT/LOGON    RS1202
         JNZ   WLM420              No - continue                 RS1202
         LA    R1,BLANKS                                         RS1202
WLM420   DS   0H                                                 RS1202
         LA    R0,=C'n/a'          not available                 RS0103
         AIF   (NOT D'CVTH7703).WLM430                           RS0103
         TM    JBB6604,L'HBB7703       running on OS/390 R10?    RS0103
         JZ    WLM430                  no, jump                  RS0103
         LA    R0,=C'No '          Default Server = NO           RS1202
         TM    RQAEFLGS,RQAEMANAGEDASSERVER  Server ?            RS1202
         JNO   WLM430                  no                        RS1202
         LA    R0,=C'Yes'              yes                       RS1202
.WLM430  ANOP                                                    RS0103
WLM430   DS   0H                                                 RS1202
         STRING 2X,((R1),8),1X,((R7),,R3B),1X,RQAESCLN,1X,RQAERCLN,1X, X
               RQAERGNN,1X,RQAEWKLN,1X,((R0),3),1X,INTO=LINE     RS1202
         BRAS  R14,SPACE1          <== single space              RS1202
WLM450   DS   0H                                                 RS1202
         LA    R7,1(,R7)           next asid                     RS1202
         AH    R5,RQAASCAL                                       RS1202
         BRCT  R6,WLM410                                         RS1202
         BRAS  R14,BLANK1                                        RS1202
*endloop                                                         RS1202
         DROP  R5                                                RS1202
         TM    JBB6609,L'JBB6609       running on OS/390 R9      RS0803
         JZ    WLM510                  no, jump                  RS0803
         AIF   (NOT D'CVTJ6609).WLM500                           RS0803
         ICM   R5,B'1111',RQAAXEDO point to RQAD entries         RS1202
         JZ    WLM510              empty leave                   RS1202
         AR    R5,R4               + R3                          RS1202
         USING RQAD,R5                                           RS1202
         STRING '  Enclave Token    Jobname  System   SrvClass P',     X
               ' Workload Asid          CPU',INTO=LINE           RS1202
         BRAS  R14,SPACE1          <== single space              RS1202
         L     R6,RQAAXED#            number                     RS1202
*loop                                                            RS1202
WLM460   DS   0H                                                 RS1202
         L     R1,RQADTOTALCPUTIME    Cpu                        RS1202
         BRAS  R14,BINTIME                                       RS1202
         ICM   R7,B'1111',RQADQAEO    offset to the enclave      RS1202
         JZ    WLM470                 zero, leave                RS1202
         AR    R7,R5               point to the RQAE for this enclave02
         USING RQAE,R7                                           RS1202
*        #SNAP ADDR=(R5),LENGTH=134                              RS1202
         STRING 2X,(RQADETKN,8,X),1X,RQADOWNERJOBNAME,1X,              X
               RQADOWNERSYSTEM,1X,RQAESCLN,1X,(RQAEPER#,FL1,R1B),1X,   X
               RQAEWKLN,1X,(RQADOWNERASID,H,R3B),2X,                   X
               ((R3),,R3Z),'H',((R2),,R2Z),'M',                        X
               ((R1),,R2Z),'S',((R0),,R2Z),INTO=LINE             RS1202
         BRAS  R14,SPACE1          <== single space              RS1202
WLM470   DS    0H                                                RS1202
         A     R5,RQAAXEDL             next entry                RS1202
         BRCT  R6,WLM460               loop                      RS1202
*endloop                                                         RS1202
         DROP  R7                                                RS1202
         BRAS  R14,BLANK1              empty line                RS1202
         J     WLM510                                            RS1202
.WLM500  ANOP                                                    RS0803
WLM500   DS    0H                                                RS1202
         STRING '   IWMRQRY-1',' FAILED - Returncode=',(LRETCODE,,X),  X
               '  Reasoncode=',(LRSNCODE,,X),                          X
               INTO=LINE                                         RS1202
         BRAS  R14,SPACE2          <== double space              RS1202
         J     WLM99                                             RS1202
WLM510   DS    0H                                                RS1202
         LM    R1,R2,WLM_QUACF_AREA    load addr and length      RS1202
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS1202
         JO    WLM520                  yes, jump                 RS1202
         FREEMAIN RU,LV=(R2),A=(R1)    free WLM work area        RS1202
         J     WLM99                                             RS1202
WLM520   DS    0H                                                RS1202
         LR    R0,R2                   length for FREEMAIN       RS1202
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES Free WLM work area
         J     WLM99                                             RS1202
WLM530   DS    0H                                                RS1202
         STRING '   IWMRQRY-1',' FAILED - Returncode=',(LRETCODE,,X),  X
               '  Reasoncode=',(LRSNCODE,,X),                    RS1202X
               INTO=LINE                                         RS1202
         BRAS  R14,SPACE2          <== double space              RS1202
.WLM99   ANOP
WLM99    END_PROC
         TITLE 'SHOWMVS &REL - Logger (IXGLOGR)'
*---------------------------------------------------------------------*
*                                                                     *
* System Logger (IXGLOGR)                                             *
*                                                                     *
*   Type             Structure                  Date        Time      *
*   *DASDONLY*       DFH.DCCPW01.DFHSHUNT       2002-10-21  04.18.58  *
*   *DASDONLY*       DFH.DCCP201.DFHSHUNT       2002-10-21  04.18.55  *
*   *DASDONLY*       DFH.DCCPW01.DFHLOG         2002-10-21  04.18.53  *
*   *DASDONLY*       DFH.DCCP202.DFHSHUNT       2002-10-21  04.18.51  *
*   *DASDONLY*       DFH.DCCP201.DFHLOG         2002-10-21  04.18.48  *
*   *DASDONLY*       DFH.DCCP202.DFHLOG         2002-10-21  04.18.46  *
*   *DASDONLY*       DFH.DCCP203.DFHSHUNT       2002-10-21  04.18.43  *
*   *DASDONLY*       DFH.DCCP203.DFHLOG         2002-10-21  04.18.41  *
*   *DASDONLY*       DFH.DCCPT01.DFHSHUNT       2002-10-21  04.18.39  *
*   *DASDONLY*       DFH.DCCPT01.DFHLOG         2002-10-21  04.18.38  *
*   *DASDONLY*       DFH.DCCPF01.DFHSHUNT       2002-10-21  04.18.36  *
*   *DASDONLY*       DFH.DCCPF01.DFHLOG         2002-10-21  04.18.34  *
*   *DASDONLY*       ATR.RRSAL10.ARCHIVE        2002-09-07  21.06.34  *
*   *DASDONLY*       ATR.RRSAL10.RESTART        2002-09-07  21.06.33  *
*   *DASDONLY*       ATR.RRSAL10.DELAYED.UR     2002-09-07  21.06.27  *
*   *DASDONLY*       ATR.RRSAL10.MAIN.UR        2002-09-07  21.06.25  *
*   *DASDONLY*       ATR.RRSAL10.RM.DATA        2002-09-07  21.06.23  *
*                                                                     *
*---------------------------------------------------------------------*
LOGR00   BEGIN_PROC KW=LOGR,AUTH=YES    BASEREG=NO               RS1002
         AIF   (NOT D'CVTH7703).LOGR99 OS/390 R10 ?
         TM    HBB7703,L'HBB7703       running on OS390 R10 ?
         JNO   LOGR99                  no, jump
         STRING '&TITLEPFX.System Logger (IXGLOGR)',INTO=LINE
         BRAS  R14,SPACE2
         STRING '  Type',13X,'Structure',18X,'Date',8X,'Time',         X
               INTO=LINE
         BRAS  R14,SPACE2
         L     R3,CVTECVT
         ICM   R3,B'1111',ECVTLSAB-ECVT(R3)                      RS0803
         JZ    LOGR95                                            RS0803
         USING LSAB,R3                                           RS0803
         ICM   R4,B'1111',LSABASCB     IXGLOGR ASCB              RS0803
         JZ    LOGR95                    ok, not active leave    RS0803
         USING ASCB,R4
*        CTA@ in IXGLOGR address space
         ESAR  R2                      Get current secondary asid
         STH   R2,WKCELL1              Save current secondary asid.
         AXSET AX==H'1'                Set auth
         LH    R2,ASCBASID             Get IXGLOGR asid
         STH   R2,WKCELL2              Save current secondary asid.
         SSAR  R2                      Set pcauth as secondary
         L     R3,LSABCTA@-LSAB(,R3)   Address of CTA
         DROP  R3,R4
         USING CTA@,R3
         LA    R14,CTA@HLEN             Set lenght of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from secondary asid
         LA    R3,CTA@HLEN(,R3)        Address of first CTA
         LA    R7,257                  number of CTA@ entries (101)
*                                      hardcoded !!!! formula
*                                      (CTA@length-8)/58
*loop
LOGR10   DS   0H
* get CTA-entry
         LA    R14,CTA@ELEN            Set length of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from secondary asid
         LA    R4,WORK256
         USING CTA@ENTR,R4
         ICM   R5,B'1111',CTA@STRC
         JZ    LOGR80
         ICM   R5,B'1111',CTA@LSMF_F    first LSMF
         JZ    LOGR80
         DROP  R4                      WORK256 no longer needed
         LR    R4,R5                   R4 is free so reuse
* loop
LOGR30   DS 0H
         LA    R14,LSMFLEN             Set length of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256+100(R14),0(R4),R15 Copy data from secondary asid
         LA    R4,WORK256+100
         USING LSMF,R4
         LA    R1,LSMFTOD              TOD
         BRAS  R14,STCKCONV            convert TOD clock to decimal
         STRING 2X,LSMFTYPE,1X,LSMFDSN,1X,STCKDATE,2X,(STCKTIME,8),    X
               INTO=LINE
         BRAS  R14,SPACE1              Single Space
         LA    R14,LCBLEN
         SR    R15,R15
         ICM   R5,B'1111',LSMFLCB
         JZ    LOGR70
         MVCP  WORK256+200(R14),0(R5),R15
         LA    R5,WORK256+200
         USING LCB,R5
*        data from LCB present but not displayed
LOGR70   DS 0H
         ICM   R4,B'1111',LSMFFORW     next LSMF
         JNZ   LOGR30                    more entries
*  endloop
LOGR80   DS 0H
         LA    R3,CTA@ELEN(,R3)        point to CTA@ entry
         BCT   R7,LOGR10               Do until number of entries
*endloop
LOGR90   DS 0H
         LH    R2,WKCELL1
         SSAR  R2                      Should be same as primary
         AXSET AX==H'0'                Reset auth
         XC    WKCELL1,WKCELL1
         BAL   R14,BLANK1              blank line
         J     LOGR99                                            RS0803
LOGR95   DS 0H                                                   RS0803
         STRING '  IXGLOGR not active',INTO=LINE                 RS0803
         BRAS  R14,SPACE2                                        RS0803
.LOGR99  ANOP
LOGR99   END_PROC
         TITLE 'SHOWMVS &REL - Resource Recovery Manager'
*---------------------------------------------------------------------*
*                                                                     *
*Resource Recovery Manager                                            *
*                                                                     *
* RRS-Name           Token (char - hex)   Version  Flags  State  Count*
* DSN.RRSPAS.IBM.DB25        l    0000D300   0000   0000      4      7*
* DSN.RRSATF.IBM.DB25        l    0000D300   0000   0000      4      7*
* DSN.RRSATF.IBM.DB26             00000000   0000   0000      6      7*
* DSN.RRSPAS.IBM.DB26             00000000   0000   0000      6      7*
*                                                                     *
*---------------------------------------------------------------------*
RRS00    BEGIN_PROC KW=RRS,BASEREG=YES   ATRQUERY require        RS0302
         AIF   (NOT D'CVTH6603).RRS99  Resource Manager?           +RS
         TM    HBB6603,L'HBB6603       running on OS390 R3 ?       +RS
         JNO   RRS99                   no, jump                    +RS
RRS10    STRING '&TITLEPFX.Resource Recovery Service (RRS)',INTO=LINE   S
         BRAS  R14,SPACE2                                          +RS
         BRAS  R14,WORKADDR            LOCATE WORK AREA            +RS
         LR    R3,R1                   R3 = workarea               +RS
         AHI   R0,-4096                prevent 0C4 on last page  RS0601
         ST    R0,ANSLEN               try this length first     RS0601
         ST    R3,ANSAREA              Put output at this address  +JM
         MVC   ANSLEN,=F'4096'                                   DT0800
         ATRQUERY REQUEST=RMINFO,AREAADDR=ANSAREA,AREALEN=ANSLEN,      X
               COUNT=QUERYLEN,RETCODE=LRETCODE,RSNCODE=LRSNCODE,       X
               MF=(E,ATRQUERYL,COMPLETE)                        +JM0199
         CH    R0,=Y(ATRQUERY_RRS_NOT_ACTIVE) RRS active?
         JE    RRS80                   No                          +RS
         LTR   R15,R15                 Success?                    +RS
         JNZ   RRS90                   No, error                   +RS
         USING ATRFZRM,R3              tell assembly
         AIF   ('U' EQ T'ATRFZRMVERSION).RRS55  OW29566 installed ?
         STRING '  RRS-Name',26X,'Token     (char - hex)',14X,         X
               'Version  Flags  State  Count',                         X
               INTO=LINE
         AGO   .RRS55A
.RRS55   ANOP
         STRING '  RRS-Name',26X,'Token     (char - hex)',16X,         X
               'Flags  State  Count',                                  X
               INTO=LINE
.RRS55A  ANOP
         BRAS  R14,SPACE2              Double Space
RRS20    DS    0H                                                  +JM
         AIF   ('U' EQ T'ATRFZRMVERSION).RRS56 OW29566 installed ?
         STRING 2X,ATRFZRMRMNAME,2X,                                   X
               ATRFZRMRMTOKEN,(ATRFZRMRMTOKEN,,X),7X,                  X
               (ATRFZRMVERSION,2,X),3X,                                X
               (ATRFZRMFLAGS,2,X),2X,                                  X
               (ATRFZRMRMSTATE,F,R5B),2X,                              X
               (QUERYLEN,F,R5B),                                       X
               INTO=LINE
         AGO   .RSS56A
.RRS56   ANOP
         STRING 2X,ATRFZRMRMNAME,2X,                                   X
               ATRFZRMRMTOKEN,(ATRFZRMRMTOKEN,,X),7X,                  X
               (ATRFZRMFLAGS,2,X),2X,                                  X
               (ATRFZRMRMSTATE,F,R5B),2X,                              X
               (QUERYLEN,F,R5B),                                       X
               INTO=LINE
.RSS56A  ANOP
         TR    LINE,TRTDOTS      convert non-printable to dots   RS0102
         BRAS  R14,SPACE1              Single Space                +JM
         ICM   R3,B'1111',ATRFZRMNEXT  any more                    +JM
         JNZ   RRS20                   yes                         +JM
         BRAS  R14,BLANK1              Double Space
         J     RRS99                   end                         +JM
RRS80    STRING '  RRS is not active',INTO=LINE                    +RS
         J     RRS98                   end                         +RS
RRS90    STRING '  ATRQUERY FAILED - ',                                X
               ' Returncode=',(LRETCODE,F,L),                          X
               ' Reasoncode=',(LRSNCODE,F,L),                          X
               ' Size=',(ANSLEN,F,L),                                  X
               INTO=LINE                                           +RS
RRS98    BRAS  R14,SPACE2              Double Space                +RS
.RRS99   ANOP                                                      +RS
RRS99    END_PROC
         TITLE 'SHOWMVS &REL - Automatic Restart Manager'
*---------------------------------------------------------------------*
*                                                                  +RS*
*ARM Data                                                          +RS*
*                                                                  +RS*
*  Element           Init-Sys Curr-Sys Clone Restart-Group    Jobname *
*---------------------------------------------------------------------*
ARM00    BEGIN_PROC KW=ARM,AUTH=YES,BASEREG=YES  GETMAIN req     RS0302
         STRING '&TITLEPFX.ARM Data',INTO=LINE                     +RS
         BRAS  R14,SPACE2              Double Space                +RS
         BRAS  R14,WORKADDR            allocate XCF Answer Area    +RS
         LR    R5,R1                   remember getmained storage  +RS
         USING QUAHDR,R5               tell assembly               +RS
         MVC   ANSLEN,=F'1024'         try this length first       +RS
*
*        Find out how much storage is needed for the answer area
*
         IXCQUERY REQINFO=ARMS_ALLDATA,                                X
               ANSAREA=QUAHDR,ANSLEN=ANSLEN,                           X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   +RS
         CH    R0,=Y(QUAARSNNOARMDSN)  ARM dataset defined ?       +RS
         JE    ARMD80                  No
         CH    R0,=Y(QUAARSNRECORDSREMAIN) Data to short
         JE    ARMD05                  No
         LTR   R15,R15                 Success?
         JNZ   ARMD90                  No, error                   +RS
         J     ARMD15                  process data
ARMD05   DS    0H
*        Allocate a work area for the answer area and request the
*        data again
         MVI   WKCELL1,X'FF'           remember getmain
         L     R2,QUAHTLEN             How much is required        +JM
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    ARMD06                  yes, jump
         GETMAIN RU,LV=(R2)            allocate ARM work area
         J     ARMD10
ARMD06   DS    0H
         LR    R0,R2                   Length of storage
         LA    R1,1                    LOC=ANY
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES             RS1002
ARMD10   DS    0H
         STM   R1,R2,WLM_QUACF_AREA    save addr and length
         LR    R5,R1                   remember getmained storage  +RS
         ST    R2,ANSLEN               Size of answer area         +JM
         IXCQUERY REQINFO=ARMS_ALLDATA,                                X
               ANSAREA=QUAHDR,ANSLEN=ANSLEN,                           X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   +RS
         LTR   R15,R15                 Success?                    +RS
         JNZ   ARMD90                  No, error                   +RS
ARMD15   DS    0H
         ICM   R7,B'1111',QUAH#REC     record counter              +RS
         JZ    ARMD80                  no record, quit             +RS
         L     R6,QUAHSGOF             get offset                  +RS
         LA    R6,QUAHDR(R6)           point to the records        +RS
         USING QUAARMS,R6              tell assembly               +RS
         STRING '  Element',10X,'Init-Sys Curr-Sys Clone ',            X
               'Restart-Group    Jobname',INTO=LINE
         BRAS  R14,SPACE1              Single Space                +RS
*loop
ARMD20   STRING 2X,QUAARMSELEMENT,1X,QUAARMSINITSYS,1X,                X
               QUAARMSCURRSYS,1X,QUAARMSINITCLONE,4X,                  X
               QUAARMSRESTARTGROUP,1X,QUAARMSJOBNAME,INTO=LINE     +RS
         BRAS  R14,SPACE1                                          +RS
         LA    R6,QUAARMSLENG(R6)                                  +RS
         BRCT  R7,ARMD20                                           +RS
*endloop
         J     ARMD98                                              +RS
ARMD80   STRING '  ARM-Dataset not defined',INTO=LINE              +RS
         J     ARMD97                  end                         +RS
ARMD90   STRING '  IXCQUERY (ARM) FAILED - ',                          X
               ' Returncode=',(LRETCODE,F,L),                          X
               ' Reasoncode=',(LRSNCODE,F,L),                          X
               ' Size=',(ANSLEN,F,L),                                  X
               INTO=LINE                                           +RS
ARMD97   BRAS  R14,SPACE1              Single Space                +RS
ARMD98   BRAS  R14,BLANK1              Blank line                  +RS
         CLI   WKCELL1,X'FF'           getmain done ?
         JNE   ARMD99
         LM    R1,R2,WLM_QUACF_AREA    load addr and length
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    ARMD98_1                yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free ARM work area
         J     ARMD99
ARMD98_1 DS    0H
         LR    R0,R2                   length for FREEMAIN
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES Free ARM workarea
.ARMD99  ANOP                                                      +RS
ARMD99   END_PROC                                                  +RS
         TITLE 'SHOWMVS &REL - Open Catalogs'
*---------------------------------------------------------------------*
*                                                                     *
*Open Catalogs:                                                       *
*                                                                     *
*  SYS1.SYSTMCAT                                  MVSCAT   3380   4600*
*  ICF.USER.CATALOG                               MVSCAT   3380   0000*
*  UCAT.DB2                                       DB9001   3390   0100*
*                                                                     *
*---------------------------------------------------------------------*
OPENCAT  BEGIN_PROC KW=CATALOGS,BASEREG=NO                       RS0302
         STRING '&TITLEPFX.Open Catalogs:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  Data Set Name',34X,'Volser',13X,'Unit    FLags',    X
               INTO=LINE                                         RS0701
         BRAS  R14,SPACE1              Double Space
         STRING '    Hit% -Records- -Searches --Found-- -Deletes-',    X
               ' -Updates- --Purge--',INTO=LINE                  RS0701
         BRAS  R14,SPACE1              Double Space
         L     R5,CVTCBSP              AMCBS
*        #SNAP ADDR=(R5),LENGTH=144    debug code
         L     R6,CBSCAXCN-AMCBS(,R5)  FIRST IGGCAXWA IN CHAIN
         USING IGGCAXWA,R6
*        #SNAP ADDR=(R6),LENGTH=260    debug code
*        ST    R10,APFTABLE            for SORT routine
*LOOP
OPENCAT2 MVC   LINE,BLANKS
         TM    HDZ11C0,L'HDZ11C0       DFSMS/MVS 1.3 ?
         JNO   OPENCAT2L               no, jump
         ICM   R7,B'1111',CAXREUCB     Real UCB (31-bit) ?
         JNZ   OPENCAT2X               yes, exit
OPENCAT2L EQU  *
         L     R7,CAXUCB               UCB ADDR
OPENCAT2X EQU  *
         USING UCBOB,R7
         BRAS  R14,GETUNIT             GET UNITNAME
         MVC   DSNAME,CAXCNAM          DSNAME
         CLI   DSNAME,C' '             .
         JNE   *+8                     no, jump
         MVI   DSNAME,C'?'             yes, replace space with ?
         MVC   VOLSER,UCBVOLI          VOLSER
**       MVC   VOLSER,CAXVOLID         VOLSER (CRA)
         MVC   WKCELL1,BLANKS          reset MASTER
         MVC   WKCELL3(6),=C'N-----'   default                   RS0301
         ICM   R2,B'1111',CAXDSABP     Allocate to CAS?          RS1199
         JZ    OPENCAT2_1               no                       RS1199
         MVI   WKCELL3,C'Y'             Yes, set indicator       RS1199
OPENCAT2_1 DS 0H                                                 RS1199
         TM    CAXFLG3,CAXF3ICF        Check SMS                 RS1199
         JZ    OPENCAT2_2               no                       RS1199
*delete  ICM   R2,B'1111',CAXUCB       UCB                       DL0200
         LTR   R7,R7                                             DL0200
         JZ    OPENCAT2_2               no                       RS1199
         TM    1(R7),X'20'                                       DL0200
         JZ    OPENCAT2_2               no                       RS1199
         MVI   WKCELL3+1,C'S'          Yes set SMS Flag          RS1199
OPENCAT2_2 DS 0H                                                 RS1199
         MVI   WKCELL3+2,C'D'          mark as deleted           RS1199
         TM    CAXFLG2,CAXF2DT         Deleted?                  RS1199
         JNZ   OPENCAT2_10               yes ok let the D-flag   RS1199
         MVI   WKCELL3+2,C'C'          mark as closed            RS1199
         ICM   R2,B'1111',CAXACB       ACB present               RS1199
         JZ    OPENCAT2_3                no, check ISC           RS1199
         ICM   R2,B'1111',4(R2)        Check ACB                 RS1199
         JZ    OPENCAT2_10               ok let the C-flag       RS1199
OPENCAT2_3 DS 0H                                                 RS1199
         MVI   WKCELL3+2,C'V'          Mark as VLF               RS1199
         TM    CAXFLG6,CAXCDSCA        VLF?                      RS1199
         JNZ   OPENCAT2_9                yes, ok let the V-Flag  RS0402
         MVI   WKCELL3+2,C'I'          Mark as ISC               RS1199
         ICM   R2,B'1111',CAXISC       ISC?                      RS1199
         JNZ   OPENCAT2_9                 yes, ok let the I-Flag RS0301
         MVI   WKCELL3+2,C'-'          mark as neutral           RS1199
OPENCAT2_9  DS 0H                                                RS0301
         TM    HDZ11E0,L'HDZ11E0       DFSMS/MVS 1.5 ?           RS0301
         JNO   OPENCAT2_10             no, jump                  RS0301
         TM    CAXFLG4,CAXLOCK         Locked?                   RS0301
         JZ    OPENCAT2_10               no                      RS0301
         MVI   WKCELL3+5,C'K'          Locked                    RS0301
OPENCAT2_10 DS 0H                                                RS1199
         TM    CAXFLG3,CAXF3ICF+CAXF3SO4+CAXF3SHD                RS1199
         JNO   OPENCAT2_11               no                      RS1199
         MVI   WKCELL3+4,C'R'          Set R-Flag                RS1199
         TM    HDZ11E0,L'HDZ11E0       DFSMS/MVS 1.5 ?           RS0301
         JNO   OPENCAT2_11             no, jump                  RS0301
         ICM   R2,B'1111',CAXECS       Check ECS indicator       RS0301
         JZ    OPENCAT2_11               jump no ECS             RS0301
         MVI   WKCELL3+4,C'E'          Set E-Flag                RS1199
OPENCAT2_11 DS 0H                                                RS1199
         TM    CAXFLG5,CAXLCDB         ATL?                      RS1199
         JZ    OPENCAT2_12               no                      RS1199
         MVI   WKCELL3+3,C'A'          Set A-Flag                RS1199
OPENCAT2_12 DS 0H
         TM    CAXFLGS,CAXMCT          master catalog?
         JZ    OPENCAT3                no, jump
         MVC   WKCELL1,=C'Master, '    first cat is master cat
*RS0701  MVC   WKCELL2(1),DSNAME       save first char of DSN
*RS0701  MVI   DSNAME,0                make sure MCAT ends up first
OPENCAT3 DS    0H
         STRING UNITNAME,                                              X
               (WKCELL3,6,T),2X,       Flags                     RS0301X
               (WKCELL1,,T),           MASTER                          X
               'Flags=',(CAXFLGS,4,X),(CAXFLG4,1,X),(CAXFLG6,1,X), RS11X
               ',ACB=',(CAXACB+1,3,X),                                 X
               INTO=(DEVTYPE+10,NEXTLINE)                        RS1199
         BRAS  R14,SPACE1          <== next line
         SR    R1,R1                                             RS0701
         CLC   CAXSEAR,=F'0'                                     RS0701
         JE    OPENCAT5                                          RS0701
         L     R1,CAXFOUND             No of found               RS0701
         M     R0,=F'100'              Mutlitply by 100          RS0701
         D     R0,CAXSEAR              No of searches            RS0701
OPENCAT5 DS    0H
         STRING 3X,((R1),,R3B),'%',                                    X
               2X,(CAXRECO,F,R9B),1X,(CAXSEAR,F,R9B),                  X
               1X,(CAXFOUND,F,R9B),1X,(CAXDELET,F,R9B),                X
               1X,(CAXUPD,F,R9B),1X,(CAXPURGE,F,R9B),                  X
               INTO=LINE                                         RS0701
         BRAS  R14,SPACE1          <== next line                 RS0701
         ICM   R6,B'1111',CAXCHN       NEXT CAXWA
         JNZ   OPENCAT2                PROCESS IF NOT END-OF-CHAIN
*ENDLOOP
         DROP  R6,R7                   IGGCAXWA, UCBOB
*        LA    R2,APFTABLE             TABLE DESC
*        BRAS  R14,TRIZO               SORT BY DSN
*        L     R1,APFTABLE             point to first line (MCAT)
*        MVC   DSNAME-LINE(1,R1),WKCELL2 restore first char of DSN
         BRAS  R14,BLANK1              BLANK LINE
         STRING '  Y/N-Allocated to CAS, S-SMS, V-VLF, I-ISC, ',       X
               'C-Closed, R-Shared, A-ATL, E-ECS, K-Locked',     RS0301X
               INTO=LINE                                         RS0301
         BRAS  R14,SPACE2                                        RS1199
         AIF   (NOT D'CVTH7703).OPENCAT9 OS/390 R10?             RS0803
         TM    HBB7703,L'HBB7703       running on OS/390 R10?    RS0803
         JZ    OPENCAT9                no, jump                  RS0803
         TM    AUTHORIZED,L'AUTHORIZED                           RS0803
         JNO   OPENCAT9                                          RS0803
         MODESET EXTKEY=ZERO        <- switch to KEY=0           RS0803
         L     R6,CBSCRT-AMCBS(,R5)    CRT reside in KEY=5       RS0803
         USING CRT,R6                                            RS0803
         USING AMCBS,R5                                          RS0803
*        #SNAP ADDR=(R6),LENGTH=4095   debug code                RS0803
         STRING '  Catalog Component Level   = ',CRTCOMP,              X
               '  Catalog Address Space ASN = ',(CRTASID,,X),          X
               INTO=LINE                                         RS0803
         BRAS  R14,SPACE1                                        RS0803
         ICM   R1,B'1111',CRTSULIM          If zero default is 180
         JNZ   OPENCAT6_1                                        RS0803
         LHI   R1,180                       default              RS0803
OPENCAT6_1 DS    0H                                              RS0803
         STRING '  Service Task Upper Limit  = ',((R1),F,R8B),         X
               '  Service Task Lower Limit  = ',(CRTSTLOW,F,R8B),      X
               INTO=LINE                                         RS0803
         BRAS  R14,SPACE1                                        RS0803
         STRING '  Highest # Service Tasks   = ',(CRTHTASK,F,R8B),     X
               '  Current # Service Tasks   = ',(CRTSTCUR,F,R8B),      X
               INTO=LINE                                         RS0803
         BRAS  R14,SPACE1                                        RS0803
         LA    R1,=C'No '                                        RS0803
         TM    CRTFLAG1,CRTALIT    Alias table available         RS0803
         JNZ   OPENCAT6_2                                        RS0803
         LA    R1,=C'Yes'                                        RS0803
OPENCAT6_2 DS    0H                                              RS0803
         STRING '  Maximum # Open Catalogs   = ',(CRTOPCAT,F,R8B),     X
               '  Alias Table available     = ',((R1),3),              X
               INTO=LINE                                         RS0803
         BRAS  R14,SPACE1                                        RS0803
         IC    R1,CBSALIL          Alias level                   RS0803
         STCM  R1,B'0001',WKCELL1                                RS0803
         OI    WKCELL1,X'F0'                                     RS0803
         LA    R1,=C'On '                                        RS0803
         TM    CBSFLAG,CBSSYSC    SYS% to SYS1 conversion        RS0803
         JNZ   OPENCAT6_3                                        RS0803
         LA    R1,=C'Off'                                        RS0803
OPENCAT6_3 DS    0H                                              RS0803
         STRING '  Alias Levels specified    = ',(WKCELL1,1),7X,       X
               '  SYS% to SYS1 conversion   = ',((R1),3),              X
               INTO=LINE                                         RS0803
         BRAS  R14,SPACE1                                        RS0803
         STRING '  CAS Mother Task           = ',(CRTCTASK,,X),        X
               '  CAS Modify Task           = ',(CRTMTASK,,X),         X
               INTO=LINE                                         RS0803
         BRAS  R14,SPACE1                                        RS0803
         STRING '  CAS Analysis Task         = ',(CRTANTSK,,X),        X
               '  CAS Allocation Task       = ',(CRTATASK,,X),         X
               INTO=LINE                                         RS0803
         BRAS  R14,SPACE1                                        RS0803
         MVC   WKCELL1,=C'None'                                  RS0803
         SR    R1,R1                                             RS0803
         IC    R1,CRTNOTEX            Notify extent              RS0803
         LTR   R1,R1                                             RS0803
         JZ    OPENCAT6_4                                        RS0803
         STRING ((R1),,R3B),'%',INTO=WKCELL1                     RS0803
OPENCAT6_4 DS    0H                                              RS0803
         STRING '  Volcat HI-Level Qualifier = ',CBSHLQ,               X
               '  Notify Extent             = ',(WKCELL1,4),           X
               INTO=LINE                                         RS0803
         BRAS  R14,SPACE1                                        RS0803
         LA    R1,=C'On '                                        RS0803
         TM    CBSFLAG,CBSDELW     Delete UCAT/VVDS warning      RS0803
         JNZ   OPENCAT6_5                                        RS0803
         LA    R1,=C'Off'                                        RS0803
OPENCAT6_5 DS    0H                                              RS0803
         LA    R2,=C'Enabled '                                   RS0803
         TM    CRTFLAG3,CRTDSCHK   Dataset Syntax checking       RS0803
         JNZ   OPENCAT6_6                                        RS0803
         LA    R2,=C'Disabled'                                   RS0803
OPENCAT6_6 DS    0H                                              RS0803
         STRING '  Delete UCAT/VVDS Warning  = ',((R1),3),5X,          X
               '  Data set Syntax checking  = ',((R2),8),              X
               INTO=LINE                                         RS0803
         BRAS  R14,SPACE2                                        RS0803
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
.OPENCAT9 ANOP
OPENCAT9 DS    0H
         END_PROC
         TITLE 'SHOWMVS &REL - Page Data Sets'
*---------------------------------------------------------------------*
*                                                                     *
*Page Data Sets:
*
*  Data Set Name                                  Volser   Type     Use
*  SYS2.ALF0.PLPA2                                SYS109   PLPA      77
*  SYS2.ALF0.COMMON                               SYS105   COMMON     0
*  SYS2.ALF0.LOCAL1.PAGEDS                        SYS114   LOCAL      0
*  SYS2.ALF0.LOCAL3.PAGEDS                        SYS101   LOCAL      0
*                                                                     *
*  Free Aux Slots: 314495                                             *
*                                                                     *
*  Total PAGE-DS: 10        Total used:   5 incl. 1 reserved slot for D
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
PAGEDS   BEGIN_PROC KW=PAGE,BASEREG=NO                           RS0302
         STRING '&TITLEPFX.Page Data Sets:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  Data Set Name',34X,'Volser   Type     Used    Slots X
                Slots/cyl',INTO=LINE
         BRAS  R14,SPACE1              <== next line
         L     R4,CVTASMVT             POINT TO ASM VECTOR TABLE
         L     R2,ASMPART-ASMVT(,R4)   POINT TO PAGE ACT REF TABLE
         USING PART,R2
         L     R5,PARTDSNL             POINT TO 1ST PAGE DSN
         LA    R6,PARTENTS             POINT TO 1ST PARTE
         USING PARTENT,R6
         L     R7,PARTSIZE             NUMBER OF PART ENTRIES
*LOOP
PAGEDS1  TM    PAREFLG1,PARENUSE       THIS PARTE IN USE?
         JO    PAGEDS8                 NO, SKIP IT
         MVC   LINE,BLANKS             BLANK LINE
         MVC   DSNAME,0(R5)            MOVE DSNAME
         L     R1,PAREUCBP             UCB ADDRESS
         MVC   VOLSER,UCBVOLI-UCBOB(R1)  VOLSER
         TM    PAREFLG1,PARENVIO       IS THIS A NON-VIO DATA SET?
         JZ    PAGEDS4                 NO, JUMP
         MVC   YYYYMMDD(6),=C'NONVIO'  YES, SHOW IT
*
PAGEDS4  BRAS  R1,PAGEDS4B
         DC    AL1(PAREPLPA),C'PLPA  '
         DC    AL1(PARECOMM),C'COMMON'
         DC    AL1(PAREDPLX),C'DUPLEX'
         DC    AL1(PARELOCL),C'LOCAL '
         DC    AL1(00),0H'0'
PAGEDS4B BRAS  R14,SCAN_TM             CALL SCAN RTNE
         DC    Y(1+6)               0  LENGTH OF A TABLE ENTRY
         TM    PARETYPE,*-*         2  TEST LABEL TYPE FLAGS
         MVC   DEVTYPE(6),1(R1)     6  TYPE OF PAGE DATA SET
*
         L     R1,PARESZSL             GET TOTAL SIZE
         S     R1,PARESLTA             SLOTS AVAILABLE
         M     R0,=F'100'              CALCULATE PERCENTAGE USED
         D     R0,PARESZSL             CALCULATE PERCENTAGE USED
         L     R3,PAREPATP             Point to PAT            DL9809
         USING PAT,R3                                          DL9809
         STRING ((R1),,R3B),'%',                                       X
               (PARESZSL,F,R9B),       slots                           X
               (PATCYLSZ,H,R7B),       slots/cyl                       X
               INTO=(CATUNCAT,NEXTLINE)
         BRAS  R14,SPACE1          <== next line
PAGEDS8  LA    R5,44(,R5)              NEXT DSN
         LA    R6,PARTELEN(,R6)        NEXT PARTE
         BRCT  R7,PAGEDS1
*ENDLOOP
         BRAS  R14,BLANK1              BLANK LINE
         AIF   (NOT D'CVTH7703).PAGEDS9 R10 ?                    RS0803
         TM    HBB7703,L'HBB7703       running on OS/390 R10     RS0803
         JZ    PAGEDS9                 no, jump                  RS0803
         SYSEVENT FREEAUX                                        RS0203
         ST    R0,WKCELL1                                        RS0203
         STRING '  Free Aux Slots: ',(WKCELL1,F,L9B),            RS0203X
               INTO=LINE                                         RS0203
         BRAS  R14,SPACE2              Single Space              RS0203
.PAGEDS9 ANOP                                                    RS0803
PAGEDS9  DS    0H                                                RS0203
         STRING '  Total PAGE-DS: ',(PARTSIZE,F,L9B),            RS0203X
               ' Total used: ',(PARTEUSE,H,R3B),                 RS0203X
               ' incl. 1 reserved slot for Duplex',INTO=LINE     RS0203
         BRAS  R14,SPACE2              Double Space              RS0203
         END_PROC
         TITLE 'SHOWMVS &REL - Dump Data Sets and Options'
*---------------------------------------------------------------------*
*                                                                     *
*DUMP Data Sets and Options:                                          *
*                                                                     *
*  SYS1.DUMP00                                    MVSRES 911214  Full *
*    Date=1996-09-28 Time=07.11.52 Title=CICS DUMP: SYSTEM=CICSPROD   *
*  SYS1.DUMP01                                    MVSRES 911214  Empty*
*                                                                     *
*---------------------------------------------------------------------*
DUMPDS   BEGIN_PROC KW=DUMP,BASEREG=NO                           RS0302
         STRING '&TITLEPFX.DUMP Data Sets and Options:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R4,CVTRTMCT             RTM CTL TABLE
         USING RTCT,R4
         ICM   R5,B'1111',RTCTSDDS     FIRST ENTRY IN SDDS Q
         JZ    DUMP30                  dynalloc, jump
         USING SDDSQ,R5
         LH    R6,RTCTSDDC             NUMBER OF ENTRIES IN SDDSQ
*LOOP
DUMP25   MVC   LINE,BLANKS
         STRING 'SYS1.DUMP',SDDSQDAN,INTO=DSNAME
         MVI   VOLSER,C'?'             $LOCATE required
         MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVC   CATUNCAT(5),=C'Empty'   set status
         TM    SDDSQFLG,SDDSQDDS       data set empty ?
         JZ    DUMP25N                 yes, jump
         MVI   CATUNCAT,C'%'           set status based on DS1LSTAR
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         JNO   DUMP25N                 no, jump
         BRAS  R14,SPACE1          <== BUMP LINE PTR
         STRING '. (Date and title are being obtained)',INTO=LINE
DUMP25N  BRAS  R14,SPACE1          <== BUMP LINE PTR
         L     R5,SDDSQFWD             next SDDSQ entry
         BRCT  R6,DUMP25               process it
*ENDLOOP
         BRAS  R14,BLANK1              BLANK LINE
         DROP  R5                      SDDSQ
*---------------------------------------------------------------------*
*                                                                     *
*  Automatic Allocation is active                                     *
*                                                                     *
*  DSNAME pattern: NSSLNSS.NSSFDUMP.&SYSNAME..D&LDATE..T&LTIME..S&SEQ.*
*                                                                     *
*  NSSLNSS.NSSFDUMP.D1.D961030.T005533.S00001     SMS445 951214  Full *
*    Date=1996-09-28 Time=07.11.52 Title=CICS DUMP: SYSTEM=CICSPROD   *
*                                                                     *
*---------------------------------------------------------------------*
DUMP30   EQU   *
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         JNO   DUMP40                  no, exit
         L     R5,RTCTRTSD             RTCT SDUMP Extension
         USING RTSD,R5
         BRAS  R14,EXECKEY0            execute next instr in key=0
         ICM   R6,B'1111',RTSDXADR     SDRTX?
         JZ    DUMP40                  no, exit
         USING SDRTX,R6
         LA    R14,SDRTX_LENGTH        length
         SLR   R15,R15                 source key is zero
         MVCK  WORK256(R14),SDRTX,R15   Move line to buffer
         LA    R6,WORK256              un-protected SDRTX
*
*        DSNAME pattern
*
         XR    R1,R1                   Clear R1
         IC    R1,SDRTX_DSNPATL        Length of DSNAME pattern
         STRING '  DSNAME pattern: ',(SDRTX_DSNPAT,(R1)),INTO=LINE
         BRAS  R14,SPACE2              BLANK LINE
*
*        Automatically-allocated DUMP data sets
*
         TM    SDRTXFLAGS,SDRTXFDYN    dynalloc active?
         JZ    DUMP40                  No, exit
         STRING '  Automatic Allocation is active',INTO=LINE
         BRAS  R14,SPACE2              BLANK LINE
         ICM   R7,B'1111',SDRTX_SDDSQ1 First automatic SDDSQ
         JZ    DUMP39                  None, exit
         USING SDDSQ,R7
         SLR   R2,R2
         IC    R2,SDRTX_SDDSQ#         Load number of DUMPDS
*loop
DUMP35   MVC   LINE,BLANKS
         MVC   DSNAME,SDDSQDSN         move dsname
         MVI   VOLSER,C'?'             $LOCATE required
         MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVC   CATUNCAT(5),=C'Empty'   set status
         TM    SDDSQFLG,SDDSQDDS       data set empty ?
         JZ    DUMP35N                 yes, jump
         MVI   CATUNCAT,C'%'           set status based on DS1LSTAR
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         JNO   DUMP35N                 no, jump
         BRAS  R14,SPACE1          <== BUMP LINE PTR
         STRING '. (Date and title are being obtained)',INTO=LINE
DUMP35N  BRAS  R14,SPACE1          <== BUMP LINE PTR
         L     R7,SDDSQFWD             Next SDDSQ
         BRCT  R2,DUMP35
*endloop
         BRAS  R14,BLANK1              BLANK LINE
         J     DUMP40
DUMP39   DS    0H
         STRING 'No active Dump dataset(s) found',INTO=LINE
         BRAS  R14,SPACE2              NEXT LINE
*---------------------------------------------------------------------*
*                                                                     *
*  SYSABEND ADD SDATA=(NUC,SQA,LSQA,SWA,TRT,CB,ENQ,DM,IO,ERR,PCDATA,  *
*               SUM),PDATA=(SA,REGS,LPA,JPA,PSW,SPLS,SUBTASKS)        *
*  SYSUDUMP ADD SDATA=(LSQA,SWA,TRT,CB,ENQ,DM,IO,ERR,PCDATA,SUM),     *
*               PDATA=(SA,REGS,LPA,JPA,PSW,SPLS,SUBTASKS)             *
*  SYSMDUMP ADD SDATA=(NUC,SQA,LSQA,SWA,TRT,RGN,LPA,CSA,SUM,GRSQ)     *
*     SDUMP ADD OPTIONS=(ALLPSA,SQA,LSQA,RGN,LPA,TRT,CSA,SWA,SUMDUMP, *
*               ALLNUC,Q=NO,GRSQ,COUPLE,XESDATA,WLM)                  *
*           TYPE=(XMEME)                                              *
*           BUFFERS=0K   MAXSPACE=500M   MSGTIME=99999 Minutes        *
*                                                                     *
*---------------------------------------------------------------------*
DUMP40   EQU   *
         LA    R3,=C'ADD '             Take the default          RS0402
         TM    RTCTSAO+3,X'02'         ADD mode                  RS0402
         JZ    *+8                     Yes                       JM1101
         LA    R3,=CL4'OVER'           OVER mode                 RS0402
         STRING '  SYSABEND ',((R3),4,T),' SDATA=(',INTO=LINE    JM1101
         L     R0,=X'80000000'         first bit of first byte
*        LA    R1,DUMPSDAT             SDATA parms             JWMJUN95
         BASR  R1,0                    Next instr.               RS0402
         AHI   R1,DUMPSDAT-*                                     RS0402
         LA    R2,RTCTSAO              SYSABEND options
         BRAS  R3,DUMP80               edit SDATA options
         STRING ',PDATA=(',INTO=(1(R6),NEXTLINE)
         BRAS  R3,DUMP80               edit PDATA options
         BRAS  R14,SPACE1          <== next line
*
         LA    R3,=C'ADD '             Take the default          RS0402
         TM    RTCTSUO+3,X'02'         ADD mode                  JM1101
         JZ    *+8                     Yes                       JM1101
         LA    R3,=CL4'OVER'           OVER mode                 RS0402
         STRING '  SYSUDUMP ',((R3),4,T),' SDATA=(',INTO=LINE    JM1101
         L     R0,=X'80000000'         first bit of first byte
*        LA    R1,DUMPSDAT             SDATA parms             JWMJUN95
         BASR  R1,0                    Next instr.               RS0402
         AHI   R1,DUMPSDAT-*                                     RS0402
         LA    R2,RTCTSUO              SYSUDUMP options
         BRAS  R3,DUMP80               edit SDATA options
         STRING ',PDATA=(',INTO=(1(R6),NEXTLINE)
         BRAS  R3,DUMP80               edit PDATA options
         BRAS  R14,SPACE1          <== next line
*
         LA    R3,=C'ADD '             Take the default          RS0402
         TM    RTCTSYO+3,X'02'         ADD mode                  JM1101
         JZ    *+8                     Yes                       JM1101
         LA    R3,=CL4'OVER'           OVER mode                 RS0402
         STRING '  SYSMDUMP ',((R3),4,T),' SDATA=(',INTO=LINE    JM1101
         L     R0,=X'80000000'         first bit
*        LA    R1,DUMPMDMP             option table
         BASR  R1,0                    Next instr.               RS0402
         AHI   R1,DUMPMDMP-*                                     RS0402
         LA    R2,RTCTSYO              SYSMDUMP options          JM1101
*        STRING '  SYSMDUMP SDATA=(',INTO=LINE
         BRAS  R3,DUMP80               edit options
*        TM    RTCTMEX1,RTCTMXGR       GRSQ?                   JWMJUN95
         TM    RTCTSMX1,RTCTMGRS       GRSQ?                     JM1101
         JZ    DUMP52                  NO                      JWMJUN95
         STRING ',GRSQ)',INTO=(0(R6),NEXTLINE)                 JWMJUN95
         LA    R6,5(,R6)               skip over to the )      JWMJUN95
DUMP52   DS    0H                                              JWMJUN95
         BRAS  R14,SPACE1          <== next line
*
         LA    R3,=C'ADD '             OVER mode                 RS0402
         TM    RTCTSDO+3,X'02'         ADD mode                  JM1101
         JZ    *+8                     Yes                       JM1101
         LA    R3,=CL4'OVER'           OVER mode                 RS0402
         STRING '     SDUMP ',((R3),4,T),' OPTIONS=(',                 X
               INTO=LINE                                         JM1101
         L     R0,=X'80000000'         first bit
*        LA    R1,DUMPSDMP             option table
         BASR  R1,0                    Next instr.               RS0402
         AHI   R1,DUMPSDMP-*                                     RS0402
         LA    R2,RTCTSDO              SVCDUMP options
*        STRING '     SDUMP SDATA=(',INTO=LINE                   JM1101
         BRAS  R3,DUMP80               edit options
*        TM    RTCTEX1,RTCTMSTR        GRSQ?                   JWMJUN95
         TM    RTCTEX1,RTCTGRSQ        GRSQ?                     JM1101
         JZ    DUMP60                  NO                      JWMJUN95
         STRING ',GRSQ)',INTO=(0(R6),NEXTLINE)                 JWMJUN95
         LA    R6,5(,R6)               skip over to the )      JWMJUN95
DUMP60   DS    0H                                              JWMJUN95
         TM    RTCTEX1,RTCTCPL         COUPLE?                 JWMJUN95
         JZ    DUMP61                  NO                      JWMJUN95
         STRING ',COUPLE)',INTO=(0(R6),NEXTLINE)               JWMJUN95
         LA    R6,7(,R6)               skip over to the )      JWMJUN95
DUMP61   DS    0H                                              JWMJUN95
         TM    RTCTEX1,RTCTXES         XESDATA                 JWMJUN95
         JZ    DUMP62                  NO                      JWMJUN95
         STRING ',XESDATA)',INTO=(0(R6),NEXTLINE)              JWMJUN95
         LA    R6,8(,R6)               skip over to the )      JWMJUN95
DUMP62   DS    0H                                              JWMJUN95
         TM    RTCTEX1,RTCTWLM         WLM                     JWMJUN95
         JZ    DUMP63                  NO                      JWMJUN95
         STRING ',WLM)',INTO=(0(R6),NEXTLINE)                  JWMJUN95
DUMP63   DS    0H                                              JWMJUN95
         LA    R6,8(,R6)               skip over to the )      JWMJUN95
         BRAS  R14,SPACE1          <== next line               JWMJUN95
         STRING 11X,'TYPE=(',INTO=LINE                         JWMJUN95
         L     R0,=X'80000000'         first bit               JWMJUN95
*        LA    R1,DUMPSTYP             XMEM/XMEME/NOLOCAL      JWMJUN95
         BASR  R1,0                    Next instr.               RS0402
         AHI   R1,DUMPSTYP-*                                     RS0402
         LA    R2,RTCTTYP1                                     JWMJUN95
         BRAS  R3,DUMP80                                       JWMJUN95
         BRAS  R14,SPACE1          <== next line               JWMJUN95
         STRING 11X,'BUFFERS=',(RTCTBUFV,F,L0),                JWMJUN95X
               'K   MAXSPACE=',(RTCTMXSP,F,L0),                JWMJUN95X
               'M   MSGTIME=',(RTCTMMTI,F,L0),' Minutes',      JWMJUN95X
               INTO=LINE                                       JWMJUN95
         BRAS  R14,SPACE2              Double Space
         J     DUMP99
*
*        Sub-routine: Edit DUMP options
*
DUMP80   STRING (LINE,,T),INTO=LINE
         LA    R6,LINE(R15)            point past '('
*loop
DUMP81   LR    R15,R0                  point past ")"
         N     R15,0(,R2)              test bit
         JZ    DUMP82                  off, jump
         STRING (LINE,,T),((R1),8,T),',',INTO=LINE             JWMJUN95
         LA    R6,LINE(R15)            point past last ','
         BCTR  R6,0                    prepare to overlay ','
DUMP82   SRL   R0,1                    shift mask
         LA    R1,8(,R1)               next table entry        JWMJUN95
         CLI   0(R1),C'.'              end of table?
         JNE   DUMP81                  no, test next bit
*endloop
         MVI   0(R6),C')'              close paren
         L     R0,=X'00008000'         first bit of third byte
*        LA    R1,DUMPPDAT             PDATA parms             JWMJUN95
         BASR  R1,0                    Next instr.               RS0402
         AHI   R1,DUMPPDAT-*                                     RS0402
         BR    R3
*                                                              JWMJUN95
DUMPSDAT DC    CL8'NUC     '           SDATA parms             JWMJUN95
         DC    CL8'SQA     '                                   JWMJUN95
         DC    CL8'LSQA    '                                   JWMJUN95
         DC    CL8'SWA     '                                   JWMJUN95
         DC    CL8'TRT     '                                   JWMJUN95
         DC    CL8'CB      '                                   JWMJUN95
         DC    CL8'ENQ     '                                   JWMJUN95
         DC    CL8'DM      '                                   JWMJUN95
         DC    CL8'IO      '                                   JWMJUN95
         DC    CL8'ERR     '                                   JWMJUN95
         DC    CL8'PCDATA  '                                   JWMJUN95
         DC    CL8'SUM     '                                   JWMJUN95
         DC    CL8'NOSYM   '                                   JWMJUN95
         DC    CL1'.'                                          JWMJUN95
*                                                              JWMJUN95
DUMPSTYP DC    CL8'XMEM    '                                   JWMJUN95
         DC    CL8'XMEME   '                                   JWMJUN95
         DC    CL8'NOLOCAL '                                   JWMJUN95
         DC    CL1'.'                                          JWMJUN95
*                                                              JWMJUN95
DUMPMDMP DC    CL8'NUC     '           SYSMDUMP                JWMJUN95
         DC    CL8'SQA     '                                   JWMJUN95
         DC    CL8'LSQA    '                                   JWMJUN95
         DC    CL8'SWA     '                                   JWMJUN95
         DC    CL8'TRT     '                                   JWMJUN95
         DC    CL8'RGN     '                                   JWMJUN95
         DC    CL8'LPA     '                                   JWMJUN95
         DC    CL8'CSA     '                                   JWMJUN95
         DC    CL8'SUM     '                                   JWMJUN95
         DC    CL8'ALLNUC  '                                   JWMJUN95
         DC    CL8'NOSYM   '                                   JWMJUN95
         DC    CL1'.'                                          JWMJUN95
*                                                              JWMJUN95
DUMPSDMP DC    CL8'ALLPSA  '           SVCDUMP                 JWMJUN95
         DC    CL8'CPSA    '                                   JWMJUN95
         DC    CL8'NUC     '                                   JWMJUN95
         DC    CL8'SQA     '                                   JWMJUN95
         DC    CL8'LSQA    '                                   JWMJUN95
         DC    CL8'RGN     '                                   JWMJUN95
         DC    CL8'LPA     '                                   JWMJUN95
         DC    CL8'TRT     '                                   JWMJUN95
         DC    CL8'CSA     '                                   JWMJUN95
         DC    CL8'SWA     '                                   JWMJUN95
         DC    CL8'SUM     '                                   JWMJUN95
         DC    CL8'NOSUM   '                                   JWMJUN95
         DC    CL8'NOALLPSA'                                   JWMJUN95
         DC    CL8'NOSQA   '                                   JWMJUN95
         DC    CL8'ALLNUC  '                                   JWMJUN95
         DC    CL8'        '                                   JWMJUN95
         DC    CL8'Q=YES   '                                   JWMJUN95
         DC    CL8'Q=NO    '                                   JWMJUN95
         DC    CL1'.'                                          JWMJUN95
*
DUMPPDAT DC    CL8'SA      '                                   JWMJUN95
         DC    CL8'SAH     '                                   JWMJUN95
         DC    CL8'REGS    '                                   JWMJUN95
         DC    CL8'LPA     '                                   JWMJUN95
         DC    CL8'JPA     '                                   JWMJUN95
         DC    CL8'PSW     '                                   JWMJUN95
         DC    CL8'SPLS    '                                   JWMJUN95
         DC    CL8'SUBTASKS'                                   JWMJUN95
         DC    CL1'.',0H'0'                                    JWMJUN95
*                                                                JM1101
*UMPADD  DC    CL4'ADD '                                         JM1101
*UMPOVER DC    CL4'OVER'                                         JM1101
DUMP99   END_PROC
         TITLE 'SHOWMVS &REL - Dump Data Sets and Options'
*---------------------------------------------------------------------*
*                                                                     *
*DAE PArameters                                                       *
*                                                                     *
*  Member = ADYSET00                                                  *
*    Start                                                            *
*    Svcdump  = notify(3,30)  match  update  suppressall              *
*    Sysmdump = match  update  suppressall                            *
*    Records  = 400                                                   *
*    Dsn      = SYS1.DAE.SYSPLEX                                      *
*    Share    = dsn options                                           *
*    Global   = dsn options                                           *
*                                                                     *
*  Note. When SHARE(DSN) or SHARE(DSN,OPTIONS) is used,               *
*        the corresponding GLOBAL parameter is set.                   *
*                                                                    **
*  At the time DAE is started, any record older than 180 days, is    **
*  ignored.                                                           *
*    DSN(SYS1.DAE)                                                    *
*                                                                     *
*--------------------------------------------------------------------**
DAE00    BEGIN_PROC KW=DAE,AUTH=YES,BASEREG=NO                   RS0302
         L     R4,CVTRTMCT             RTM CTL TABLE
         USING RTCT,R4
         STRING '&TITLEPFX.DAE Parameters',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R5,RTCTDSCA             DAE Com area
         BRAS  R14,WORKADDR            temp work area
         LA    R14,DSCA_LENGTH         get length for MVCK
         SLR   R15,R15                 source key is KEY 0
         MVCK  0(R14,R1),0(R5),R15     Move DSCA to unprot storage
         LR    R5,R1                   unprot DSCA
         USING DSCA,R5
         LA    R6,DSCA+DSCA_LENGTH     unprot DFL
         USING DFLM,R6
         L     R1,DSCDFL               DAE Default Module (ADYDFLT)
         LA    R14,DFL_LENGTH          get length for MVCK
         SLR   R15,R15                 source key is KEY 0
         MVCK  DFLM(R14),0(R1),R15     Move DFL to unprot storage
         STRING '  Member = ',DFLPLMEM,INTO=LINE
         BRAS  R14,SPACE1              Single Space
*        TM    DFLDAEO,DFLSTRT         DAE started?              RS1201
*        JO    DAE10                   Yes                       RS1201
         TM    DFLDAEO,DFLSTOP         DAE stopped?              RS1201
         JNO   DAE10                   No                        RS1201
         LA    R4,=C'Globalstop'
         TM    DFLDAEO,DFLGSTP         Globalstop?
         JO    *+8                     Yes
         LA    R4,BLANKS               No
         STRING '    Stop ',((R4),10,T),INTO=LINE
         BRAS  R14,SPACE2              Double Space
         J     DAE99
DAE10    DS    0H
         STRING '    Start',INTO=LINE
         BRAS  R14,SPACE1
         MVI   WORK256,C' '            Move in the seed
         MVC   WORK256+1(255),WORK256  clear the work area
         LA    R1,WORK256
         TM    DFLSVC,DFLSVCM          Match?
         JZ    *+14                    No
         MVC   0(5,R1),=C'match'       SVCDUMP = match
         LA    R1,5+2(,R1)
         TM    DFLSVC,DFLSVCU          update?
         JZ    *+14                    No
         MVC   0(6,R1),=C'update'      SVCDUMP = update
         LA    R1,6+2(,R1)
* It can not be both Suppress and Suppressall
         TM    DFLSVC,DFLSVCA          suppressall?
         JZ    *+14                    No
         MVC   0(11,R1),=C'suppressall'
         J     *+18                    Yes
         TM    DFLSVC,DFLSVCS          suppress?
         JZ    *+10                    No
         MVC   0(8,R1),=C'suppress'
         STRING '    Svcdump  = notify(',                              X
               (DFLNOTDN,H,L),',',(DFLNOTTM,H,L),')  ',                X
               (WORK256,40,T),                                         X
               INTO=LINE
         BRAS  R14,SPACE1
         MVI   WORK256,C' '            Move in the seed
         MVC   WORK256+1(255),WORK256  clear the work area
         LA    R1,WORK256
         TM    DFLSYSM,DFLSYSMM        Match?
         JZ    *+14                    No
         MVC   0(5,R1),=C'match'       SYSMDUMP = match
         LA    R1,5+2(,R1)
         TM    DFLSYSM,DFLSYSMU        update?
         JZ    *+14                    No
         MVC   0(6,R1),=C'update'      SYSMDUMP = update
         LA    R1,6+2(,R1)
* It can not be both Suppress and Suppressall
         TM    DFLSYSM,DFLSYSMA        suppressall?
         JZ    *+14                    No
         MVC   0(11,R1),=C'suppressall'
         J     *+18                    Yes
         TM    DFLSYSM,DFLSYSMS        suppress?
         JZ    *+10                    No
         MVC   0(8,R1),=C'suppress'
         STRING '    Sysmdump = ',                                     X
               (WORK256,40,T),                                         X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING '    Records  = ',(DFLRECNO,F,L),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         STRING '    Dsn      = ',(DFLDSN,,L),INTO=LINE
         TM    DFLDAEO,DFLSHR+DFLSHRO  Share dsn or options
         JZ    DAE20                   NO.
         BRAS  R14,SPACE1              Single Space
         LA    R1,=C'dsn'
         TM    DFLDAEO,DFLSHR          Share dsn?
         JO    *+8                     Yes
         LA    R1,BLANKS               No
         LA    R2,=C'options'
         TM    DFLDAEO,DFLSHRO         Share option?
         JO    *+8                     Yes
         LA    R2,BLANKS               No
         STRING '    Share    = ',((R1),3,T),1X,((R2),7,T),INTO=LINE
DAE20    DS    0H
         TM    DFLGLB,DFLGLBD+DFLGLBO  global dsn or options
         JZ    DAE30                   NO.
         BRAS  R14,SPACE1              Single Space
         LA    R1,=C'dsn'
         TM    DFLGLB,DFLGLBD          Global dsn?               RS1002
         JO    *+8                     Yes
         LA    R1,BLANKS               No
         LA    R2,=C'options'
         TM    DFLGLB,DFLGLBO          Global options?
         JO    *+8                     Yes
         LA    R2,BLANKS               No
         STRING '    Global   = ',((R1),3,T),1X,((R2),7,T),INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  Note. When GLOBAL(DSN) or GLOBAL(DSN,OPTIONS) is',  X
               'used,',INTO=LINE                                 RS0302
         BRAS  R14,SPACE1              Single Space
         STRING '        the corresponding SHARE parameter is set.',   X
               INTO=LINE                                         RS0112
DAE30    DS    0H
         BRAS  R14,SPACE2              Double Space
         STRING '  At the time DAE is started, any record older than ',X
               (DFLEXPIR,F,L),' days is ignored.',INTO=LINE
DAE90    DS    0H
         BRAS  R14,SPACE2              Double Space
DAE99    END_PROC
         TITLE 'SHOWMVS &REL - SLIP Data'
*---------------------------------------------------------------------
*
*SLIP Data
*
*    ID   STATE    ID   STATE    ID   STATE    ID   STATE
*    S522 ENABLED  S137 ENABLED  S237 ENABLED  S213 ENABLED
*    INT3 ENABLED  EVAL ENABLED  IGN4 ENABLED  IMSP DISABLED
*    XD37 ENABLED  XE37 ENABLED  XEC6 ENABLED  XXC6 ENABLED
*    RRS1 ENABLED  RRS2 ENABLED  0001 ENABLED  0002 ENABLED
*
*    SLIP SET,ID=RRS1,ACTION=SVCD,JOBLIST=(DB2PMSTR,DB2PDBM1,RRS,DB2PIR
*    NUC,PSA,SUM,TRT,CSA,SQA,RGN,GRSQ),COMP=04X,REASON=00E5XXXX
*    SLIP SET,ID=RRS2,ACTION=SVCD,JOBLIST=(DB2PMSTR,DB2PDBM1,RRS,DB2PIR
*    NUC,PSA,SUM,TRT,CSA,SQA,RGN,GRSQ),COMP=04X,REASON=00E3XXXX
*    SLIP SET,COMP=U4040,ACTION=SVCD
*    SLIP SET,COMP=3X9,ACTION=SVCD
*
*---------------------------------------------------------------------
SLIP00   BEGIN_PROC KW=SLIP,AUTH=YES,BASEREG=NO                  RS0302
         STRING '&TITLEPFX.SLIP Data',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R3,CVTPTR(,0)           CVT ADDRESS
         USING CVTMAP,R3
         ICM   R3,15,CVTRTMS           address of Slip Header
         JZ    SLIP0090                no
         DROP  R3
         USING SHDR,R3
         ICM   R3,15,SHDRIDQ           First SCE on ID queue
         JZ    SLIP0090                no
         DROP  R3
         USING SCE,R3
         STRING '    ID   STATE    ID   STATE    ID   STATE    ID   STAX
               TE    ID   STATE',INTO=LINE
         BRAS  R14,SPACE1              Single Space
         MVC   LINE(4),BLANKS          blank out next line
         LA    R5,LINE+4               first entry
         LA    R6,14                   length of each display entry
         LA    R7,LINE+70              end of line
         MODESET EXTKEY=ZERO        <- switch to KEY=0
SLIP0010 DS    0H
         LA    R2,=C'Enabled '         Default to enabled
         TM    SCEFLG1,SCEDSABL         True
         JZ    *+8                      yes
         LA    R2,=C'Disabled'         change to disabled
         STRING SCEID,' ',((R2),8),' ',INTO=((R5),(R6))
         BRXLE R5,R6,SLIP0020          this line full?
         TR    LINE,TRTPRINT           get rid of garbage
         BRAS  R14,SPACE1              Single space
         MVC   LINE(4),BLANKS          blank out next line
         LA    R5,LINE+4               first entry
         LA    R7,LINE+70              end of line
SLIP0020 DS    0H
         ICM   R3,15,SCEIDQF           forward chain
         JNZ   SLIP0010                no
         DROP  R3
         CLI   LINE+4,X'00'            Last line to display
         JE    SLIP0030                no
         TR    LINE,TRTPRINT           get rid of garbage
         BRAS  R14,SPACE1              Single space
SLIP0030 DS    0H
         BRAS  R14,BLANK1              Double space
         L     R3,CVTPTR(,0)           CVT ADDRESS               RS0402
         USING CVTMAP,R3                                         RS0402
         ICM   R3,15,CVTRTMS           address of Slip Header    RS0402
         JZ    SLIP0090                no                        RS0402
         DROP  R3                                                RS0402
         USING SHDR,R3                                           RS0402
         ICM   R3,15,SHDRIDQ           First SCE on ID queue     RS0402
         JZ    SLIP0090                no                        RS0402
         DROP  R3                                                RS0402
         USING SCE,R3                                            RS0402
SLIP0050 DS    0H                                                RS0402
         ICM   R4,B'1111',SCESCVAP     SCVA pointer              RS0402
         USING SCVA,R4                                           RS0402
         LH    R5,SCVALEN                                        RS0402
*        #SNAP ADDR=(R4),LENGTH=(R5)   debug                     RS0402
         LA    R4,SCVACOM                                        RS0402
         DROP  R4                                                RS0402
         USING SCVACOM,R4                                        RS0402
SLIP0053 DS    0H                                                RS0402
         CLI   SCVACOID,SCVAIDL        Last Id entry ?           RS0402
         JE    SLIP0060                  yes, leave              RS0402
         CLI   SCVACOID,SCVAIDSD       Sdata entry?              RS0402
         JE    SLIP0053_15               no, loop                RS0402
         LH    R5,SCVACOLN                                       RS0402
         J     SLIP0053_X              next entry                RS0402
SLIP0053_15 DS    0H                                             RS0402
         ICM   R5,B'1111',SCVASLTB     SLTB                      RS0402
         JZ    SLIP0053_X                                        RS0402
         USING SLTB,R5                                           RS0402
*        #SNAP  ADDR=(R5),LENGTH=50                              RS0402
         L     R0,SLTBLEN              length                    RS0402
         AHI   R0,-16                - 16 header                 RS0402
SLIP0053_15_1  DS  0H                                            RS0402
         CHI   R0,80                                             RS0402
         JL    SLIP0057                                          RS0402
         STRING 4X,(16(R5),80,T),INTO=LINE                       RS0402
         BRAS  R14,SPACE1          <== next line                 RS0402
         AHI   R0,-80                                            RS0402
         LTR   R0,R0                                             RS0402
         JZ    SLIP0053_X                                        RS0402
         JM    SLIP0053_X                                        RS0402
         LA    R5,80(R5)                                         RS0402
         J     SLIP0053_15_1                                     RS0402
SLIP0057 DS    0H                                                RS0402
         STRING 4X,(16(R5),(R0),T),INTO=LINE                     RS0402
         BRAS  R14,SPACE1          <== next line                 RS0402
SLIP0053_X DS    0H                                              RS0402
         AH    R4,SCVACOLN                                       RS0402
         J     SLIP0053                                          RS0402
SLIP0060 DS    0H                                                RS0402
         ICM   R3,B'1111',SCEIDQF      forward chain             RS0402
         JNZ   SLIP0050                no                        RS0402
         DROP  R3                                                RS0402
         BRAS  R14,BLANK1          <== next line                 RS0402
         J     SLIP99                                            RS0402
SLIP0090 DS    0H
         STRING '    SLIP is not active',INTO=LINE
         BRAS  R14,SPACE2              Double Space
SLIP99   MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
         END_PROC
         TITLE 'SHOWMVS &REL - GTF Data'
*---------------------------------------------------------------------*
*                                                                     *
*GTF Data                                                             *
*                                                                     *
*  GTF Active, TRACE=(USR,RNIO)                                       *
*                                                                     *
*---------------------------------------------------------------------*
GTF00    BEGIN_PROC KW=GTF,BASEREG=NO                            RS0302
         STRING '&TITLEPFX.GTF Data',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '.GTF',INTO=LINE       trigger for the sub-task
         BRAS  R14,SPACE2              Double Space
GTF99    END_PROC
         TITLE 'SHOWMVS &REL - GTF Data'
*---------------------------------------------------------------------*
*                                                                     *
*DIAG                                                                 *
*                                                                     *
*  VSM TRACK CSA(ON) SQA(ON)                                          *
*  VSM TRACE GET(OFF) FREE(OFF)                                       *
*  TRAPS NAME()                                                       *
*                                                                     *
*---------------------------------------------------------------------*
DIAG00   BEGIN_PROC KW=DIAG,BASEREG=YES  LOAD require            RS0902
         AIF   (NOT D'CVTH7706).DIAG99     z/OS R3 ?             RS0902
         TM    HBB7706,L'HBB7706       running on z/OS R3 ?      RS0902
         JNO   DIAG99                  no, jump                  RS0902
         L     R3,CVTECVT              Load addr of ECVT
         L     R4,ECVTDGNB-ECVT(,R3)   DIAG TRAP
         LTR   R4,R4
         JZ    DIAG99                  no, exit
         STRING '&TITLEPFX.DIAG',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?
         JNO   DIAG05                  no, don' change mode
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0
DIAG05   DS    0H
         XC    WKCELL1,WKCELL1         clear parameter
         XC    WKCELL2,WKCELL2         clear parameter
         LOAD  EP=IGVDGNXT             LOAD
         LR    R15,R0
         CALL  (15),                   IGVDGNXT                        X
               (WKCELL1,               AbdplPtr                        X
               WKCELL1+4,              SubpoolForDgnx                  X
               WKCELL2),               DGNXPtr                         X
               MF=(E,WORK256)
         L     R4,WKCELL2
         USING DGNX,R4                 tell assembly
         L     R6,DGNXLENGTH
         L     R5,DGNXTEXTAREAADDR     Start of Textarea
*        #SNAP ADDR=(R5),LENGTH=256    Debug code
         USING DGNXTEXTLINE,R5
         SR    R6,R6                   clear R6
*loop
DIAG10   DS    0H
         ICM   R6,B'0001',DGNXTEXTLEN  Length of Text
         JZ    DIAG80                  end if zero
*        #SNAP ADDR=(R5),LENGTH=(R6)   Debug code
         STRING 2X,(DGNXTEXTDATA,(R6)),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         AR    R5,R6                   point to next line
         LA    R6,L'DGNXTEXTLEN        get length of length field
         AR    R5,R6                   point to next line
         J     DIAG10
*endloop
DIAG80   DS    0H
         L     R5,DGNXLENGTH           length
         L     R3,WKCELL1+4            Subpool
         FREEMAIN RU,LV=(R5),A=(R4),SP=(R3) free DGNX area
         DROP  R4,R5
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?
         JNO   DIAG90                  yes, don't call
         MODESET KEYREG=(2)            switch back to own key
DIAG90   DS    0H
         BRAS  R14,BLANK1              Double Space
.DIAG99  ANOP
DIAG99   END_PROC
         TITLE 'SHOWMVS &REL - Init Parameters'
*---------------------------------------------------------------------*
*                                                                     *
*Initialisation Parameters                                            *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
IPA000   BEGIN_PROC KW=IPA,BASEREG=NO                            RS0302
         AIF   (NOT D'CVTJ6602).IPA999
         TM    JBB6602,L'JBB6602       IPA available?
         JZ    IPA999                  no, exit
         STRING '&TITLEPFX.Initialization Parameters',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R3,CVTECVT              Load addr of ECVT
         L     R4,ECVTIPA-ECVT(,R3)    Init parm area
         USING IPA,R4
         TM    IPALFLAG,IPAJCLP        Master JCL came from PARMLIB ?
         JNO   *+8                     no, jump
         OI    MSTJCL_PARMLIB,L'MSTJCL_PARMLIB remember it for later
         STRING '  IPLPARM=',INTO=LINE,                                X
               IPAIODFU,1X,IPALOADS,1X,IPAPROMT,1X,IPANUCID
         BRAS  R14,SPACE1              Single Space
         STRING '    IPLparm dsn=',(IPALPDSN,,T),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         STRING '  HWNAME=',(IPAHWNAM,,T),                             X
               ',LPARNAME=',(IPALPNAM,,T),                             X
               ',VMUSERID=',(IPAVMNAM,,T),                             X
               INTO=LINE
         BRAS  R14,SPACE1              Single Space
         STRING '  IODF     ',(IPAIODF,,T),INTO=LINE
         TR    LINE,TRTDOTS      convert non-printable to dots   RS0102
         BRAS  R14,SPACE1              Single Space
         STRING '  NUCLEUS  ',(IPANUCID,,T),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         STRING '  SYSPARM  ',(IPASPARM,,T),INTO=LINE
         TR    LINE,TRTDOTS      convert non-printable to dots   RS0102
         BRAS  R14,SPACE1              Single Space
         STRING '  SYSCAT   ',(IPASCAT,,T),INTO=LINE
         TR    LINE,TRTDOTS      convert non-printable to dots   RS0102
         BRAS  R14,SPACE1              Single Space
         STRING '  IEASYM   ',(IPASYM,,T),INTO=LINE
         TR    LINE,TRTDOTS      convert non-printable to dots   RS0102
         BRAS  R14,SPACE1              Single Space
         STRING '  SYSPLEX  ',(IPAPLEX,,T),INTO=LINE
         TR    LINE,TRTDOTS      convert non-printable to dots   RS0102
         BRAS  R14,SPACE1              Single Space
         AIF   (NOT D'CVTH7703).IPA030 OS/390 R10? no leave      RS0101
         TM    HBB7703,L'HBB7703       running on OS/390 R10?    RS0101
*        JNZ   IPA030                  no, jump                  RS0501
         JZ    IPA030                  no, jump                  RS0501
*        STRING '  ARCHLVL  ',(IPAARCHL,,X),INTO=LINE            RS0501
         STRING '  ARCHLVL  ',(IPAARCHL,,T),INTO=LINE            RS0501
         BRAS  R14,SPACE1              Single Space              RS0101
         STRING '  MTLSHARE ',(IPAMTLSH,,T),INTO=LINE            RS1101
         BRAS  R14,SPACE1              Single Space              RS1101
.IPA030  ANOP                                                    RS0101
IPA030   DS    0H                                                RS0101
         LH    R7,IPAPLNUM             number of PARMLIB images
         LA    R6,IPAPLIB              Start of PARMLIB images
         USING IPAPLIB,R6
*LOOP
IPA050   DS    0H
         STRING '  PARMLIB  ',(IPAPLIB,63,T),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         LA    R2,=C'Yes'              In use=YES
         TM    IPAPLFLG,IPAPLUSE       in use?
         JO    *+8                     YES, JUMP
         LA    R2,=C'No '              NO, In use=NO
         LA    R3,=C'Yes'              Default=YES
         TM    IPAPLFLG,IPAPLDEF       Default?
         JO    *+8                     YES, JUMP
         LA    R3,=C'No '              NO, Default=NO
         LA    R5,=C'Yes'              Found in catalog=YES
         TM    IPAPLFLG,IPAPLCAT       Found in catalog?
         JO    *+8                     YES, JUMP
         LA    R5,=C'No '              NO, Found in catalog=NO
         STRING 11X,'In use: ',((R2),3),2X,                            X
               'Default: ',((R3),3),2X,                                X
               'Found in catalog: ',((R5),3),                          X
               INTO=LINE
         TM    IPAPLFLG,IPAPLUSE       in use?
         JO    IPA150                  YES, JUMP
         LA    R3,=C'Locate' AF0404
         TM    IPAPLFLG,IPAPLLCF       Locate failed?
         JO    IPA100                  YES, JUMP
         LA    R3,=C' Mount' AF0404
         TM    IPAPLFLG,IPAPLMNF       Mount failed?
         JO    IPA100                  YES, JUMP
         LA    R3,=C'  Open' AF0404
         TM    IPAPLFLG,IPAPLOPF       OPEN failed?
         JZ    IPA150                  No, JUMP
IPA100   DS    0H
         STRING (LINE,,T),' (',((R3),6,T),' failed)',INTO=LINE AF0404
IPA150   BRAS  R14,SPACE1              Single Space
         LA    R6,64(,R6)              Skip this image
         BRCT  R7,IPA050               loop through them
         DROP  R6
*ENDLOOP
         STRING '  NUCLST   ',(IPANUCL,,T),INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
*        display value of each initialization parameter
*
         BRAS  R5,IPA301               Table
         DC    C'ALLOC   ',AL2(IPAALLOC-IPAPDESC)
         DC    C'APF     ',AL2(IPAAPF-IPAPDESC)
         DC    C'APG     ',AL2(IPAAPG-IPAPDESC)
         DC    C'BLDL    ',AL2(IPABLDL-IPAPDESC)
         DC    C'BLDLF   ',AL2(IPABLDLF-IPAPDESC)
         DC    C'CLOCK   ',AL2(IPACLOCK-IPAPDESC)
         DC    C'CLPA    ',AL2(IPACLPA-IPAPDESC)
         DC    C'CMB     ',AL2(IPACMB-IPAPDESC)
         DC    C'CMD     ',AL2(IPACMD-IPAPDESC)
         DC    C'CON     ',AL2(IPACON-IPAPDESC)
         DC    C'CONT    ',AL2(IPACONT-IPAPDESC)
         DC    C'COUPLE  ',AL2(IPACOUPL-IPAPDESC)
         DC    C'CPQE    ',AL2(IPACPQE-IPAPDESC)
         DC    C'CSA     ',AL2(IPACSA-IPAPDESC)
         DC    C'CSCBLOC ',AL2(IPACSCBL-IPAPDESC)
         DC    C'CVIO    ',AL2(IPACVIO-IPAPDESC)
         DC    C'DEVSUP  ',AL2(IPADEVSU-IPAPDESC)
         DC    C'DIAG    ',AL2(IPADIAG-IPAPDESC)
         DC    C'DUMP    ',AL2(IPADUMP-IPAPDESC)
         DC    C'DUPLEX  ',AL2(IPADUPLE-IPAPDESC)
         DC    C'EXIT    ',AL2(IPAEXIT-IPAPDESC)
         DC    C'FIX     ',AL2(IPAFIX-IPAPDESC)
         DC    C'GRS     ',AL2(IPAGRS-IPAPDESC)
         DC    C'GRSCNF  ',AL2(IPAGRSCN-IPAPDESC)
         DC    C'GRSRNL  ',AL2(IPAGRSRN-IPAPDESC)
         DC    C'ICS     ',AL2(IPAICS-IPAPDESC)
         AIF   (NOT D'CVTH7706).IPA300C z/OS R3?                 RS0302
         DC    C'IKJTSO  ',AL2(IPATSO-IPAPDESC)                  RS0302
.IPA300C ANOP                                                    RS0302
         AIF   (NOT D'CVTJ7713).IPA300D z/OS R1?                 RS0601
         DC    C'ILMLIB  ',AL2(IPAILML-IPAPDESC)                 RS0601
         DC    C'ILMMODE ',AL2(IPAILMOD-IPAPDESC)                RS0601
.IPA300D ANOP                                                    RS0601
         DC    C'IOS     ',AL2(IPAIOS-IPAPDESC)
         DC    C'IPS     ',AL2(IPAIPS-IPAPDESC)
         AIF   (NOT D'CVTH7706).IPA300E z/OS R3?                 RS0302
         DC    C'LICENSE ',AL2(IPALIC-IPAPDESC)                  RS0302
.IPA300E ANOP                                                    RS0302
         DC    C'LNK     ',AL2(IPALNK-IPAPDESC)
         DC    C'LNKAUTH ',AL2(IPALNKAU-IPAPDESC)
         DC    C'LOGCLS  ',AL2(IPALOGCL-IPAPDESC)
         DC    C'LOGLMT  ',AL2(IPALOGLM-IPAPDESC)
         DC    C'LOGREC  ',AL2(IPALOGRE-IPAPDESC)
         DC    C'LPA     ',AL2(IPALPA-IPAPDESC)
         DC    C'MAXCAD  ',AL2(IPAMAXCA-IPAPDESC)
         DC    C'MAXUSER ',AL2(IPAMAXUS-IPAPDESC)
         DC    C'MLPA    ',AL2(IPAMLPA-IPAPDESC)
         DC    C'MSTRJCL ',AL2(IPAMSTRJ-IPAPDESC)
         DC    C'NONVIO  ',AL2(IPANONVI-IPAPDESC)
         DC    C'NSYSLX  ',AL2(IPANSYSL-IPAPDESC)
         DC    C'NUCMAP  ',AL2(IPANUCMA-IPAPDESC)
         AIF   (NOT D'CVTH6603).IPA300F OS/390 R3?
         DC    C'OMVS    ',AL2(IPAOMVS-IPAPDESC)
.IPA300F ANOP
         DC    C'OPI     ',AL2(IPAOPI-IPAPDESC)
         DC    C'OPT     ',AL2(IPAOPT-IPAPDESC)
         DC    C'PAGE-OP ',AL2(IPAPAGEO-IPAPDESC)
         DC    C'PAGE-SYS',AL2(IPAPAGEP-IPAPDESC)
         DC    C'PAGNUM  ',AL2(IPAPAGNU-IPAPDESC)
         DC    C'PAGTOTL ',AL2(IPAPAGTO-IPAPDESC)
         DC    C'PAK     ',AL2(IPAPAK-IPAPDESC)
         DC    C'PLEXCFG ',AL2(IPAPLEXC-IPAPDESC)
         DC    C'PRODP   ',AL2(IPAPRODP-IPAPDESC)
         DC    C'PROG    ',AL2(IPAPROG-IPAPDESC)
         DC    C'PURGE   ',AL2(IPAPURGE-IPAPDESC)
         DC    C'RDE     ',AL2(IPARDE-IPAPDESC)
         DC    C'REAL    ',AL2(IPAREAL-IPAPDESC)
         DC    C'RER     ',AL2(IPARER-IPAPDESC)
         DC    C'RSU     ',AL2(IPARSU-IPAPDESC)
         DC    C'RSVNONR ',AL2(IPARSVNO-IPAPDESC)
         DC    C'RSVSTRT ',AL2(IPARSVST-IPAPDESC)
         AIF   (NOT D'CVTJ6604).IPA300L OS/390 R4?
         DC    C'RTLS    ',AL2(IPARTLSP-IPAPDESC)
.IPA300L ANOP
         DC    C'SCH     ',AL2(IPASCH-IPAPDESC)
         DC    C'SMF     ',AL2(IPASMF-IPAPDESC)
         DC    C'SMS     ',AL2(IPASMS-IPAPDESC)
         DC    C'SQA     ',AL2(IPASQA-IPAPDESC)
         DC    C'SSN     ',AL2(IPASSN-IPAPDESC)
         DC    C'SVC     ',AL2(IPASVC-IPAPDESC)
         DC    C'SWAP    ',AL2(IPASWAP-IPAPDESC)
         DC    C'SYSNAME ',AL2(IPASYSNA-IPAPDESC)
         DC    C'SYSP    ',AL2(IPASYSP-IPAPDESC)
         AIF   (NOT D'CVTH7703).IPA300O OS/390 R10?              RS0601
         DC    C'UNIP    ',AL2(IPAUNIP-IPAPDESC)                 RS0601
.IPA300O ANOP                                                    RS0601
         DC    C'VAL     ',AL2(IPAVAL-IPAPDESC)
         DC    C'VIODSN  ',AL2(IPAVIODS-IPAPDESC)
         DC    C'VRREGN  ',AL2(IPAVRREG-IPAPDESC)
         DC    H'-1'                   end of table
*loop
IPA301   LH    R6,8(,R5)               offset to PDE
         LA    R6,IPAPDESC(R6)         point at PDE
         USING IPAPDE,R6
         ICM   R1,B'1111',IPAPDESA     storage address
         JZ    IPA339                  zero, ignore
         LH    R2,IPAPDESL             storage length
         STRING 'IEASYS',IPAPDEDO,INTO=WORK256                   RS0603
         CLC   IPAPDEDO,=X'FFFF'                                 RS0603
         JNE   IPA349                                            RS0603
         STRING 'Operator',INTO=WORK256                          RS0603
         J     IPA350                                            RS0603
IPA349   DS 0H                                                   RS0603
         CLI   IPAPDEDO,0                                        RS0603
         JNE   IPA350                                            RS0603
         STRING 'Default ',INTO=WORK256                          RS0603
         J     IPA350                                            RS0603
IPA350   DS 0H                                                   RS0603
         STRING 2X,(WORK256,8),1X,((R5),8,T),'=',((R1),(R2)),INTO=LINE
*        STRING (LINE,71),(WORK256,8),INTO=LINE                  RS0603
         BRAS  R14,SPACE1              Single Space
IPA339   LA    R5,8+2(,R5)             next entry in IPA table
         CLI   0(R5),X'FF'             end of table?
         JNE   IPA301                  no, process next entry
*endloop
         BRAS  R14,BLANK1              blank line
*LH R0,IPALEN                                                     -DEL-
*#SNAP ADDR=IPA,LENGTH=(R0)                                       -DEL-
.IPA999  ANOP
IPA999   END_PROC
         TITLE 'SHOWMVS &REL - IPL Statistics'
*---------------------------------------------------------------------*
*IPL-Statistic:                                                       *
*  End of Table: 0BD00000 Next free entry: 0BCFF45A                   *
*  Type   Suffix/Mod Timer-Units Table-Entry                          *
*    IPL           10          14    0BCFF00C                         *
*    IPL           20      446194    0BCFF014                         *
*  and so on                                                          *
*---------------------------------------------------------------------*
IPST00   BEGIN_PROC KW=IPST,BASEREG=NO                           RS0302
         AIF   (NOT D'CVTH6603).IPST99   OS/390 R3
         TM    HBB6603,L'HBB6603       running on OS390 R3 ?
         JZ    IPST99                  no, jump
         L     R3,CVTECVT              ECVT
         L     R3,ECVTIPST-ECVT(,R3)   IPST Ipl-Statistics
         LTR   R3,R3                   zero?
         JZ    IPST99                    yes, leave
         USING IPST,R3                 tell assembler
         STRING '&TITLEPFX.IPL-Statistic:',INTO=LINE
         BRAS  R14,SPACE2
         STRING '  End of Table: ',(IPSTENDP,,X),                      X
               ' Next free entry: ',                                   X
               (IPSTNXTP,,X),INTO=LINE
         BRAS  R14,SPACE1
         STRING '  Type   Suf/Mod Timer-Units Time',INTO=LINE
*Loop
IPST50   DS    0H
         CLI   IPST_TYPE,IPST_IPL       type IPL ?
         JNE   IPST60                     no, leave
         BRAS  R14,SPACE1
         XC    WKCELL2,WKCELL2
         MVC   WKCELL2+2(4),IPST_DATA1_TIMEU
         BRAS  R7,IPST90                time-units to time
         STRING 3X,'IPL',8X,IPST_DATA1_MODID,3X,                       X
               (IPST_DATA1_TIMEU,F,R9B),1X,(STCKTIME),INTO=LINE
         LA    R3,8(,R3)                next entry
         J     IPST50                   loop
*Endloop
*Loop
IPST60   DS    0H
         CLI   IPST_TYPE,IPST_NIP       type NIP ?
         JNE   IPST70                     no, leave
         BRAS  R14,SPACE1
         XC    WKCELL2,WKCELL2
         MVC   WKCELL2+2(4),IPST_DATA1_TIMEU
         BRAS  R7,IPST90                time-units to time
         STRING 3X,'NIP',8X,IPST_DATA1_MODID,3X,                       X
               (IPST_DATA1_TIMEU,F,R9B),1X,(STCKTIME),INTO=LINE
         LA    R3,8(,R3)                next
         J     IPST60                   loop
*Endloop
*Loop
IPST70   DS    0H
         CLI   IPST_TYPE,IPST_MSI       type MSI ?
         JNE   IPST80                     no, leave
         BRAS  R14,SPACE1
         XC    WKCELL2,WKCELL2
         MVC   WKCELL2+2(4),IPST_DATA2_TIMEU
         BRAS  R7,IPST90                time-unit --> time
         STRING 3X,'MSI',2X,IPST_DATA2_MODID,3X,                       X
               (IPST_DATA2_TIMEU,F,R9B),1X,(STCKTIME),INTO=LINE
         LA    R3,14(,R3)               next
         J     IPST70                   loop
*Endloop
IPST80   DS 0H
         BRAS  R14,SPACE2               double space
         J     IPST99
IPST90   DS 0H
         LM    R14,R15,=X'8126D60E46000000' Since 1972
         LM    R0,R1,WKCELL2                time-units
         ALR   R14,R0
         ALR   R15,R1
         BRC   12,NOINCR
         AL    R14,=F'1'
NOINCR   DS    0H
         STM   R14,R15,WKCELL2
         LA    R1,WKCELL2              pass TOD clock value
         BRAS  R14,STCKCONV            convert TOD clock to decimal
         BR    R7
.IPST99   ANOP
IPST99   DS 0H
         END_PROC
         TITLE 'SHOWMVS &REL - Master JCL (IEEMSJCL)'
*---------------------------------------------------------------------*
*                                                                     *
*Master JCL (IEEMSJCL)                                                *
*                                                                     *
*  //MSTJCL00 JOB MSGLEVEL=(0,0)                                      *
*  //         EXEC PGM=IEEMB860,DPRTY=(15,15)                         *
*  //STCINRDR DD SYSOUT=(A,INTRDR)                                    *
*  //PROCLIB  DD DSN=SYS1.PROCLIB,DISP=SHR                            *
*                                                                     *
*---------------------------------------------------------------------*
MSTJCL00 BEGIN_PROC KW=MASTERJCL,BASEREG=YES  Load require       RS0302
         MVC   WKCELL3,=C'IEEMSJCL'    default name for SP2/SP3
         TM    MSTJCL_PARMLIB,L'MSTJCL_PARMLIB master JCL in PARMLIB?
         JO    MSTJCL40                yes, jump
         MVC   WKCELL3,=C'MSTJCL00'    default name for SP4
         L     R4,CVTMSER              Master Sched Resident Data Area
         ICM   R5,B'1111',MSSCHED-BASE(R4) SCHEDULER NIP PARAMETER LIST
         JZ    MSTJCL12                zero, jump
         USING SNPL,R5
*#SNAP ADDR=SNPL,LENGTH=32                                        -DEL-
         CLI   SCHEDJCL,C' '           MSTRCL in PARMLIB ?     JWMMAY96
         JE    MSTJCL40                yes, exit
         CLI   SCHEDJCL,0              MSTRCL=NN specified?
         JE    MSTJCL12                no, jump
         MVC   WKCELL3+6(2),SCHEDJCL   MEMBER NAME SUFFIX
*
         LA    R0,WKCELL3              program name
         BRAS  R14,DOBLDL2             issue BLDL (linklib)
         LTR   R15,R15                 found?
         JNZ   MSTJCL40                no, exit
*
MSTJCL12 STRING '&TITLEPFX.Master JCL (',WKCELL3,')',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R1,CVTLINK              SYS1.LINKLIB
         LOAD  EPLOC=WKCELL3,DCB=(1),ERRET=MSTJCL99
         LR    R3,R0                   first line
         SLR   R4,R4
         LA    R5,4095                 mask for "NR"
         NR    R5,R1                   size in double words
         D     R4,=F'10'               size in lines
*loop
MSTJCL31 MVC   LINE,BLANKS             blank out the line
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR ?
         JNO   MSTJCL34                no, jump
         LA    R14,80                  length
         IC    R15,OLDPKF              source key
         MVCK  LINE+4(R14),0(R3),R15   Move line to buffer
         J     MSTJCL35                continue
MSTJCL34 MVC   LINE+4(80),0(R3)        move a line
MSTJCL35 BRAS  R14,SPACE1              next line
         LA    R3,80(,R3)              next card image
         BRCT  R5,MSTJCL31             print JCL stmts
*endloop
         BRAS  R14,BLANK1              blank line
         DELETE EPLOC=WKCELL3          delete IEEMSJCL
         J     MSTJCL99                continue
*
*        Master JCL was loaded from PARMLIB
*
MSTJCL40 STRING '&TITLEPFX.Master JCL was loaded from PARMLIB',        X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         JNO   MSTJCL99                no, exit
         LA    R1,1                    asid of *MASTER* ASCB
         LOCASCB ASID=(1)              GET ADDR OF *MASTER* ASCB
         LTR   R2,R1                   VALID ASID?
         JNP   MSTJCL99                NO, JUMP
         USING ASCB,R2
*
*        Print *MASTER* JCL (ESA 5.1 only)
*
         L     R3,ASCBASSB             ASSB address
         USING ASSB,R3
         ALESERV ADD,                                                  X
               STOKEN=ASSBSTKN,        MSTR address space              X
               ALET=ALET1,             return ALET                     X
               CHKEAX=NO,                                              X
               MF=(E,ALESERV2)
         LAM   R4,R4,ALET1             POINT TO MSTR ADDRESS SPACE
         CPYA  R5,R4                   POINT TO MSTR ADDRESS SPACE
         CPYA  R6,R4                   POINT TO MSTR ADDRESS SPACE
         CPYA  R7,R4                   POINT TO MSTR ADDRESS SPACE
         SAC   512                     AR mode
         L     R4,ASCBXTCB             current JS TCB
         L     R4,TCBJSCB-TCB(,R4)     current JSCB
         USING IEZJSCB,R4
         L     R5,JSCDSABQ             DSAB QDB
         USING DSABQDB,R5
         CLC   =C'DSAB',DSQDBID        am I lost?
         JNE   MSTJCL90                yes, quit
         L     R5,DSQFRSTP             FIRST DSAB ON CHAIN
         USING DSAB,R5
         L     R6,JSCBCSCB             CSCB address
         USING CHAIN,R6
         STRING '  //',CHPROCSN,' EXEC PGM=',JSCBPGMN,INTO=LINE
         BRAS  R14,SPACE1              Single Space
*loop
MSTJCL51 L     R6,DSABSIOT             get SIOT address
         USING INDMSIOT,R6
         TM    SIOTBYT5,SIOTWTRN       Is program name a writer?
         JZ    MSTJCL52                No
         CLC   SCTOUTNM,=C'INTRDR  '   Is writer name valid for sysout
         JNE   MSTJCL52                no
         STRING '  //',SCTDDNAM,' DD SYSOUT=(',SCTOUTPN,',INTRDR)',    X
               INTO=LINE
         BRAS  R14,SPACE1              Single Space
         J     MSTJCL59                                             +JM
MSTJCL52 EQU   *
         L     R7,SJFCBPTR             GET JFCB ADDRESS FROM SIOT
         USING INFMJFCB,R7
         STRING '  //',SCTDDNAM,' DD DSN=',(JFCBDSNM,,T),INTO=LINE
         TM    JFCBIND1,JFCPDS         DO WE HAVE A MEMBER NAME?
         JZ    MSTJCL53                NO, JUMP
         STRING (LINE,,T),'(',(JFCBELNM,,T),')',INTO=LINE
MSTJCL53 EQU   *
         CLI   JFCBNVOL,X'00'          Any volumes                  +JM
         JE    MSTJCL54                No
         STRING (LINE,,T),',VOL=SER=',JFCBVOLS,INTO=LINE
MSTJCL54 EQU   *
         BRAS  R14,SPACE1              Single Space
MSTJCL59 EQU   *
         AIF   (NOT D'CVTH7705).MSTJCL60 z/OS R2?                RS0802
         TM    HBB7705,L'HBB7705       running on z/OS R2        RS0802
         JZ    MSTJCL60                no, jump                  RS0802
         ICM   R5,B'1111',DSABFCHA     NEXT DSAB (above/below)   RS0802
         JNZ   MSTJCL51                Not finished yet, keep on RS0802
         J     MSTJCL90                ok end                    RS0802
.MSTJCL60 ANOP
MSTJCL60 ICM   R5,B'1111',DSABFCHN     NEXT DSAB                    +JM
         JNZ   MSTJCL51                Not finished yet, keep on going
*endloop
MSTJCL90 BRAS  R14,BLANK1              Blank line
         SAC   0                       AR mode OFF
         ALESERV DELETE,ALET=ALET1,MF=(E,ALESERV2)
         XC    ALET1,ALET1             zero ALET for RCVY rtne
.MSTJCL99 ANOP
MSTJCL99 END_PROC
*
         TITLE 'SHOWMVS &REL - Sub-System Vector Table'
*---------------------------------------------------------------------*
*                                                                     *
*Sub-system Vector Table:                                             *
*                                                                     *
*  Name (hex)     SSCTSSVT Function codes
*  JES2(D1C5E2F2) 00C0D288 1-13,16-21,53-54,64,70-71,75,77,79-80      *
*       JES2     SP 4.3.0 HJE4430  ,JES_NODE='APL1    ',JES_MEMBERNAME*
*  MSTR(D4E2E3D9) 00C2EEB8 4-6,8-10,12,14-15,32-33,48,50,54,63,68,72-7*
*       MASTER   SP4.3.0  HBB4430  ,DYNAMIC_OUTPUT='NO'               *
*  SMS (E2D4E240) 00C2E2F0 8,15-17,55                                 *
*                                                                     *
*---------------------------------------------------------------------*
SUBSYSTM BEGIN_PROC KW=SUBSYSTEMS,BASEREG=NO                     RS0402
         L     R4,CVTJESCT             JES COMM TABLE
         USING JESCT,R4
         STRING '&TITLEPFX.Sub-system Vector Table (',                 X
               (SUBSYSNO,H,L),' entries)',                             X
               INTO=LINE
         CLC   JESNRSS,SUBSYSNO        EXACT COUNT?
         JE    SUBSYS07                YES, JUMP
         LA    R1,LINE(R15)            end of text
         BCTR  R1,0                    overlay ")"
         STRING ', JESNRSS=',(JESNRSS,H,L),')',INTO=((R1),NEXTLINE)
SUBSYS07 EQU   *
         BRAS  R14,SPACE2              Double Space
         L     R5,JESSSCT              FIRST JSCVT
         USING SSCT,R5
*
         STRING '  Name (hex)     SSCTSSVT Function codes',INTO=LINE
         BRAS  R14,SPACE1          <== next line
*LOOP
SUBSYS22 MVC   NEXTLINE,BLANKS
         ICM   R6,B'1111',SSCTSSVT     SUB-SYSTEM VECTOR TABLE
         JZ    SUBSYS70                INACTIVE SUB-SYSTEM
         USING SSVT,R6
         VALIDATE SSVT,ERRET=SUBSYS66  validate SSVT address
         LA    R1,1                    FIRST FUNCTION CODE
         LA    R2,256                  MAX NUMBER OF FUNCTIONS
         BALR  R3,0                    FIRST TIME SWITCH
*--LOOP
SUBSYS31 LA    R14,SSVTFCOD-1(R1)      point at function code
         CLI   0(R14),0                THIS BYTE OFF?
         JZ    SUBSYS34                YES, JUMP
         LTR   R3,R3                   START OF A NEW RANGE?
         JNM   SUBSYS37                NO, IGNORE
         LR    R3,R1                   1ST CODE IN RANGE
         CLI   NEXTLINE,C' '           FIRST RANGE?
         JE    SUBSYS33                YES, JUMP
         STRING (NEXTLINE,,L),',',((R3),,L),INTO=NEXTLINE
         J     SUBSYS37
SUBSYS33 EQU   *                       FIRST RANGE
         STRING ((R3),,L),INTO=NEXTLINE
         J     SUBSYS37
SUBSYS34 EQU   *                       END OF RANGE
         LTR   R3,R3                   PREV CODE ON?
         JM    SUBSYS37                NO, IGNORE
         BCTR  R1,0                    PREVIOUS CODE (END OF RANGE)
         CLR   R3,R1                   SINGLE-CODE RANGE?
         JE    SUBSYS36                YES, JUMP
         STRING (NEXTLINE,,L),'-',((R1),,L),INTO=NEXTLINE
SUBSYS36 EQU   *
         LA    R1,1(,R1)               UNDO PREVIOUS "BCTR R1,0"
         BALR  R3,0                    PREV CODE WAS OFF
SUBSYS37 EQU   *
         LA    R1,1(,R1)               BUMP CURRENT FUNCTION CODE
         BRCT  R2,SUBSYS31             NOT YET, PROCESS NEXT BYTE
*--ENDLOOP
         LTR   R3,R3                   PREV CODE ON?
         JM    SUBSYS39                NO, EXIT
         BCTR  R1,0                    PREVIOUS CODE (END OF RANGE)
         CLR   R3,R1                   SINGLE-CODE RANGE?
         JE    SUBSYS39                YES, EXIT
         STRING (NEXTLINE,,L),'-',((R1),,L),INTO=NEXTLINE
SUBSYS39 EQU   *
*--ENDLOOP
         J     SUBSYS70
SUBSYS66 STRING ' SSVT could not be accessed',INTO=NEXTLINE
SUBSYS70 STRING 2X,SSCTSNAM,'(',(SSCTSNAM,,X),')',1X,(SSCTSSVT,,X),1X, X
               NEXTLINE,INTO=LINE
         BRAS  R14,SPACE1          <== next line
*
*        Get Sub-system Version Information
*
         LA    R1,SSCTSNAM             POINT AT SUB-SYSTEM NAME
         BRAS  R14,GET_SSVI         <- get SSVI info
         LTR   R15,R15                 supported by this sub-system?
         JNZ   SUBSYS79                no, jump
         USING SSVI,R1
* Use SSVISDOF see APAR xxnnnn  (no number assigned yet)
*        LH    R2,SSVIFLEN             length of fixed-length header
         L     R2,SSVISDOF             length of fixed header    JM1199
         LA    R2,SSVI(R2)             start of data
         USING SSVIVDAT,R2
         LH    R0,SSVIVLEN             length
         STRING 7X,SSVICNAM,1X,                                        X
               SSVIVERS,1X,                                            X
               SSVIFMID,1X,                                            X
               (SSVIDAT,(R0)),                                         X
               INTO=LINE
         TR    LINE,TRTPRINT           get rid of garbage        RS0803
         BRAS  R14,SPACE1              BLANK LINE
.SPLVL79 ANOP
*
SUBSYS79 ICM   R5,B'1111',SSCTSCTA     NEXT SSCVT
         JNZ   SUBSYS22
*ENDLOOP
         BRAS  R14,BLANK1              BLANK LINE
         END_PROC
         TITLE 'SHOWMVS &REL - Primary Sub-system'
*---------------------------------------------------------------------*
*                                                                     *
*Primary Sub-system                                                   *
*                                                                     *
*   Name(JES2)  ASID(0017)  Started(1996-11-10 19.32)                 *
*                                                                     *
*   //IEFPROC  EXEC PGM=HASJES20                                      *
*   //PROC00   DD DSN=SYS1.PROCLIB,VOL=SER=RES430                     *
*   //         DD DSN=SYS2.TEST.PROCLIB,VOL=SER=CATVOL                *
*   //         DD DSN=PROD.PROCLIB,VOL=SER=CATVOL                     *
*   //ALTPARM  DD DSN=SYS1.PARMLIB(JES2PARM),VOL=SER=CATVOL           *
*   //SYS00001 DD DSN=SYS1.HASPCKP1,VOL=SER=SPOOL1                    *
*   //$SPOOL1  DD DSN=SYS1.HASPACE,VOL=SER=SPOOL1                     *
*                                                                     *
*---------------------------------------------------------------------*
PRISUB00 BEGIN_PROC KW=PRISUB,BASEREG=NO                         RS0302
         STRING '&TITLEPFX.Primary Sub-system',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING  '  Name(',(PRISUBNM,,T),')',INTO=LINE
         CLC   PRISUBNM,PRISUBTY       NAME=TYPE?
         JE    PRISUB10                YES, DON'T PRINT TWICE
         STRING (LINE,,T),'  Type(',(PRISUBTY,,T),')',INTO=LINE
*
*        Locate the ASCB
*
PRISUB10 LA    R4,1                    first ASID
         L     R5,CVTASVT              point to ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
*loop
PRISUB11 LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R2,R1                   VALID ASID?
         JNP   PRISUB18                NO, JUMP
         USING ASCB,R2
         ICM   R1,B'1111',ASCBJBNI     JOBNAME
         JNZ   PRISUB18                yes - CONTINUE
         ICM   R1,B'1111',ASCBJBNS     START/MOUNT/LOGON
         CLI   4(R1),C' '              4-byte name?
         JNE   PRISUB18                no - CONTINUE
         CLC   PRISUBNM,0(R1)          is this my ASCB ?
         JE    PRISUB21                yes, exit
PRISUB18 LA    R4,1(,R4)               bump ASID
         BRCT  R5,PRISUB11             next address space
*endloop
         BRAS  R14,SPACE2              Double Space
         STRING '  ASCB could not be located',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         J     PRISUB99                exit
*
*        Display ASID, start-up date & time
*
PRISUB21 EQU   *
         STRING (LINE,,T),'  ASID(',(ASCBASID,,X),')',INTO=LINE
         LA    R1,ASCBINTS             Start time in STCK format
         BRAS  R14,STCKCONV            convert it to yyyymmddhhmmsshh
         STRING (LINE,,T),'  Started(',STCKDATE,                       X
               1X,(STCKTIME,5),                                        X
               ')',INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
*        Print JES JCL (ESA only)
*
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         JNO   PRISUB99                no, exit
         L     R3,ASCBASSB             ASSB address
         USING ASSB,R3
         ALESERV ADD,                                                  X
               STOKEN=ASSBSTKN,        JES2 address space              X
               ALET=ALET1,             return ALET                     X
               CHKEAX=NO,                                              X
               MF=(E,ALESERV2)
         LAM   R4,R4,ALET1             POINT TO JES2 ADDRESS SPACE
         CPYA  R5,R4                   POINT TO JES2 ADDRESS SPACE
         CPYA  R6,R4                   POINT TO JES2 ADDRESS SPACE
         CPYA  R7,R4                   POINT TO JES2 ADDRESS SPACE
         SAC   512                     AR mode
         L     R4,ASCBXTCB             current JS TCB
         L     R4,TCBJSCB-TCB(,R4)     current JSCB
         USING IEZJSCB,R4
         L     R5,JSCDSABQ             DSAB QDB
         USING DSABQDB,R5
         CLC   =C'DSAB',DSQDBID        am I lost?
         JNE   PRISUB90                yes, quit
         L     R5,DSQFRSTP             FIRST DSAB ON CHAIN
         USING DSAB,R5
         L     R6,JSCBCSCB             CSCB address
         USING CHAIN,R6
         STRING '  //',CHPROCSN,' EXEC PGM=',JSCBPGMN,INTO=LINE
         BRAS  R14,SPACE1              Single Space
*loop
PRISUB51 L     R6,DSABSIOT             get SIOT address
         USING INDMSIOT,R6
         L     R7,SJFCBPTR             GET JFCB ADDRESS FROM SIOT
         USING INFMJFCB,R7
         STRING '  //',SCTDDNAM,' DD DSN=',(JFCBDSNM,,T),INTO=LINE
         TM    JFCBIND1,JFCPDS         DO WE HAVE A MEMBER NAME?
         JZ    PRISUB56                NO, JUMP
         STRING (LINE,,T),'(',(JFCBELNM,,T),')',INTO=LINE
PRISUB56 EQU   *
         STRING (LINE,,T),',VOL=SER=',JFCBVOLS,INTO=LINE
         BRAS  R14,SPACE1              Single Space
         AIF   (NOT D'CVTH7705).PRISUB59 z/OS R2?                RS0802
         TM    HBB7705,L'HBB7705       running on z/OS R2        RS0802
         JZ    PRISUB59                no, jump                  RS0802
         ICM   R5,B'1111',DSABFCHA     NEXT DSAB (above/below)   RS0802
         JNZ   PRISUB51                Not finished yet, keep on RS0802
         J     PRISUB90                jump over                 RS0802
.PRISUB59 ANOP                                                   RS0802
PRISUB59 ICM   R5,B'1111',DSABFCHN     NEXT DSAB
         JNZ   PRISUB51                Not finished yet, keep on going
*endloop
PRISUB90 BRAS  R14,BLANK1              Blank line
         SAC   0                       AR mode OFF
         ALESERV DELETE,ALET=ALET1,MF=(E,ALESERV2)
         XC    ALET1,ALET1             zero ALET for RCVY rtne
.PRISUB99 ANOP
PRISUB99 END_PROC
         TITLE 'SHOWMVS &REL - TCAS Data'
*---------------------------------------------------------------------*
*                             This display requires APF-authorization *
*                                                                     *
*TCAS parameters                                                      *
*                                                                     *
*  USERMAX: 250     RCONLIM: 10                                       *
*                                                                     *
*---------------------------------------------------------------------*
TCAS00   BEGIN_PROC KW=TCAS,AUTH=YES,BASEREG=NO                  RS0302
         L     R6,CVTTCASP             Addr of TCAS parameters
         USING TCAST,R6
         STRING '&TITLEPFX.TCAS parameters',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         MODESET EXTKEY=VTAM,SAVEKEY=(2) switch to KEY=6
         LH    R4,TCASUMAX             Max users
         LH    R5,TCASRCON             Recon limit
         MODESET KEYREG=(2)            switch back to own key
         STRING '  USERMAX: ',((R4),,L8),                              X
               'RCONLIM: ',((R5),,L8),INTO=LINE
         BRAS  R14,SPACE2              Double Space
TCAS99   END_PROC
         TITLE 'SHOWMVS &REL - TSO/E Parmlib Data'
*---------------------------------------------------------------------*
*                                                           TSO/E 1.4 *
*TSO Parmlib data                                                     *
*                                                                     *
*  Member(IKJTSO00)                                                   *
*                                                                     *
*  Authcmd  +                                                         *
*     Names ( +                                                       *
*         RECEIVE  TRANSMIT XMIT     LISTB    LISTBC   SEND +         *
*         ALTUSER  BLKUPD   CONNECT  CONSOLE  CONSOLE  DELDSD +       *
*         PARMLIB  LISTUSER SEARCH   TMONMVS  VLFNOTE  VLFNOTE  )     *
*                                                                     *
*  Authpgm  +                                                         *
*     Names ( +                                                       *
*         IEBCOPY  ICHUT100 ICHUT200 ICHUT400 IRRUT100 IRRUT200 +     *
*         IRRDSC00 ICHDSM00 OMEGAMON OBROUTR  OBSPFAU  DGA0TSO  )     *
*                                                                     *
*  Notbkgnd +                                                         *
*     Names ( +                                                       *
*         OPER     OPERATOR TERM     TERMINAL )                       *
*                                                                     *
*  Authtsf  +                                                         *
*     Names ( +                                                       *
*         IEBCOPY  IKJEFF76 )                                         *
*                                                                     *
*  Platpgm  +                                                         *
*     Names ( +                                                       *
*         IEFBR14  IKJEFF76 )                                         *
*                                                                     *
*  Platcmd  +                                                         *
*     Names ( +                                                       *
*         ALLOCATE ALLOC    ALTLIB   IKJADLIB ATTRIB   ATTR     CALL  *
*         IKJEFFCA SUBMIT   SUB      SYNC     TRANSMIT XMIT     )     *
*                                                                     *
*  Transrec  +                                                        *
*     Nodesmf ( +                                                     *
*              (*,*) +                                                *
*             ) +                                                     *
*     Spoolcl(B)   Sysout(*) +                                        *
*     Cipher(NO) +                                                    *
*     Outwarn(20000,20000)  Outlim(500000) +                          *
*     Vio(VIO     ) +                                                 *
*     Logsel(LOG     ) +                                              *
*     Logname(MISC   ) +                                              *
*     Usrctl(NAMES.TEXT                                 ) +           *
*     Sysctl(SYS1.USER.NAMES                             ) +          *
*     Daprefix(TUPREFIX)                                              *
*                                                                     *
*  Send +                                                             *
*     Opersend(ON) +                                                  *
*     Usersend(ON) +                                                  *
*     Save(ON) +                                                      *
*     Chkbrod(OFF) +                                                  *
*     Usebrod(ON) +                                                   *
*     Msgprotect(ON) +                                                *
*     Logname(BRODCAST) +                                             *
*     Sysplexshr(ON) +                                                *
*     Opersewait(ON)                                                  *
*                                                                     *
*  Help  +                                                            *
*     ENU( +                                                          *
*         SYS1.HELP )                                                 *
*                                                                     *
*  Console  +                                                         *
*     Initunum(1000)  Initsnum(1000)  Maxunum(10000)  Maxsnum(10000)  *
*                                                                     *
*  Test  +                                                            *
*     Tsocmd( +                                                       *
*         ) +                                                         *
*     Subcmd( +                                                       *
*           )                                                         *
*                                                                     *
*  Allocate  +                                                        *
*     default(SHR)                                                    *
*                                                                     *
*---------------------------------------------------------------------*
IKJTSO00 BEGIN_PROC KW=TSO,BASEREG=NO                            RS0302
         L     R2,CVTTVT
         USING TSVT,R2
         CLC   =C'1040',TSVTTSOL       TSO/E 1.4 OR HIGHER?
         JH    IKJTSO99                NO, EXIT
         L     R3,TSVTTPVT             TSO/PARMLIB vector table
         USING TPVT,R3
         CLC   =C'TPVT',TPVT_ID        ARE WE LOST?
         JNE   IKJTSO99                YES, EXIT
         L     R4,TPVTCTLT             Control table
         USING CTLT,R4
         STRING '&TITLEPFX.TSO Parmlib data',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  Member(',TPVT_MEM,')',INTO=LINE   (IKJTSOxx)
         CLC   =C'2060',TSVTTSOL       TSO/E 2.6 OR HIGHER?
         JNH   IKJTSO17                YES,JUMP
         STRING '  Member(',TPVT_MEM1,')',INTO=LINE  (IKJTSOxx)
IKJTSO17 EQU   *
         BRAS  R14,SPACE2              Double Space
*
*        Auth tables
*
         CLC   =C'CTLT',CTLT_ID        ARE WE LOST?
         JNE   IKJTSO29                YES, EXIT
         LA    R5,CTLTTE2              A(IKJEFTE2)
         BRAS  R7,IKJTSO20
         DC    C'Authcmd '             E2
         DC    C'Authpgm '             E8
         DC    C'Notbkgnd'             NS
         DC    C'Authtsf '             AP
         DC    H'-1'
*loop
IKJTSO20 STRING 2X,((R7),8),' +',INTO=LINE
         BRAS  R14,SPACE1          <== yes, print it
         STRING '     Names ( +',INTO=LINE
         BRAS  R14,SPACE1          <== next line
         MVC   LINE,BLANKS             blank out next line
         LA    R6,LINE                 first entry
         LH    R0,8(,R5)               # of entries
         LTR   R0,R0                   any entry in this table?
         JNP   IKJTSO27                no, exit
         L     R1,0(,R5)               start of table
         LA    R1,16(,R1)              skip table header
*--loop
IKJTSO21 CLI   11(R5),8                entry length is 8?
         JE    IKJTSO22                yes, jump
         LA    R1,2(,R1)               skip 2 bytes
IKJTSO22 CLI   0(R1),C' '              blank entry?
         JE    IKJTSO24                yes, jump
         LA    R14,9                   increment in print line
         LA    R15,LINE+70             end of line
         BRXLE R6,R14,IKJTSO23         this line full?
         MVI   0(R6),C'+'              continuation
         BRAS  R14,SPACE1          <== yes, print it
         MVC   LINE,BLANKS             blank out next line
         LA    R6,LINE+9               continuation
IKJTSO23 MVC   0(8,R6),0(R1)           move name
IKJTSO24 LA    R1,8(,R1)               next entry
         BRCT  R0,IKJTSO21             not finished yet, loop more
*--endloop
IKJTSO27 EQU   *
         MVI   9(R6),C')'              close parenthsis
         BRAS  R14,SPACE2              Double Space
         LA    R5,CTLTTE8-CTLTTE2(,R5) next table
         LA    R7,8(,R7)               next name
         CLI   0(R7),X'FF'             last table processed?
         JL    IKJTSO20                not yet, process next one
*endloop
IKJTSO29 EQU   *
*
*        Platform Programs
*
         L     R4,TPVTPPVEC            Control table           JWMMAY96
         USING PPVE,R4                                         JWMMAY96
         CLC   =C'PPVE',PPVE_ID        ARE WE LOST?            JWMMAY96
         JNE   IKJTSO39                YES, EXIT
         STRING '  Platpgm  +',INTO=LINE                       JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         STRING '     Names ( +',INTO=LINE                     JWMMAY96
         BRAS  R14,SPACE1          <== next line               JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE                 first entry             JWMMAY96
         L     R0,PPVE_COUNT           # of entries            JWMMAY96
         LA    R1,PPVE_ENTRY           start of table          JWMMAY96
*loop
IKJTSO32 CLI   0(R1),C' '              blank entry?            JWMMAY96
         JE    IKJTSO35                yes, jump
         LA    R14,9                   increment in print line JWMMAY96
         LA    R15,LINE+70             end of line             JWMMAY96
         BRXLE R6,R14,IKJTSO34         this line full?         JWMMAY96
         MVI   0(R6),C'+'              continuation            JWMMAY96
         BRAS  R14,SPACE1          <== yes, print it           JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE+9               continuation            JWMMAY96
IKJTSO34 MVC   0(8,R6),0(R1)           move name               JWMMAY96
IKJTSO35 LA    R1,8(,R1)               length of an entry      JWMMAY96
         BRCT  R0,IKJTSO32                                     JWMMAY96
*endloop
         MVI   9(R6),C')'              close parenthsis        JWMMAY96
         BRAS  R14,SPACE2              Double Space            JWMMAY96
IKJTSO39 EQU   *
*
*        Platform Commands
*
         L     R4,TPVTFCVEC            Control table           JWMMAY96
         USING FCVE,R4                                         JWMMAY96
         CLC   =C'FCVE',FCVE_ID        ARE WE LOST?            JWMMAY96
         JNE   IKJTSO49                YES, EXIT
         STRING '  Platcmd  +',INTO=LINE                       JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         STRING '     Names ( +',INTO=LINE                     JWMMAY96
         BRAS  R14,SPACE1          <== next line               JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE                 first entry             JWMMAY96
         L     R0,FCVE_COUNT           # of entries            JWMMAY96
         LA    R1,FCVE_ENTRY           start of table          JWMMAY96
*loop
IKJTSO42 CLI   0(R1),C' '              blank entry?            JWMMAY96
         JE    IKJTSO45                yes, jump
         LA    R14,9                   increment in print line JWMMAY96
         LA    R15,LINE+70             end of line             JWMMAY96
         BRXLE R6,R14,IKJTSO44         this line full?         JWMMAY96
         MVI   0(R6),C'+'              continuation            JWMMAY96
         BRAS  R14,SPACE1          <== yes, print it           JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE+9               continuation            JWMMAY96
IKJTSO44 MVC   0(8,R6),0(R1)           move name               JWMMAY96
IKJTSO45 LA    R1,8(,R1)               length of an entry      JWMMAY96
         BRCT  R0,IKJTSO42                                     JWMMAY96
*endloop
         MVI   9(R6),C')'              close parenthsis        JWMMAY96
         BRAS  R14,SPACE2              Double Space            JWMMAY96
IKJTSO49 EQU   *
*
*        Transmit/Receive
*
         L     R4,TPVTXPRMD            Inmxparm table          JWMMAY96
         USING XPRM,R4                                         JWMMAY96
         CLC   =C'INMXPARM',XPRM_ID    ARE WE LOST?            JWMMAY96
         JNE   IKJTSO59                YES, EXIT
*
*        Reformat INMXPARM before HTE26D2 (OS/390 V2R4)
*
         CLC   TSVTTSOL,=C'2060'       HTE26D2 or above?
         JNL   IKJTSO50X               yes, exit
         BRAS  R14,WORKADDR            get work area
         LH    R2,XPRM_LEN             length of old-format XPRM
         LA    R2,XPRM(R2)             convert length to end-address
         L     R7,XPRM_NJE_START       Start of nje/smf pairs
         STRING (XPRM,XPRM_VERS),      HEADER                          X
               X'01000000',            XPRM_VERS=1                     X
               (XPRM_WARN1-4,XPRM_SPOOLCL+1-4),                        X
               INTO=((R1),256)
         LR    R4,R1                   point base reg to new area
******** STH   R15,XPRM_LEN            STORE NEW LENGTH
IKJTSO50X EQU  *
*
         STRING '  Transrec  +',INTO=LINE                      JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         STRING 5X,'Nodesmf ( +',INTO=LINE                     JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         L     R7,XPRM_NJE_START       Start of nje/smf pairs  JWMMAY96
         USING XPRM_NODE,R7                                    JWMMAY96
         LH    R0,XPRM_NJE#            Count of pairs          JWMMAY96
*loop
IKJTSO51 STRING 14X,'(',                                       JWMMAY96X
               (XPRM_NODE,,T),',',(XPRM_SMF,,T),') +',         JWMMAY96X
               INTO=LINE                                       JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         LA    R7,XPRM_NS_L(,R7)       Next pair               JWMMAY96
         BRCT  R0,IKJTSO51             Skip to next pair       JWMMAY96
*endloop
         STRING 13X,') +',INTO=LINE                            JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         DROP  R7                                              JWMMAY96
         STRING 5X,'Spoolcl(',XPRM_SPOOLCL,                    JWMMAY96X
               ')   Sysout(',XPRM_SOUT,') +',INTO=LINE         JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'No    '           Cipher(NO)              JWMMAY96
         TM    XPRM_SW,XPRM_CIPHER_NO Cipher - no?             JWMMAY96
         JO    IKJTSO52                YES, JUMP               JWMMAY96
         LA    R7,=C'YES   '           NO, Cipher(YES)         JWMMAY96
         TM    XPRM_SW,XPRM_CIPHER_YES Cipher - yes?           JWMMAY96
         JO    IKJTSO52                YES, JUMP               JWMMAY96
         LA    R7,=C'ALWAYS'           NO, Cipher(ALWAYS)      JWMMAY96
IKJTSO52 STRING 5X,'Cipher(',((R7),6,T),') +',INTO=LINE        JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         STRING 5X,'Outwarn(',(XPRM_WARN1,F,L),',',            JWMMAYl5X
               (XPRM_WARN2,F,L),')',                           JWMMAY96X
               '  Outlim(',(XPRM_LIM,F,L),') +',INTO=LINE      JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         MVC   WORK256(L'XPRM_VIO_U),XPRM_VIO_U                JWMMAY96
         OC    WORK256(L'XPRM_VIO_U),BLANKS  X'00' -> X'40'    JWMMAY96
         STRING 5X,'Vio(',(WORK256,L'XPRM_VIO_U,T),') +',      JWMMAY96X
               INTO=LINE                                       JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         STRING 5X,'Logsel(',(XPRM_LOGSEL,,T),INTO=LINE
         LA    R1,LINE(R15)            Point to end of text
         BCTR  R1,0                    Point to last char
         MVC   0(3,R1),=C') +'         LOGSEL(LOG. -> LOGSEL(LOG) +
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         STRING 5X,'Logname(',                                 JWMMAY96X
               (XPRM_LOGNAME+1,L'XPRM_LOGNAME-1,T),            JWMMAY96X
               ') +',INTO=LINE                                 JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         STRING 5X,'Usrctl(',(XPRM_USRCTL+1,L'XPRM_USRCTL-1,T),        X
               ') +',INTO=LINE                                 JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         MVC   WORK256(L'XPRM_SYSCTL),XPRM_SYSCTL              JWMMAY96
         OC    WORK256(L'XPRM_SYSCTL),BLANKS   X'00' -> X'40'  JWMMAY96
         STRING 5X,'Sysctl(',(WORK256,L'XPRM_SYSCTL,T),') +',  JWMMAY96X
               INTO=LINE                                       JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'USERID  '         DAPREFIX = USERID       JWMMAY96
         TM    XPRM_SW,XPRM_USERID     Is it true              JWMMAY96
         JO    IKJTSO56                YES, JUMP               JWMMAY96
         LA    R7,=C'TUPREFIX'         DAPREFIX = TUPREFIX     JWMMAY96
IKJTSO56 STRING 5X,'Daprefix(',((R7),8,T),')',INTO=LINE        JWMMAY96
         BRAS  R14,SPACE2              Double Space            JWMMAY96
*
         L     R4,TPVTSEND             IKJEESCB table          JWMMAY96
         USING IKJEESCB,R4                                     JWMMAY96
         CLC   =C'IKJEESCB',EESCB_IDENTIFIER ARE WE LOST?      JWMMAY96
         JNE   IKJTSO59                YES, EXIT
         STRING '  Send +',INTO=LINE                           JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Opersend(ON)            JWMMAY96
         TM    EESCB_FLAGS_1,X'80'     This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Opersend(OFF)       JWMMAY96
         STRING 5X,'Opersend(',((R7),3,T),') +',INTO=LINE      JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Usersend(ON)            JWMMAY96
         TM    EESCB_FLAGS_1,X'40'     This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Usersend(OFF)       JWMMAY96
         STRING 5X,'Usersend(',((R7),3,T),') +',INTO=LINE      JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Save(ON)                JWMMAY96
         TM    EESCB_FLAGS_1,X'20'     This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Save(OFF)           JWMMAY96
         STRING 5X,'Save(',((R7),3,T),') +',INTO=LINE          JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Chkbrod(ON)             JWMMAY96
         TM    EESCB_FLAGS_1,X'10'     This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Chkbrod(OFF)        JWMMAY96
         STRING 5X,'Chkbrod(',((R7),3,T),') +',INTO=LINE       JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Usebrod(ON)             JWMMAY96
         TM    EESCB_FLAGS_1,X'08'     This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Usebrod(OFF)        JWMMAY96
         STRING 5X,'Usebrod(',((R7),3,T),') +',INTO=LINE       JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Msgprotect(ON)          JWMMAY96
         TM    EESCB_FLAGS_1,X'04'     This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Msgprotect(OFF)     JWMMAY96
         STRING 5X,'Msgprotect(',((R7),3,T),') +',INTO=LINE    JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         STRING 5X,'Logname(',(EESCB_LOGNAME,,T),') +',        JWMMAY96x
               INTO=LINE                                       JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Sysplexshr(ON)          JWMMAY96
         TM    EESCB_FLAGS_1,X'02'     This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Sysplexshr(OFF)     JWMMAY96
         STRING 5X,'Sysplexshr(',((R7),3,T),') +',INTO=LINE    JWMMAY96
         BRAS  R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Opersewait(ON)          JWMMAY96
         TM    EESCB_FLAGS_1+1,X'80'   This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Opersewait(OFF)     JWMMAY96
         STRING 5X,'Opersewait(',((R7),3,T),')',INTO=LINE      JWMMAY96
*
         L     R4,TPVTHELP             IKJEFHCB table          JWMMAY96
         USING HELP,R4                                         JWMMAY96
         CLC   =C'IKJEFHCB',HELP_ID    ARE WE LOST?            JWMMAY96
         JNE   IKJTSO59                YES, EXIT
         BRAS  R14,SPACE2              Double Space            JWMMAY96
         STRING '  Help  +',INTO=LINE                          JWMMAY96
         L     R7,HELP_LANG_CNT        Number of lang entries  JWMMAY96
         LA    R1,HELP_LANG_ENTRY      First lang entry        JWMMAY96
         USING HELP_LANG_ENTRY,R1                              JWMMAY96
*loop
IKJTSO57 BRAS  R14,SPACE1              Single Space            JWMMAY96
         STRING 5X,HELP_LANG_TYPE,'( +',INTO=LINE              JWMMAY96
         SR    R0,R0                   clear work reg          JWMMAY96
         IC    R0,HELP_DSN_COUNT       Count of dsn's          JWMMAY96
         LA    R2,HELP_DSN_ENTRY                               JWMMAY96
         USING HELP_DSN_ENTRY,R2                               JWMMAY96
*--loop
IKJTSO58 BRAS  R14,SPACE1              Single space            JWMMAY96
         MVC   WORK256(44),HELP_DSN    Move the dsn            JWMMAY96
         OC    WORK256(44),BLANKS      X'00' -> X'40'          JWMMAY96
         STRING 9X,(WORK256,44,T),' +',INTO=LINE               JWMMAY96
         LA    R2,HELP_END_ENTRY       Skip this entry         JWMMAY96
         BRCT  R0,IKJTSO58             Next dsn                JWMMAY96
*--end loop
         LA    R15,LINE(R15)           end of dsm              JWMMAY96
         BCTR  R15,R0                                          JWMMAY96
         MVC   0(3,R15),=C') +'                                JWMMAY96
         L     R1,HELP_NEXT_LANG_ENTRY Next entry              JWMMAY96
         BRCT  R7,IKJTSO57                                     JWMMAY96
*endloop
         MVI   2(R15),C' '             Remove last '+'         JWMMAY96
         BRAS  R14,SPACE2              Double Space            JWMMAY96
         L     R4,TPVTCONSOLE          IKJCNPRM table          JWMMAY96
         USING CNPRM,R4                                        JWMMAY96
         CLC   =C'IKJCNPRM',CNPRM_ID   ARE WE LOST?            JWMMAY96
         JNE   IKJTSO59                YES, EXIT
         STRING '  Console  +',INTO=LINE                       JWMMAY96
         BRAS  R14,SPACE1              Single space            JWMMAY96
         STRING 5X,                                            JWMMAY96X
               'Initunum(',(CNPRM_INITUNUM,F,L),')  ',         JWMMAY96X
               'Initsnum(',(CNPRM_INITSNUM,F,L),')  ',         JWMMAY96X
               'Maxunum(',(CNPRM_MAXUNUM,F,L),')  ',           JWMMAY96X
               'Maxsnum(',(CNPRM_MAXSNUM,F,L),')  ',           JWMMAY96X
               INTO=LINE                                       JWMMAY96
         BRAS  R14,SPACE2              Double space            JWMMAY96
IKJTSO59 EQU   *
*
*        TSO TEST
*
         L     R4,TPVTTEST             TPT table               JWMMAY96
         USING TPT,R4                                          JWMMAY96
         CLC   =C'TPT ',TPT_ID         ARE WE LOST?            JWMMAY96
         JNE   IKJTSO69                YES, EXIT
         STRING '  Test  +',INTO=LINE                          JWMMAY96
         BRAS  R14,SPACE1              Single space            JWMMAY96
         STRING 5X,'Tsocmd( +',INTO=LINE                     JWMMAY96
         BRAS  R14,SPACE1              Single space            JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE                 first entry             JWMMAY96
         L     R5,TPT_TCT_ENTRY        A(TCT table)            JWMMAY96
         USING TCT_TEST,R5                                     JWMMAY96
         CLC   =C'TCT ',TCT_ID         ARE WE LOST?            JWMMAY96
         JNE   IKJTSO69                YES, EXIT
         L     R0,TPT_TCT_LENGTH       Load length of C.B.     JWMMAY96
         SRL   R0,3                    Divide by 8             JWMMAY96
         LA    R1,TCT_TSOCMD                                   JWMMAY96
         USING TCT_TSOCMD,R1                                   JWMMAY96
*--loop
IKJTSO62 CLI   0(R1),C' '              blank entry?            JWMMAY96
         JE    IKJTSO65                yes, jump
         LA    R14,9                   increment in print line JWMMAY96
         LA    R15,LINE+70             end of line             JWMMAY96
         BRXLE R6,R14,IKJTSO64         this line full?         JWMMAY96
         MVI   0(R6),C'+'              continuation            JWMMAY96
         BRAS  R14,SPACE1          <== yes, print it           JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE+9               continuation            JWMMAY96
IKJTSO64 MVC   0(8,R6),TCT_TSOCMD      move name               JWMMAY96
IKJTSO65 LA    R1,TCT_ENTRY_END        length of an entry      JWMMAY96
         BRCT  R0,IKJTSO62                                     JWMMAY96
*--end loop
         MVC   9(3,R6),=C') +'         close parenthsis        JWMMAY96
         BRAS  R14,SPACE1          <== yes, print it           JWMMAY96
         STRING 5X,'Subcmd( +',INTO=LINE                       JWMMAY96
         BRAS  R14,SPACE1              Single space            JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE                 first entry             JWMMAY96
         L     R5,TPT_SCT_ENTRY        A(TCT table)            JWMMAY96
         USING SCT_TEST,R5                                     JWMMAY96
         CLC   =C'SCT ',SCT_ID         ARE WE LOST?            JWMMAY96
         JNE   IKJTSO69                YES, EXIT
         L     R0,TPT_SCT_LENGTH       Load length of C.B.     JWMMAY96
         SRL   R0,4                    Divide by 16            JWMMAY96
         LA    R1,SCT_SUBCMD                                   JWMMAY96
         USING SCT_SUBCMD,R1                                   JWMMAY96
*--loop
IKJTSO67 CLI   0(R1),C' '              blank entry?            JWMMAY96
         JE    IKJTSO68                yes, jump
         STRING 9X,'(',SCT_SUBCMD,' ',SCT_PGM,') +',           JWMMAY96X
               INTO=LINE                                       JWMMAY96
         BRAS  R14,SPACE1              Single space            JWMMAY96
IKJTSO68 LA    R1,SCT_ENTRY_END        length of an entry      JWMMAY96
         BRCT  R0,IKJTSO67                                     JWMMAY96
*--end loop
         STRING 11X,')',INTO=LINE                              JWMMAY96
         BRAS  R14,SPACE2              Double space            JWMMAY96
IKJTSO69 EQU   *
*
*        Allocate Command
*
         L     R4,TPVTALPL             ALPL table              JWMMAY96
         USING ALPL,R4                                         JWMMAY96
         CLC   =C'ALPL',ALPL_ID        ARE WE LOST?            JWMMAY96
         JNE   IKJTSO79                YES, EXIT
         STRING '  Allocate  +',INTO=LINE                      JWMMAY96
         BRAS  R14,SPACE1              Single space            JWMMAY96
         LA    R7,=C'SHR'              Opersewait(ON)          JWMMAY96
         TM    ALPL_FLAG,ALPL_SHR      Alloc(SHR) ?            JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'OLD'              NO, Opersewait(OFF)     JWMMAY96
         STRING 5X,'default(',((R7),3,T),')',INTO=LINE         JWMMAY96
         BRAS  R14,SPACE2              Double space            JWMMAY96
IKJTSO79 EQU   *
*
IKJTSO99 END_PROC
         TITLE 'SHOWMVS &REL - TSO/E Exits and Tables'
*---------------------------------------------------------------------*
*                                                                     *
*TSO Exits and Tables                                                 *
*                                                                     *
*  Name      Type   Origin   Address                                  *
*  IKJEFTE2  Table  Steplib  80341234                                 *
*  IKJEFTE8  Table  Linklib  80341234                                 *
*  INMXZ21R  Exit   Parmlib  80341234                                 *
*  IRXTINIT  Exit   LPA      80341234                                 *
*                                                                     *
*---------------------------------------------------------------------*
EXTAB00  BEGIN_PROC KW=TSO,BASEREG=NO                            RS0302
         L     R3,CVTTVT
         USING TSVT,R3
         CLC   =C'2020',TSVTTSOL       TSO/E 2.2 OR HIGHER?
         JH    EXTAB99                 NO, EXIT
         L     R4,TSVTETVP             EXIT/TABLE VECTOR
         USING EXTAB_VECT,R4
         CLC   =C'EXTV',EXTV_ID        am I lost?
         JNE   EXTAB99                 yes, exit
         L     R5,EXTV_ENTRY#          number of entries
         STRING '&TITLEPFX.TSO Exits and Tables',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  Name      Type   Origin   Address',INTO=LINE
         BRAS  R14,SPACE1              Single Space
*loop
EXTAB21  CLI   EXTV_FLAG1,0            This entry active?
         JE    EXTAB27                 no, ignore it
         LA    R6,=C'Table'            type
         CLC   =C'IKJEFT',EXTV_ENT_NAME is this a table?
         JE    *+8                     yes, jump
         LA    R6,=C'Exit '            type
         TM    EXTV_FLAG1,EXTV_FLAG1_LPA
         JNO   *+8
         LA    R7,=CL7'LPA'            Origin
         TM    EXTV_FLAG1,EXTV_FLAG1_LNKLST
         JNO   *+8
         LA    R7,=CL7'Linklib'        Origin
         TM    EXTV_FLAG1,EXTV_FLAG1_STEPLIB
         JNO   *+8
         LA    R7,=CL7'Steplib'        Origin
         STRING 2X,EXTV_ENT_NAME,2X,   name                            X
               ((R6),5),2X,            type                            X
               ((R7),7),1X,            origin                          X
               (EXTV_LOAD_ADDR,,X),    address                         X
               INTO=LINE
         BRAS  R14,SPACE1              Single Space
EXTAB27  EQU   *
         LA    R4,L'EXTV_ENT(,R4)      next entry
         BRCT  R5,EXTAB21
*endloop
         BRAS  R14,BLANK1              Blank line
EXTAB99  END_PROC
         TITLE 'SHOWMVS &REL - RACF Data'
*---------------------------------------------------------------------*
*                                                                     *
*RACF Data                                                            *
*                                                                     *
*  SYS1.RACF                            SYSCAT  Active Master Primary *
*  SYS1.UADS                            SYSCAT  TSO                   *
*                                                                     *
*  Password expires after 30 days;   ID revoked after 3 tries.        *
*                                                                     *
*  Started procedures table (ICHRIN03)                                *
*                                                                     *
*    JES2     MVSSTC   MVSID    / Privileged                          *
*    LLA      MVSSTC   MVSID    / Privileged                          *
*                                                                     *
*  Authorized program table (ICHAUTAP)                                *
*                                                                     *
*    AMASPZAP MVSSTC   MVSID    / Privileged                          *
*                                                                     *
*---------------------------------------------------------------------*
RACFDATA BEGIN_PROC KW=RACF,BASEREG=NO                           RS0302
         L     R7,CVTRAC               RACF VECTOR TABLE
         USING RCVT,R7
         CLC   RCVTID,=C'RCVT'         Is this RACF?
         JNE   RACFD70                 no, prevent S0C4
         STRING '&TITLEPFX.RACF Data:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         TM    RCVTSTAT,RCVTRNA        inactive?
         JO    RACFD91                 no, active
         TM    RCVTFLGS,RCVTROFF       deactivated?
         JO    RACFD92                 yes, exit
RACFD10  L     R5,RCVTDSDT             DSN table
         USING DSDT,R5
         CLC   DSDTID,=C'DSDT'         Is this RACF?
         JNE   RACFD70                 no, prevent S0C4
         L     R2,DSDTNUM              number of table entries
         SLL   R2,1                    each consists of 2 entries
         LA    R6,DSDTENTY2            start of table               2.1
         USING DSDE,R6
*loop
RACFD21  L     R3,DSDERUCB             UCB pointer
         USING UCBOB,R3
         TM    DSDESTAT,DSDEACTV       Active?
         JNO   RACFD25                 no, ignore
         STRING 2X,DSDEDSN,1X,UCBVOLI,INTO=LINE
         LA    R4,LINE+2(R15)          status
        #STATUS DSDESTAT,DSDEACTV,'Active'
        #STATUS DSDESTAT,DSDEMSTR,'Master'
        #STATUS DSDESTAT,DSDEPRIM,'Primary'
         TM    DSDESTAT,DSDEPRIM       was primary?
         JO    *+L'*+6                 yes
         MVC   0(7,R4),=C'Back-up'     no, show it
         BRAS  R14,SPACE1          <== yes, next line
RACFD25  EQU   *
         LA    R6,L'DSDENT2(,R6)       bump to next                2.1
RACFD29  BRCT  R2,RACFD21
*endloop
         DROP  R5,R6                   DSDT,DSDE
RACFD30  CLI   RCVTUADS,0              TSO?
         JE    RACFD50                 no                        RS0302
         STRING 2X,RCVTUADS,1X,RCVTUVOL,INTO=LINE
         LA    R4,LINE+2(R15)          show it
         MVC   0(3,R4),=C'TSO'
         BRAS  R14,SPACE2              Double Space
*
         STRING '  Passwords expire after ',(RCVTPINV,FL1,L),' days  ',X
               '(warning period is ',(RCVTWARN,FL1,L),' days)',        X
               INTO=LINE
         BRAS  R14,SPACE1              next line
         STRING '  Number of password generations: ',(RCVTHIST,FL1,L6),X
               INTO=LINE
         BRAS  R14,SPACE1              next line
         STRING '  ID revoked after ',(RCVTRVOK,FL1,L),' tries.',      X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  Protect All     : ',INTO=LINE                 RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
         TM    RCVTFLG1+1,RCVTPRO                                RS0302
         JZ    RACFD31                                           RS0302
         MVC   0(8,R4),=C'Fail    '                              RS0302
        #STATUS RCVTFLG1+1,RCVTPROF,'Warning'                    RS0302
RACFD31  EQU   *                                                 RS0302
         STRING (LINE,35),'List of Groups  : ',INTO=LINE         RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTOPTX,RCVTLGRP,'Active  '                     RS0302
         BRAS  R14,SPACE1              Single Space              RS0302
         STRING '  DASDVOL         : ',INTO=LINE                 RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTSTA1,RCVTDASD,'Active  '                     RS0302
         STRING (LINE,35),'TAPEVOL         : ',INTO=LINE         RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTSTA1,RCVTTAPE,'Active  '                     RS0302
         BRAS  R14,SPACE1              Single Space              RS0302
         STRING '  ADSP            : ',INTO=LINE                 RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Active  '                              RS0302
        #STATUS RCVTSTAT,RCVTNADS,'Inactive'                     RS0302
         STRING (LINE,35),'TAPEDSN         : ',INTO=LINE         RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTFLG1,RCVTTDSN,'Active  '                     RS0302
         BRAS  R14,SPACE1              Single Space              RS0302
         STRING '  Enh Generic     : ',INTO=LINE                 RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTSTAT,RCVTEGN,'Active  '                      RS0302
         STRING (LINE,35),'Inact Interval  : ',(RCVTINAC),INTO=LINE
         TR    LINE,TRTPRINT           get rid of garbage if hdr is bad
         BRAS  R14,SPACE1              Single Space              RS0302
         STRING '  JES-XBMALLRACF  : ',INTO=LINE                 RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTSTA1,RCVTJXAL,'Active  '                     RS0302
         STRING (LINE,35),'JES-EARLYVERIFY : ',INTO=LINE         RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTSTA1,RCVTJCHK,'Active  '                     RS0302
         BRAS  R14,SPACE1              Single Space              RS0302
         STRING '  JES-BATCHALLRACF: ',INTO=LINE                 RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTSTA1,RCVTJXAL,'Active  '                     RS0302
         STRING (LINE,35),'NJE-UserID      :  ',(RCVTJSYS),INTO=LINE
         BRAS  R14,SPACE1              Single Space              RS0302
         STRING '  Undefined Userid:  ',(RCVTJUND),INTO=LINE     RS0302
         BRAS  R14,SPACE1              Single Space              RS0302
         STRING '  Password Rules  :  ',INTO=LINE                RS0902
         LA    R5,RCVTSNTX                                       RS0302
         USING RCVTSNTD,R5                                       RS0302
         CLI   0(R5),X'00'                                       RS0302
         JNE   RACFD33                                           RS0302
         STRING (LINE,,T),'n/a',INTO=LINE                        RS0902
         BRAS  R14,SPACE1              Single Space              RS0302
         J     RACFD38                                           RS0302
RACFD33  DS    0H                                                RS0302
         BRAS  R14,SPACE1              Single Space              RS0302
         LA    R6,8                    number of rules           RS0302
*loop                                                            RS0302
RACFD35  DS    0H                                                RS0302
         CLI   0(R5),X'00'             Is this rule in use ?     RS0302
         JE    RACFD37                   no leave                RS0302
         STRING '    Rules         :  ',(RCVTRUL1,8),INTO=LINE   RS0302
         BRAS  R14,SPACE1              Single Space              RS0302
         LA    R5,10(,R5)                                        RS0302
         BRCT  R6,RACFD35                                        RS0302
*endloop                                                         RS0302
         DROP  R5                                                RS0302
RACFD37  DS    0H                                                RS0302
         STRING '    A-alpha C-consonant L-alphanum N-numeric',        X
               ' V-vowel W-novowel *-anything',INTO=LINE         RS0302
         BRAS  R14,SPACE2              Double Space              RS0302
RACFD38  DS    0H                                                RS0302
         STRING '  Exit      Entry    Desc',INTO=LINE            RS0302
         BRAS  R14,SPACE1              Single Space              RS0302
         ICM   R5,B'1111',RCVTRIX                                RS0302
         JZ    RACFD39                                           RS0302
         STRING '  ICHRIX01 ',(RCVTRIX,,X),                            X
               '  Racroute request','=verify(x) ','pre-exit',INTO=LINE
         BRAS  R14,SPACE1              Single Space              RS0302
RACFD39  DS    0H                                                RS0302
         ICM   R5,B'1111',RCVTRIXP                               RS0302
         JZ    RACFD40_1                                         RS0302
         STRING '  ICHRIX02 ',(RCVTRIXP,,X),                           X
               '  Racroute request','=verify(x) ','post-exit',INTO=LINE
         BRAS  R14,SPACE1              Single Space              RS0302
RACFD40_1  DS    0H                                              RS0302
         ICM   R5,B'1111',RCVTRCX                                RS0302
         JZ    RACFD40_2                                         RS0302
         STRING '  ICHRCX01 ',(RCVTRCX,,X),                            X
               '  Racroute request','=auth ','pre-exit',INTO=LINE
         BRAS  R14,SPACE1              Single Space              RS0302
RACFD40_2 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTRCXP                               RS0302
         JZ    RACFD40_3                                         RS0302
         STRING '  ICHRCX02 ',(RCVTRCXP,,X),                           X
               '  Racroute request','=auth ','post-exit',INTO=LINE
         BRAS  R14,SPACE1              Single Space              RS0302
RACFD40_3 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTRDX                                RS0302
         JZ    RACFD40_4                                         RS0302
         STRING '  ICHRDX01 ',(RCVTRDX,,X),                            X
               '  Racroute request','=define ','pre-exit',INTO=LINE
         BRAS  R14,SPACE1              Single Space              RS0302
RACFD40_4 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTRDXP                               RS0302
         JZ    RACFD40_5                                         RS0302
         STRING '  ICHRDX02 ',(RCVTRDXP,,X),                           X
               '  Racroute request','=define ','post-exit',INTO=LINE
         BRAS  R14,SPACE1              Single Space              RS0302
RACFD40_5 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTRLX                                RS0302
         JZ    RACFD40_6                                         RS0302
         STRING '  ICHRLX01 ',(RCVTRLX,,X),                            X
               '  Racroute request','=list ','pre-exit',INTO=LINE
         BRAS  R14,SPACE1              Single Space              RS0302
RACFD40_6 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTRLXP                               RS0302
         JZ    RACFD40_7                                         RS0302
         STRING '  ICHRLX02 ',(RCVTRLXP,,X),                           X
               '  Racroute request','=list ','post-exit',INTO=LINE
         BRAS  R14,SPACE1              Single Space              RS0302
RACFD40_7 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTFRXP                               RS0302
         JZ    RACFD40_8                                         RS0302
         STRING '  ICHRFX01 ',(RCVTFRXP,,X),                           X
               '  Racroute request','=fastpath ','pre-exit',INTO=LINE
         BRAS  R14,SPACE1              Single Space              RS0302
RACFD40_8 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTFRX2                               RS0302
         JZ    RACFD40_9                                         RS0302
         STRING '  ICHRFX02 ',(RCVTFRX2,,X),                           X
               '  Racroute request','=fastpath ','post-exit',INTO=LINE
         BRAS  R14,SPACE1              Single Space              RS0302
RACFD40_9 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTFRX3                               RS0302
         JZ    RACFD40_10                                        RS0302
         STRING '  ICHRFX03 ',(RCVTFRX3,,X),                           X
               '  Racroute request','=fastpath ','exit',INTO=LINE
         BRAS  R14,SPACE1              Single Space              RS0302
RACFD40_10 DS    0H                                              RS0302
         ICM   R5,B'1111',RCVTFRX4                               RS0302
         JZ    RACFD40_11                                        RS0302
         STRING '  ICHRFX04 ',(RCVTFRX4,,X),                           X
               '  Racroute request','=fastpath ','exit',INTO=LINE
         BRAS  R14,SPACE1              Single Space              RS0302
RACFD40_11 DS    0H                                              RS0302
         ICM   R5,B'1111',RCVTPWDX                               RS0302
         JZ    RACFD40_12                                        RS0302
         STRING '  ICHPWX01 ',(RCVTPWDX,,X),                           X
               '  Password ','exit',INTO=LINE                    RS0302
         BRAS  R14,SPACE1              Single Space              RS0302
RACFD40_12 DS    0H                                              RS0302
         ICM   R5,B'1111',RCVTDESX                               RS0302
         JZ    RACFD40_13                                        RS0302
         STRING '  ICHDES01 ',(RCVTDESX,,X),                           X
               '  Password ','encryption ','exit',INTO=LINE      RS0302
         BRAS  R14,SPACE1              Single Space              RS0302
RACFD40_13 DS    0H                                              RS0302
         BRAS  R14,BLANK1                                        RS0302
         AIF   (NOT D'CVTH6608).RACFD50 OS/390 R8?               RS0803
         TM    HBB6608,L'HBB6608       running on OS/390 R8?     RS0803
         JZ    RACFD50                 no, jump                  RS0803
         L     R5,RCVTCDTP             Class Name Syntax table   RS0302
         USING CNST,R5                 tell assembly             RS0302
         STRING '  Class      ID  RC Refer    Stoken           ',      X
               INTO=LINE                                         RS0302
*              'UACC/MFLG/FLG0',INTO=LINE                        RS0302
         BRAS  R14,SPACE1              Single Space              RS0302
*loop                                                            RS0302
RACFD41  DS    0H                                                RS0302
         L     R6,CNSTCNSX             CNST extension            RS0302
         USING CNSX,R6                 tell assembly             RS0302
*        #SNAP ADDR=(R5),LENGTH=30     Debug
*        STRING 2X,CNSTNAME,2X,(CNSTID,FL1,R3B),1X,(CNSTDFRC,FL1,R3B), X
               1X,CNSTXREF,1X,(CNSTSTKN,,X),INTO=LINE            RS0302
         STRING 2X,CNSTNAME,2X,(CNST+2,FL1,R3B),1X,(CNSX+136,FL1,R3B), X
               1X,(CNST+11,8),1X,(CNSX+144,8,X),INTO=LINE
*        LA    R4,LINE+1(R15)                                    RS0302
*       #STATUS CNSTUACC,CNSTALTR,'ALTER'                        RS0302
*       #STATUS CNSTUACC,CNSTCNTL,'CNTL'                         RS0302
*       #STATUS CNSTUACC,CNSTUPDT,'UPDATE'                       RS0302
*       #STATUS CNSTUACC,CNSTREAD,'READ'                         RS0302
*       #STATUS CNSTUACC,CNSTEXEC,'EXEC'                         RS0302
*       #STATUS CNSTUACC,CNSTNONE,'NONE'                         RS0302
*        MVI   0(R4),C'/'                                        RS0302
*        LA    R4,2(,R4)                                         RS0302
*       #STATUS CNSTMFLG,CNSTRGRP,'RESGROUP'                     RS0302
*       #STATUS CNSTMFLG,CNSTACEE,'ACEEUACC'                     RS0302
*       #STATUS CNSTMFLG,CNSTOPER,'OPER'                         RS0302
*       #STATUS CNSTMFLG,CNSTRACL,'RACLIST allowed'              RS0302
*       #STATUS CNSTMFLG,CNSTGENL,'GENLIST allowed'              RS0302
*       #STATUS CNSTMFLG,CNSTDSPC,'DATASPACE'                    RS0302
*       #STATUS CNSTMFLG,CNSTOWNR,'USER'                         RS0302
*        MVI   0(R4),C'/'                                        RS0302
*        LA    R4,2(,R4)                                         RS0302
*       #STATUS CNSTFLG0,CNSTRLRQ,'must RACLIST'                 RS0302
*       #STATUS CNSTFLG0,CNSTPRDF,'PROF allowed'                 RS0302
*       #STATUS CNSTFLG0,CNSTUSLB,'SECLABEL req'                 RS0302
*       #STATUS CNSTFLG0,CNSTRMAC,'RESERVE MAC'                  RS0302
*       #STATUS CNSTFLG0,CNSTDUP,'CHAR 1-4 dupl'                 RS0302
         BRAS  R14,SPACE1              Single Space              RS0302
         AH    R5,CNSTLGT              Add length                RS0302
         CLC   CNSTLGT,=H'0'           If null end               RS0302
         JNE   RACFD41                                           RS0302
*endloop                                                         RS0302
         BRAS  R14,BLANK1              blank line                RS0302
*        ICHRIN03 (Authorized procedures)
*        see SYS1.SAMPLIB(RACTABLE)
*
.RACFD50 ANOP                                                    RS0803
RACFD50  ICM   R5,B'1111',RCVTSPT      ICHRIN03 table
         JZ    RACFD60                 none
         LH    R6,0(,R5)               number of entries
         SLL   R6,17                   clear out format flag
         SRL   R6,17                   # of entries in low 15 bits
         LTR   R6,R6                   any entry in this table?
         JZ    RACFD60                 none, exit
         STRING '  Started procedures table (ICHRIN03)',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         LA    R3,2(,R5)               first entry
         SLR   R2,R2                   Initialize counter
*loop
RACFD51  LA    R2,1(,R2)               count entries
         STRING ((R2),,R6B),2X,(0(R3),8),1X,(8(R3),8),1X,(16(R3),8),   X
               INTO=LINE
         TR    LINE,TRTPRINT           get rid of garbage if hdr is bad
         TM    0(R5),X'80'             new format?
         JZ    RACFD52                 no, old
         LA    R4,LINE+1(R15)
         MVI   0(R4),C'/'
         LA    R4,2(R4)                status
        #STATUS 24(R3),BIT0,'Privileged'
        #STATUS 24(R3),BIT1,'Trusted'
RACFD52  BRAS  R14,SPACE1          <== next line
         LA    R3,24(,R3)              next entry
         TM    0(R5),X'80'             new format?
         JZ    RACFD55                 no, old
         LA    R3,8(,R3)               yes
RACFD55  BRCT  R6,RACFD51              loop if more
*endloop
         BRAS  R14,BLANK1              blank line
*
RACFD60  ICM   R5,B'1111',RCVTAUTP     ICHAUTAB table
         JZ    RACFD99                 none
         USING RCATABLE,R5
         CLI   RCNAME,C' '             empty (last entry)?
         JE    RACFD99                 yes, none
         STRING '  Authorized program table (ICHAUTAP)',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         SLR   R2,R2                   Initialize counter
*loop
RACFD61  LA    R2,1(,R2)               count entries
         STRING ((R2),,R6B),2X,RCNAME,INTO=LINE
         TM    RCFLAGS,RCINIT+RCRSV    any flag on?
         JZ    RACFD62                 no, jump
         LA    R4,LINE+1(R15)          point past pgm name
         MVI   0(R4),C'/'              separator
         LA    R4,2(,R4)               authorization
        #STATUS RCFLAGS,RCINIT,'RACINIT'
        #STATUS RCFLAGS,RCRSV,'RACLIST'
RACFD62  LA    R5,RCATABLE+12          next entry
         BRAS  R14,SPACE1          <== next line
         CLI   0(R5),C' '              last entry?
         JNE   RACFD61                 no
*endloop
         J     RACFD98
*
*        ACF2
*
RACFD70  CLC   RCVTID,=C'ACF2'         Is this ACF2?
         JNE   RACFD80                 no, jump
         J     RACFD99
*
*        TOP-Secret
*
RACFD80  CLC   RCVTID,=C'RTSS'         Is this Top-secret?
         JNE   RACFD99                 no, jump
         J     RACFD99
*
RACFD91  STRING '  RACF is inactive',INTO=LINE
         J     RACFD97
RACFD92  STRING '  RACF has been deactivated by a RVARY command',      X
               INTO=LINE
*
RACFD97  BRAS  R14,SPACE1          <== next line
RACFD98  BRAS  R14,BLANK1              blank line
RACFD99  END_PROC
*---------------------------------------------------------------------*
         TITLE 'SHOWMVS &REL - Address Space Usage'
*---------------------------------------------------------------------*
*                                                                     *
*Address Space Usage                                                  *
*                                                                     *
*                          Total         In use      Available        *
*                                                                     *
*  Address spaces            250             99            151        *
*    Started/SASI              5              0              5        *
*    Non-reusable              5              1              4        *
*             Bad             15                                      *
*                                                                     *
*---------------------------------------------------------------------*
USERS    BEGIN_PROC KW=USERS,BASEREG=NO                          RS0302
         L     R6,CVTASVT
         USING ASVT,R6
         STRING '&TITLEPFX.Address Space Usage',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING 26X,'Total',9X,'In use',6X,'Available',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R1,ASVTMAXI             MAXUSER
         SL    R1,ASVTAAV              AVAILABLE
         STRING '  Address spaces',(ASVTMAXI,F,R15B),                  X
               ((R1),,R15B),(ASVTAAV,F,R15B),INTO=LINE
         BRAS  R14,SPACE1          <== next line
         L     R1,ASVTSTRT             MAXUSER
         SL    R1,ASVTAST              AVAILABLE
         STRING '    Started/SASI',(ASVTSTRT,F,R15B),                  X
               ((R1),,R15B),(ASVTAST,F,R15B),INTO=LINE
         BRAS  R14,SPACE1          <== next line
         L     R1,ASVTNONR             MAXUSER
         SL    R1,ASVTANR              AVAILABLE
         STRING '    Non-reusable',(ASVTNONR,F,R15B),                  X
               ((R1),,R15B),(ASVTANR,F,R15B),INTO=LINE
         BRAS  R14,SPACE1          <== next line
*
*        Count "bad" address spaces                                @DHC
*
         L     R0,ASVTMAXU             number of ASVT slots
         SR    R1,R1
         LA    R2,ASVTENTY             point at first ASVT entry
         LA    R3,ASVTENTY             point at first ASVT entry
*loop
USERSL5  CLM   R2,B'0111',1(R3)        Master ASVT entry?
         JNE   USERSL5N                no, jump
         LA    R1,1(,R1)               yes, increment counter
USERSL5N LA    R3,4(,R3)               next ASVT entry
         BRCT  R0,USERSL5              run the table
*endloop
         STRING '             Bad',((R1),,R15B),INTO=LINE
         BRAS  R14,SPACE2              Double Space
         DROP  R6                      ASVT
*
*Active Jobs:
*
*  BACKUP12  BACKUP15
*
*TSO Users:
*
*  IBMUSER   SYSTEM1
*
*Started Tasks:
*
*  *MASTER*  PCAUTH    RASP      TRACE     XCFAS     GRS       SMXC
*  DUMPSRV   CONSOLE   ANTMAIN   ALLOCAS   SMF       VLF       LLA
*
         STRING '&TITLEPFX.Active Jobs:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         BRAS  R14,WORKADDR            get work space
         LR    R2,R1                   addr of work area
         ST    R2,WKCELL1              save it for SORT8 rtne
         LA    R4,1                    first ASID
         L     R5,CVTASVT              point to ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
         SLR   R6,R6                   init counter
*loop
USERS11  LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R15,R1                  VALID ASID?
         JNP   USERS11N                NO, JUMP
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JZ    USERS11N                no - CONTINUE
         LA    R6,1(,R6)               increase counter        DL9809
         MVC   0(8,R2),0(R1)           move job name
         ST    R2,WKCELL1+4            save it for SORT8 rtne
         LA    R2,8(,R2)               bump addr in work area
USERS11N LA    R4,1(,R4)               bump ASID
         BRCT  R5,USERS11              next address space
*endloop
         STRING '  (none)',INTO=LINE   set default value
         CL    R2,WKCELL1              any JOB found?
         JE    USERS19                 none, exit
         BRAS  R14,SORT8            <- sort the names
         SLR   R2,R2                   first time switch
*loop
USERS13  BRAS  R14,EOL                 check for end-of-line
         MVC   0(8,R2),0(R1)           move job name
         CL    R1,WKCELL1+4            last entry?
         LA    R1,8(,R1)               next name
         JNE   USERS13                 not finished yet
*endloop
USERS19  BRAS  R14,SPACE2              Double Space
         LTR   R6,R6                   any JOB?
         JZ    USERS19X                no, exit
         STRING '# of active Jobs: ',((R6),,L),INTO=LINE       DL9809
         BRAS  R14,SPACE2              Double Space            DL9809
USERS19X EQU   *
*
         STRING '&TITLEPFX.TSO Users:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         BRAS  R14,WORKADDR            get work space
         LR    R2,R1                   addr of work area
         ST    R2,WKCELL1              save it for SORT8 rtne
         LA    R4,1                    first ASID
         L     R5,CVTASVT              point to ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
         SLR   R6,R6                   init counter
*loop
USERS21  LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R15,R1                  VALID ASID?
         JNP   USERS21N                NO, JUMP
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   USERS21N                yes - CONTINUE
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         JZ    USERS21N                no - CONTINUE
         L     R14,ASCBOUCB-ASCB(,R15) point to OUCB
         TM    OUCBYFL-OUCB(R14),OUCBSTT+OUCBMNT  START OR MOUNT ?
         JNZ   USERS21N                YES, IGNORE
         LA    R6,1(,R6)               increase counter        DL9809
         MVC   0(8,R2),0(R1)           move job name
         ST    R2,WKCELL1+4            save it for SORT8 rtne
         LA    R2,8(,R2)               bump addr in work area
USERS21N LA    R4,1(,R4)               bump ASID
         BRCT  R5,USERS21              next address space
*endloop
         STRING '  (none)',INTO=LINE   set default value
         CL    R2,WKCELL1              any TSU found?
         JE    USERS29                 none, exit
         BRAS  R14,SORT8            <- sort the names
         SLR   R2,R2                   first time switch
*loop
USERS23  BRAS  R14,EOL                 check for end-of-line
         MVC   0(8,R2),0(R1)           move job name
         CL    R1,WKCELL1+4            last entry?
         LA    R1,8(,R1)               next name
         JNE   USERS23                 not finished yet
*endloop
USERS29  BRAS  R14,SPACE2              Double Space
         LTR   R6,R6                   any TSO user?
         JZ    USERS29X                no, exit
         STRING '# of TSO Users: ',((R6),,L),INTO=LINE         DL9809
         BRAS  R14,SPACE2              Double Space            DL9809
USERS29X EQU   *
*
         STRING '&TITLEPFX.Started Tasks:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         SLR   R2,R2                   first time switch
         LA    R4,1                    first ASID
         L     R5,CVTASVT              point to ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
         SLR   R6,R6                   init counter
*loop
USERS31  LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R15,R1                  VALID ASID?
         JNP   USERS38                 NO, JUMP
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   USERS38                 yes - CONTINUE
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         L     R14,ASCBOUCB-ASCB(,R15) point to OUCB
         TM    OUCBYFL-OUCB(R14),OUCBSTT+OUCBMNT  START OR MOUNT ?
         JZ    USERS38                 NO, process
         BRAS  R14,EOL                 check for end-of-line
         LA    R6,1(,R6)               increase counter        DL9809
         MVC   0(8,R2),0(R1)           move job name
USERS38  LA    R4,1(,R4)               bump ASID
         BRCT  R5,USERS31              next address space
*endloop
         BRAS  R14,SPACE2              Double Space
         STRING '# of Started Tasks: ',((R6),,L),INTO=LINE     DL9809
         BRAS  R14,SPACE2              Double Space            DL9809
USERS39X EQU   *                                               RS1199
*                                                              RS1199
         STRING '&TITLEPFX.USS users:',INTO=LINE               RS1199
         BRAS  R14,SPACE2              Double Space            RS1199
         SLR   R2,R2                   first time switch       RS1199
         LA    R4,1                    first ASID              RS1199
         L     R5,CVTASVT              point to ASVT           RS1199
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID                RS1199
         SLR   R6,R6                   init counter            RS1199
*loop                                                          RS1199
USERS41  LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCBRS1199
         LTR   R15,R1                  VALID ASID?             RS1199
         JNP   USERS48                 NO, JUMP                RS1199
         USING ASCB,R1                                         RS1199
USERS45  DS    0H                                              RS1199
         ICM   R7,B'1111',ASCBASSB-ASCB(R15) ASSB ?            RS1199
         JZ    USERS48                   no, zero              RS1199
         ICM   R0,B'1111',ASSBOASB-ASSB(R7) USS ??             RS1199
         JZ    USERS48                   no, zero              RS1199
         STRING 'ASID',(ASCBASID,H,R4B),INTO=WKCELL3           RS1199
         ICM   R7,B'1111',ASSBJSAB-ASSB(R7)                    RS1199
         JZ    USERS47                                         RS1199
         MVC   WKCELL3(8),JSABJBNM-JSAB(R7) move jobname       RS1199
USERS47  DS    0H                                              RS1199
         BRAS  R14,EOL                 check for end-of-line   RS1199
         LA    R6,1(,R6)               increase counter        RS1199
         MVC   0(8,R2),WKCELL3                                 RS1199
USERS48  DS    0H                                              RS1199
         LA    R4,1(,R4)               bump ASID               RS1199
         BRCT  R5,USERS41              next address space      RS1199
*endloop                                                       RS1199
         DROP  R1                                              RS1199
         LTR   R6,R6                   Any entries ??          RS1199
         JZ    *+4+4                      Noo                  RS1199
         BRAS  R14,SPACE2              Double Space            RS1199
         STRING '# of USS users: ',((R6),,L),INTO=LINE         RS1199
         BRAS  R14,SPACE2              Double Space            RS1199
.USERS88 ANOP                                                  RS0500
USERS88  DS    0H                                              RS0500
         J     USERS99
*
*        Sub-routine
*
EOL      LTR   R2,R2                   first time?
         JZ    EOL12                   yes, jump
         LA    R2,10(,R2)            BUMP TO 10 BYTES PAST WHERE WE ARE
         LA    R0,LINE                 first position
         AL    R0,ZSCREENW             last position in visible line
         SLR   R0,R2                   bytes left
         CHI   R0,8
         BNLR  R14                     no, exit
         BRAS  R14,SPACE1          <== yes, next line
 ORG *-4            <==  R14 can't be disturbed
 LA R10,LINE+L'LINE <==  R14 can't be disturbed
EOL12    MVC   LINE,BLANKS             CLEAR OUT MSG AREA
         LA    R2,LINE+2               GET BEGINNING ADDR OF THE LINE
         BR    R14                     exit
USERS99  END_PROC
         TITLE 'SHOWMVS &REL - JES2 Initiators'
*---------------------------------------------------------------------*
*                                                                     *
*JES2 Initiators                                                      *
*                                                                     *
*  ID Status   Classes  Jobname  Stepname Procstep JobID    C UserID  *
*                                                                     *
*   1 Drained  BA                                                     *
*   2 Active   CA       IBMUSERI STEP1000 STEP0140 JOB07618 A IBMUSER *
*   3 Inactive CA                                                     *
*                                                                     *
*        This display tries to shield itself from instability in the  *
*        JES2 control block structure;  it relies on the IPCS mappings*
*        from SYS1.MIGLIB (or SYS1.SHASMIG) to obtain the offset and  *
*        length of HCCT, SJB and PIT fields.  This supposes that these*
*        mappings are at the same level as the primary JES.           *
*                                                                     *
*        If this display doesn't work, locate the SCANMODL CSECT      *
*        at the end of the SHOWMVS source and read the comments.      *
*                                                                     *
*---------------------------------------------------------------------*
JES2INIT BEGIN_PROC KW=INITIATORS,BASEREG=NO                     RS0402
         TM    SHASMIG,L'SHASMIG       SHASMIG available ?
         JZ    JES2I99                 NO, EXIT
         CLC   PRISUBTY,=C'JES2'       JES2-TYPE PRIMARY SUB-SYSTEM ?
         JNE   JES2I99                 NO, EXIT
         L     R5,CVTJESCT             JES COMM TABLE
         USING JESCT,R5
         ICM   R5,B'1111',PRISUBCT     JSCVT for primary sub-system
         JNP   JES2I99                 zero, exit
         USING SSCT,R5
         CLI   SSCTSSID,SSCTJES2       TYPE=JES2?
         JNE   JES2I99                 NO, EXIT
         L     R6,SSCTSUS2             A(HCCT)
         USING HCCT,R6
         LA    R0,=CL8'HASMHCCT'       MODEL NAME ($HCCT)
         LA    R1,=CL8'CCTPIT  '       FIELD NAME
         BRAS  R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         JNZ   JES2I99                 NO, EXIT
         LH    R7,0(,R1)               get offset into R7
         L     R7,HCCT(R7)             HCCTPIT
         USING PIT,R7
         VALIDATE PIT,ERRET=JES2I99
         STRING '&TITLEPFX.',PRISUBNM,' Initiators',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         LA    R0,=CL8'HASMSJB '       MODEL NAME ($SJB)
         LA    R1,=CL8'SJBCSCB '       FIELD NAME
         BRAS  R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         JNZ   JES2I99                 NO, EXIT
         MVC   $SJBCSCB,0(R1)          save CSCB offset
         LA    R0,=CL8'HASMSJB '       MODEL NAME ($SJB)
         LA    R1,=CL8'SJBJCLAS'       FIELD NAME
         BRAS  R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         JNZ   JES2I99                 NO, EXIT
         MVC   $SJBJCLAS,0(R1)         save Job Class offset
         LA    R0,=CL8'HASMPIT '       MODEL NAME ($PIT)
         LA    R1,=CL8'PITPATID'       FIELD NAME
         BRAS  R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         JNZ   JES2I99                 NO, EXIT
         MVC   $PITPATID(4),0(R1)      save partition ID offset & len
         LA    R0,=CL8'HASMPIT '       MODEL NAME ($PIT)
         LA    R1,=CL8'PITCLASS'       FIELD NAME
         BRAS  R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         JNZ   JES2I99                 NO, EXIT
         MVC   $PITCLASS(4),0(R1)      save classes offset & len
         STRING   '  ID   Status   Classes  Jobname  Stepname Procstep -
               JobID    C UserID   ASID ASIDx SYSName',INTO=LINE
         BRAS  R14,SPACE2              Double Space
*loop
JES2I31  VALIDATE PIT,ERRET=JES2I99
         STRING '.PIT=',((R7),,R10Z),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         ICM   R7,B'1111',PITNEXT      next PIT
         JNZ   JES2I31                 loop
*endloop
         BRAS  R14,BLANK1              BLANK LINE
.JES2I99 ANOP
JES2I99  END_PROC
         TITLE 'SHOWMVS &REL - Link-List'
*---------------------------------------------------------------------*
*                                                                     *
*Link-list:      45 Entries     LNKAUTH=LNKLST    73 extents open     *
*                                                                     *
*  SYS1.LINKLIB                                   SYSRES  930610  LNK *
*  SYS1.MIGLIB                                    SYSRES  930610  LNK *
*                                                                     *
*---------------------------------------------------------------------*
LNKLST00 BEGIN_PROC KW=LINKLIST,BASEREG=NO                       RS0302
         AIF   (NOT D'CVTH6603).LNKLST10 DYNAMIC LNKLST?
         TM    HBB6603,L'HBB6603       running on OS390 R3 ?     RS0201
         JZ    LNKLST10                no, jump
         L     R3,CVTECVT              -> ECVT
         USING ECVT,R3
         ICM   R3,B'1111',ECVTDLCB     -> DLCB Current LNKLST set
         JZ    LNKLST10                NO
         USING DLCB,R3
         L     R4,DLCBDCB@             SYS1.LINKLIB DCB
         ICM   R4,B'0111',DCBDEBA-IHADCB(R4) DEB ADDRESS
         USING DEBBASIC,R4
         LA    R1,=C'LNKLSTAPFTAB'     LNKLST/APFTAB             RS0402
         TM    DEBFLGS1,DEBAPFIN       AUTH=LNKLST?
         JO    *+8                     YES, JUMP
         LA    R1,6(,R1)               NO, AUTH=APFTAB
         L     R7,DLCBLLT@             Link List Table
         USING LLT,R7
         STRING '&TITLEPFX.Link-list:  Set Name: ',                    X
               (DLCBLNKLSTSETNAME,,L),                                 X
               (LLTCOUNT,F,R7B),' Entries     LNKAUTH=',((R1),6),      X
               (DEBNMEXT,FL1,R6B),' extents open',INTO=LINE
         DROP  R3,R4
         J     LNKLST20
LNKLST10 DS    0H
.LNKLST10 ANOP
*
         L     R4,CVTLINK              SYS1.LINKLIB DCB
         ICM   R4,B'0111',DCBDEBA-IHADCB(R4) DEB ADDRESS
         USING DEBBASIC,R4
         BRAS  R1,*+4                  br around literals        RS0402
*        BRAS  R1,*+4+6+6              br around literals
*NKLST16 DC    C'LNKLST'
*        DC    C'APFTAB'
         TM    DEBFLGS1,DEBAPFIN       AUTH=LNKLST?
         JO    *+8                     YES, JUMP
         LA    R1,6(,R1)               NO, AUTH=APFTAB
         L     R7,CVTLLTA              LINK LIST TABLE
         USING LLT,R7
         STRING '&TITLEPFX.Link-list: ',(LLTCOUNT,F,R7B),              X
               ' Entries     LNKAUTH=',                                X
               ((R1),6),(DEBNMEXT,FL1,R6B),' extents open',INTO=LINE
LNKLST20 DS    0H
         ST    R10,LINKXTNT            save line address for sub-task
         BRAS  R14,SPACE2              Double Space
         STRING '  DS-Name',40X,'Volser',2X,'Create',4X,               X
               '(LNK/LPA/APF)',1X,'Extent',4X,                   RS1099X
               'Typ',2X,'StorClas',1X,'MgmtClas',1X,                   X
               'DataClas',INTO=LINE                                 +RS
         BRAS  R14,SPACE1          <== next line                    +RS
         L     R3,LLTCOUNT             # OF ENTRIES
         LA    R4,LLTENTRY             LINK LIST TABLE ENTRY
         USING LLTENTRY,R4
         ST    R10,LNKTABLE            SAVE ADDR OF 1ST LINE
*LOOP
LNKLST41 MVC   LINE,BLANKS
         MVC   DSNAME,LLTDSN           MOVE DSNAME
         MVI   VOLSER,C'?'             $LOCATE REQUIRED
         MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVI   LINE_APF,C'?'           LNK/LPA/APF STATUS
         MVI   LINE_SMS_ATTR,C'?'       SMS-Attributes           RS1099
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         BRAS  R14,SPACE1          <== next line
         LA    R4,LLTNEXT              NEXT ENTRY
         BRCT  R3,LNKLST41
*ENDLOOP
         LA    R0,L'LINE               LONGUEUR D'UN POSTE
         LR    R1,R10                  A(NEXTLINE)
         SLR   R1,R0                   DERNIER POSTE DE LA TABLE
         STM   R0,R1,LNKTABLE+4        LONGUEUR, DERNIER POSTE
         BRAS  R14,BLANK1              BLANK LINE
*---------------------------------------------------------------------*
*                                                                     *
*        Dynamic Link-list                                            *
*                                                                     *
*---------------------------------------------------------------------*
         AIF   (NOT D'CVTH6603).LNKLST99 DYNAMIC LNKLST?
         TM    CVTOSLV1,CVTH6603       DYNAMIC LNKLST
         JZ    LNKLST99                no, jump
         BRAS  R14,WORKADDR            get a temporary work area
         ST    R0,WKCELL1              Save length of work area
         LR    R2,R1
         USING DLAAHDR,R2
         CSVDYNL REQUEST=LIST,                                         X
               ANSAREA=DLAAHDR,                                        X
               ANSLEN=WKCELL1,                                         X
               USERINFO=YES,                                           X
               MF=(E,CSVDYNL)
         ICM   R15,15,DLAAH#REM        entries that were not returned?
         JNZ   LNKLST48                y¬s
         STRING '&TITLEPFX.LNKLST set information -',                  X
               ' Number of sets defined: ',                            X
               (DLAAH#LS,F,L),INTO=LINE
         BRAS  R14,SPACE2              Double Space
         ICM   R3,15,DLAAH#LS          Number of DLAALS entries
         JZ    LNKLST99                none
         L     R4,CVTASVT
         USING ASVT,R4
         L     R1,ASVTMAXI             maxuser
         SL    R1,ASVTAAV              available
         DROP  R4
         STH   R1,WKCELL1              save in use count
         L     R4,DLAAHFIRSTLSADDR     Address of first DLAALS
         USING DLAALS,R4
*loop
LNKLST43 DS    0H
         LA    R1,=C'No '
         TM    DLAALSFLAGS,DLAALSINUSEBYLLA monitored by LLA?
         JZ    *+8
         LA    R1,=C'Yes'
         LA    R5,=C'Defined '
         TM    DLAALSFLAGS,DLAALSCURRENT Current LNKLST?
         JZ    *+8
         LA    R5,=C'Current '
         TM    DLAALSFLAGS,DLAALSWASCURRENT Previous LNKLST?
         JZ    *+8
         LA    R5,=C'Previous'
         STRING '   LNKLST Set Name: ',(DLAALSNAME,,L),                X
               '  Seq#: ',(DLAALSLNKLSTSEQ#,F,L),                      X
               '  Monitored by LLA: ',((R1),3),                        X
               '  LNKLST status: ',((R5),8),                           X
               INTO=LINE
         BRAS  R14,SPACE1              <== next line
         STRING 5X,'In use by ',(DLAALS#U,H,L),' address spaces',      X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         CLC   DLAALS#U,WKCELL1        are all using this LNKLST set
         JE    LNKLST47                yes
         ICM   R5,15,DLAALSFIRSTUADDR  first DLAAU for this DLAALS
         JZ    LNKLST47                zero, at end
         STRING 5X,'Jobname/Asids using this LNKLST set ',             X
               (DLAALSNAME,,L),INTO=LINE
         BRAS  R14,SPACE1              <== next line
         USING DLAAU,R5
         LH    R6,DLAALS#U             number of DLAARU entries
*-loop
LNKLST44 DS    0H
         MVC   LINE,BLANKS             init the line
         LA    R1,(&LINESIZE-4)/16     max entries per line
*--loop
LNKLST45 DS    0H
         STRING (LINE,,L),4X,DLAAUJOBNAME,(DLAAUASID,H,R5B),           X
               INTO=LINE
         BCTR  R6,0                    number of DLAARU entries - 1
         LTR   R6,R6                   at end of DLAARUs
         JZ    LNKLST46                yes
         L     R5,DLAAUNEXTADDR        next DLAAU entry
         BRCT  R1,LNKLST45             entries per line - 1
*--endloop
         BRAS  R14,SPACE1              next line
         J     LNKLST44                repeat for next entry
*-endloop
LNKLST46 DS    0H
         BRAS  R14,SPACE2              Double space
LNKLST47 DS    0H
         L     R4,DLAALSNEXTADDR       next DLAALS
         LTR   R4,R4                   another DLAALS
         JZ    LNKLST99                no
         BRCT  R3,LNKLST43
*endloop
         J     LNKLST99
LNKLST48 DS    0H
         STRING ' LNKLST answer area is too small',INTO=LINE
         BRAS  R14,SPACE1              next line
LNKLST99 DS    0H
.LNKLST99 ANOP
         END_PROC
         TITLE 'SHOWMVS &REL - LPA-List'
*---------------------------------------------------------------------*
*                                                                     *
*LPA list: 01D78000       10 Entries.                                 *
*                                                                     *
*  SYS1.LPALIB                                    ESA323  910610      *
*  ISF.V1R3M1.ISFLPA                              ESA323  910521  LPA *
*                                                                     *
*---------------------------------------------------------------------*
LPALST00 BEGIN_PROC KW=LPALIST,BASEREG=NO                        RS0302
         TM    CVTDCB,CVTMVSE          XA/ESA?
         JZ    LPALST99                NO, JUMP
         L     R1,CVTSMEXT             STORAGE MAP EXTENSION
         L     R7,CVTEPLPS-CVTVSTGX(,R1)  LPA TABLE
         USING LLT,R7
         STRING '&TITLEPFX.LPA list: ',((R7),,X),                      X
               (LLTCOUNT,F,R9B),' Entries.',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING 2X,'DS-Name',40X,'Volser',2X,'Create',4X,              X
               '(LNK/LPA/APF)',11X,                              RS1199X
               'Typ',2X,'StorClas',1X,'MgmtClas',1X,                   X
               'DataClas',INTO=LINE                                 +RS
         BRAS  R14,SPACE1              Single line                  +RS
         L     R3,LLTCOUNT             # OF ENTRIES
         LA    R4,LLTENTRY             FIRST LPA LIST TABLE ENTRY
         USING LLTENTRY,R4
         ST    R10,LPATABLE            SAVE ADDR OF 1ST LINE
*LOOP
LPALST42 MVC   LINE,BLANKS
         MVC   DSNAME,LLTDSN           MOVE DSNAME TO UNPROTECTED STRGE
         MVI   VOLSER,C'?'             $LOCATE REQUIRED
         MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVI   LINE_APF,C'?'           LNK/LPA/APF STATUS
         MVI   LINE_SMS_ATTR,C'?'      SMS Attributes            RS1199
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         BRAS  R14,SPACE1          <== next line
         LA    R4,LLTNEXT              NEXT ENTRY
         BRCT  R3,LPALST42
*ENDLOOP
         LA    R0,L'LINE               LONGUEUR D'UN POSTE
         LR    R1,R10                  A(NEXTLINE)
         SLR   R1,R0                   DERNIER POSTE DE LA TABLE
         STM   R0,R1,LPATABLE+4        LONGUEUR, DERNIER POSTE
         BRAS  R14,BLANK1              BLANK LINE
LPALST99 END_PROC
         TITLE 'SHOWMVS &REL - APF-List'
*---------------------------------------------------------------------*
*                                                                     *
*APF List:  Format(Static)  Entries(129)                              *
*                                                                     *
*  CICS210.LOADLIB1                              CICS21          UNCAT*
*  DSN220.DSNEXIT                                DB2SYS  900924       *
*  SYS1.LINKLIB                                  ESA430  930610  LNK  *
*                                                                     *
*---------------------------------------------------------------------*
APFLIST  BEGIN_PROC KW=APFLIST,BASEREG=YES  Getmain require      RS0302
*
         CSVAPF REQUEST=QUERYFORMAT,   get dynamic/static format       X
               FORMAT=WKCELL1          answer addr
         MVC   WKCELL2,=C'Dynamic '    APF list is static
         CLI   WKCELL1,CSVAPFFORMATDYNAMIC
         JE    APFL25                  no, jump
         MVC   WKCELL2,=C'Static  '    APF list is static
*
APFL25   BRAS  R14,WORKADDR            get storage for answer area
         STM   R0,R1,TENWORDS          save length, address
         LR    R2,R1                   pass addr
         USING APFHDR,R2
         CSVAPF REQUEST=LIST,          list auth libraries             X
               ANSAREA=(R2),           answer addr                     X
               ANSLEN=TENWORDS+0,      answer length                   X
               MF=(E,CSVAPF1)
         MVI   TENWORDS,X'FF'          no GETMAIN yet
         LTR   R1,R15                  OK?
         JZ    APFL30                  yes, jump
         CH    R15,=Y(CSVAPFRC_WARN)   warning?
         JNE   APFL54                  no, quit
         N     R0,=A(CSVAPFRSNCODEMASK)  clean up reason code
         CH    R0,=Y(CSVAPFRSNNOTALLDATARETURNED)
         JNE   APFL54                  no, quit
*
*        Allocate a larger work area
*
         L     R0,APFHTLEN             get required length
         GETMAIN RU,LV=(0),LOC=ANY
         STM   R0,R1,TENWORDS          save length, address
         LR    R2,R1                   pass addr
         CSVAPF REQUEST=LIST,          list auth libraries             X
               ANSAREA=(R2),           answer addr                     X
               ANSLEN=TENWORDS+0,      answer length                   X
               MF=(E,CSVAPF1)
         LTR   R1,R15                  OK?
         JNZ   APFL54                  no, quit
*
*        Print header
*
APFL30   L     R3,APFH#REC             number of APFE entries
         STRING '&TITLEPFX.APF list:   Format(',(WKCELL2,,T),')',      X
               '     Entries(',((R3),,L0),')',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  DS-Name',40X,'Volser',2X,'Create',4X,               X
               '(LNK/LPA/APF)',2X,'Ref-Date',1X,                       X
               'Typ',2X,'StorClas',1X,'MgmtClas',1X,                   X
               'DataClas',INTO=LINE
         BRAS  R14,SPACE1              Single line
         ST    R10,APFTABLE            SAVE ADDR OF 1ST LINE
         L     R7,APFHOFF              offset to first APFE
         LA    R7,APFHDR(R7)           change offset to addr
         USING APFE,R7
*loop
APFL33   MVC   LINE,BLANKS
         MVC   DSNAME,APFEDSNAME       MOVE DSNAME
         MVC   VOLSER,APFEVOLUME       MOVE VOLSER
         CLI   VOLSER,C'*'             *SMS* or *MCAT* ?
         JNE   APFL35                  no, jump
         MVI   VOLSER,C'?'             yes, request $LOCATE
APFL35   MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVI   CATUNCAT,C'?'           $LOCATE REQUIRED
         MVI   LINE_APF,C'?'           LNK/LPA/APF STATUS
         MVI   LINE_SMS_ATTR,C'?'      SMS Attributes            RS1199
         MVI   LINE_REFD,C'?'          DS1REFD (last-referenced date)
         MVC   LINE_APFVOL,APFEVOLUME  MOVE VOLSER
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         BRAS  R14,SPACE1          <== next line
         AH    R7,APFELEN              next APFE
         BRCT  R3,APFL33               next APFE
*endloop
APFL50   LA    R2,APFTABLE             APFTABLE DESCRIPTOR
         MVI   WKCELL1,C'D'            Sort DSNNAME
         BRAS  R14,TRIZO               SORT APFTABLE
         BRAS  R14,BLANK1              BLANK LINE
         J     APFL55                  exit
*
APFL54   EQU   *
         STRING '  Error from dynamic APF:   Retcode(',((R1),,L),')',  X
               '  Rsncode(X''',((R0),,X),''')',                        X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
APFL55   CLI   TENWORDS,X'FF'          any GETMAIN done?
         JE    APFL99                  no, exit
         LM    R0,R1,TENWORDS          get length, address
         FREEMAIN RU,LV=(0),A=(1)      free work area
         DROP  R2,R7                   APFHDR,APFE
APFL99   END_PROC
         TITLE 'SHOWMVS &REL - Display Dynamic EXITs       '
*-----------------------------------------------------------------@522*
*                                                                     *
*Dynamic EXIT information                                             *
*                                                                     *
*  Exit name: SYS.IEFACTRT       AMODE:  31   Module entries:  1      *
*       Module name: ALVACTRT  Status: Active                         *
*                                                                     *
*---------------------------------------------------------------------*
DYNXIT   BEGIN_PROC KW=DYNEXIT,AUTH=YES,BASEREG=NO               RS0302
         STRING '&TITLEPFX.Dynamic EXIT information',INTO=LINE
         BRAS  R14,SPACE2              BLANK LINE
         BRAS  R14,WORKADDR            LOCATE WORK AREA
         ST    R0,SIZEEXAA             Save length of answer area
         ST    R1,EXAA@                Save address of answer area
*
DYNXIT10 DS    0H
         L     R4,EXAA@                Address of answer area
*        Issue the CSVDYNEX LIST request
         CSVDYNEX REQUEST=LIST,ANSAREA=(R4),ANSLEN=SIZEEXAA,           $
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,CSVDYNEXL)
         CLC   LRETCODE,=A(CSVDYNEXRC_OK) Success?
         JNE   DYNXIT33                No, error
*        Process information in answer area when RC=0
         USING EXAAHDR,R4              EXAAHDR DSECT
         L     R5,EXAAH#REC            Find how many EXAAE entries
         LTR   R5,R5                   Are there any entries
         JZ    DYNXIT99                No, quit
         L     R4,EXAAHFIRST@          Get first entry
         USING EXAAE,R4                EXAAE DSECT
*LOOP
DYNXIT15 DS    0H                      EXAAE loop
*        Process information contained in EXAAE
         LA    R1,=C'n/a'                                        RS1202
         CLI   EXAAEAMODE,EXAAEAMODE_31 AMODE 31?
         JNE   TAMODE24                No,
         LA    R1,=C' 31'                                        RS1202
         J     AMODEOK
TAMODE24 CLI   EXAAEAMODE,EXAAEAMODE_24 AMODE 24?
         JNE   TAMODEDF                No,
         LA    R1,=C' 31'                                        RS1202
         J     AMODEOK
TAMODEDF CLI   EXAAEAMODE,EXAAEAMODE_DEFINED AMODE defined
         JNE   AMODEOK                 No,
         LA    R1,=C'DEF'                                        RS1202
AMODEOK  STRING '  Exit name: ',EXAAENAME,'  AMODE: ',((R1),3),  RS1202$
               '  Module entries: ',(EXAAE#ENT,FL2),INTO=LINE
         BRAS  R14,SPACE1              Next Line
         LH    R7,EXAAE#ENT            Get number of EXAAM entries
         LTR   R7,R7                   Are there any routines ?
         JZ    DYNXIT17                No, move to end of EXAAE loop
         L     R6,EXAAEFIRSTENT@       Get first EXAAM
*--LOOP
DYNXIT16 DS    0H                      EXAAM loop
         USING EXAAM,R6                EXAAM DSECT
*        Process information contained in EXAAM
         LA    R1,=C'Active  '                                   JM1202
         TM    EXAAMFLAGS,EXAAMACTIVE  Is it really active?
         JO    STATOK                  Yes
         LA    R1,=C'Inactive'                                   JM1202
STATOK   STRING '       Module name: ',EXAAMNAME,'  Status: ',         $
               ((R1),8),INTO=LINE                                JM1202
         BRAS  R14,SPACE1              Next Line
         L     R6,EXAAMNEXT@           Get next EXAAM
         DROP  R6                      EXAAM DSECT
         BRCT  R7,DYNXIT16             Continue while there are more
*--ENDLOOP
DYNXIT17 DS    0H                      Bottom of EXAAE loop
         L     R4,EXAAENEXT@           Get next EXAAE
         BRCT  R5,DYNXIT15             Continue while there are more
*ENDLOOP
         BRAS  R14,BLANK1              BLANK LINE
         J     DYNXIT99                Skip error case
DYNXIT33 DS    0H                      Error return
         STRING 'DYNXIT: CSVDYNEX macro failed Retcode=',              X
               (LRETCODE,,X),' Reason=',(LRSNCODE,,X),                 X
               INTO=LINE
         BRAS  R14,SPACE2              Double space
.DYNXIT9 ANOP
DYNXIT99 END_PROC
*
         CSVEXAA                       List answer area
         CSVEXRET                      Return code information
         TITLE 'SHOWMVS &REL - System static symbols       '
*-----------------------------------------------------------------@522*
*                                                                     *
*System static symbols:                                               *
*                                                                     *
*  &SYSCLONE. = A0                                                    *
*  &SYSNAME.  = ALA0                                                  *
*  &SYSPLEX.  = DEALEI00                                              *
*                                                                     *
*---------------------------------------------------------------------*
SYMBOLS  BEGIN_PROC KW=SYMBOLS,BASEREG=NO                        RS0302
         STRING '&TITLEPFX.System static symbols:',INTO=LINE
         BRAS  R14,SPACE2              BLANK LINE
         L     R3,CVTECVT              Load addr of ECVT
         USING ECVT,R3                  and establish addressability
         L     R3,ECVTSYMT         Load addr of the system symbol table
         USING SYMBT,R3                 and establish addressability
         SPACE
*--------------system-static-symbol-table-----------------------------*
* +0  ¦xxxx0003¦                     - number of symbols              *
*---------------------------------------------------------------------*
* +4  ¦00000030¦0000000A¦ &SYSCLONE. - offset/len of 1st symbol name  *
*---------------------------------------------------------------------*
* +C  ¦00000058¦00000002¦ A0         - offset/len of 1st symbol value *
*---------------------------------------------------------------------*
* +14 ¦0000003A¦00000009¦ &SYSNAME.  - offset/len of 2nd symbol name  *
*---------------------------------------------------------------------*
* +1C ¦0000004C¦00000004¦ ALA0       - offset/len of 2nd symbol value *
*---------------------------------------------------------------------*
* +24 ¦00000043¦00000009¦ &SYSPLEX.  - offset/len of 3rd symbol name  *
*---------------------------------------------------------------------*
* +2C ¦00000050¦00000008¦ DEALEI00   - offset/len of 3rd symbol value *
*---------------------------------------------------------------------*
* ==> offsets to symbols from start of symbol area <==                *
*---------------------------------------------------------------------*
         SPACE
         LH    R0,SYMBTNUMBEROFSYMBOLS Load number of symbols
         LTR   R0,R0                   Are there any symbols?
         JZ    SYMBOL90                No, ...
         LA    R1,SYMBTTABLEENTRIES    Load addr of symbol table entry
         USING SYMBTE,R1                and establish addressability
*Loop
SYMBOL10 DS    0H
         LM    R4,R7,SYMBTETABLEENTRIES offset,length,offset,length
         LA    R4,SYMBTTABLEENTRIES(R4) change offset to address
         LA    R6,SYMBTTABLEENTRIES(R6) change offset to address
         STRING 2X,((R4),(R5)),' = ',((R6),(R7)),INTO=LINE
         BRAS  R14,SPACE1          <== next line
         LA    R1,SYMBTE+SYMBTE_LEN    bump pointer
         BRCT  R0,SYMBOL10
*ENDLOOP
         J     SYMBOL98
SYMBOL90 DS    0H
         STRING '  No symbols found',INTO=LINE
SYMBOL98 DS    0H
         BRAS  R14,BLANK1          <== blank line
.SYM99   ANOP
SYMBOL99 END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*LLA Parameters                                                       *
*                                                                     *
*  Job name: LLA       Member: CSVLLA00    CSVLLIX1 called: NO        *
*                                                                     *
*  SYS1.CMDLIB                               SYSRES  Linklist  Freeze *
*                                                                     *
*---------------------------------------------------------------------*
LLALIST  BEGIN_PROC KW=LLALIST,BASEREG=NO                        RS0302
         ICM   R4,B'1111',CVTLLCB      LLA Control Block
         JZ    LLAL999                 not active, exit
         USING LLCB,R4
         STRING '&TITLEPFX.LLA Parameters',INTO=LINE
         BRAS  R14,SPACE2              double space
         LA    R1,=C'No '
         TM    LLCBFLGS,LLCBX1OK       exit 1 called?
         JNO   *+8                     no, jump
         LA    R1,=C'Yes'
         MVC   WKCELL2,BLANKS                                   RS1199
         MVC   WKCELL2(3),=C'n/a'                               RS1199
         CLI   LLCBPARM,0              Low-value?               RS1199
         JE    *+4+6+6                  no CSVLLA-mem present
         MVC   WKCELL2(6),=C'CSVLLA'                            RS1199
         MVC   WKCELL2+6(2),LLCBPARM   CSVLLA-suffix            RS1199
         STRING '  Job name: ',LLCBNAME,                               X
               '  Member: ',(WKCELL2,8,T),6X,                   RS1199 X
               '  CSVLLIX1 called: ',((R1),3),                         X
               INTO=LINE
         BRAS  R14,SPACE1              single space
*
*        retrieve LLDR and LLDS from SP 239 which is fetch-protected
*
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         JNO   LLAL995                 no, exit
         L     R5,LLCBLLDR             get LLDR address
         USING LLDR,R5
         MODESET EXTKEY=ZERO           switch to KEY=ZERO
         CLC   =C'LLDR',LLDR           am I lost?
         JNE   LLAL990                 yes, exit
         L     R6,LLDRLLDS             get LLDS address
         USING LLDS,R6
         CLC   =C'LLDS',LLDS           am I lost?
         JNE   LLAL990                 yes, exit
         L     R7,LLDSNUM              number of LLDS entries
         LA    R1,=C'No '
         TM    LLDSFLG1+1,X'80'        LNKLST a single entitiy ?
         JNO   *+8                     no, jump
         LA    R1,=C'Yes'
         MODESET KEYADDR=PROTKEY,WORKREG=2
         STRING '  LNKLST treated as a single entity: ',((R1),3),      X
               INTO=LINE
         BRAS  R14,SPACE1              single space
LLAL032  EQU   *
         BRAS  R14,BLANK1              blank line
         DROP  R5                      LLDR
*
*        Retrieve data set information from LLA address space
*
         LTR   R7,R7                   number of LLDS entries
         JNP   LLAL990                 zero, exit
         L     R2,LLCBASCB             Load addr. of LLA's ASCB
         USING ASCB,R2
         L     R2,ASCBASSB             get LLA's ASSB address
         USING ASSB,R2
         ALESERV ADD,                                                  X
               STOKEN=ASSBSTKN,        LLA address space               X
               ALET=ALET1,             return ALET                     X
               CHKEAX=NO,                                              X
               MF=(E,ALESERV2)
*loop
LLAL044  BRAS  R14,EXECKEY0            execute next instr in key=0
         ICM   R3,B'1111',LLDSLLLS     addr of LLLS
         JZ    LLAL044N                zero, ignore
         SAC   512                     AR mode on
         LAM   R3,R3,ALET1             POINT TO LLA ADDRESS SPACE
         USING LLLS,R3
         MVC   LINE,BLANKS             blank out current line
         MVC   DSNAME,LLLSDSN          move data set name
         MVC   VOLSER,LLLSVOL          move volume serial
         MVC   WKCELL1,LLLSTOD         TOD clock
         DROP  R3                      LLLS
         SAC   0                       AR mode off
         SLR   R0,R0                   key=0
         LA    R1,LLDSFLG4+1-LLDSFLG1  length
         MVCK  WORK256(R1),LLDSFLG1,R0 flags
         LA    R2,WORK256              copy of the flags
         USING LLDSFLG1,R2
         MVC   DEVTYPE,=C'Linklist'    linklist/private
         TM    LLDSFLG3,LLDSLNK        linklist?
         JO    *+10                    yes, jump
         MVC   DEVTYPE,=C'Private '    linklist/private
         MVC   CATUNCAT(8),=C'Nofreeze' Freeze/nofreeze
         TM    LLDSFLG4,LLDSFREZ       freeze?
         JZ    *+10                    no, jump
         MVC   CATUNCAT(8),=C'Freeze  ' Freeze/nofreeze
         STRING (LLDSFLG1,,X),1X,(LLDSFLG2,,X),1X,(LLDSFLG3,,X),1X,    X
               (LLDSFLG4,,X),INTO=(CATUNCAT+10,11)
         BRAS  R14,SPACE1              bump line pointer
         DROP  R2                      Copy of LLDSFLG1 in WORK256
LLAL044N LA    R6,LLDSELEN(R6)         length of an LLDS entry
         BRCT  R7,LLAL044              next LLDS entry
*endloop
         ALESERV DELETE,ALET=ALET1,MF=(E,ALESERV2)
         XC    ALET1,ALET1             zero ALET for RCVY rtne
.LLAL039 ANOP
LLAL990  MODESET KEYADDR=PROTKEY,WORKREG=2
LLAL995  BRAS  R14,BLANK1              blank line
.LLAL999 ANOP
LLAL999  END_PROC
         TITLE 'SHOWMVS &REL - ATTACH The sub-task'
*---------------------------------------------------------------------*
*                                                                     *
*        ATTACH THE LOCATE/OBTAIN SUB-TASK                            *
*                                                                     *
*---------------------------------------------------------------------*
ATTACH   BEGIN_PROC BASEREG=YES        Status require            RS0302
         TM    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         JZ    ATTACH99                no, exit
         TM    SUB_TASK_ATTACHED,L'SUB_TASK_ATTACHED
         JO    ATTACH99                already attached
         TM    AUTHORIZED,L'AUTHORIZED authorized?
         JO    ATTACH4                 yes, jump
         LA    R1,DYNAM                PARM for sub task
         LNR   R1,R1                   make it negative
         ATTACHX EPLOC=OWN_NAME,       my own name                     +
               ETXR=ETXR00,            end of task exit routine        +
               SF=(E,ATTACHL)                                    RS1002
         ST    R1,SUB_ECB1+4           save TCB addr for DETACH
         J     ATTACH90
*
*        Attach sub-task with MODE=SUP if I'm authorized
*
ATTACH4  MODESET EXTKEY=ZERO           KEY=ZERO,MODE=SUP for SM=SUPV
         L     R9,PSATOLD-PSA(,0)      own TCB
         MVZ   TCBPKF,PROTKEY          KEY=4 is AUTH=ESR to ensure     +
                                       ETXR can POST ECB1.
         LA    R1,DYNAM                PARM for sub task
         LNR   R1,R1                   make it negative
         ATTACHX EPLOC=OWN_NAME,        my own name                    X
               ETXR=ETXR00,            end of task exit routine        X
               SM=SUPV,                MODE=SUP                        X
               DISP=NO,                do not dispatch                 X
               SF=(E,ATTACHL)                                    RS1002
         ST    R1,SUB_ECB1+4           save TCB addr for DETACH
         MVZ   TCBPKF,OLDPKF           reset key in OWN TCB
         LR    R9,R1                   pass TCB addr
         MVZ   TCBPKF,OLDPKF           KEY=8 in SUB-TASK TCB
         LA    R1,DYNAM                PARM for sub task
         ST    R1,TCBUSER              store into TCBUSER
         STATUS RESET,ND,(R9),(12),E   make task dispatchable
         MODESET KEYADDR=PROTKEY,WORKREG=2
         J     ATTACH90
*
*        End of task exit routine;
*        Invoked via an IRB under the main task's TCB.
*
         PUSH  USING
         DROP
ETXR00   LR    R2,R15                  local base reg
         USING TCB,R1
         USING ETXR00,R2
         ICM   R3,B'1111',TCBUSER      authorized?
         JNZ   ETXR20                  yes, jump
         L     R3,TCBFSA               point to subtask's FSA
         L     R3,0(,R3)               A(DYNAM)
ETXR20   EQU   *
         USING DYNAM,R3
         DETACH SUB_ECB1+4             detach sub-task
         POST  SUB_ECB1,0              post main task
         BR    R14                     exit
         POP   USING
*
ATTACH90 OI    SUB_TASK_ATTACHED,L'SUB_TASK_ATTACHED
ATTACH99 END_PROC
         TITLE 'SHOWMVS &REL - Active LPA Queue (MLPA/FLPA)'
*---------------------------------------------------------------------*
*                                                                     *
*Active LPA Queue:                                                    *
*                                                                     *
* Name     EntPt    AM Attrb SPN At At2 At3 Use  Length Load-Pnt PLPA *
*                                                                     *
* IGDERRC2 86C87618 31  50       B5  03  04      IGDOPST1             *
* IGDDCFSR 86D0AB58 31  50     0 B1  23  04 0001 1BFCD8 06B9A000      *
*                                                                     *
*---------------------------------------------------------------------*
LPAQ     BEGIN_PROC KW=LPAQ,BASEREG=NO                           RS0302
         ICM   R5,B'1111',ALPACDE1     First CDE on ALPAQ or DLPAQ
         JZ    LPAQ99                  Queue is empty, quit
         USING CDENTRY,R5
         STRING '&TITLEPFX.Active LPA Queue:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '   Name     EntPt    AM Attrb SPN At At2 At3 Use ',   X
               ' Length Load-Pnt',                                     X
               ' PLPA CDE    XTLST',                                   X
               INTO=LINE                                         RS0302
         BRAS  R14,SPACE2              Double Space
*LOOP
LPAQ21   ST    R5,WKCELL1              CDE addr
         CLI   CDATTR,0                last CDE on DLPAQ?
         JE    LPAQ29                  yes, ignore it
         L     R6,CDXLMJP              POINT TO XL (OR MAJOR CDE)
         TM    CDATTR,CDMIN            CHECK ATTRIBUTES
         JO    LPAQ25                  JUMP IF THIS IS A MINOR CDE
         TM    CDATTR2,CDXLE           Do we have an extent list?
         JO    LPAQ23                  yes, jump
         LA    R6,NEXTLINE             no, point to dummy
         XC    NEXTLINE,NEXTLINE       all zeroes
         USING XTLST,R6
*
*        search the PLPA directory to detect those MLPA
*        modules that make PLPA modules unaccessible.
*
LPAQ23   STRING ' PLPA',INTO=WKCELL3   prime work area
         STM   R14,R12,12(R13)         save registers
         LM    R0,R1,CDNAME            EP NAME
         LA    R3,CVTMAP               required by LPDSR
         L     R15,CVTLPDSR            LPA SEARCH ROUTINE
         BALR  R14,R15                 USES R6-R9
         J     LPAQ23X             +0  Found, jump
         MVC   WKCELL3,BLANKS      +4  Not found, reset PLPA indicator
LPAQ23X  LM    R14,R12,12(R13)         restore registers
*
LPAQ24   DS    0H                                                RS0302
         STRING 3X,CDNAME,1X,(CDENTPT,,X),INTO=LINE              RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
         MVC   0(2,R4),=C'24'          default AMODE 24          RS0302
        #STATUS CDENTPT,CDEMODE,'31'   Amode 31 ?                RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
         AIF   (NOT D'CVTH7706).LPAQ24 z/OS R3?                  RS0302
        #STATUS CDENTPT3,CDEMOD64,'64' Amode 64 ?                RS0302
.LPAQ24  ANOP                                                    RS0302
         STRING (LINE,,T),2X,(CDATTRB,,X),                             X
               3X,(CDSP,FL1,R3B),1X,(CDATTR,,X),2X,(CDATTR2,,X),       x
               2X,(CDATTR3,1,X),1X,(CDUSE,,X),                         x
               1X,(XTLMSBLN,,X),1X,(XTLMSBAD,,X),                      X
               (WKCELL3,6),(WKCELL1+1,3,X),1X,(CDXLMJP+1,3,X),         X
               INTO=LINE                                         RS0302
         J     LPAQ28
LPAQ25   DS    0H                                                RS0302
         STRING 3X,CDNAME,1X,(CDENTPT,,X),INTO=LINE              RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
         MVC   0(2,R4),=C'24'          default AMODE 24          RS0302
        #STATUS CDENTPT,CDEMODE,'31'   Amode 31 ?                RS0302
         AIF   (NOT D'CVTH7706).LPAQ25 z/OS R3?                  RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
        #STATUS CDENTPT3,CDEMOD64,'64' Amode 64 ?                RS0302
.LPAQ25  ANOP                                                    RS0302
         STRING (LINE,,T),2X,(CDATTRB,,X),                             X
               7X,(CDATTR,,X),2X,(CDATTR2,,X),2X,(CDATTR3,1,X),        X
               6X,CDNAME-CDENTRY(R6),13X,(WKCELL1+1,3,X),    CDE addr  X
               INTO=LINE
*
LPAQ28   BRAS  R14,SPACE1          <== next line
LPAQ29   ICM   R5,B'1111',CDCHAIN      NEXT CDE ADDR
         JNZ   LPAQ21                  NO FINISHED YET, LOOP FURTHER
*ENDLOOP
LPAQ99   BRAS  R14,BLANK1              BLANK LINE
         END_PROC
         TITLE 'SHOWMVS &REL - SVC table'
*---------------------------------------------------------------------*
*                                                                     *
*SVC Table:                                                           *
*                                                                     *
*  No.  EntryP   L EP-Name   Description   Type/Locks  AR UpdCnt Previ*
*                                                                     *
*    0  00FF7A50 N IECVEXCP  EXCP          T1-8000      N      0 00000*
*    1  80FDFFDA N IEAVEWAT  WAIT          T1-8000      N      0 00000*
*    2  80FEFF80 N IEAVEPST  POST          T1-8000      N      0 00000*
*    3  810E5ED8 N IGC003    EXIT          T1-8000      Y      0 00000*
*    4  814CCF5A N IGVVSM24  GETMAIN       T1-8000      N      0 00000*
*    5  814CCF5A N IGVVSM24  FREEMAIN      T1-8000      N      0 00000*
*    6  81268428 N CSVLINK   LINK          T2-8000      N      0 00000*
*    7  8126E798 N CSVXCTL   XCTL          T2-8000      N      0 00000*
*    8  81268648 N CSVLOAD   LOAD          T2-8000      N      0 00000*
*    9  81268140 N CSVDELET  DELETE        T2-8000      N      0 00000*
*   10  814CDEEE N IGVVSM24  GETMAIN/FREE  T1-8000      N      0 00000*
*   11  85746C70 P IGC0001A  TIME          T3           N      1 00033*
*---------------------------------------------------------------------*
SVCTABLE BEGIN_PROC KW=SVCTABLE,BASEREG=YES  NUCLKUP require     RS0302
         STRING '&TITLEPFX.SVC Table:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R5,CVTABEND             SECONDARY CVT
         USING SCVTSECT,R5
         NUCLKUP BYNAME,NAME='IGCERROR',ADDR=(0)
         ST    R0,IGCERROR             save addr of IGCERROR
         LA    R3,256                  number of lines           RS1299
         SLR   R4,R4                   SVC no
         STRING '  No.  EntryP   L EP-Name   Description   Type/Locks',X
               '  AR UpdCnt Previous EP',INTO=LINE               RS1299
         BRAS  R14,SPACE2              Double Space              RS1299
         L     R6,SCVTSVCR             START OF SVC Update Table RS1299
         USING SVCURT,R6                                         RS1299
SVCTAB1  DS    0H                                                RS0500
.SVCTAB1  ANOP
         L     R5,SCVTSVCT             START OF SVC TABLE
         USING SVCENTRY,R5
*LOOP
SVCTAB3  L     R1,SVCEP                SVC EP ADDR
         BRAS  R14,CSVQUERY            GET EP NAME
         BRAS  R7,SVCTYPE              DECODE TYPE
         LR    R0,R4                   SVC no
         BRAS  R14,SCANTBL             find SVC name
         STRING (2(R1),(R2)),INTO=(WORK256+20,12)
         STRING ((R4),,R5B),           122                             X
               2X,(SVCEP,,X),          82345678                        X
               1X,EP10,                A IGC0012B                      X
               2X,(WORK256+20,12),     SVC122                          X
               2X,(WORK256,12),        T3-0000                         X
               1X,(WORK256+40,1),4X,   AR-Mode                   RS1299X
               (SVCURCNT,H,R3B),       000 Svc-Update-Count      RS1299X
               1X,(SVCUROLD,4,X),      82345678 prev entry       RS1299X
               INTO=LINE
         BRAS  R14,SPACE1          <== next line
         LA    R4,1(,R4)               bump SVC no
         LA    R5,8(,R5)               NEXT SVC (EVEN)
         LA    R6,24(,R6)              NEXT SVCUR                RS1299
         BRCT  R3,SVCTAB3
*ENDLOOP
         BRAS  R14,BLANK1              BLANK LINE
         STRING '   LOCKS: 80-LOCAL 40-CMS 20-OPT 10-SALLOC 08-DISP',  X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
*        TYPE-X ESR ENTRIES
*
SVCESR1  BRAS  R3,SVCESR2              BRANCH AROUND TABLE
         DC    AL2(116),C'1'           T1-ESR
         DC    AL2(122),C'2'           T2-ESR
         DC    AL2(109),C'3'           T3-ESR
         DC    AL2(137),C'6'           T6-ESR
*LOOP
SVCESR2  L     R1,CVTABEND             SECONDARY CVT
         L     R5,SCVTSVCT-SCVTSECT(,R1)  START OF SVC TABLE
         LH    R1,0(,R3)               GET SVC NUMBER
         SLL   R1,3                    MULT BY 8
         L     R5,0(R1,R5)             ADDR OF T3-ESR TABLE
         L     R0,SVCESRMX             GET MAX NUMBER OF ENTRIES
         ST    R0,WKCELL1              KEEP IT
         STRING '&TITLEPFX.Type-',(2(R3),1),                           X
               ' ESR  (SVC ',(0(R3),H,R3Z),                            X
               ' - Maximum ',(SVCESRMX,F,L),' Entries)',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         SLR   R4,R4                   SVC no
         LA    R5,8(,R5)               SKIP HEADER
*--LOOP
SVCESR3  LR    R1,R5                   CURRENT ENTRY
         AHI   R1,-16
         CLC   0(16,R1),0(R5)          SAME UNUSED ENTRIES?
         JE    SVCESR3P                YES, SKIP THEM
         L     R1,SVCEP                SVC EP ADDR
         BRAS  R14,CSVQUERY            GET EP NAME
         BRAS  R7,SVCTYPE              DECODE TYPE
         STRING ((R4),,R5B),2X,(SVCEP,,X),1X,EP10,2X,(WORK256,12),     X
               INTO=LINE
         LA    R4,1(,R4)               bump SVC no
         LA    R5,8(,R5)               NEXT SVC (ODD NUMBER)
         CL    R4,WKCELL1              LAST NUMBER REACHED?
         JH    SVCESR3N                YES, EXIT LOOP
         L     R1,SVCEP                SVC EP ADDR
         BRAS  R14,CSVQUERY            GET EP NAME
         BRAS  R7,SVCTYPE              DECODE TYPE
         STRING ((R4),,R5B),2X,(SVCEP,,X),1X,EP10,2X,(WORK256,12),     X
               INTO=(LINE+40,NEXTLINE)
SVCESR3N BRAS  R14,SPACE1          <== next line
         J     SVCESR3Q
SVCESR3P LA    R4,1(,R4)               bump SVC no
         LA    R5,8(,R5)               NEXT SVC (EVEN)
SVCESR3Q LA    R4,1(,R4)               bump SVC no
         LA    R5,8(,R5)               NEXT SVC (EVEN)
         CL    R4,WKCELL1              LAST NUMBER REACHED?
         JNH   SVCESR3                 NO, KEEP LOOPING
*--ENDLOOP
         BRAS  R14,BLANK1              BLANK LINE
         LA    R3,3(,R3)               NEXT ESR-TYPE TABLE ENTRY
         CLI   0(R3),0                 END OF TABLE?
         JE    SVCESR2                 NOT YET, DO IT AGAIN
*ENDLOOP
         J     SVCT99
*
*        Sub-routine: decode SVC type flags
*
SVCTYPE  MVC   WORK256(12),BLANKS      FORMAT OUTPUT FIELD
         MVC   WORK256(2),=C'T3'       FORMAT OUTPUT FIELD
         TM    SVCTP,SVCTP34           TYPE 3 (OR 4)
         JO    SVCTYPE2                YES, JUMP
         MVI   WORK256+1,C'2'          CHANGE TO T2
         TM    SVCTP,SVCTP2            TYPE 2?
         JO    SVCTYPE2                YES, JUMP
         MVI   WORK256+1,C'6'          CHANGE TO T6
         TM    SVCTP,SVCTP6            TYPE 6?
         JO    SVCTYPE2                YES, JUMP
         MVI   WORK256+1,C'1'          CHANGE TO T1
SVCTYPE2 TM    SVCTP,SVCAPF            APF REQUIRED?
         JNO   SVCTYPE3                NO, JUMP
         MVC   WORK256+2(4),=C'-APF'   YES, SHOW APF
SVCTYPE3 TM    SVCTP,SVCESR            ESR?
         JNO   SVCTYPE6                NO, JUMP
         MVC   WORK256+2(4),=C'-ESR'   YES, SHOW ESR
SVCTYPE6 CLI   SVCLOCKS,0              ANY LOCK REQUIRED?
         JE    SVCTYPE9                NO, JUMP
         STRING (WORK256,12,T),'-',(SVCLOCKS,,X),INTO=(WORK256,12)
SVCTYPE9 DS    0H                                                RS0500
         MVI   WORK256+40,C'?'         Default n/a               RS0500
         MVI   WORK256+40,C'N'         Default NO                RS1299
         TM    SVCATTR3,SVCAR          AccessRegister?           RS1299
         JNO   SVCTYPEA                                          RS1299
         MVI   WORK256+40,C'Y'                                   RS1299
SVCTYPEA BR    R7                                                RS1299
*
*----------------------------------------------------------------------
*        SCAN SVC/PCK TABLES
*----------------------------------------------------------------------
*
SCANTBL  LA    R1,SVCNAMES             SVC name table
         SLR   R2,R2
*LOOP
SCANTBL2 IC    R2,1(,R1)               PICK UP ENTRY LENGTH
         CLM   R0,B'0001',0(R1)        COMPARE SVC NUMBER WITH INTCODE
         BER   R14                     EQUAL, QUIT LOOP
         LA    R1,2(R2,R1)             BUMP TO NEXT ENTRY IN SVC TABLE
         CLI   0(R1),FF                END OF TABLE?
         JNE   SCANTBL2                NO, TRY NEXT ENTRY
*ENDLOOP
         LA    R1,BLANKS               unknown SVC
         LA    R2,1                    length=1
         BR    R14
*
         MACRO
&NAME    TABLE &FN
&I       SETA  2
&J       SETA  &FN
&NAME2   SETC  '&NAME'
.LOOP    AIF   (T'&SYSLIST(&I) EQ 'O').NEXT
         AIF   ('&SYSLIST(&I)'(1,1) EQ '''').HH
&K       SETA  K'&SYSLIST(&I)
&NAME2   DC    AL1(&J,&K),C'&SYSLIST(&I)'
.HH      AIF   ('&SYSLIST(&I)'(1,1) NE '''').NEXT
&K       SETA  K'&SYSLIST(&I)-2
&NAME2   DC    AL1(&J,&K),C&SYSLIST(&I)
.NEXT    ANOP
&NAME2   SETC  ''
&I       SETA  &I+1
&J       SETA  &J+1
         AIF   (&I LE N'&SYSLIST).LOOP
         MEND
*
SVCNAMES TABLE 0,EXCP,WAIT,POST,EXIT,GETMAIN,FREEMAIN,LINK,XCTL,       X
               LOAD,DELETE,GETMAIN/FREEMAIN,TIME,SYNCH,ABEND,SPIE,     X
               ERREXCP,PURGE,RESTORE,BLDL/FIND,OPEN,CLOSE,STOW,        X
               'OPEN TYPE=J','CLOSE TYPE=T',DEVTYPE,TRKBAL,            X
               LOCATE/CATALOG,OBTAIN,CVOL,SCRATCH,RENAME,FEOV,REALLOC, X
               IOHALT,MGCR/QEDIT,WTO/WTOL,WTL,SEGLD/SEGWT,,LABEL,      X
               EXTRACT,IDENTIFY,ATTACH,CIRB,CHAP,OVLYBRCH,TTIMER,      X
               STIMER,DEQ,,,SNAP/SDUMP,RESTART,RELEX,DISABLE,EOV,      X
               ENQ/RESERVE,FREEDBUF,RELBUF/REQBUF,OLTEP,STAE/ESTAE,    X
               IKJEGS6A,DETACH,CHKPT,RDJFCB,,BTAMTEST,,                X
               SYNADAF/SYNADRLS,BSP,GSERV
         TABLE 79,STATUS,,SETPRT,,SMFWTM,GRAPHICS,DDRSWAP,ATLAS,DOM
         TABLE 91,VOLSTAT,TCBEXCP,TGET/TPUT,STCC,SYSEVENT,STAX,        X
               'TSO TEST',PROTECT,DYNALLOC,IKJEFFIB,,,XLATE,,IMGLIB,,  X
               MODESET,,'TYPE 3 ESR',DSTATUS,HASPSSSM,PGRLSE,PGFIX,    X
               EXCPVR,,'TYPE 1 ESR',DEBCHK,,TESTAUTH,                  X
               GETMAIN/FREEMAIN,VSAM,'TYPE 2 ESR',PURGEDEQ,,EVENTS
         TABLE 130,RACHECK,RACINIT,RACLIST,RACDEF
         TABLE 138,PGSER,CVAF,,,,CIPHER,OMVSPTRACE               RS1299
         DC    X'FF',0D'0'             END OF TABLE
PCKTABLE TABLE 1,OPERATION,'PRIVILEGED OPERATION',EXECUTE,             X
               PROTECTION,ADDRESSING,SPECIFICATION,DATA,               X
               'FIXED-PT OVERFLOW','FIXED-PT DIVIDE',                  X
               'DECIMAL OVERFLOW','DECIMAL DIVIDE',                    X
               'EXPONENT OVERFLOW','EXPONENT UNDERFLOW',               X
               SIGNIFICANCE,'FLOATING-PT DIVIDE',                      X
               'SEGMENT TRANSLATION','PAGE TRANSLATION',               X
               'TRANSLATION SPECIFICATION','SPECIAL OPERATION'
         DC    X'FF',0D'0'             END OF TABLE
SVCT99   END_PROC
         TITLE 'SHOWMVS &REL - Linkage Index Info'             JWMJUN96
*---------------------------------------------------------------------*
*                                                                     *
* Linkage Index (LX) information:                                     *
*                                                                     *
*   LX number   Owned by ASID   Inuse Count   System LX   Dormant     *
*       0       0002 PCAUTH         FFFF           Yes        No      *
*                                                                     *
* Linkage Index (LX) entries - Max : 96   Free : 34                   *
* Free LX count - System : 5  Non-System : 4                          *
*                                                                     *
*---------------------------------------------------------------------*
LXINFO   BEGIN_PROC KW=LXINFO,AUTH=YES,BASEREG=NO                RS0302
         STRING '&TITLEPFX.Linkage Index (LX) information:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  LX number',3X,                                      X
               'Owned by ASID',3X,                                     X
               'Inuse Count',3X,                                       X
               'System LX',3X,                                         X
               'Dormant',                                              X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         CNOP  0,4
         BRAS  R12,*+8
         DC    A(LXINFOMK)
         L     R12,0(R12,0)
         USING LXINFOMK,R12
         L     R3,CVTSVT               Get address of PSASVT
         USING SVT,R3
         L     R3,SVTXMD               Cross Memory Directory          X
                                         in PC/AUTH address space
         DROP  R3
*        R3 --> XMD in pcauth address space
         ESAR  R2                      Get current secondary asid
         STH   R2,WKCELL1              Save current secondary asid.
         AXSET AX==H'1'                Set auth
         LA    R2,2                    Get 'pcauth' asid
         SSAR  R2                      Set pcauth as secondary
* FIND XMD
         LA    R14,XMDLNTH             Set lenth of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from secondary asid
         LA    R4,WORK256
         USING XMD,R4
* FIND LXAT
         L     R3,XMDLXAT              Address of LXAT
         LA    R14,L'LXATHDR           Set lenthg of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WKCELL2(R14),0(R3),R15  Copy data from secondary asid
         LA    R5,WKCELL2
         USING LXATHDR,R5
*
         XC    WKCELL3,WKCELL3         Clear out free system LX counter
         SR    R2,R2                   Clear LX counter
*LOOP
LXINFO10 DS    0H
         LA    R3,8(,R3)               Bump index up 8 bytes
         LA    R14,L'LXATINDX          Set length of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from secondary asid
         DROP  R4
         USING LXATINDX,R4
         CLC   LXATINDX,LXINFOMK       See if it is free
         JE    LXINFO40                Yes
         TM    LXATFLGS,LXATOWND       Is this LX owned
         JZ    LXINFO40                No
         LOCASCB ASID=LXATASID         Get addr of ASCB
         LTR   R15,R1                  Valid ASID?
         JNP   LXINFO20                No, jump
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   LXINFO30                Yes - continue
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         JNZ   LXINFO30                No - continue
LXINFO20 DS    0H
         LA    R1,BLANKS
LXINFO30 DS    0H
         LA    R6,=C'No '              Default No
         TM    LXATFLGS,LXATSYS        Is this a SYSTEM LX ?
         JZ    *+8                     No
         LA    R6,=C'Yes'              Yes
         LA    R7,=C'No '              Default No
         TM    LXATFLGS,LXATDORM       Is this a dormant LX ?
         JZ    *+8                     No
         LA    R7,=C'Yes'              Yes
         STRING 3X,((R2),,R4B),7X,                                     X
               (LXATASID,,X),' ',((R1),8),7X,                          X
               (LXATBIND,,X),9X,                                       X
               ((R6),3),8X,                                            X
               ((R7),3),                                               X
               INTO=LINE
         BRAS  R14,SPACE1              Single Space
         J     LXINFO80
LXINFO40 DS    0H
         STRING 3X,((R2),,R4B),7X,'Free',INTO=LINE
         BRAS  R14,SPACE1              Single Space
         TM    LXATFLGS,LXATSYS        Is this a SYSTEM LX ?
         JZ    LXINFO50                No
         LH    R1,WKCELL3              Reload reg
         LA    R1,1(,R1)               Free system LX count +1
         STH   R1,WKCELL3              Save for later
         J     LXINFO80
LXINFO50 DS    0H
         LH    R1,WKCELL3+2            Reload reg
         LA    R1,1(,R1)               Free non-system LX count +1
         STH   R1,WKCELL3+2            Svae for later
LXINFO80 DS    0H
         LA    R2,1(,R2)               System LX count +1
         CH    R2,LXATHILX             Below max
         JNH   LXINFO10                Yes
*ENDLOOP
*
         LH    R2,WKCELL1              Restore previous secondary -
         SSAR  R2                      Should be same as primary
         AXSET AX==H'0'                Reset auth
         BRAS  R14,BLANK1              blank line
         STRING '  Highest LX : ',(LXATHILX,H,L),                      X
               '   Max system LX : ',(LXATMSLX,H,L),                   X
               INTO=LINE
         BRAS  R14,SPACE1              Single Space
         LH    R2,WKCELL3              Free System LX count
         LH    R3,WKCELL3+2            Free Non-System LX count
         STRING '  Free LX count - System : ',(WKCELL3,H,L),           X
               '  Non-System : ',(WKCELL3+2,H,L),                      X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
LXINFO99 DS    0H
         END_PROC
LXINFOMK DS    0XL(L'LXATINDX)
         DC    AL2(0)       LXATASID
         DC    AL2(0)       LXATBIND
         DC    AL2(0)       LXATETCT
         DC    AL1(LXATSYS) LXATFLGS
         DC    AL1(0)       LXATRSV2
*
*
         TITLE 'SHOWMVS &REL - Auth Index Info'                  RS0700
*---------------------------------------------------------------------*
*                                                                     *
*  Auth Index (AX) information:                                       *
*                                                                     *
*    AX number   Stoken           Owned by ASID   EAX   EAX Count     *
*                                                                     *
*        0       0000000800000001 PCAUTH          No                  *
*        1       0000000800000001 PCAUTH          No                  *
*        2       0000007000000002 JES2            No                  *
*                                                                     *
*---------------------------------------------------------------------*
AXINFO   BEGIN_PROC KW=AXINFO,AUTH=YES,BASEREG=NO                RS0302
         STRING '&TITLEPFX.Auth Index (AX) information:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  AX number',3X,                                      X
               'Stoken',11X,                                           X
               'Owned by ASID',3X,                                     X
               'EAX',3X,                                               X
               'EAX Count',                                            X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R3,CVTSVT               Get address of PSASVT
         USING SVT,R3
         L     R3,SVTXMD               Cross Memory Directory          X
                                         in PC/AUTH address space
         DROP  R3
*        R3 --> XMD in pcauth address space
         ESAR  R2                      Get current secondary asid
         STH   R2,WKCELL1              Save current secondary asid.
         AXSET AX==H'1'                Set auth
         LA    R2,2                    Get 'pcauth' asid
         SSAR  R2                      Set pcauth as secondary
* FIND XMD
         LA    R14,XMDLNTH             Set lenth of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from secondary asid
         LA    R4,WORK256
         USING XMD,R4
* FIND AXAT
         L     R3,XMDAXAT              Address of AXAT
         LA    R14,L'AXATHDR           Set lenthg of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WKCELL2(R14),0(R3),R15  Copy data from secondary asid
         LA    R5,WKCELL2
         USING AXATHDR,R5
         LA    R3,16(,R3)              Bump around header
*
         SR    R2,R2                   Clear LX counter
*LOOP
AXINFO10 DS    0H
         LA    R14,L'AXATENT           Set length of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from secondary asid
         DROP  R4
         USING AXATENT,R4
         CLC   AXATSTKN,=D'0'          See if it is free
         JE    AXINFO80                Yes
         LOCASCB STOKEN=AXATSTKN       Get addr of ASCB
         LTR   R15,R1                  Valid ASID?
         JNP   AXINFO20                No, jump
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   AXINFO30                Yes - continue
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         JNZ   AXINFO30                No - continue
AXINFO20 DS    0H
         LA    R1,BLANKS
AXINFO30 DS    0H
         LA    R6,=C'No '              Default No
         TM    AXATFLG1,AXATEAXC       Is this in use?
         JZ    *+8                     No
         LA    R6,=C'Yes'              Yes
         STRING 3X,((R2),,R4B),7X,                                     X
               (AXATSTKN,,X),' ',                                      X
               ((R1),8),8X,                                            X
               ((R6),3),8X,                                            X
               (AXATETC,,R4B),                                         X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRAS  R14,SPACE1              Single Space
         J     AXINFO80
AXINFO80 DS    0H
         LA    R3,12(,R3)              Bump index up 16 bytes
         LA    R2,1(,R2)               AX count +1
         C     R2,AXATAVAL             max reached ?
         JNH   AXINFO10                  No next one
*ENDLOOP
*
         LH    R2,WKCELL1
         SSAR  R2                      Should be same as primary
         AXSET AX==H'0'                Reset auth
         BRAS  R14,BLANK1              blank line
AXINFO99 DS    0H
         END_PROC
         TITLE 'SHOWMVS &REL - XMS-Connection'                   RS0700
*---------------------------------------------------------------------*
*                                                                     *
*  Cross Memory Connection (XMS):
*
*    Jobname       ASID SToken           SETC-Ptr Flag  LX   To   From
*
*    TCPIP           62 000000F800000001 7FFD1168   90  Yes   0      0
*    NFSC            45 000000B400000001 7FFD1340   10  No    0      1
*      <- OMVS       14 0000003800000001 7FFD7C50
*    SDSF            43 000000AC00000001 7FFD1518   90  Yes   0      0
*    APPC            39 0000009C00000001 7FFD16F0   98  Yes   0      0
*    VMCF            44 000000B000000001 7FFD18C8   90  Yes   0      0
*    DFSCM           20 0000005000000002 7FFD1AA0   10  No    0      1
*      <- OMVS       14 0000003800000001 7FFD7C50
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
XMSINFO  BEGIN_PROC KW=XMSINFO,AUTH=YES,BASEREG=NO               RS0302
         AIF   (NOT D'CVTH6603).XMSINF99  OS/390 R3
         TM    HBB6603,L'HBB6603       running on OS390 R3 ?
         JNO   XMSINF99                no, jump
         STRING '&TITLEPFX.Cross Memory Connection (XMS):',INTO=LINE
         BRAS  R14,SPACE2
         STRING '  Jobname',7X,                                        X
               'ASID ',                                                X
               'SToken',11X,                                           X
               'SETC-Ptr ',                                            X
               'Flag  ',                                               X
               'LX',3X,                                                X
               'To',3X,                                                X
               'From',                                                 X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R3,CVTSVT               Get address of PSASVT
         USING SVT,R3
         L     R3,SVTXMD               Cross Memory Directory          X
                                         in PC/AUTH address space
         DROP  R3
*        R3 --> XMD in pcauth address space
         ESAR  R2                      Get current secondary asid
         STH   R2,WKCELL1              Save current secondary asid.
         AXSET AX==H'1'                Set auth
         LA    R2,2                    Get 'pcauth' asid
         SSAR  R2                      Set pcauth as secondary
* FIND XMD
         LA    R14,XMDLNTH             Set lenth of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from secondary asid
         LA    R4,WORK256
         USING XMD,R4
* FIND XMSE
         L     R3,XMDXMSE              Address of XMSE
*loop
XMSINF10 DS   0H
         LA    R14,XMSE_LENGTH       Set lenthg of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from secondary asid
         LA    R4,WORK256
         USING XMSE,R4
* find SETC at first just the length
         L     R3,XMSESETC             Address of SETC
         LA    R14,L'SETCHDR           Set Header length, the header
*                                      include the current length
         SR    R15,R15                 'from' key
         MVCP  WORK256+120(R14),0(R3),R15 Copy data from secondary asid
         LA    R5,WORK256+120          point to the header
         USING SETC,R5                 tell assembly
         BRAS  R14,WORKADDR
         LH    R14,SETCLENG            Now using the current length
         LR    R5,R1
         SR    R15,R15                 'from' key
         LA    R6,256                  max length of MVCP        RS0900
XMSINF70 MVCP  0(R14,R5),0(R3),R15     Copy data from sec. asid
         BRC   8,XMSINF73              do we get all data?       RS0900
         AR    R5,R6                    no, setup for the next   RS0900
         AR    R3,R6                        move                 RS0900
         SR    R14,R6                                            RS0900
         J     XMSINF70                     get the next 256     RS0900
XMSINF73 DS 0H                         We got it all             RS0900
         LR    R5,R1                   point to the start SETC   RS0900
         LA    R6,=C'No '              Default No
         TM    SETCFLG1,SETCLXUS       Is this in use?
         JZ    *+8                     No
         LA    R6,=C'Yes'              Yes
XMSINF77 DS 0H
*        #SNAP ADDR=(R5),LENGTH=(R14)  The output can be very big !!
         STRING 2X,(XMSEJOBN),7X,      Jobname                         X
               (XMSEASID,H,R3B),1X,    Asid                            X
               (XMSESTKN,8,X),1X,      SToken                          X
               (XMSESETC,,X),3X,       SETC-Pointer                    X
               (SETCFLG1,,X),2X,       Flag                            X
               ((R6),3),1X,            LX Yes/No                       X
               (SETCTONO,H,R3B),4X,    To counter                      X
               (SETCFRNO,H,R3B),1X,    From counter                    X
               INTO=LINE
         BRAS  R14,SPACE1
         TM    SETCFLG1,SETCLXUS     Dont examine the connection JM1000
         JO    XMSINF85                pointer                   JM1000
         LH    R6,SETCFRNO             Count number of TO        RS0800
         AH    R6,SETCTONO             + FROM-connections        RS0800
         LTR   R6,R6                   Check if there is any
         JZ    XMSINF85                  no, NO XMS
*  loop
XMSINF80 DS 0H
         L     R3,SETCENTP             Connection entry
         TM    SETCENTP+3,SETCNOUS     Entry in used X'01' bit 0
         JNZ   XMSINF83_1                no, no need to display
         MVC   WORK256+40(2),=C'->'    To
         TM    SETCENTP,X'80'          Is this a to-XMS?
         JO    XMSINF82                  ok, report
         MVC   WORK256+40(2),=C'<-'    From
XMSINF82 DS 0H
         LA    R14,XMSE_LENGTH         length of XMSE
         SR    R15,R15                 'from' key
         MVCP  WORK256+50(R14),0(R3),R15 Copy data from secondary asid
         STRING 4X,                                                    X
               (WORK256+40,2),1X,      Indicator To/From               X
               (WORK256+78,8),2X,      Jobname                         X
               (WORK256+86,H,R3B),1X,  Asid                            X
               (WORK256+58,8,X),1X,    Stoken                          X
               (SETCENTP,,X),1X,       SETC-Pointer                    X
               INTO=LINE
         BRAS  R14,SPACE1
XMSINF83 DS 0H
         LA    R5,4(,R5)               point to next connection entry
*                                      R5 is destroyed !!
         BRCT  R6,XMSINF80             Do until number of entries
         J     XMSINF85
XMSINF83_1 DS 0H
         LA    R5,4(,R5)               point to next connection
         J     XMSINF80
XMSINF85 DS 0H
         ICM   R3,B'1111',XMSENXTP     next XMSE > 0
         JNZ   XMSINF10                 yes, proceeed
*endloop
         LH    R2,WKCELL1
         SSAR  R2                      Should be same as primary
         AXSET AX==H'0'                Reset auth
         BRAS  R14,BLANK1              blank line
.XMSINF99 ANOP
XMSINF99 DS    0H
         END_PROC
         TITLE 'SHOWMVS &REL - MDQ'                              RS0601
*---------------------------------------------------------------------*
*                                                                     *
*  Memory Delete Queue (MDQ):
*
*    Jobname       ASID SToken           SETC-Ptr Flag  LX   To   From
*
*    TCPIP           62 000000F800000001 7FFD1168   90  Yes   0      0
*    NFSC            45 000000B400000001 7FFD1340   10  No    0      1
*      <- OMVS       14 0000003800000001 7FFD7C50
*    SDSF            43 000000AC00000001 7FFD1518   90  Yes   0      0
*    APPC            39 0000009C00000001 7FFD16F0   98  Yes   0      0
*    VMCF            44 000000B000000001 7FFD18C8   90  Yes   0      0
*    DFSCM           20 0000005000000002 7FFD1AA0   10  No    0      1
*      <- OMVS       14 0000003800000001 7FFD7C50
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
MDQINFO  BEGIN_PROC KW=MDQINFO,AUTH=YES,BASEREG=NO               RS0302
         AIF   (NOT D'CVTH6603).MDQINF99  OS/390 R3
         TM    HBB6603,L'HBB6603       running on OS390 R3 ?
         JNO   MDQINF99                no, jump
         STRING '&TITLEPFX.Memory Delete Queue (MDQ):',INTO=LINE
         BRAS  R14,SPACE2
         STRING '  Jobname',7X,                                        X
               'ASID ',                                                X
               'SToken',11X,                                           X
               'SETC-Ptr ',                                            X
               'Flag  ',                                               X
               'LX',3X,                                                X
               'To',3X,                                                X
               'From',                                                 X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R3,CVTSVT               Get address of PSASVT
         USING SVT,R3
         ICM   R3,B'1111',SVTMDLQ      Memory Delete Queue       RS0302
         JNZ   MDQINF05                  is empty                RS0302
         STRING '  No entries in old queue',INTO=LINE            RS0803
         BRAS  R14,SPACE2              Double Space              RS0302
         J     MDQINF99                leave                     RS0302
MDQINF05 DS   0H                                                 RS0302
         USING ASSB,R3
         ESAR  R2                      Get current secondary asid
         STH   R2,WKCELL1              Save current secondary asid.
         AXSET AX==H'1'                Set auth
         LA    R2,2                    Get 'pcauth' asid
         SSAR  R2                      Set pcauth as secondary
*loop
MDQINF10 DS   0H
         L     R4,ASSBXMSE             Address of XMSE
*        Find XMSE                                               RS1002
*        #SNAP ADDR=(R3),LENGTH=100    Debug
         USING XMSE,R4
         LA    R14,XMSE_LENGTH         Set lenthg of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R4),R15  Copy data from secondary asid
*        #SNAP ADDR=WORK256,LENGTH=(R14)  Debug-Code             RS1002
         LA    R4,WORK256
         USING XMSE,R4
* find SETC at first just the length
         L     R5,XMSESETC             Address of SETC
         LA    R14,L'SETCHDR           Set Header length, the header
*                                      include the current length
         SR    R15,R15                 'from' key
         MVCP  WORK256+120(R14),0(R5),R15 Copy data from secondary asid
*        #SNAP ADDR=WORK256+120,LENGTH=(R14)   Debug             RS1002
         LA    R6,WORK256+120          point to the header
         USING SETC,R6                 tell assembly
         BRAS  R14,WORKADDR
         LH    R14,SETCLENG            Now using the current length
*                                      (use R6 for SETC)         RS1002
         LR    R6,R1
         SR    R15,R15                 'from' key
         LA    R7,256
MDQINF70 MVCP  0(R14,R6),0(R5),R15     Copy data from sec. asid
         BRC   8,MDQINF73              do we get all data?
         AR    R6,R7                    no, setup for the next
         AR    R5,R7                        move
         SR    R14,R7
         J     MDQINF70                     get the next 256
MDQINF73 DS 0H                         We got it all
         LR    R6,R1                   point to the start SETC
         LA    R1,=C'No '              Default No
         TM    SETCFLG1,SETCLXUS       Is this in use?
         JZ    *+8                     No
         LA    R1,=C'Yes'              Yes
MDQINF77 DS 0H
         LH    R14,SETCLENG
*        #SNAP ADDR=(R6),LENGTH=(R14)  The output can be very big !!
         STRING 2X,(XMSEJOBN),7X,      Jobname                         X
               (XMSEASID,H,R3B),1X,    Asid                            X
               (XMSESTKN,8,X),1X,      SToken                          X
               (XMSESETC,,X),3X,       SETC-Pointer                    X
               (SETCFLG1,,X),2X,       Flag                            X
               ((R1),3),1X,            LX Yes/No                       X
               (SETCTONO,H,R3B),4X,    To counter                      X
               (SETCFRNO,H,R3B),1X,    From counter                    X
               INTO=LINE
         BRAS  R14,SPACE1
         TM    SETCFLG1,SETCLXUS     Dont examine the connection
         JO    MDQINF85                pointer
         LH    R7,SETCFRNO             Count number of TO
         AH    R7,SETCTONO             + FROM-connections
         LTR   R7,R7                   Check if there is any
         JZ    MDQINF85                  no, NO XMS
*  loop
MDQINF80 DS 0H
         DROP  R4
         L     R4,SETCENTP             Connection entry
         TM    SETCENTP+3,SETCNOUS     Entry in used X'01' bit 0
         JNZ   MDQINF83_1                no, no need to display
         LA    R1,=C'->'    To                                   RS1002
         TM    SETCENTP,X'80'          Is this a to-XMS?
         JO    MDQINF82                  ok, report
         LA    R1,=C'<-'    From                                 RS1002
MDQINF82 DS 0H
         LA    R14,XMSE_LENGTH         length of XMSE
         SR    R15,R15                 'from' key
         MVCP  WORK256+50(R14),0(R4),R15 Copy data from secondary asid
         STRING 4X,                                                    X
               ((R1),2),1X,            Indicator To/From         RS1002X
               (WORK256+78,8),2X,      Jobname                         X
               (WORK256+86,H,R3B),1X,  Asid                            X
               (WORK256+58,8,X),1X,    Stoken                          X
               (SETCENTP,,X),1X,       SETC-Pointer                    X
               INTO=LINE
         BRAS  R14,SPACE1
MDQINF83 DS 0H
         LA    R6,4(,R6)               point to next connection entry
*                                      R5 is destroyed !!
         BRCT  R7,MDQINF80             Do until number of entries
         J     MDQINF85
MDQINF83_1 DS 0H
         LA    R6,4(,R6)               point to next connection
         J     MDQINF80
MDQINF85 DS 0H                                                   RS0900
         ICM   R3,B'1111',ASSBASRF     Address of next ASSB
         JNZ   MDQINF10
*endloop
MDQINF90 DS 0H                                                   RS0900
         LH    R2,WKCELL1
         SSAR  R2                      Should be same as primary
         AXSET AX==H'0'                Reset auth
         XC    WKCELL1,WKCELL1
         BRAS  R14,BLANK1              blank line
.MDQINF99 ANOP
MDQINF99 DS    0H
         AIF   (NOT D'CVTH7706).MDQZOS99   z/OS R3 ?             RS0902
         TM    HBB7706,L'HBB7706       running on z/OS R3 ?      RS0902
         JNO   MDQZOS99                no, jump                  RS0902
         L     R3,CVTSVT               Get address of PSASVT     RS0902
         USING SVT,R3                                            RS0902
         ESAR  R2                      Get current secondary asid
         STH   R2,WKCELL1              Save current secondary asid
         AXSET AX==H'1'                Set auth                  RS0902
         LA    R2,2                    Get 'pcauth' asid         RS0902
         SSAR  R2                      Set pcauth as secondary   RS0902
         L     R3,SVTXMD               Cross Memory Directory    RS0902
*        R3 --> XMD in pcauth address space                      RS0902
*        get XMD                                                 RS0902
         LA    R14,XMDLNTH             Set length of receiveing field
         SR    R15,R15                 'from' key                RS0902
         MVCP  WORK256(R14),0(R3),R15  Copy data from secondary asid
         LA    R3,WORK256                                        RS0902
         USING XMD,R3                                            RS0902
*        #SNAP ADDR=(R3),LENGTH=(R14)  DEBUG                     RS0902
*        Find XMSE                                               RS0902
         ICM   R3,B'1111',XMDR034 (XMDXMSER)   Address of first XMSE
         JZ    MDQZOS90                                          RS0902
         USING XMSE,R3                                           RS0902
*loop                                                            RS0902
MDQZOS10 DS    0H                                                RS0902
         LA    R14,XMSE_LENGTH_ZOS3    Set length of receiveing field
         SR    R15,R15                 'from' key                RS0902
         MVCP  WORK256(R14),0(R3),R15  Copy data from secondary asid
*        #SNAP ADDR=WORK256,LENGTH=(R14) Debug-Code              RS0902
         LA    R3,WORK256                                        RS0902
         USING XMSE,R3                                           RS0902
*        Find SETC at first just the length                      RS0902
         L     R5,XMSESETC             Address of SETC           RS0902
         LA    R14,L'SETCHDR           Set Header length, the header
*                                      include the current lengthRS0902
         SR    R15,R15                 'from' key                RS0902
         MVCP  WORK256+120(R14),0(R5),R15 Copy data from secondary asid
*        #SNAP ADDR=WORK256+120,LENGTH=(R14)   Debug             RS0902
         LA    R6,WORK256+120          point to the header       RS0902
         USING SETC,R6                 tell assembly             RS0902
         BRAS  R14,WORKADDR            get temp storage          RS0902
         LH    R14,SETCLENG            Now using the current length
*                                      (use R6 for SETC)         RS0902
         LR    R6,R1                   Workaddr from R1          RS0902
         SR    R15,R15                 'from' key                RS0902
         LA    R7,256                  length of a single MVCP   RS0902
MDQZOS70 MVCP  0(R14,R6),0(R5),R15     Copy data from sec. asid  RS0902
         BRC   8,MDQZOS73              do we get all data?       RS0902
         AR    R6,R7                    no, setup for the next   RS0902
         AR    R5,R7                        move                 RS0902
         SR    R14,R7                                            RS0902
         J     MDQZOS70                     get the next 256     RS0902
MDQZOS73 DS 0H                         We got it all             RS0902
         LR    R6,R1                   point to the start SETC   RS0902
         LA    R1,=C'No '              Default No                RS0902
         TM    SETCFLG1,SETCLXUS       Is this in use?           RS0902
         JZ    *+8                     No                        RS0902
         LA    R1,=C'Yes'              Yes                       RS0902
MDQZOS77 DS 0H                                                   RS0902
         LH    R14,SETCLENG
*        #SNAP ADDR=(R6),LENGTH=(R14)  The output can be very big !!
         STRING 2X,(XMSEJOBN),7X,      Jobname                         X
               (XMSEASID,H,R3B),1X,    Asid                            X
               (XMSESTKN,8,X),1X,      SToken                          X
               (XMSESETC,,X),3X,       SETC-Pointer                    X
               (SETCFLG1,,X),2X,       Flag                            X
               ((R1),3),1X,            LX Yes/No                       X
               (SETCTONO,H,R3B),4X,    To counter                      X
               (SETCFRNO,H,R3B),1X,    From counter                    X
               INTO=LINE                                         RS0902
         BRAS  R14,SPACE1                                        RS0902
         TM    SETCFLG1,SETCLXUS     Dont examine the connection RS0902
         JO    MDQZOS85                pointer                   RS0902
         LH    R7,SETCFRNO             Count number of TO        RS0902
         AH    R7,SETCTONO             + FROM-connections        RS0902
         LTR   R7,R7                   Check if there is any     RS0902
         JZ    MDQZOS85                  no, NO XMS              RS0902
*  loop                                                          RS0902
MDQZOS80 DS 0H                                                   RS0902
         L     R4,SETCENTP             Connection entry          RS0902
         TM    SETCENTP+3,SETCNOUS     Entry in used X'01' bit 0 RS0902
         JNZ   MDQZOS83_1                no, no need to display  RS0902
         LA    R1,=C'->'    To                                   RS0902
         TM    SETCENTP,X'80'          Is this a to-XMS?         RS0902
         JO    MDQZOS82                  ok, report              RS0902
         LA    R1,=C'<-'    From                                 RS0902
MDQZOS82 DS 0H                                                   RS0902
         LA    R14,XMSE_LENGTH_ZOS3    length of XMSE            RS0902
         SR    R15,R15                 'from' key                RS0902
         MVCP  WORK256+50(R14),0(R4),R15 Copy data from secondary asid
*        #SNAP ADDR=WORK256+50,LENGTH=(R14)
         STRING 4X,                                                    X
               ((R1),2),1X,            Indicator To/From               X
               (WORK256+78,8),2X,      Jobname                         X
               (WORK256+86,H,R3B),1X,  Asid                            X
               (WORK256+58,8,X),1X,    Stoken                          X
               (SETCENTP,,X),1X,       SETC-Pointer                    X
               INTO=LINE                                         RS0902
         BRAS  R14,SPACE1                                        RS0902
MDQZOS83 DS 0H                                                   RS0902
         LA    R6,4(,R6)               point to next connection entry
*                                      R5 is destroyed !!        RS0902
         BRCT  R7,MDQZOS80             Do until number of entriesRS0902
         J     MDQZOS85                                          RS1102
MDQZOS83_1 DS 0H                                                 RS0902
         LA    R6,4(,R6)               point to next connection  RS0902
         J     MDQZOS80                                          RS0902
MDQZOS85 DS 0H                                                   RS0902
*        #SNAP ADDR=(R3),LENGTH=50
         ICM   R3,B'1111',XMSEFORW     Next ??                   RS0902
         JNZ   MDQZOS10                                          RS0902
*endloop                                                         RS0902
MDQZOS90 DS 0H                                                   RS0902
         LH    R2,WKCELL1                                        RS0902
         SSAR  R2                      Should be same as primary RS0902
         AXSET AX==H'0'                Reset auth                RS0902
         XC    WKCELL1,WKCELL1                                   RS0902
         BAL   R14,BLANK1              blank line                RS0902
.MDQZOS99 ANOP                                                   RS0902
MDQZOS99 DS    0H                                                RS0902
         END_PROC
         TITLE 'SHOWMVS &REL - ETEINFO'                          RS0601
*---------------------------------------------------------------------*
*                                                                     *
*PC usage:                                                            *
*  PC-NO  AKM  ASID Jobname  Entry    Name     Latent-Parms      EKM  *
*  000000 FF00 0002 PCAUTH   8C702DA0          00000000 00000000 8000 *
*  000001 FF00 0002 PCAUTH   8C703730          00000000 00000000 8000 *
*  000002 FF00 0002 PCAUTH   8C704440          00000000 00000000 8000 *
*  000003 FF00 0002 PCAUTH   8C7059B0          00000000 00000000 8000 *
*  000004 FF00 0002 PCAUTH   8C706270          00000000 00000000 8000 *
*  000005 FF00 0002 PCAUTH   8C707858          00000000 00000000 8000 *
*  000006 FF00 0002 PCAUTH   8C708830          00000000 00000000 8000 *
*  000007 FF00 0002 PCAUTH   8C70883A          00000000 00000000 8000 *
*  000008 FF00 0002 PCAUTH   8C708844          00000000 00000000 8000 *
*  000009 FF00 0002 PCAUTH   8C709670          00000000 00000000 8000 *
*  00000A FF00 0002 PCAUTH   8C70967A          00000000 00000000 8000 *
*  00000B FF00 0002 PCAUTH   8C70A180          00000000 00000000 8000 *
*  00000C 8000 0002 PCAUTH   8C70F9B8          00000000 00000000 8000 *
*  00000D FFFF 0002 PCAUTH   813D06B0          00000000 00000000 8000 *
*  00000E FFFF 0002 PCAUTH   813D2EC8          00000000 00000000 8000 *
*  00000F FFFF 0002 PCAUTH   813D3AF8          00000000 00000000 8000 *
*  000010 FFFF 0002 PCAUTH   813D4108          00000000 00000000 8000 *
*  000011 FF00 0002 PCAUTH   813CF6D0          00000000 00000000 8000 *
*  000012 FFFF 0000          813CF698          n/a      n/a      0000 *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
ETEINFO  BEGIN_PROC KW=ETEINFO,AUTH=YES,BASEREG=YES IARR2V req   RS0302
*                                                   CSVQUERY req RS0302
         AIF   (NOT D'CVTH6606).ETEINF99  OS/390 R6
         TM    HBB6606,L'HBB6606       running on OS390 R6 ?
         JNO   ETEINF99                no, jump
         STRING '&TITLEPFX.PC usage:',INTO=LINE
         BRAS  R14,SPACE2              single line
         L     R1,CVTPTR(,0)           point at CVT
         USING CVTMAP,R1
         L     R3,CVTSVT               Get address of PSASVT
         USING SVT,R3
         L     R3,SVTXMD               Cross Memory Directory          X
                                         in PC/AUTH address space
         DROP  R3
*        R3 --> XMD in pcauth address space
         ESAR  R2                      Get current secondary asid
         STH   R2,WKCELL1              Save current secondary asid.
         AXSET AX==H'1'                Set auth
         LA    R2,2                    Get 'pcauth' asid
         SSAR  R2                      Set pcauth as secondary
* FIND XMD
         LA    R14,XMDLNTH             Set lenth of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from secondary asid
         LA    R4,WORK256              assign R4
         USING XMD,R4                  tell assembly
         MVC   WKCELL1+4(4),XMDSLT     remember SLT address
* FIND LXAT (header)
         L     R3,XMDLXAT              Address of LXAT
         LA    R14,L'LXATHDR           Set lenthg of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  copy data from sec. asid
         LA    R4,WORK256              assign R4
         USING LXATHDR,R4              tell assembly
         MVC   WKCELL1+2(2),LXATHILX   remember highest LX
         STRING '  PC-NO',2X,'AKM',2X,'ASID',1X,'Jobname',2X,          *
               'Entry',4X,'Name',5X,'Latent-Parms',6X,'EKM',1X,        *
               'Opt',1X,'Key',1X,'EAX',2X,'ASTE',5X,'ARR',             *
               INTO=LINE
         BRAS  R14,SPACE1              single line
         SR    R2,R2                   clear loop register
*loop
ETEINF_20 DS   0H
         LH    R1,WKCELL1+2            load highest LX
         CR    R2,R1                   Compare
         JH    ETEINF90                higher ok leave loop
* get LAXT-Entry
         LA    R3,8(,R3)               Bump index up 8 bytes
         LA    R14,L'LXATINDX          Set length of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from secondary asid
         DROP  R4
         LA    R4,WORK256              assign R4
         USING LXATINDX,R4             tell assembly
         CLC   LXATINDX,LXFREEMK       See if it is free
         JE    ETEINF_XX               Yes
         TM    LXATFLGS,LXATOWND       Is this LX owned
         JZ    ETEINF_XX               No
         TM    LXATFLGS,LXATSYS        Is this a SYSTEM LX ?
         JZ    ETEINF_XX               No
         LR    R1,R2                   work register
         SLL   R1,2                    *4 length of an entry
         A     R1,WKCELL1+4            + base XMDSTL
         LA    R14,4
         SR    R15,R15                 'from' key
         MVCP  WKCELL2(R14),0(R1),R15  get REAL ETE address
         TM    WKCELL2,X'80'           is this active
         JO    ETEINF_XX               no, leave
         MVC   WKCELL2+4(4),WKCELL2    move real ETE to work
         NI    WKCELL2+7,X'C0'         forget the counter (6bits)
         IARR2V RSA=WKCELL2+4,VSA=(R4) convert the real to virt
         L     R6,WKCELL2              the number of ETE's
         SLL   R6,26                   is in the last 6bits
         SRL   R6,26
         LA    R6,1(,R6)               +1
         SLL   R6,2                    multiply by 4
         XC    WKCELL3+4,WKCELL3+4
*  loop
ETEINF_30 DS  0H
         LA    R14,ETELEN              length of a single ETE-entry
         SR    R15,R15                 'from' key
         MVCP  WORK256+L'LXATINDX(R14),0(R4),R15 copy data from asid
         LA    R5,WORK256+L'LXATINDX   point to the header
         TM    HBB7706,L'HBB7706       running on z/OS R3        RS0302
         JNZ   ETEINF_60               yes, jump                 RS0302
         AIF   (NOT D'CVTH7703).ETEINF50 OS/390 R10?             RS0601
         TM    HBB7703,L'HBB7703       running on OS/390 R10?    RS0601
         JZ    ETEINF_50               no, jump                  RS0601
         TM    FLCARCH,PSAESAME        running ALS-2 ?           RS0601
         JZ    ETEINF_50                                         RS0601
         USING ETEX,R5                                           RS0601
*        #SNAP ADDR=(R5),LENGTH=(R14)  debug code                RS0601
         MVC   WKCELL4,BLANKS          get EP-Name if possible   RS0601
         CSVQUERY SEARCH=LPA,          search LPA                      +
               INADDR=ETEXEPA+4,          EntryPoint                   +
               OUTEPNM=WKCELL4,        return EP Name                  +
               MF=(E,CSVQRYWK)         work area                 RS0601
         LOCASCB ASID=ETEXASID         Get addr of ASCB          RS0601
         LTR   R15,R1                  Valid ASID?               RS0601
         JNP   ETEINFO_40              No, jump                  RS0601
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME             RS0601
         JNZ   ETEINFO_41              Yes - continue            RS0601
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON   RS0601
         JNZ   ETEINFO_41              No - continue             RS0601
ETEINFO_40 DS  0H                                                RS0601
         LA    R1,BLANKS               ok no jobname             RS0601
ETEINFO_41 DS  0H                                                RS0601
         ST    R2,WKCELL3              for display               RS0601
         STRING 2X,(WKCELL3+2,2,X),(WKCELL3+7,1,X),1X,(ETEXAKM,,X),1X, *
               (ETEXASID,,X),1X,((R1),8),1X,(ETEXEPA+4,4,X),1X,        *
               (WKCELL4,8),1X,                                         *
               (ETEXPARM_1,,X),1X,(ETEXPARM_2,,X),1X,(ETEXEKM,,X),1X,  *
               (ETEXOPTB1,,X),2X,(ETEXEK,,X),1X,(ETEXEAX,,X),1X,       *
               (ETEXASTE,,X),INTO=LINE                           RS0601
*              (ETEXASTE,,X),1X,(LATENTARR,,X),INTO=LINE         RS0601
         LA    R15,LINE+2(R15)                                   RS0601
         MVI   0(R15),C'S'             Supervior mode (default)  RS0601
         TM    ETEXPBYTE,ETEXPS        Check mode                RS0601
         JNO   *+4+4                     no, setting             RS0601
         MVI   0(R15),C'P'             private mode              RS0601
         TR    LINE,TRTPRINT           get rid of garbage        RS0601
         BRAS  R14,SPACE1              single space              RS0601
*        J     ETEINFO_60              jump around NON-ESAME codeRS0601
         J     ETEINFO_70              jump around NON-ESAME code
.ETEINF50 ANOP                                                   RS0601
ETEINF_50 DS  0H                                                 RS0601
         USING ETE,R5                  tell assembly
*        #SNAP ADDR=(R5),LENGTH=(R14)  debug code
         MVC   WKCELL4,BLANKS          get EP-Name if possible
         CSVQUERY SEARCH=LPA,          search LPA                      +
               INADDR=ETEEPA,          EntryPoint                      +
               OUTEPNM=WKCELL4,        return EP Name                  +
               MF=(E,CSVQRYWK)         work area
         LOCASCB ASID=ETEASID          Get addr of ASCB
         LTR   R15,R1                  Valid ASID?
         JNP   ETEINFO_51              No, jump
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   ETEINFO_52              Yes - continue
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         JNZ   ETEINFO_52              No - continue
ETEINFO_51 DS  0H
         LA    R1,BLANKS               ok no jobname
ETEINFO_52 DS  0H
         ST    R2,WKCELL3              for display
         ICM   R7,B'1111',ETEPARM      Is a LATENT area present?
         JZ    ETEINFO_55               no, don't display
         USING LATENT,R7               tell assmbly
         STRING 2X,(WKCELL3+2,2,X),(WKCELL3+7,1,X),1X,(ETEAKM,,X),1X,  *
               (ETEASID,,X),1X,((R1),8),1X,(ETEEPA,,X),1X,             *
               (WKCELL4,8),1X,                                         *
               (LATENTPARM1,,X),1X,(LATENTPARM2,,X),1X,(ETEEKM,,X),1X, *
               (ETEOPTB1,,X),2X,(ETEEK,,X),1X,(ETEEAX,,X),1X,          *
               (ETEASTE,,X),1X,(LATENTARR,,X),INTO=LINE
         J     ETEINFO_57
ETEINFO_55 DS  0H
         STRING 2X,(WKCELL3+2,2,X),(WKCELL3+7,1,X),1X,(ETEAKM,,X),1X,  *
               (ETEASID,,X),1X,((R1),8),1X,(ETEEPA,,X),1X,             *
               (WKCELL4,8),1X,                                         *
               'n/a',6X,'n/a',6X,(ETEEKM,,X),1X,                       *
               (ETEOPTB1,,X),2X,(ETEEK,,X),1X,(ETEEAX,,X),1X,          *
               (ETEASTE,,X),1X,(LATENTARR,,X),INTO=LINE
ETEINFO_57 DS  0H
         LA    R15,LINE+2(R15)
         MVI   0(R15),C'S'             Supervior mode (default)
         TM    ETEPBYTE,ETEPS          Check mode
         JNO   *+4+4                     no, setting
         MVI   0(R15),C'P'             private mode
         TR    LINE,TRTPRINT           get rid of garbage
         BRAS  R14,SPACE1              single space
         J     ETEINFO_70                                        RS0302
.ETEINF60 ANOP                                                   RS0302
ETEINF_60 DS  0H                                                 RS0302
         AIF   (NOT D'CVTH7706).ETEINF_70  z/OS R3?              RS0302
         USING ETE1,R5                                           RS0302
*        #SNAP ADDR=(R5),LENGTH=(R14)  debug code                RS0302
         MVC   WKCELL4,BLANKS          get EP-Name if possible   RS0302
         CSVQUERY SEARCH=LPA,          search LPA                      +
               INADDR=ETE1EPA,            EntryPoint                   +
               OUTEPNM=WKCELL4,        return EP Name                  +
               MF=(E,CSVQRYWK)         work area                 RS0302
         LOCASCB ASID=ETE1ASID         Get addr of ASCB          RS0302
         LTR   R15,R1                  Valid ASID?               RS0302
         JNP   ETEINFO_61              No, jump                  RS0302
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME             RS0302
         JNZ   ETEINFO_62              Yes - continue            RS0302
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON   RS0302
         JNZ   ETEINFO_62              No - continue             RS0302
ETEINFO_61 DS  0H                                                RS0302
         LA    R1,BLANKS               ok no jobname             RS0302
ETEINFO_62 DS  0H                                                RS0302
         ST    R2,WKCELL3              for display               RS0302
         STRING 2X,(WKCELL3+2,2,X),(WKCELL3+7,1,X),1X,(ETE1AKM,,X),1X, *
               (ETE1ASID,,X),1X,((R1),8),1X,(ETE1EPA,4,X),1X,          *
               (WKCELL4,8),1X,                                         *
               (ETE1PARMH,,X),1X,(ETE1PARML,,X),1X,(ETE1EKM,,X),1X,    *
               (ETE1OPTB1,,X),2X,(ETE1EK,,X),1X,(ETE1EAX,,X),1X,       *
               (ETE1ASTE,,X),INTO=LINE                           RS0302
         LA    R15,LINE+2(R15)                                   RS0302
         MVI   0(R15),C'S'             Supervior mode (default)  RS0302
         TM    ETE1PBYTE,ETE1PS        Check mode                RS0302
         JNO   *+4+4                     no, setting             RS0302
         MVI   0(R15),C'P'             private mode              RS0302
         TR    LINE,TRTPRINT           get rid of garbage        RS0302
         BRAS  R14,SPACE1              single space              RS0302
.ETEINF_70 ANOP                                                  RS0302
ETEINFO_70 DS  0H                                                RS0302
         L     R14,WKCELL3+4
         AHI   R14,1
         ST    R14,WKCELL3+4           next PC-NO
         LA    R4,32(,R4)              next ETE
         BRCT  R6,ETEINF_30            do until R6 = 0
         BRAS  R14,BLANK1              empty line
*  endloop
ETEINF_XX DS   0H
         LA    R2,1(R2)                next LX
         J     ETEINF_20               loop
*endloop
ETEINF90 DS 0H
         LH    R2,WKCELL1              primary
         SSAR  R2                      Should be same as primary
         AXSET AX==H'0'                Reset auth
         XC    WKCELL1,WKCELL1         clear
         BRAS  R14,BLANK1              blank line
.ETEINF99 ANOP
ETEINF99 DS    0H
         END_PROC
LXFREEMK DS    0XL(L'LXATINDX)
         DC    AL2(0)       LXATASID
         DC    AL2(0)       LXATBIND
         DC    AL2(0)       LXATETCT
         DC    AL1(LXATSYS) LXATFLGS
         DC    AL1(0)       LXATRSV2
*
         TITLE 'SHOWMVS &REL - Program Properties Table (PPT)'
*---------------------------------------------------------------------*
*                                                                     *
*Program Properties Table (PPT)   (requires authorization)            *
*                                                                     *
*  Addr(03DFF738)   Entries used(47)   Entries available(45)          *
*                                                                     *
*    PGMNAME(ISTINM01)    KEY(6) Nocancel Noswap SYST Pass            *
*    PGMNAME(IKTCAS00)    KEY(6) Nocancel Priv SYST                   *
*    PGMNAME(AHLGTF)      KEY(0) Nocancel Noswap SYST                 *
*                                                                     *
*---------------------------------------------------------------------*
PPT00    BEGIN_PROC KW=PPTLIST,AUTH=YES,BASEREG=NO               RS0302
         STRING '&TITLEPFX.Program Properties Table (PPT)',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         CNOP  0,4
         BRAS  R12,*+8
         DC    A(PPT241TM)
         L     R12,0(R12,0)
         USING PPT241TM,R12
         L     R5,CVTJESCT
         USING JESCT,R5
         L     R6,JESPPT               PPT ADDRESS
         USING PPT,R6
*
         MODESET EXTKEY=ZERO        <- switch to KEY=0
         LH    R0,PPTUSED              number of PPT entries used
         LH    R1,PPTENTS              number of PPT entries
         SLR   R1,R0                   number of free PPT entries
         LH    R2,PPTENTS              number of PPT entries
         LH    R3,PPTHDRLN             length of PPT header
         LH    R4,PPTENTLN             length of a PPT entry
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
         DROP  R6                      PPT
         STRING '  Address(',(JESPPT,,X),') ',                         X
               '  Entries_used(',((R0),,L),') ',                       X
               '  Entries_available(',((R1),,L),') ',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         AL    R3,JESPPT               point to first PPT entry
         USING PPTENTRY,R3
*LOOP
PPT21    SLR   R15,R15                 source key is KEY 0
         MVCK  WORK256(R4),0(R3),R15   Move PPTENTRY
         LA    R5,WORK256              copy of PPTENTRY
         USING PPTENTRY,R5
         CLI   PPTNAME,C' '            available entry?
         JNH   PPT28                   yes, ignore it
         STRING '    PGMNAME(',(PPTNAME,,T),')',INTO=LINE
         LA    R6,LINE+25              variable data
         TM    PPTBYTE1,PPTSKEY        is PPTKEY valid?
         JZ    PPT24                   no, jump
         SLR   R0,R0
         ICM   R0,B'1000',PPTKEY       KEY=F0000000
         SRL   R0,28                   KEY=0000000F
         STRING 'KEY(',((R0),,L),')',INTO=((R6),8)
         LA    R6,1(R15,R6)            variable data
PPT24    BRAS  R1,PPT242
         DC    AL1(PPTNCNCL),C'Nocancel  '
         DC     AL1(PPTNSWP),C'Noswap    '
         DC     AL1(PPTPRIV),C'Priv      '
         DC    AL1(PPTSYSTK),C'SYST      '
         DC     AL1(PPTNDSI),C'Nodsi     '                     JWMMAY95
         DC    AL1(PPTNOPAS),C'Nopass    '                     JWMMAY95
         DC    X'00',0H'0'             end of table
PPT241TM TM    PPTBYTE1,*-*            check properties
*--LOOP
PPT242   IC    R15,0(,R1)              pick up TM mask
         EX    R15,PPT241TM            test UPT switch
         JZ    PPT246                  jump if off
         STRING (1(R1),10,T),INTO=((R6),10)
         LA    R6,1(R15,R6)            bump pointer
PPT246   LA    R1,1+10(,R1)
         CLI   0(R1),0                 end of table?
         JNE   PPT242                  not yet, loop
*--ENDLOOP
PPT25    BRAS  R1,PPT252                                       JWMMAY95
         DC    AL1(PPT2LPU),C'Spref '                          JWMMAY95
         DC    AL1(PPT1LPU),C'Lpref '                          JWMMAY95
         DC    AL1(PPTN2LP),C'Nopref'                          JWMMAY95
         DC    X'00',0H'0'             end of table            JWMMAY95
PPT251TM TM    PPTPUBYT,*-*            check properties        JWMMAY95
*--LOOP
PPT252   IC    R15,0(,R1)              pick up TM mask         JWMMAY95
         EX    R15,PPT251TM            test UPT switch         JWMMAY95
         JZ    PPT256                  jump if off             JWMMAY95
         STRING (1(R1),06,T),INTO=((R6),06)                    JWMMAY95
         LA    R6,1(R15,R6)            bump pointer            JWMMAY95
PPT256   LA    R1,1+06(,R1)                                    JWMMAY95
         CLI   0(R1),0                 end of table?           JWMMAY95
         JNE   PPT252                  not yet, loop
*--ENDLOOP
         TM    PPTORIG,PPTDEFLT        PPT entry, default      JWMMAY95
         JZ    PPT271                  no                      JWMMAY95
         STRING '- Default',INTO=((R6),9)                      JWMMAY95
         J     PPT272                                          JWMMAY95
PPT271   STRING '- Parmlib',INTO=((R6),9)                      JWMMAY95
PPT272   DS    0H                                              JWMMAY95
         BRAS  R14,SPACE1          <== yes, next line
PPT28    ALR   R3,R4                   Add length of a PPT entry
         BRCT  R2,PPT21                loop thru table
*ENDLOOP
         BRAS  R14,BLANK1              BLANK LINE
PPT99    END_PROC
         TITLE 'SHOWMVS &REL - User I/O Appendages'
*---------------------------------------------------------------------*
*                                                                     *
*I/O Appendages                                                       *
*                                                                     *
*  EOE=(),SIO=(),PCI=(),CHE=(E4),ABE=(E4)                             *
*                                                                     *
*---------------------------------------------------------------------*
APP00    BEGIN_PROC KW=APPENDAGES,BASEREG=NO                     RS0302
         L     R7,CVTAIDVT             Appendage ID Vector Table
         USING APPNMTBL,R7
         STRING '&TITLEPFX.I/O Appendages:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         BRAS  R4,APP10                branch around table, set R5
         DC    C'EOESIOPCICHEABE',X'FF'
APP10    LA    R5,APPENTRY             first entry
         USING APPENTRY,R5
         MVC   LINE,BLANKS             init line
         MVI   LINE,C','               init line
*loop
APP11    STRING (LINE,,T),',',((R4),3),'=(',INTO=LINE
         LH    R2,APPCOUNT             get number of names
         LTR   R2,R2                   do we have any?
         JZ    APP17                   no, do next one
         LA    R3,APPNAMID-APPNMTBL(R7) point to APPNAMID
         AH    R3,APPOFFST             addr of 1st ID
*--loop
APP13    STRING (LINE,,T),((R3),2),',',INTO=LINE
         LA    R3,2(,R3)               next ID
         BRCT  R2,APP13                process all IDs
*--endloop
         BCTR  R15,0
APP17    LA    R15,LINE(R15)           end of line
*        CLI   0(R15),C','             change last , to )
*        JNE   APP18                   change last , to )
*        BCTR  R15,0
APP18    MVI   0(R15),C')'             change last , to )
         LA    R5,L'APPENTRY(,R5)      next entry
         LA    R4,3(,R4)               next name
         CLI   0(R4),X'FF'             5 names processed?
         JNE   APP11                   no, do next one
*endloop
         MVC   LINE(2),BLANKS          remove ,,
         BRAS  R14,SPACE2              Double Space
APP99    END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*Resource Manager List (IEAVTRML)                                     *
*                                                                     *
*---------------------------------------------------------------------*
RML00    BEGIN_PROC KW=RML,BASEREG=NO                            RS0302
         STRING '&TITLEPFX.Resource Manager List (IEAVTRML)',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R3,CVTABEND             SECONDARY CVT
         L     R4,SCVTRG2B-SCVTSECT(,R3) 2ND ENTRY POINT IN IEAVTRG2
         L     R5,12(,R4)              IEAVTRML TABLE
         CLI   0(R5),0                 Any entries?
         JE    RML80                   no, exit
*loop
RML11    EQU   *
         STRING 2X,((R5),8),1X,(8(R5),4,X),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         LA    R5,12(,R5)              POINT TO NEXT TABLE ENTRY
         CLI   0(R5),0                 END OF TABLE?
         JNE   RML11                   No, print next entry
*endloop
         J     RML98
*
RML80    STRING '  (no entries)',INTO=LINE
         BRAS  R14,SPACE1              Single Space
RML98    BRAS  R14,BLANK1              BLANK LINE
RML99    END_PROC
         TITLE 'SHOWMVS &REL - Product Enable/Disable'
***********************************************************************
*                                                                     *
*Registered Products                                                  *
*                                                                     *
*  PRODUCT OWNER(IBM CORP)                                            *
*          NAME(OS/390)                                               *
*          ID(5645-001)                                               *
*          VERSION(01) RELEASE(01) MOD(00)                            *
*          FEATURENAME(JES2)                                          *
*          FLAGS(80)                                                  *
*          INSTANCES(1)                                               *
*                                                                     *
***********************************************************************
PRED00   BEGIN_PROC KW=PRED,BASEREG=NO                           RS0302
         BRAS  R14,WORKADDR            GET ADDR OF A 32K WORK AREA
         ST    R0,WKCELL1              SAVE LENGTH
         LR    R4,R1                   SAVE ADDRESS
         USING EDAAHDR,R4
         XCALL IFAEDLIS,                                               X
               (=A(IFAEDLIS_TYPE_REGISTERED+IFAEDLIS_TYPE_STATE),      X
               =CL16'*',               PRODUCT OWNER                   X
               =CL16'*',               PRODUCT NAME                    X
               =CL16'*',               FEATURE NAME                    X
               =CL16'*',               PRODUCT ID                      X
               WKCELL1,                LENGTH OF ANSWER AREA           X
               EDAAHDR,                ANSWER AREA                     X
               WKCELL1+4)              RETURN CODE
         L     R5,EDAAHFIRSTRADDR      FIRST REGISTERED PRODUCT
         STRING '&TITLEPFX.Registered Products',INTO=LINE
         BRAS  R14,SPACE2              DOUBLE SPACE
         BRAS  R7,PRED20               EDIT ENTRIES
         L     R5,EDAAHFIRSTSADDR      FIRST UN-REGISTERED PRODUCT
         STRING '&TITLEPFX.Unregistered Products',INTO=LINE
         BRAS  R14,SPACE2              DOUBLE SPACE
         BRAS  R7,PRED20               EDIT ENTRIES
         J     PRED99                  exit
*---------------------------------------------------------------------*
*        PRINT PRODUCT DESCRIPTIONS                                   *
*---------------------------------------------------------------------*
PRED20   LTR   R5,R5                   ANY ENTRIES?
         BZR   R7                      NO, GOBACK
         USING EDAAE,R5
         STRING '  Product Owner    Name             ID       Ver ',   X
               'Rel Mod Feature-Name     Flags Instances',INTO=LINE
         BRAS  R14,SPACE2              DOUBLE SPACE
*LOOP
PRED21   STRING 2X,(EDAAEPRODOWNER),1X,                                x
               (EDAAEPRODNAME),1X,                                     x
               (EDAAEPRODID),1X,                                       x
               (EDAAEPRODVERS),2X,                                     x
               (EDAAEPRODREL),2X,                                      x
               (EDAAEPRODMOD),2X,                                      x
               (EDAAEFEATURENAME),1X,                                  x
               (EDAAEFLAGS,,X),4X,                                     x
               (EDAAENUMINSTANCES,F,L),INTO=LINE
         BRAS  R14,SPACE1              SINGLE SPACE
         ICM   R5,B'1111',EDAAENEXTADDR MORE PRODUCTS?
         JNZ   PRED21                  YES, LOOP
*ENDLOOP
         BRAS  R14,BLANK1              BLANK LINE
         BR    R7                      goback
PRED99   END_PROC
         TITLE 'SHOWMVS &REL - On-line Devices'
*---------------------------------------------------------------------*
*                                                                     *
*Device Class: TAPE                                                   *
*                                                                     *
*  Unit Names:      3490      3480      3400-5    CART      TAPE      *
*                                                                     *
*  UCBs:     32 (defined)      2 (on-line)                            *
*                                                                     *
*    CUA  UCBTYP    Unitname  Volser Status                           *
*                                                                     *
*    480  78048081  3490             Not-ready K 022917               *
*    391  78008080  3480      123456 Private J=NBQ0001B Not-ready     *
*                                                                     *
*Device Class: DASD                                                   *
*                                                                     *
*  Unit Names:      3390      3380      DISK      SYSDA               *
*                   VIO       SYSALLDA                                *
*                                                                     *
*  UCBs:    416 (defined)     65 (on-line)                            *
*                                                                     *
*    CUA  UCBTYP    Unitname  Volser  Status                          *
*                                                                     *
*    2C4  3010200E  3380K     STD008 SMS SG=STD3380  Enabled     85%  *
*    265  3010200E  3390      SYS430 Resident Private System          *
*                                                                     *
*---------------------------------------------------------------------*
DEVICES  BEGIN_PROC KW=DEVICES,BASEREG=NO                        RS0302
         L     R3,CVTDCQA              GET DCQ ADDRESS
         L     R3,DCQFIRST-DCQ(,R3)    GET FIRST DCQ ADDRESS
         USING DCQELMNT,R3             DCQ element
*loop
DEV101   DS    0H
DEV101B  MVC   UNITNAME+18(1),DCQDEVCL Device class code
         XCALL IEFEB4UV,                                               X
               (UNITNAME,              IEFEB4UV parm list              X
               =AL1(0,RETNNAME)),      return list of unit-names       X
               ERRET=DEV190            error, try next device class
         L     R4,UNITNAME+4           point to the returned work area
         ICM   R5,B'1111',4(R4)        get the number of unit-names
         JZ    DEV180                  none found, try next class
         STRING '&TITLEPFX.Device Class: ',DCQDEVNM,INTO=LINE
         BRAS  R14,SPACE2              Double Space
         LA    R6,8(,R4)               first unit name
         STRING '  Unit Names:',INTO=LINE
         J     DEV122                  first time, jump
*--loop
DEV121   LA    R1,8                    length of an entry
         LNR   R1,R1                   make it negative
         A     R1,ZSCREENW             add screen width
         LA    R0,LINE(R1)             calculate last position
         CR    R2,R0                   end of line reached yet?
         JL    DEV124                  no, jump
         BRAS  R14,SPACE1          <== yes, next line
         MVC   LINE,BLANKS             CLEAR OUT MSG AREA
DEV122   LA    R2,LINE+19              Point to beginning of line
*
DEV124   MVC   0(8,R2),0(R6)           MOVE UNITNAME TO BUFFER
         LA    R6,8(,R6)               GO TO NEXT UNIT NAMES (RETURNED)
         LA    R2,10(,R2)              Bump pointer in print line
         BRCT  R5,DEV121               next unit name
*--endloop
         BRAS  R14,SPACE2              Double Space
DEV180   L     R0,0(,R4)               get sub-pool and length
         L     R5,4(,R4)               save number of unit-names
         FREEMAIN R,A=(R4),LV=(R0)
         LTR   R5,R5                   any unit-name processed?
         JZ    DEV190                  none, try next class
*
*        Display on-line devices
*
         SLR   R2,R2                   UCB count
         SLR   R7,R7                   first time switch
*--loop
DEV201   BRAS  R14,DEV800           <- get a UCB address
         LTR   R7,R7                   EOF?
         JZ    DEV220                  yes, exit
         USING UCBOB,R7
         TM    UCBSTAT,UCBONLI         THIS UNIT ONLINE?
         JNO   DEV201                  NO, IGNORE IT
         LA    R2,1(,R2)               count on-line devices
         J     DEV201                  next UCB
*--endloop
DEV220   STRING '  UCBs:',((R4),,R7B),' (defined)',                    X
               ((R2),,R7B),' (on-line)',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         LTR   R2,R2                   any on-line devices?
         JZ    DEV190                  no, exit
*
         STRING '   DEVN  UCBTYP    Unitname S Volser  Status',        X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         SLR   R7,R7                   first time switch
*--loop
DEV221   BRAS  R14,DEV800           <- get a UCB address
         LTR   R7,R7                   EOF?
         JZ    DEV280                  yes, exit
         TM    UCBSTAT,UCBONLI         THIS UNIT ONLINE?
         JNO   DEV228                  NO, IGNORE IT
         BRAS  R14,GETUNIT             GET UNITNAME
*
DEV227   UCB_NAME RIGHT                get 4-character device number
         STRING 3X,UCB_NAME,2X,(UCBTYP,4,X),2X,UNITNAME,INTO=LINE
         TM    UCBTBYT2,UCB2OPT2       SHARED?  X'20'
         JZ    DEV227S                 No, jump
         TM    UCBTBYT3,UCB3DACC       DASD?
         JZ    DEV227S                 No, jump
         LA    R1,LINE(R15)            point at 1st space
         MVI   1(R1),C'S'              flag this device with an S
DEV227S  EQU   *
         LTR   R6,R6                   ULUT available?
         JZ    DEV228S                 no, jump
         TM    ULUEFLGS-ULUENTRY(R6),ULUEDYN  Dynamic UCB?
         JZ    DEV228S                 no, jump
         MVI   LINE+3+L'UCB_NAME,C'.'  yes, mark it with a "."
DEV228S  STRING '.UCB=',((R7),,R10Z),INTO=LINE_UCB
LINE_UCB EQU   LINE+30,15              ucbaddr in line
         BRAS  R14,SPACE1          <== next line
DEV228   J     DEV221                  Next UCB
*--endloop
DEV280   BRAS  R14,BLANK1              BLANK LINE
*
DEV190   ICM   R3,B'1111',DCQCHAIN     NEXT DCQ ELEMENT
         JNZ   DEV101                  process it
*endloop
         J     DEV999                  exit
*
*        sub-routine: get address of next UCB
*
DEV800   DS    0H
*
*        HBB4410 and up (uses ULUT)
*
DEV821   LTR   R7,R7                   first time?
         JP    DEV825                  no, jump
         L     R5,CVTIXAVL             IOCOM
         L     R5,IOCIOVTP-IOCOM(,R5)  IOS Vector Table
         L     R5,IOVTULUT-IOVT(,R5)   UCB look-up table
         USING ULUT,R5
         L     R1,ULUTUCBC             number of UCB look-up entries
         SLR   R4,R4                   UCB counter
         L     R6,ULUT1ST              first UCB look-up entry
         USING ULUENTRY,R6
*loop
DEV822   L     R7,ULUEUCBP             get ucb address
         CLC   DCQDEVCL,UCBTBYT3       right device class?
         JNE   DEV823                  no, ignore it
         LA    R4,1(,R4)               count UCB's in this class
DEV823   LA    R6,ULUENTRY+ULUELEN     next look-up entry
         BRCT  R1,DEV822               count UCBs
*endloop
         L     R6,ULUT1ST              first UCB look-up entry
         J     DEV826
*loop
DEV825   LA    R6,ULUENTRY+ULUELEN     next look-up entry
         L     R1,ULUTUCBC             number of UCB look-up entries
         MH    R1,=Y(ULUELEN)          size of ULUT
         AL    R1,ULUT1ST              change offset to address
         CLR   R1,R6                   EOF?
         JH    DEV826                  no, jump
         SLR   R7,R7                   yes, zero UCB reg
         BR    R14                     and goback
DEV826   L     R7,ULUEUCBP             get ucb address
         CLC   DCQDEVCL,UCBTBYT3       right device class?
         JNE   DEV825                  no, ignore it
*endloop
         BR    R14                     yes, return it
*
DEV999   END_PROC
         TITLE 'SHOWMVS &REL - CHPID and PATH information'       JM0799
*---------------------------------------------------------------------*
*                                                                     *
*Device - CHPID information                                           *
*                                                                     *
*  Device : 0009       Paths Installed: A1                            *
*                      Paths Inuse    : A1                            *
*  Device : 0014       Paths Installed: A1                            *
*                      Paths Inuse    : A1                            *
*  Device : 0211-021F  Paths are offline                              *
*  Device : 02E0-02FF  Paths Installed: 04 84                         *
*                      Paths Inuse    : 04 84                         *
*  Device : CCC8-CCCF  Paths Installed: 83                            *
*                      Paths Inuse    : 83                            *
*                                                                     *
*  CHPID      Type  / Description                       Device Count  *
*     01      CNC_S   ESCON SWITCHED POINT TO POINT                3  *
*     02      CNC_?   ESCON SWITCH OR POINT TO POINT              32  *
*     03      CNC_S   ESCON SWITCHED POINT TO POINT               16  *
*                                                                     *
*---------------------------------------------------------------------*
CHPID00  BEGIN_PROC KW=CHIPDS,BASEREG=YES  Getmain req           RS0302
         AIF   (NOT D'CVTH6603).CHPID99
         TM    CVTOSLV1,CVTH6603       ESA 2.3?
         JNO   CHPID99                 before ESA 5
         L     R4,=A(INFOL)            Size of storage required
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    CHPID010                yes, jump
         GETMAIN RU,LV=(R4),BNDRY=PAGE,LOC=ANY allocate work area
         J     CHPID020
CHPID010 DS    0H
         LR    R0,R4                   Length of storage
         LA    R1,1                    LOC=ANY
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES             RS1002
CHPID020 DS    0H
         LR    R6,R1                   where did we find it
         USING INFO,R6
         LR    R14,R1                  Addr of "to" area
         LR    R15,R4                  length
         STM   R14,R15,WLM_QUACF_AREA  save addr and length
         SR    R0,R0                   clear from
         SR    R1,R1                   clear length
         MVCL  R14,R0                  clear it
         STRING '&TITLEPFX.Device - CHPID information',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         MVI   PREV_UCBCHAN,C'*'       Indicate first time
         XC    WORK256,WORK256         clear work area
*loop
CHPID030 DS    0H
         LA    R7,WORK256+100          Load address of UCB
         USING UCBOB,R7
         LA    R3,WORK256+148
         USING UCBRSTEM,R3
         UCBSCAN COPY,                                                 X
               DEVCLASS=ALL,           device class                    X
               DYNAMIC=YES,            dynamic=no & dynamic=yes        X
               RANGE=ALL,              3-digit & 4-digit               X
               WORKAREA=WORK256,       100-byte work area              X
               UCBPAREA=(R3),          UCB prefix area                 X
               UCBAREA=(R7),           UCB area                        X
               MF=(E,UCBSCANL,COMPLETE)
         LR    R1,R15                  Save UCBSCAN rc
         CHI   R1,4                    end-of-ucb
         JE    CHPID040                yes
         JH    CHPID190                no
         J     CHPID050
CHPID040 DS    0H
         XC    WORK256,WORK256         Clear work area
         MVI   CHPIDEND,C'#'           IIndicate end of UCBSCAN
         J     CHPID060                Skip the checks
CHPID050 DS    0H
         MVI   PREV_PATH_VAL,C'Y'      Set it
         TM    UCBIOSF1,UCBVALPH       Paths validated?
         JZ    *+8                     Yes
         MVI   PREV_PATH_VAL,C'N'      Set it
         CLI   PREV_UCBCHAN,C'*'       First time
         JE    CHPID140                yes
*        is current CHPID info same as last CHPID info
         CLC   PREV_UCBPIM,UCBPIM      Same CHPID mask?
         JNE   CHPID060                No
         CLC   PREV_UCBCHPS,UCBCHPS    Same CHPID info?
         JNE   CHPID060                No
         CLC   PREV_PATH_VAL,SAVE_PATH_VAL All paths validated?
         JNE   CHPID060                No
*        Is the previous and current UCB consecutive
         SR    R1,R1                   clear work reg
         ICM   R1,B'0011',UCBCHAN      load current UCB number
         SR    R2,R2                   clear work reg
         ICM   R2,B'0011',SAVE_UCBCHAN load "previous" UCB number
         AL    R2,=F'1'                increment
         CR    R1,R2                   same?
         JE    CHPID150                yes
CHPID060 DS    0H
         STRING '  Device : ',(PREV_UCBCHAN,,X),INTO=LINE
         MVC   WKCELL4,=F'1'         Init device count
         CLC   SAVE_UCBCHAN,PREV_UCBCHAN  Is it a UCB range
         JE    CHPID070                No
         STRING '-',(SAVE_UCBCHAN,,X),INTO=(LINE+15,5)
         XR    R1,R1                   Clear a work reg
         ICM   R1,B'0011',PREV_UCBCHAN Load low device address
         XR    R2,R2                   Clear a work reg
         ICM   R2,B'0011',SAVE_UCBCHAN Load high device address
         SR    R2,R1                   Get device count
         LA    R2,1(,R2)               Plus one
         ST    R2,WKCELL4              Save for later
CHPID070 DS    0H
         CLC   PREV_UCBCHPS,=XL8'00'   Any paths
         JE    CHPID120                No
         STRING 'Paths Installed: ',INTO=(LINE+22,20)
         LA    R4,X'80'                Load mask
         LA    R5,PREV_UCBCHPS         Start of CHPIDs
         USING UCBCHPID,R5
*-loop
CHPID080 DS    0H
         EX    R4,CHPIDPIM             Is this CHPID installed
         JZ    CHPID090                No
         XR    R1,R1                   Clear for CHPID number
         IC    R1,UCBCHPID             Load CHPID number
         XR    R14,R14
         LA    R15,PATHTBLL            get length of one entry
         MR    R14,R1                  Times the CHPID path number
         LA    R14,PATHAREA
         ALR   R15,R14                 get the offset
         USING PATHTBL,R15
         STH   R1,PATHID               Save CHPID
         L     R1,WKCELL4              Load current count
         AL    R1,PATHCNT              Add any previous count
         ST    R1,PATHCNT              Show we found one
         DROP  R15
         STRING (LINE,,T),1X,(UCBCHPID,1,X),INTO=LINE
CHPID090 DS    0H
         LA    R5,L'UCBCHPID(,R5)      Skip this path
         SRL   R4,1                    Move mask over 1 bit
         LTR   R4,R4                   Any more
         JNZ   CHPID080
*-endloop
         BRAS  R14,SPACE1              Single Space
         STRING 22X,'Paths Inuse    : ',INTO=LINE
         LA    R4,X'80'                Load mask
         LA    R5,PREV_UCBCHPS         Start of CHPIDs
         USING UCBCHPID,R5
*-loop
CHPID100 DS    0H
         EX    R4,CHPIDLPM             Is this CHPID inuse
         JZ    CHPID110                No
         STRING (LINE,,T),1X,(UCBCHPID,1,X),INTO=LINE
CHPID110 DS    0H
         LA    R5,L'UCBCHPID(,R5)      Skip this path
         SRL   R4,1                    Move mask over 1 bit
         LTR   R4,R4                   Any more
         JNZ   CHPID100
         DROP  R5
         CLI   SAVE_PATH_VAL,C'Y'      Have paths been validated?
         JE    CHPID130                Yes
         BRAS  R14,SPACE1              Single Space
         STRING 22X,'Paths not validated',INTO=LINE
         J     CHPID130
*-endloop
CHPID120 DS    0H
         STRING 'Paths are offline',INTO=(LINE+22,18)
CHPID130 DS    0H
         BRAS  R14,SPACE1              Single Space
         J     CHPID140
*
CHPIDPIM TM    PREV_UCBPIM,*-*         Physical installed CHPID
CHPIDLPM TM    PREV_UCBLPM,*-*         Logical path mask
*
CHPID140 DS    0H
         MVC   PREV_UCBCHAN,UCBCHAN    save current UCB number
CHPID150 DS    0H
         MVC   SAVE_PATH_VAL,PREV_PATH_VAL All paths validated
         MVC   SAVE_UCBCHAN,UCBCHAN    save current UCB number
         MVC   PREV_UCBPIM,UCBPIM      Save CHPID path mask
         MVC   PREV_UCBLPM,UCBLPM      Save CHPID path mask
         MVC   PREV_UCBCHPS,UCBCHPS    Save path info
         CLI   CHPIDEND,C'#'           End of UCBSCAN
         JNE   CHPID030                No, go get next UCB
*endloop
         DROP  R3,R7
         BRAS  R14,BLANK1              Double space
         AIF   (NOT D'CVTH6603).CHPID97
*
* Display the 256 CHPIDs
*
         STRING '  CHPID      Type  / Description',21X,                X
               '  Device Count',                                       X
               INTO=LINE
         BRAS  R14,SPACE1              Single Space
         LA    R7,256                  Max number of paths
         LA    R2,PATHAREA             Saved path information
         USING PATHTBL,R2
*loop
CHPID160 DS    0H
         CLC   PATHCNT,=F'0'           valid path
         JE    CHPID180                No
*        The macro IOSCHPD will not work if the IEANUC01 module
*        IOSVCHPI is at UW34283
         IOSCHPD CHPID=PATHID,                                         X
               ACRONYM=PATHACM,                                        X
               DESC=PATHDESC,                                          X
               MF=(E,IOSCHPDL,COMPLETE)
         LTR   R1,R15                  Description returned?
         JNZ   CHPID200                 no, error
*        LR    R1,R15
*        CHI   R1,4                    Description returned
*        JL    CHPID170                Yes
*        JH    CHPID200                No, error
CHPID170 DS    0H
         STRING 5X,(PATHID+1,1,X),6X,                                  X
               PATHACM,3X,PATHDESC,7X,                                 X
               (PATHCNT,F,R),                                          X
               INTO=LINE
         BRAS  R14,SPACE1              Single Space
CHPID180 DS    0H
         LA    R2,PATHTBLL(,R2)        skip this entry
         DROP  R2
         BRCT  R7,CHPID160             loop to next path entry
         BRAS  R14,BLANK1              Double Space
*endloop
.CHPID97 ANOP
         J     CHPID210                get out of here
*
CHPID190 DS    0H
         STRING '  UCBSCAN FAILED - R0=',((R0),,X),' R15=',((R1),,X),  X
               INTO=LINE
         BRAS  R14,SPACE1              Single Space
         J     CHPID210
*
         AIF   (NOT D'CVTH6603).CHPID98
CHPID200 DS    0H
         STRING '  IOSCHPD FAILED - R0=',((R0),,X),' R15=',((R1),,X),  X
               INTO=LINE
         BRAS  R14,SPACE1              Single Space
         J     CHPID210
*
.CHPID98 ANOP
CHPID210 DS    0H
         LM    R1,R2,WLM_QUACF_AREA    load addr and length
         LTR   R1,R1                   did we do a getmain
         JZ    CHPID99                 no
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    CHPID220                yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free work area
         J     CHPID99
CHPID220 DS    0H
         LR    R0,R2                   length for FREEMAIN
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES             RS1002
         J     CHPID99
.CHPID99 ANOP
CHPID99  END_PROC
         TITLE 'SHOWMVS &REL - Channel Path Measurememt Fac.'    RS0803
*---------------------------------------------------------------------*
*                                                                     *
*Channel Path Measurement Facility (CPMF)                             *
*                                                                     *
*  Active and times of restart: 0                                     *
*                                                                     *
*  IEAOPT mode :                                                      *
*  Current mode: Extend                                               *
*                                                                     *
*  CHPID Type  Shr Grp Description                                    *
*  00    CFS   Y   01  COUPLING FACILITY SENDER                       *
*  01    CFS   Y   01  COUPLING FACILITY SENDER                       *
*  02    CFS   Y   01  COUPLING FACILITY SENDER                       *
*  03    CFS   Y   01  COUPLING FACILITY SENDER                       *
*  04    CFS   Y   01  COUPLING FACILITY SENDER                       *
*  05    CFS   Y   01  COUPLING FACILITY SENDER                       *
*  10    OSD   Y   02  OSA DIRECT EXPRESS                             *
*                      MaxBsyCyles         :      16274 ChWorkUn      *
*                      MaxWriteDataUnits   :      81920 MaxReadD      *
*                      DataUnitSize        :       1024               *
*                      TotalBsyCycleCount  : 1000232226               *
*                      TotalChWorkUnitCount:   20772036 LparChWo      *
*                      TotalWriteDataUnits :          0 LparWrit      *
*                      TotalReadDataUnits  :         77 LparRead      *
*  11    OSD   Y   02  OSA DIRECT EXPRESS                             *
*                      MaxBsyCyles         :      16274 ChWorkUn      *
*                      MaxWriteDataUnits   :      81920 MaxReadD      *
*                      DataUnitSize        :       1024               *
*                      TotalBsyCycleCount  : 1000232426               *
*                      TotalChWorkUnitCount:   36357282 LparChWo      *
*                      TotalWriteDataUnits :          0 LparWrit      *
*                      TotalReadDataUnits  :          4 LparRead      *
*  12    OSD   Y   02  OSA DIRECT EXPRESS                             *
*                      MaxBsyCyles         :      16274 ChWorkUn      *
*                      MaxWriteDataUnits   :      81920 MaxReadD      *
*                      DataUnitSize        :       1024               *
*                      TotalBsyCycleCount  : 1000342277               *
*                      TotalChWorkUnitCount:   20771364 LparChWo      *
*                      TotalWriteDataUnits :          0 LparWrit      *
*                      TotalReadDataUnits  :         78 LparRead      *
*  13    OSD   Y   02  OSA DIRECT EXPRESS                             *
*                      MaxBsyCyles         :      16274 ChWorkUn      *
*                                                                     *
*  and so on                                                          *
*                                                                     *
*---------------------------------------------------------------------*
CPMF00   BEGIN_PROC KW=CPMF,BASEREG=NO
         AIF   (NOT D'CVTH7703).CPMF99 R10 ?
         TM    HBB7703,L'HBB7703       running on OS/390 R10
         JZ    CPMF99                  no, jump
         STRING '&TITLEPFX.Channel Path Measurement Facility (CPMF)',  XO=LINE
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         L     R14,CVTOPCTP            Resource Manager Control Table
         L     R3,RMCTCMCT-RMCT(,R14)  CMCT (Channel Measurement)
         USING CMCT,R3                 tell assembly
*        #SNAP ADDR=(R3),LENGTH=CMCTLEN  debug code
         TM    CMCTFLG1,CMCTCPOK       CPMF active?
         JNZ   CPMF01                     yes, go ahead
         STRING '  Not active',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         J     CPMF99                  leave
CPMF01   DS  0H
         STRING '  Active and times of restart: ',(CMCTCRCT,F,L9B),    X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  IEAOPT mode :',INTO=LINE
         LA    R4,LINE+1(R15)
        #STATUS CMCTOPTXXMODE,CMCT_OPT_NA,'No'
        #STATUS CMCTOPTXXMODE,CMCT_OPT_COMPAT,'Compat'
        #STATUS CMCTOPTXXMODE,CMCT_OPT_EXTEND,'Extend'
         BRAS  R14,SPACE1              Double Space
         STRING '  Current mode:',INTO=LINE
         LA    R4,LINE+1(R15)
        #STATUS CMCTCPMFMODE,CMCT_CPMF_NA,'No'
        #STATUS CMCTCPMFMODE,CMCT_CPMF_COMPAT,'Compat'
        #STATUS CMCTCPMFMODE,CMCT_CPMF_EXTEND,'Extend'
         BRAS  R14,SPACE2              Double Space
         ICM   R4,B'1111',CMCTCMC2      CPCB
         JNZ   CPMF02
         STRING '  No more info as CMCTCMC2 is zero',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         J     CPMF99                  leave
CPMF02   DS     0H
         STRING '  CHPID Type  Shr Grp Description',INTO=LINE
         BRAS  R14,SPACE1               Single Space
         USING CMC2,R4                  Tell assembly
         L     R5,CMCTCPM2              CPMB
         USING CPM2,R5                  Tell assembly
         LHI   R7,256                   256 channels
CPMF03   DS     0H
         TM    CMC2FLAGS,CMC2NOTVALID   Path valid?
         JO    CPMF06                     no, ignore
         IC    R0,CMC2CHPID
         STH   R0,WKCELL1               convert to halfword
         IOSCHPD CHPID=WKCELL1,         Get type and desc of this      X
               ACRONYM=WKCELL3,         Chpid                          X
               DESC=WORK256,                                           X
               MF=(E,WORK256+50,COMPLETE)
         MVI   WKCELL2,C'Y'             Default shared
         TM    CMC2FLAGS,CMC2SHAREDCHPID  Is this path shared?
         JO    *+4+4                    Yes, leave default
         MVI   WKCELL2,C'N'
         STRING 2X,(CMC2CHPID,1,X),4X,(WKCELL3,5),1X,(WKCELL2,1),3X,   X
               (CMC2CMG,1,X),2X,(WORK256,32),INTO=LINE
         BRAS  R14,SPACE1               Single Space
*        #SNAP ADDR=(R4),LENGTH=32      debug code
         CLI   CMC2CMG,CMCCMG1          Group 1 ?
         JNE   CPMF04                     no, check Group 2
*        Interpreting Group 1 data makes no sense on my system
         USING CPM2CMG1,R6
         J     CPMF05
CPMF04   DS     0H
         CLI   CMC2CMG,CMCCMG2          Group 2 ?
         JNE   CPMF05                     no, check Group 3
         LA    R6,CMC2DATA              Channel characteristics
         USING CMC2CMG2,R6
         STRING 22X,'MaxBsyCyles         : ',                          X
               (CMC2MAXBUSCYCLES,F,R10B),1X,                           X
               'ChWorkUnits        : ',                                X
               (CMC2MAXCHANNELWORKUNITS,F,R10B),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         STRING 22X,'MaxWriteDataUnits   : ',                          X
               (CMC2MAXWRITEDATAUNITS,F,R10B),1X,                      X
               'MaxReadDataUnits   : ',                                X
               (CMC2MAXREADDATAUNITS,F,R10B),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         STRING 22X,'DataUnitSize        : ',                          X
               (CMC2DATAUNITSIZE,F,R10B),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         DROP  R6
         LA    R6,CPM2DATA
         USING CPM2CMG2,R6
         STRING 22X,'TotalBsyCycleCount  : ',                          X
               (CMG2TOTALBUSCYCLECOUNT,F,R10B),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         STRING 22X,'TotalChWorkUnitCount: ',                          X
               (CMG2TOTALCHANNELWORKUNITCOUNT,F,R10B),1X,              X
               'LparChWorkUnitCount: ',                                X
               (CMG2LPARCHANNELWORKUNITCOUNT,F,R10B),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         STRING 22X,'TotalWriteDataUnits : ',                          X
               (CMG2TOTALWRITEDATAUNITS,F,R10B),1X,                    X
               'LparWriteDataUnits : ',                                X
               (CMG2LPARWRITEDATAUNITS,F,R10B),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         STRING 22X,'TotalReadDataUnits  : ',                          X
               (CMG2TOTALREADDATAUNITS,F,R10B),1X,                     X
               'LparReadDataUnits  : ',                                X
               (CMG2LPARREADDATAUNITS,F,R10B),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         J     CPMF05
CPMF05   DS     0H
         AIF   (NOT D'CVTH7705).CPMF06   z/OS R2
         TM    HBB7705,L'HBB7705       running on z/OS R2
         JZ    CPMF06                  no, jump
         CLI   CMC2CMG,CMCCMG3          Group 3 ?
         JNE   CPMF06                     no, invalid group
*        Interpreting Group 3 I don't have any group 3 on my system
         LA    R6,CMC2DATA
         USING CMC2CMG3,R6
         STRING 22X,'DataUnitSize        : ',                          X
               (CMC3DATAUNITSIZE,F,R10B),1X,                           X
               'DataUnitSizeCPC    : ',                                X
               (CMC3DATAUNITSIZECPC,F,R10B),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         STRING 22X,'MessageUnitSize     : ',                          X
               (CMC3MESSAGEUNITSIZE,F,R10B),1X,                        X
               'MessageUnitSizeCPC : ',                                X
               (CMC3MESSAGEUNITSIZECPC,F,R10B),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         DROP  R6
         LA    R6,CPM2DATA
         USING CPM2CMG3,R6
         STRING 22X,'MessageUnitsSent    : ',                          X
               (CMG3MESSAGEUNITSSENT,F,R10B),1X,                       X
               'MessageUnitsSentCPC: ',                                X
               (CMG3MESSAGEUNITSSENTCPC,F,R10B),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         STRING 22X,'UnsuccAttemptsToSend: ',                          X
               (CMG3UNSUCCATTEMPTSTOSEND,F,R10B),1X,INTO=LINE
         BRAS  R14,SPACE1              Single Space
         STRING 22X,'UnavailRecvBuffer   : ',                          X
               (CMG3UNAVAILRECEIVEBUFFERS,F,R10B),1X,                  X
               'UnavailRecvBuffCPC : ',                                X
               (CMG3UNAVAILRECEIVEBUFFERSCPC,F,R10B),INTO=LINE
         BRAS  R14,SPACE1              Single Space
         STRING 22X,'DataUnitsSend       : ',                          X
               (CMG3DATAUNITSSENT,F,R10B),1X,                          X
               'DataUnitsSendCPC   : ',                                X
               (CMG3DATAUNITSSENTCPC,F,R10B),1X,INTO=LINE
         BRAS  R14,SPACE1              Single Space
.CPMF06  ANOP
CPMF06   DS     0H
         LA    R4,L'CMC2CHANMEASUREMENTCHARBLOCK(,R4) next CMC2
         LA    R5,L'CPM2CHANNELUTILIZATIONENTRY(,R5)  next CPM2
         BRCT  R7,CPMF03
*endloop
.CPMF99  ANOP
CPMF99   END_PROC
         TITLE 'SHOWMVS &REL - System Consoles (MCS)'
*---------------------------------------------------------------------*
*                                                                     *
*Consoles:                                                            *
*                                                                     *
*  LOG Class: L     LOG Limit: 999999     CSCBLOC=Below               *
*  RMAX: 99         CONSOL00      PFKTAB00      LOGON: Optional       *
*                                                                     *
*    ID   Name      Device   Status    Route Codes                    *
*    1    SYS1MAST  0040     Active    1,2,3,4,5,6,7,8,9,10,12,13,14  *
*    2    SYS2ALT   0041     Inactive                                 *
*    3    03        JES      Inactive                                 *
*    4    SYS2MAST  Sysplex  Inactive                                 *
*                                                                     *
* Message Processing Facility (MPF) entries                           *
*                                                                     *
*   Message id  MPF  Suppress  Retain  Auto  Token    Exit            *
*   .NO_ENTRY   00   No        Yes     No                             *
*   $ACF07902I  00   Yes       No      No                             *
*   IEF176I     00   No        No      No             WTOE176I        *
*   WER*        00   Yes       No      No                             *
*                                                                     *
* General wto user exit (IEAVMXIT) - active                           *
*                                                                     *
* Color Parameters and Attributes                                     *
*                                                                     *
*   Msg Type  MPF  Color   Hilight  Intensity                         *
*   URGATTN   DFL  RED     NONE     HIGH                              *
*   IMEDACTN  DFL  WHITE   NONE     HIGH                              *
*   OOLDATA   DFL  GREEN   NONE     NORM                              *
*                                                                     *
*---------------------------------------------------------------------*
CONSOLES BEGIN_PROC KW=CONSOLES,BASEREG=NO                       RS0302
         STRING '&TITLEPFX.Consoles:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
*        LOG Class: L    LOG Limit: 999999     CSCB=ABOVE
*
CONSOL10 L     R4,CVTMSER              Master Sched Res Data Area
         USING BASE,R4                 IEEBASEA
         STRING '  LOG Class: ',MSLOGCLS,                              X
               '     LOG Limit: ',(MSLOGLMT,FL3,L9),                   X
               INTO=LINE
         LA    R2,LINE(R15)            end of text
         STRING '     CSCBLOC=','BELOW',INTO=((R2),30)
         TM    BACHFLGS,BACSCBA        CSCB=ABOVE?
         JZ    CONSOL15                no, jump
         STRING '     CSCBLOC=','ABOVE',INTO=((R2),30)
CONSOL15 BRAS  R14,SPACE2              Double Space
*
         L    R4,CVTCUCB               Unit Control Module (UCM)
         USING UCM,R4
*
         L     R5,UCMBFEXT                                     JWMJUN95
         USING UCMFEXTA,R5                                     JWMJUN95
         LA    R1,=C'Optional'                                 JWMNOV96
         TM    UCMFMISC,UCMFLOGR+UCMFLOGA Logon Optional       JWMNOV96
         JZ    *+20                    Yes                     JWMNOV96
         LA    R1,=C'Required'         Default required        JWMNOV96
         TM    UCMFMISC,UCMFLOGR       Logon Required          JWMNOV96
         JO    *+8                     Yes                     JWMNOV96
         LA    R1,=C'Auto    '         Logon Auto              JWMNOV96
         L     R5,UCMFPPTR                                     JWMJUN95
         USING UCMPEXTA,R5                                     JWMJUN95
         STRING '  RMAX: ',(UCMRMAX,F,L0),9X,                  JWMJUN95X
               'CONSOL',UCMPCNXX,6X,                           JWMJUN95X
               'PFKTAB',UCMPPFKM,6X,                           JWMNOV96X
               'LOGON: ',((R1),8),                             JWMNOV96X
               INTO=LINE                                       JWMJUN95
         BRAS  R14,SPACE2                                      JWMJUN95
         L     R5,UCMVDATA             1st UCME
         USING UCMLIST,R5              Individual device entry
*                    1234 12345678  1234567  12345678  123456789012345
         STRING '    ID   Name      Device   Status    Route Codes',   X
               INTO=LINE
         BRAS  R14,SPACE1
*loop
CONS210  STRING (UCMID,FL1,L),INTO=WKCELL1 console ID
         L     R6,UCMFEXTP             addr of fixed extension
         USING UCMEFEXT,R6
         MVC   WKCELL2,BLANKS          NO NAME
         MVC   WKCELL2,UCMEFCNM        name=IPO1MAST
         MVC   WKCELL3,=C'Sysplex '    device=sysplex
         MVC   WKCELL4,=C'Inactive'    status=inact
         ICM   R7,B'1111',UCMUCB       associated UCB
         JZ    CONS220                 noUCB, must be SYSPLEX
         USING UCBOB,R7
         UCB_NAME LEFT,JES=YES         get 4-character device number
         STRING UCB_NAME,INTO=WKCELL3  device=041
CONS220  MVC   NEXTLINE,BLANKS         clear route codes
         TM    UCMATR,UCMUF            This console active?
         JZ    CONS270                 no, jump
         STRING 'Active',INTO=WKCELL4  status=active
         CLI   UCMEFRC,X'FF'           Routcde=ALL ?
         JNE   CONS240                 no, jump
         CLC   UCMEFRC+1(L'UCMEFRC-1),UCMEFRC
         JNE   CONS240                 no, jump
         STRING 'All',INTO=NEXTLINE    Routcde=all
         J     CONS270                 next UCM
CONS240  EQU   *
         LA    R0,L'UCMEFRC            BYTE LOOP
         LA    R1,1                    Route code (1-255)
         LA    R2,UCMEFRC              Routcde bit string
         BRAS  R14,BITSTR              edit bit string
*
CONS270  STRING 4X,(WKCELL1,5),        console id                      X
               WKCELL2,2X,             name                            X
               WKCELL3,1X,             device                          X
               WKCELL4,2X,             status                          X
               NEXTLINE,               route-codes                     X
               INTO=LINE
CONS280  BRAS  R14,SPACE1          <== next line
         LM    R14,R15,UCMVDATA+4      length(UCME) Last(UCME)
         BRXLE R5,R14,CONS210
*endloop
         BRAS  R14,BLANK1              BLANK LINE
*
*        MPF Table (ESA 4.1 and above)
*
.CONS400 ANOP
CONS400  L     R7,UCMBFEXT             Addr of Fixed Extension Base
         USING UCMFEXTA,R7
         ICM   R7,B'1111',UCMFMPFP     Addr of MPF Table
         JZ    CONS450                 Zero, No MPF table
         USING MPFT,R7
         SR    R1,R1
         ICM   R1,B'0111',MPFTSIZE     Size of MPF table
         JZ    CONS450                 Zero, no MPF table
         CLI   MPFTVRSN,MPFTS212       version 1 ?
         JE    CONS455                 yes, ignore
         STRING '  Message Processing Facility (MPF) entries',INTO=LINE
         BRAS  R14,SPACE2
         STRING '    Message id  MPF  Suppress  Retain  Auto  Token',  X
               '    Exit',INTO=LINE
         BRAS  R14,SPACE1
         LA    R6,MPFTSENP             Address of first specific entry
         LH    R0,MPFTNENS             Number of entries
         BRAS  R1,CONS440              Format the generic entries
         LA    R6,MPFTGENP             Address of first generic entry
         LH    R0,MPFTNENG             Number of entries
         BRAS  R1,CONS440              Format the generic entries
         J     CONS460
*
*        Sub-routine
*
CONS440  DS    0H
         LTR   R0,R0                   Number of entries
         BZR   R1                      Zero, exit
         ICM   R6,B'1111',0(R6)        Address of first entry
         BZR   R1                      Zero, exit
         USING MPFTENTY,R6
*loop
CONS441  DS    0H
*        Suppress message
         LA    R2,=C'Yes'              Suppress(yes)
         TM    MPFTEFLG,MPFSUPMS       Suppress message
         JO    *+8                     Yes, branch
         LA    R2,=C'No '              Suppress(no)
         TM    MPFTEFLG,MPFSUPA        Suppress All message
         JZ    *+8                     No, branch
         LA    R2,=C'All'              Suppress(all)
*        Retain message
         LA    R3,=C'Yes'              Retain(tes)
         TM    MPFTEFLG,MPFRETAN       Retain message
         JO    *+8                     Yes, branch
         LA    R3,=C'No '              Retain(no)
*        Automate message
         LA    R4,=C'Yes'              Auto(yes)
         TM    MPFTEFLG,MPFAUTO        Automation specified
         JO    *+8                     Yes, branch
         LA    R4,=C'No '              Auto(no)
*        format the message id
         MVC   WORK256(L'MPFMSGID),MPFMSGID move msgid to work area
         TM    MPFTEFLG,MPFTPREF          Generic message id
         JZ    CONS444                    No, branch
         LA    R5,WORK256                 Start of work area
         SR    R15,R15                    Clear work reg
         IC    R15,MPFTIDLN               Length of message id
         ALR   R5,R15                     Skip over
         MVI   0(R5),C'*'                 Indicate prefix msg
CONS444  DS    0H
         LA    R5,BLANKS                  default to blanks
         CLC   MPFEXNME,BLANKS            any exit here
         JE    CONS446                    no
         TM    MPFTEFLG,MPFXACTV          active
         JO    CONS446                    yes
         LA    R5,=C'abended  '           exit abended
         TM    MPFTEFLG,MPFABEND          abended
         JO    CONS446                    yes
         LA    R5,=C'not found'           exit not found
CONS446  DS    0H
         STRING 4X,(WORK256,L'MPFMSGID),  msgid                        X
               2X,MPFSUFFX,               MPF id                       X
               3X,((R2),3),               Suppress                     X
               7X,((R3),3),               Retain                       X
               5X,((R4),3),               Auto                         X
               3X,MPFAUTOT,               token                        X
               1X,MPFEXNME,               exit name                    X
               1X,((R5),9),               exit status                  X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRAS  R14,SPACE1              Single space
         AH    R6,MPFTENLN             Skip this entry
         BRCT  R0,CONS441              Repeat for next entry
*endloop
         BR    R1                      Return
*
CLRATTRT DS    0CL126                 Attribute table
         DC    CL8'URGATTN '
         DC    AL1(7)
         DC    CL8'IMEDACTN'
         DC    AL1(8)
         DC    CL8'EVETACTN'
         DC    AL1(8)
         DC    CL8'GENMSG  '
         DC    AL1(6)
         DC    CL8'PPMSG   '
         DC    AL1(5)
         DC    CL8'SELPEN  '
         DC    AL1(6)
         DC    CL8'INSTRERR'
         DC    AL1(8)
         DC    CL8'ENTRYARA'
         DC    AL1(8)
         DC    CL8'WARNLGEN'
         DC    AL1(8)
         DC    CL8'WARNRGEN'
         DC    AL1(8)
         DC    CL8'WARNRURG'
         DC    AL1(8)
         DC    CL8'OOLCNTL '
         DC    AL1(7)
         DC    CL8'OOLLABEL'
         DC    AL1(8)
         DC    CL8'OOLDATA '
         DC    AL1(7)
CLRATTR# EQU   (*-CLRATTRT)/9
*
CLRCOLRT DS    0CL49                  Color of message
         DC    CL6'BLUE  '
         DC    X'F1'
         DC    CL6'RED   '
         DC    X'F2'
         DC    CL6'PINK  '
         DC    X'F3'
         DC    CL6'GREEN '
         DC    X'F4'
         DC    CL6'TURQU '
         DC    X'F5'
         DC    CL6'YELLOW'
         DC    X'F6'
         DC    CL6'WHITE '
         DC    X'F7'
CLRCOLR# EQU   (*-CLRCOLRT)/7
*
CLRLITET DS    0CL28                 Highlight Table
         DC    CL6'NONE  '
         DC    X'00'
         DC    CL6'BLINK '
         DC    X'F1'
         DC    CL6'RE-VID'
         DC    X'F2'
         DC    CL6'UNDSCR'
         DC    X'F4'
CLRHIGH# EQU   (*-CLRLITET)/7
*
CLRINTT  DS    0CL10                 Intensity
         DC    CL4'NORM'
         DC    X'E4'
         DC    CL4'HIGH'
         DC    X'E8'
CLRINTT# EQU   (*-CLRINTT)/5
*
CONS450  DS    0H
         STRING ' MPF is inactive',INTO=LINE
         BRAS  R14,SPACE1
         J     CONS460                 continue
*
CONS455  DS    0H
         STRING ' Unsupported MPF Table Format',INTO=LINE
         BRAS  R14,SPACE1
*
*        IEAVMXIT Status
*
CONS460  DS    0H
         BRAS  R14,BLANK1              Leave a blank line
         STRING '  Number of specific entries: ',(MPFTNENS,H,L),       X
               INTO=LINE                                         JM0302
         BRAS  R14,SPACE1             Single space               JM0302
         STRING '  Number of generic entries: ',(MPFTNENG,H,L),        X
               INTO=LINE                                         JM0302
         BRAS  R14,SPACE2             Double space               JM0302
         L     R4,CVTCUCB              Unit Control Module (UCM)
         USING UCM,R4
         L     R7,UCMBFEXT             Addr of Fixed Extension Base
         USING UCMFEXTA,R7
         LA    R1,=C'Inactive'
         ICM   R6,B'1111',UCMGENXP     General wto user exit table
         JZ    CONS462                 No, branch
         USING GENX,R6
         LA    R1,=C'Active  '
         TM    GENXFLGS,GENXACTV      Is it active
         JO    CONS462                Yes, branch
         LA    R1,=C'abended  '
CONS462  STRING '  General wto user exit (IEAVMXIT) - ',((R1),8),      X
               INTO=LINE
         BRAS  R14,SPACE2             Double space
*
*        Color Parameters and Attributes
*
         L     R6,UCMFCLRA            Load color/highlighting          X
                                      attribute table
         USING CLRATT,R6
         STRING '  Color Parameters and Attributes',INTO=LINE
         BRAS  R14,SPACE2             Double space
         STRING '    Msg Type  MPF  Color   Hilight  Intensity',       X
               INTO=LINE
         BRAS  R14,SPACE1
         LA    R1,CLRATTRS            First set of Attributes
*        LA    R2,CLRATTRT             option table
         BASR  R2,0                    Next instr.               RS0402
         AHI   R2,CLRATTRT-*                                     RS0402
         LA    R0,CLRATTR#            number of entries
*loop
CONS470  DS    0H
*        LA    R3,CLRCOLRT            Start of color table
         BASR  R3,0                    Next instr.               RS0402
         AHI   R3,CLRCOLRT-*                                     RS0402
         LA    R7,CLRCOLR#            number of entries
*-loop
CONS472  CLC   0(1,R1),6(R3)          Is this the color
         JE    CONS474                yes
         LA    R3,7(,R3)              skip the entry
         BRCT  R7,CONS472             repeat for next color
         LA    R3,=C'********'        oops
*-endloop
*ONS474  LA    R4,CLRLITET            Start of hightlight table
CONS474  BASR  R4,0                    Next instr.               RS0402
         AHI   R4,CLRLITET-*                                     RS0402
         LA    R7,CLRHIGH#            number of entries
*-loop
CONS476  CLC   1(1,R1),6(R4)          Is this the highlight
         JE    CONS478                yes
         LA    R4,7(,R4)              skip the entry
         BRCT  R7,CONS476             repeat to next highlight
         LA    R4,=C'********'        oops
*-endloop
*ONS478  LA    R5,CLRINTT             Start of intensity table
CONS478  BASR  R5,0                    Next instr.               RS0402
         AHI   R5,CLRINTT-*                                      RS0402
         LA    R7,CLRINTT#            number of entries
*-loop
CONS480  CLC   2(1,R1),4(R5)          Is this the intensity
         JE    CONS482                yes
         LA    R5,5(,R5)              skip the entry
         BRCT  R7,CONS480             repeat to next intensity
         LA    R5,=C'********'        oops
*-endloop
CONS482  STRING 4X,                                                    X
               ((R2),8),2X,           type                             X
               (3(R1),3),2X,          mpf member                       X
               ((R3),6),2X,           color                            X
               ((R4),6),3X,           hilight                          X
               ((R5),4),              intersity                        X
               INTO=LINE
         BRAS  R14,SPACE1
         LA    R2,9(,R2)              Next attribute
         LA    R1,6(,R1)              Next set of attributes
         BRCT  R0,CONS470
*endloop
         BRAS  R14,BLANK1              BLANK LINE
*
         AIF   (NOT D'CVTJ6607).CONSO999                         RS0301
         TM    JBB6607,L'JBB6607       OS/390 R6?                RS0301
         JNO   CONSO999                 No, jump                 RS0301
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?          RS0301
         JNO   CONSO999                no, jump                  RS0301
         STRING '  EMCS-','Consoles:',INTO=LINE                  RS0301
         BRAS  R14,SPACE2                                        RS0301
         BRAS  R14,WORKADDR            32K work area
         LR    R3,R1                   length is zero, for now     +RS
         LHI   R2,2048                 allocate a page           RS0301
         ST    R2,WKCELL1+4            save length               RS0301
         ST    R3,WKCELL1              save Buffer-Pointer       RS0301
         XC    WKCELL2,WKCELL2         clear                     RS0301
         LA    R0,WKCELL2              Rec-Size                  RS0301
         ST    R0,WKCELL2+4            Save Rec-Size-Pointer     RS0301
         XC    WKCELL3,WKCELL3         clear token               RS0301
         LA    R0,WKCELL3              Token                     RS0301
         ST    R0,WKCELL4              Save Token-Pointer        RS0301
         STRING '    Console  St Key      System   RT Dom Level Auth', X
               ' Term     JobName   Routing',INTO=LINE           RS0301
         BRAS  R14,SPACE1              Single Space              RS0301
*Loop                                                            RS0301
CONS500  DS  0H                                                  RS0301
         MODESET EXTKEY=ZERO        <- switch to KEY=0           RS0301
         IEEQEMCS REQUEST=INFO,STATUS=ALL,BUFPTR=WKCELL1,              X
               BUFSIZE=WKCELL1+4,RECSIZE=WKCELL2+4,TOKEN=WKCELL4,      X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,WORK256)  RS0301
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
         USING ECDM_HDR,R3             The header Csect          RS0301
         LH    R7,ECDM_NENT           number of EMCS consoles    RS0301
         LTR   R7,R7                 Is it zero ?                RS0301
         JZ    CONS998                   yes, leave              RS0301
         LA    R4,ECDM_HDR_LEN(R3)     point to ECDM_SUMM        RS0301
         USING ECDM_SUMM,R4                                      RS0301
         LA    R5,ECDM_SUMM_LEN(R4)    point to ECDM_INFO        RS0301
         USING ECDM_INFO,R5                                      RS0301
*#SNAP ADDR=(R3),LENGTH=1024                             RS0301
*  loop                                                          RS0301
CONS520   DS 0H                                                  RS0301
*        #SNAP ADDR=(R4),LENGTH=24                               RS0301
*        #SNAP ADDR=(R5),LENGTH=104                              RS0301
         STRING 4X,ECDM_SUMM_NAME,1X,(ECDM_INFO_STFLG,,X),1X,          X
               ECDM_INFO_KEY,1X,ECDM_INFO_SYSNM,1X,                    X
               (ECDM_INFO_RTFLG,,X),1X,(ECDM_INFO_DOM,,X),2X,          X
               (ECDM_INFO_MLVL,,X),4X,                                 X
               (ECDM_INFO_AUTH,,X),3X,ECDM_INFO_TERM,1X,               X
               ECDM_INFO_JOBNM,INTO=LINE                         RS0301
         CLI   ECDM_INFO_ROUT,X'FF'    Routcode=ALL ?            RS0301
         JNE   CONS525                 no, jump                  RS0301
         CLC   ECDM_INFO_ROUT+1(L'ECDM_INFO_ROUT-1),ECDM_INFO_ROUT
         JNE   CONS525                 no, jump                  RS0301
         STRING 'All',INTO=NEXTLINE    Routcode=All              RS0301
         J     CONS527                                           RS0301
CONS525  EQU   *                                                 RS0301
         CLI   ECDM_INFO_ROUT,X'00'    Routcode=NONE ?           RS0301
         JNE   CONS526                 no, jump                  RS0301
         CLC   ECDM_INFO_ROUT+1(L'ECDM_INFO_ROUT-1),ECDM_INFO_ROUT
         JNE   CONS526                 no, jump
         STRING 'None',INTO=NEXTLINE    Routcode=None            RS0301
         J     CONS527                                           RS0301
CONS526  EQU   *                                                 RS0301
         LA    R0,L'ECDM_INFO_ROUT     BYTE LOOP                 RS0301
         LA    R1,1                    Route code (1-255)        RS0301
         LA    R2,ECDM_INFO_ROUT       Routcde bit string        RS0301
         BRAS  R14,BITSTR              edit bit string           RS0301
*                                                                RS0301
CONS527  STRING (LINE,71),(NEXTLINE,,T),INTO=LINE                RS0301
         TR    LINE,TRTPRINT           X'00' -> X'40'            RS0301
         BRAS  R14,SPACE1              Single Space              RS0301
         ICM   R6,B'1111',ECDM_SUMM_CONS_SIZE returned length    RS0301
         AR    R4,R6                   point to next EMCS-entry  RS0301
         AR    R5,R6                   point to next EMCS-entry  RS0301
         BRCT  R7,CONS520              do until                  RS0301
*  endloop                                                       RS0301
         LA    R14,IEEQE_RC_OK         Check RetCode 0           RS0301
         C     R14,LRETCODE                                      RS0301
         JE    CONS580                  Yes, leave               RS0301
         LA    R14,IEEQE_RC_NOSTOR     Check RetCode 4           RS0301
         C     R14,LRETCODE                                      RS0301
         JNE   CONS540                  not 4, report bad RC/RSN RS0301
         LA    R14,IEEQE_RS_TOKSZCONS  Check RsnCode 4           RS0301
         C     R14,LRSNCODE              yes, repeat the call to RS0301
         JE    CONS500                   get next entries        RS0301
*endloop                                                         RS0301
CONS540  DS   0H                                                 RS0301
         STRING '    EMCS',9X,'RC: ',(LRETCODE,,X),                    X
               ' RSN: ',(LRSNCODE,,X),INTO=LINE                  RS0301
         BRAS  R14,SPACE1              Single Space              RS0301
         J     CONS998                                           RS0301
CONS580  DS   0H                                                 RS0301
         BRAS  R14,BLANK1              Empty Line                RS0301
         STRING '    St  : 00-Inactive 40-Pending 80-Active',INTO=LINE
         BRAS  R14,SPACE1              Single Space              RS0301
         STRING '    Rt  : 01-NoMscope 02-MScope=*ALL 04-MonSess',     X
               INTO=LINE                                         RS0301
         BRAS  R14,SPACE1              Single Space              RS0301
         STRING '          08-MonStatus 10-MonJobName 20-Auto 40-HC',  X
               ' 80-UD',INTO=LINE                                RS0301
         BRAS  R14,SPACE1              Single Space              RS0301
         STRING '    Dom : 20-None 40-Normal 80-All',INTO=LINE   RS0301
         BRAS  R14,SPACE1              Single Space              RS0301
         STRING '    Lvl : 04-Broadcast 08-Info 10-Eventual 20-Criti', X
               'cal 40-Immediate 80-WTOR',INTO=LINE              RS0301
         BRAS  R14,SPACE1              Single Space              RS0301
         STRING '    Auth: 10-Master 20-Cons 40-IO 80-Sys',            X
               INTO=LINE                                         RS0301
         BRAS  R14,SPACE2              Double Space              RS0301
CONS998  DS   0H                                                 RS0301
.CONSO999 ANOP                                                   RS0301
CONSO999 END_PROC
         TITLE 'SHOWMVS &REL - Command Prefix Table (CPF)'         RS
*----------------------------------------------------------------------
*                                                                  @RS
*COmmand Prefix Table:                                             @RS
*                                                                  @RS
*  Prefix   Owner    System   Scope   Remove  Faildisp             @RS
*                                                                  @RS
*  $        JES2     AL10     System  NO      PURGE                @RS
*  RACF     RACF     AL10     Sysplex YES     SYSPRUGE             @RS
*                                                                  @RS
*----------------------------------------------------------------------
CPFTAB00 BEGIN_PROC KW=CPF,BASEREG=NO                            RS0302
         STRING '&TITLEPFX.Command Prefix Table:',INTO=LINE        @RS
         BRAS  R14,SPACE2              BLANK LINE                  @RS
*                                                                  @RS
*                Prefix   Owner    System  Scope   Remove Faildisp @RS
*                                                                  @RS
         STRING '  Prefix   Owner    System  Scope   Remove Faildisp', X
               INTO=LINE                                           @RS
         BRAS  R14,SPACE2              BLANK LINE                  @RS
         L     R4,CVTCUCB              Unit Control Module (UCM)   @RS
         USING UCM,R4                                              @RS
         L     R5,UCMBFEXT             UCM fixed extension         @RS
         USING UCMFEXTA,R5             tell assembly               @RS
         L     R6,UCMCPFTA             CPF-Table                   @RS
         USING CPFT,R6                 tell assembly               @RS
         L     R7,CPFTNUME             number of entries           @RS
         LTR   R7,R7                   counter = 0                 @RS
         JZ    CPFTAB99                yes, no entries  jump       @RS
         A     R6,CPFT1ST              point to first entry        @RS
         USING CPFT_ENTRY,R6           tell assembly               @RS
*loop                                                              @RS
CPFTAB20 DS    0H                                                  @RS
         STRING 2X,CPFTPRFX,1X,CPFTOWNR,1X,CPFTSYS,                    X
               INTO=LINE                                           @RS
         LA    R4,LINE+28              Scope                       @RS
         MVC   0(6,R4),=C'System  '    Default                     @RS
        #STATUS CPFTFLGS,CPFTSCOP,'Sysplex'                        @RS
         LA    R4,LINE+36              Scope                       @RS
         MVC   0(3,R4),=C'No '         Default                     @RS
        #STATUS CPFTFLGS,CPFTREMV,'Yes'                            @RS
         LA    R4,LINE+43              Scope                       @RS
         MVC   0(5,R4),=C'Purge'       Default                     @RS
        #STATUS CPFTFLGS,CPFTFDP1,'Syspurge'                       @RS
         BRAS  R14,SPACE1              print                       @RS
         LA    R6,CPFT_ENTRY_LENGTH(R6)  next entry                @RS
         BRCT  R7,CPFTAB20             do until count = 0          @RS
*endloop                                                           @RS
         BRAS  R14,BLANK1              blank line                  @RS
.CPFTAB99 ANOP                                                     @RS
CPFTAB99 END_PROC                                                  @RS
         TITLE 'SHOWMVS &REL - Name/Token (NTT)          '         $RS
*----------------------------------------------------------------------
*                                                                  $RS
*  Name/Token Table:                                               $RS
*                                                                  $RS
*    Name            Token (char)      Token (hex)                 $RS
*    DSNLOGREC           &             020D5650 02000048 00000000  $RS
*     Logrec dataset: SYS1.ALS3.LOGREC or                          $DL
*     Logstream name: SYSPLEX.LOGREC.ALLRECS                       $DL
*    DSNDB2P                Q           0E038ED8 40404040 40404040 $DL
*     Subsystem name: DB2P                                         $DL
*     Member(s)     : DP01 DP02                                    $DL
*    IBMJESXCFAS                       0A206578 00000000 00000000  $RS
*    BBM6CSCAMVCT      d               09843F80 00000000 00000000  $RS
*    TCPIPAOE 6                        099B2040 00000000 00000000  $RS
*----------------------------------------------------------------------
NTTAB00  BEGIN_PROC KW=NTT,BASEREG=NO                            RS0302
         L     R3,CVTECVT              Load addr of ECVT           $RS
         ICM   R4,B'1111',ECVTNTTP-ECVT(R3)   Name/Token
         JZ    NTTAB49                 yes, no entries  jump       $RS
         USING NTTH,R4                                             $RS
         CNOP  0,4
         BRAS  R12,*+8
         DC    A(IFBNT_DSNLOGREC)
         L     R12,0(R12,0)
         USING IFBNT_DSNLOGREC,R12
         STRING '&TITLEPFX.Name/Token Table ','(SYSTEM)',INTO=LINE
         BRAS  R14,SPACE2              BLANK LINE                  $RS
         STRING '    Name',13X,'Token (char)     Token (hex)',         X
               23X,'ASID',INTO=LINE                                $RS
         BRAS  R14,SPACE1              BLANK LINE                  $RS
         ICM   R5,B'1111',NTTHNTTF     First NTTE                  $RS
         JZ    NTTAB49                 yes, no entries  jump       $RS
         USING NTTE,R5                                             $RS
*loop                                                              $RS
NTTAB20  DS    0H                                                  $RS
         STRING 4X,NTTENAME,           name (char)                     X
               1X,NTTETOKN,            token (char)                    X
               1X,(NTTETOKN,8,X),      token (hex)                     X
               1X,(NTTETOKN+8,8,X),    token (hex)                     X
               1X,(NTTEASID,2,X),      ASID                            X
               INTO=LINE                                           $RS
         TR    LINE,TRTDOTS            convert non-printable to dots
         BRAS  R14,SPACE1              single line                 $RS
         ICM   R2,B'1111',NTTETOKN     load pointer to data area   $DL
         JZ    NTTAB40                 no, jump                  RS0500
         CLC   NTTENAME,IFBNT_DSNLOGREC  Logrec name/token?        $DL
         JNE   NTTAB30                 no, skip
         USING IFBNT_LOGREC,R2         SET ADDRESSABILITY          $DL
         CLI   IFBNT_LOGREC_CURRENT,IFBNT_USE_DATASET dataset?     $DL
         JNE   NTTAB22                 no, skip
         STRING 5X,'Logrec dataset: ',IFBNT_LOGREC_NAME,           $DL X
               INTO=LINE                                           $DL
         BRAS  R14,SPACE1              BLANK LINE                  $DL
         J     NTTAB40                                             $DL
NTTAB22  DS    0H                                                  $DL
         CLI   IFBNT_LOGREC_CURRENT,IFBNT_USE_LOGSTREAM logstream? $DL
         JNE   NTTAB23                 no, skip
         STRING 5X,'Logstream name: ',IFBNT_LOGREC_LOGSTREAM,      $DL X
               INTO=LINE                                           $DL
         BRAS  R14,SPACE1              BLANK LINE                  $DL
         J     NTTAB40                                             $DL
NTTAB23  DS    0H                                                  $DL
         CLI   IFBNT_LOGREC_CURRENT,IFBNT_IGNORE_RECORDS ?         $DL
         JNE   NTTAB40                 no, skip
         STRING 5X,'LogRec recording is ignored',INTO=LINE         $DL
         BRAS  R14,SPACE1              BLANK LINE                  $DL
         J     NTTAB40                                             $DL
.NTTAB30 ANOP                                                     +GSF
NTTAB30  DS    0H                                                  $DL
         CLC   =C'DSNDB2',NTTENAME     DB2 name/token?             $DL
         JNE   NTTAB40                 no, skip
         USING DB2NTOKN,R2             Set addressability          $DL
         STRING 5X,'Subsystem name: ',DB2SSN,INTO=LINE             $DL
         BRAS  R14,SPACE1              blank line                  $DL
         LA    R6,DB2MBENT             Load member names addr      $DL
         STRING 5X,'Member(s)     : ',(0(R6),4),1X,(8(R6),4),1X,   $DL X
               (16(R6),4),1X,(24(R6),4),1X,(32(R6),4),1X,          $DL X
               (40(R6),4),1X,(48(R6),4),1X,(56(R6),4),1X,          $DL X
               (64(R6),4),1X,(72(R6),4),1X,(80(R6),4),1X,          $DL X
               (88(R6),4),1X,(96(R6),4),1X,(104(R6),4),1X,         $DL X
               (112(R6),4),1X,(120(R6),4),                         $DL X
               INTO=LINE                                           $DL
         BRAS  R14,SPACE1              blank line                  $RS
NTTAB40  DS    0H                                                  $RS
         DROP  R2
         ICM   R5,B'1111',NTTENEXT     next entry                  $RS
         JNZ   NTTAB20                 jump if not zero            $RS
*endloop                                                           $RS
         BRAS  R14,BLANK1              blank line                  $RS
.NTTAB49 ANOP                                                      $RS
NTTAB49  END_PROC                                                  $RS
         IFBNTASM                                                  $DL
         DB2NTOKN                                                  $DL
         TITLE 'SHOWMVS &REL - Device Allocation Defaults (ALLOCxx)'
*---------------------------------------------------------------------*
*                                                                     *
*Allocation Defaults                                                  *
*                                                                     *
*  SPACE PRIMARY(4) SECONDARY(24) DIRECTORY(0)                        *
*        MEASURE(AVEBLK) RLSE PRIM_ORG(CONTIG)                        *
*        BLKLNGTH(8192) ROUND                                         *
*                                                                     *
*  UNIT NAME(SYSALLDA) UNITAFF(SYSALLDA) REDIRECTED_TAPE(TAPE)        *
*                                                                     *
*  TIOT SIZE(64)                                                      *
*                                                                     *
*  SDSN_WAIT WAITALLOC(NO)                                            *
*                                                                     *
*  VOLUME_ENQ POLICY(WAIT)                                            *
*                                                                     *
*  VOLUME_MNT POLICY(WTOR)                                            *
*                                                                     *
*  SPEC_WAIT POLICY(WAITNOH)                                          *
*            MAXNWAIT(5) POLICYNW(CANCEL)                             *
*                                                                     *
*  ALLC_OFFLN POLICY(WAITNOH)                                         *
*             MAXNWAIT(5) POLICYNW(WTOR)                              *
*                                                                     *
*  CATLG_ERR FAILJOB(YES) ERRORMSG(YES)                         JM0900*
*                                                                     *
*---------------------------------------------------------------------*
ALLOC00  BEGIN_PROC KW=ALLOC,BASEREG=NO                          RS0302
         STRING '&TITLEPFX.Allocation Defaults',INTO=LINE
         BRAS  R14,SPACE2              double space
         L     R1,CVTJESCT             JES COMM TABLE
         L     R1,JESCTEXT-JESCT(,R1)  JESCT Extension
         L     R4,JESAB445-JESPEXT(,R1) V(IEFAB445)
         USING IEFAB445,R4
         STRING '  SPACE ',                                            X
               'PRIMARY(',(DEFPQTY,FL3,L),') ',     primary qty        X
               'SECONDARY(',(DEFSQTY,FL3,L),') ',   secondary qty      X
               'DIRECTORY(',(DEFDQTY,FL3,L),') ',   dir blks           X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         MVC   NEXTLINE,BLANKS
         MVC   WORK256(L'BLANKS),BLANKS
         TM    DEFFLG1,DEFTRK          track alloc?
         JZ    *+10                    no, jump
         MVC   WORK256(3),=C'TRK'
         TM    DEFFLG1,DEFCYL          cylinder alloc?
         JZ    *+10                    no, jump
         MVC   WORK256(3),=C'CYL'
         TM    DEFFLG1,DEFBLKLN        average block length
         JZ    *+10                    no, jump
         MVC   WORK256(6),=C'AVEBLK'   average blksize
         MVC   WORK256+10(4),=C'RLSE'
         TM    DEFFLG1,DEFRLSE         release unused space?
         JO    *+10                    yes, jump
         MVC   WORK256+10(6),=C'NORLSE'
         TM    DEFFLG1,DEFCONTG        contig
         JZ    *+10                    no, jump
         MVC   WORK256+20(6),=C'CONTIG'
         TM    DEFFLG1,DEFMIXG         mixg
         JZ    *+10                    no, jump
         MVC   WORK256+20(4),=C'MIXG'
         TM    DEFFLG1,DEFALX          alx
         JZ    *+10                    no, jump
         MVC   WORK256+20(3),=C'ALX'
         STRING 8X,                                                    X
               'MEASURE(',(WORK256,6,T),') ',      trk/cyl/aveblk      X
               (WORK256+10,6,T),                   rlse/norlse         X
               ' PRIM_ORG(',(WORK256+20,6,T),')',                      X
               INTO=LINE
         TM    DEFFLG1,DEFBLKLN        average block length
         JZ    ALLOC10                 no, jump
         BRAS  R14,SPACE1              single space
         MVC   WORK256(L'BLANKS),BLANKS
         STRING 'ROUND',INTO=WORK256                             RS1002
         TM    DEFFLG1,DEFROUND        round?
         JO    *+10                    Yes, jump
         STRING 'NOROUND',INTO=WORK256                           RS1002
         STRING 8X,                                                    X
               'BLKLNGTH(',(DEFDRLH,FL3,L),') ',   blklngth            X
               (WORK256,7,T),                      round/noround       X
               INTO=LINE
ALLOC10  EQU   *
         BRAS  R14,SPACE2              double space
         STRING '  UNIT NAME(',(DEFUNIT,,T),')',                       X
               INTO=LINE
         STRING (LINE,,T),' UNITAFF(',(DEFAFFNM,,T),')',INTO=LINE
         TM    JBB6604,L'JBB6604       running on OS/390 2.4?       +JM
         JNO   ALLOC13                 no, jump                     +JM
         LA    R2,=C'TAPE'                                          +JM
         TM    DEFFLG2,DEFREDTP        redirected_tape(DISK)        +JM
         JZ    *+8                     no                           +JM
         LA    R2,=C'DISK'             yes                          +JM
         STRING (LINE,,T),' REDIRECTED_TAPE(',((R2),4,T),')',          X
               INTO=LINE                                            +JM
ALLOC13  EQU   *                                                    +JM
         BRAS  R14,SPACE2              double space
         STRING '  TIOT SIZE(',(DEFTIOTS,FL1,L),')',INTO=LINE
         BRAS  R14,SPACE2              double space
         LA    R2,=C'No '
         TM    DEFFLG2,DEFSDSWT        sdsn_wait waitalloc((no)
         JZ    *+8                     no
         LA    R2,=C'Yes'              yes
         STRING '  SDSN_WAIT WAITALLOC(',((R2),3,T),')',INTO=LINE
         BRAS  R14,SPACE2              double space
         TM    DEFVOLS,DEFVOLUM        volume_enq policy(wtor)
         JZ    *+8                     no
         LA    R2,=C'WTOR  '
         TM    DEFVOLS,DEFVOLUW        volume_enq policy(wait)
         JZ    *+8                     no
         LA    R2,=C'WAIT  '
         TM    DEFVOLS,DEFVOLUC        volume_enq policy(cancel)
         JZ    *+8                     no
         LA    R2,=C'CANCEL'
         STRING '  VOLUME_ENQ POLICY(',((R2),6,T),')',INTO=LINE
         BRAS  R14,SPACE2              double space
         TM    DEFMNTS,DEFMOUNC        volume_mnt policy(cancel)
         JZ    *+8                     no
         LA    R2,=C'CANCEL'
         TM    DEFMNTS,DEFMOUNT        volume_mnt policy(wtor)
         JZ    *+8                     no
         LA    R2,=C'WTOR  '
         STRING '  VOLUME_MNT POLICY(',((R2),6,T),')',INTO=LINE
         BRAS  R14,SPACE2              double space
         MVC   WORK256(L'BLANKS),BLANKS
         TM    DEFSPCS,DEFSPCWS        spec_wait policy(wtor)
         JZ    *+10                    no
         MVC   WORK256(4),=C'WTOR  '
         TM    DEFSPCS,DEFSPCWC        spec_wait policy(cancel)
         JZ    *+10                    no
         MVC   WORK256(6),=C'CANCEL'
         TM    DEFSPCS,DEFSPCWW        spec_wait policy(waitnoh)
         JZ    *+10                    no
         MVC   WORK256(7),=C'WAITNOH'
         TM    DEFSPCS,DEFSPCWH        spec_wait policy(waithold)
         JZ    *+10                    No
         MVC   WORK256(8),=C'WAITHOLD'
         STRING '  SPEC_WAIT POLICY(',                                 X
               (WORK256,8,T),')',   WTOR/CANCEL/WAITNOH/WAITHOLD       X
               INTO=LINE
         TM    DEFSPCS,DEFSPCWW+DEFSPCWH was it waitnoh or waithold
         JZ    ALLOC20                 No
         BRAS  R14,SPACE1              single space
         MVC   WORK256(L'BLANKS),BLANKS
         TM    DEFSNWAI,DEFSNWC        policynw(cancel)
         JZ    *+10                    no
         MVC   WORK256(6),=C'CANCEL'
         TM    DEFSNWAI,DEFSNW         policynw(wtor)
         JZ    *+10                    no
         MVC   WORK256(4),=C'WTOR  '   yes
         STRING 12X,                                                   X
               'MAXNWAIT(',(DEFSPMAX,FL1,L),') ',                      X
               'POLICYNW(',(WORK256,6,T),')',                          X
               INTO=LINE
ALLOC20  DS    0H
         BRAS  R14,SPACE2              double space
         MVC   WORK256(L'BLANKS),BLANKS
         TM    DEFOFFS,DEFOFFLN        allc_offln policy(wtor)
         JZ    *+10                    no
         MVC   WORK256(4),=C'WTOR  '
         TM    DEFOFFS,DEFOFFLC        allc_offln policy(cancel)
         JZ    *+10                    no
         MVC   WORK256(6),=C'CANCEL'
         TM    DEFOFFS,DEFOFFLW        allc_offln policy(waitnoh)
         JZ    *+10                    no
         MVC   WORK256(7),=C'WAITNOH'
         TM    DEFOFFS,DEFOFFLH        allc_offln policy(waithold)
         JZ    *+10                    no
         MVC   WORK256(8),=C'WAITHOLD'
         STRING '  ALLC_OFFLN POLICY(',                                X
               (WORK256,8,T),')',                                      X
               INTO=LINE
         TM    DEFOFFS,DEFOFFLH+DEFOFFLW was it WAITNOH or WAITHOLD
         JZ    ALLOC30
         BRAS  R14,SPACE1              single space
         MVC   WORK256(L'BLANKS),BLANKS
         TM    DEFNWAIT,DEFNWC         policynw(cancel)
         JZ    *+10                    no
         MVC   WORK256(6),=C'CANCEL'
         TM    DEFNWAIT,DEFNW          policynw(wtor)
         JZ    *+10                    no
         MVC   WORK256(4),=C'WTOR  '
         STRING 13X,                                                   X
               'MAXNWAIT(',(DEFAOMAX,FL1,L),') ',                      X
               'POLICYNW(',(WORK256,6,T),')',                          X
               INTO=LINE
ALLOC30  DS    0H
         BRAS  R14,SPACE2              double space
         LA    R2,=C'Yes'
         TM    DEFFLG2,DEFTERMJ        catlg_err failjob(yes)    JM0900
         JO    *+8                     yes
         LA    R2,=C'No '              no
         LA    R3,=C'Yes'
         TM    DEFFLG2,DEFWTOCF        catlg_err errormsg(yes)
         JO    *+8                     yes
         LA    R3,=C'No '              no
         STRING '  CATLG_ERR FAILJOB(',((R2),3,T),               JM0900X
               ') ERRORMSG(',((R3),3,T),')',                           X
               INTO=LINE
         BRAS  R14,SPACE2              double space
ALLOC99  END_PROC
*
*        From that point on, drop R8 in END_PROC
*
         MACRO                                                    MACRO
&NAME    DROPTEMP ,                                               MACRO
         USING PSA,R0,R1,R2,R3,R4,R5,R6,R7,R8,R12,R14,R15
         DROP  R1,R2,R3,R4,R5,R6,R7,R8,R12,R14,R15 RELSE TEMP BASE REGS
         MEND                                                     MACRO
         TITLE 'SHOWMVS &REL - Selected Global Control Blocks'   RS1002
*---------------------------------------------------------------------*
*                                                                     *
*Addresses of selected global control-blocks                          *
*                                                                     *
*   CVT 00FD3E88  EXT1 00FD43D8  EXT2 00FD43E8  SCVT 00FD30B0         *
* JESCT 00FD46B0   EXT 00C29028  DACA 044F40C8  PCDP 044FF720         *
* ASMVT 00FDB330  PART 01C65070                                       *
*  SMCA 80FB3E68  FRDS 00FA3E10  SSTP 00FB1D78                        *
* AMCBS 00FC3700   CAX 00BC4388   DFA 00FD2F94   GDA 00FD2F94         *
*  RMCT 01304020   CCT 01304150  DMDT 01CE1830  WMST 01CE1468         *
*   LLT 00FB02C0   LPA 01E1E000   APF 00FB0ED8                        *
*  ALPA 00F971C8  PLPD 00C3B000  SVCT 011751A8                        *
*  RCVT 00FBF0A8  DSDT 06108728 ACCVT 00000000                        *
*                                                                     *
*---------------------------------------------------------------------*
ADDR100  BEGIN_PROC KW=GLOBALADDRESSES,BASEREG=NO                RS0302
         STRING '&TITLEPFX.Addresses of selected global ',             X
               'control-blocks',INTO=LINE
         BRAS  R14,SPACE2              double space
         STRING '   CVT ',(CVTPTR,4,X),                                X
               '  EXT1 ',(CVTEXT1,,X), CVTXTNT1                        X
               '  EXT2 ',(CVTEXT2,,X), CVTXTNT2                        X
               '  SCVT ',(CVTABEND,,X),                                X
               '  ECVT ',(ECVT@,,X),                           HBB4410 X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         L     R7,CVTJESCT             JES control Table
         USING JESCT,R7
         STRING ' JESCT ',(CVTJESCT,,X),                               X
               '   EXT ',(JESCTEXT,,X),                                X
               '  DACA ',(JESDACA,,X),                                 X
               '  PCDP ',(JESPCDP,,X),                                 X
               '   PPT ',(JESPPT,,X),                                  X
               ' SSIVT ',(IGDSSIVT,,X),                                X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         L     R7,CVTASMVT             ASM VT
         USING ASMVT,R7
         STRING ' ASMVT ',(CVTASMVT,,X),                               X
               '  PART ',(ASMPART,,X),                                 X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  MSER ',(CVTMSER,,X),                                X
               '  SCCB ',(CVTSCPIN,,X),                                X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         L     R7,CVTSMCA              SMF SMCA
         USING SMCABASE,R7
         STRING '  SMCA ',(CVTSMCA,,X),                                X
               '  FRDS ',(SMCAFRDS,,X),                                X
               '  SSTP ',(SMCASSTP,,X),                                X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         L     R7,CVTCBSP              AMCBS
         USING AMCBS,R7
         STRING ' AMCBS ',(CVTCBSP,,X),                                X
               '   CAX ',(CBSCAXCN,,X),                                X
               '   DFA ',(CVTDFA,,X),                                  X
               '   GDA ',(CVTGDA,,X),                            RS0101X
               '  STGX ',(CVTSMEXT,,X),                                X
               '   SVT ',(CVTSVT,,X),                                  X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         L     R7,CVTOPCTP             RESOURCE MANAGER CONTROL TABLE
         USING RMCT,R7
         STRING '  RMCT ',(CVTOPCTP,,X),                               X
               '   CCT ',(RMCTCCT,,X),                                 X
               '  DMDT ',(RMCTDMDT,,X),                                X
               '  WMST ',(RMCTWMST,,X),                                X
               '  ICST ',(RMCTICST,,X),                                X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         L     R7,CVTSMEXT             STORAGE MAP EXTENSION
         USING CVTVSTGX,R7
         STRING '   LLT ',(CVTLLTA,,X),                                X
               '   LPA ',(CVTEPLPS,,X),                                X
               '   APF ',(CVTAUTHL,,X),                                X
               '  CSVT ',(CSVT@,,X),                                   X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         L     R7,CVTABEND
         USING SCVTSECT,R7
         STRING '  ALPA ',(ALPACDE1,,X),  ALPAQ or DLPAQ               X
               '  PLPD ',(CVTLPDIA,,X),                                X
               '  SVCT ',(SCVTSVCT,,X),                                X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING '  VTAM ',(PSAATCVT-PSA,,X),                           X
               '  TCAS ',(CVTTCASP,,X),                                X
               '  TCAM ',(CVTAQAVT,,X),                                X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         L     R2,CVTTVT
         USING TSVT,R2
         L     R3,TSVTTPVT             TSO/PARMLIB vector table
         USING TPVT,R3
         STRING '  TSVT ',(CVTTVT,,X),                                 X
               '  TPVT ',(TSVTTPVT,,X),                                X
               '  CTLT ',(TPVTCTLT,,X),                                X
               '  XPRM ',(TPVTXPRMD,,X),                               X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         L     R7,CVTRAC               RACF VECTOR TABLE
         USING RCVT,R7
         STRING '  RCVT ',(CVTRAC,,X),                                 X
               '  DSDT ',(RCVTDSDT,,X),                                X
               ' ACCVT ',(ACF2CVT,,X),                                 X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         BRAS  R14,BLANK1              blank line
ADDR199  END_PROC
         TITLE 'SHOWMVS &REL - Current JOB/Step Data'
*---------------------------------------------------------------------*
*                                                                     *
*Current Job Step:                                                    *
*                                                                     *
*  //GILBERT  JOB (ACCT#),CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),          *
*  // TIME=(0,20),REGION=6144K,PERFORM=1,USER=IBMUSER,GROUP=SYSG2     *
*                                                                     *
*    Sub-System(JES2) JOB-Id(JOB03158) SWA(Above) BLP(No) Journal(No) *
*    Address-space type: Batch or STC (non-TSO)                       *
*    Job Start Date: 93/04/09  Time: 15H02M08                         *
*                                                                     *
*    CPU time used: 000H00M06S54                                      *
*                                                                     *
*  //LOADGO EXEC PGM=LOADER,TIME=(0,3),                               *
*  // PARM='NOPRINT'                                                  *
*                                                                     *
*    PERFORM(1)   DPRTY(X'10')                                        *
*    Step Start Date: 93/04/09  Time: 15H02M20                        *
*                                                                     *
*      CPU time  EXCP  Connect  TGET  TPUT   Service  Frames  Paging  *
*     0S789.416    32      658     0     0     43272     259      19  *
*                                                                     *
*  Virtual Storage Usage:                                             *
*                            Limit   In Use  Available  High-watermark*
*                                                                     *
*    User SPLS (Below)       4160K    1180K      2980K        1616K   *
*    Auth SPLS (Below)       6060K     580K      5480K         804K   *
*    User SPLS (Above)      32768K    4388K     28380K        4392K   *
*    Auth SPLS (Above)    1998848K   11448K   1987400K       12720K   *
*                                                                     *
*  Virtual Storage Effects:                                           *
*                                                                     *
*    Getmain with little      some       bad effects:                 *
*    Central :     33980    363244    363244                          *
*    Expanded:      8966    138612    138612                          *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
JOBSTEP  BEGIN_PROC KW=JOBJCL,BASEREG=NO                         RS0302
         STRING '&TITLEPFX.Current Job Step:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
         L     R9,PSATOLD              own TCB
         L     R4,TCBJSCB              job step control block
         USING IEZJSCB,R4
         L     R5,JSCBJCT              Job Control Table
         USING JCT,R5
         SLR   R7,R7
         ICM   R7,B'0111',JCTACTAD     SVA OF ACT
         USING IEFAACTB-16,R7
*
         STRING '  //',(JCTJNAME,,T),' JOB ',INTO=LINE
         MVI   WKCELL3,C' '            no comma
         MVI   WKCELL3+1,C'('          begin sub-list
         SLR   R3,R3
         ICM   R3,B'0001',ACTJNFLD     # OF ACCT FIELDS
         JZ    JOBS120                 no account information
         LA    R1,ACTJNFLD+1           first sub-parm
         SLR   R2,R2
*loop
JOBS114  ICM   R2,B'0001',0(R1)        size of sub-parm
         STRING (1(R1),(R2)),INTO=WORK256
         BRAS  R14,JOBS155             append new text to current line
         LA    R1,1(R2,R1)             skip current sub-field
         BRCT  R3,JOBS114              next sub-field
*endloop
         LA    R15,LINE(R15)           last pos in line
         MVI   0(R15),C')'             close sub-list
         J     JOBS121
*
JOBS120  MVI   WKCELL3+1,C','          ACCT field missing
*
JOBS121  CLC   ACTPRGNM,BLANKS         do we have a PROGRAMMER'S NAME ?
         JE    JOBS122                 no, jump
         STRING (ACTPRGNM,,T),INTO=WORK256
         BRAS  R14,JOBS155             append new text to current line
*
JOBS122  CLI   JCTJCSMF,X'E0'          TSO user?
         JE    JOBS125                 yes, jump
         CLI   PRISUBTY+3,C'3'         JES3?                      DGA
         JE    JOBS125                 yes, jump
         STRING 'CLASS=',JCTJCSMF,INTO=WORK256
         BRAS  R14,JOBS155             append new text to current line
*
JOBS125  STRING 'MSGCLASS=',JCTJMGPO,INTO=WORK256
         BRAS  R14,JOBS155             append new text to current line
*
JOBS130  STRING 'MSGLEVEL=(1,1)',INTO=WORK256
         TM    JCTJMGLV,INCMMGL1       MSGLEVEL=1 ?
         JO    JOBS133                 yes, jump
         MVI   WORK256+10,C'2'         MSGLEVEL=(2,1)
         TM    JCTJMGLV,INCMMGL2       MSGLEVEL=2 ?
         JO    JOBS133                 yes, jump
         MVI   WORK256+10,C'0'         MSGLEVEL=(0,1)
JOBS133  TM    JCTJMGLV,INCMALL        MSGLEVEL=(,1) ?
         JO    JOBS134                 yes, jump
         MVI   WORK256+12,C'0'         MSGLEVEL=(,0)
JOBS134  BRAS  R14,JOBS155             append new text to current line
*
JOBS136  SLR   R6,R6
         ICM   R6,B'0111',JCTJCTX      SVA OF JCTX
         USING JCTX,R6
         L     R1,JCTXJTL              JOB TIME limit (HBB4410)
JOBS136T LTR   R1,R1                   TIME=0 (TSO) ?
         JZ    JOBS137                 yes, exit                 RS1002
         SLR   R0,R0
         D     R0,=F'100'              get time in seconds
         SLR   R0,R0
         D     R0,=F'60'               get time in minutes
         STRING 'TIME=(',((R1),,L),',',((R0),,L),')',INTO=WORK256
         BRAS  R14,JOBS155             append new text to current line
*
JOBS137  DS    0H                                                RS1002
         AIF   (NOT D'CVTH7705).JOBS140 z/OS R2?                 RS1002
         TM    HBB7705,L'HBB7705       running on z/OS R2        RS1002
         JZ    JOBS140                 no, jump                  RS1002
         TM    ARCHLVL2,L'ARCHLVL2     running ALS-2 ?           RS1002
         JZ    JOBS140                  No, leave                RS1002
         LG    R1,JCTXMLSZ             load 64 bit double        RS1002
         CVDG  R1,WKCELL1              convert to decimal (PL16) RS1002
         STRING 'MEMLIMIT=',(WKCELL1,P,L),'M',INTO=WORK256       RS1002
         BRAS  R14,JOBS155             append new text to current line
*                                                                RS1002
.JOBS140  ANOP                                                   RS1002
JOBS140  L     R6,JSCSCT               Current step's SCT
         USING SCT,R6
         LH    R2,JCTEQREG             region parm from job card
         CHI   R2,16383                region > 16M ?
         JE    JOBS146                 yes, jump
         CLM   R2,B'0111',SCTRGSZ      same as REGION on EXEC card ?
         JNE   JOBS147                 no, exit
JOBS146  ICM   R2,B'0111',SCTRGSZ      yes, use value from EXEC card
         STRING 'REGION=',((R2),,L),'K',INTO=WORK256
         BRAS  R14,JOBS155             append new text to current line
         BSM   R5,0                    make R5 negative
*
JOBS147  TM    JCTSTAT2,JCTPERFM       PERFORM specified on EXEC?
         JZ    JOBS149                 no, jump
         STRING 'PERFORM=',(SCTPRFMF,H,L),INTO=WORK256
         BRAS  R14,JOBS155             append new text to current line
         BSM   R6,0                    make R6 negative
*
JOBS149  L     R2,PSAAOLD-PSA(,0)      MY ASCB
         USING ASCB,R2
         L     R3,ASCBASXB             MY ASXB
         USING ASXB,R3
         STRING 'USER=',(ASXBUSER,,T),INTO=WORK256
         BRAS  R14,JOBS155             append new text to current line
         ICM   R3,B'1111',ASXBSENV     MY ACEE
         JNP   JOBS149Z                no RACF, exit
         USING ACEE,R3
         STRING 'GROUP=',(ACEEGRPN,,T),INTO=WORK256
         BRAS  R14,JOBS155             append new text to current line
JOBS149Z BRAS  R14,SPACE1          <== Single Space
*
*        //*MAIN CLASS=ABCDEF
*
         CLI   PRISUBTY+3,C'3'         JES3?                      DGA
         JNE   JOBS$J3X                No, continue
         L     R1,TCBTCT               -> TCT                     DGA
         L     R3,TCTLCTAD-SMFTCT(,R1) -> LCT                     DGA
         USING LCT,R3                                             DGA
         STRING '  //*MAIN CLASS=',LCTCLASS,INTO=LINE             DGA
         BRAS  R14,SPACE1          <== Single space               DGA
JOBS$J3X EQU   *                                                  DGA
         BRAS  R14,BLANK1          <== Double space after jobcard DGA
         J     JOBS162
*
*        append WORK256 to LINE
*
JOBS155  ST    R14,WKCELL3+4           save return address
         LTR   R0,R15                  save length
         JZ    JOBS155C                zero length, jump
         LA    R14,WORK256             FIRST POS
JOBS155L CLI   0(R14),C' '             imbedded space?
         JE    JOBS155Q                YES, EXIT
**MSGL   CLI   0(R14),C','             imbedded comma?
**MSGL   JE    JOBS155Q                YES, EXIT
         LA    R14,1(,R14)             BUMP POINTER
         BRCT  R15,JOBS155L            SCAN AREA
         J     JOBS155C                YES, EXIT
JOBS155Q MVC   NEXTLINE,WORK256        move to work area
         STRING '''',(NEXTLINE,(R0)),'''',INTO=WORK256
         LR    R0,R15                  save length
JOBS155C STRING (LINE,,T),(WKCELL3,2,T),(WORK256,(R0)),',',            X
               INTO=NEXTLINE
         CL    R15,ZSCREENW            overflow?
         JH    JOBS155O                yes, jump
         STRING (LINE,,T),(WKCELL3,2,T),(WORK256,(R0)),INTO=LINE
         J     JOBS155X
JOBS155O STRING (LINE,,T),',',INTO=LINE
         BRAS  R14,SPACE1          <== Single space
         STRING '  // ',(WORK256,(R0)),INTO=LINE
JOBS155X MVI   WKCELL3,C','            next parm needs a comma
         MVI   WKCELL3+1,C' '          next parm needs no space
         L     R14,WKCELL3+4           return address
         BR    R14
*
JOBS162  MVC   WKCELL1(5),=C'Below'    default placement for SWA
         TM    JCTSTAT2,JCTSWAUP       SWA above?
         JZ    JOBS163                 no, jump
         MVC   WKCELL1(5),=C'Above'    yes, remember it
JOBS163  MVC   WKCELL2(3),=C'No '      default
         TM    JCTSTAT2,JCTBLP         BLP authorized?
         JZ    JOBS164                 no, jump
         MVC   WKCELL2(3),=C'Yes'      yes, remember it
JOBS164  MVC   WKCELL3(3),=C'No '      default
         TM    JSCBJJSB,JSCBJNLF       Job Journaling active?
         JO    JOBS168                 no, jump
         MVC   WKCELL3(3),=C'Yes'      yes, remember it
JOBS168  L     R3,JSCBSSIB             point to the SSIB
         USING SSIB,R3
         STRING '    Sub-System(',SSIBSSNM,')',                        X
               '  JOB-Id(',SSIBJBID,')',                               X
               '  SWA(',(WKCELL1,5),')',     SWA(below/above)          X
               '  BLP(',(WKCELL2,3,T),')',     BLP(yes/no)             X
               '  Journal(',(WKCELL3,3,T),')', Job Journal (yes/no)    X
               '  ASID(X''',(ASCBASID,,X),''')',                       X
               INTO=LINE
         BRAS  R14,SPACE1          <== Single space
*
*        Address-space type: Batch/TSO-batch/TSO-on-line
*
         TM    TSO_ON_LINE,L'TSO_ON_LINE
         JO    JOBS169T                yes, jump
         TM    TSO_BATCH,L'TSO_BATCH
         JO    JOBS169B                yes, jump
JOBS169N STRING '    Address-space type: ','Batch or STC (non-TSO)',   X
               INTO=LINE
         J     JOBS169
JOBS169T STRING '    Address-space type: ','TSO (on-line)',            X
               INTO=LINE
         J     JOBS169
JOBS169B STRING '    Address-space type: ','TSO (Batch)',              X
               INTO=LINE
JOBS169  BRAS  R14,SPACE1          <== Single space
*
JOBS170  SLR   R1,R1
         ICM   R1,B'0111',JCTJMRJT     job start time (binary)
         BRAS  R14,BINTIME             convert time to HH MM SS
         TM    HBB6603,L'HBB6603       OS/390 R3?
         JO    JOBS172                 yes, use Y2K date from JCTX
         ZAP   WKCELL1,JCTJMRJD        yydddF   (prior to HBB6603)
         ZAP   WKCELL2,JCTSSD          yydddF   (prior to HBB6603)
         J     JOBS173                 continue
JOBS172  EQU   *
         SLR   R14,R14
         ICM   R14,B'0111',JCTJCTX     SVA OF JCTX
         ZAP   WKCELL1,JCTXJMRD-JCTX(,R14) 0cyydddF (HBB6603 and up)
         ZAP   WKCELL2,JCTXSSD-JCTX(,R14) 0cyydddF (HBB6603 and up)
JOBS173  EQU   *
         STRING '    Job Start Date: ',(WKCELL1,P,YYYY-MM-DD),         X
               '  Time: ',((R3),,R2Z),'.',((R2),,R2Z),'.',((R1),,R2Z), X
               INTO=LINE
         BRAS  R14,SPACE2          <== Double space
*
*        CPU time used (JOB)
*
JOBS180  TM    TSO_ON_LINE,L'TSO_ON_LINE on-line TSO user?
         JO    JOBS200                 YES, EXIT
         L     R1,ACTJTIME             Accumulated TCB time
         A     R1,JCTSRBT              Accumulated SRB time
         JZ    JOBS200                 zero, quit
         BRAS  R14,BINTIME             convert time to HH MM SS
         STRING '    CPU time used: ',((R3),,R3Z),'H',((R2),,R2Z),'M', X
               ((R1),,R2Z),'S',((R0),,R2Z),                            X
               INTO=LINE
**           1X,(ACTJTIME,,X),1X,(JCTSRBT,,X),                       X
         BRAS  R14,SPACE2          <== Double Space
*
*        //stepname EXEC PGM=program,REGION=1234K,TIME=(30,0)
*
JOBS200  SLR   R7,R7                   SCTX address
         ICM   R7,B'0111',SCTXBTTR     address of SCTX (SCT extension)
         USING SCTX,R7
         SLR   R0,R0
         ICM   R1,B'1111',SCTXSTL      step time limit (HBB4410)
         D     R0,=F'100'              get it in seconds
         SLR   R0,R0
         D     R0,=F'60'               get it in minutes
         STRING '  //',(SCTSNAME,,T),' EXEC PGM=',(SCTPGMNM,,T),       X
               ',TIME=(',((R1),,L),',',((R0),,L),')',                  X
               INTO=LINE
*
         LTR   R5,R5                   REGION specified on JOB card?
         JM    JOBS230                 yes, jump
         STRING (LINE,,T),',REGION=',(SCTRGSZ,FL3,L),'K',INTO=LINE
JOBS230  LH    R2,SCTNIUSL             max number of DD stmts
         SH    R2,SCTLALOC             minus # of godd DDs
         JZ    JOBS240                 zero, jump
         STRING (LINE,,T),',DYNAMNBR=',((R2),,L),INTO=LINE
JOBS240  EQU   *
         LTR   R6,R6                   PERFORM specified on JOB?
         JO    JOBS250                 yes, jump (JOB overrides EXEC)
         TM    SCTSDP,SCTEPRFM         PERFORM specified on EXEC?
         JZ    JOBS250                 no, jump
         STRING (LINE,,T),',PERFORM=',(SCTPRFMF,H,L),INTO=LINE
JOBS250  EQU   *
         SLR   R2,R2
         ICM   R2,B'0011',SCTSEXEC     PARM length
         JZ    JOBS270                 no PARM, jump
         STRING (LINE,,T),',',INTO=LINE
         BRAS  R14,SPACE1          <== next line
         STRING '  // PARM=''',(SCTXPARM,(R2)),'''',                   X
               INTO=LINE
JOBS270  BRAS  R14,SPACE2          <== Double Space
*
JOBS300  L     R6,PSAAOLD-PSA(,0)      ASCB
         USING ASCB,R6
         L     R7,ASCBOUCB             MY OUCB
         USING OUCB,R7
         STRING '    PERFORM(',(OUCBSPG,H,L),')',                      X
               '   DPRTY(X''',(ASCBDP,,X),''')',  dispatching priority X
               INTO=LINE
         BRAS  R14,SPACE1          <== Single space
*
JOBS410  SLR   R1,R1
         ICM   R1,B'0111',JCTJMRSS     Step start time (binary)
         BRAS  R14,BINTIME             convert time to HH MM SS
         STRING '    Step Start Date: ',(WKCELL2,P,YYYY-MM-DD),        X
               '  Time: ',((R3),,R2Z),'.',((R2),,R2Z),'.',((R1),,R2Z), X
               INTO=LINE
         BRAS  R14,SPACE1          <== Single space
*
*        CPU TIME (STEP)
*
JOBS420  EQU   *
         BRAS  R14,BLANK1              Blank Line
&STR     SETC  'CPU time     EXCP   Connect   TGET   TPUT    Service'
&STR     SETC  '&STR   Frames    Paging'
         STRING 11X,'&STR',INTO=LINE
         BRAS  R14,SPACE1          <== Single space
         STRING '.CPUTIME',INTO=LINE   updated by RDRTNE
JOBS429X BRAS  R14,SPACE2          <== Double Space
*
*        Storage Allocation Table
*
JOBS600  STRING '  Virtual Storage Usage:',INTO=LINE
         BRAS  R14,SPACE2          <== Double Space
         STRING 30X,'Limit      In Use    Available    High-watermark',X
               INTO=LINE
         BRAS  R14,SPACE2          <== Double Space
         STRING '.SPL00',INTO=LINE     Place-holder for RDRTNE
         BRAS  R14,SPACE1          <== Single Space
         STRING '.SPL04',INTO=LINE     Place-holder for RDRTNE
         BRAS  R14,SPACE1          <== Single Space
         STRING '.SPL08',INTO=LINE     Place-holder for RDRTNE
         BRAS  R14,SPACE1          <== Single Space
         STRING '.SPL12',INTO=LINE     Place-holder for RDRTNE
         BRAS  R14,SPACE2              Double Space
*                                                                RS1002
*        SYSEVENT STGTEST                                        RS1002
*        Provide information how additional virtual storage will RS1002
*        effect the system performance                           RS1002
*                                                                RS1002
JOBS700  STRING '  Virtual Storage Effects:',                    RS1002X
               INTO=LINE                                         RS1002
         BRAS  R14,SPACE2          <== Double Space              RS1002
         STRING 4X,'Getmain with ','little  ','    some','       bad', X
               ' effects:',INTO=LINE                             RS1002
         BRAS  R14,SPACE1              Single Space              RS1002
         STRING '.STG1',INTO=LINE      Place-holder for RDRTNE   RS1002
         BRAS  R14,SPACE1              Single Space              RS1002
         TM    ARCHLVL2,L'ARCHLVL2     running ALS-2 ?           RS1002
         JNZ   JOBSTP90                 Yes, leave               RS1002
         STRING '.STG2',INTO=LINE      Place-holder for RDRTNE   RS1002
         BRAS  R14,SPACE1              Single Space              RS1002
JOBSTP90 BRAS  R14,BLANK1
JOBSTP99 END_PROC
         TITLE 'SHOWMVS &REL - Current RACF Profile'
*---------------------------------------------------------------------*
*                                                                     *
*RACF Profile:                                                        *
*                                                                     *
*  User: IBMUSER   Group: SYSTEM    Terminal: L3270X21    Flags: 01 01*
*  UACC: None      Attributes: (none)                                 *
*  Name: John Doe                                                     *
*                                                                     *
*---------------------------------------------------------------------*
RACF00   BEGIN_PROC KW=JOBDATA,BASEREG=NO                        RS0302
         L     R3,PSAAOLD-PSA(,0)      POINT TO MY ASCB.
         L     R3,ASCBASXB-ASCB(,R3)   POINT TO MY ASXB.
         L     R3,ASXBSENV-ASXB(,R3)   POINT TO MY ACEE.
         USING ACEE,R3
         TM    ACEEFLG1,ACEERACF       this user defined to RACF?
         JZ    RACF99                  no, quit
         STRING '&TITLEPFX.RACF Profile:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  User: ',ACEEUSRI,   RACF user                       X
               '  Group: ',ACEEGRPN,   Connect Group name              X
               '  Terminal: ',ACEETRID, terminal ID                    X
               '    Flags: ',(ACEEFLG1,,X),1X,(ACEEFLG2,,X),1X,        X
               (ACEEFLG3,,X),1X,(ACEEFLG4,,X),1X,                      X
               INTO=LINE
         BRAS  R14,SPACE1          <== next line
         BRAS  R1,RACF36               BRANCH AROUND TABLE
         DC    AL1(ACEEALTR),C'Alter  '
         DC    AL1(ACEECNTL),C'Control'
         DC    AL1(ACEEUPDT),C'Update '
         DC    AL1(ACEEREAD),C'Read   '
         DC    AL1(ACEENONE),C'None   '
         DC    AL1(00),0H'0'
RACF36   BRAS  R14,SCAN_TM             SCAN TABLE
         DC    Y(1+7)                  SIZE OF A TABLE ENTRY
         TM    ACEEFLG2,*-*            Test RACF flag
         JO    RACF38                  NOT FOUND, JUMP AROUND "MVC"
         LA    R1,BLANKS               UACC is undetermined
RACF38   STRING '  UACC: ',(1(R1),7),'   Attributes:',                 X
               INTO=LINE
         LA    R4,LINE+1(R15)          authority level
        #STATUS ACEEFLG1,ACEESPEC,'Special'
        #STATUS ACEEFLG1,ACEEADSP,'ADSP'
        #STATUS ACEEFLG1,ACEEOPER,'Operations'
        #STATUS ACEEFLG1,ACEEAUDT,'Auditor'
        #STATUS ACEEFLG1,ACEELOGU,'Logged'
        #STATUS ACEEFLG1,ACEEPRIV,'Privileged'
      TM ACEEFLG1,ACEESPEC+ACEEADSP+ACEEOPER+ACEEAUDT+ACEELOGU+ACEEPRIV
         JNZ   RACF47                  at least one attribute, jump
         MVC   0(6,R4),=C'(none)'      show it
*             '  Application: ',ACEEAPLN,                             X
*             '  Surrogate UID: ',ACEESUID,                           X
RACF47   BRAS  R14,SPACE1              Single Space
*
*        User name
*
         ICM   R1,B'1111',ACEEUNAM     addr of user name
         JZ    RACF50                  no name, exit
         SLR   R0,R0
         IC    R0,0(,R1)               pick up length+1
         BCTR  R0,0                    get name length
         STRING '  Name: ',(1(R1),(R0)),INTO=LINE
         BRAS  R14,SPACE1              Single Space
*
*        Other Groups user can connect to
*
RACF50   ICM   R3,B'1111',ACEEFCGP     CGRP address
         JZ    RACF90                  zero, exit
         USING CGRP,R3
         SLR   R4,R4
         LH    R5,CGRPCORE+2           get length of CGRP table
         SH    R5,=AL2(CGRPENT-CGRP)   subtract prefix length
         D     R4,=A(L'CGRPENT)        calculate number of entries
         CHI   R5,1                    more than 1 entry?
         JNH   RACF90                  no, exit
         ST    R8,WKCELL1              save CVT address          RS1002
         LR    R8,R5                                             RS1002
         STRING '  Groups Available:',INTO=LINE
         BRAS  R14,SPACE1              Single Space
         LA    R4,CGRPENT              first entry
         USING CGRPENTD,R4
         MVC   LINE(2),BLANKS          blank out next line       RS1002
         LA    R5,LINE+2               first entry               RS1002
         LA    R6,10                   length of each display entry
         LA    R7,LINE+82              end of line               RS1002
*loop
RACF51   DS    0H                                                RS1002
         STRING CGRPNAME,' ',INTO=((R5),(R6))                    RS1002
         BRXLE R5,R6,RACF52            this line full?           RS1002
         TR    LINE,TRTPRINT           get rid of garbage        RS1002
         BRAS  R14,SPACE1              Single space              RS1002
         MVC   LINE(4),BLANKS          blank out next line       RS1002
         LA    R5,LINE+2               first entry               RS1002
         LA    R7,LINE+82              end of line               RS1002
RACF52   DS    0H                                                RS1002
         LA    R4,CGRPENTD+L'CGRPENT   next entry
         BRCT  R8,RACF51                                         RS1002
         L     R8,WKCELL1              restore CVT address       RS1002
*endloop
         TR    LINE,TRTPRINT           get rid of garbage        RS0803
         BRAS  R14,SPACE1              Single Space
*
RACF90   BRAS  R14,BLANK1              Blank line
RACF99   END_PROC
*
         TITLE 'SHOWMVS &REL - Current TSO Profile'
*---------------------------------------------------------------------*
*                                                                     *
*TSO Profile:                                                         *
*                                                                     *
*  Attributes: OPER ACCT SUBMIT                                       *
*  Unit: SYSALLDA   Dest: Local                                       *
*  Submit Hold Class: X  Submit Class: A  Msgclass: X  Sysout Class: Z*
*  Prompt Intercom Pause Msgid Nomode WTPMSG Norecover Prefix(IBMUSER)*
*  Command: EXEC (PDF41)                                              *
*                                                                     *
*---------------------------------------------------------------------*
PROF00   BEGIN_PROC KW=TSOPROFILE,BASEREG=NO                     RS0302
         L     R5,TCBJSCB              point at JSCB
         USING IEZJSCB,R5
         ICM   R6,B'1111',JSCBPSCB     point at PSCB
         JZ    PROF99                  not a TSU, exit
         USING PSCB,R6
         STRING '&TITLEPFX.TSO Profile:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         CNOP  0,4
         BRAS  R12,*+8
         DC    A(PROF31TM)
         L     R12,0(R12,0)
         USING PROF31TM,R12
         STRING '  Attributes:',INTO=LINE
         LA    R4,LINE+1(R15)          start of attribute list
        #STATUS PSCBATR1,PSCBCTRL,'OPER'
        #STATUS PSCBATR1,PSCBACCT,'ACCT'
        #STATUS PSCBATR1,PSCBJCL,'SUBMIT'
        #STATUS PSCBATR1,PSCBVMNT,'MOUNT'
        #STATUS PSCBATR1,PSCBCNAU,'CONSOLE'
         TM    PSCBATR1,PSCBCTRL+PSCBACCT+PSCBJCL+PSCBVMNT+PSCBCNAU
         JNZ   PROF12                  at least one attribute, jump
         MVC   0(6,R4),=C'(none)'      show it
*
PROF12   BRAS  R14,SPACE1          <== next line
         MVC   WKCELL1,=C'Local   '    default destination
         CLI   PSCBDEST,0              any special dest?
         JE    PROF15                  no, jump
         MVC   WKCELL1,PSCBDEST        yes, use it
PROF15   STRING '  Unit: ',PSCBGPNM,'   Dest: ',WKCELL1,               X
               INTO=LINE
         BRAS  R14,SPACE1          <== next line
         STRING '  Submit Hold Class: ',PSCBSUBH,                      X
               '   Submit Class: ',PSCBSUBC,                           X
               '   Msgclass: ',PSCBSUBM,                               X
               '   Sysout Class: ',PSCBSOUT,                           X
               INTO=LINE
         TR    LINE,TRTPRINT           get rid of X'00' fields
         BRAS  R14,SPACE1          <== next line
*
*        Display Profile options and DSN prefix from UPT
*
PROF31   L     R7,PSCBUPT              User profile table
         USING UPT,R7
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JNO   PROF31B                 no, jump
         LA    R14,UPT_LENGTH          length
         IC    R15,OLDPKF              source key
         MVCK  WORK256(R14),UPT,R15    Move line to buffer
         LA    R7,WORK256              copy of the UPT
PROF31B  EQU   *
         MVC   LINE,BLANKS             blank line
         LA    R4,LINE+2               start of options
         BRAS  R1,PROF32
         DC    AL1(UPTNPRM),C'Noprompt  '
         DC    AL1(UPTNCOM),C'Nointercom'
         DC    AL1(UPTPAUS),C'Pause     '
         DC     AL1(UPTMID),C'Msgid     '
         DC    AL1(UPTMODE),C'Mode      '
         DC     AL1(UPTWTP),C'WTPMSG    '
         DC    AL1(UPTRCVR),C'Recover   '
         DC    X'00',0H'0'             end of table
PROF31TM TM    UPTSWS,*-*              check UPT switch
*loop
PROF32   IC    R15,0(,R1)              pick up TM mask
         EX    R15,PROF31TM            test UPT switch
         JO    PROF34                  jump if one
         CLI   1(R1),C'N'              NO-something?
         JE    PROF33                  yes, jump
         STRING 'No',(1(R1),10),INTO=((R4),10)
         TM    3(R4),X'40'             2nd letter (T in WTPMSG)
         JO    PROF36                  uppercase, leave it
         NI    2(R4),255-X'40'         lowercase
         J     PROF36
PROF33   STRING (1+2(R1),10-2,T),INTO=((R4),10)
         OI    0(R4),X'40'             uppercase
         J     PROF36
PROF34   STRING (1(R1),10,T),INTO=((R4),10)
*
PROF36   LA    R4,1(R15,R4)            bump pointer
         LA    R1,1+10(,R1)
         CLI   0(R1),0                 end of table?
         JNE   PROF32                  not yet, loop
*endloop
         SLR   R1,R1
         IC    R1,UPTPREFL             Prefix length
         STRING 'Prefix(',(UPTPREFX,(R1)),')',INTO=((R4),NEXTLINE)
         BRAS  R14,SPACE1          <== next line
*
*        TSO command from TSO/E LOGON menu
*
         TM    TSO_ON_LINE,L'TSO_ON_LINE on-line TSO user?
         JNO   PROF98                  NO, EXIT
         L     R1,PSAAOLD-PSA(,0)      MY ASCB
         L     R1,ASCBASXB-ASCB(,R1)   MY ASXB
         ICM   R1,B'1111',ASXBLWA-ASXB(R1) LOGON WORK AREA
         JZ    PROF42                  not TSO, jump
         USING LWA,R1
         STRING '  Command: ',LWALGCMD,INTO=LINE
         BRAS  R14,SPACE1          <== next line
PROF42   EQU   *
*
         TM    AUTHORIZED,L'AUTHORIZED Authorized?
         JNO   PROF98                  no, exit
         ICM   R4,B'1111',TSB@         addr of the TSB
         JZ    PROF98                  zero, exit
         USING TSB,R4
         BRAS  R14,EXECKEY0            execute next instr in key=0
         ICM   R5,B'1111',TSBEXTNT     addr of the TSBX
         JZ    PROF98                  zero, exit
         USING TSBX,R5
         LA    R14,X'60'               VTAM key
         LA    R15,L'WKCELL1           length
         MVCK  WKCELL1(R15),TSBXLMOD,R14
         LA    R15,L'TSBXBIND          length
         MVCK  WORK256(R15),TSBXBIND,R14
         STRING '  Logmode: ',WKCELL1,INTO=LINE
         BRAS  R14,SPACE1          <== next line
         STRING '  BIND_Data: ',                                       X
               (WORK256+00,4,X),1X,                                    X
               (WORK256+04,4,X),1X,                                    X
               (WORK256+08,4,X),1X,                                    X
               (WORK256+12,4,X),1X,                                    X
               (WORK256+16,4,X),1X,                                    X
               (WORK256+20,4,X),1X,                                    X
               (WORK256+24,4,X),1X,                                    X
               (WORK256+28,4,X),1X,                                    X
               (WORK256+32,4,X),                                       X
               INTO=LINE
         BRAS  R14,SPACE1          <== next line
PROF98   EQU   *
         BRAS  R14,BLANK1              Double space
PROF99   END_PROC
         TITLE 'SHOWMVS &REL - Current REXX Environment'
*---------------------------------------------------------------------*
*                                                                     *
*REXX Environment:                                                    *
*                                                                     *
*  Environment(TSO/E)  Lang(ENU)  ENVBLOCK(03005C90)  TCB(9FC0D8)     *
*                                                                     *
*    Host Command Table (3 entries)                                   *
*                                                                     *
*        1   MVS       IRXSTAM                                        *
*        2   LINK      IRXSTAM                                        *
*        3   ATTACH    IRXSTAM                                        *
*                                                                     *
*    Function Package Directories                                     *
*                                                                     *
*      Type(System)  Name(IRXEFMVS)  Addr(04009000)  Entries(7)       *
*                                                                     *
*        1   SYSVAR    04027BC0  00000000                             *
*        2   SYSDSN    04027908  00000000                             *
*        3   LISTDSI   040270E8  00000000                             *
*        4   OUTTRAP   040261F0  00000000                             *
*        5   PROMPT    04025310  00000000                             *
*        6   MSG       04024BC0  00000000                             *
*        7   GETMSG    04020E50  00000000                             *
*                                                                     *
*---------------------------------------------------------------------*
REXX00   BEGIN_PROC KW=REXX,BASEREG=NO                           RS0302
         STRING '&TITLEPFX.REXX Environment:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         LA    R1,=C'IRXANCHR'         REXX Environment Block
         BRAS  R14,JPASEARCH           find it in my JPAQ
         LTR   R15,R15                 found?
         JNZ   REXX98                  no, exit
         LR    R3,R0                   A(IRXANCHR)
         USING ENVTABLE_HEADER,R3
         LA    R4,ENVTABLE_FIRST       first entry
         USING ENVTABLE_ENTRY,R4
         BRAS  R14,EXECKEY0            execute next instr in key=0
         L     R5,ENVTABLE_USED        number of entries used
*loop
REXX21   BRAS  R14,EXECKEY0            execute next instr in key=0
         ICM   R6,B'1111',ENVTABLE_ENTRY+00    A(ENVBLOCK)
         JNP   REXX28                  not used, jump
         USING ENVBLOCK,R6
         BRAS  R14,EXECKEY0            execute next instr in key=0
         L     R7,ENVBLOCK_PARMBLOCK   addr of the PARMBLOCK
         USING PARMBLOCK,R7
         IC    R0,OLDPKF               source key
         LA    R1,L'PARMBLOCK_ADDRSPN
         MVCK  WKCELL1(R1),PARMBLOCK_ADDRSPN,R0
         LA    R1,L'PARMBLOCK_LANGUAGE
         MVCK  WKCELL2(R1),PARMBLOCK_LANGUAGE,R0
         LA    R1,3
         MVCK  WKCELL3(R1),ENVTABLE_ENTRY+29,R0
         STRING '  Environment(',(WKCELL1,L'PARMBLOCK_ADDRSPN,T),      X
               ')  Lang(',(WKCELL2,L'PARMBLOCK_LANGUAGE,T),            X
               ')  ENVBLOCK(',((R6),,X),                               X
               ')  PARMBLOCK(',((R7),,X),                              X
               ')  TCB(',(WKCELL3,3,X),')',                            X
               INTO=LINE
**        '  ENVBLOCK=',((R6),,X),' PARMBLOCK=',((R7),,X),        X
         BRAS  R14,SPACE2              Double Space
*
*        Display Host Command Table
*
REXX30   BRAS  R14,EXECKEY0            execute next instr in key=0
         L     R1,PARMBLOCK_SUBCOMTB   addr of the SUBCOMTB header
         USING SUBCOMTB_HEADER,R1
         BRAS  R14,EXECKEY0            execute next instr in key=0
         L     R2,SUBCOMTB_USED        SUBCOMTB entries used
         LA    R0,1                    counter
         BRAS  R14,EXECKEY0            execute next instr in key=0
         L     R1,SUBCOMTB_FIRST       first SUBCOMTB entry
         USING SUBCOMTB_ENTRY,R1
         STRING 4X,'Host Command Table (',((R2),,L),' entries)',       X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         LTR   R2,R2                   any entry to print?
         JNP   REXX28                  none, jump
*--loop
REXX31   IC    R14,OLDPKF              source key
         LA    R15,8+8+16              length
         MVCK  WORK256(R15),0(R1),R14
         STRING ((R0),,R9B),3X,        seq#                            X
               (WORK256,8),2X,         sub-command name                X
               (WORK256+8,8),2X,       module                          X
               (WORK256+16,16),        ?                               X
               INTO=LINE
         BRAS  R14,SPACE1          <== next line
         AHI   R0,1
         LA    R1,32(,R1)              next function
         BRCT  R2,REXX31
*--endloop
         BRAS  R14,BLANK1              Double space
*
         STRING 4X,'Function Package Directories',                     X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         BRAS  R14,EXECKEY0            execute next instr in key=0
         L     R1,PARMBLOCK_PACKTB     addr of the PACKTB header
         USING PACKTB_HEADER,R1
         LA    R1,PACKTB_USER_FIRST    First USER PACKTB entry
         MVC   WKCELL1,=C'User    '    function type
         BRAS  R14,REXX61          <== function package directory
         BRAS  R14,EXECKEY0            execute next instr in key=0
         L     R1,PARMBLOCK_PACKTB     addr of the PACKTB header
         LA    R1,PACKTB_LOCAL_FIRST   First LOCAL PACKTB entry
         MVC   WKCELL1,=C'Local   '    function type
         BRAS  R14,REXX61          <== function package directory
         BRAS  R14,EXECKEY0            execute next instr in key=0
         L     R1,PARMBLOCK_PACKTB     addr of the PACKTB header
         LA    R1,PACKTB_SYSTEM_FIRST  First SYSTEM PACKTB entry
         MVC   WKCELL1,=C'System  '    function type
         BRAS  R14,REXX61          <== function package directory
REXX28   LA    R4,ENVTABLE_NEXT        next ENVTABLE_ENTRY
         BRCT  R5,REXX21               process it
*endloop
         BRAS  R14,BLANK1              BLANK LINE
         J     REXX99
*
*        Display Functions
*
REXX61   STM   R14,R4,TENWORDS         save registers
         BRAS  R14,EXECKEY0            execute next instr in key=0
         L     R0,ENVTABLE_ENTRY+28    point at TCB
         LR    R15,R0                  pass TCB address
         L     R0,TCBLLS-TCB(,R15)     first LLE
         STM   R15,R4,TENWORDS+4       save registers
         BRAS  R14,EXECKEY0            execute next instr in key=0
         L     R3,0(,R1)               addr of 1st PACKTB entry
         USING PACKTB_ENTRY,R3
         BRAS  R14,EXECKEY0            execute next instr in key=0
         L     R4,8(,R1)               number of PACKTB entries used
*loop
REXX62   IC    R0,OLDPKF               source key
         LA    R1,L'PACKTB_NAME        length
         MVCK  WKCELL2(R1),PACKTB_NAME,R0
         L     R1,TENWORDS+8           first LLE
         USING LLE,R1
*--loop
REXX63   L     R2,LLECDPT              point at CDE
         USING CDENTRY,R2
         CLC   CDNAME,WKCELL2          compare PACKTB_NAME
         JE    REXX64                  yes, exit loop
         ICM   R1,B'1111',LLECHN       next LLE
         JP    REXX63                  next LLE
*--endloop
         SLR   R1,R1                   not loaded under TCB
         SLR   R2,R2                   not loaded under TCB
         MVI   WKCELL3,255             no dsn available
         J     REXX64B
*
*        CDE/LPDE found for package
*
REXX64   L     R0,CDENTPT              R0=EP ADDR
         BRAS  R14,CSVDSN              get dsname
         MVI   WKCELL3,255             no dsn available
         LTR   R15,R15                 dsname located?
         JNZ   *+8                     no, jump
         ST    R1,WKCELL3              yes, save dsname address
         L     R1,CDENTPT              entry point
         DROP  R1,R2                   LLE,CDENTRY
         LA    R1,0(,R1)               AMODE31 bit off
         BRAS  R14,EXECKEY0            execute next instr in key=0
         L     R2,12(,R1)              number of entries
REXX64B  EQU   *
         STRING 6X,'Type(',(WKCELL1,,T),        USER/LOCAL/SYSTEM      X
               ')  Name(',(WKCELL2,,T),         name of load-module    X
               ')  Addr(',((R1),,X),            address of load module X
               ')  Entries(',((R2),,L),')',     number of entries      X
               INTO=LINE
         ICM   R0,B'1111',WKCELL3      get/test dsname address
         JNP   REXX64T                 no dsname, jump
         STRING (LINE,,T),'  DSN(',((R0),44,T),')',INTO=LINE
REXX64T  EQU   *
         BRAS  R14,SPACE2              Double Space
         LA    R0,1                    counter
         LA    R1,24(,R1)              first entry
         LTR   R2,R2                   any entry to print?
         JNP   REXX68                  none, jump
*--loop
*TM AUTH_ESR,L'AUTH_ESR <<<<<<<<<<
*JO REXX99
REXX65   IC    R14,OLDPKF              source key
         LA    R15,8+4+4+16            length
         MVCK  WORK256(R15),0(R1),R14
         STRING ((R0),,R9B),3X,        seq#                            X
               (WORK256,8),2X,         function name                   X
               (WORK256+8,4,X),2X,     function address                X
               (WORK256+16,8),         EP name                         X
               (WORK256+24,8),         DD name                         X
               INTO=LINE
         TR    LINE,TRTPRINT           clean up non-printable
         BRAS  R14,SPACE1          <== next line
         AHI   R0,1                    counter
         LA    R1,32(,R1)              next function
         BRCT  R2,REXX65
*--endloop
         BRAS  R14,BLANK1              BLANK LINE
REXX68   LA    R3,PACKTB_NEXT          next entry
         BRCT  R4,REXX62
*endloop
REXX69   LM    R14,R4,TENWORDS         restore registers
         BR    R14
*
REXX98   STRING '  REXX is not active in this address space.',INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
REXX99   END_PROC
         IRXENVT                       REXX Environment Tble (IRXANCHR)
         IRXENVB                       REXX Environment Block
EQUX     OPSYN EQU
         MACRO
&N       EQU   &A,&B,&C
         AIF   ('&N' EQ 'SPSHARE').MEND
         AIF   (N'&SYSLIST GT 2).P3
         AIF   (N'&SYSLIST GT 1).P2
&N       EQUX  &A
         MEXIT
.P2      ANOP
&N       EQUX  &A,&B
         MEXIT
.P3      ANOP
&N       EQUX  &A,&B,&C
.MEND    MEND
         IRXPARMB DECLARE=YES          REXX Parameter Block
EQU      OPSYN EQUX
         IRXSUBCT                      REXX sub-command Table
         IRXPACKT                      REXX Function PAckage Table
         TITLE 'SHOWMVS &REL - Data Set Allocations (Current Step)'
*---------------------------------------------------------------------*
*                                                                     *
*TIOT:                                                                *
*                                                                     *
*  DDname  Disp Volser   EXCP Data Set Name                           *
*                                                                     *
*  ISPPROF  OLD TSO143    226 IBMUSER.ISPF.ISPPROF                    *
*  ISPCTL0  OLD VIO       640 SYS93351.T142134.RA000.IBMUSER.R0000026 *
*  SYSEXEC  SHR TSO202      4 IBMUSER.EXEC                            *
*                                                                     *
*---------------------------------------------------------------------*
TIOT00   BEGIN_PROC KW=TIOT,BASEREG=NO                           RS0302
         STRING '&TITLEPFX.TIOT:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         CNOP  0,4
         BRAS  R12,*+8
         DC    A(PATH)
         L     R12,0(R12,0)
         USING PATH,R12
         STRING '  DDname  Disp Volser   EXCP Data Set Name',32X,      X
               'Device   DEVN Miscellaneous',INTO=LINE
LINE_VOL2 EQU  LINE+15,6               VOLSER   (TIOT DISPLAY)
LINE_DSN2 EQU  LINE+29,44              DSNAME   (TIOT DISPLAY)
         BRAS  R14,SPACE2              Double Space
         L     R5,TCBTIO               TIOT
         USING TIOT1,R5
         ST    R10,TIOTLINES+0         First TIOT line
*LOOP
TIOT_GET CLI   TIOEDDNM,C' '           FREED DD?
         JL    TIOT_NXT                YES, JUMP
         LA    R6,TENWORDS+4           WORK AREA
         ST    R6,TENWORDS             WORK AREA
         USING ZB505,R6
         XC    SWAEPAX,SWAEPAX         CLEAR WORK AREA
         MVC   SWVA,TIOEJFCB           SVA OF THE JFCB
         SWAREQ FCODE=RL,EPA=TENWORDS,MF=(E,SWAREQL1),UNAUTH=YES
         L     R6,SWBLKPTR             31-BIT ADDRESS OF JFCB
         USING INFMJFCB,R6
         MVC   WKCELL1,BLANKS          CLEAR WORK AREA
         MVC   WKCELL2,BLANKS          CLEAR WORK AREA
         MVC   STATUS,BLANKS           CLEAR WORK AREA
         MVC   UNITNAME,BLANKS         CLEAR WORK AREA
         MVC   UCB_NAME,BLANKS         CLEAR WORK AREA
         MVC   VOLSER,=C'JES     '     SYSIN/SYSOUT
         SLR   R1,R1                   EXCP=0
         SLR   R7,R7                   NO UCB
         TM    TIOELINK,TIOESSDS       IS THIS A JES DATA SET?
         JO    TIOT61                  YES, JUMP
         MVC   VOLSER,=C'DUMMY   '     DUMMY DATA SET
         ICM   R7,B'0111',TIOEFSRT     UCB ADDRESS
         JZ    TIOT64                  NO UCB, SKIP TCT SCAN
         USING UCBOB,R7
         BRAS  R14,GETUNIT         <== GET UNITNAME
         MVC   VOLSER,=C'VIO     '     UNIT=VIO
         TM    UCBOB,UCBVRDEV          IS THIS A VIO DATA SET?
         JO    TIOT41                  YES, JUMP
         MVC   VOLSER,JFCBVOLS         NO, MOVE FIRST VOLSER
*
TIOT41   BRAS  R1,TIOT41B
         DC    AL1(JFCNEW),C'NEW'
         DC    AL1(JFCMOD),C'MOD'
         DC    AL1(JFCOLD+JFCSHARE),C'SHR'
         DC    AL1(JFCOLD),C'OLD'
         DC    X'00',0H'0'
TIOT41B  BRAS  R14,SCAN_TM             CALL SCAN RTNE
         DC    Y(1+3)               0  LENGTH OF A TABLE ENTRY
         TM    JFCBIND2,*-*         2  TEST DATA SET STATUS
         MVC   STATUS,1(R1)         6  DISP
*
         TM    UCBFL5,UCBSMS           SMS VOL?     X'20'
         JZ    TIOT46                  NO, JUMP
         MVC   WKCELL1(3),=C'SMS'      SMS-MANAGED
*
TIOT46   CLI   UCBTBYT3,UCB3TAPE       TAPE DEVICE?
         JNE   TIOT61                  NO, JUMP
         BRAS  R1,TIOT46B
         DC    AL1(JFCBLTM),C'LTM'
         DC    AL1(JFCBLP),C'BLP'
         DC    AL1(JFCSUL),C'SUL'
         DC    AL1(JFCSUL+JFCBAL),C'AUL'
         DC    AL1(JFCBAL),C'AL '
         DC    AL1(JFCNSL),C'NSL'
         DC    AL1(JFCSL),C'SL '
         DC    AL1(JFCNL),C'NL '
         DC    X'00',0H'0'
TIOT46B  BRAS  R14,SCAN_TM             CALL SCAN RTNE
         DC    Y(1+3)               0  LENGTH OF A TABLE ENTRY
         TM    JFCBLTYP,*-*         2  TEST LABEL TYPE FLAGS
*
         LH    R0,JFCBFLSQ             PICK UP FILE SEQUENCE NUMBER
         LTR   R0,R0                   LABEL=0?
         JNZ   TIOT46Y                 NO, JUMP
         LA    R0,0001                 YES, CHANGE TO LABEL=1
TIOT46Y  STRING ((R0),,L),',',(1(R1),3),INTO=WKCELL1
*
TIOT61   LA    R0,TIOENTRY             POINT TO CURRENT TIOT ENTRY
         SL    R0,TCBTIO               CHANGE ADDRESS TO OFFSET
         BRAS  R14,EXCP00          <== GET EXCP COUNT IN R1
         STRING ((R1),,R6B),INTO=WKCELL2
         CL    R1,=F'100000'           OVER 100K?
         JL    TIOT64                  NO, JUMP
         SLR   R0,R0                   YES, DIVIDE BY 1000
         LA    R1,500(,R1)             YES, DIVIDE BY 1000
         D     R0,=F'1000'             YES, DIVIDE BY 1000
         STRING ((R1),,R4B),'K',INTO=WKCELL2
*
TIOT64   LTR   R7,R7                   do we have a UCB?
         JZ    TIOT_PRT                no, jump
         UCB_NAME RIGHT                get 4-character device number
TIOT_PRT DS    0H                                                 ?RS
         STRING 2X,TIOEDDNM,1X,STATUS,1X,VOLSER,1X,(WKCELL2,7),        X
               JFCBDSNM,1X,UNITNAME,1X,UCB_NAME,1X,WKCELL1,            X
               INTO=LINE
         BRAS  R14,SPACE1          <== next line
         CLC   JFCBDSNM(21),PATH               pathname?         RS0302
         JNE   TIOT_NXT                 no next
         L     R3,JSTCB                own Job-step TCB           ?RS
         L     R3,TCBJSCB-TCB(,R3)     current JSCB               ?RS
         USING IEZJSCB,R3                                         ?RS
         L     R3,JSCDSABQ             DSAB QDB                   ?RS
         USING DSABQDB,R3                                         ?RS
         L     R4,DSQFRSTP             FIRST DSAB ON CHAIN        ?RS
         USING DSAB,R4                                            ?RS
*loop                                                             ?RS
TIOT_PR1 DS    0H                                                 ?RS
         L     R3,DSABSIOT             get SIOT address           ?RS
         USING INDMSIOT,R3                                        ?RS
         CLC   TIOEDDNM,SCTDDNAM       is it my ddname?           ?RS
         JE    TIOT_PR2
         AIF   (NOT D'CVTH7705).TIOT_PR1X z/OS R2 ?              RS0802
         TM    HBB7705,L'HBB7705       running on z/OS R2        RS0802
         JZ    TIOT_PR1X               no, jump                  RS0802
         ICM   R4,B'1111',DSABFCHA     NEXT DSAB (above/below)   RS0802
         JNZ   TIOT_PR1                Not finished yet, keep on RS0802
         J     TIOT_PR2                jump over                 RS0802
.TIOT_PR1X ANOP                                                  RS0802
TIOT_PR1X DS    0H                                               RS0802
         ICM   R4,B'1111',DSABFCHN     NEXT DSAB                  ?RS
         JNZ   TIOT_PR1           Not finished yet, keep on going ?RS
*endloop                                                          ?RS
TIOT_PR2 DS    0H                                                 ?RS
         L     R3,SIOTDDIB             DDIB OCO :-))              ?RS
         LH    R0,10(,R3)              length of pathname !!      ?RS
TIOT_PR3 DS    0H                                                 ?RS
         CHI   R0,44
         JL    TIOT_PR4                                           ?RS
         STRING 29X,(12(R3),44,T),INTO=LINE                       ?RS
         BRAS  R14,SPACE1          <== next line                  ?RS
         AHI   R0,-44
         LTR   R0,R0                                              ?RS
         JZ    TIOT_NXT                                           ?RS
         JM    TIOT_NXT                                           ?RS
         LA    R3,44(R3)                                          ?RS
         J     TIOT_PR3                                           ?RS
TIOT_PR4 DS    0H                                                 ?RS
         STRING 29X,(12(R3),(R0),T),INTO=LINE                     ?RS
         BRAS  R14,SPACE1          <== next line                  ?RS
*
TIOT_NXT SLR   R0,R0                   PREPARE IC
         IC    R0,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY
         ALR   R5,R0                   BUMP UP TO NEXT ENTRY
         CLI   TIOELNGH,0              IS THIS THE END?
         JNZ   TIOT_GET                NOT YET, LOOP THROUGH TIOT
*ENDLOOP
         ST    R10,TIOTLINES+4         Last TIOT line
         BRAS  R14,BLANK1              BLANK LINE
         J     TIOT99
PATH     DC    CL21'...PATH=.SPECIFIED...'                       RS0302
         DS    0F                                                RS0302
TIOT99   END_PROC                                                RS0302
         TITLE 'SHOWMVS &REL - TCB Tree and RB Chains (Current Step)'
*---------------------------------------------------------------------*
*                                                                     *
*TCB Tree and RB Chains:                                              *
*                                                                     *
*  TCB Address                    Program    IC  STAB  FLAGS1 CDFLGS  *
*                                                                     *
*  9FE240                         IEAVAR00   01  0083    42     00    *
*   9FDE88                        IEESB605   06  0082    02     00    *
*                                 IEFSD060   01  0003    42     00    *
*    9FD140            (JSTCB)    IKJEFT01   01  0083    42     00    *
*     9E9BE0                      IKJEFT02   01  0083    46     00    *
*      9E9790                     IKJEFT09   01  0083    42     00    *
*       9E95F8                    PDF        06  0082    00     00    *
*                                 ISPMAIN    01  0003    42     00    *
*        9C7718                   ISPTASK    06  0082    00     00    *
*                                 SHOWMVS    0C  0002    02     00    *
*        9E9280                   ISPTASK    06  0082    00     00    *
*                                 ISREDIT    01  0002    40     00    *
*   9FF1D8                        IEAVTSDT   78  0083    46     00    *
*                                                                     *
*---------------------------------------------------------------------*
TREE     BEGIN_PROC KW=TCBTREE,BASEREG=NO                        RS0302
         L     R1,PSAAOLD-PSA(,0)      my ASCB
         L     R1,ASCBASXB-ASCB(,R1)   my ASXB
         L     R9,ASXBFTCB-ASXB(,R1)   First TCB (RCT)
         STRING '&TITLEPFX.TCB Tree and PRB Chains:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '  TCB Address',18X,INTO=LINE,                         X
               'Program    IC  STAB  FLAGS1 CDFLGS    DDname       DataX
                 Programs'
LINE_TCB_TREE  EQU LINE+30,&LINESIZE-30
LINE_TCB_TREE2 EQU LINE+80,&LINESIZE-80
         BRAS  R14,SPACE2              Double Space
         SLR   R3,R3                   INDENTATION INDEX
*LOOP
TREE100  STCM  R9,B'0111',WKCELL1      STORE TCB ADDR
         STRING (BLANKS,4(R3)),(WKCELL1,3,X),INTO=LINE
         TM    TCBFLGS5,TCBFC          task ended already?
         JO    TREE288                 yes, next TCB
         SLR   R6,R6                   first time switch (NEXTRB)
         CL    R9,JSTCB                my job-step TCB?
         JNE   TREE200                 no, jump
         MVC   LINE_TCB_TREE-8(7),=C'(JSTCB)'  signal current JSTCB
*
*        PROCESS RB CHAIN
*--LOOP
TREE200  BRAS  R14,NEXTRB              GET RB ADDRESS
         LTR   R6,R6                   eof?
         JZ    TREE290                 yes, exit
         USING RBPREFIX,R6
         CLI   RBSTAB1,RBFTPRB         IS THIS A PRB?
         JNE   TREE280                 NO, IGNORE IT
         TM    RBCDFLGS,RBCDSYNC       CHECK FLAGS
         JO    TREE260                 JUMP IF IT IS A SYNCH PRB
         BRAS  R14,JLBDDN           <- retrieve tasklib ddname
TREE250  DS    0H
         SLR   R0,R0                   STORAGE ALLOCATED (DATA)
         SLR   R1,R1                   STORAGE ALLOCATED (PROGRAMS)
         ICM   R2,B'1111',TCBMSS       FIRST SUB-POOL FOR THIS TCB
         JZ    TREE250_SWA             no sub-pools, quit try TCBSWA
         BRAS  R14,TALLY            <- tally allocated storage
TREE250_SWA  DS    0H
         ICM   R2,B'1111',TCBSWA       FIRST SUB-POOL FOR THIS TCBSWA
         JZ    TREE250_UKYSP           no sub-pools, quit try TCBUKYSP
         BRAS  R14,TALLY            <- tally allocated storage
TREE250_UKYSP DS    0H
         ICM   R2,B'1111',TCBUKYSP     FIRST SUB-POOL FOR THIS TCBUKYSP
         JZ    TREE251                 no sub-pools, quit try TCBUKYSP
         BRAS  R14,TALLY            <- tally allocated storage
TREE251  DS    0H
         SRL   R0,10                   data bytes, in K
         SRL   R1,10                   program bytes, in K
         STM   R0,R1,WKCELL3           data, programs
         ICM   R1,B'1111',RBCDE        POINT TO CDE/LPDE
         JNZ   TREE253                 there is a CDE, jump
         LA    R1,BLANKS               fake CDE
TREE253  STRING 3X,                                                    X
               CDNAME-CDENTRY(R1),3X,  PGM NAME                        X
               (RBWLIC+3,1,X),2X,      IC                              X
               (RBSTAB,2,X),4X,        STATUS BYTE                     X
               (RBFLAGS1,,X),5X,       Flags                           X
               (RBCDFLGS,,X),6X,       FLAGS                           X
               PDATA_DDN,              DDNAME OF TASKLIB               X
               (WKCELL3,F,R8B),'K',    storage (data)                  X
               (WKCELL3+4,F,R9B),'K',  storage (programs)              X
               INTO=LINE_TCB_TREE
         CLC   LINE(LINE_TCB_TREE-LINE),BLANKS 1st line for this TCB?
         JNE   TREE258                 yes, jump
         MVC   LINE_TCB_TREE2,BLANKS   no, clear storage tallies
TREE258  CL    R9,PSATOLD-PSA(,0)      is this my TCB?
         JNE   TREE270                 no, jump
         LA    R0,RBBASIC              point to basic section
         CL    R0,TCBRBP               is this my PRB?
         JNE   TREE270                 no, jump
         MVI   LINE+30+1,C'*'          yes, flag it
         J     TREE270
TREE260  MVC   WKCELL1,RBGRS15         PICK UP ENTRY POINT ADDRESS
         NI    WKCELL1+3,X'FE'         SET BIT 31 TO ZERO
         STRING 3X,                                                    X
               (WKCELL1,4,X),3X,       EP ADDRESS                      X
               (RBWLIC+3,1,X),2X,                                      X
               (RBSTAB,2,X),4X,        Flags                           X
               (RBFLAGS1,,X),5X,       Flags                           X
               (RBCDFLGS,,X),          Flags                           X
               INTO=LINE_TCB_TREE
*
TREE270  BRAS  R14,SPACE1          <== NEXT LINE
         MVC   LINE,BLANKS             blank it out
TREE280  J     TREE200                 LOOP THROUGH RB TABLE
*--ENDLOOP
TREE288  STRING '   Task Terminated',INTO=LINE_TCB_TREE
         BRAS  R14,SPACE1          <== NEXT LINE
*
TREE290  BRAS  R14,SCANTCB             GET NEXT TCB
         JNZ   TREE100                 PROCESS NEXT TCB
*ENDLOOP
         BRAS  R14,BLANK1              BLANK LINE
         STRING '   STAB1: 00-PRB C0-SVRB 40-IRB 60-TIRB ',            X
               '08-WAITP 02-ATNXIT 01-PMSVRB',INTO=LINE
         BRAS  R14,SPACE1          <== NEXT LINE
         STRING '   STAB2: 80-TCBNXT 40-FACTV 20-ATTN 10-ETXR ',       X
               '0C-IQETP 02-FDYN 01-ECBWT',INTO=LINE
         BRAS  R14,SPACE1          <== NEXT LINE
         STRING '  FLAGS1: 80-SLOCK 40-XWAIT 20-ABEND 10-XWPRM ',      X
               '08-ASIR 04-LONGWT 02-SCB 01-SSSYN',INTO=LINE
         BRAS  R14,SPACE1          <== NEXT LINE
         STRING '  CDFLGS: 80-NOCELL 20-CDATCH 10-CDSAVE ',            X
               '08-CDNODE 04-CDSYNC 02-CDXCTL 01-CDLOAD',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*        Tally storage allocated to current TCB                       *
*        R2 can be TCBMSS, TCBSWA or TCBUKYSP                         *
*---------------------------------------------------------------------*
TALLY    BEGIN_PROC SAVE=NO            BASEREG=NO                RS0703
         USING SPQE,R2
         STM   R14,R6,TENWORDS         save registers            RS0703
*LOOP
TALLY21  CL    R9,TCBJSTCB             Am I the JS TCB?
         JE    TALLY21L                yes, then I ass ownership
         CL    R9,SPQETCB              Do I own this subpool?
         JNE   TALLY29                 no, ignore it
TALLY21L L     R4,SPQESPQA             chain descriptors
         USING SPQA,R4
         LA    R5,3                    3 ENTRIES IN SPQA
*--LOOP
TALLY22  CL    R4,0(,R4)               EMPTY ENTRY?
         JE    TALLY25                 YES, EXIT
         L     R6,0(,R4)               FIRST/LAST DQE
         USING DQE,R6
*----LOOP
TALLY23  CLI   SPQEID,251              PROGRAM SUB-POOL?
         JE    TALLY23P                YES, JUMP
         CLI   SPQEID,252              PROGRAM SUB-POOL?
         JE    TALLY23P                YES, JUMP
         AL    R0,DQESIZE              ADD SIZE (DATA)
         J     TALLY23Q
TALLY23P AL    R1,DQESIZE              ADD SIZE (PROGRAMS)
TALLY23Q CL    R6,4(,R4)               LAST DQE ON THIS CHAIN?
         L     R6,DQENEXT
         JNE   TALLY23                 NO, PROCESS NEXT ONE
*----ENDLOOP
TALLY25  LA    R4,8(,R4)               NEXT ENTRY IN SPQA
         BRCT  R5,TALLY22
*--ENDLOOP
         AIF   (NOT D'CVTH7703).TALLY29  OS/390 R10?             RS0703
         TM    HBB7703,L'HBB7703       running on OS/390 R10?    RS0703
         JZ    TALLY29                 no, jump                  RS0703
TALLY26L L     R4,SPQESPQX             SPQX chain descriptors    RS0703
         USING SPQX,R4                 SPQX                      RS0703
         LA    R5,2                    3 ENTRIES IN SPQX         RS0703
*--LOOP                                                          RS0703
TALLY27  CL    R4,0(,R4)               EMPTY ENTRY?              RS0703
         JE    TALLY28Z                YES, EXIT                 RS0703
         L     R6,0(,R4)               FIRST/LAST DQE            RS0703
         USING DQE,R6                                            RS0703
*----LOOP                                                        RS0703
TALLY28  CLI   SPQEID,251              PROGRAM SUB-POOL?         RS0703
         JE    TALLY28P                YES, JUMP                 RS0703
         CLI   SPQEID,252              PROGRAM SUB-POOL?         RS0703
         JE    TALLY28P                YES, JUMP                 RS0703
         AL    R0,DQESIZE              ADD SIZE (DATA)           RS0703
         J     TALLY28Q                                          RS0703
TALLY28P AL    R1,DQESIZE              ADD SIZE (PROGRAMS)       RS0703
TALLY28Q CL    R6,4(,R4)               LAST DQE ON THIS CHAIN?   RS0703
         L     R6,DQENEXT                                        RS0703
         JNE   TALLY28                 NO, PROCESS NEXT ONE      RS0703
*----ENDLOOP                                                     RS0703
TALLY28Z LA    R4,8(,R4)               NEXT ENTRY IN SPQX        RS0703
         BRCT  R5,TALLY27                                        RS0703
*--ENDLOOP                                                       RS0703
.TALLY29 ANOP                                                    RS0703
TALLY29  ICM   R2,B'1111',SPQENEXT     NEXT SUBPOOL
         JNZ   TALLY21
*ENDLOOP
TALLY90  L     R14,TENWORDS                                      RS0703
         LM    R2,R6,TENWORDS+16                                 RS0703
         BR    R14                                               RS0703
         DROP  R2,R4,R6             SPQE,SPQA/SPQX,DQE           RS0703
         TITLE 'SHOWMVS &REL - Attention exits'
*---------------------------------------------------------------------*
*                                                                     *
*Attention Exits                                                      *
*                                                                     *
*  Address     Module    Stat  Stat2                                  *
*                                                                     *
*  84560EE8    ISPMAIN    C3    C0                                    *
*  829FCCC8    IKJEFT03   03    C0                                    *
*  829ED40C    IKJEFT01   80    00                                    *
*                                                                     *
*---------------------------------------------------------------------*
ATTNX00  BEGIN_PROC KW=ATTENTIONEXITS,BASEREG=NO                 RS0302
         L     R4,PSAAOLD-PSA(,0)      my ASCB
         USING ASCB,R4
         L     R4,ASCBASXB             my ASXB
         USING ASXB,R4
         ICM   R5,B'1111',ASXBRCTD     RCT DATA AREA
         JZ    ATTNX99                 ZERO, EXIT
         USING RCTD,R5
         ICM   R6,B'1111',RCTDTAXE     FIRST TAXE
         JZ    ATTNX99                 ZERO, EXIT
         USING TAXE,R6
         STRING '&TITLEPFX.Attention Exits',INTO=LINE
         BRAS  R14,SPACE2              double space
         STRING '   Address     Module    Stat  Stat2   TCB      Parm',X
               INTO=LINE
         BRAS  R14,SPACE2              double space
*loop
ATTNX21  L     R1,TAXEEXIT             EXIT ADDRESS
         BRAS  R14,CSVQUERY            GET MODULE NAME
         MVI   EP10,C' '               CLEAR ORIGIN
         STRING 3X,(TAXEEXIT,,X),      EXIT ADDRESS                    X
               2X,EP10,                MODULE NAME                     X
               3X,(TAXESTAT,,X),       STATUS 1                        X
               4X,(TAXEST2,,X),        STATUS 2                        X
               4X,(TAXETCB+1,3,X),     TCB                             X
               4X,(TAXEPARM,,X),       Parm for exit rtne              X
               INTO=LINE
         BRAS  R14,SPACE1
         ICM   R6,B'0111',TAXELNK      NEXT TAXE
         JNZ   ATTNX21                 NOT FINISHED YET
*endloop
         BRAS  R14,BLANK1              BLANK LINE
ATTNX99  END_PROC
         TITLE 'SHOWMVS &REL - Job Pack Area Queue (JPAQ)'
*---------------------------------------------------------------------*
*                                                                     *
*JPAQ:                                                          RS0302*
*                                                                     *
*   Name     EntPt    AM Attrb SPN At At2 At3 Use  Length Load-Pnt Dat*
*   IRXANCHR 8DD03908 31  10   251 13  22  40 0001 0006F8 0DD03908 SYS*
*   IRXFUSER 8DD03800 31  12   251 13  22  40 0001 000108 0DD03800 SYS*
*   IRXFLOC  8DD036F8 31  12   251 13  22  40 0001 000108 0DD036F8 SYS*
*   IRXEFPCK 8DD09E48 31  10       15  02  40 IRXEFMVS             SYS*
*---------------------------------------------------------------------*
JPAQ     BEGIN_PROC KW=JPAQ,BASEREG=NO                           RS0302
         L     R8,CVTPTR(,0)           CVT ADDRESS
         SH    R8,=Y(CVTMAP-CVTFIX)    SUBTRACT PREFIX LENGTH
         USING CVTFIX,R8               PERMANENT ASSIGNMENT
         L     R9,JSTCB                THE JOB STEP TCB
         STRING '&TITLEPFX.JPAQ:',INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '   Name     EntPt    AM Attrb SPN At At2 At3 Use ',   X
               ' Length Load-Pnt',' Data Set Name',                    X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         SLR   R5,R5                   first-time switch
*LOOP
JPAQ21   BRAS  R14,NEXTCDE          <- get next CDE
         LTR   R5,R5                   end of JPAQ?
         JZ    JPAQ31                  yes, exit
         USING CDENTRY,R5
         L     R0,CDENTPT              R0=EP addr
         BRAS  R14,CSVDSN           <- look for a CDEX
*
JPAQ22   L     R6,CDXLMJP              POINT TO XL (OR MAJOR CDE)
         STRING 3X,CDNAME,1X,(CDENTPT,,X),INTO=LINE              RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
         MVC   0(2,R4),=C'24'          default AMODE 24          RS0302
        #STATUS CDENTPT,CDEMODE,'31'   Amode 31 ?                RS0302
         AIF   (NOT D'CVTH7706).JPAQ23 z/OS R3?                  RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
        #STATUS CDENTPT3,CDEMOD64,'64' Amode 64 ?                RS0302
.JPAQ23  ANOP
         TM    CDATTR,CDMIN            CHECK ATTRIBUTES
         JO    JPAQ25                  JUMP IF THIS IS A MINOR CDE
         USING XTLST,R6
         STRING (LINE,,T),2X,(CDATTRB,,X),                             X
               3X,(CDSP,FL1,R3B),1X,(CDATTR,,X),2X,(CDATTR2,,X),       X
               2X,(CDATTR3,1,X),1X,(CDUSE,,X),                         X
               1X,(XTLMSBLN,,X),1X,(XTLMSBAD,,X),1X,((R1),44),         X
               INTO=LINE                                         RS0302
         J     JPAQ29
JPAQ25   STRING (LINE,,T),2X,(CDATTRB,,X),                             X
               7X,(CDATTR,,X),2X,(CDATTR2,,X),2X,(CDATTR3,1,X),        X
               1X,CDNAME-CDENTRY(R6),13X,((R1),44),                    X
               INTO=LINE                                         RS0302
JPAQ29   BRAS  R14,SPACE1          <== NEXT LINE
         J     JPAQ21                  LOOP THROUGH RB TABLE
*ENDLOOP
JPAQ31   BRAS  R14,BLANK1              BLANK LINE
         STRING '   ATTRB: 80-EOM 40-IDENTY 20-DIRTY 10-CDEX ',        X
               '08-LPDE 04-GLOBAL 02-CONTAMINATION 01-RACF',           X
               INTO=LINE
         BRAS  R14,SPACE1          <== NEXT LINE
         STRING '      AT: 80-NIP/MLPA 40-NIC 20-RENT 10-REUS ',       X
               '08-NREUS 04-MINOR 02-JPAQ 01-NOT_OL',                  X
               INTO=LINE                                         RS0302
         BRAS  R14,SPACE1          <== NEXT LINE
         STRING '     AT2: 80-SP0 40-REL 20-XLE 10-RLC ',              X
               '08-AMODE_ANY 04-OVLY 02-APFLIB 01-AC=1',               X
               INTO=LINE                                         RS0302
         BRAS  R14,SPACE1          <== NEXT LINE
         STRING '     AT3: 80-OpMvsPath 40-PML 20-SplitRmode ',        X
               '10-HFSshared 08-RTLS 04-DynLPA 01-ProtPage',           X
               INTO=LINE                                         RS0302
         BRAS  R14,SPACE2              Double Space
         END_PROC
         TITLE 'SHOWMVS &REL - Load Lists'
*---------------------------------------------------------------------*
*                                                                     *
*Load list:                                                           *
*  TCB: 8F1118   Program: IKJEFT01                                    *
*   Name     EntPt    AM Attrb SPN At At2 At3 Use  SysCt Length Load-P*
*   IRXANCHR 8DD03908 31  10   251 13  22  40 0001 0000  0006F8 0DD039*
*   IRXSTAM  872B5F10 31  18     0 B1  22  00 0001 0000  0035A8 072B40*
*                                                                     *
*---------------------------------------------------------------------*
LOADLIST BEGIN_PROC KW=LOADLIST,BASEREG=NO                       RS0302
         L     R9,JSTCB                THE JOB STEP TCB
         STRING '&TITLEPFX.Load list:',INTO=LINE
         BRAS  R14,SPACE1          <== next line
         SLR   R3,R3                   INDENTATION INDEX
*LOOP
LOADL11  ICM   R0,B'1111',TCBLLS       load-list empty?
         JZ    LOADL80                 yes, skip this TCB
         BRAS  R14,BLANK1
         LA    R5,BLANKS               dummy CDE
         TM    TCBFLGS5,TCBFC          task ended already?
         JO    LOADL41                 yes, skip CDE search
*
*        get name of current program
*
         L     R5,TCBRBP               TOP RB
         USING RBBASIC,R5
LOADL36  TM    RBCDFLGS,RBCDSYNC       THIS RB CREATED BY SYNCH?
         JO    LOADL36I                YES, JUMP
         TM    RBSTAB1,RBFTSVRB        IS THIS AN SVRB?
         JNO   LOADL37                 NO, JUMP
LOADL36I ICM   R5,B'0111',RBLINK+1     POINT TO PREVIOUS RB
         J     LOADL36                 TEST SYNCH FLAG AGAIN
LOADL37  L     R5,RBCDE                POINT TO CDE/LPDE
         USING CDENTRY,R5
*
LOADL41  STCM  R9,B'0111',WKCELL1      STORE TCB ADDR
*
         STRING '  TCB: ',(WKCELL1,3,X),'   Program: ',CDNAME,         X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
         STRING '   Name     EntPt    AM Attrb SPN At At2 At3 Use ',   X
               ' SysCt',' Length Load-Pnt',                      RS0302X
               INTO=LINE
         BRAS  R14,SPACE1              Single Space
*
*        display load-list
*
         SLR   R7,R7                   first time switch
*--LOOP
LOADL70  BRAS  R14,NEXTLLE             FIND NEXT LLE
         LTR   R7,R7                   end of chain?
         JZ    LOADL80                 yes, exit
         USING LLE,R7
         STCM  R7,B'0111',WKCELL1      STORE LLE ADDR
         L     R5,LLECDPT              CDE PTR
         TM    CDATTR,CDMIN            CHECK ATTRIBUTES
         JNO   LOADL72                 JUMP IF THIS IS A MAJOR CDE
         L     R5,CDXLMJP              POINT TO MAJOR CDE
LOADL72  L     R6,CDXLMJP              POINT TO XL
         USING XTLST,R6
         TM    CDATTRB,CDELPDE         CHECK ATTRIBUTES
         JO    LOADL75                 JUMP IF THIS IS A LPA MODULE
         STRING 3X,CDNAME,1X,(CDENTPT,,X),INTO=LINE              RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
         MVC   0(2,R4),=C'24'          default AMODE 24          RS0302
        #STATUS CDENTPT,CDEMODE,'31'   Amode 31 ?                RS0302
         AIF   (NOT D'CVTH7706).LOADL72 z/OS R3?                 RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
        #STATUS CDENTPT3,CDEMOD64,'64' Amode 64 ?                RS0302
.LOADL72 ANOP                                                    RS0302
         STRING (LINE,,T),2X,(CDATTRB,,X),                             X
               3X,(CDSP,FL1,R3B),1X,(CDATTR,,X),2X,(CDATTR2,,X),       X
               2X,(CDATTR3,1,X),1X,(LLECOUNT,,X),1X,(LLESYSCT,,X),2X,  X
               (XTLMSBLN,,X),1X,(XTLMSBAD,,X),INTO=LINE          RS0302
         J     LOADL79
         USING LPDE,R5
LOADL75  DS    0H                                                RS0302
         STRING 3X,LPDENAME,1X,(LPDENTP,,X),INTO=LINE            RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
         MVC   0(2,R4),=C'24'          default AMODE 24          RS0302
        #STATUS LPDENTP,LPDEMODE,'31' Amode 31 ?                 RS0302
         AIF   (NOT D'CVTH7706).LOADL75 z/OS R3?                 RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
        #STATUS LPDEEPB3,LPDEAM64,'64' Amode 64 ?                RS0302
.LOADL75 ANOP                                                    RS0302
         STRING (LINE,,T),2X,(LPDEATTB,,X),                            X
               3X,(LPDESP,FL1,R3B),1X,(LPDEATTR,,X),2X,(LPDEATT2,,X),  X
               2X,(LPDEATT3,1,X),1X,(LLECOUNT,,X),1X,(LLESYSCT,,X),2X, X
               (LPDEXTLN+1,3,X),1X,(LPDEXTAD,,X),INTO=LINE       RS0302
LOADL79  BRAS  R14,SPACE1          <== next line
         J     LOADL70                 LOOP THROUGH LOAD LIST
*--ENDLOOP
LOADL80  BRAS  R14,SCANTCB             NEXT TCB IN TREE
         JNZ   LOADL11
*ENDLOOP
         BRAS  R14,BLANK1              blank line
         END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*Local Cellpools:                                                     *
*                                                                     *
*  PoolId   Ext  C-Size  P-Num  S-Num SPN Key TCB    Header           *
*  009C3000   1      80    101    102 237   0 9DEA98 CPOOL CELL POOL  *
*  7F732F00   2     208     60    118 237   0 9DEA98 SWA BLOCK POOL   *
*                                                                     *
*---------------------------------------------------------------------*
CELLPLOC BEGIN_PROC KW=TIMERS,BASEREG=NO                         RS0302
         STRING '&TITLEPFX.Local Cellpools:',INTO=LINE             $RS
         BRAS  R14,SPACE2              Double Space                $RS
         L     R5,PSAAOLD-PSA(,0)      ASCB                        $RS
         L     R5,ASCBLDA-ASCB(,R5)    Local Data Area             $RS
         USING LDA,R5                                              $RS
         L     R4,LDAPPD               LDA PPD queue               $RS
         STRING '  PoolId   Ext  C-Size   P-Num   S-Num SPN Key TCB    X
               Header',INTO=LINE                                   $RS
         BRAS  R14,SPACE1              NEXT LINE                   $RS
         BRAS  R7,CELLP100             display cell-pools          $RS
         BRAS  R14,BLANK1              BLANK LINE                  $RS
         END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*Recovery and Timers                                                  *
*                                                                     *
*  TCB: 9FC0D0   Program: ISPTASK                                     *
*                                                                     *
*   SCB(9FF4E0) TCB(9B3E88) Exit(82A3502C) PGM(IKJEFT0D) Key(80)      *
*               Parm(009E7AB8) Flgs1(96) Flgs2(80) Flgs3(00)          *
*   SCB(9FF510) RB(9AEF98) Exit(8224E9B0) PGM(IKJCMDRC) Key(80)       *
*               Parm(0000ABC4) Flgs1(16) Flgs2(80) Flgs3(01)          *
*   TQE(AD811D) Exit(00034788) PGM(FASTPATH) Date(19960821) Time(1855 *
*               Parm(00000000) Flgs(07) Flgs2(40) Flgs3(40) ID(000507 *
*   RPP(9F0680) RB(9B3B00) Exit(80034DE8) PGM(PROG24)                 *
*               Parm(00034DEC) Flag1(80) Mask(040000) PICA(00033010)  *
*                                                                     *
*---------------------------------------------------------------------*
TIMERS   BEGIN_PROC KW=TIMERS,BASEREG=NO                         RS0302
         L     R9,JSTCB                THE JOB STEP TCB
         STRING '&TITLEPFX.Recovery and Timers',INTO=LINE
         BRAS  R14,SPACE1          <== next line
         SLR   R3,R3                   INDENTATION INDEX
*LOOP
TIMER11  TM    TCBFLGS5,TCBFC          task ended already?
         JO    TIMER80                 yes, skip this TCB
         L     R0,TCBSTAB              First SCB
         O     R0,TCBPIE               First SCA
         O     R0,TCBTME               First TQE
         JZ    TIMER80                 no, skip this TCB
         BRAS  R14,BLANK1
*
*        get name of current program
*
         L     R5,TCBRBP               TOP RB
         USING RBBASIC,R5
TIMER16  TM    RBCDFLGS,RBCDSYNC       THIS RB CREATED BY SYNCH?
         JO    TIMER16I                YES, JUMP
         TM    RBSTAB1,RBFTSVRB        IS THIS AN SVRB?
         JNO   TIMER17                 NO, JUMP
*#SNAP ADDR=RBBASIC,LENGTH=44                                     -DEL-
TIMER16I ICM   R5,B'0111',RBLINK+1     POINT TO PREVIOUS RB
*#SNAP ADDR=RBBASIC,LENGTH=44                                     -DEL-
         J     TIMER16                 TEST SYNCH FLAG AGAIN
TIMER17  L     R5,RBCDE                POINT TO CDE/LPDE
         USING CDENTRY,R5
         STCM  R9,B'0111',WKCELL1      STORE TCB ADDR
         STRING '  TCB: ',(WKCELL1,3,X),'   Program: ',CDNAME,         X
               INTO=LINE
         BRAS  R14,SPACE2              Double Space
*
*        STAE/ESTAE
*
         ICM   R5,B'1111',TCBSTAB      First SCB
         JZ    TIMER49                 no SCB, jump
         USING SCB,R5
*--loop
TIMER41  L     R6,SCBXPTR              SCB EXTENSION
         USING SCBX,R6
         STCM  R5,B'0111',WKCELL1      STORE SCB ADDR
         L     R1,SCBEXIT              EXIT ADDRESS
         BRAS  R14,CSVQUERY            GET MODULE NAME
         TM    SCBFLGS1,SCBSTAI        STAI/ESTAI ?
         JO    TIMER44                 yes, jump
         STRING '    SCB(',(WKCELL1,3,X),                              X
               ') RB(',(SCBOWNRA,,X),  STAE/ESTAE                      X
               ') Exit(',(SCBEXIT,,X),                                 X
               ') PGM(',(EP10+2,L'EP10-2,T),                           X
               ') Key(',(SCBPKEY,,X),                                  X
               ')',INTO=LINE
         J     TIMER45
TIMER44  STRING '    SCB(',(WKCELL1,3,X),                              X
               ') TCB(',(SCBOWNRA,,X), STAI/ESTAI                      X
               ') Exit(',(SCBEXIT,,X),                                 X
               ') PGM(',(EP10+2,L'EP10-2,T),                           X
               ') Key(',(SCBPKEY,,X),                                  X
               ')',INTO=LINE
TIMER45  BRAS  R14,SPACE1          <== next line
         STRING 16X,                                                   X
               'Parm(',(SCBXPARM,,X),                                  X
               ') Flgs1(',(SCBFLGS1,,X),                               X
               ') Flgs2(',(SCBFLGS2,,X),                               X
               ') Flgs3(',(SCBFLGS3,,X),                               X
               ')',INTO=LINE
         BRAS  R14,SPACE1          <== next line
TIMER48  ICM   R5,B'1111',SCBCHAIN     next SCB
         JNZ   TIMER41                 loop through SCB chain
*--endloop
TIMER49  EQU   *
*
*        SPIE/ESPIE
*
         L     R5,TCBPIE               point at SCA
         TM    HBB6608,L'HBB6608       OS/390 R8?               GSF0300
         JO    *+8                     yes, use 31-bit addr     GSF0300
         ICM   R5,B'1000',CVTPTR       no, use 24-bit addr (TCBPIEA)
*                                      clear first byte !!
         LTR   R5,R5                   any SPIE/ESPIE here?     GSF0300
         JZ    TIMER59                 no, jump                 GSF0300
         AIF   (NOT D'CVTH7708).TIMER50 z/OS R5?                 SJG704
         TM    HBB7708,L'HBB7708       running on z/OS R5        SJG704
         JZ    TIMER59                 no, leave                 RS1104
         L     R5,TCBSTCB              STCB                      SJG704
         USING STCB,R5                                           SJG704
         L     R6,STCBRPP              Recovery PIE PICA         SJG704
         USING RPP,R6                                            SJG704
         AGO   .TIMER51                                          RS1104
.TIMER50 ANOP                                                    SJG704
TIMER50  DS    0H                                                SJG704
         USING SCA,R5
         L     R6,SCARPPTR             Recovery PIE PICA
         USING RPP,R6
*loop
.TIMER51 ANOP
TIMER51  STCM  R6,B'0111',WKCELL1      STORE RPP ADDR
         TM    RPPFLAG1,RPPTYPE        ESPIE?
         JNO   TIMER54                 no, jump
         L     R1,RPPEXITA             EXIT ADDRESS
         BRAS  R14,CSVQUERY            GET MODULE NAME
         STRING '    RPP(',(WKCELL1,3,X),                              X
               ') RB(',(RPPPRB+1,3,X),                                 X
               ') Exit(',(RPPEXITA,,X),                                X
               ') PGM(',(EP10+2,L'EP10-2,T),                           X
               ')',INTO=LINE
         BRAS  R14,SPACE1          <== next line
         STRING 16X,                                                   X
               'Parm(',(RPPPARMA,,X),                                  X
               ') Flag1(',(RPPFLAG1,,X),                               X
               ') Mask(',(RPPITMK,3,X),                                X
               ') PICA(',(RPPPICA,,X),                                 X
               ') Token(',(RPPTOKEN,,X),                               X
               ')',INTO=LINE
         J     TIMER57
TIMER54  L     R5,RPPPICA              caller's PICA
         USING PICA,R5
         BRAS  R14,EXECKEY0            execute next instr in key=0
         LM    R0,R1,PICA              load KEY8 PICA
         STM   R0,R1,WKCELL2           store PICA into work area
         LA    R5,WKCELL2              make PICA addressable
         TM    PICITMK1,PICAEXT        EXTENDED-FORMAT PICA?
         JO    *+8                     yes, jump
         MVI   PICITMK3,0              no, zero 3rd mask byte
         SLR   R1,R1
         ICM   R1,B'0111',PICEXITA     EXIT ADDRESS
         BRAS  R14,CSVQUERY            GET MODULE NAME
         STRING '    RPP(',(WKCELL1,3,X),                              X
               ') RB(',(RPPPRB+1,3,X),                                 X
               ') Exit(',(PICEXITA,,X),                                X
               ') PGM(',(EP10+2,L'EP10-2,T),                           X
               ') Mask(',(PICAITMK,3,X),                               X
               ') PICA(',(RPPPICA+1,3,X),                              X
               ') Token(',(RPPTOKEN,,X),                               X
               ')',INTO=LINE
TIMER57  BRAS  R14,SPACE1          <== next line
TIMER58  ICM   R6,B'1111',RPPNPTR      next RPIEPICA
         JNZ   TIMER51                 loop through RPP chain
*endloop
TIMER59  EQU   *
*
*        Timers
*
         ICM   R5,B'1111',TCBTME       any timer here?
         JZ    TIMER69                 no, jump
         USING TQE,R5
*loop
TIMER61  STCM  R5,B'0111',WKCELL1      STORE TQE ADDR
         L     R1,TQEEXIT              EXIT ADDRESS
         BRAS  R14,CSVQUERY            GET MODULE NAME
         MVI   EP10,C' '               CLEAR ORIGIN
         STRING 'Val(',(TQEVAL,8,X),   expiration time                 X
               INTO=NEXTLINE
         LA    R1,TQEVAL               pass TOD clock value
         BRAS  R14,STCKCONV            convert TOD clock to decimal
         STRING 'Date(',STCKDATE,                                      X
               ') Time(',(STCKTIME,8),                                 X
               INTO=NEXTLINE
TIMER64  EQU   *
         STRING '    TQE(',(WKCELL1,3,X),                              X
               ') Exit(',(TQEEXIT,,X),                                 X
               ') PGM(',(EP10+2,L'EP10-2,T),                           X
               ') ',(NEXTLINE,,T),     expiration date and time        X
               ')',INTO=LINE
         BRAS  R14,SPACE1          <== next line
         STRING 16X,                                                   X
               'Parm(',(TQEPARAM,,X),                                  X
               ') Flgs(',(TQEFLGS,,X),                                 X
               ') Flgs2(',(TQEFLGS2,,X),                               X
               ') Flgs3(',(TQEFLGS3,,X),                               X
               ') ID(',(TQEID,,X),                                     X
               ')',INTO=LINE
         BRAS  R14,SPACE1          <== next line
         ICM   R5,B'1111',TQELINK      end of chain?
         JNZ   TIMER61                 no, loop
*endloop
TIMER69  EQU   *
TIMER80  BRAS  R14,SCANTCB             NEXT TCB IN TREE
         JNZ   TIMER11
*ENDLOOP
         BRAS  R14,BLANK1              blank line
TIMER99  END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*  Name/Token Table:                                                  *
*                                                                     *
*    Name            Token (char)      Token (hex)                    *
*    DSNLOGREC           &             020D5650 02000048 00000000     *
*    IBMJESXCFAS                       0A206578 00000000 00000000     *
*    BBM6CSCAMVCT      d               09843F80 00000000 00000000     *
*    TCPIPAOE 6                        099B2040 00000000 00000000     *
*---------------------------------------------------------------------*
NTTAB50  BEGIN_PROC BASEREG=NO                                   RS0302
         L     R3,PSAAOLD-PSA(,0)      point at ASCB               $RS
         USING ASCB,R3                                             $RS
         L     R3,ASCBASSB             ASSB                        $RS
         USING ASSB,R3                                             $RS
         ICM   R4,B'1111',ASSBNTTP     Name/Token                  $RS
         JZ    NTTAB99                   no entries  jump          $RS
         USING NTTH,R4                                             $RS
         STRING '&TITLEPFX.Name/Token Table ','(LOCAL)',INTO=LINE
         BRAS  R14,SPACE2              BLANK LINE                  $RS
         ICM   R5,B'1111',NTTHNTTF     First NTTE                  $RS
         JZ    NTTAB90                 yes, no entries  jump       $RS
         USING NTTE,R5                                             $RS
         STRING '    Name',13X,'Token (char)     Token (hex)',         X
               INTO=LINE
         BRAS  R14,SPACE1              BLANK LINE                  $RS
*loop                                                              $RS
NTTAB70  DS    0H                                                  $RS
         STRING 4X,NTTENAME,           name (char)                     X
               1X,NTTETOKN,            token (char)                    X
               1X,(NTTETOKN,8,X),      token (hex)                     X
               1X,(NTTETOKN+8,8,X),    token (hex)                     X
               INTO=LINE                                           $RS
         TR    LINE,TRTDOTS            convert non-printable to dots
         BRAS  R14,SPACE1              single line                 $RS
         ICM   R5,B'1111',NTTENEXT     next entry                  $RS
         JNZ   NTTAB70                 jump if not zero            $RS
*endloop                                                           $RS
         BRAS  R14,BLANK1              blank line                  $RS
         J     NTTAB99                   no entries  jump          $RS
NTTAB90  STRING '  (none)',INTO=LINE
         BRAS  R14,SPACE2              BLANK LINE                  $RS
.NTTAB99 ANOP                                                      $RS
NTTAB99  END_PROC                                                  $RS
*---------------------------------------------------------------------*
*                                                                     *
*Addresses of selected local control-blocks                           *
*                                                                     *
*  ASCB 00FA0280  ASSB 019EBA80  CSCB 044B1D90  ASXB 009FE038         *
*  OUCB 019EB8F8  OUXB 019B4A10  SSIB 009F1F00  JSAB 019AE5D8         *
*  JSCB 009FFBDC   JCT 009DB0E8  JCTX 009DB1A8   SCT 009DB328         *
*                                                                     *
*---------------------------------------------------------------------*
ADDR200  BEGIN_PROC KW=LOCALADDRESSES,BASEREG=NO                 RS0302
         L     R9,PSATOLD-PSA(,0)      TCB
         L     R8,PSAAOLD-PSA(,0)      ASCB
         USING ASCB,R8
         STRING '&TITLEPFX.Addresses of selected local control-blocks',XNTO=LINE
               INTO=LINE
         BRAS  R14,SPACE2              double space
         L     R7,ASCBASXB             ASXB
         USING ASXB,R7
         STRING '  ASCB ',(PSAAOLD-PSA,,X),                            X
               '  ASSB ',(ASCBASSB,,X),                                X
               '  CSCB ',(ASCBCSCB,,X),                                X
               '  ASXB ',(ASCBASXB,,X),                                X
               '  ACEE ',(ASXBSENV,,X),                                X
               INTO=LINE
         BRAS  R14,SPACE1              single space
ADDR210  EQU   *
         L     R6,TCBJSCB              JSCB
         USING IEZJSCB,R6
         L     R5,ASCBASSB             ASSB
         USING ASSB,R5
         L     R4,ASSBJSAB             yes, JSAB exists
         L     R3,JSCBSSIB             SSIB
         USING SSIB,R3
         STRING '  OUCB ',(ASCBOUCB,,X),                               X
               '  OUXB ',(ASCBOUXB,,X),                                X
               '  SSIB ',(JSCBSSIB,,X),                                X
               '  JSAB ',((R4),,X),                                    X
               '   TCT ',(TCBTCT,,X),                                  X
               '  $SJB ',(SSIBSUSE,,X), JES2 SJB                       X
               INTO=LINE
         BRAS  R14,SPACE1              single space
ADDR220  EQU   *
         L     R5,PSCB@                Protected Step Control Block
         USING PSCB,R5
         STRING '   LWA ',(LWA@,,X),                                   X
               '   TSB ',(ASCBTSB,,X),                                 X
               '  PSCB ',(PSCB@,,X),                                   X
               '   UPT ',(UPT@,,X),                                    X
               '   ECT ',(ECT@,,X),                                    X
               '  RLGB ',(PSCBRLGB,,X),   RE-LOGON Buffer              X
               INTO=LINE
         BRAS  R14,SPACE1              single space
ADDR230  EQU   *
         L     R8,TCBJSCB              JSCB
         USING IEZJSCB,R8
         L     R7,JSCBJCT              JCT prefix
         LA    R7,16(,R7)              skip prefix
         USING INJMJCT,R7
         L     R6,JSCSCT               SCT prefix
         LA    R6,16(,R6)              skip prefix
         USING INSMSCT,R6
         SLR   R5,R5
         ICM   R5,B'0111',JCTJCTX      JCT Extension
         LA    R5,16(,R5)              skip prefix
         SLR   R4,R4
         ICM   R4,B'0111',SCTXBTTR     SCT Extension
         LA    R4,16(,R4)              skip prefix
         STRING '  JSCB ',(TCBJSCB,,X),                                X
               '   JCT ',((R7),,X),                                    X
               '  JCTX ',((R5),,X),                                    X
               '   SCT ',((R6),,X),                                    X
               '  SCTX ',((R4),,X),                                    X
               INTO=LINE
         BRAS  R14,SPACE1              single space
         STRING ' LINES ',(LINE1PTR,,X),                               X
               '   R13 ',((R13),,X),                                   X
               INTO=LINE
         BRAS  R14,SPACE2              double space
ADDR240  EQU   *
ADDR299  END_PROC
         TITLE 'SHOWMVS &REL - BRIF Invocation Routine'
***********************************************************************
*                                                                     *
*        INVOKE ISPF/PDF "BRIF" SERVICE                               *
*                                                                     *
*          1. ATTACH the LOCATE/OBTAIN sub-task                       *
*                                                                     *
*          2. Invoke BRIF                       (ISPF mode only)      *
*                                                                     *
*          or                                                         *
*                                                                     *
*          2. Write out lines to //SHOWMVS DD   (Hard-copy mode only) *
*                                                                     *
***********************************************************************
BRIF     BEGIN_PROC BASEREG=YES        Internal                  RS0302
*
*        Calculate number of lines written to buffer
*
         LR    R1,R10                  LAST LINE
         SL    R1,LINE1PTR             SIZE
         SR    R0,R0
         D     R0,=A(L'LINE)           NUMBER OF LINES
         ST    R1,NUMLINES             FOR BRIF
*
*        free the unused part of the working-storage area.
*
         LA    R1,4095                 start of free space
         LA    R2,NEXTLINE(R1)         start of free space
         N     R2,=F'-4096'            round up to a page boundary
         LM    R3,R4,LINE1PTR          addr/length of lines buffer
         ALR   R3,R4                   END OF BUFFER
         SR    R3,R2                   LENGTH OF UNUSED STORAGE
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    BRIF211                 yes, jump
         FREEMAIN RU,A=(R2),LV=(R3)    FREE UNUSED STORAGE
         J     BRIF215                 yes, jump
BRIF211  LR    R0,R3                   length for FREEMAIN
         LR    R1,R2                   address for FREEMAIN
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES Free Unused Stor
*
BRIF215  EQU   *
         SL    R2,LINE1PTR             LENGTH OF STORAGE USED
         ST    R2,LINE1PTR+4           STORE IT FOR LAST FREEMAIN
*
         TM    BRIF_MODE,L'BRIF_MODE   PARM=BROWSE ?
         JO    BRIF240                 yes, jump
         BRAS  R14,WAIT_FOR_SUB_TASK   wait until subtask completes
BRIF240  EQU   *
         SYNCH BRIF300,RESTORE=YES
*
*        Force the sub-task to terminate by freeing up the storage.
*        (the sub-task stops when it reaches an X'00' byte).
*
BRIF250  EQU   *
         TM    BRIF_MODE,L'BRIF_MODE   PARM=BROWSE ?
         JZ    BRIF255                 no, jump
         LM    R1,R2,LINE1PTR          addr/length
         ALR   R2,R1                   end addr + 1
         BCTR  R2,0                    last byte of dynamic strge area
         PGSER R,RELEASE,              RELEASE MEMORY                  X
               A=(R1),                 FROM                            X
               EA=(R2)                 TO
         BRAS  R14,WAIT_FOR_SUB_TASK   wait until subtask completes
BRIF255  EQU   *
*
         LM    R1,R2,SMS_SSOB          Addr & len of SMS work area
         LTR   R1,R1                   SMS work area allocated?
         JZ    BRIF999                 no, exit
*****    LA    R1,0(,R1)               yes, get rid of VL bit
         FREEMAIN RU,LV=(R2),A=(R1)    FREE SMS WORK AREA
         J     BRIF999                 exit
*---------------------------------------------------------------------*
*
*        This code always executes KEY=TCB
*
*---------------------------------------------------------------------*
BRIF300  EQU   *
*
*        When AUTH=ESR, copy the protected Dynamic Storage Area to
*        the unprotected area.
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JNO   BRIF310                 NO, JUMP
         LM    R14,R15,UNPROTWK
         LR    R0,R13
         LR    R1,R15
         MVCL  R14,R0
         L     R13,UNPROTWK            Point at unprotected area
BRIF310  EQU   *
         LA    R0,RCVYSAVE             DIALOG DATA PTR
         ST    R0,RCVYSAVE             DIALOG DATA PTR
*
         TM    TCP_MODE,L'TCP_MODE     TCPIP ?                   RS0302
         JO    BRIF900                 YES, JUMP                 RS0302
*
         TM    HARDCOPY,L'HARDCOPY     Is this a hardcopy run?
         JO    BRIF800                 YES, JUMP
*
         TM    EDIF_MODE,L'EDIF_MODE   MODE=EDIT ?
         JO    BRIF400                 yes, jump
*
         TM    PUTLINE,L'PUTLINE       MODE=PUTLINE?
         JO    BRIF500                 yes, jump
*
         MVC   WKCELL1,BLANKS          DEFAULT PANEL
         CLI   ZENVIR+5,C'4'           ISPF V4 ?
         JL    *+10                    NO, USE DEFAULT PANEL
         MVC   WKCELL1,=C'ISRBROBA'    ISPF V4
         XCALL ISPLINK,(=C'BRIF',      ISPF FUNCTION                   X
               TITLE,                  dsname                          X
               =C'F ',                 RECFM                           X
               =A(L'LINE),             LRECL                           X
               =A(RDRTNE),             READ ROUTINE                    X
               0,                      Command rtne addr               X
               RCVYSAVE,               PARM FOR READ ROUTINE           X
               WKCELL1)                PANEL (ISRBROBF/ISRBROBA)
         EXIT                          EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        EDIT mode: invoke EDIF                                       *
*                                                                     *
*---------------------------------------------------------------------*
BRIF400  EQU   *
         XCALL ISPLINK,(=C'EDIF',      ISPF FUNCTION                   X
               TITLE,                  DATA SET NAME                   X
               =C'TEXT    ',           PROFILE NAME                    X
               =C'F ',                 RECFM                           X
               =A(L'LINE),             LRECL                           X
               =A(RDRTNE),             READ ROUTINE                    X
               =A(WRITERTN),           WRITE ROUTINE                   X
               0,                      COMMAND EXIT                    X
               RCVYSAVE)               PARM FOR READ ROUTINE
         EXIT                          EXIT
*---------------------------------------------------------------------*
*        Dummy write routine for EDIF                                 *
*---------------------------------------------------------------------*
WRITERTN SAVE  (14,12)
         RETURN (14,12),RC=16          I/O error
*---------------------------------------------------------------------*
*                                                                     *
*        PUTLINE Mode: Issue PUTLINE                                  *
*                                                                     *
*---------------------------------------------------------------------*
BRIF500  EQU   *
         MVI   SUB_ECB1,0
         STAX  STAX00,REPLACE=NO,USADDR=(R13),MF=(E,WASTAX)
         MVI   WASTAX,C'N'             stop flag
*
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         JNO   BRIF510                 no ISPF, jump
         TM    SHORT_PUTLINE,L'SHORT_PUTLINE SHORT_PUTLINE mode ?
         JO    BRIF510                 yes, jump
         XCALL ISPLINK,                ISPF interface                  X
               (=C'CONTROL',           ISPF FUNCTION                   X
               =C'DISPLAY',            Key-word                        X
               =C'LINE',               Key-word                        X
               =F'1')                  Key-word
*LOOP
BRIF510  EQU   *
         XCALL =A(RDRTNE),             READ ROUTINE                    X
               (WKCELL1,               addr of record                  X
               =A(L'LINE),             LRECL                           X
               WKCELL2,                no RRN                          X
               RCVYSAVE),              DDATA                           X
               ERRET=BRIF590           end-of-data
         L     R10,WKCELL1             A(LINE)
*        XC    IECSDSL1(140),IECSDSL1
         STRING ((R10),L'LINE,T),INTO=(IECSDSL1+4,L'LINE)
         LTR   R15,R15                 BLANK LINE?
         JNZ   BRIF517                 NO, JUMP
         TM    SHORT_PUTLINE,L'SHORT_PUTLINE SHORT_PUTLINE mode ?
         JZ    BRIF519                 no, skip blank lines
         LA    R15,1(,R15)             length=1
BRIF517  EQU   *
         LA    R4,4(,R15)              length+4
         SLL   R4,16                   R4=llll0000
         STCM  R4,B'1111',IECSDSL1     format header
         TR    IECSDSL1+4(L'LINE),TRTPRINT
*
         XC    PUTLINEL(12),PUTLINEL                             RS0503
         L     R2,UPT@                 UPT ADDRESS
         L     R3,ECT@                 ECT ADDRESS
         LA    R1,IECSDSL1             debug
         PUTLINE PARM=PUTLINEL,                                        X
               UPT=(R2),ECT=(R3),ECB=SUB_ECB1,                         X
               OUTPUT=(IECSDSL1,TERM,SINGLE,DATA),                     X
               MF=(E,TENWORDS)
BRIF519  CLI   WASTAX,C'Y'             ATTN received?
         JNE   BRIF510                 no, keep on PUTLINEing
*ENDLOOP
BRIF590  EQU   *
         STAX  ,                       cancel previous STAX
         EXIT                          EXIT
*
STAX00   L     R13,8(,R1)              ADDRESS OF WORK AREA
         MVI   WASTAX,C'Y'             stop flag
         BR    R14                     AND RETURN
*---------------------------------------------------------------------*
*                                                                     *
*        Hard-copy mode: write lines to //SHOWMVS DD                  *
*                                                                     *
*---------------------------------------------------------------------*
BRIF800  EQU   *
         GETMAIN R,LV=CODE24L          GET 24-BIT WORK AREA
         MVC   0(CODE24L,R1),CODE24    MOVE 24-BIT CODE MODEL
         LR    R7,R1
         USING CODE24,R7
         OPEN  DCB24,MF=(E,OPEN24)
         LA    R3,1                    LINE COUNT (for page eject)
*LOOP
BRIF810  EQU   *
         XCALL =A(RDRTNE),             BRIF READ ROUTINE               X
               (WKCELL1,               addr of record                  X
               =A(L'LINE),             LRECL                           X
               WKCELL2,                no RRN                          X
               RCVYSAVE),              DDATA                           X
               ERRET=BRIF890           end-of-data
         L     R1,WKCELL1              A(LINE)
         MVC   WORK256(L'LINE),0(R1)   move to un-protected storage
         TR    WORK256(L'LINE),TRTPRINT Get rid of garbage
         BASSM R2,R7                   EXECUTE 24-BIT CODE
         LR    R2,R1                   save record address
         LH    R1,DCBLRECL-IHADCB+DCB24   pick up LRECL
         STRING 1X,(WORK256,L'LINE),INTO=((R2),(R1))
         CLI   WORK256,C' '            IS THIS A NEW SECTION?
         JE    BRIF813                 NO, JUMP
         CHI   R3,6                    AT LEAST 6 LINES LEFT?
         JNH   BRIF814                 NO, NEW PAGE
BRIF813  BRCT  R3,BRIF815              DECREMENT LINE COUNT
BRIF814  MVI   0(R2),C'1'              CTLASA
         LA    R3,&LINESPPG            MAX LINES PER PAGE        DL1199
BRIF815  J     BRIF810                 NEXT LINE
*ENDLOOP
BRIF890  CLOSE MF=(E,OPEN24)
         FREEPOOL DCB24
         FREEMAIN R,LV=CODE24L,A=(R7) FREE 24-BIT WORK AREA
         DROP  R7                      CODE24
         EXIT                          EXIT
*---------------------------------------------------------------------*
*        RMODE24 PUT Routine (hard-copy mode)                         *
*              Moved to RMODE24 work-area                             *
*              Invoked via BASSM R2,R7                                *
*---------------------------------------------------------------------*
         USING CODE24,R7
         CNOP  0,4
CODE24   LR    R14,R13                 31-BIT SAVE AREA
         LA    R13,SAVE24              24-BIT SAVE AREA
         ST    R14,4(,R13)             31-BIT SAVE AREA
         PUT   DCB24                   PUT LOCATE
         L     R13,4(,R13)             31-BIT SAVE AREA
         BSM   0,R2                    GOBACK WITH AMODE31
OPEN24   OPEN  (DCB24-DCB24,OUTPUT),MF=L
DCB24    DCB   DSORG=PS,MACRF=PL,DDNAME=SHOWMVS,                       X
               RECFM=FBA,LRECL=&LINESIZE                           JM
SAVE24   DS    18F                     24-bit Save area
CODE24L  EQU   *-CODE24                LENGTH OF DYNAMIC STORAGE AREA
         ORG   SAVE24                  save some space
         DROP  R7                      CODE24
*---------------------------------------------------------------------*
*                                                               RS0302*
*        TCP/IP client mode; write lines to a socket            RS0302*
*                                                               RS0302*
*---------------------------------------------------------------------*
BRIF900  EQU   *                                                 RS0302
*LOOP                                                            RS0302
BRIF910  EQU   *
         XCALL =A(RDRTNE),             BRIF READ ROUTINE               X
               (WKCELL1,               addr of record                  X
               =A(L'LINE),             LRECL                           X
               WKCELL2,                no RRN                          X
               RCVYSAVE),              DDATA                           X
               ERRET=BRIF990           end-of-data               RS0302
         L     R1,WKCELL1              A(LINE)                   RS0302
         MVC   WORK256(L'LINE),0(R1)   move to un-protected storageTCP
         TR    WORK256(L'LINE),TRTPRINT Get rid of garbage       RS0302
         MVI   WORK256+L'LINE,X'FF'    mark end of line!!!       RS0302
         MVC   WKCELL1(4),=F'&LINESIZE'       length             RS0302
         EZASMI TYPE=WRITE,       Issue Macro                          X
               S=SOC_DESC,        STREAM SOCKET                        X
               NBYTE=WKCELL1,     SIZE OF BUFFER                       X
               BUF=WORK256,       BUFFER                               X
               ERRNO=LRSNCODE,    (Specify ERRNO field)                X
               RETCODE=LRETCODE   (Specify RETCODE field)        RS0302
BRIF913  BRCT  R3,BRIF910              DECREMENT LINE COUNT      RS0302
*ENDLOOP                                                         RS0302
BRIF990  DS    0H                                                RS0302
         MVC   WKCELL1(4),=F'1'                                  RS0302
         EZASMI TYPE=SHUTDOWN,    Issue Macro                          X
               S=SOC_DESC,        STREAM                               X
               HOW=WKCELL1,       End communication in both directions X
               ERRNO=LRSNCODE,    (Specify ERRNO field)                X
               RETCODE=LRETCODE    (Specify RETCODE field)       RS0302
         MVC   WKCELL1(4),=F'&LINESIZE'       length             RS0302
         EZASMI TYPE=READ,        Issue Macro                          X
               S=SOC_DESC,        STREAM SOCKET                        X
               NBYTE=WKCELL1,     SIZE OF BUFFER                       X
               BUF=WORK256,       (BUFFER)                             X
               ERRNO=LRSNCODE,    (Specify ERRNO field)                X
               RETCODE=LRETCODE   (Specify RETCODE field)        RS0302
         MVC   WKCELL1(4),=F'1'                                  RS0302
         EZASMI TYPE=SHUTDOWN,    Issue Macro                          X
               S=SOC_DESC,        STREAM                               X
               HOW=WKCELL1,       End communication in both directions X
               ERRNO=LRSNCODE,    (Specify ERRNO field)                X
               RETCODE=LRETCODE    (Specify RETCODE field)       RS0302
         EZASMI TYPE=TERMAPI      Issue Macro                    RS0302
         EXIT                          EXIT                      RS0302
*---------------------------------------------------------------------*
WAIT_FOR_SUB_TASK EQU *
         TM    SUB_TASK_ATTACHED,L'SUB_TASK_ATTACHED
         BNOR  R14                     NO, GOBACK
         WAIT  1,ECB=SUB_ECB1          wait until subtask completes
         BR    R14
BRIF999  END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*        Allocate/Free dynamic storage in SP=230,KEY=4,TCB=myTCB      *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
STORAGE_SP230 BEGIN_PROC SAVE=NO       BASEREG=YES Free/Getmain req
*        SYSSTATE ARCHLVL=0            avoid literals            RS1002
*                                        need to talk with GSF   RS1002
         LR    R2,R0                   LENGTH
         LA    R3,0(,R1)               ADDR/LOC
         L     R4,PSATOLD-PSA(,0)      current TCB
         BALR  R6,0
         USING *,R6
         L     R7,PSAAOLD-PSA(,0)      MY ASCB
         MODESET EXTKEY=ZERO
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=ESRAUTH
         LA    R1,1                    literals not allowed here
         CLR   R3,R1                   check loc/addr
         JL    STOR230B                GETMAIN LOC=BELOW (R1=0)
         JE    STOR230A                GETMAIN LOC=ANY (R1=1)
STOR230F FREEMAIN RU,                  REGISTER, UNCOND                -
               LV=(R2),                LENGTH                          -
               A=(R3),                 LENGTH                          -
               SP=230,                 PRIVATE, HIGH, NOT FETCH PRTCTD -
               KEY=KEY4,               KEY=4                           -
               BRANCH=YES
         J     STOR230X                exit
STOR230A GETMAIN RU,                   REGISTER, UNCOND                -
               LV=(R2),                LENGTH                          -
               SP=230,                 PRIVATE, HIGH, NOT FETCH PRTCTD -
               KEY=KEY4,               KEY=4                           -
               LOC=ANY,                RMODE=31                        -
               BNDRY=PAGE,             page-aligned                    -
               BRANCH=YES
         J     STOR230X                exit
STOR230B GETMAIN RU,                   REGISTER, UNCOND                -
               LV=(R2),                LENGTH                          -
               SP=230,                 PRIVATE, HIGH, NOT FETCH PRTCTD -
               KEY=KEY4,               KEY=4                           -
               LOC=BELOW,              RMODE=24                        -
               BNDRY=PAGE,             page-aligned                    -
               BRANCH=YES
STOR230X LR    R3,R1                   save addr accross SETLOCK
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=ESRAUTH
         LR    R1,R3                   return address
         EXIT
*        SYSSTATE ARCHLVL=1            set back ARCHLVL=1        RS1002
         POP   USING
*---------------------------------------------------------------------*
*                                                                     *
*        Get Sub-system Version Information                           *
*                                                                     *
*---------------------------------------------------------------------*
GET_SSVI BEGIN_PROC SAVE=NO            BASEREG=YES IEFSSREQ req  RS0402
         BAKR  R14,0
         BALR  R12,0
         USING *,R12
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR ?
         JNO   GETSSVI2                no, jump
         MODESET KEYADDR=OLDPKF,WORKREG=2 switch to KEY=8
         L     R13,UNPROTWK            addr of unprotected work area
         OI    AUTH_ESR,L'AUTH_ESR     AUTH=ESR
GETSSVI2 EQU   *
*----
         LA    R2,WORK256
         XC    0(256,R2),0(R2)         clear work area
         USING SSOB,R2
         ST    R2,SSOB+252             SSOB_PTR
         OI    SSOB+252,X'80'
         MVI   SSOBLEN+1,SSOBHSIZ      SSOB length
         MVC   SSOBID,=C'SSOB'         SSOB
         MVI   SSOBFUNC+1,SSOBSSVI     FUNCTION
*
         LA    R3,SSOB+SSOBHSIZ        SSIB
         ST    R3,SSOBSSIB             store SSIB addr into SSOB
         USING SSIB,R3
         MVC   SSIBID,=C'SSIB'         SSIB
         MVI   SSIBLEN+1,SSIBSIZE      SSIB length
         EREG  R1,R1                   reload Reg 1
         MVC   SSIBSSNM,0(R1)          SUB-SYSTEM NAME
*
         LA    R3,SSIB+SSIBSIZE        SSVI WORK AREA
         ST    R3,SSOBINDV             FUNCTION-DEPENDENT AREA
         USING SSVI,R3
         MVI   SSVILEN,2               LENGTH=512
         MVI   SSVIVER,SSVICVER        VERSION
         MVC   SSVIID,=C'SSVI'         SSVI
         MVI   SSVIFLEN+1,SSVIFSIZ     LENGTH OF HEADER
         LA    R1,SSOB+252             SSOB_PTR
         IEFSSREQ
         LTR   R15,R15                 OK?
         JNZ   GETSSVI9                bad, exit
         LA    R1,SSVI                 return addr of SSVI
*---
         SLR   R3,R2                   offset to SSVI in work area
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR ?
         JNO   GETSSVI9                no, exit
         L     R13,PSATOLD-PSA(,0)     my TCB
         L     R13,TCBUSER-TCB(,R13)   protected work area
         MODESET EXTKEY=KEY4           switch to KEY=4
         LA    R4,L'WORK256            length
         IC    R5,OLDPKF               source key
         MVCK  WORK256(R4),0(R2),R5    Move line to buffer
         LA    R3,WORK256(R3)          change offset to address
         LA    R1,SSVI                 return addr of SSVI
GETSSVI9 PR
         DROP  R2,R3                   SSOB,SSVI
.GETSSVI9 ANOP
         TITLE 'SHOWMVS &REL - General-purpose Sub-Routines'
***********************************************************************
*                                                                     *
*        SUB-ROUTINES                                                 *
*                                                                     *
***********************************************************************
*---------------------------------------------------------------------*
*                                                                     *
*        LPAQ/PLPA search routine                                     *
*                                                                     *
*        On entry:   R1 points to an 8-byte EP name                   *
*                                                                     *
*        On exit:    R0 contains the entry-point address (CDENTPT)    *
*                    R1 points to the CDE/LPDE (zero if not found)    *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
LPASEARCH BEGIN_PROC SAVE=STDSAVE      BASEREG=NO               RS0502
         DROP  R11                     used by IEALPDSR
         L     R3,CVTPTR(,0)           point to CVT
         USING CVTMAP,R3
*
*        search the ACTIVE LPA Q
*
         LA    R8,ALPACDE1             START OF ALPAQ or DLPAQ
         LR    R9,R1                   Module name
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE
         BALR  R14,R15                 USES R0, R1, R8, R9, R11
         J     LPASCH9             +0  FOUND, QUIT
*
*        search the PLPA directory
*
         LM    R0,R1,0(R9)             EP NAME
         L     R15,CVTLPDSR            LPA SEARCH ROUTINE
         BALR  R14,R15                 USES R6-R9
         J     LPASCH8             +0  FOUND, QUIT
         SLR   R11,R11                 Not found
         SLR   R15,R15                 Not found
         J     LPASCH95                exit
*
LPASCH8  LR    R11,R8                  Pass LPDE address
*
LPASCH9  L     R15,CDENTPT-CDENTRY(,R11) entry point address
*
LPASCH95 L     R14,12(,R13)            Restore return address
         LR    R0,R15                  R0 = EP_address
         LR    R1,R11                  R1 = CDE_address
         LM    R2,R12,28(R13)          restore registers
         BR    R14                     goback
         POP   USING
*---------------------------------------------------------------------*
*                                                                     *
*        JPAQ search routine                                          *
*                                                                     *
*        On entry:   R1 points to an 8-byte EP name                   *
*                                                                     *
*        On exit:    R15 contains the return code (OK=0, not_found=4) *
*                    R0 contains the entry-point address (CDENTPT)    *
*                    R1 points to the CDE                             *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
JPASEARCH BEGIN_PROC SAVE=STDSAVE      BASEREG=NO               RS0502
         DROP
         L     R3,CVTPTR(,0)           point to CVT
         USING CVTMAP,R3
         L     R4,PSATOLD-PSA(,0)      point to TCB
         USING TCB,R4
         L     R4,TCBJSTCB             point to JS TCB
         LA    R8,TCBJPQ               START OF CDE CHAIN
         LR    R9,R1                   Module name
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE
         BALR  R14,R15                 USES R0, R1, R8, R9, R11
         J     JPASCH9             +0  FOUND, QUIT
*
*        Module not found in JPAQ
*
         LM    R14,R12,12(R13)         restore registers
         LA    R15,4                   R15=4 (not found)
         SLR   R0,R0                   zero EP_address
         SLR   R1,R1                   zero CDE_address
         BR    R14                     goback
*
*        Return CDE addr in R1 and EP addr in R0
*
JPASCH9  L     R14,12(,R13)            Restore return address
         SLR   R15,R15                 RC=00
         L     R0,CDENTPT-CDENTRY(,R11) entry point address
         LR    R1,R11                  R1 = CDE_address
         LM    R2,R12,28(R13)          restore registers
         BR    R14                     goback
         POP   USING
*---------------------------------------------------------------------*
*                                                                     *
*        Search a module in MLPA, PLPA, link-list and STEPLIB and     *
*        retrieve the dsname of the PDS from which it was loaded.     *
*                                                                     *
*          Input:  R0 points to EP name                               *
*                                                                     *
*          Output: PDS2NAME contains EP name                          *
*                  PDATA_DDN contains ddname                          *
*                  PDATA_DSN contains dsname                          *
*                                                                     *
*---------------------------------------------------------------------*
$LTORG   LOCTR
DOBLDL1  LR    R14,R0                  module name
         LA    R14,8(,R14)             return address
*
DOBLDL2  EQU   *
         L     R1,CVTPTR(,0)           LINKLIST DCB
         L     R1,CVTLINK-CVTMAP(,R1)  LINKLIST DCB
         J     DOBLDL10
*
DOBLDL3  SLR   R1,R1                   DCB=0 (search tasklibs)
         J     DOBLDL10
MLPADDN  DC    CL8'-MLPA-'
PLPADDN  DC    CL8'-PLPA-'
LINKDDN  DC    CL8'-LNKLST-'
*
DOBLDL10 BEGIN_PROC SAVE=NO            BASEREG=YES UNKNOWN       RS0502
         STM   R14,R12,12(R13)         save regs
         L     R3,CVTPTR(,0)           point to CVT
         USING CVTMAP,R3
         LR    R4,R0                   module name
         LR    R5,R1                   DCB address
         BALR  R12,0
         USING *,R12
         MVC   PDATA_DSN,BLANKS        clear dsname
*
*        search the ACTIVE LPA Q
*
         MVC   PDATA_DDN,MLPADDN       DDN=-MLPA-
         PUSH  USING
         DROP  R11                     used by QCDSR
         LA    R8,ALPACDE1             START OF ALPAQ or DLPAQ
         LR    R9,R4                   Module name
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE
         BALR  R14,R15                 USES R0, R1, R8, R9, R11
         J     DOBLDL90            +0  FOUND, QUIT
         L     R11,64(,R13)        +4  reload main base reg
         POP   USING
*
*        Search the PLPA directory
*
         MVC   PDATA_DDN,PLPADDN       DDN=-PLPA-
         LM    R0,R1,0(R4)             EP NAME
         L     R15,CVTLPDSR            LPA SEARCH ROUTINE
         BALR  R14,R15                 USES R6-R9
         J     DOBLDL90            +0  FOUND, QUIT
*
*        Search the tasklib directories (R5=0)
*        Search the linklist directory (R5=CVTLINK)
*
         MVC   PDATA_DDN,BLANKS        DDN=' '
         SYNCHX SAFEBLDL,RESTORE=YES                             RS1002
         LTR   R15,R15                 OK?
         JNZ   DOBLDL99                no, exit
         STCM  R0,B'0011',PDS2CNCT     PDS2CNCT,PDS2LIBF
*
         MVC   PDATA_DDN,LINKDDN       module found in link-list
         LTR   R5,R5                   DCB=0 ?
         JNZ   DOBLDL80                no, found in linklist
         CLI   PDS2LIBF,PDS2LLNK       found in link-list?
         JE    DOBLDL80                yes, jump
*
*        found in tasklib - retrieve ddname
*
         SLR   R6,R6
         IC    R6,PDS2LIBF             TCB count
         BCTR  R6,0                    minus 1
         L     R9,PSATOLD-PSA(,0)      own TCB
*loop
DOBLDL47 BRAS  R14,JLBDDN           <- retrieve tasklib ddname
         L     R9,TCBOTC-TCB(,R9)      previous TCB
         BRCT  R6,DOBLDL47             get tasklib TCB
*endloop
*
*        retrieve dsname from JFCB<-SIOT<-DSAB
*
DOBLDL50 L     R9,JSTCB                own Job-step TCB
         L     R2,TCBJSCB-TCB(,R9)     current JSCB
         USING IEZJSCB,R2
         L     R2,JSCDSABQ             DSAB QDB
         USING DSABQDB,R2
         L     R2,DSQFRSTP             FIRST DSAB ON CHAIN
         USING DSAB,R2
*loop
DOBLDL56 L     R5,DSABSIOT             get SIOT address
         USING INDMSIOT,R5
         CLC   PDATA_DDN,SCTDDNAM      is it my ddname?
         JNE   DOBLDL59                No, try next DSAB
         SLR   R3,R3
         IC    R3,PDS2CNCT             pick-up concat#
*--loop
DOBLDL57 L     R5,DSABSIOT             get SIOT address
         L     R7,SJFCBPTR             GET JFCB ADDRESS FROM SIOT
         LTR   R3,R3                   concat # = zero ?
         JZ    DOBLDL88                yes, dsname found
         BCTR  R3,0                    decrement concat #
         ICM   R2,B'1111',DSABFCHN     NEXT DSAB
         JNZ   DOBLDL57                Not finished yet, keep on going
*--endloop
DOBLDL59 ICM   R2,B'1111',DSABFCHN     NEXT DSAB
         JNZ   DOBLDL56                Not finished yet, keep on going
*endloop
         J     DOBLDL90               The dsname could not be retrieved
*
*        find link-list dsname from LLT
*
DOBLDL80 SLR   R3,R3
         IC    R3,PDS2CNCT             pick-up concat#
         MH    R3,=Y(LLTNEXT-LLTENTRY) make it an offset into the LLT
         L     R14,CVTPTR(,0)          CVT address
         L     R15,CVTLLTA-CVTMAP(,R14) link-list table
         AIF   (NOT D'CVTH6603).DOBLDL85                        GSF0300
         TM    HBB6603,L'HBB6603       OS/390 R3?               GSF0300
         JNO   DOBLDL85                no, jump                 GSF0300
         L     R14,PSAAOLD-PSA(,0)     A(ASCB)                  GSF0300
         L     R14,ASCBASSB-ASCB(,R14) A(ASSB)                  GSF0300
         L     R14,ASSBDLCB-ASSB(,R14) A(DLCB)                  GSF0300
         L     R15,DLCBLLT@-DLCB(,R14) A(LLT)                   GSF0300
.DOBLDL85 ANOP                                                  GSF0300
DOBLDL85 DS    0H                                               GSF0300
         LA    R7,LLTDSN-LLT(R3,R15)   change offset to address
*
DOBLDL88 MVC   PDATA_DSN,0(R7)         move dsname
*
DOBLDL90 SLR   R15,R15                 rc=0
         MVC   PDS2NAME,0(R4)          EPNAME for SAFELOAD
*
DOBLDL99 L     R14,12(,R13)            restore caller's regs
         LM    R2,R12,28(R13)          restore caller's regs
         BR    R14
*
*        Issue BLDL in TCB key to prevent S112-01 abend
*
SAFEBLDL L     R13,UNPROTWK            unprotected work-area
         MVC   CSVDWORK(2+2),=AL2(1,L'CSVDWORK)
         MVC   PDS2NAME,0(R4)          EPNAME
         BLDL  (R5),CSVDWORK           ISSUE BLDL
         ICM   R0,B'0011',PDS2CNCT     PDS2CNCT,PDS2LIBF
         EXIT
         DROPTEMP
*---------------------------------------------------------------------*
*                                                                     *
*        Load a module from a system or private library.              *
*                                                                     *
*        If the module is loaded from the link-list or from a         *
*        job/step/tasklib, then the first 512 bytes (from             *
*        load-point) are copied to WORK512.  This prevents S0C4-04    *
*        when the module is loaded into SP 251 and SHOWMVS running    *
*        key=4 is trying to access it.                                *
*                                                                     *
*          Input:  PDS2NAME contains module name                      *
*                  PDATA_DDN contains ddname                          *
*                                                                     *
*          Output: R1 points to first 512 bytes of module             *
*                  PDATA_DDN contains ddname                          *
*                                                                     *
*---------------------------------------------------------------------*
SAFELOAD BEGIN_PROC SAVE=STDSAVE       BASEREG=YES LOAD req
         BALR  R12,0
         USING *,R12
         SLR   R1,R1                   DCB=0
         CLI   PDATA_DDN,C'-'          system library ?
         JNE   SAFEL200                no, jump
         L     R1,CVTPTR(,0)           CVT
         L     R1,CVTLINK-CVTMAP(,R1)  DCB for SYS1.LINKLIB
SAFEL200 SYNCHX SAFELOAD_LOAD,RESTORE=YES issue load             RS1002
         LR    R2,R0                   save EP address
*
*        retrieve true name of the module if it was an alias
*
         L     R4,TCBLLS               POINT TO LAST LLE IN CHAIN
         USING LLE,R4
*LOOP
SAFEL221 L     R6,LLECDPT              CDE PTR
         USING CDENTRY,R6
         CLC   PDS2NAME,CDNAME         IS IT MY LLE?
         JE    SAFEL233                YES, JUMP
         ICM   R4,B'1111',LLECHN       CHECK FOR END OF CHAIN
         JNZ   SAFEL221                LOOP THROUGH LOAD LIST
*ENDLOOP
         J     SAFEL236                SOMETHING'S WRONG HERE
SAFEL233 TM    CDATTR,CDMIN            IS THIS A MINOR CDE?
         JNO   *+8                     NO, JUMP
         L     R6,CDXLMJP              YES, POINT TO MAJOR CDE/LPDE
SAFEL236 MVC   PDS2NAME,CDNAME         move name from CDE/LPDE
*
         CLC   PDATA_DDN,MLPADDN       -MLPA- ?
         JE    SAFEL900                yes, exit
         CLC   PDATA_DDN,PLPADDN       -PLPA- ?
         JE    SAFEL900                yes, exit
*
SAFEL300 CHI   R1,512                  max size
         JNH   *+8                     max size
         LA    R1,512                  max size
         IC    R15,OLDPKF              source key
         MVCK  WORK512(R1),0(R2),R15   move module to work area
         LA    R2,WORK512              return addr of work area
*
SAFEL900 SYNCHX SAFELOAD_DELETE        delete the module         RS1002
*
SAFEL999 L     R14,12(,R13)            restore caller's regs
         LR    R0,R7                   dsname
         LR    R1,R2                   EP address
         LM    R2,R12,28(R13)          restore caller's regs
         BR    R14
*
*        Issue LOAD macro in TCB key to avoid S306-0C
*
SAFELOAD_LOAD EQU *
         LA    R3,PDS2NAME             point at program name
         LR    R4,R1                   pass DCB address
         L     R13,UNPROTWK            point at unprotected work area
         XC    WORK256,WORK256         clear work area
         LOAD  EPLOC=(R3),             load the program                X
               DCB=(R4),               DCB address                     X
               LOADPT=WKCELL1,         return load-point address       X
               SF=(E,WORK256)
         CLC   =CL8'SORT',0(R3)        IS THIS SORT?
         JNE   *+8                     NO, USE ENTRY POINT
         L     R0,WKCELL1              USE LOAD-POINT FOR SORT
*
         SLL   R1,8                    clear AC(1) bit
         SRL   R1,5                    size in bytes
         ALR   R1,R0                   subtract load-point offset
         SL    R1,WKCELL1              subtract load-point offset
         LA    R1,0(,R1)               AMODE bit off
         BR    R14
SAFELOAD_DELETE EQU *
         DELETE EPLOC=PDS2NAME         delete the program
         BR    R14
         DROPTEMP
*---------------------------------------------------------------------*
*                                                                     *
*        Retrieve dsname that corresponds to a CDE (ESA 4.3)          *
*              On entry, R0 contains a 31-bit address                 *
*              On exit, R1 points to a dsname (if R15=0)              *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
CSVDSN   BEGIN_PROC SAVE=NO            BASEREG=YES CSVQUERY req
         USING *,R15
CSVD10   BAKR  R14,0                   save regs
         BALR  R12,0
         USING *,R12
         ST    R0,CSVDWORK             entry-point address
*
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     +
               INADDR=CSVDWORK,        ADDRESS                         +
               OUTEPNM=EP10+2,         RETURN EP NAME                  +
               OUTPDATA=PDATA,         PROVIDER DATA                   +
               OUTPID=PID,             PROVIDER ID                     +
               OUTEPTKN=MODTOKEN,      RETURN TOKEN                    +
               MF=(E,CSVQRYWK)         WORK AREA
         LTR   R2,R15                  pass return code
         JZ    CSVD17                  OK, continue
         STRING 'CSVQUERY Failed, R15=',((R2),,L),INTO=CSVDWORK
         LA    R1,CSVDWORK             message
         J     CSVD99                  EXIT WITH R15>0
*
CSVD17   CLC   =C'PGMF',PID            LOADED FROM JOBLIB/STEPLIB?
         JNE   CSVD31                  no, jump
         OC    PDATA,PDATA             Any provider data returned?
         JZ    CSVD51                  no, quit
         LA    R2,X'000000FF'          mask for NR
         N     R2,PDATA_TTRN           load TTRN from Provider Data
         CLI   PDATA+1,X'01'           LOADED FROM -LNKLST- ?
         JE    CSVD44                  yes, jump
         J     CSVD61                  JOBLIB/STEPLIB/TASKLIB
*
*        get module's TTRN in linklist (PID=LLAF)
*
CSVD31   CLC   =C'LLAF',PID            LOADED FROM LINK-LIST?
         JNE   CSVD51                  NO, EXIT
         MVC   CSVDWORK,=AL2(1,L'CSVDWORK)
         MVC   PDS2NAME,EP10+2         EPNAME
         L     R1,CVTPTR(,0)           CVT address
         L     R1,CVTLINK-CVTMAP(,R1)  link-list DCB
         BLDL  (1),CSVDWORK            ISSUE BLDL (to LLA)
         LTR   R15,R15
         LA    R1,BLANKS               dsname=''
         JNZ   CSVD99                  NOT FOUND, QUIT
         IC    R2,PDS2CNCT             pick-up concat#
         MVC   PDATA_DDN,LINKDDN       move ddname
*
*        find link-list dsname from LLT
*
CSVD44   MH    R2,=Y(LLTNEXT-LLTENTRY) make it an offset into the LLT
         L     R3,CVTPTR(,0)           CVT address
         L     R3,CVTLLTA-CVTMAP(,R3)  link-list table
         AIF   (NOT D'CVTH6603).CSVD49 OS390 R3 ?                RS0100
         TM    HBB6603,L'HBB6603       running on OS390 R3 ?     RS0100
         JNO   CSVD49                  no, jump                  RS0100
         L     R14,PSAAOLD-PSA(,0)     MY ASCB                   RS0100
         L     R14,ASCBASSB-ASCB(,R14) ASSB                      RS0100
         L     R14,ASSBDLCB-ASSB(,R14) CSVDLCB                   RS0100
         L     R3,DLCBLLT@-DLCB(,R14)  LLT                       RS0100
.CSVD49  ANOP                                                    RS0100
CSVD49   DS    0H                                                RS0100
         LA    R1,LLTDSN-LLT(R2,R3)    change offset to address
         J     CSVD98                  exit
*
CSVD51   STRING 'PID(',(PID,,T),')',INTO=WORK44
         LA    R1,WORK44               message
         LA    R15,4                   RC=4
         J     CSVD99                  exit
*
*        Loaded from JOBLIB/STEPLIB/TASKLIB
*
CSVD61   TM    PDATA,X'80'             loaded from a PDSE?
         JZ    CSVD61L                 no, jump
         L     R3,PDATA_DDN+4          yes, get LFMD address
         MVC   PDATA_DDN,044(R3)       move true ddname
CSVD61L  L     R3,PSATOLD-PSA(,0)      TCB
         L     R3,TCBTIO-TCB(,R3)      TIOT
         USING TIOT1,R3
         SLR   R0,R0                   PREPARE IC
*LOOP
CSVD62   CLC   PDATA_DDN,TIOEDDNM      is this my ddname ?
         JE    CSVD65                  yes, exit loop
         IC    R0,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY
         ALR   R3,R0                   BUMP UP TO NEXT ENTRY
         CLI   TIOELNGH,0              IS THIS THE END?
         JNZ   CSVD62                  NOT YET, LOOP THROUGH TIOT
*ENDLOOP
*        DDname has been freed (not found in TIOT)
*
         STRING (PDATA_DDN,,T),'+',((R2),,L),INTO=CSVDWORK
         LA    R1,CSVDWORK             message
         J     CSVD98                  exit
*
*        DDname found - Retrieve dsname from JFCB
*
CSVD65   LTR   R2,R2                   first data set in concat?
         JZ    CSVD66                  yes, exit
*loop
CSVD65L  IC    R0,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY
         ALR   R3,R0                   BUMP UP TO NEXT ENTRY
         BRCT  R2,CSVD65L              next concat#
*endloop
CSVD66   LA    R2,CSVDWORK+4           WORK AREA
         ST    R2,CSVDWORK             WORK AREA
         USING ZB505,R2
         XC    SWAEPAX,SWAEPAX         CLEAR WORK AREA
         MVC   SWVA,TIOEJFCB           SVA OF THE JFCB
         SWAREQ FCODE=RL,EPA=CSVDWORK,MF=(E,SWAREQL1),UNAUTH=YES
         L     R1,SWBLKPTR             31-BIT ADDRESS OF JFCB
CSVD98   SLR   R15,R15                 RC=0
.CSVD99  ANOP
CSVD99   PR
         POP   USING
*---------------------------------------------------------------------*
*        Sort table                                                   *
*        WKCELL1(1) = 'A' Sort by Asid                          RS0502*
*        WKCELL1(1) = 'D' Sort by DSNAME                        RS0502*
*---------------------------------------------------------------------*
TRIZO    BEGIN_PROC SAVE=STDSAVE       BASEREG=NO               RS0502
         LA    R0,L'LINE               LONGUEUR D'UN POSTE
         LR    R1,R10                  A(NEXTLINE)
         SLR   R1,R0                   DERNIER POSTE DE LA TABLE
         CL    R1,0(,R2)               un seul poste?
         BER   R14                     oui, fini
         STM   R0,R1,4(R2)             LONGUEUR, DERNIER POSTE
*LOOP
TRIZO1   MVI   0(R13),0                ETAT INITIAL DE L'INDICATEUR
         L     R10,0(,R2)              DEBUT DE LA TABLE  N=1
         SLR   R1,R0                   LE DERNIER POSTE EST TRIE
*--LOOP
TRIZOC   CLI   WKCELL1,C'A'            Sort by ASID ?           RS0502
         JE    TRIZOC_A                                         RS0502
         CLC   DSNAME,DSNAME+L'LINE    (POSTE N) GT (POSTE N+1) ?
         JNH   TRIZOH                  SI NON, BRANCH
         J     TRIZOC_C                jump around ASID stuff   RS0502
TRIZOC_A CLC   ASID,ASID+L'LINE                                 RS0502
         JNH   TRIZOH                  SI NON, BRANCH           RS0502
TRIZOC_C DS    0H                                               RS0502
         XC    LINE,NEXTLINE           SI (POSTE N+1) LT (POSTE N)
         XC    NEXTLINE,LINE            INVERSER LES
         XC    LINE,NEXTLINE             DEUX POSTES.
         MVI   0(R13),8                NOTER LE DECLASSEMENT
TRIZOH   BRXLE R10,R0,TRIZOC           FAIRE N=N+1
*--ENDLOOP
TRIZON   CLI   0(R13),0                Y-A-T-IL EU UN DECLASSEMENT ?
         JNE   TRIZO1                  SI OUI,REFAIRE UN PASSAGE
*ENDLOOP
         LM    R14,R12,12(R13)
         BR    R14                     GOBACK
*---------------------------------------------------------------------*
*        Sort USERID and JOBname tables                               *
*                                                                     *
*              WKCELL1+00: First entry                                *
*              WKCELL1+04: Last entry                                 *
*---------------------------------------------------------------------*
SORT8    BEGIN_PROC SAVE=STDSAVE       BASEREG=NO               RS0402
         LA    R0,8                    length of an entry
         L     R1,WKCELL1+4            A(last_entry)
         CL    R1,WKCELL1              only one entry?
         BER   R14                     yes, goback
*LOOP
SORT8B   MVI   0(R13),0                ETAT INITIAL DE L'INDICATEUR
         L     R2,WKCELL1              DEBUT DE LA TABLE  N=1
         SLR   R1,R0                   LE DERNIER POSTE EST TRIE
*--LOOP
SORT8C   CLC   0(8,R2),8(R2)           (POSTE N) GT (POSTE N+1) ?
         JNH   SORT8H                  SI NON, BRANCH
         XC    0(8,R2),8(R2)           SI (POSTE N+1) LT (POSTE N)
         XC    8(8,R2),0(R2)            INVERSER LES
         XC    0(8,R2),8(R2)             DEUX POSTES.
         MVI   0(R13),8                NOTER LE DECLASSEMENT
SORT8H   BRXLE R2,R0,SORT8C            FAIRE N=N+1
*--ENDLOOP
SORT8N   CLI   0(R13),0                Y-A-T-IL EU UN DECLASSEMENT ?
         JNE   SORT8B                  SI OUI,REFAIRE UN PASSAGE
*ENDLOOP
         LM    R14,R12,12(R13)
         L     R1,WKCELL1              Point R1 to first entry
         BR    R14                     GOBACK
*---------------------------------------------------------------------*
*                                                                     *
*        Subpool usage display sub-routine                            *
*                                                                     *
*---------------------------------------------------------------------*
VSMP100  BEGIN_PROC SAVE=NO            BASEREG=NO
         STM   R14,R12,WORK256+32      Save register
*loop
VSMP10   DS    0H
         CLI   WKCELL3,C'1'            CSA?
         JNE   VSMP11                    no
         VSMLIST SP=CSA,SPACE=FREE,WKAREA=(0(R3),61440)          RS0704
         J     VSMP15                  process returned data
VSMP11   DS    0H
         CLI   WKCELL3,C'2'            SQA?
         JNE   VSMP12                    no
         VSMLIST SP=SQA,SPACE=FREE,WKAREA=(0(R3),61440)          RS0704
         J     VSMP15                  process returned data
VSMP12   DS    0H
         VSMLIST SP=LSQA,SPACE=FREE,WKAREA=(0(R3),61440)         RS0704
VSMP15   DS    0H                      process data
         CLC   0(4,R3),=F'4'       Returncode 4 (more data)
         JH    VSMP60                   Higher leave
         L     R3,4(,R3)               returned data
         L     R7,0(,R3)               # of subpool descriptors
         ST    R7,4(,R4)               # of blocks
         LA    R4,32(,R4)              next entry
         LA    R3,4(,R3)               point VSMD
         USING VSMD,R3                 tell assembly
*loop subpool descriptors
VSMP20   DS    0H
         MVC   0(1,R4),VSMDID          Subpool
         MVC   1(1,R4),VSMDKEY         Protection Key
         LA    R3,8(,R3)               point to # of block descr.
         MVC   4(R4,4),0(R3)           # of blocks
         L     R5,0(,R3)               # of ALLOc descriptor
         LA    R3,4(,R3)               point VSMD
*  loop
VSMP30   DS    0H
         TM    0(R3),X'7F'             above?
         JZ    VSMP31                    no
         L     R2,12(,R4)
         A     R2,VSMDSIZE             add size
         ST    R2,12(,R4)
         J     VSMP32
VSMP31   DS    0H
         L     R2,16(,R4)
         A     R2,VSMDSIZE             add size
         ST    R2,16(,R4)
VSMP32   DS    0H
         LA    R3,8(,R3)               next VSMD
         L     R6,0(,R3)               # of free descriptor
         L     R2,8(,R4)               summary
         AR    R2,R6
         ST    R2,8(,R4)
         LA    R3,4(,R3)
         LTR   R6,R6
         JZ    VSMP45
*    loop
VSMP40   DS    0H
         TM    0(R3),X'7F'             above?
         JZ    VSMP41                    no
         L     R2,20(,R4)
         A     R2,VSMDSIZE             add size
         ST    R2,20(,R4)
         J     VSMP42
VSMP41   DS    0H
         L     R2,24(,R4)
         A     R2,VSMDSIZE             add size
         ST    R2,24(,R4)
VSMP42   DS    0H
         LA    R3,8(,R3)               next VSMD
         BRCT  R6,VSMP40               loop
*    endloop
VSMP45   DS    0H
         BRCT  R5,VSMP30               loop
*  endloop
         LA    R4,32(,R4)              next entry
         BRCT  R7,VSMP20               loop
         L     R3,WKCELL1              save
         CLC   0(4,R3),=F'4'       Returncode 4 (more data)
         JE    VSMP10                   rc = 4, loop
         CLC   0(4,R3),=F'0'       Returncode 0
         JE    VSMP90                   rc = 0, process data
*                                       error
*endloop
VSMP60   DS    0H
         STRING ' VSMLIST - RC: ',(0(R3),4,X),INTO=LINE
         J     VSMP99
VSMP90   DS   0H
         DROP  R3
*        LA    R3,WORK256
         L     R3,WLM_QUACF_AREA       load workarea
         STRING '  Location: ',(0(R3),4),' No: ',(4(R3),F,L9B),        X
               INTO=LINE
         BRAS  R14,SPACE1
         STRING '  SP-Key     Alloc      Free    AAlloc    BAlloc',    X
               '     AFree     BFree',INTO=LINE
         BRAS  R14,SPACE1
         L     R4,4(,R3)               no of entries
         XC    WKCELL2,WKCELL2         clear
         XC    WKCELL3,WKCELL3         clear
*loop
VSMP91   DS    0H
         XC    0(32,R3),0(R3)          clear area
         LA    R3,32(,R3)              next entry
         MVC   WKCELL1+4(1),1(R3)      save storage key
         NI    WKCELL1+4,X'F0'         only bit 0-3 (key)
         STRING (WKCELL1+4,1,X),INTO=(WKCELL1+5,1)
         STRING 2X,(0(R3),FL1,R3B),'-',(WKCELL1+5,1,T),2X,             X
               (4(R3),F,R9B),1X,(8(R3),F,R9B),1X,                      X
               (12(R3),F,R9B),1X,(16(R3),F,R9B),1X,(20(R3),F,R9B),     X X
               1X,(24(R3),F,R9B),INTO=LINE
         BRAS  R14,SPACE1
         L     R2,12(,R3)               Alloc above
         L     R5,WKCELL2
         AR    R2,R5
         ST    R2,WKCELL2
         L     R2,16(,R3)               Alloc below
         L     R5,WKCELL2+4
         AR    R2,R5
         ST    R2,WKCELL2+4
         L     R2,20(,R3)               Free above
         L     R5,WKCELL3
         AR    R2,R5
         ST    R2,WKCELL3
         L     R2,24(,R3)               Free below
         L     R5,WKCELL3+4
         AR    R2,R5
         ST    R2,WKCELL3+4
         BRCT  R4,VSMP91
*endloop
         STRING '  Total ',21X,                                        X
               (WKCELL2,F,R9B),1X,(WKCELL2+4,F,R9B),1X,                X
               (WKCELL3,F,R9B),1X,(WKCELL3+4,F,R9B),INTO=LINE
VSMP99   BRAS  R14,SPACE2
         LM    R14,R9,WORK256+32       rest. register but not R10-R13
         BR    R14                     GOBACK
*---------------------------------------------------------------------*
*                                                                     *
*        Cell-pool display sub-routine                                *
*                                                                     *
*---------------------------------------------------------------------*
CELLP100 BEGIN_PROC SAVE=NO            BASEREG=NO               RS0402
         LTR   R4,R4                   PPD=0?                      $RS
         BZR   R7                      yes, goback                 $RS
         USING PPD,R4                                              $RS
*loop                                                              $RS
CELLP111 EQU   *                                                   $RS
         ICM   R5,B'1111',PPDCPID      point to Cellpool-ID        $RS
         JZ    CELLP118                zero, ignore                $RS
         USING PPDIDENT,R5                                         $RS
         STRING '*Fetch protected*',INTO=WORK44
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?            $RS
         JO    CELLP112                Yes, Subpool-check          $RS
         VALIDATE PPDIDENT,ERRET=CELLP113 PPDIDENT maybe protected
CELLP112 EQU   *                                                   $RS
         BRAS  R14,EXECK0SS            execute MVC in key-zero     $RS
         MVC   WORK44(L'PPDIDEYE),PPDIDEYE maybe protected
CELLP113 EQU   *                                                   $RS
         TR    WORK44,TRTDOTS      convert non-printable to dots RS1199
         LA    R0,1
         AL    R0,PPDINDX              Extents = PPDINDX+1         @RS
         ST    R0,TENWORDS
         STRING 2X,(PPDCPID,4,X),      CP ID                           X
               1X,(TENWORDS,F,R3B),    Extents                         X
               1X,(PPDCSIZE,F,R7B),    size                            X
               1X,(PPDPCNT,F,R7B),        count                        X
               1X,(PPDSCNT,F,R7B),     secondary cell count            X
               1X,(PPDSP,FL1,R3B),     sub-pool                        X
               1X,(PPDKEY,FL1,R3B),    prot key                        X
               1X,(PPDTCB+1,3,X),      TCB                             X
               1X,(WORK44,L'PPDIDEYE), cell-pool ID                    X
               INTO=LINE                                           $RS
         BRAS  R14,SPACE1              Single Space                $RS
CELLP118 EQU   *                                                   $RS
         ICM   R4,B'1111',PPDNEXT      another PPD?                $RS
         JNZ   CELLP111                yes, display it             $RS
*endloop                                                           $RS
         BR    R7                      goback
*---------------------------------------------------------------------*
*                                                                     *
*        Check if a dataspace has SCOPE=COMMON                        *
*                                                                     *
*---------------------------------------------------------------------*
DSPCADS  BEGIN_PROC SAVE=NO            BASEREG=NO               RS0902
         USING DSD,R2
         MVC   WORK256+8(6),BLANKS     Clear scope
         SAC   512                     Switch into AR mode
         SYSSTATE ASCENV=AR            Set Global bit for AR mode
         MVC   WKCELL1(4),=F'-1'       Start ALET search at top
         ALESERV SEARCH,               Search for the ALET             X
               ALET=WKCELL1,           Place ALET here                 X
               STOKEN=DSDSTKN,         Using dataspace STOKEN          X
               AL=PASN,                                                X
               MF=(E,ALESERV2)
         LTR   R15,R15                Check RC
         JNZ   NOTCADS                Not SCOPE=COMMON
         LAM   R1,R1,WKCELL1          Load the ALET found
         XR    R0,R0                  Set EAX
         TESTART ALET=(R1),EAX=(R0),CADS=YES
         C     R15,=X'00000018'       SCOPE=COMMON dataspace
         JNE   NOTCADS                No
ISCADS   DS    0H
* Dataspace is SCOPE=COMMON
         LH    R15,WKCELL2  RS0203
         AHI   R15,1                  count no of common dsp     RS0203
         STH   R15,WKCELL2 RS0203
         STRING 'Common',INTO=WORK256+8
NOTCADS  DS    0H
* Dataspace is NOT SCOPE=COMMON
         LAM   R1,R1,=F'0'
         SYSSTATE ASCENV=P            Reset AR mode
         SAC   0
*endloop                                                           $RS
         BR    R7                     goback
*---------------------------------------------------------------------*
*                                                                     *
*        BITSTR routine: edit bit string as 1,2-4,5,7,9-14            *
*                                                                     *
*          LA   R0,8                    number of bytes               *
*          LA   R1,1                    First bit is bit 1            *
*          LA   R2,=X'EA00EA00EA00EA03' bit string                    *
*          BRAS R14,BITSTR              edit bit string               *
*                                                                     *
*---------------------------------------------------------------------*
BITSTR   BEGIN_PROC SAVE=NO            BASEREG=NO                RS0402
         STM   R14,R12,WORK256+32      SAVE WORK REGS
         CNOP  0,4
         BRAS  R12,*+8
         DC    A(BITSTR9)
         L     R12,0(R12,0)
         USING BITSTR9,R12
         MVC   NEXTLINE,BLANKS         CLEAR OUTPUT AREA
         BALR  R3,0                    FIRST TIME SWITCH
*--LOOP
BITSTR1  LA    R4,8                    BIT LOOP
         LA    R5,X'80'                BIT MASK
*----LOOP
BITSTR2  EX    R5,BITSTR9              EXECUTE "TM"
         JZ    BITSTR4                 THIS BIT OFF, JUMP
         LTR   R3,R3                   START OF A NEW RANGE?
         JNM   BITSTR7                 NO, IGNORE
         LR    R3,R1                   1ST BIT IN RANGE
         CLI   NEXTLINE,C' '           FIRST RANGE?
         JE    BITSTR3                 YES, JUMP
         STRING (NEXTLINE,6*L'NEXTLINE,L),',',((R3),,L),               X
               INTO=(NEXTLINE,6*L'NEXTLINE)                      JM0200
         J     BITSTR7
BITSTR3  EQU   *                       FIRST RANGE
         STRING ((R3),,L),INTO=(NEXTLINE,6*L'NEXTLINE)              +JM
         J     BITSTR7
BITSTR4  EQU   *                       END OF RANGE
         LTR   R3,R3                   PREV BIT ON?
         JM    BITSTR7                 NO, IGNORE
         BCTR  R1,0                    PREVIOUS BIT (END OF RANGE)
         CLR   R3,R1                   SINGLE-BIT RANGE?
         JE    BITSTR6                 YES, JUMP
         STRING (NEXTLINE,6*L'NEXTLINE,L),'-',((R1),,L),               X
               INTO=(NEXTLINE,6*L'NEXTLINE)                      JM0200
BITSTR6  EQU   *
         LA    R1,1(,R1)               UNDO PREVIOUS "BCTR R1,0"
         BALR  R3,0                    PREV BIT WAS OFF
BITSTR7  EQU   *
         LA    R1,1(,R1)               BUMP CURRENT BIT NUMBER
         SRL   R5,1                    OFFSET MASK
         BRCT  R4,BITSTR2
*----ENDLOOP
         LA    R2,1(,R2)               BUMP BYTE ADDRESS
         BRCT  R0,BITSTR1              PROCESS NEXT 8 BITS
*--ENDLOOP
         LTR   R3,R3                   PREV BIT ON?
         JM    BITSTR9                 NO, EXIT
         BCTR  R1,0                    PREVIOUS BIT (END OF RANGE)
         CLR   R3,R1                   SINGLE-BIT RANGE?
         JE    BITSTR9                 YES, JUMP
         STRING (NEXTLINE,6*L'NEXTLINE,L),'-',((R1),,L),               X
               INTO=(NEXTLINE,6*L'NEXTLINE)                      JM0200
BITSTR9  TM    0(R2),*-*               CHECK FOR RECORDING OFF
         LM    R14,R12,WORK256+32      RESTORE WORK REGS
         BR    R14
*---------------------------------------------------------------------*
*        SNAP ROUTINE    R0=LENGTH,R1=ADDRESS                         *
*---------------------------------------------------------------------*
SNAP00   BEGIN_PROC SAVE=NO            BASEREG=YES  EX inst req
         BALR  R3,0                    Base reg
         USING *,R3
         SLR   R15,R15                 offset=0000
         STM   R14,R15,SNAPREGS+24     return address
         STRING '0-3 ',(SNAPREGS+08,4,X),1X,(SNAPREGS+12,4,X),         X
               1X,(SNAPREGS+16,4,X),1X,(SNAPREGS+20,4,X),              X
               '  4-7 ',((R4),,X),1X,((R5),,X),                        X
               1X,((R6),,X),1X,((R7),,X),INTO=LINE
         BAL   R14,SPACE1          <== next line
         STRING '8-B ',((R8),,X),1X,((R9),,X),1X,((R10),,X),           X
               1X,((R11),,X),'  C-F ',((R12),,X),1X,((R13),,X),        X
               1X,(SNAPREGS+00,4,X),1X,(SNAPREGS+04,4,X),INTO=LINE
         BAS   R14,SPACE1          <== next line
*LOOP
SNAP11   L     R14,SNAPREGS+24         return address
         LTR   R0,R0                   # OF REMAINING BYTES
         BNPR  R14                     FINISHED, QUIT
         STRING '  +',(SNAPREGS+30,2,X),1X,((R1),,X),3X,36X,'   *',    X
               16X,'*',INTO=LINE
         LA    R14,16                  # of bytes on a line
         AL    R14,SNAPREGS+28         increment offset
         ST    R14,SNAPREGS+28         increment offset
*
         LA    R14,16                  # of chars on a line
         CLR   R14,R0                  is this a short line?
         JL    *+6                     no, jump
         LR    R14,R0                  truncate last line
         BCTR  R14,0                   FOR EX
         EX    R14,*+4                 MOVE FIELD
         MVC   LINE+59(*-*),0(R1)      MOVE FIELD
         TR    LINE+59(16),TRTPRINT
*
         LA    R2,LINE+19              start of hex data
         BRAS  R14,SNAP33              edit 4 bytes
         BRAS  R14,SNAP33              edit 4 bytes
         LA    R2,1(,R2)               2-byte margin
         BRAS  R14,SNAP33              edit 4 bytes
         BRAS  R14,SNAP33              edit 4 bytes
         BAS   R14,SPACE1          <== next line
         J     SNAP11                  snap next line
*ENDLOOP
*
SNAP33   LTR   R0,R0                   # OF REMAINING BYTES
         BNPR  R14                     FINISHED, QUIT
         UNPK  0(9,R2),0(5,R1)         translate to hex
         L     R15,=A(@STRHEXT-240)    (from STRING macro)
         TR    0(8,R2),0(R15)          translate to hex
         AHI   R0,-4
         LA    R1,4(,R1)               ptr in input area
         MVI   8(R2),C' '
         LA    R2,9(,R2)               ptr in output line
         BR    R14
*---------------------------------------------------------------------*
*                                                                     *
*        LOCATE EPNAME FOR ADDR IN (R1)                               *
*                                                                     *
*        Entry:  R1 contains an address                               *
*                                                                     *
*        Exit:   EP10 contains the location and name of               *
*                the corresponding module.                            *
*                                                                     *
*---------------------------------------------------------------------*
CSVQUERY BEGIN_PROC SAVE=NO            BASEREG=NO
         LA    R1,0(,R1)               CLEAN-UP AMODE BIT
         STM   R14,R3,TENWORDS         save registers
         MVC   EP10,BLANKS             clear work area
         CL    R1,IGCERROR             THIS SVC USED?
         JE    CSVQRY98                NO, GOBACK
         L     R8,CVTPTR(,0)           CVT ADDRESS               RS1002
         SH    R8,=Y(CVTMAP-CVTFIX)    SUBTRACT PREFIX LENGTH    RS1002
         USING CVTFIX,R8               PERMANENT ASSIGNMENT
*
*        SCAN JPAQ
*
         L     R2,PSATOLD-PSA(,0)      MY TCB
         L     R2,TCBJSTCB-TCB(,R2)    JOB STEP TCB
         ICM   R2,B'1111',TCBJPQ-TCB(R2)  FIRST CDE ON JPA QUEUE
         JZ    CSVQRY20                EMPTY QUEUE, SKIP SEARCH
         USING CDENTRY,R2
         MVI   EP10,C'J'               Job Pack Area
*LOOP
CSVQRY11 TM    CDATTR2,CDXLE           IS THERE AN EXTENT LIST?
         JNO   CSVQRY12                NO, JUMP
         TM    CDATTR,CDNIC            this module being loaded?
         JO    CSVQRY12                yes, jump
         L     R14,CDXLMJP             EXTENT LIST
         USING XTLST,R14
         C     R1,XTLMSBAD             WITHIN BOUNDARIES?
         JL    CSVQRY12                NO, IGNORE
         L     R15,XTLMSBLA            LENGTH OF LOAD MOD
         LA    R15,0(,R15)             CLEAR HI-ORDER BIT
         A     R15,XTLMSBAD            ADD LOAD POINT ADDRESS
         CR    R1,R15                  WITHIN BOUNDARIES?
         JL    CSVQRY82                YES, PROCESS
CSVQRY12 ICM   R2,B'1111',CDCHAIN      NEXT CDE IN QUEUE
         JNZ   CSVQRY11                GOOD ADDR, PROCESS
*ENDLOOP
*
*        SCAN ACTIVE LPA QUEUE (MLPA/FLPA)
*
CSVQRY20 EQU   *
         ICM   R2,B'1111',ALPACDE1     First CDE on ALPAQ or DLPAQ
         JZ    CSVQRY40                EMPTY QUEUE, SKIP SEARCH
         USING CDENTRY,R2
         MVI   EP10,C'A'               ACTIVE LPA Q
*LOOP
CSVQRY21 L     R15,CDENTPT             ENTRY POINT
         LA    R15,0(,R15)             CLEAN UP AMODE BIT
         CR    R1,R15                  IS THIS MY ENTRY POINT?
         JE    CSVQRY82                MODULE FOUND, JUMP
         ICM   R2,B'1111',CDCHAIN      NEXT LPDE ADDR
         JNZ   CSVQRY21                NO FINISHED YET, LOOP FURTHER
*ENDLOOP
*        SCAN PAGEABLE LPA QUEUE (PLPA)
*
CSVQRY40 L     R2,CVTLPDIA             FIRST LPDE
         USING LPDE,R2
         MVI   EP10,C'P'               PAGEABLE LPA Q
*LOOP
CSVQRY41 L     R15,LPDENTP             ENTRY POINT
         LA    R15,0(,R15)             CLEAN UP AMODE BIT
         CR    R1,R15                  IS THIS MY ENTRY POINT?
         JE    CSVQRY82                MODULE FOUND, JUMP
         TM    LPDEATTR,LPDEMIN        MINOR LPDE?
         JO    CSVQRY42                YES, IGNORE
         LM    R15,R0,LPDEXTLN         LENGTH/LOAD ADDR
         CR    R0,R1
         JH    CSVQRY42                OUTSIDE BOUNDARIES, JUMP
         AR    R0,R15
         CR    R0,R1
         JH    CSVQRY82                MODULE FOUND, JUMP
CSVQRY42 LA    R2,LPDEXTAD+4           BUMP LPDE ADDR
         CLI   LPDENAME,X'FF'          END OF LPA DIRECTORY?
         JNE   CSVQRY41                NO, LOOP FURTHER
*ENDLOOP
*        Search Nucleus Map
*
         MVI   EP10,C'N'               NUCLEUS
         LA    R0,0(,R1)               pass address
         NUCLKUP BYADDR,ADDR=(0),NAME=EP10+2
         LTR   R15,R15                 FOUND?
         JNZ   CSVQRY60                no, jump
         CLC   =C'IEAVESVC',EP10+2     THIS SVC USED?              @407
         JE    CSVQRY98                NO, quit
         J     CSVQRY99                YES, exit                   @407
*
CSVQRY60 LM    R14,R1,TENWORDS         restore reg1
         L     R2,CVTSMEXT             STORAGE MAP EXTENSION
         USING CVTVSTGX,R2
*
CSVQRY61 MVC   EP10+2(8),=C'*FLPA   '  EP FOUND IN FIXED LPA
         MVI   EP10,C'F'               FIXED LPAQ
         CL    R1,CVTFLPAS             FLPA (BELOW)
         JL    CSVQRY62                NO, JUMP
         CL    R1,CVTFLPAE             END OF FLPA (BELOW)
         JL    CSVQRY99                YES, GOBACK
CSVQRY62 CL    R1,CVTEFLPS             FLPA (ABOVE)
         JL    CSVQRY63                NO, JUMP
         CL    R1,CVTEFLPE             END OF FLPA (ABOVE)
         JL    CSVQRY99                YES, GOBACK
*
CSVQRY63 MVC   EP10+2(5),=C'*MLPA'     EP FOUND IN FIXED LPA
         MVI   EP10,C'F'               MODIFIED LPAQ
         CL    R1,CVTMLPAS             MLPA (BELOW)
         JL    CSVQRY64                NO, JUMP
         CL    R1,CVTMLPAE             END OF MLPA (BELOW)
         JL    CSVQRY99                YES, GOBACK
CSVQRY64 CL    R1,CVTEMLPS             MLPA (ABOVE)
         JL    CSVQRY71                NO, JUMP
         CL    R1,CVTEMLPE             END OF MLPA (ABOVE)
         JL    CSVQRY99                YES, GOBACK
*
CSVQRY71 L     R2,CVTGDA               POINT TO GDA
         USING GDA,R2
         MVC   EP10+2(5),=C'*CSA '     EP FOUND IN CSA
         MVI   EP10,C'C'               CSA
         L     R0,GDACSA               CSA (BELOW)
         CLR   R1,R0                   WITHIN CSA?
         JL    CSVQRY72                NO, JUMP
         AL    R0,GDACSASZ             END OF CSA (BELOW)
         CLR   R1,R0                   WITHIN CSA?
         JL    CSVQRY99                YES, GOBACK
CSVQRY72 L     R0,GDAECSA              CSA (ABOVE)
         CLR   R1,R0                   WITHIN CSA?
         JL    CSVQRY73                NO, JUMP
         AL    R0,GDAECSAS             END OF CSA (ABOVE)
         CLR   R1,R0                   WITHIN CSA?
         JL    CSVQRY99                YES, GOBACK
*
CSVQRY73 MVC   EP10+2(5),=C'*SQA '     EP FOUND IN SQA
         MVI   EP10,C'C'               SQA
         L     R0,GDASQA               SQA (BELOW)
         CLR   R1,R0                   WITHIN SQA?
         JL    CSVQRY74                NO, JUMP
         AL    R0,GDASQASZ             END OF SQA (BELOW)
         CLR   R1,R0                   WITHIN SQA?
         JL    CSVQRY99                YES, GOBACK
CSVQRY74 L     R0,GDAESQA              SQA (ABOVE)
         CLR   R1,R0                   WITHIN SQA?
         JL    CSVQRY75                NO, JUMP
         AL    R0,GDAESQAS             END OF SQA (ABOVE)
         CLR   R1,R0                   WITHIN SQA?
         JL    CSVQRY99                YES, GOBACK
CSVQRY75 MVC   EP10,BLANKS             RETURN BLANK NAME
         J     CSVQRY99
*
         USING LPDE,R2
CSVQRY82 MVC   EP10+2(8),LPDENAME      PASS EP NAME
         J     CSVQRY99
*
CSVQRY98 MVC   EP10,BLANKS             This SVC is not used
         MVI   EP10,C'-'               This SVC is not used
*
CSVQRY99 LM    R14,R3,TENWORDS         restore registers
         BR    R14
         DROP  R2,R8                   LPDE, CVT                 RS1002
*---------------------------------------------------------------------*
*                                                                     *
*        CONVERT UCBTYP TO UNITNAME                                   *
*                                                                     *
*        Entry:  R7 contains the address of the UCB                   *
*                                                                     *
*        Exit:   UNITNAME contains the EBCDIC Unit name (e.g. 3380E)  *
*                                                                     *
*---------------------------------------------------------------------*
GETUNIT  BEGIN_PROC SAVE=NO            BASEREG=NO                RS0502
         STM   R14,R2,GETUREGS         SAVE registers
         USING UCBOB,R7
         MVC   UNITNAME+8,UCBTYP       move device type
         XCALL IEFEB4UV,                                               X
               (UNITNAME,              work area                       X
               =AL1(CNVTLUV,0)),       convert dev type to LUV         X
               ERRET=GETUNIT8
         XCALL IEFEB4UV,                                               X
               (UNITNAME,              work area                       X
               =AL1(RETNUNIT,0)),      return unit name                X
               ERRET=GETUNIT8
         CLI   UCBTBYT3,UCB3DACC       DASD?
         JNE   GETUNIT9                NO, exit
*
*        3380/3390 subtype
*
         BRAS  R1,GETUNIT5             BRANCH AROUND TABLE
         DC    X'1E',C'D '             DCEOBRDT      3380/3390
         DC    X'21',C'J '             DCEOBRDT      3380/3390
         DC    X'23',C'K '             DCEOBRDT      3380/3390
         DC    X'2E',C'E '             DCEOBRDT      3380/3390
         DC    X'26',C'-1'             DCEOBRDT      3380/3390
         DC    X'27',C'-2'             DCEOBRDT      3380/3390
         DC    X'24',C'-3'             DCEOBRDT      3380/3390
         DC    X'32',C'-9'             DCEOBRDT      3380/3390
         DC    AL1(00),0H'0'
*
GETUNIT5 LA    R15,UCBOB               pass UCB addr
         BAL   R14,GETCMEXT            get addr of common extension
         LTR   R15,R15                 UCB COMMON EXTENSION
         JZ    GETUNIT9                VIO, exit
         ICM   R15,B'1111',UCBCLEXT-UCBCMEXT(R15) Device class extnsion
         JZ    GETUNIT9                VIO, exit
         USING DCE,R15
         BALR  R14,0                   SCAN TABLE
*--loop
         CLC   DCEOBRDT,0(R1)          TEST 3380/3390 MODEL
         JNE   *+10                    not equal, skip "MVC"
         MVC   UNITNAME+4(2),1(R1)     MOVE 3380 TYPE (D/E/J/K)
         LA    R1,1+2(,R1)             next entry
         CLI   0(R1),0                 end of table?
         BNER  R14
*--endloop
         J     GETUNIT9                exit
         DROP  R15                     DCE
GETUNIT8 MVC   UNITNAME,BLANKS         CONVERSION DID NOT WORK
GETUNIT9 LM    R14,R2,GETUREGS         SAVE registers
         BR    R14
         DROP  R7                                                RS1002
*---------------------------------------------------------------------*
*                                                                     *
*        TCB tree scan routine                                        *
*                                                                     *
*        Entry:  R3 contains the indentation index                    *
*                R9 contains the address of the current TCB           *
*        Exit:   R3 contains the new indentation index                *
*                R9 contains the address of the next TCB              *
*                                                                     *
*---------------------------------------------------------------------*
SCANTCB  BEGIN_PROC SAVE=NO            BASEREG=NO                RS0502
         LR    R1,R9                   SAVE TCB ADDRESS
         L     R9,TCBLTC-TCB(,R9)      DAUGHTER
         LA    R3,1(,R3)               INDENTATION INDEX
*LOOP
SCANTCB2 LTR   R9,R9                   CHECK FOR END OF CHAIN
         BNZR  R14                     PASS VALID TCB ADDRESS
         L     R9,TCBNTC-TCB(,R1)      SISTER
         L     R1,TCBOTC-TCB(,R1)      MOTHER
         BRCT  R3,SCANTCB2             INDENTATION INDEX
*ENDLOOP
         SR    R9,R9                   SET CC=0
         BR    R14                     GOBACK
*---------------------------------------------------------------------*
*                                                                     *
*        SCAN RB chain backwards (from oldest RB)                     *
*              Input:  R6 points to current RBPREFIX                  *
*                      R9 points to the TCB                           *
*              Output: R6 point to next RB                            *
*                                                                     *
*---------------------------------------------------------------------*
         USING RBPREFIX,R6
         USING TCB,R9
NEXTRB   BEGIN_PROC SAVE=NO            BASEREG=NO                RS0502
         LA    R0,RBBASIC              point to basic section
         SLR   R6,R6                   end of chain
         CL    R0,TCBRBP               end of chain?
         BER   R14                     yes, goback with R6=0
         ICM   R6,B'1111',TCBRBP       Point to top RB (most recent)
         BZR   R14                     no RB for this TCB, goback
*--LOOP
NEXTRB2  SH    R6,=Y(RBBASIC-RBPREFIX) POINT TO RBPREFIX
         CLM   R0,B'0111',RBLINK+1     is this the next RB?
         BER   R14                     yes, goback
         TM    RBSTAB2,RBTCBNXT        oldest RB (end of chain) ?
         BOR   R14                     yes, goback
         ICM   R6,B'0111',RBLINK+1     POINT TO PREVIOUS RB (OR TCB)
         JNZ   NEXTRB2                 next RB in chain
*--ENDLOOP
         SLR   R6,R6                   end of chain
         BR    R14                     yes, goback
         DROP  R6,R9                   RBPREFIX,TCB
*---------------------------------------------------------------------*
*                                                                     *
*        Scan JPAQ backwards (from oldest CDE)                        *
*              Input:  R5 points to current CDENTRY                   *
*              Output: R5 point to next CDE                           *
*                                                                     *
*---------------------------------------------------------------------*
         USING CDENTRY,R5
NEXTCDE  BEGIN_PROC SAVE=NO            BASEREG=NO                RS0502
         LR    R0,R5                   point to current CDE
         L     R5,PSATOLD-PSA(,0)      my TCB
         L     R5,TCBJSTCB-TCB(,R5)    job-step TCB
         L     R5,TCBJPQ-TCB(,R5)      Top CDE (most recent)
         LTR   R5,R5                   empty JPAQ?
         BZR   R14                     yes, goback with R5=0
*--LOOP
NEXTCDE2 CL    R0,CDCHAIN              is this the next RB?
         BER   R14                     yes, goback
         ICM   R5,B'1111',CDCHAIN      previous CDE
         JNZ   NEXTCDE2                not found yet, loop more
*--ENDLOOP
         BR    R14                     goback with R5=0
         DROP  R5                      CDENTRY
*---------------------------------------------------------------------*
*                                                                     *
*        Scan LOAD-LIST backwards (from oldest LLE)                   *
*              Input:  R7 points to current LLE                       *
*              Output: R7 point to next LLE                           *
*                                                                     *
*---------------------------------------------------------------------*
NEXTLLE  BEGIN_PROC SAVE=NO            BASEREG=NO               RS0502
         LR    R0,R7                   point to current LLE
         L     R7,TCBLLS-TCB(,R9)      Top LLE (most recent)
         LTR   R7,R7                   empty load list?
         BZR   R14                     yes, goback with R7=0
         USING LLE,R7
*--LOOP
NEXTLLE2 CL    R0,LLECHN               is this the next RB?
         BER   R14                     yes, goback
         ICM   R7,B'1111',LLECHN       previous LLE
         JNZ   NEXTLLE2                not found yet, loop more
*--ENDLOOP
         BR    R14                     goback with R7=0
         DROP  R7                      LLE                      RS1002
*---------------------------------------------------------------------*
*                                                                     *
*        Retrieve the number of EXCPs for a given DDname              *
*                                                                     *
*        Entry:  R0 contains a TIOT offset                            *
*        Exit:   R1 contains the EXCP count (from the TCTDCTR field)  *
*                                                                     *
*---------------------------------------------------------------------*
EXCP00   BEGIN_PROC SAVE=STDSAVE       BASEREG=NO               RS0502
         L     R1,PSATOLD-PSA(,0)      MY TCB
         L     R1,TCBTCT-TCB(,R1)      TCBTCT
         L     R1,TCTIOTBL-SMFTCT(,R1) START OF I/O MEASUREMENT TABLE
         LA    R1,TCTIODSP-TCTTIOT(,R1) FIRST DD ENTRY
         USING TCTDCBTD,R1
*LOOP
EXCP11   CL    R0,TCTDCBTD             SAME TIOT OFFSET?
         JE    EXCP21                  YES, EXIT LOOP
*        LA    R1,TCTDCBLE             NEXT LOOKUP TABLE ENTRY   GS1104
         ICM   R15,B'1111',TCTDCBLE    END OF TABLE ?
         LA    R1,TCTDCBLE             NEXT LOOKUP TABLE ENTRY   GS1104
         JNZ   EXCP11                  NOT YET, TRY NEXT DD ENTRY
*ENDLOOP
         SLR   R0,R0                   EXCP COUNT IS ZERO
         J     EXCP99
*
EXCP21   L     R1,TCTIOTSD             OFFSET IN I/O MEASURE. TABLE
         L     R15,PSATOLD-PSA(,0)     MY TCB
         L     R15,TCBTCT-TCB(,R15)    MY TCT
         A     R1,TCTIOTBL-SMFTCT(,R15) START OF I/O MEASUREMENT TABLE
         USING TCTDDENT,R1
         ICM   R0,B'1111',TCTDCTR      EXCP COUNT IN R0
EXCP99   LR    R1,R0                   EXCP COUNT IN R1 TOO
         LM    R2,R12,28(R13)
         BR    R14
         DROP  R1
$LTORG   LOCTR
         DROPTEMP
*---------------------------------------------------------------------*
*        BEGIN_PROC bootstrap                                         *
*        Halfword offset can now have 65535 bytes (unsigned halfword) *
*---------------------------------------------------------------------*
* GIN_PROC LH  R15,0(,R15)             demi-offset to far routine
BEGIN_PROC ICM R15,B'0011',0(R15)      demi-offset to far routineRS1202
           ICM R15,B'1100',=H'0'       clear left part           RS1202
           ALR R15,R15                 offset to far routine (*2)
           ALR R15,R11                 change offset to address
           BR  R15                     branch to far
*---------------------------------------------------------------------*
*        ISPF Bootstraps                                              *
*---------------------------------------------------------------------*
SYNCH_ISPQRY L R15,ISPQRY@             V(ISPQRY)
         L     R13,UNPROTWK            point R13 at unprotected area
         BR    R15                     go there
SYNCH_ISPLINK L R15,ISPLINK            V(ISPLINK)
         L     R13,UNPROTWK            point R13 at unprotected area
         BR    R15                     go there
*---------------------------------------------------------------------*
*        Bump line pointer                                            *
*---------------------------------------------------------------------*
SPACE2   LA    R10,LINE+L'LINE         Double Space
BLANK1   MVC   LINE,BLANKS             Blank Line
SPACE1   LA    R10,LINE+L'LINE         Next Line
         BR    R14
*---------------------------------------------------------------------*
*                                                                     *
*        Pseudo-dsname passed to BRIF as a title.                     *
*                                                                     *
*        Note that BRIF truncates the dsname at the first blank,      *
*        which is why X'00' is used as a delimiter.                   *
*                                                                     *
*---------------------------------------------------------------------*
TITLE    DC    C'GSF',X'00',C'Utilities',X'006000'
         DC    C'ShowMVS',X'00',C'&REL ',0H'0'
TITLE_L  EQU   *-TITLE
*---------------------------------------------------------------------*
*        Check if this PROC should be executed                        *
*---------------------------------------------------------------------*
SECTION_SELECTION EQU *
         ICM   R15,B'1111',PARSE_ANSWER A(IKJPARMD)
         BNP   2(,R14)                 NO SELECTION, PROCESS
         AH    R15,0(,R14)             ADD OFFSET TO PCE
         CLI   0(R15),1                THIS SECTION SELECTED?
         BE    2(,R14)                 YES, PROCESS
         LM    R14,R15,END_PROC        RETURN/RETRY ADDRESSES
         BR    R14                     GOBACK
*---------------------------------------------------------------------*
*        Locate a 64K work-area at the end of the dynamic work space  *
*---------------------------------------------------------------------*
WORKADDR L     R0,=F'65536'            length of work area       RS1200
         L     R1,LINE1PTR             addr of lines buffer
         AL    R1,LINE1PTR+4           length of lines buffer
         SLR   R1,R0                   offset to work-area
         XC    0(256,R1),0(R1)         CLEAR IT TO X'00'
         BR    R14
*---------------------------------------------------------------------*
*        Locate the UCB common extension (UCBCMEXT)                   *
*        using IOSCMXA in ESA 5.1 and above.                          *
*---------------------------------------------------------------------*
GETCMEXT LR    R0,R15                  save UCB address
         ICM   R15,B'0111',UCBEXTP-UCBOB(R15) UCB COMMON EXTENSION
         BZR   R14                     VIO, exit with R15=0
         BAKR  R14,0
         ST    R0,IOSCMXA_UCBPTR       save UCB address
         IOSCMXA UCBPTR=IOSCMXA_UCBPTR,                                X
               UCBCXPTR=IOSCMXA_UCBCXPTR,                              X
               MF=(E,IOSCMXA_PARMLIST,COMPLETE)
         LTR   R15,R15                 ok?
         LA    R15,0                   zero address
         JNZ   GETCMEXT7               bad, exit
         L     R15,IOSCMXA_UCBCXPTR    A(UCBCMEXT)
GETCMEXT7 EQU  *
         EREG  R1,R1                   restore R1
         PR
*---------------------------------------------------------------------*
*        Retrieve the ddname of the tasklib DCB                       *
*---------------------------------------------------------------------*
JLBDDN   MVC   PDATA_DDN,BLANKS        TASKLIB DDNAME
         ICM   R1,B'1111',TCBJLB-TCB(R9) LOAD/TEST DCB ADDRESS
         BZR   R14                     NO TASKLIB, JUMP
         MVC   PDATA_DDN,LINKDDN       -LNKLST-
         L     R2,CVTPTR(,0)           POINT AT CVT
         CL    R1,CVTLINK-CVTMAP(,R2)  SYS1.LINKLIB
         BER   R14                     JUMP IF SYS1.LINKLIB DCB ADDR
         LR    R2,R14                  save return address
         BRAS  R14,EXECKEY0            exec next instruction in key0
         LH    R1,DCBTIOT-IHADCB(,R1)  LOAD TIOT OFFSET
         A     R1,TCBTIO-TCB(,R9)      CHANGE OFFSET INTO AN ADDRESS
         MVC   PDATA_DDN,4(R1)         MOVE TASKLIB DDNAME
         BR    R2
*---------------------------------------------------------------------*
*        Execute an instruction in key=zero when AUTH=ESR             *
*---------------------------------------------------------------------*
EXECKEY0 TM    AUTHORIZED,L'AUTHORIZED Authorized?
         BNOR  R14                     no, goback
         MODESET EXTKEY=ZERO
         EX    0,0(,R14)               execute L/ICM instruction
         MODESET KEYADDR=PROTKEY,WORKREG=15 switch back to KEY4
         B     4(,R14)                 skip RX-type instruction
EXECK0SS TM    AUTHORIZED,L'AUTHORIZED Authorized?
         BNOR  R14                     no, goback
         MODESET EXTKEY=ZERO
         EX    0,0(,R14)               execute MVC instruction
         MODESET KEYADDR=PROTKEY,WORKREG=15 switch back to KEY4
         B     6(,R14)                 skip SS-type instruction
*---------------------------------------------------------------------*
*                                                                     *
*        Convert Hex digits to binary                                 *
*                                                                     *
*              R0:  number of EBCDIC bytes (mult of two)              *
*              R1:  addr of first input bytes (EBCDIC)                *
*              R15: addr of output area                               *
*                                                                     *
*---------------------------------------------------------------------*
*LOOP
X2B      SRL   R0,1                    DIVIDE COUNT BY TWO
X2BLOOP1 MVC   08(2,R13),0(R1)         MOVE 2 EBCDIC BYTES
         CLI   0(R1),C'0'              A-F ?
         JNL   X2BLOOP2                NO, JUMP
         NI    08(R13),X'0F'           A -> X'FA'
         TR    08(1,R13),=X'00,0A,0B,0C,0D,0E,0F'
X2BLOOP2 CLI   1(R1),C'0'              A-F ?
         JNL   X2BLOOP3                NO, JUMP
         NI    09(R13),X'0F'           A -> X'FA'
         TR    09(1,R13),=X'00,0A,0B,0C,0D,0E,0F'
X2BLOOP3 LA    R1,2(,R1)               NEXT PAIR OF INPUT BYTES
         MVO   0(1,R15),08(1,R13)      AA <- 0A05
         MVN   0(1,R15),09(R13)        A5 <- 0A05
         LA    R15,1(,R15)             NEXT OUTPUT BYTE
         BRCT  R0,X2BLOOP1             NEXT PAIR OF INPUT BYTES
         BR    R14
*---------------------------------------------------------------------*
*                                                                     *
*        Convert binary time to HH MM SS HH                           *
*                                                                     *
*---------------------------------------------------------------------*
BINTIME  SLR   R0,R0
         D     R0,=F'00360000'         GET HOURS
         LR    R3,R1                   HH
         LR    R1,R0                   REMAINDER
         SLR   R0,R0
         D     R0,=F'6000'             GET MINUTES IN R1
         LR    R2,R1                   MM
         LR    R1,R0                   REMAINDER
         SLR   R0,R0
         D     R0,=F'100'              GET SECONDS IN R1
         BR    R14
*---------------------------------------------------------------------*
*                                                                     *
*        Convert EPOCH based on 01.01.1970 to TOD based on            *
*        01.01.1900                                                   *
*                                                                     *
*---------------------------------------------------------------------*
EPOCH2TOD BAKR  R14,0
         LA    R2,TENWORDS        get output area address        RS0504
         M     R0,TODMILL      uS since 1970 in R0 & R1          RS0504
         AL    R1,TODDIFF+4             Add right half of offset RS0504
         BRC   12,NOOFL         Skip if no overflow              RS0504
         AHI   R0,1             Bump up left half (LA would wor  RS0504
NOOFL    AL    R0,TODDIFF               Add left half of offset  RS0504
         SLDL  R0,12           Turn uS into TOD format           RS0504
         STM   R0,R1,0(R2)                                       RS0504
         PR                       Back
TODMILL  DC    F'1000000'
TODDIFF  DC    FL8'2208988800000000'
*---------------------------------------------------------------------*
*        TABLE SCAN ROUTINE                                           *
*---------------------------------------------------------------------*
*LOOP
SCAN_TM  IC    R15,0(,R1)              PICK UP MASK FOR "TM"
         EX    R15,2(,R14)             EXECUTE TM UNSTRUCTION
         BO    6(,R14)                 FOUND, GOBACK
         AH    R1,0(,R14)              BUMP TABLE PTR
         CLI   0(R1),0                 END OF TABLE?
         JNE   SCAN_TM                 NEXT TABLE ENTRY
*ENDLOOP
         LA    R1,BLANKS               ALL BLANKS
         LTR   R1,R1                   SET CC TO 'Z'
         B     6(,R14)                 NOT FOUND, GOBACK
*---------------------------------------------------------------------*
*        Retrieve field offset from HASMSDB & HASMBUFR (ESA V4)       *
*---------------------------------------------------------------------*
SCANMODL L     R15,=V(SCANMODL)        EXTERNAL ROUTINE
         STM   R0,R1,TENWORDS          PARM LIST
         LA    R1,TENWORDS             PARM LIST
         BR    R15                     go to SCANMODL routine
*---------------------------------------------------------------------*
*                                                                     *
*        Convert TOD clock to local time YYYYMMDD HHMMSSHH            *
*                                                                     *
*---------------------------------------------------------------------*
STCKCONV BAKR  R14,0
         MVC   STCKVAL,0(R1)           move TOD clock value
         STCKCONV STCKVAL=STCKVAL,     INPUT VALUE (STCK)              X
               CONVVAL=TENWORDS+20,    OUTPUT (TIME/DATE)              X
               DATETYPE=YYYYMMDD,      RETURN DATE AS YYYYMMDD         X
               MF=(E,STCKCONVL)
         STRING                                                        X
               (TENWORDS+20+8,2,X),'-',  YYYY-                         X
               (TENWORDS+20+10,1,X),'-', YYYY-MM-                      X
               (TENWORDS+20+11,1,X),     YYYY-MM-DD                    X
               INTO=STCKDATE
         STRING (TENWORDS+20,1,X),'.',   YYYY-MM-DD  HH.               X
               (TENWORDS+20+1,1,X),'.',  YYYY-MM-DD  HH.MM.            X
               (TENWORDS+20+2,1,X),'.',  YYYY-MM-DD  HH.MM.SS          X
               (TENWORDS+20+3,1,X),      YYYY-MM-DD  HH.MM.SS.HH       X
               INTO=STCKTIME
.STCKC99 ANOP
         PR
*---------------------------------------------------------------------*
*        move status flags                                            *
*---------------------------------------------------------------------*
         MVC   0(*-*,R4),1(R14)        execute MVC
$$STATUS LA    R15,0                   do not change CC
         IC    R15,0(,R14)             get length
         JZ    $$STATUS8               flag off, goback
         EX    R15,$$STATUS-6          execute MVC
         LA    R4,2(R15,R4)            bump pointer up
$$STATUS8 LA   R14,2(R15,R14)          return address
         CLI   0(R14),0                alignment byte?
         BNER  R14                     no, goback
         B     1(,R14)                 yes, skip it
$FARRTNE LOCTR
         TITLE 'SHOWMVS &REL - Read Routine for BRIF and EDIF'
***********************************************************************
*                                                                     *
*        BRIF READ ROUTINE                                            *
*                                                                     *
*        This routine is invoked by BRIF and returns the address      *
*        of a record.  BRIF invokes it each time the line is          *
*        displayed on the screen, i.e when you scroll UP, DOWN,       *
*        LEFT, RIGHT, or simply hit ENTER.                            *
*                                                                     *
*        It also provides real-time status for on-line devices.       *
*                                                                     *
***********************************************************************
RDRTNE   SAVE  (14,12)
*DRTNE   SAVE  (14,12),,*
         BALR  R12,0
         USING *,R12
         L     R11,BASEREG             =A(BASEADDR)
         USING BASEADDR,R11
         LR    R14,R13                 caller's save area
         L     R13,12(,R1)             PTR TO DIALOG DATA AREA
         L     R13,0(,R13)             A(RCVYSAVE)
         ST    R14,4(,R13)             chain save areas
         ST    R13,8(,R14)             chain save areas
         USING RCVYSAVE,R13
         L     R4,08(,R1)              RELATIVE RECORD NUMBER
         L     R1,0(,R4)               LINE NUMBER REQUESTED BY BRIF
         TM    BRIF_MODE,L'BRIF_MODE   MODE=BROWSE?
         JO    RDRTNE06                YES, JUMP
         LA    R1,1                    NEXT LINE FOR EDIT, HARDCOPY
         AL    R1,CURRECNO             RECORD NUMBER
         ST    R1,CURRECNO             RECORD NUMBER
RDRTNE06 EQU   *
         C     R1,NUMLINES             CHECK FOR END OF DATA
         JH    RDRTNE8                 JUMP IF TOO BIG
         BCTR  R1,0                    DOWN BY 1
         M     R0,=A(L'LINE)           OFFSET TO LAST LINE
         LR    R10,R1                  PASS OFFSET
         AL    R10,LINE1PTR            CHANGE OFFSET TO ADDRESS
         USING LINE,R10
RDRTN10  CLC   =C'.UCB=',LINE_UCB      UCB line?
         JNE   RDRTN12                 no, jump
         BRAS  R14,UCB200              yes, refresh
RDRTN12  EQU   *                                                 RS1002
         CLC   =C'.STG',LINE           Virtual Storage effects   RS1002
         JNE   RDRTN14                 no, jump                  RS1002
         BRAS  R14,STG200              yes, refresh              RS1002
RDRTN14  EQU   *                                                 RS1002
         CLC   =C'.GTF',LINE           GTF Status line?
         JNE   RDRTN16                 no, jump
         BRAS  R14,GTF200              yes, refresh
         LA    R10,WORK256             new line
RDRTN16  EQU   *
         CLC   =C'.PIT=',LINE          JES2 initiator?
         JNE   RDRTN24                 no, jump
         BRAS  R14,JES2I200            yes, refresh
         LA    R10,WORK256             new line
RDRTN24  EQU   *
*
         CLC   =C'.CPUTIME',LINE       STEP CPU TIME?
         JNE   RDRTN34                 no, jump
         BRAS  R14,CPUT420             yes, refresh
RDRTN34  EQU   *
         CLC   =C'.SPL',LINE           Storage Usage line?
         JNE   RDRTN35                 no, jump
         BRAS  R14,SPL200              yes, refresh
RDRTN35  EQU   *
*
RDRTN70  L     R1,4(,R13)              BRIF save area
         L     R1,24(,R1)              BRIF parm-list
         L     R6,00(,R1)              RECORD DATA READ
         ST    R10,0(,R6)              PASS DATA ADDRESS
         TM    PARMCAPS,L'PARMCAPS     PARM=CAPS?
         JNO   *+10                    no, jump
         TR    LINE,TRTPRINT           yes, convert to uppercase
         L     R13,4(,R13)             BRIF save area
         RETURN (14,12),RC=0           GOBACK TO EDIT
*
*        END OF DATA - RETURN MAX LINE#
*
RDRTNE8  L     R1,4(,R13)              BRIF save area
         L     R1,24(,R1)              BRIF parm-list
         L     R4,08(,R1)              RELATIVE RECORD NUMBER
         L     R6,00(,R1)              RECORD DATA READ
         L     R1,NUMLINES             NUMBER OF LINES
         ST    R1,0(,R4)               PASS IT TO BRIF
         BCTR  R1,0                    DOWN BY 1
         M     R0,=A(L'LINE)           OFFSET TO LAST LINE
         LR    R10,R1                  PASS OFFSET
         AL    R10,LINE1PTR            CHANGE OFFSET TO ADDRESS
         ST    R10,0(,R6)              PASS DATA ADDRESS
         L     R13,4(,R13)             BRIF save area
         RETURN (14,12),RC=8
*
         MACRO                                                    MACRO
&NAME    DROPTEMP ,                                               MACRO
         USING PSA,R0,R1,R2,R3,R4,R5,R6,R7,R14,R15
         DROP  R1,R2,R3,R4,R5,R6,R7,R14,R15 RELEASE TEMP BASE REGS
         MEND                                                     MACRO
         TITLE 'SHOWMVS &REL - Refresh status for on-line devices'
*---------------------------------------------------------------------*
*                                                                     *
*        Refresh status for on-line devices                           *
*                                                                     *
*---------------------------------------------------------------------*
UCB200   ST    R14,RDRTNR14            save return address
         PACK  WKCELL1,LINE_UCB+5(10)  get address
         CVB   R7,WKCELL1              A(UCBOB)
         USING UCBOB,R7
*
         MVC   WORK256(LINE_UCB-LINE),LINE move first half of line
         LA    R10,WORK256             now point to modified line
         LA    R4,LINE_UCB             message area
         MVC   0(LINE+L'LINE-LINE_UCB,R4),BLANKS
*
*        show VOLSER (DASD/TAPE)
*
         CLI   UCBTBYT3,UCB3TAPE       TAPE?
         JE    UCB220                  YES, JUMP
         CLI   UCBTBYT3,UCB3DACC       DASD?
         JE    UCB220                  YES, JUMP
*
*        Check for a system console
*
         LA    R4,8(,R4)               skip volser slot
         CLI   UCBTBYT3,UCB3DISP       Display device (eg 3270) ?
         JNE   UCB250                  no, JUMP
        #STATUS UCBSTAT,UCBSYSR,'Console'
         J     UCB250                  skip TAPE/DASD section
*
*        TAPE/DASD section
*
UCB220   CLI   UCBVOLI,C' '            VALID VOLSER?
         JNH   UCB249                  NO, JUMP
         MVC   0(6,R4),UCBVOLI         VOLSER FOR TAPE/DASD
         LA    R4,8(,R4)               skip volser
         CLI   UCBTBYT3,UCB3DACC       DASD?
         JNE   UCB240                  NO, JUMP
        #STATUS UCBSTAT,UCBSYSR,'System'
*---------------------------------------------------------------------*
*                                                                     *
*        GET SMS status and storage group                             *
*                                                                     *
*        This section is only generated if you assemble the           *
*        program with a DFP V3 MACLIB.                                *
*                                                                     *
*---------------------------------------------------------------------*
         TM    UCBFL5,UCBSMS           SMS-managed volume?
         JZ    UCB240                  no, jump
         ICM   R3,B'1111',SMS_SSOB     point to the work area
         JZ    UCB240                  not allocated, quit
         USING SMS_WORK,R3
         XC    SMS_WORK(256),SMS_WORK  clear 256 bytes
*
         LA    R2,SSOB_WRK             POINT TO WORK AREA
         USING SSOB,R2
         MVI   SSOBLEN+1,SSOBHSIZ      SSOB length
         MVC   SSOBID,=C'SSOB'         SSOB
         MVI   SSOBFUNC+1,SSOBSSMS     FUNCTION
         L     R1,CVTPTR(,0)           CVT
         L     R1,CVTJESCT-CVTMAP(,R1) JES COMM TABLE
         L     R1,JESCTEXT-JESCT(,R1)  JESCT Extension
         MVC   SSOBSSIB,JESSMSIB-JESPEXT(R1) SMS SSIB
*
         LA    R5,SSSA_WRK             SSSA WORK AREA
         ST    R5,SSOBINDV             FUNCTION-DEPENDENT AREA
         USING IEFSSSA,R5
         LA    R0,SSSALN+SSSA1LN       LENGTH
         STH   R0,SSSALEN
         MVC   SSSAID,=C'SSSA'         SSSA
         MVI   SSSAVER+1,SSOBSSVR      VERSION
         MVI   SSSASFN+1,SSSAACTV      SUB-FUNCTION CODE
         MVI   SSSAIFLG,SSSANAUT       NON-AUTHORIZED CALLER
*
         MVI   SSSA1TYP,SSSA1VOL       GIVE VOLSER, GET VLD BACK
         MVI   SSSA1CNT+3,1            ONE CONSTRUCT PASSED
         MVI   SSSA1NML+1,L'UCBVOLI    LENGTH OF NAME
         MVC   SSSA1NAM(L'UCBVOLI),UCBVOLI  MOVE VOLUME SERIAL
*
         LHI   R0,SMS_WORK_LENGTH
         ST    R0,SSSA1LEN             LENGTH OF WORK AREA
         LA    R6,SMS_SUB_FUNCTION_WORK_AREA
         ST    R6,SSSA1PTR             ADDR OF WORK AREA
         USING VLD,R6
*
*        CALL SMS TO GET A VLD (VOLUME RECORD DESCRIPTOR)
*
         LA    R1,SMS_SSOB             SSOB_PTR
         IEFSSREQ                  <== CALL SMS
         LTR   R15,R15                 SSI OK?
         JNZ   UCB240                  NO, jump
         ICM   R15,B'1111',SSOBRETN-SSOB+SSOB_WRK
         JNZ   UCB240                  bad, jump
         DROP  R3,R2,R5                SMS_WORK,SSSA
*
         LH    R1,VLDSGLEN             storage group length
         STRING 'SMS SG=',(VLDSTGRP,(R1)),INTO=((R4),NEXTLINE)
         LA    R15,1(R15,R4)           point past string (actual)
         LA    R4,16(,R4)              point past string (minimum)
         CLR   R4,R15                  SG longer than 8 chars?
         JH    *+6                     no, jump
         LR    R4,R15                  yes, adjust position
*
*        Locate the SMS status byte that corresponds to my own system
*
         LH    R2,OWNSMSSYS            yes, remember it
         LTR   R2,R2                   known?
         JZ    UCB235                  no, use 1st one
         BCTR  R2,0                    make it relative to zero
*        SLL   R2,1                    mult by L'VLDNSTAT        RS0502
         SLL   R2,3                    mult by L'VLDSYSDT (*8)   RS0502
*CB235   LA    R2,VLDSMSS(R2)          point at my own VLDSMSS   RS0502
UCB235   AR    R2,R6                   + start of VLDEF          RS0502
         A     R2,VLDSYSOF             Offset to VLDSYSDT        RS0502
         AHI   R2,L'VLDP               plus length of VLDP       RS1004
         USING VLDSYSDT,R2                                       RS0502
*        LA    R2,VLDSTSMS(R2)         point at my own VLDSTSMS  RS0502
*
*        SMS volume status
*
         BRAS  R1,UCB236               BRANCH AROUND TABLE
         DC    AL1(VLDENBL),C'Enabled     '
         DC     AL1(VLDQUI),C'Quiesced/all'
         DC    AL1(VLDQUIN),C'Quiesced/new'
         DC     AL1(VLDDIS),C'Disabled/all'
         DC    AL1(VLDDISN),C'Disabled/new'
         DC    AL1(00),0H'0'
*--loop
*CB236   CLC   0(L'VLDSMSS,R2),0(R1)   Test SMS status           RS0502
UCB236   CLC   0(L'VLDSTSMS,R2),0(R1)   Test SMS status          RS0502
***????  CLI   VLDSGST,*-*             Test SMS status on this system
         JNE   *+10                    not equal, skip "MVC"
         MVC   0(12,R4),1(R1)          move SMS status
         LA    R1,1+12(,R1)            bump pointer
         CLI   0(R1),0                 end of table?
         JNE   UCB236                  no, try next entry
*--endloop
         LA    R4,13(,R4)              point past status
*
*        display space used & size of largest free extent (LFE)
*
         ICM   R1,B'1111',VLDNTCPY     total capacity
         JZ    UCB260                  prevent S0C9
         S     R1,VLDNFREE             free space
         M     R0,=F'100'              space used * 100
         D     R0,VLDNTCPY             R1 = %USED
*        STRING ((R1),,R5B),'% used',                            RS0502
         STRING ((R1),,R3B),'% used',                            RS0502X
               ' Largest_Free_Extent(',(VLDNLEXT,F,L),'Mb)',           X
               INTO=((R4),NEXTLINE)
         LA    R4,1(R15,R4)            point past string
         J     UCB260
         DROP  R6                      VLD
*
*        VOLSER/MOUNT FOR TAPE, DASD
*
UCB240  #STATUS UCBSTAT,UCBPRES,'Resident'
        #STATUS UCBSTAT,UCBRESV,'Reserved'
        #STATUS UCBSTAB,UCBBPRV,'Private'
        #STATUS UCBSTAB,UCBBPUB,'Public'
        #STATUS UCBSTAB,UCBBSTR,'Storage'
*
*       #STATUS of Automatic Cartridge Loader (ACL)
*
         CLI   UCBTBYT3,UCB3TAPE       TAPE?
         JNE   UCB250                  no, JUMP
         TM    UCBTFL1,UCBCSL          ACL?
         JNO   UCB244X                 no, JUMP
         STRING 'ACL(YES)',INTO=((R4),NEXTLINE)
         TM    UCBTFL1,UCBCSLAC        ACL active?
         JNO   UCB244N                 no, JUMP
         STRING 'ACL(ACT)',INTO=((R4),NEXTLINE)
UCB244N  LA    R4,1(R15,R4)            point past text
UCB244X  EQU   *
*
*        Label type and position: LABEL=(nnn,SL)
*
         ICM   R0,B'1100',UCBFSEQ      fileseq=0?
         JZ    UCB250                  yes, JUMP
         STRING (UCBFSEQ,H,L),',',INTO=((R4),12)
         ALR   R4,R15                  point R4 past string
        #STATUS UCBSTAT,UCBDADI,'SL'
        #STATUS UCBTFL1,UCBNLTP,'NL'
        #STATUS UCBTFL1,UCBNSLTP,'NSL'
        #STATUS UCBTFL1,UCBBLP,'BLP'
        #STATUS UCBSTAB,UCBBSTR,'AL'
         J     UCB250
*
UCB249   LA    R4,8(,R4)               skip volser slot
*
*        SHOW OWNER OF NON-DASD DEVICE
*
UCB250   TM    UCBSTAT,UCBALOC         device allocated?
         JZ    UCB258                  no, jump                  RS0601
        #STATUS UCBSTAT,UCBALOC,'Allocated'
         LA    R15,UCBOB               pass first 8 bits of address
         BAS   R14,GETCMEXT            get addr of common extension
         LTR   R15,R15                 UCB COMMON EXTENSION
         JZ    UCB260                  zero, ignore
         LH    R1,UCBASID-UCBCMEXT(,R15) GET OWNER'S ASID
         LOCASCB ASID=(1)              GET ADDR OF OWNER'S ASCB
         LTR   R15,R1                  VALID ASID?
         JNP   UCB258                  NO, JUMP                  RS0601
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOB name present?
         JNZ   UCB257                  yes, use it
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) STC/MOUNT/LOGON
UCB257   MVC   0(2,R4),=C'J='          SMS storage group
         MVC   2(8,R4),0(R1)           JOB/STC/TSU name
         LA    R4,11(,R4)              point past string
*
UCB258   DS    0H                                                RS0601
         LA    R15,UCBOB               pass first 8 bits of address0601
         BAS   R14,GETCMEXT            get addr of common extension0601
         LTR   R8,R15                  UCB COMMON EXTENSION      RS0601
         JZ    UCB260                  zero, ignore              RS0601
         USING UCBCMEXT,R8             tell assembler            RS0601
        #STATUS UCBFL7,UCBAUTOS,'ATS'  shared tape ?             RS0601
         AIF   (NOT D'CVTH7703).UCB260 R10 ?                     RS0601
         TM    HBB7703,L'HBB7703       running on OS/390 R10     RS0601
         JZ    UCB260                  no, jump                  RS0601
        #STATUS UCBFL7,UCBEIDAW,'IDAW' 64 bit IDAW device?       RS0601
*        DROP  R8                                                RS0302
.UCB260  ANOP
UCB260  #STATUS UCBFLA,UCBNRY,'Not-ready'
        #STATUS UCBFLA,UCBBOX,'Boxed'
        #STATUS UCBFLA,UCBSTRT,'Busy'
****     DEV_STAT FLA,NOPTH,'No Path Available'
        #STATUS UCBFLC,UCBIVRS,'Intervention Required'
*
*        Show info from 3480 message display
*
UCB266   CLI   UCBTBYT3,UCB3TAPE       TAPE?
         JNE   UCB266X                 no, JUMP                  RS0302
         ICM   R8,B'1111',UCBCLEXT-UCBCMEXT(R8)  Device class ex RS0302
         JZ    UCB266                  zero leave                RS0302
         DROP  R8                                                RS0302
         USING UCBCX,R8                tell assembler            RS0302
        #STATUS UCBCXEPI,VTSB16_EMUL3490,'VTS' VTS?              RS0302
         TM    UCBTFL2,UCBTPSF         3480?
         JNO   UCB266X                 no, jump
         SLR   R2,R2
         ICM   R2,B'0111',UCBXTNB      UCB below the line?
         JNZ   UCB266B                 yes, jump
         LA    R2,UCBXTNB+L'UCBXTNB    no, extension is contiguous
UCB266B  EQU   *
         USING UCBMT,R2
         MVC   WKCELL1(L'UCBSER),UCBSER
         TR    WKCELL1(L'UCBSER),TRTPRINT
         CLC   WKCELL1(L'UCBSER),UCBSER is volser printable?
         JNE   UCB266X                 no, ignore it
         TM    UCBMTFL1,UCBMTDSM+UCBMTKEP+UCBMTRET               RS0302
         JZ    UCB266X                 all zero, jump
        #STATUS UCBMTFL1,UCBMTDSM,'D'  dismount
        #STATUS UCBMTFL1,UCBMTKEP,'K'  keep
        #STATUS UCBMTFL1,UCBMTRET,'R'  retain
         MVC   0(L'UCBSER,R4),UCBSER   previous volser
*
UCB266X  L     R14,RDRTNR14            return address
         BR    R14
         DROPTEMP                      RELEASE TEMP BASE REGS
         TITLE 'SHOWMVS &REL - Refresh Step CPU Time'
*---------------------------------------------------------------------*
*                                                                     *
*        Refresh Step Cpu Time (TSO On-Line Only)                     *
*                                                                     *
*        CPU Time Used: 001H12M07S197.542 (in microseconds)           *
*                                                                     *
*---------------------------------------------------------------------*
CPUT420  ST    R14,RDRTNR14            return address
         LA    R10,WORK256             new line
         L     R8,PSAAOLD-PSA(,0)      my ASCB
         USING ASCB,R8
         LM    R0,R1,ASCBEJST          GET ELAPSED JOB TCB TIME
         SRDL  R0,12                   IN MICRO-SECONDS
         LM    R14,R15,ASCBSRBT        GET ELAPSED SRB TIME
         SRDL  R14,12                  IN MICRO-SECONDS
         ALR   R1,R15                  ADD TCB AND SRB TIME
         JNO   *+8                     BRANCH IF NO OVERFLOW
         AL    R0,=F'1'                HANDLE CARRY
         AR    R0,R14                  add hi-order word
*
         D     R0,=F'1000'             time in thousands of a second
         LR    R4,R0                   save remaining micro-seconds
         SLR   R0,R0
         D     R0,=F'1000'             TIME IN SECOND
         LR    R3,R0                   SAVE REMAINING 1/1000
         SLR   R0,R0
         D     R0,=F'60'               TIME IN MINUTES
         LR    R2,R0                   SAVE REMAINING SECONDS
         SLR   R0,R0
         D     R0,=F'60'               TIME IN HOURS
         LA    R5,WORK256+100          work area
         STRING ((R1),,R3Z),'H',((R0),,R2Z),'M',((R2),,R2Z),           X
               'S',((R3),,R3Z),'.',((R4),,R3Z),INTO=((R5),17)
         LR    R0,R15                  length
         LR    R1,R5                   length
CPUT424  CLI   0(R1),C'0'              first significant digit?
         JH    CPUT425                 yes, jump
         LA    R1,1(,R1)               no, bump pointer
         BRCT  R0,CPUT424              next character
CPUT425  EQU   *
         STRING 1X,INTO=((R5),(R1))    blank out zeroes
         L     R6,PSATOLD-PSA(,0)      MY TCB
         L     R6,TCBTCT-TCB(,R6)      SMFTCT
         USING SMFTCT,R6
         LA    R1,WKCELL1              12-byte work area
         SYSEVENT REQSERVC
         L     R3,ASCBOUXB             OUXB ADDRESS
         USING OUXB,R3
         L     R2,OUXBPIN              PAGE-IN COUNT
         A     R2,OUXBPOUT             + PAGE-OUT COUNT
         A     R2,OUXBCAPI             + COMMON PAGE-IN
         L     R3,ASCBRSME             RAX ADDRESS
         L     R3,RAXFMCT-RAX(,R3)     Frame count (ESA)
.RAX1    ANOP
         STRING 2X,((R5),17),          001H12M07S197.542 (microseconds)X
               (ASCBIOSC,F,R9B),       EXCP                            X
               (ASCBDCTI,F,R10B),      Connect                         X
               (TCTLIN,F,R7B),         TGET                            X
               (TCTLOUT,F,R7B),        TPUT                            X
               (WKCELL1,F,R11B),       Total Service                   X
               ((R3),,R9B),            Frame count                     X
               ((R2),,R10B),           Paging                          X
               INTO=LINE
         L     R14,RDRTNR14            return address
         BR    R14
         DROPTEMP                      RELEASE TEMP BASE REGS
         TITLE 'SHOWMVS &REL - Refresh GTF status'
*---------------------------------------------------------------------*
*                                                                     *
*        Refresh GTF status                                           *
*                                                                     *
*---------------------------------------------------------------------*
GTF200   ST    R14,RDRTNR14            return address
         L     R8,CVTPTR(,0)           CVT address
         USING CVTMAP,R8
         STRING '  GTF is not active on this system',                  X
               INTO=(WORK256,L'LINE)
         TM    CVTGTF,CVTGTFAV         ACTIVE?
         JNO   GTF299                  no, exit
GTF220   MVC   EP10,BLANKS             CLEAR WORK AREA
         TM    CVTGTFST,CVTUSR         TRACE=USR ?
         JNO   GTF221                  No, jump
         STRING (EP10,,T),',USR',INTO=EP10
GTF221   TM    CVTGTFST,CVTRNIO        TRACE=RNIO ?
         JNO   GTF222                  No, jump
         STRING (EP10,,T),',RNIO',INTO=EP10
GTF222   CLI   EP10,C' '               any trace active?
         JNE   GTF224                  yes, jump
         STRING ',none',INTO=EP10
GTF224   EQU   *
         STRING '  GTF Active, TRACE=(',(EP10+1,L'EP10-1,T),')',       X
               INTO=(WORK256,L'LINE)
GTF299   L     R14,RDRTNR14            return address
         BR    R14
         DROPTEMP                      RELEASE TEMP BASE REGS
         TITLE 'SHOWMVS &REL - Refresh SubPool status'           RS1002
*---------------------------------------------------------------------*
*                                                                     *
*        Refresh Storage Usage                                        *
*                                                                     *
*    User SPLS (Below)       4160K    1180K      2980K        1616K   *
*    Auth SPLS (Below)       6060K     580K      5480K         804K   *
*    User SPLS (Above)      32768K    4388K     28380K        4392K   *
*    Auth SPLS (Above)    1998848K   11448K   1987400K       12720K   *
*                                                                     *
*---------------------------------------------------------------------*
SPL200   ST    R14,RDRTNR14            return address
         L     R4,PSATOLD-PSA(,0)      TCB
         L     R5,TCBTCT-TCB(,R4)      SMF Timing Control Table
         USING SMFTCT,R5
         L     R6,TCTCRTBL             SMF Storage Control Table
         USING TCTCORE,R6
         L     R7,PSAAOLD-PSA(,0)      ASCB
         L     R7,ASCBLDA-ASCB(,R7)    Local Data Area
         USING LDA,R7
         PACK  WKCELL1,LINE+4(2)       LINE='.SPL00'
         LA    R10,WORK256             work area
         CVB   R15,WKCELL1             index into branch table
         B     *+4(R15)                branch to processing
         J     SPL230                  user below
         J     SPL240                  user above
         J     SPL250                  auth below
         J     SPL260                  auth above
*
SPL230   L     R0,LDALIMIT             LIMIT
         SRL   R0,10                   BYTES -> KILOS
         L     R1,LDALOAL              user region current value
         SRL   R1,10                   BYTES -> KILOS
         LR    R2,R0                   LIMIT
         SLR   R2,R1                   AVAILABLE
         L     R3,TCTLWM               high-watermark
         SRL   R3,10                   BYTES -> KILOS
         STRING '    User SPLS (Below)  ',                             X
               ((R0),,R11B),'K',       Limit                           X
               ((R1),,R11B),'K',       In-use                          X
               ((R2),,R12B),'K',       Available                       X
               ((R3),,R14B),'K',       High-watermark                  X
               INTO=LINE
         J     SPL299
*
SPL240   L     R0,LDASIZA              SIZE OF PRIVATE AREA
         SL    R0,LDALIMIT             LIMIT
         SRL   R0,10                   BYTES -> KILOS
         L     R1,LDAHIAL              auth region current value
         SRL   R1,10                   BYTES -> KILOS
         LTR   R2,R0                   LIMIT
         JZ    *+6                     region>16M, jump
         SLR   R2,R1                   AVAILABLE
         L     R3,TCTHWM               high-watermark
         SRL   R3,10                   BYTES -> KILOS
         STRING '    Auth SPLS (Below)  ',                             X
               ((R0),,R11B),'K',       Limit                           X
               ((R1),,R11B),'K',       In-use                          X
               ((R2),,R12B),'K',       Available                       X
               ((R3),,R14B),'K',       High-watermark                  X
               INTO=LINE
         J     SPL299
*
SPL250   L     R0,LDAELIM              LIMIT
         SRL   R0,10                   BYTES -> KILOS
         L     R1,LDAELOAL             user region current value
         SRL   R1,10                   BYTES -> KILOS
         LR    R2,R0                   LIMIT
         SLR   R2,R1                   AVAILABLE
         L     R3,TCTELWM              high-watermark
         SRL   R3,10                   BYTES -> KILOS
         STRING '    User SPLS (Above)  ',                             X
               ((R0),,R11B),'K',       Limit                           X
               ((R1),,R11B),'K',       In-use                          X
               ((R2),,R12B),'K',       Available                       X
               ((R3),,R14B),'K',       High-watermark                  X
               INTO=LINE
         J     SPL299
*
SPL260   L     R0,LDAESIZA             SIZE OF PRIVATE AREA
         SL    R0,LDAELIM              LIMIT
         SRL   R0,10                   BYTES -> KILOS
         L     R1,LDAEHIAL             auth region current value
         SRL   R1,10                   BYTES -> KILOS
         LTR   R2,R0                   LIMIT
         JZ    *+6                     region=0M, jump
         SLR   R2,R1                   AVAILABLE
         L     R3,TCTEHWM              high-watermark
         SRL   R3,10                   BYTES -> KILOS
         STRING '    Auth SPLS (Above)  ',                             X
               ((R0),,R11B),'K',       Limit                           X
               ((R1),,R11B),'K',       In-use                          X
               ((R2),,R12B),'K',       Available                       X
               ((R3),,R14B),'K',       High-watermark                  X
               INTO=LINE
SPL299   L     R14,RDRTNR14            return address
         BR    R14
         DROPTEMP                      RELEASE TEMP BASE REGS
         TITLE 'SHOWMVS &REL - Refresh Virtual storage effects'  RS1002
*---------------------------------------------------------------------*
*                                                                     *
*   Virtual Storage Effects:                                          *
*                                                                     *
*     Getmain with little      some       bad effects:                *
*     Central :     33980    363244    363244                         *
*     Expanded:      8966    138612    138612                         *
*                                                                     *
*---------------------------------------------------------------------*
STG200   ST    R14,RDRTNR14            return address            RS1002
*        BRAS  R3,*+8                                            RS1002
*        DC    A(STG200)                                         RS1002
*        L     R3,0(R3,0)                                        RS1002
*        USING STG200,R3                                         RS1002
         BALR  R3,0                                              RS1002
         USING *,R3                                              RS1002
         CLI   LINE+4,C'2'                                       RS1002
         JE    STG220                                            RS1002
         LA    R10,WORK256             work area                 RS1002
         LA    R1,WORK44                                         RS1002
         SYSEVENT STGTEST,TYPE=BYTE                              RS1002
         STRING '    Central : ',(WORK44,F,R9B),1X,              RS1002X
               (WORK44+4,F,R9B),1X,(WORK44+8,F,R9B),INTO=LINE    RS1002
         J     STG999                  leave                     RS1002
STG220   DS    0H                                                RS1002
         LA    R10,WORK256             work area                 RS1002
         LA    R1,WORK44                                         RS1002
         SYSEVENT STGTEST,TYPE=BLOCK                             RS1002
         STRING '    Expanded: ',(WORK44,F,R9B),1X,              RS1002X
               (WORK44+4,F,R9B),1X,(WORK44+8,F,R9B),INTO=LINE    RS1002
STG999   L     R14,RDRTNR14            return address            RS1002
         BR    R14                                               RS1002
         DROPTEMP                      RELEASE TEMP BASE REGS    RS1002
         TITLE 'SHOWMVS &REL - Refresh status for JES2 Initiators'
*---------------------------------------------------------------------*
*                                                                     *
*        Refresh status for JES2 Initiators (ESA 4.1 and up)          *
*                                                                     *
*---------------------------------------------------------------------*
JES2I200 BAKR  R14,0
         BALR  R12,0
         USING *,R12
         PACK  WKCELL1,LINE+5(10)      get address
         CVB   R7,WKCELL1              convert to binary
         USING PIT,R7
         LA    R10,WORK256             now point to modified line
         LH    R0,$PITPATID+2          length of PITPATID field
         LH    R1,$PITPATID+0          offset to PITPATID field
         LA    R1,PIT(R1)              addr of PITPATID field
         STRING 2X,((R1),(R0)),INTO=WKCELL1
         LH    R0,$PITCLASS+2          length of PITCLASS field
         LH    R1,$PITCLASS+0          offset to PITCLASS field
         LA    R1,PIT(R1)              addr of PITCLASS field
         STRING ((R1),(R0)),INTO=WKCELL2
         STRING (WKCELL1,7),'Drained  ',WKCELL2,INTO=LINE
         L     R8,PITASCB              ASCB
         USING ASCB,R8
         LTR   R8,R8                   init active?
         JZ    JES2I290                no, exit
*
         L     R9,ASCBASSB             ASSB
         USING ASSB,R9
         L     R9,ASSBJSAB             JSAB
         USING JSAB,R9
         L     R2,PITSJB               SJB address
         USING SJB,R2
         LH    R15,$SJBJCLAS           get offset to job class
         LA    R1,SJB(R15)             change offset to address
         LH    R15,$SJBCSCB            get offset to CSCB address
         L     R2,SJB(R15)             get CSCB address
         USING CHAIN,R2
*
         IC    R5,PITHALT$             halt mask for my JES2
JES2I234TM TM  PITSTAT,*-*             HAS INIT BEEN HALTED ?
*
         MVC   WKCELL3,=C'Inactive'    INDICATE INITIATOR INACTIVE
         EX    R5,JES2I234TM           HAS INIT BEEN HALTED ?
         JZ    *+10                    BRANCH IF NOT
         MVC   WKCELL3,=C'Halted  '    INDICATE INITIATOR HALTED
         STRING (WKCELL1,7),WKCELL3,1X,                                X
               (WKCELL2,8),1X,         classes                         X
               47X,                    filler                          X
               (ASCBASID,H,R4B),1X,    ASID (decimal)                  X
               (ASCBASID,,X),1X,       ASID (hex)                      X
               INTO=LINE
*
         CLC   JSABJBNM,CHKEY          init busy?
         JNE   JES2I290                no, jump
*
JES2I235 MVC   WKCELL3,=C'Active  '    initialize status field
         EX    R5,JES2I234TM           HAS INIT BEEN HALTED ?
         JZ    *+10                    BRANCH IF NOT
         MVC   WKCELL3,=C'Halting '    INDICATE INITIATOR HALTING
*
         TM    PITSTAT,PITHOLDA+PITHOLD1 HAS INIT BEEN STOPPED ?
         JZ    *+10                    BRANCH IF NOT
         MVC   WKCELL3,=C'Draining'    INDICATE INITIATOR DRAINING
*
         STRING (WKCELL1,7),WKCELL3,1X,                                X
               (WKCELL2,8),1X,         classes                         X
               JSABJBNM,1X,            job name                        X
               CHSTEP,1X,              step name                       X
               CHPROCSN,1X,            proc-step name                  X
               JSABJBID,1X,            job ID                          X
               ((R1),1),1X,            job class                       X
               JSABUSID,               User ID                         X
               (ASCBASID,H,R5B),1X,    ASID (decimal)                  X
               (ASCBASID,,X),          ASID (hex)                      X
               INTO=LINE
         STRING (LINE,,T),2X,JSABGPNM, XCF Group name                  X
               INTO=LINE
JES2I290 TR    LINE,TRTPRINT           clean up non-printable
         DROP  R2,R7,R8,R9             CSCB,PIT,ASCB,JSAB
.JES2I299 ANOP
JES2I299 PR
*@@@     $PIT
PIT      DSECT                     HASP PARTITION INFORMATION TBL DSECT
PITNEXT  DS    A(PIT)              ADDRESS OF NEXT PIT
PITSJB   DS    V(SJB)              ADDRESS OF SJB FOR EXECUTING JOB
PITASCB  DS    V(ASCB)             Address of initiator's ASCB
PITJQOFF DS    V(JQE)              Offset of initiator's JQE
PITFLAGS DS    B                   PIT FLAG BYTE
PITSTAT  DS    B                   LOGICAL PARTITION STATUS BYTE
PITHOLDA EQU   B'10000000'         PIT is drained ($P I)
PITHOLD1 EQU   B'01000000'         PIT is drained ($P IN)
PITHOLDR EQU   B'00100000'         PIT is stopped              HJE4430
PITBUSY  EQU   B'00010000'         Partition busy indicator    HJE4430
PITHALT42 EQU  B'00011000'         PIT is halted               HJE4420
PITHALTA EQU   B'00001000'         PIT is halted ($Z I)        HJE4430
PITHALT1 EQU   B'00000100'         PIT is halted ($Z IN)       HJE4430
PITINIT  EQU   B'00000010'         OS initiator exists for PIT HJE4430
PITIDLE  EQU   B'00000001'         PIT 'Idle' message sent     HJE4430
*@@@     $SJB
SJB      DSECT
$FARRTNE LOCTR
         DROP
***********************************************************************
*                                                                     *
*        RECOVERY ROUTINE                                             *
*                                                                     *
***********************************************************************
RECOVERY LA    R15,0012                R15=12
         CR    R0,R15                  SDWA ALLOCATED?
         BALR  R15,0                   LOCAL BASE
         BNE   RCVY$200-*(,R15)        YES, JUMP
         SR    R15,R15                 SET RC=0 (IF R0=12)
         BR    R14                     RETURN TO EXIT PROLOG
RCVY$200 BALR  R15,0
         SAVE  (14,12),,'Recovery'
         BALR  R12,0
         USING *,R12
         LR    R8,R1
         USING SDWA,R8
         LR    R14,R13
         L     R13,SDWAPARM            =A(DYNAM)
         LA    R13,RCVYSAVE-DYNAM(,R13) =A(RCVYSAVE)
         ST    R14,4(,R13)
         ST    R13,8(,R14)
         USING RCVYSAVE,R13
         CLI   RCVYSAVE,X'C4'          abend in VALIDATE macro?
         JE    RCVY$800                yes, retry at R14 with R1=0
         DEVTYPE $NORETRY,RCVYSAVE+16  Check for //$NORETRY DD
         LTR   R15,R15                 //$NORETRY DD present in JCL?
         JZ    RCVY$999                yes, continue with abend
         ICM   R0,B'1111',ALET1        cross-memory active?
         JZ    RCVY$233                no, jump
         ALESERV DELETE,ALET=ALET1,MF=(E,ALESERV2)
         XC    ALET1,ALET1             zero ALET for RCVY rtne
RCVY$233 EQU   *
         ICM   R4,B'1111',RETRY        LOAD/TEST RETRY ADDRESS
         JNP   RCVY$999                NO RETRY, CONTINUE WITH ABEND
         MVI   RETRY,X'FF'             INVALIDATE RETRY ADDRESS
         LA    R0,CVTMAP-CVTFIX        LENGTH OF CVT PREFIX
         L     R1,CVTPTR(,0)           CVT ADDRESS
         SLR   R1,R0                   SUBTRACT PREFIX LENGTH
         ST    R1,SDWASR08             R8=CVTADDR
         MVC   SDWASR09,PSATOLD-PSA    R9=TCBADDR
         MVC   SDWASR11,BASEREG        R11 (BASE REG)
         MVC   SDWASR13,SDWAPARM       R13
         L     R13,4(,R13)             R/TM SAVE AREA
         SETRP WKAREA=(R8),RETADDR=(R4),RC=4,  <== RETRY               X
               FRESDWA=YES,RETREGS=YES,REGS=(14,12)
RCVY$800 MVI   RCVYSAVE,0              reset flag
         L     R4,SDWASR14             return addr is R14
         L     R13,4(,R13)             R/TM SAVE AREA
         SETRP WKAREA=(R8),RETADDR=(R4),RC=4,DUMP=NO,    <== RETRY     X
               FRESDWA=YES,RETREGS=YES,REGS=(14,12)
RCVY$999 L     R13,4(,R13)
         SETRP WKAREA=(R8),REGS=(14,12),RC=00
BASEREG  DC    A(BASEADDR)             BASE REGISTER FOR RECOVERY
$NORETRY DC    C'$NORETRY'             do not retry if ddname in JCL
         DROP
         TITLE 'SHOWMVS &REL - Sub-task'
***********************************************************************
*                                                                     *
*        Sub-task used for asynchronous access to catalogs and vtocs  *
*                                                                     *
*        This sub-task allows impatient users (like me) to see the    *
*        first screen without any delay while volume and vtoc         *
*        information (which require i/o) is obtained for the          *
*        link-list, lpa-list and apf-list displays.                   *
*                                                                     *
*        When the user scrolls to these screens (which takes a few    *
*        seconds), volume and vtoc information will have been obtained*
*        in the background, without the user having to wait.          *
*                                                                     *
*        If a speedy user chains a "find" command to the invocation   *
*        of this program (by issuing "tso showmvs;f lpa-list" for     *
*        example), then he/she will probably get a bunch of question  *
*        marks instead of volume and vtoc information (surprise,      *
*        surprise !!).  After a few seconds of hesitation, this user  *
*        is likely to hit "enter" or scroll (up or down) to see if    *
*        other bizarre things happen, which leaves enough time to the *
*        subtask to finish obtaining the information and replace the  *
*        question marks with pertinent data.                          *
*                                                                     *
*                                                                     *
***********************************************************************
         USING BASEADDR,R11            LTORG base
SUB_TASK BEGIN_PROC SAVE=NO            BASEREG=YES SYNC req     RS0502
         L     R4,PSATOLD-PSA(,0)      my TCB
         USING TCB,R4
         USING LINE,R10
         BALR  R12,0                   Local base reg
         USING *,R12
         ICM   R6,B'1111',TCBUSER      authorized?
         JNZ   SUBT005                 yes, jump
         LPR   R6,R1                   A(DYNAM)
         ST    R6,0(,R13)              pass addr to ETXR
         J     SUBT006
         USING DYNAM,R6                main task's DYNAM
SUBT005  EQU   *
         CLC   TCBPKF,PROTKEY          KEY=4 ?
         JE    SUBT006                 no, jump
         MODESET KEYADDR=PROTKEY,WORKREG=2 switch to KEY4 if AUTH=ESR
         LA    R0,DYNAML               length of work-area
         SLR   R1,R1                   LOC=BELOW
         SYNCHX STORAGE_SP230,STATE=SUPV,RESTORE=YES             RS1002
         J     SUBT007
SUBT006  EQU   *
         LA    R0,DYNAML               length of work-area
         GETMAIN R,LV=(0)              work-area for sub-task
SUBT007  EQU   *
         DROP  R6                      main task's DYNAM
*
*        Copy the mother-task's work-area to the sub-task's
*
         LR    R13,R1                  Addr of "to" area
         USING DYNAM,R13               sub-task's DYNAM area
         LR    R14,R1                  Addr of "to" area
         LA    R15,DYNAML              length
         LR    R0,R6                   Addr of "from" area
         LA    R1,DYNAML               length
         MVCL  R14,R0                  move work-area
*
         L     R8,CVTPTR(,0)           CVT ADDRESS
         SH    R8,=AL2(CVTMAP-CVTFIX)  point at CVT prefix
         USING CVTFIX,R8               PERMANENT ASSIGNMENT
*
*        Estimate processor speed with a BCTR loop
*
         ICM   R10,B'1111',CPUONLINE   processor speed line
         JZ    SUBT060
         BRAS  R15,SUBT043
         MVI   1(R2),X'01'             CHANGE R0,R2 TO R0,R1
         BR    R14
ONETENTH DC    F'10'                 TEN 1/100TH OF A SECOND
*
*        Multi-processor Effective Performance Tables
*
*                1   2  3  4  5  6  7  8  9  10    # of CPUs
MIPS9021 DC    H'100,95,91,86,84,80,78,76,74,71'   bipolar
MIPS9672 DC    H'100,83,67,67,60,56'               CMOS
*
SUBT043  STIMER TASK,(R15),BINTVL=ONETENTH
         SLR   R0,R0                   BCTR COUNT
         LA    R2,WKCELL1              WORK AREA
         MVC   WKCELL1(2),=X'0602'     MOVE BCTR R0,R2 INSTRUCTION
         BALR  R1,R2                   EXECUTE LOOP
         LPR   R15,R0                  NUMBER OF ITERATIONS
         CLI   CVTMDL,X'59'            is this an AMDAHL box?
         JNE   SUBT045                 no, jump
         LR    R0,R15                  add 25% if it's an AMDAHL
         SRL   R0,2                    add 25% if it's an AMDAHL
         ALR   R15,R0                  add 25% if it's an AMDAHL
*
SUBT045  L     R14,CPUONLINE+4         # of CPUs on-line
         MR    R14,R14                 iterations * #CPU
         L     R14,CPUONLINE+4         # of CPUs on-line
         ALR   R14,R14                 # of CPUs * 2
         LH    R0,MIPS9021-2(R14)      Effective performance factor
         CLI   CVTMDL,X'96'            CMOS processor?
         JNE   SUBT047                 no, jump
         LH    R0,MIPS9672-2(R14)      yes, use CMOS table
SUBT047  MR    R14,R0                  effective perf * 100
         D     R14,=F'1000000'         .1 MIPS
         CVD   R15,WKCELL1             .1 MIPS
         MVC   WORK256(7),=X'40202021204B20' 0999.9
         ED    WORK256(7),WKCELL1+5    0999.9
         STRING '  Processor Speed: ',(WORK256+2,5),                   X
               ' Million BCTR Instructions per Second.',               X
               INTO=LINE
*
*        LASTCLPA routine
*
SUBT060  L     R2,CVTASMVT             POINT TO ASM VECTOR TABLE
         L     R2,ASMPART-ASMVT(,R2)   POINT TO PAGE ACT REF TABLE
         LA    R3,PARTENTS-PART(,R2)   FIRST PART ENTRY
         USING PARTENT,R3
         L     R4,PAREPATP             ADDRESS OF PAT
         USING PAT,R4
*
*        Read the 1st record on the 1st track of the PLPA data set and
*        translate the "Quick Start" time-stamp at offset 32 (decimal).
*        Starting with z/OS R3 it is the second record           RS0404
*
         ICM   R10,B'1111',CVIOLINE    IPL with CLPA=NO  ?
         JZ    SUBT065                 NO, EXIT
         L     R0,PAREUCBP             UCB address
         LA    R1,PATCCHHB             CCHH of TPARTBLE
         LA    R2,1                    Record-Number 1           RS0404
         TM    HBB7706,L'HBB7706       running on z/OS R3 ?      RS0404
         JNO   SUBT061                 no, jump                  RS0404
         LA    R2,2                    Record-Number 2           RS0404
SUBT061  DS    0H                                                RS0404
         SYNCHX K0EXCP,STATE=SUPV,KEYADDR=PROTKEY,AMODE=31,RESTORE=YES,X
               MF=(E,SYNCHL)                                     RS1002
         LTR   R15,R15                 EXCP went OK?
         JNZ   SUBT068                 no, issue error message
         LA    R1,WORK256+32           TPARTIME
         BAS   R14,STCKCONV            convert it to yyyymmddhhmmsshh
         STRING '  Last Quick Start (CVIO) Date: ',STCKDATE,           X
               '   Time: ',(STCKTIME,8),                               X
               INTO=LINE
*
*        Read the 1st record on the 2nd track of the PLPA data set and
*        translate the "Cold Start" time-stamp at offset 24 (decimal).
*        Starting with z/OS R3 it is the second record           RS0404
*
*        Note that this routine only works on 3380 and 3390 DASD.
*        On a 3380, it reads the QSR which is record no 11.
*        On a 3390, it reads the EQSR which is record no 14.
*        The QSR and the EQSR have a similar format: both contain
*        the Cold Start time-stamp at offset 24.
*
SUBT065  ICM   R10,B'1111',CLPALINE    Quick Start?
         JZ    SUBT069                 NO, EXIT
         L     R1,PATCCHHB             CCHH of 1st track
         LA    R1,1(,R1)               change HH to HH+1
         ST    R1,WKCELL4              Store CCHH
         L     R0,PAREUCBP             UCB address
         LA    R1,WKCELL4              QSR (3380) or EQSR (3390)
         LA    R2,1                    Record-Number 1           RS0404
         TM    HBB7706,L'HBB7706       running on z/OS R3 ?      RS0404
         JNO   SUBT066                 no, jump                  RS0404
         LA    R2,2                    Record-Number 2           RS0404
SUBT066  DS    0H                                                RS0404
         SYNCHX K0EXCP,STATE=SUPV,KEYADDR=PROTKEY,AMODE=31,RESTORE=YES,X
               MF=(E,SYNCHL)                                     RS1002
         LTR   R15,R15                 EXCP went OK?
         JNZ   SUBT068                 no, issue error message
         LA    R1,WORK256+24           QSRSYNCH
         BAS   R14,STCKCONV            convert it to yyyymmddhhmmsshh
         STRING '  Last Cold Start (CLPA) Date: ',STCKDATE,            X
               '   Time: ',(STCKTIME,8),                               X
               INTO=LINE
         J     SUBT069
SUBT068  EQU   *
         STRING '  ** Error reading PLPA Data Set ** ',                X
               WORK256,INTO=LINE
SUBT069  EQU   *
         DROP  R3,R4                   PARTENT,PAT
*
         L     R10,LINE1PTR            First line
*
*        VOLSER
*LOOP
SUBT111  CLI   VOLSER,C'?'             VOLSER FOUND ALREADY?
         JNE   SUBT121                 YES, JUMP
         MVC   VOLSER,=C'??????'       NOT FOUND
         L     R14,=X'44,00,00,00'     CAMLST FLAGS
         LA    R15,DSNAME              ENTRY NAME
         SLR   R0,R0                   NO CVOL PTR
         LA    R1,WORK256              WORK AREA
         STM   R14,R1,CAMLST1          BUILD CAMLIST
         LOCATE CAMLST1                GET VOLSER FROM CATALOG
         LTR   R15,R15
         JNZ   SUBT121                 NOT FOUND (OR OTHER ERROR)
         MVC   VOLSER,WORK256+6        MOVE VOLSER
         CLI   CATUNCAT,C'?'           cat/uncat status requested?
         JNE   SUBT121                 no, jump
         MVI   CATUNCAT,C' '           CATALOGED=YES
*UNCAT=UNCAT
SUBT121  CLI   CATUNCAT,C'?'           CATALOG STATUS KNOWN ALREADY?
         JNE   SUBT141                 YES, JUMP
         MVC   CATUNCAT,=C'UNCAT'      MOVE STATUS
         L     R14,=X'44,00,00,00'     CAMLST FLAGS
         LA    R15,DSNAME              ENTRY NAME
         SLR   R0,R0                   NO CVOL PTR
         LA    R1,WORK256              WORK AREA
         STM   R14,R1,CAMLST1          BUILD CAMLIST
         LOCATE CAMLST1                GET VOLSER FROM CATALOG
         LTR   R15,R15
         JNZ   SUBT141                 NOT FOUND (OR OTHER ERROR)
         CLC   VOLSER,WORK256+6        SAME VOLSER?
         JNE   SUBT141                 NO, JUMP
         MVC   CATUNCAT,BLANKS         CATALOGED=YES
*
SUBT141  LA    R10,LINE+L'LINE     <== NEXT LINE
         CLI   LINE,00                 LAST LINE?
         JNE   SUBT111                 NO, LOOP MORE
*ENDLOOP
*
*        PASS 2: CROSS-REFERENCE LNK/LPA/APF TABLE ENTRIES
*
         L     R10,LINE1PTR            First line
*
*        UNCAT=APF
*LOOP
SUBT201  CLI   LINE_APF,C'?'           LNK/LPA/APF STATUS REQUIRED?
         JNE   SUBT205                 NO, JUMP
         LM    R15,R1,APFTABLE         APF TABLE                 RS1199
         BRAS  R14,SUBT820             SCAN APFTABLE
         DC    C'APF '                 LITERAL
         MVC   LINE_APF,0(R1)          LITERAL OR SPACES
         CLI   LINE_LNK,C' '           UNCAT APFLST ENTRY?
         JNE   SUBT205                 YES, JUMP
*
*        LNK=LPA
*
         LM    R15,R1,LPATABLE         LPA TABLE
         BRAS  R14,SUBT820             SCAN APFTABLE
         DC    C'LPA '                 LITERAL
         MVC   LINE_LPA,0(R1)          LITERAL OR SPACES
*
*        LPA=LNK
*
         LM    R15,R1,LNKTABLE         LNK TABLE
         BRAS  R14,SUBT820             SCAN APFTABLE
         DC    C'LNK '                 LITERAL
         MVC   LINE_LNK,0(R1)          LITERAL OR SPACES
*                                                                RS1199
*        Sorry but I have to move the code to the subtask becauseRS1199
*        of the poor performance for this callable service.      RS1199
SUBT205  DS    0H
         CLI   LINE_SMS_ATTR,C'?'      SMS attributes ?          RS1199
         JNE   SUBT209                  no, jump
         MVC   LINE_SMS_ATTR(7),=CL7'n/a'                        RS1199
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS1199
         JO    SUBT209                 yes, jump                 RS1199
         XCALL IGWASMS,                                                X
               (LRETCODE,              Returcode                       X
               LRSNCODE,               Reasoncode                      X
               WORK256+25,             Problemdata                     X
               =A(44),                 Length DSNAME                   X
               DSNAME,                 Dsname                          X
               WORK256+190,            SMS-DATA                        X
               DSTYPE)                 Type                      RS1199
         LTR   R15,R15                 Test return code          RS1199
         JNZ   SUBT209                 bad rc                    RS1199
         CLC   DSTYPE,=F'0'                                      RS1199
         JNE   *+10
         MVC   LINE_SMS_ATTR(5),=CL5'PO'                         RS1199
         CLC   DSTYPE,=F'1'
         JNE   *+10                                              RS1199
         MVC   LINE_SMS_ATTR(5),=CL5'PDSE'                       RS1199
         CLC   DSTYPE,=F'2'                                      RS1199
         JNE   *+10
         MVC   LINE_SMS_ATTR(5),=CL5'HFS'                        RS1199
         MVC   LINE_SMS_ATTR+5(8),WORK256+190                    RS1199
         MVC   LINE_SMS_ATTR+14(8),WORK256+190+30                RS1199
         MVC   LINE_SMS_ATTR+23(8),WORK256+190+60                RS1199
*                                                                RS1199
.SUBT209  ANOP                                                   RS1199
SUBT209  LA    R10,LINE+L'LINE     <== NEXT LINE
         CLI   LINE,00                 LAST LINE?
         JNE   SUBT201                 NO, LOOP MORE
*ENDLOOP
*
*        PASS 3: DETECT TIOT DATA SETS IN LPALST OR LNKLST
*
         ICM   R10,B'1111',TIOTLINES   First TIOT line
         JZ    SUBT400                 empty, exit
*
*        TIOT=LPA
*LOOP
SUBT301  LM    R15,R1,LPATABLE         LPA TABLE
         BRAS  R14,SUBT830             SCAN APFTABLE
         DC    C'LPA '                 LITERAL
         STRING (LINE,,T),1X,((R1),4),INTO=LINE  append 'LPA' or blanks
*
*        TIOT=LNK
*
SUBT302  LM    R15,R1,LNKTABLE         LNK TABLE
         BRAS  R14,SUBT830             SCAN APFTABLE
         DC    C'LNK '                 LITERAL
         STRING (LINE,,T),1X,((R1),4),INTO=LINE  append 'LNK' or blanks
*
SUBT309  LA    R10,LINE+L'LINE     <== NEXT LINE
         CL    R10,TIOTLINES+4         LAST LINE?
         JL    SUBT301                 NO, LOOP MORE
*ENDLOOP
*
*        PASS 4: READ F1-DSCB TO DISPLAY CREATION DATE
*                THIS PASS TAKES THE LONGEST AND IS DONE LAST
*
SUBT400  L     R10,LINE1PTR            First line
         SLR   R6,R6                   extent counter
*LOOP
SUBT401  CLI   YYYYMMDD,C'?'           DATE FOUND ALREADY?
         JNE   SUBT409                 YES, JUMP
         MVC   YYYYMMDD,BLANKS         BLANK OUT DATE FIELD
         CLC   VOLSER,=C'MIGRAT'       Has HSM migrated the data set?
         JE    SUBT408M                Yes, jump
         L     R14,=X'C1,00,00,00'     CAMLST FLAGS
         LA    R15,DSNAME              DATA SET NAME
         LA    R0,VOLSER               VOLUME SERIAL
         LA    R1,DS1FMTID             WORK AREA
         STM   R14,R1,CAMLST1          BUILD CAMLIST
         OBTAIN CAMLST1                READ F1-DSCB
         LTR   R15,R15
         JNZ   SUBT409                 NOT FOUND (OR OTHER ERROR)
         LA    R1,DS1CREDT             creation date: X'50,000B'
         BRAS  R14,DSCBDATE            convert to X'00800011F'
         STRING (WKCELL1+4,P,YYYYMMDD),INTO=YYYYMMDD CONVERT DATE
         CLI   LINE_REFD,C'?'          last-referenced date needed?
         JNE   SUBT406                 no, jump
         LA    R1,DS1REFD              last-ref date: X'50,000B'
         BRAS  R14,DSCBDATE            convert to X'00800011F'
         STRING (WKCELL1+4,P,YYYYMMDD),INTO=LINE_REFD CONVERT DATE
*
*        Check if the data set specified in the APF-list
*        with *SMS* is really an SMS-managed volume
*
         CLC   =C'*SMS*',LINE_APFVOL   APF entry for SMS-managed DS ?
         JNE   SUBT406                 no, jump
         XC    VOLSER,LINE_APFVOL      swap *SMS* and actual volser
         XC    LINE_APFVOL,VOLSER      swap *SMS* and actual volser
         XC    VOLSER,LINE_APFVOL      swap *SMS* and actual volser
         XC    WORK256,WORK256         clear work area
         LA    R2,WORK256              100-byte work area for UCBSCAN
         LA    R7,100(,R2)             48-byte UCB area
         UCBSCAN COPY,                                                 X
               VOLSER=LINE_APFVOL,     volser                          X
               DEVCLASS=DASD,          device class                    X
               DYNAMIC=YES,            DYNAMIC=NO & DYNAMIC=YES        X
               RANGE=ALL,              3-digit & 4-digit               X
               WORKAREA=(R2),          100-byte work area              X
               UCBAREA=(R7),           48-byte UCB area                X
               MF=(E,UCBSCANL,COMPLETE)
         LTR   R1,R15                  UCBSCAN OK?
         JNZ   SUBT406                 no, jump
         TM    UCBFL5-UCBOB(R7),UCBSMS SMS-managed volume?
         JO    SUBT406                 yes, jump
         STRING 'NOSMS',INTO=CATUNCAT  volume is not SMS-managed
SUBT406  EQU   *
         CL    R10,LNKTABLE+0          LINK-LIST?
         JL    SUBT407                 NO, JUMP
         CL    R10,LNKTABLE+8          LINK-LIST?
         JH    SUBT407                 NO, JUMP
         STRING (DS1NOEPV,FL1,R3B),' Ext',INTO=(LINE+80,7)         %RS
         SLR   R0,R0
         IC    R0,DS1NOEPV
         ALR   R6,R0                   Tally allocated extents
*
SUBT407  CLI   CATUNCAT,C'%'           SYS1.DUMPxx ?
         JNE   SUBT409                 NO, JUMP
         MVC   CATUNCAT(5),=C'Empty'   NO, TELL IT
         ICM   R0,B'0011',DS1LSTAR     DATA SET FULL?
         JZ    SUBT409                 NO, JUMP
         STRING 'Full ',INTO=CATUNCAT                            RS0902
*
*        Read dump title from sys1.dump data set
*
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         JZ    SUBT409                 NO, JUMP
         CLI   NEXTLINE,C'.'           next line empty ?
         JNE   SUBT409                 NO, JUMP
         STRING '    Title=(none)',INTO=NEXTLINE
         UCBLOOK NOPIN,                do not pin the UCB              X
               VOLSER=VOLSER,          volume serial                   X
               UCBPTR=WKCELL2,         UCB addr                        X
               DYNAMIC=YES,            search static and dynamic UCBs  X
               RANGE=ALL,              3 and 4digit devices      RS0201X
               MF=(E,WORK256,COMPLETE)
         LTR   R15,R15                 UCB located?
         JNZ   SUBT409                 NO, JUMP
         STRING '    Title=n/a','Compressed',INTO=NEXTLINE       RS0201
         TM    DS1FLAG1,DS1COMPR                                 RS0201
         JNZ   SUBT409                                           RS0201
         STRING '    Title=n/a','PS-E',INTO=NEXTLINE             RS0201
         TM    DS1SMSFG,DS1STRP                                  RS0201
         JNZ   SUBT409                                           RS0201
         STRING '    Title=n/a','EXCP error',INTO=NEXTLINE       RS0201
         L     R0,WKCELL2              addr of the UCB
         LA    R1,DS1EXT1+2            CCHH of first track
         LA    R2,1                    Record-Number 1           RS0404
         SYNCHX K0EXCP,STATE=SUPV,KEYADDR=PROTKEY,AMODE=31,RESTORE=YES,X
               MF=(E,SYNCHL)                                     RS1002
         LTR   R15,R15                 EXCP went OK?
         JNZ   SUBT409                 no, issue error message
*Jm      LA    R1,WORK256+188          time stamp at offset 188
         MVI   NEXTLINE,C'.'           reset for STCKCONV          +JM
         LA    R1,WORK256+72           time stamp at offset 72     +JM
         BAS   R14,STCKCONV            convert it to yyyymmddhhmmsshh
         STRING '    Date=',STCKDATE,                                  X
               ' Time=',(STCKTIME,8),                                  X
               ' Title=',(WORK256+88,100),                             X
               INTO=NEXTLINE
.SUBT408 ANOP
         J     SUBT409                 next data set
*
SUBT408M MVC   CATUNCAT,BLANKS         full/empty status unknown
         CLI   NEXTLINE,C'.'           next line empty ?
         JNE   SUBT409                 NO, JUMP
         STRING '    Data set has been migrated',INTO=NEXTLINE
*
SUBT409  LA    R10,LINE+L'LINE     <== NEXT LINE
         CLI   LINE,00                 LAST LINE?
         JNE   SUBT401                 NO, LOOP MORE
*ENDLOOP
         ICM   R10,B'1111',LINKXTNT    link-list hdr line
         JZ    SUBT799                 zero, jump
         STRING (LINE,,T),' (',((R6),,L),' allocated)',INTO=LINE
SUBT799  EXIT                          GOOD BYE
*---------------------------------------------------------------------*
*        Sub-routine: convert DS1CREDT to CVTDATE format              *
*---------------------------------------------------------------------*
DSCBDATE SLR   R0,R0
         ICM   R0,B'0001',0(R1)        CREATION YEAR
         CVD   R0,WKCELL1
         ICM   R0,B'0011',1(R1)        CREATION DAY
         SLR   R1,R1
         ICM   R1,B'0011',WKCELL1+6    ....YYYC
         SRL   R1,4                    ....0YYY
         CVD   R0,WKCELL1              0000DDDC
         STH   R1,WKCELL1+4            0YYYDDDC
         BR    R14
*---------------------------------------------------------------------*
*        Sub-routine: cross-reference LNK/LPA/APF table entries       *
*---------------------------------------------------------------------*
SUBT820  LTR   R15,R15                 TEST
         JZ    SUBT888                 TEST
*--LOOP
SUBT821  CLC   DSNAME,DSNAME-LINE(R15) MY DSNAME?
         JNE   SUBT824                 NO, JUMP
         CLC   VOLSER,VOLSER-LINE(R15) MY VOLSER?
         JE    SUBT888                 YES, QUIT
SUBT824  BRXLE R15,R0,SUBT821          NEXT ENTRY
*--ENDLOOP
         J     SUBT887
*---------------------------------------------------------------------*
*        Sub-routine: show LNK/LPA status for TIOT entries            *
*---------------------------------------------------------------------*
SUBT830  LTR   R15,R15                 TEST
         JZ    SUBT888                 TEST
*--LOOP
SUBT831  CLC   LINE_DSN2,DSNAME-LINE(R15) MY DSNAME?
         JNE   SUBT834                 NO, JUMP
         CLC   LINE_VOL2,VOLSER-LINE(R15) MY VOLSER?
         JE    SUBT888                 YES, QUIT
SUBT834  BRXLE R15,R0,SUBT831          NEXT ENTRY
*--ENDLOOP
SUBT887  LA    R1,BLANKS               APF=NO
         B     4(,R14)
SUBT888  LR    R1,R14                  APF=YES
         B     4(,R14)
*---------------------------------------------------------------------*
*                                                                     *
*        KEY=ZERO EXCP                                                *
*                                                                     *
*        Build DCB, DEB, IOB and channel program to read 256 bytes    *
*        of data using the UCB addr and CCHH passed by caller.        *
*        EXCP is issued in KEY=ZERO which requires no OPEN.           *
*                                                                     *
*        This code is used to read the following data sets:           *
*          1. PLPA paging data set (to get date of last CLPA)         *
*          2. SYS1.DUMPxx (to get dump title)                         *
*                                                                     *
*        R0 = UCB address                                             *
*        R1 = CCHH                                                    *
*        R2 = Record number                                           *
*                                                                     *
*---------------------------------------------------------------------*
K0EXCP   L     R1,0(,R1)               load CCHH
         STM   R0,R1,WKCELL1           save UCB address and CCHH
         LA    R5,DCB_IOB_DEB          work area (DCB)
         USING IHADCB,R5
         MVI   DCBMACF1,X'D0'          MACRF=E
         MVI   DCBMACF2,X'08'          MACRF=E
         MVI   DCBOFLGS,DCBOFOPN       DCB is OPEN
*
         LA    R0,IOBSTDRD             IOB addr
         ST    R0,DCBIOBAD             store IOB addr into DCB
         MVI   IOBFLAG1,IOBCMDCH+IOBUNREL flags
         LA    R0,WKCELL1              I/O ECB
         ST    R0,IOBECBPT             I/O ECB
         ST    R5,IOBDCBPT             STORE DCB ADDR INTO IOB
         STCM  R1,B'1111',IOBSEEK+3    Store CCHH into IOB
         STCM  R2,B'0001',IOBSEEK+7    Store Record-Number       RS0404
*        MVI   IOBSEEK+7,1             R=1                       RS0404
*
         LA    R6,END_OF_IOB           work area (DEB)
         USING DEBAVT,R6
         LA    R14,CVTBRET             dummy appendage routine
         LR    R15,R14                 dummy appendage routine
         LR    R0,R14                  dummy appendage routine
         LR    R1,R14                  dummy appendage routine
         LR    R2,R14                  dummy appendage routine
         STM   R14,R2,DEBAVT           Appendage Vector Table
         MVI   DEBAMLNG,16             length of access method section
         MVI   DEBNMEXT,1              number of extents in DEBDASD
         ST    R5,DEBDCBAD             STORE DCB ADDR INTO DEB
         MVZ   DEBPROTG,PROTKEY        protection key into DEB
         OI    DEBDEBID,X'0F'          DEB identifier
         ST    R6,DEBAPPAD             addr of Appendage Vector Table
         MVI   DEBEXSCL,4              lngth of DASD section (16 bytes)
         LA    R0,DEBBASIC             DEB basic section
         ST    R0,DCBDEBAD             Store DEB addr into DCB
         ST    R9,DEBTCBAD             Store TCB addr into DEB
         LA    R7,DEBBASND             end of basic section
         USING DEBDASD,R7
         CLI   WKCELL1,X'00'           UCB below ?    RS1101
         JE    K0EXCP_10                 ok, continue
         IOSCAPU CAPTUCB,UCBPTR=WKCELL1,CAPTPTR=WKCELL2,               X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,WORK256)  RS1101
         MVC   WKCELL1(4),WKCELL2      move captured UCB         RS1101
         LTR   R15,R15                                           RS1101
         JZ    K0EXCP_10                                         RS1101
         STRING 'RC=',(LRETCODE,,X),   RC                              X
               ' RSN=',(LRSNCODE,,X),  RSN                             X
               INTO=WORK256                                      RS1101
         J     K0EXCP99                                          RS1101
K0EXCP_10 DS    0H                                               RS1101
         LM    R0,R1,WKCELL1           reload UCB address and CCHH
         ST    R0,DEBUCBAD             Store UCB address
         MVI   DEBDVMOD,X'58'          file mask: no write, no seek
         STCM  R1,B'1111',DEBSTRCC     store begin CCHH
         STCM  R1,B'1111',DEBENDCC     store end CCHH
         MVI   DEBNMTRK+1,1            single-track extent
         LA    R0,CCW2                 work area for CCWs
         ST    R0,IOBSTART             start of channel program
         LA    R14,IOBSEEK+3           seek addr
         LA    R15,5                   length of search arg
         LA    R0,CCW2                 search ccw
         LA    R1,1                    non-zero value
         LA    R2,WORK256              work-area
         LA    R3,L'WORK256            data length
         STM   R14,R3,CCW2             build CCW chain
         MVI   CCW2,X'31'              Command: search ID equal
         MVI   CCW2+4,X'40'            flags: CC
         MVI   CCW3,X'08'              Command: TIC
         MVI   CCW4,X'0E'              Command: Read data
         MVI   CCW4+4,X'20'            flags: SLI
         MVI   WKCELL1,0               clear ECB
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0 for EXCP
         EXCP  IOBSTDRD                issue EXCP in key=0
         MODESET KEYREG=(2)            switch back to own key
         WAIT  1,ECB=WKCELL1           wait for completion
         SLR   R15,R15                 RC=0
         CLI   WKCELL1,X'7F'           read OK?
         JE    K0EXCP99                yes, exit
         STRING 'CC=',(WKCELL1,1,X),   ECB CC                          X
               ' CSW=',(IOBCSW,,X),                                    X
               ' UCB=',(DEBUCBAD+1,3,X),                               X
               ' CCHHR=',(IOBSEEK+3,5,X),                              X
               INTO=WORK256
K0EXCP99 EXIT
         DROP
         IKJENDP
*---------------------------------------------------------------------*
*        DESCRIPTION OF A PRINT LINE                                  *
*---------------------------------------------------------------------*
         DSECT
LINE     DS    CL&LINESIZE             CURRENT LINE
DSNAME    EQU  LINE+2,44
ASID      EQU  LINE+2+18,3
VOLSER    EQU  LINE+2+44+3,6
DEVTYPE   EQU  LINE+2+44+3+6+3,8
YYYYMMDD  EQU  LINE+2+44+3+6+2,8       YYYYMMDD
CATUNCAT  EQU  LINE+2+44+3+6+2+8+2,5   UNCAT
LINE_LNK  EQU  CATUNCAT+0,3            LNK
LINE_LPA  EQU  LINE_LNK+5,3            LPA
LINE_APF  EQU  LINE_LPA+5,3            APF
LINE_SMS_ATTR  EQU  LINE_APF+14,3       SMS Attributes           RS1199
LINE_REFD EQU  LINE_APF+5,8            DS1REFD
LINE_APFVOL EQU LINE_REFD+10,6         APF Volume or SMS
NEXTLINE DS    CL(L'LINE)              NEXT LINE
*---------------------------------------------------------------------*
*        DYNAMIC STORAGE AREA (RMODE=ANY)
*---------------------------------------------------------------------*
DYNAM    DSECT                         DYNAMIC STORAGE AREA
         DS    18F                     SAVE AREA FOR MAINLINE
PARMADDR DS    A                       ADDR OF CALLER'S PARM OR CBUF
UNPROTWK DS    A,F                     addr of unprotected work area
RCVYSAVE DS    18F                     SAVE AREA FOR RECOVERY ROUTINE
SWITCHES DS    XL8                     various switches and flags
        #SWITCH INIT_DONE              INITIALIZATION DONE
        #SWITCH AUTHORIZED             Running Authorized
        #SWITCH AUTH_ESR               Authorized by IGX00GSF or ISFSVC
        #SWITCH PGM_INVOKED            invoked as a program (PARM)
        #SWITCH CMD_INVOKED            invoked as a TSO command (CPPL)
        #SWITCH NON_TSO                address-space type
        #SWITCH TSO_ON_LINE            address-space type
        #SWITCH TSO_BATCH              address-space type
        #SWITCH ISPF_AVAILABLE         ISPF services are available
        #SWITCH BRIF_MODE              output using BRIF
        #SWITCH EDIF_MODE              output using EDIF
        #SWITCH HARDCOPY               BRIF/HARDCOPY switch
        #SWITCH PUTLINE                PUTLINE
        #SWITCH SHORT_PUTLINE          SHORT_PUTLINE
        #SWITCH PARMCAPS               PARM=CAPS
        #SWITCH SUB_TASK_REQUESTED     ATTACH requested
        #SWITCH SUB_TASK_ATTACHED      ATTACH successful
        #SWITCH MSTJCL_PARMLIB         Master JCL in PARMLIB
        #SWITCH HBB6601                OS/390 R1
        #SWITCH JBB6602                OS/390 R2
        #SWITCH HBB6603                OS/390 R3
        #SWITCH JBB6604                OS/390 R4
        #SWITCH HBB6605                OS/390 R5
        #SWITCH HBB6606                OS/390 R6
        #SWITCH JBB6607                OS/390 R7
        #SWITCH HBB6608                OS/390 R8
        #SWITCH JBB6609                OS/390 R9
        #SWITCH HBB7703                OS/390 R10                RS0800
        #SWITCH JBB7713                z/OS R1                   RS1000
        #SWITCH HBB7705                z/OS R2                   RS0701
        #SWITCH HBB7706                z/OS R3                   RS0102
        #SWITCH HBB7707                z/OS R4                   RS0602
        #SWITCH HBB7708                z/OS R4                   RS1103
        #SWITCH HDZ11C0                DFSMS/MVS 1.3.0
        #SWITCH HDZ11D0                DFSMS/MVS 1.4.0
        #SWITCH HDZ11E0                DFSMS/MVS 1.5.0
        #SWITCH HDZ11F0                DFSMS OS/390              RS1100
        #SWITCH HDZ11G0                DFSMS z/OS                RS0302
        #SWITCH SHASMIG                SYS1.SHASMIG available
        #SWITCH TCP_MODE               output using TCP/IP       RS0302
        #SWITCH ARCHLVL2               64bit mode                RS1002
*
WKCELL1  DS    D                       WORK AREA
WKCELL2  DS    D                       WORK AREA
WKCELL3  DS    D                       WORK AREA
WKCELL4  DS    D                       WORK AREA
TENWORDS DS    10F                     WORK AREA
PARSE_ANSWER DS A                      A(IKJPARMD)
OLDPICA  DS    A                       Old SPIE/ESPIE pointer
JSTCB    DS    A(TCB)                  ADDRESS OF THE JOB-STEP TCB
OWN_CDE  DS    A(CDENTRY)              my own CDE or LPDE
OWN_NAME DS    C'SHOWMVS '             my own name
PRISUBNM DS    C'JES2'                 name of primary sub-system
PRISUBTY DS    C'JES2'                 type of primary sub-system
PRISUBCT DS    A(SSCT)                 SSCT of primary sub-system
JES2ASCB DS    A(ASCB)                 addr of JES2's ASCB
ALPACDE1 DS    A(CDENTRY)              first CDE on ALPAQ or DLPAQ
*JCLPARM  DS    CL16                    caller's parm            RS0302
JCLPARM  DS    CL25                    caller's parm             RS0302
IDENT_IP DS    0CL16                                             RS0302
IP_NAME  DS    CL8                DEFAULT TO FIRST ONE AVAILABLE RS0302
MY_NAME  DS    CL8                MY ADDR SPACE NAME OR JOBNAME  RS0302
IP_NAME_VAR DS    0CL16              SOCKET NAME STRUCTURE       RS0302
IP_FAMILY   DS    AL2                FAMILY                      RS0302
IP_PORT_NO  DS    AL2                PORT                        RS0302
IP_ADDRESS  DS    AL4                ADDRESS                     RS0302
IP_RES      DS    XL8                RESERVED                    RS0302
*
END_PROC DS    2A                      RETURN/RETRY ADDRESS
RETRY    EQU   END_PROC+4,4,C'A'       RETRY ADDRESS
RDRTNR14 DS    A(R14)                  RETURN ADDRESS
NUMLINES DS    F                       NUMBER OF LINES
CURRECNO DS    F                       current record number (EDIF)
IEFEB4UV DS    V(IEFEB4UV)             UNITNAME CONVERSION RTNE
ISPQRY@  DS    V(ISPQRY)               ISPF DIALOG INTERFACE
ISPLINK  DS    V(ISPLINK)              ISPF DIALOG INTERFACE
IGCERROR DS    V(IGCERROR)             Undefined SVC rtne
IGDSSIVT DS    V(IGDSSIVT)             SMS IVT
IFAEDLIS DS    V(IFAEDLIS)             Product Enable/Disable
IGWASMS  DS    V(IGWASMS)              SMS-Callable service         +RS
IGWLSHR  DS    V(IGWLSHR)              SMS-Callable service         +RS
BPX_MOD  DS    V(BPX1GMN)              USS-Callable service      RS1299
ACF2CVT  DS    V(ACCVT)                ACF2 CVT
DSNALI   DS    V(DSNALI)               DB2-Interface                +RS
ECVT@    DS    V(ECVT)                 Addr of Extended CVT
CSVT@    DS    V(CSVT)                 Addr of CSVT
TSB@     DS    V(TSB)                  TSO TSB
ECT@     DS    V(ECT)                  TSO ECT
UPT@     DS    V(UPT)                  TSO UPT
LWA@     DS    V(LWA)                  TSO LWA
PSCB@    DS    V(PSCB)                 TSO PSCB
UNITNAME DS    CL8,XL4,XL4,XL4,XL8     IEFEB4UV
GETUREGS DS    A(R14,R15,R0,R1,R2)     save area
*
ZENVIR   DS    CL32'ISPF 3.2'          ISPF ENVIRONMENT
ZPDFREL  DS    C'PDF V3.2'             ISPF/PDF version
ZAPPLID  DS    C'1234'                 Current APPLID
ZSCREENW DS    F'80'                   current screen width (ISPF)
ISPFVARS EQU   ZENVIR,*-ZENVIR         for MVCK
*
NEWAPPL  DS    C'1234'                 Current APPLID
EP10     DS    CL10                    SVC TABLE
UCB_NAME DS    C'1234'                 4-character device number (ESA5)
STATUS   DS    C'OLD'                  DATA SET STATUS
OWNSMSSYS DS   H                       pos of own system in BCD array
SUBSYSNO DS    H                       number of sub-systems
DB2_TECB DS    F                       Dummy for Terminate ECB     +RS
DB2_SECB DS    F                       Dummy for Startup ECB       +RS
DB2_RIB  DS    F                       Release Information Block   +RS
DB2_REQ  DS    CL12                    Name of CAF service         +RS
IGX00NNN DS    H                       Extended SVC number
$SJBCSCB DS    H                       offset to CSCB addr in SJB
$SJBJCLAS DS   H                       offset to job class in SJB
$PITPATID DS   H,H                     offset/len of partition ID
$PITCLASS DS   H,H                     offset/len of classses
PHYSICAL_LPAD DS H                     addr of first CPU
OWN_LPAR DS    XL1                     LPAR # if running under PR/SM
AUTH_RC  DS    FL1                     R15 from SVC109
FAILCODE DS    FL1                     Failure code
KEY4     EQU   4
PITHALT$ DS    XL(L'PITSTAT)           PITHALTA+PITHALT1
BLDLDCB  DS    X                       LINKLIST/TASKLIB DCB
SWAREQL1 SWAREQ MF=L                   WORK AREA FOR SWAREQ
ATTACHL  ATTACHX SF=L                  WORK AREA FOR ATTACH      RS1002
SYNCHL   SYNCHX MF=L                   WORK AREA FOR SYNCH       RS1002
SNAPREGS DS    A(14,15,0,1,2,3,14,15)
TRTPRINT DS    XL256                   printable characters
TRTDOTS  DS    XL256                   printable characters
BLANKS   DS    CL(L'LINE)              A BUNCH OF BLANKS
SUB_ECB1 DS    F,A(TCB)                sub-task ECB
SMS_SSOB DS    A,F                     SSOB_WRK (SMS only)
LINE1PTR DS    A(LINES),F              addr/length of lines buffer
PROTKEY  DS    X                       KEY=4 if AUTH=ESR, else KEY=8
OLDPKF   DS    X                       copied from TCBPKF
CPUONLINE DS   A(LINE),F'100'          Number of cpu's on-line
CVIOLINE DS    A(LINE)                 IPL with CVIO=NO
CLPALINE DS    A(LINE)                 IPL with CLPA=NO
LNKTABLE DS    A(LINE,L'LINE,NEXTLINE) LNK-LIST
LPATABLE DS    A(LINE,L'LINE,NEXTLINE) LPA-LIST
APFTABLE DS    A(LINE,L'LINE,NEXTLINE) APF-LIST
LINKXTNT DS    A(LINE)                 link-list header line
TIOTLINES DS   A(LINE,LINE)            TIOT Display lines
*
BLDLWORK DS    0F,AL2(1,L'CSVDWORK)    prefix for BLDL
         IHAPDS DSECT=NO,PDSBLDL=YES   PDS Directory
CSVDWORK EQU   BLDLWORK,*-BLDLWORK     Work area for CSVDSN routine
*
STIDP_WORKAREA DS 0D                   STIPD output area
STIDP_VERSION DS X'D4'                 Version Code
STIDP_SERIAL DS 0X'123456'             Serial number
STIDP_LPARID DS X'01'                  LPAR ID
         DS    XL2                     last 2 bytes of serial number
STIDP_MODEL DS X'3090'                 Same as CVTMDL
         DS    X'0000'                 not used
*
ESTAEL   ESTAEX MF=L
PUTLINEL PUTLINE MF=L
WASTAX   STAX  STAX00,REPLACE=NO,MF=L
STCKDATE DS    C'YYYY-MM-DD'
STCKTIME DS    C'HH.MM.SS.HH'
ALESERV2 ALESERV MF=L
ALET1    DS    1F                      ALET
STCKCONVL STCKCONV MF=L
STCKVAL  DS    D
         IXCQUERY MF=(L,IXCQRYWK)                                  @RS
SIZEEXAA DS    F                       Size of answer area
         CSVAPF MF=(L,CSVAPF1)
         AIF   (D'CVTJ6604).OW35877Q
         CSVQUERY MF=(L,CSVQRYWK),PLISTVER=2
         AGO   .OW35877X
.OW35877Q ANOP                     << parm-list is too short in JBB6604
         CSVQUERY MF=(L,CSVQRYWK),PLISTVER=MAX
.OW35877X ANOP
         UCBSCAN MF=(L,UCBSCANL)
IOSCMXA_UCBPTR DS A(UCBOB)
IOSCMXA_UCBCXPTR DS A(UCBCMEXT)
PGPSA    DS    A(PGPS)                                           RS0500
WLM_QUACF_AREA DS 0F                                             JM0900
ANSAREA  DS    A                       address of IWMPQRY out putJM0900
ANSLEN   DS    F                       length of IWMPQRY out put RS0500
         IOSCMXA MF=(L,IOSCMXA_PARMLIST)
*      Data declarations for List information about all exits in system
EXAA@    DS    A                       Address of answer area
TEMPSIZE DS    F                       Temporary
MODLEN   EQU   40*EXAAM_LEN            Room for 40 routines' info's
EXLEN    EQU   20*EXAAE_LEN            Room for 20 exits' information
INITEXAA EQU   EXAAHDR_LEN+MODLEN+EXLEN Initial size of answer area
         CSVDYNEX MF=(L,CSVDYNEXL)
         IWMCQRY MF=(L,IWMCQRY)
         IWMPQRY MF=(L,IWMPQRY)
         IXCMG MF=(L,IXCMG)                                        +JWM
         IXLMG MF=(L,IXLMGWK)                                      +DL
QUERYLEN DS    F
*WLM_QUACF_AREA DS 0F
*ANSAREA  DS    A                       address of IWMPQRY out put
XCFLEVEL DS    F                       max CF operational level    +DL
         AIF   (NOT D'CVTPARMC).ESA4S  JBB6602
         IEFZPMAP DSECT=NO             Dynamic Parmlib
         AIF   (NOT D'CVTH6603).ESA4S  OS/390 R3?
         EZASMI TYPE=GLOBAL,STORAGE=CSECT                          $RS
         EZASMI TYPE=TASK,STORAGE=CSECT                            $RS
         CSVDYNL MF=(L,CSVDYNL)
         ATRQUERY MF=(L,ATRQUERYL)
         IEAMETR MF=(L,ETRAREA)                                    +JWM
         AIF   (NOT D'CVTJ6604).ESA4S  OS/390 R4?                  +RS
         CSVRTLS MF=(L,RTLS)           CSVRTLS                     +RS
.ESA4S   ANOP
*
MAXSNO   DS    F                       Assinged socket           RS0302
SOC_DESC DS    H                       Socket descriptor         RS0302
DSTYPE   DS    F                       1 PDSE, 2 HFS, 0 neither+RS0199
LRETCODE DS    F                       Return code
LRSNCODE DS    F                       Reason code
PDATA    DS    XL16
PDATA_DDN EQU PDATA+8,8,C'C'           DDNAME
PDATA_TTRN EQU PDATA+4,4,C'X'          TTRN
PID      DS    XL4
MODTOKEN DS    XL8
PDATA_DSN DS   CL44
         DS    0D
WORK512  DS    XL512                   512-BYTE WORK AREA
         ORG   WORK512
WORK256  DS    XL256,2D                265-BYTE WORK AREA
CAMLST1  CAMLST NAME,DSNAME,VOLSER,WORK256 LOCATE/OBTAIN
         IECSDSL1 1                    F1-DSCB
WORK44   DS    XL44                    PADDING FOR OBTAIN
         ORG   ,                       WORK512
*
DCB_IOB_DEB DS 0D
         DS    XL(END_OF_IOB-IHADCB)   DCB+IOB
         DS    XL(DEBBASND-DEBAVT)     DEB AVT+PREFIX+BASIC
         DS    XL(DEBDASDE-DEBDASD)    DEBDASD+CCW
CCW2     CCW   X'31',IOBSEEK+3,0,0     search CCW
CCW3     CCW   X'08',CCW2,0,1          TIC CCW
CCW4     CCW   X'0E',WORK256,0,256     read CCW
DYNAML   EQU   *-DYNAM                 LENGTH OF DYNAMIC STORAGE AREA
*---------------------------------------------------------------------*
LINES    DSECT
         DS    &NUMLINES.CL(L'LINE)    LINES FOR BRIF
         ORG   LINES+((*+4096-1-LINES)/4096)*4096
LINESL   EQU   *-LINES                 LENGTH OF LINES buffer
         PRINT NOGEN                   SAVE PAPER
PRINT    OPSYN ANOP                    SHUT'EM UP
EXTRN    OPSYN WXTRN                   ILRASMVT
         TITLE 'SHOWMVS &REL - Define MVS Control Blocks'
***********************************************************************
*                                                                     *
*                                                                     *
*        DEFINE MVS CONTROL-BLOCKS                                    *
*                                                                     *
*                                                                     *
***********************************************************************
         IHASDWA DSECT=YES,VRAMAP=NO   SDWA DSECT
         IHAPSA DSECT=YES              PREFIXED STORAGE AREA
         IHACSD DSECT=YES              Common System Data Area
         IHAIPA DSECT=YES              Initialization Parameter Area
         IHASCCB                       Service Call Control Block
         IARRCE                        RSM CTL & ENUM AREA
         IARRAX                        RSM addr spc block extension
         IHAGDA                        GLOBAL DATA AREA
IGVCAUB  IGVCAUB                       Common Area User Block    RS0502
IGVVAB   IGVVAB                        VSM Address Space Block   RS0502
         IHASCVT DSECT=YES,LIST=NO     SECONDARY CVT
         IHASVC UPDATE=YES             SVC TABLE ENTRY           RS1299
*-       IHAPCCAT DSECT=YES            PCCA TABLE
         IHAPCCA DSECT=YES             PHYSICAL CONFIG. COMM. AREA
APPNMTBL APPNMTBL                      APPENDAGE NAME TABLE
         IHALPDE                       LPA DIRECTORY ENTRY
*
         IEESMCA                       SMF Control Area
         IEEMBACT                      SMF Application Control Table
         IEEMBRDS                      SMF R? Data Sets
         IEEMBSST                      SMF Sub-system Table
*
RTCT     IHARTCT                       RTM CONTROL TABLE
SDDSQ    IHASDDSQ                      SDUMP DATA SET QUEUE
* In OS/390 R6 and R7, IHARTSD gives "continuation error" - see OW36979
* In z/OS R2, IHARTSD gives "continuation error" - see OW51976
RTSD     IHARTSD                       RTCT SDUMP Extension
SDRTX    IHASDRTX                      RTCT SDUMP Extension
DSCA     ADYDSCA                       DAE Com area
DFLM     ADYDFLM                       DAE Default Module (ADYDFLT)
SCE      IHASCE                        Slip data
SHDR     IHASHDR                       Slip data
SCVA     IHASCVA                       Slip data (SCVA)          RS0402
SLTB     IHASLTB                       Slip data (SLTB)          RS0402
*
ASMVT    ILRASMVT DSECT=YES            AUXILIARY STRGE MGR VECTOR TABLE
PART     ILRPART                       PAGING ACTIVITY REFERENCE TABLE
PAT      ILRPAT                        Page Allocation Table
*
         AMCBS                         ACCESS METHOD CB STRUCTURE
IGGCAXWA IGGCAXWA                      Catalog Work Area
*
         ISGGVT                        GRS Vector Table
         ISGGCC                        GRS Config table
         ISGRNLE                       GRS RNL-Elements         RSAUG99
         IEFJESCT                      JES VECTOR TABLE
         IEFJSCVT                      SUB-SYSTEM COMM. VECTOR TABLE
         IEFJSSVT                      SUB-SYSTEM VECTOR TABLE
IEFAB445 IEFZB445                      Device Allocation Defaults
DSABQDB  IEFZB4D5                      DSAB QUEUE DESCRIPTOR BLOCK
PPT      IEFZB610                      Program Properties Table
         IEFZB505 LOCEPAX=YES          EPA MAPPING FOR SWAREQ
         IEFZB4UV                      Parm mapping for IEFEB4UV
LCT      DSECT                         <--  TCTLCT
         IEFALLCT                      LINKAGE CONTROL TABLE
JCT      DSECT                         <--  JSCBJCT, LCTJCTAD
         DS    F,A,F,C'JCT '           PREFIX
JCTEQREG EQU   *+92,2,C'H'             REGION IN K (MAX VALUE IS 16383)
         IEFAJCTB                      JOB Control Table
JCTX     DSECT                         <--  JCTJCTX
         DS    F,A,F,C'JCTX'           PREFIX
         IEFJCTX                       JCT Extension
         AIF   (D'JCTXJMRD).JCTX3
JCTXSSD  EQU   JCTXIN+X'58',4,C'P'     step start date  (HBB4430)
JCTXJMRD EQU   JCTXIN+X'5C',4,C'P'     job start date  (HBB4430)
.JCTX3   ANOP
SCT      DSECT
         DS    F,A,F,C'SCT '           PREFIX
         IEFASCTB                      Step Control Block
SCTX     DSECT
         DS    F,A,F,C'SCTX'           PREFIX
         IEFSCTX DSECT=NO              Step Control Block Extension
*
         IHAASCB DSECT=YES             ADDRESS SPACE CONTROL BLOCK
         IHAASSB LIST=NO               ADDRESS SPACE SECONDARY BLOCK
         IHAASVT DSECT=YES             ADDRESS SPACE VECTOR TABLE
         IHAASXB DSECT=YES             Address Space Extension Block
         IHALDA                        Local Data Area
         IHAACEE                       Accessor Environment Element
         IRAOUCB DSECT=YES             SRM PARMS
         IHAOUXB DSECT=YES             SRM PARMS
         IEARCTD DSECT=YES             RCT Data Area
         IKJTCB DSECT=YES,LIST=NO      TASK CONTROL BLOCK
         IHASTCB                       Secondary TCB
         IEFTCT                        SMF TCT
         IEZJSCB                       JOB STEP CONTROL BLOCK
         IEFJSSIB                      Sub-System Identification Block
         IHARD                         REGION DESCRIPTOR
         IHASPQE                       sub-pool queue element
         IHASPQA                       sub-pool queue element anchors
         IHADQE                        descriptor queue element
         IKJRB  DSECT=YES,LIST=NO      REQUEST BLOCK
         IHACDE                        CONTENTS DIRECTORY ENTRY
         IHALLE                        LOAD-LIST ELEMENT
         IHAXTLST                      EXTENT LIST
         IHASCB DSECT=YES              STAE CONTROL BLOCK
         AIF   (D'CVTH7708).SCA        z/OS R5?                  RS1104
*        now a part of IHASTCB
         IHASCA                        SPIE/ESPIE Control Area
.SCA     ANOP                                                    RS1104
*
         IKJPSCB                       PROTECTED STEP CONTROL BLOCK
         IKJTSB LIST=NO,EXT=YES        Terminal Status Block
         IKJCPPL                       Command Processor Parm List
         IKJUPT                        User Profile Table
UPT_LENGTH EQU *-UPT
         IKJTSVT                       TSO VECTOR TABLE
         IKJEFLWA                      LOGON WORK AREA
         IKJTAXE                       TERMINAL ATTN EXIT ELEMENT
EXTAB_VECT IKJEXTAB                    EXIT/TABLE VECTOR
TPVT     IKJTPVT                       TSO PARMLIB vector table
CTLT     IKJCTLT                       TSO/E Control Table
PPVE     IKJEPPVE                      Platform Programs
FCVE     IKJEFCVE                      Platform Commands
XPRM     IKJXPRM                       INMXPARM Control Table
CNPRM    IKJCNPRM                      IKJCNPRM Control Table
HELP     IKJEFHCB                      HELP Control Table
         IKJEESCB                      SEND Parmlib Control Block
TPT      IKJTPT                        TSO/TEST Parameter Table
ALPL     IKJALPL                       ALLOC command defaults
*
         IEEBASEA DSECT                Master Sched Resident Data Area
         IEECUCM DSECT=YES             Unit Control Module
SNPL     IEEZB807                      SCHEDULER NIP PARAMETER LIST
MPFT     IEEZB809                      Message Processing Facility Tbl
GENX     IEEZB816                      GENERAL WTO USER EXIT TABLE
CPFT     IEEZB817                      Command Prefix Table
CLRATT   IEEVC102                      COLOR/HIGHLIGHTING ATTRIBUTE TBL
         IEFUCBOB LIST=NO,PREFIX=YES   UNIT CONTROL BLOCK
UCBLEN   EQU   *-UCBOB                                           JM
         ORG   UCB+X'1D0'
         IOSDUCBP                      UCB Prefix (HBB5510)
         IECDDCE                       DEVICE CLASS EXTENSION
         IECDIOCM                      IOCOM DSECT
IOVT     IOSDIOVT                      IOS Vector Table          ESA41
CDA      IOSDCDA                       Configuration Data Area
ULUT     IOSDULUT                      UCB Look-up Table         ESA41
UCBX     IECUCBCX                      Tape class ext            RS0302
*                                                                JM0799
INFO     DSECT                                                   JM0799
PREV_UCBCHAN DS XL(L'UCBCHAN)                                    JM0799
SAVE_UCBCHAN DS XL(L'UCBCHAN)                                    JM0799
PREV_UCBPIM DS XL(L'UCBPIM)                                      JM0799
PREV_UCBLPM DS XL(L'UCBLPM)                                      JM0799
PREV_UCBCHPS DS XL(L'UCBCHPS)                                    JM1099
PREV_PATH_VAL DS X                     Path validation flag      JM0100
SAVE_PATH_VAL DS X                     Path validation flag      JM0100
PATHDESC DS    CL32                    Path description          JM0100
PATHACM  DS    CL5                     Path acronym              JM0100
         AIF   (NOT D'CVTH6603).CHPIDBB                          JM0100
         IOSCHPD MF=(L,IOSCHPDL)                                 JM0100
.CHPIDBB ANOP                                                    JM0100
PATHAREA DS    0F                                                JM0799
         ORG   PATHAREA+(256*PATHTBLL)                           JM0100
         DS    0D                                                JM0100
CHPIDEND DS    X                       end of UCBSCAN switch     JM0100
INFOL    EQU   *-INFO                                            JM0799
*                                                                JM0799
PATHTBL  DSECT                                                   JM0799
PATHID   DS    H                       Chpid id                  JM0100
PATHCNT  DS    F                       Count of UCBs on this pathJM0100
PATHTBLL EQU   *-PATHTBL                                         JM0799
*                                                                JM0799
.CHPIDAA ANOP                                                    JM0799
         IOSDSHID                      System Host ID Mapping   OW13347
         AIF   (D'CPCID_FLAGS).CPCIDD     OW57714                RS0803
         ORG   SHID_CPCND+L'SHID_CPCND
*        CPCID is Central Processing Complex Identifier
CPCID_FLAGS DS X                       flags
CPCID_MAP   DS X                       CPC id
.CPCIDD  ANOP                                                    RS0803
*
         IKTTCAST DSECT=YES            TCAS (a key 6 area)
         IRARMCT DSECT=YES         RESOURCE MANAGER CONTROL TABLE
         IRASRMST DSECT=YES        SRM Status Sysevent Parameter List
         IWMSVDCR
         IWMSVPCD
         IWMSVPOL
         IWMYCON
         AIF   (NOT D'CVTH6603).RMCT51 OS/390 R3?
*        ATRFZQRY                      Resource Recovery Manager   +RS
         IHAETRI                       External Time Reference     +JWM
         IVTSTATA                      CSM-Statistics Data      +RS0200
         IVTDATSP                      CSM-Dataspace Data       +RS0200
         EZAZTSAB                      TCPIP                     RS0601
         EZAZTSEB                      TCPIP                     RS0601
         EZAZTSDB                      TCPIP                     RS0601
         AIF   (NOT D'CVTJ6604).RMCT51 OS/390 R4?
         CSVRTAA DSECT=YES             CSVRTAA answer-area         +RS
         CSFCCVT                       ICSF                      JM0300
         IWMWRQAA                      IWMRQRY answer            RS1202
         AIF   (NOT D'CVTH6606).RMCT51 OS/390 R6?                RS0800
* In case of assembly error see OW42971
         ANTRQSTL ILK=VERSION1                                   RS0800
         AIF   (NOT D'CVTJ6607).RMCT51 OS/390 R7?                RS0301
         IEEZB887                                                RS0301
         IEEZB888                                                RS0301
         AIF   (NOT D'CVTH6608).RMCT51 OS/390 R8?                RS0800
         CSRSIIDF DSECT=YES,SIV1V2V3=YES                         RS1000
         AIF   (NOT D'CVTH7703).RMCT51 OS/390 R10?               RS1002
         IXGCTA                                                  RS1002
         IXGLCB                                                  RS1002
         IXGLSAB                                                 RS1002
         IXGLSMF                                                 RS1002
         IGGCRT                                                  RS0803
CMCT     IRACMCT                       CMCT                      RS0803
CPMB     IRACPMB CPMB=NO,CPM2=YES,CMC2=YES                       RS0803
         AIF   (NOT D'CVTJ7713).RMCT51 z/OS R1?                  RS1002
QVS      IRAQVS                        QVS                       RS1002
         AIF   (NOT D'CVTH7705).RMCT51 z/OS R2?                  RS0803
         AIF   (NOT D'CVTH7706).RMCT51 z/OS R3?                  RS0302
ETE1     IHAETE1                       ETE1                      RS0302
DGNB     IGVDGNB                       DGNB (IGVDGNXT)           RS0902
DGNX     IGVDGNX                       DGNX (IGVDGNXT)           RS0902
         AIF   (NOT D'CVTH7707).RMCT51 z/OS R4?                  RS0103
DACC     CSFDACC                       ICSF DACC                 RS0103
         GFUMPCTL
PCTL_BFRLIMITS_TYPE_LENGTH EQU PCTL_BL_END-PCTL_BFRLIMITS_TYPE
PCTL_GLOBALSTATS_TYPE_LENGTH EQU PCTL_GS_END-PCTL_GLOBALSTATS_TYPE
PCTL_FSSTATS_TYPE_LENGTH EQU PCTL_FS_END-PCTL_FSSTATS_TYPE
.RMCT51  ANOP
RMPT     IRARMPT                       SRM PARAM TABLE
WMST     IRAWMST                       WORKLOAD MGR SPECIFICATIONS TBLE
WMSTIPM2 EQU   WMST+X'9C',4            MSO SERVICE COEFF. (XA & ESA V3)
WMSTIPM3 EQU   WMST+X'50',8            MSO SERVICE COEFFICIENT (ESA V4)
WMSTIPC3 EQU   WMST+X'94',4            CPU SERVICE COEFFICIENT (ESA V4)
WMSTIPI3 EQU   WMST+X'98',4            I/O SERVICE COEFFICIENT (ESA V4)
WMSTIPB3 EQU   WMST+X'A0',4            SRB SERVICE COEFFICIENT (ESA V4)
ICST     IRAICST                       SRM ICS TABLE
DMDT     IRADMDT                       SRM DOMAIN TABLE
*
         DCBD  DSORG=PO,DEVD=DA        IHADCB
         IEZIOB DSECT=NO               I/O BLOCK
END_OF_IOB DS  0D
JFCB     DSECT
         IEFJFCBN LIST=NO              JOB FILE CONTROL BLOCK
SIOT     DSECT
         IEFASIOT                      Step Input Output Table
TIOT     DSECT
         IEFTIOT1                      TASK INPUT-OUTPUT TABLE
         IHADSAB                       DATA SET ASSOCIATION BLOCK
         IEZDEB LIST=NO                DATA EXTENT BLOCK
*---------------------------------------------------------------------*
         IEFJSSOB ,                    SSOB header
         IEFSSSA                       SSOB extension for SMS
*
*        Work area for SMS inquiries (pointed to by SMS_SSOB)
*
SMS_WORK DSECT
SSOB_WRK DS    XL(SSOBHSIZ)            SSOB
SSSA_WRK DS    XL(SSSALN+SSSA1LN)      SSSA (HDR)
         DS    0D
SMS_SUB_FUNCTION_WORK_AREA EQU *
SSSA_BCD DS    XL(BCD_TOTAL_LENGTH)    PREFIX+DEFINITION
         ORG   SMS_SUB_FUNCTION_WORK_AREA
SSSA_VLD DS    XL(VLD_TOTAL_LENGTH)    PREFIX+DEFINITION
         ORG
SMS_SUB_FUNCTION_WORK_AREA_LENGTH EQU *-SMS_SUB_FUNCTION_WORK_AREA
SMS_WORK_LENGTH EQU *-SMS_WORK
*
         IGDBCD                        Base configuration definition
BCD_TOTAL_LENGTH EQU (BCDEND-IGDBCD)+(BCDEND2-BCDSYSDT)         HDZ11C0
         IGDVLD                        Volume record definition
VLD_TOTAL_LENGTH EQU (VLDEND-VLD)+(VLDEND2-VLDSYSDT)            HDZ11C0
         IGDSCD                        StorClass record definition  +RS
         IGDSGD                        StorGroup record definition  +JM
         IGDAGD                        AggrGroup record definition  +JM
         IGDMCD                        MgmtClass record definition  +RS
         IGDDCD                        DataClass record definition  +RS
         IGDLBD                        Optical lib definition       +RS
         IGDDRD                        Optical drive def         RS1002
         IGDSSIVT                      SMS vector table                 +RS0100
CSCB     DSECT
         IEECHAIN                      COMMAND SCHEDULING CONTROL BLOCK
         IHAECVT DSECT=YES             Extended CVT
         IAZJSAB DSECT=YES             JOB Scheduler Address Space
         IXCYQUAA                      XCF-Answer Area             @RS
         CSVAPFAA DSECT=YES,LIST=NO    dynamic APF
         IEFSSVI DSECT=YES             sub-sys version information
         BPXZOCVE   ,                  OMVS Vector Entry        RS1299
         BPXZOCVT   ,                  OMVS Vector Table        RS1299
         BPXZOPNT   ,                  OMVS Options             RS1299
         AIF   (NOT D'CVTH6606).NO6606 OS/390 R6?               RS0800
         BPXZOPTN   ,                  OMVS Options             RS1299
.NO6606  ANOP                                                   RS0800
         AIF   (NOT D'CVTJ6607).NO6607 OS/390 R7?               RS0501
         BPXYPGTH   ,                  USS Returning Info       RS0501
.NO6607  ANOP                                                   RS0501
         AIF   (NOT D'CVTJ6609).NOMNTE2                         RS0800
         BPXYMNTE MNTE2=YES            USS Returning Info       RS0800
         AGO  .MNTE2                                            RS0800
.NOMNTE2 ANOP                                                   RS0800
         BPXYMNTE   ,                  USS Returning Info       RS1299
.MNTE2 ANOP                                                     RS0800
         BPXYPGPS   ,                  USS Returning Info       RS1299
         BPXYCONS   ,                  USS Returning Info       RS1299
         BPXYGIDN   ,                  USS Returning Info       RS1299
         BPXYIPCQ   ,                                           RS0701
         BPXYIPCP   ,                                           RS0701
         BPXYMODE   ,                                           RS0701
         ASASYMBP DSECT=YES,SYMBP=NO,SYMBT=YES
         IXCYAMDA             XCF Accounting and Measurement Data Area
         IXLYAMDA                      Acct + Measurement Data Area +DL
         IXLYNDE                       Node descriptor              +DL
         IFAEDIDF DSECT=YES            Product Enable/Disable
         AIF   (NOT D'CVTH6603).END    OS/390 R3?
         CSVDLCB TITLE=NO              dynamic link-list
         CSVDLAA                       dynamic link-list
.NODLCB  ANOP
.END     YREGS                         REGISTER EQUATES
*
ERLY     DSNDERLY                      DB2
RIB      DSNDRIB                       DB2/MQ                      +RS
*
ERBCOPY1 OPSYN ANOP                    Bypass Copyright Notice
ERBCPUDT ERBCPUDT                      CPU DATA TABLE (RMF)
ERBSTGST ERBSTGST                      GLOBAL SUPERVISOR TABLE (RMF)
         DIAG204                       Data from DIAGNOSE X'204'
*
RCVT     ICHPRCVT                      RACF CVT
DSDT     ICHPDSDT                      RACF Data Set table
RCATABLE ICHPAUTB                      AUTHORIZED RACF SVC CALLERS
CGRP     ICHPCGRP                      CONNECT GROUP NAME TABLE
         AIF   (NOT D'CVTH6608).NOCNST OS/390 R8?                RS0803
CNST     IRRPCNST     ICHPCNST         Class Name and Syntax Tab RS0302
.NOCNST  ANOP                                                    RS0803
*
LLCB     IHALLCB                       LLA
         IHALLCB3                      LLCB extension for ESA
LLDR     IHALLDR                       LLA
LLDS     IHALLDS                       LLA
LLLS     IHALLLS                       LLA
*
SVT      IHASVT                        SUPERVISOR VECTOR TABLE
XMD      IHAXMD                        PC-AUTH
LXAT     IHALXAT                       Linkage Index Allocation Table
AXAT     IHAAXAT                       Auth Index Allocation Tab RS0700
XMSE     IHAXMSE                       Cross Memory Service EntryRS0700
SETC     IHASETC                       Set Connection            RS0700
         AIF   (NOT D'CVTH6606).NOETE  OS/390 R6?                RS0803
ETE      IHAETE                        ETE                       RS0601
ETEX     IHAETEX                       ETEX                      RS0601
.NOETE   ANOP                                                    RS0803
LATENT   LATENT                        LATENT                    RS0601
NTTH     IHANTTE                       Name/Token                  $RS
PPD      IGVPPD                        Cellpools                   $RS
LLT      IHALLT DSECT=YES              LNKLST/LPALST tables
RPP      IHARPP                        Recovery PIE PICA
PICA     IHAPICA                       Program Interrupt Control Area
TQE      IHATQE                        TIMER QUEUE ELEMENT
DCQ      IHADCQ                        Device class table
MQCT     ARCQCT                        HSM Control Table
MWE      ARCMWE                        HSM MWE                   RS0400
ATCVT    ISTATCVT                      VTAM
ACCVT    ACCVT DSECT=YES,PREFIX=YES    ACF2 CVT
IPST     IPST                          Ipl Statistic             RS0601
VSMD     IGVVSMD                                                 RS0303
*
IP_BUFFER   DSECT                                                  &RS
IP_NUM_IMAGES  DS F                                                &RS
IP_STATUS   DS XL2                                                 &RS
IP_VERSION  DS XL2                                                 &RS
IP_TCPIPNAME DS CL8                                                &RS
IP_BUF_ENTRY EQU   *-IP_STATUS                                     &RS
*        STRING (GENERATE,AR_MODE)     GENERATE LITERALS & SUB-RTNE
         STRING (GENERATE,AR_MODE),PRINT=GEN
***********************************************************************
*                                                                     *
*        Module Prologue, for the SDSF SVC.                           *
*                                                                     *
***********************************************************************
         CNOP  0,4
ISF$SHOW B     12(,R15)                   SDSF SVC AMODE31 prefix
         DC    A(SHOWMVS+VL)              SDSF SVC AMODE31 prefix
         DC    A(SVC109+2+VL)             SDSF SVC AMODE31 prefix
         L     R15,4(,R15)
         BR    R15
VL       EQU   X'80000000'
FF       EQU   X'FF'
         END   ISF$SHOW
         TITLE 'JUL2DAYS - Julian-to-days conversion routine'
***********************************************************************
*                                                                     *
*        Convert a packed julian date obtained from the TIME macro    *
*        to an integer that represents the number of days since       *
*        1900-12-31.                                                  *
*                                                                     *
*        Input: R1=YYYYDDDF    julian date from TIME macro            *
*                                                                     *
*                 The first byte of R1 is 00 for years 1900-1999      *
*                 and 01 for years 2000-2099.                         *
*                                                                     *
*        Output:  R15=day of the week (1=monday, 7=sunday)            *
*                                                                     *
*                 R0=number of days since 1900-12-31                  *
*                                                                     *
*                 R1=pointer to a 9-byte character string that        *
*                            represents the day of the week.          *
*                                                                     *
***********************************************************************
JUL2DAYS CSECT
JUL2DAYS RMODE ANY
         SAVE  (14,1)
         MVO   32(8,R13),24(2,R13)     00000YYY?
         OI    32+7(R13),X'0F'         00000YYYF
         CVB   R14,32(,R13)            R14=YEAR
         LA    R0,365                  number of days in a year
         LR    R1,R14                  R1=years since 1900
         MR    R0,R0                   years*365
         BCTR  R14,0                   R14=YEAR-1
         SRL   R14,2                   number of leap years since 1901
         AR    R14,R1                  NUMBER OF DAYS IN PREVIOUS YEARS
         XC    20(6,R13),20(R13)       zero YYYY in 00000000YYYYDDDF
         CVB   R0,20(,R13)             NUMBER OF DAYS THIS YEAR
         AR    R0,R14                  number of days since 1900-12-31
*
*        DETERMINE DAY OF THE WEEK
*
         SLR   R14,R14                 PREPARE DIVISION
         LR    R15,R0                  DAYS SINCE 1900-12-31
         BCTR  R15,0                   DAYS-1
         LA    R1,7                    NUMBER OF DAYS IN WEEK
         DR    R14,R1                  DIVIDE BY NUM OF DAYS IN WEEK
         LA    R15,1(,R14)             Day of the week (1=monday)
         BALR  R1,0                    local base
         USING *,R1
         MH    R14,JUL2D_H9            MULT BY LENGTH OF A TABLE ENTRY
         LA    R1,JUL2D_TD(R14)        POINT TO DAY-OF-THE-WEEK
         RETURN (14)                   goback
*
JUL2D_H9 DC    H'9'                    length of a table entry
JUL2D_TD DC    C'Monday   Tuesday  WednesdayThursday Friday   Saturday X
               Sunday    '
***********************************************************************
*                                                                     *
* MODULE NAME = SCANMODL                                              *
*                                                                     *
* DESCRIPTIVE NAME = RETRIEVE OFFSET & LENGTH OF A JES2 FIELD         *
*                                                                     *
* FUNCTION = THIS MODULE LOADS A MODEL FROM SYS1.MIGLIB AND RETURNS   *
*            THE OFFSET & LENGTH OF A FIELD.  IT IS USED TO WRITE     *
*            PROGRAMS THAT ACCESS JES2 CONTROL BLOCKS WITHOUT USING   *
*            HASPSRC AND CONSEQUENTLY, ARE RELEASE-INDEPENDENT.       *
*                                                                     *
* STATUS = R100                                                       *
*                                                                     *
* AUTHOR = GILBERT SAINT-FLOUR <GSF@POBOX.COM>                        *
*                                                                     *
* INVOCATION = VIA CALL OR LINK                                       *
*                                                                     *
*          LINK EP=SCANMODL,PARAM=(=C'HASMSDB ',=C'SDBRECCT')         *
*          LH   R2,0(,R1)                 OFFSET                      *
*          LH   R3,2(,R1)                 LENGTH                      *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = MVS/ESA V4.1                                      *
*                                                                     *
*    AUTHORIZATION = NONE                                             *
*                                                                     *
* MODULE TYPE = PROCEDURE, (SUB-ROUTINE)                              *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 4K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   *
*                 PROBLEM STATE, TCB KEY                              *
*                                                                     *
* OPERATION = See below                                               *
*                                                                     *
*        If your primary JES2 is not in sync with the HASMxxxx        *
*        modules in SYS1.MIGLIB or SYS1.SHASMIG, this routine         *
*        won't work.  To fix this, you can do the following:          *
*                                                                     *
*        1. Locate the following instruction:                         *
*             LOAD EPLOC=(R8),DCB=(R1),ERRET=RC12                     *
*           change it to:                                             *
*             LOAD EPLOC=(R8),DCB=0,ERRET=RC12                        *
*           then assemble and link SHOWMVS.                           *
*                                                                     *
*        2. Go to the MVS system where JES2 was installed (it should  *
*           have been installed under SMP/E).  Get the HASMHCCT,      *
*           HASMSJB and HASMPIT modules from SYS1.MIGLIB (or          *
*           SYS1.SHASMIG) on that system; they should be in sync with *
*           your primary JES2 (you can check that by BROWSEing them). *
*           Copy these modules to a STEPLIB or ISPLLIB library.       *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*   @100 INITIAL VERSION                                              *
*                                                                     *
***********************************************************************
SCANMODL CSECT
SCANMODL RMODE ANY
         BAKR  R14,0
         LR    R11,R15           No base register needed but     RS0302
         USING SCANMODL,R11      require LOAD from z/OS R4       RS0302
         LM    R8,R9,0(R1)             R8=HASMSDB,R9=SDBRECCT
         L     R1,16(,0)               CVTPTR
         L     R1,8(,R1)               CVTLINK
         LOAD  EPLOC=(R8),DCB=(R1),ERRET=RC12
         LR    R4,R0                   IM$SDB
         USING HEADER,R4
         SLR   R1,R1
         IC    R1,HDROFFSET            OFFSET TO 1ST FIELD DESC
         LA    R5,HEADER(R1)           ADDR OF 1ST FIELD DESC
         USING FLDDESC,R5
*LOOP
LOOP5    CLC   FLDNAME,0(R9)           REQUESTED FIELD?
         JE    LOOP5X                  YES, EXIT
         LA    R5,FLD_NEXT             NEXT FIELD DESCRIPTOR
         CLI   FLDDESC,0               END OF MODEL?
         JNE   LOOP5                   NO, PROCESS NEXT FIELD    RS9302
*ENDLOOP
         LA    R15,8                   RC=8  (FIELD NOT FOUND)
         PR
*
*        RETURN OFFSET AND LENGTH IN SAVEAREA+8
*
LOOP5X   LA    R1,8(,R13)              4-BYTE WORK AREA CALLER'S AMODE
         MVC   0(4,R1),FLDOFFSET       MOVE OFFSET & LENGTH
         SLR   R15,R15                 RC=0
         PR
*
RC12     LA    R15,12                  RC=12 (LOAD FAILED)
         PR
*@@      BLSQCBM                   CONTROL BLOCK MODEL USED BY BLSQFORM
HEADER   DSECT
HDRACRO  DS    CL8                     EBCDIC CB ACRONYM
HDRUTHDR DS    CL8'$HCCT'              OUTPUT HEADER
HDRMLVL  DS    CL8'HJE4430'            MAINTENANCE LEVEL
HDRCBLEN DS    FL2                     LENGTH OF CONTROL BLOCK
HDRAOFF  DS    FL2                     OFFSET TO ACRONYM
HDRALEN  DS    FL1                     LENGTH OF ACRONYM
HDRLLEN  DS    FL1                     LABEL LENGTH
HDRSCOL  DS    FL1                     START COLUMN OR LEFT MARGIN
HDRNCOL  DS    FL1                     NUMBER OF COLS BETWEEN LABELS
HDRFLAGS DS    XL1                     NUMBER OF COLS BETWEEN LABELS
HDROFFSET DS   FL1                     OFFSET TO 1ST FIELD DESC
HDRMODLVL DS   FL1                     MODEL LEVEL
          DS   X                       RESERVED
*
FLDDESC  DSECT
FLDNAME  DS    CL8                0    FIELD NAME
FLDFLAGS DS    X,X                8    FLAGS
FLDVIEW  DS    XL2               10    VIEW
FLDOFFSET DS   FL2               12    OFFSET
FLDLENGTH DS   FL2               14    LENGTH
FLD_NEXT EQU   *                 16
         YREGS
***********************************************************************
***
**       LE services for SHOWMVS
***
***********************************************************************
         SPACE 2                                                 DA0701
         CEECAA ,   Language Environment
         AIF   (NOT D'CEECAA).LESERVX   .Did user specify CEE.SCEEMAC?
*                                                                DA0701
** LE entry housekeeping                                         DA0701
*                                                                DA0701
LESERV   CEEENTRY PPA=LESERVM,AUTO=LESERVDS,MAIN=YES,                  X
               EXECOPS=YES,             Runtime options present        X
               PARMREG=1                Place parameter here     RS1001
*                                                                DA0701
** Return the LE level                                           DA0701
*                                                                DA0701
LESERVL  DS    0H                                                DA0701
         L     R1,0(R1)                                          RS1001
         L     R2,2(R1)                 CEE_Version_ID goes here RS1001
         LA    R3,4(R2)                 Plat_ID goes here        RS1001
         LOAD  EP=CEEGPID                                        DA0701
         LR    R15,R0                                            DA0701
         CALL  (15),                    Call CEEGPID                   X
               ((2),                    ..CEE_Version_ID               X
               (3),                     ..Plat_ID                      X
               LESERVF),                ..LE Feedback                  X
               VL,MF=(E,LESERVP)                                 DA0701
         DELETE EP=CEEGPID                                       DA0701
         J     LESERVX                                           DA0701
*                                                                DA0701
** Return to caller                                              DA0701
*                                                                DA0701
LESERVX  DS    0H                                                DA0701
         CEETERM  RC=0,MODIFIER=0       LE exit housekeeping     DA0701
         LTORG ,                                                 DA0701
*                                                                DA0701
** LE areas                                                      DA0701
*                                                                DA0701
LESERVM  CEEPPA ,              Constants describing the code block
*-Dynamic Save area for LE/370                                   DA0701
         CEEDSA ,                 Mapping of the dynamic save area
*UMMY1   DS    F
*UMMY2   DS    F
LESERVP  DS    4F                 Parameter list                 DA0701
LESERVF  DS    XL12               Feedback area                  DA0701
LESERVDS EQU   *-CEEDSA                                          DA0701
         EJECT ,                                                 DA0701
.LESERVX ANOP  ,                                                 DA0701
         END
