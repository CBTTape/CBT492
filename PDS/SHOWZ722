*PROCESS BATCH,USING(NOMAP,WARN(8)),FLAG(NOPUSH,NOEXLITW,NOALIGN)
***********************************************************************
*                                                                     *
*              SSSS  H   H  OOOOO  W   W ZZZZZ   OOOOO  SSSS          *
*            S      H   H  O   O  W   W    ZZ   O   O  S              *
*            SSS   HHHHH  O   O  W W W    Z    O   O   SSS            *
*              S  H   H  O   O  WW WW   ZZ    O   O      S            *
*         SSSS   H   H  OOOOO  W   W   ZZZZZ OOOOO  SSSS              *
*                                                                     *
*     This program displays information obtained from various         *
*     control blocks of the MVS system on which it is run.            *
*     The information can be displayed under ISPF using EDIF or       *
*     BRIF, written to the TSO terminal using PUTLINE or to           *
*     a data set using QSAM.                                          *
*                                                                     *
*     SHOWzOS displays two different types of data:                   *
*                                                                     *
*       1. Data related to the MVS operating system:                  *
*                                                                     *
*          MVS LEVEL, DFP LEVEL, OSLVL FLAGS, JES2 LEVEL              *
*          IPL DATE, TIME, VOLSER, NUC-ID, CLPA, CVTUSER              *
*          Date and time of last CLPA                           (auth)*
*          Time Zone, Primary sub-system name and type                *
*          Software Level: TSO/E, ISPF, DSS, HSM, RACF, VTAM, SORT    *
*                          DSF, DB2, CICS, MQ Series, TCP/IP, LE,     *
*                          IMS (v9 and higher)                        *
*            Run-time Environments (CBL,PLI,FORTRAN,C,LE,REXX,SAS/C   *
*            RTLS)                                                    *
*            SORT                                                     *
*            LE runtime options (CEEDOPT, CEECOPT, CELQDOPT)          *
*          UNIX System Services                                       *
*            Settings                                                 *
*            HFS Statistics                                           *
*            Files                                                    *
*            PID                                                      *
*            IPC                                                      *
*          ISV software base CSRCTABL                                 *
*          ICSF configuration (Cyrpto)                                *
*          SMF Information: SID, JWT, data sets, exits, types,        *
*                           logstream                                 *
*          SMS Configuration:  SCDS, system names, last update        *
*                              dataclas, mgmtclas and so on           *
*          HSM information                                            *
*          SDM information                                            *
*          GRS Configuration                                          *
*          Hardware configuration                                     *
*            Central Processing Complex Node Description (CPC ND)     *
*            On-line CPUs and storage                                 *
*            Performance (SU/sec, estimated MIPS)                     *
*            Service Processor data                                   *
*            CSRSI support                                            *
*            Other CPU related attributes                             *
*            I/O configuration Definition (IODF)                      *
*            LPAR configuration                                       *
*          VM host information                                  (auth)*
*          VIRTUAL STORAGE MAP (CSA, SQA, LPA, etc)                   *
*          Subpool attributes                                         *
*          Global Cellpools                                           *
*          Subpool Usage                                              *
*          Common Storage Usage                                       *
*          Common/Shared Memory objects                         (auth)*
*          Dataspaces                                           (auth)*
*          64-bit memory object and MEMLIMIT                          *
*          CSM Communication Storage Manager                          *
*          XCF Configuration                                    (auth)*
*            Path data                                          (auth)*
*            Couple Datasets                                    (auth)*
*          Coupling facility                                    (auth)*
*          External timer                                       (auth)*
*          Resource Manager                                           *
*          WLM data (MODE, etc)                                       *
*          SMF data for each ASID (enclaves, zAAP, zIIP)        (auth)*
*          System Logger (IXGLOGR)                              (auth)*
*          Resource Recovery Manager (RRS)                            *
*          Automatic Restart Manager (ARM)                            *
*          TCP/IP statistics, connections, listener             (auth)*
*          SystemRexx                                           (auth)*
*          OPEN catalogs                                              *
*          PAGE data sets in use                                      *
*          Dump data sets status and dump options                     *
*            Dump data sets date, time and title                (auth)*
*            Automatically-allocated dump data sets             (auth)*
*          DAE Parameters                                       (auth)*
*          SLIP data                                            (auth)*
*          GTF status and options                                     *
*          DIAG settings                                              *
*          Initialization Parameters (IPA)                            *
*          IPL-Statistic                                              *
*          Health Checker                                       (auth)*
*          Master JCL (IEEMSJCL)                                      *
*          Sub-system vector table with functions processed           *
*          Primary Sub-system JCL                               (auth)*
*          TCAS parameters                                      (auth)*
*          TSO PARMLIB data (IKJTSOxx)                                *
*          TSO Exits and Tables                                       *
*          Number of Notices Created by ACCOUNT/SYNC                  *
*          RACF options, data sets and tables                         *
*          UNICODE data                                               *
*          Address space usage:                                       *
*            Batch Jobs                                               *
*            TSO users                                                *
*            Started tasks                                            *
*            USS users                                                *
*            CICS regions                                             *
*              STEPLIB/DFHRPL (&VERBOSE_CICS switch)            (auth)*
*            TCP/IP users                                             *
*          JES2 Initiators and corresponding jobs                     *
*          JES2 Dynamic proclib                                 (auth)*
*          JES Monitor and Job class information                (auth)*
*          Link-list data sets, with creation date                    *
*          LPA-list data sets, with creation date                     *
*          List of authorized libraries                               *
*          Dynamic Exit Facility                                (auth)*
*          Static system symbols                                      *
*          LLA parameters and managed libraries                 (auth)*
*          ACTIVE LPA QUEUE                                           *
*          SVC Table with name of the corresponding module            *
*          T1, T2, T3 and T6 ESR tables                               *
*          Linkage Index (LX) Table                             (auth)*
*          Auth Index (LX) Table                                (auth)*
*          Cross Memory Connection (XMS)                        (auth)*
*          Memory Delete Queue (MDQ)                            (auth)*
*          PC usage (ETE)                                       (auth)*
*          ENF Listener (ENF)                                   (auth)*
*          Timer Queue Elements (only DIE) (TQE)                (auth)*
*          Program Properties Table (PPT)                       (auth)*
*          I/O Appendage Table                                        *
*          Resource Manager List (IEAVTRML)                           *
*          Products Information                                       *
*          Device Classes and corresponding unit names                *
*          On-line devices, with unit-name, VOLSER, owning job,       *
*                use attribute, storage group                         *
*          Special devices on alternate subchannel set          (auth)*
*          Channel Measurement (ECMB)                           (auth)*
*          Config Data Record (CDR)                             (auth)*
*          PAV info (PAV)                                       (auth)*
*          Channel Path information                                   *
*          Channel Path Measurement Facility                          *
*          System consoles, with status & Routcde list                *
*              EMCS-Consoles                                    (auth)*
*              CMDS                                             (auth)*
*              Consol Query                                     (auth)*
*          Master Trace Table (MTT)  see &MTTDATA               (auth)*
*          Message Processing Facility (MPF)                          *
*          Command Prefix Table (CPFT)                                *
*          Name/Token information                                     *
*          Device Allocation Defaults (ALLOCxx)                       *
*          Addresses of selected global control blocks                *
*                                                                     *
*       2. Data related to the current address space                  *
*                                                                     *
*          JCL information for current JOB/STEP                       *
*          RACF profile (from ACEE)                                   *
*          TSO profile (from PSCB & UPT)                              *
*          ISPF Tso Command table (ISPTCM)                            *
*          REXX environments, host cmd tables and func pkg directories*
*          Allocated Data sets (from TIOT, SWA, TCT)                  *
*          TCB tree and PRB chain                                     *
*          Attention Routines                                         *
*          Enhanced view of the JPAQ and Load-lists                   *
*          Local Cellpools                                            *
*          Recovery exits and timers                                  *
*          Local Name/Token                                           *
*          Addresses of selected local control blocks                 *
*                                                                     *
*       SHOWzOS can be invoked as a program, as a TSO command, or     *
*       as an edit macro and can run authorized or non-authorized.    *
*       Some of the displays are only produced when SHOWzOS runs      *
*       authorized.                                                   *
*       SHOWzOS should run in hard-copy mode under CICS. SHOWzOS      *
*       can't be run native under CICS you need to use a simple       *
*       stub which is available from Roland@schiradin.de              *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*     Compatibility                                                   *
*                                                                     *
*       SHOWzOS supports z/OS R3 and above with z/Architecture.       *
*       ShowMVS supports OS/390 R1 thru z/OS R4 running on G2.        *
*       (R&I instructions present).                                   *
*       For older system environments use Show630.                    *
*                                                                     *
*       At the object level, SHOWzOS is fully downward-compatible     *
*       and partially up-ward compatible.  This means the following:  *
*       If SHOWzOS has been assembled on an z/OS system at level n,   *
*       it will be fully compatible with any older OS/390 system      *
*       (except the USS Display cause bad info).                      *
*       The same object code, however, will generally execute on      *
*       newer systems, but with reduced functionality.                *
*                                                                     *
*       For example, SHOWzOS assembled on an z/OS R4 system and       *
*       running on an z/OS R3 system will produce the same output     *
*       as if it had been assembled on a R3 system.  If the same      *
*       object executes on an z/OS R5 system, however, it will not    *
*       produce the same output as if the same SHOWzOS source had     *
*       been assembled on the R5 system on which it is run.           *
*                                                                     *
*       If you intend to run SHOWzOS on different z/OS levels,        *
*       make sure you assemble it on the most recent one.             *
*                                                                     *
*       SHOWzOS requires the following levels of the STRING macro:    *
*                                                                     *
*       o  R513 for OS/390 and z/OS with a small change.              *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*     Output Modes                                                    *
*                                                                     *
*       SHOWzOS provides six output modes.                            *
*                                                                     *
*       1. BROWSE (using BRIF)                                        *
*                                                                     *
*       This is the default mode when running in ISPF.                *
*                                                                     *
*       2. EDIT (using EDIF)                                          *
*                                                                     *
*       This mode is used when invoked in TSO on-line with ISPF via   *
*       PGM(SHOWMVS) PARM(EDIT) or CMD(SHOWMVS EDIT).                 *
*       Note that EDIT mode is actually VIEW, i.e there is no SAVE    *
*       capability (CREATE and REPLACE can be used to save the data,  *
*       EDIT macros can also be used).                                *
*                                                                     *
*       3. SHORT_PUTLINE
*                                                                     *
*       This is the default mode when running in TSO/E without ISPF.  *
*       In this mode, SHOWzOS clears the screen and produces the      *
*       first two displays (System Level and IPL)                     *
*                                                                     *
*       4. PUTLINE (using PUTLINE)                                    *
*                                                                     *
*       This mode is used under TSO when SHOWzOS is invoked as a      *
*       program with PARM(PUTLINE) or as a command with the PUTLINE   *
*       parameter.  This mode is useful if you want to use the        *
*       OUTTRAP function to process the output of SHOWzOS.            *
*                                                                     *
*       5. HARD-COPY (using QSAM)                                     *
*                                                                     *
*       In Hard-copy mode, SHOWzOS writes the output to a QSAM DCB    *
*       with RECFM=FBA,LRECL=125 instead of displaying it on the      *
*       terminal.  Hard-copy mode is automatically activated in the   *
*       following circumstances:                                      *
*                                                                     *
*         1. SHOWzOS runs outside of the TSO/E environment.           *
*            If no //SHOWMVS DD is present in the JCL, SHOWzOS        *
*            allocates one with SYSOUT=*.                             *
*                                                                     *
*         2. SHOWzOS runs in an on-line TSO/ISPF environment,         *
*            and a //SHOWMVS DD is currently allocated to the         *
*            TSO session.                                             *
*                                                                     *
*       SHOWzOS output is in lower case. If you want to print it      *
*       in upper case, you must invoke SHOWzOS with the CAPS          *
*       parameter.                                                    *
*                                                                     *
*       6. TCPIP mode                                                 *
*                                                                     *
*       At first you may confused with the terms Client/Server.       *
*       SHOWzOS running on your HOST is a CLIENT and NOT a Server     *
*       using the TCPIP-terms. This mode can be used under ANY        *
*       environment except CICS/IMS because of the socket-stubs.      *
*       This mode is useful if you want to present the output         *
*       on ANY other platform which support TCPIP. We provide a       *
*       simple C-source for OS/390 and a REXX-Server (SHOWRXSV)       *
*       The C-Source will also work under NT but it's not a part      *
*       of this distribution.                                         *
*       We ara highly interesting for a better server-code            *
*       as SHOWRXSV provide. Maybe also JAVA!!                        *
*       In case of problems to establish a TCPIP-connection, we       *
*       report that situation and switch to the default mode          *
*       (e.g. BRIF if TSO)                                            *
*                                                                     *
*       Specify PARM(TCP=10.1.1.1:8000) or parameter TCP=10.1.1.1:8000*
*       if you want to route the output to a server running on the    *
*       the given IP-Address and port                                 *
*                                                                     *
*       6. SMF                                                        *
*                                                                     *
*       SHOWzOS can write the output to SMF user records. Just        *
*       specify PARM(SMF=NNN) and SHOWzOS will write all the output   *
*       to SMF type NNN. NNN should be a number between 128 and 255.  *
*       SHOWzOS use the BPX1SMF callable service and this one works   *
*       without authorization and also in PSW-Key 0/4/8.              *
*       You need permission in CL(FACILITY) BPX.SMF. See also         *
*       member SHOWSAS for some SAS coding to display the output.     *
*       The record layout:                                            *
*       RDW, Flagbyte, Time, Date, SMFID                              *
*       and                                                           *
*       Length of data, line number and line                          *
*                                                                     *
*    Dynamic Displays                                                 *
*                                                                     *
*       When MODE=BRIF is used, some of the displays produced by      *
*       SHOWzOS are dynamic, i.e. they are refreshed each time the    *
*       user hits the ENTER key or enters any of the scroll commands. *
*       The dynamic displays are:                                     *
*                                                                     *
*       o  GTF Status                                                 *
*       o  JES2 Initiators                                            *
*       o  On-line devices                                            *
*       o  CPU Time Used                                              *
*       o  Virtual Storage Usage                                      *
*       o  Storage effects                                            *
*       o  CPU busy, UIC, 4H MSU, AFQ                           RS0507*
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    Assembly/link-edit information:                                  *
*                                                                     *
*         Environment:          z/OS R3 and higher                    *
*         Processor:            HLASM z/Architecture                  *
*         Non-IBM macro used:   STRING64                              *
*         AMODE:                31                                    *
*         RMODE:                ANY                                   *
*         LKED Attributes:      RENT                                  *
*         Size of load-module:  aprox 280K                            *
*         Authorization:        None required (see below)             *
*         Memory requirement:   A lot but never seen a problem        *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    AUTHORIZED FUNCTIONS                                             *
*                                                                     *
*      The following displays are only produced if SHOWzOS is         *
*      authorized:                                                    *
*      o  Last CLPA                                                   *
*      o  VM Host                                                     *
*      o  WLM                                                         *
*      o  SMF info for each ASID                                      *
*      o  DUMP Title                                                  *
*      o  Automatic Dump Data sets                                    *
*      o  DAE                                                         *
*      o  Primary Sub-system                                          *
*      o  TCAS                                                        *
*      o  LLA                                                         *
*      o  LXinfo                                                      *
*      o  AXinfo                                                      *
*      o  XMS                                                         *
*      o  PPT                                                         *
*      o  XCF                                                         *
*      o  Dynamic Exits                                               *
*      o  EMCS-Consoles                                               *
*      o  CMDS display                                                *
*      o  MDQ                                                         *
*      o  PC usage                                                    *
*      o  LOGGER                                                      *
*      o  COUPLE                                                      *
*      o  REQLPDAT                                                    *
*      o  TCP/IP Networking Managment API (EZBNMIFR)                  *
*      o  SystemRexx                                                  *
*      o  ENF Listener                                                *
*      o  Timer Queue Elements                                        *
*      o  Master Trace Table                                          *
*      o  CICS STEPLIB/DFHRPL concatination                           *
*      o  ECMB                                                        *
*      o  CDR info                                                    *
*      o  PAV info                                                    *
*      o  JES Monitor                                                 *
*      o  JES Job class info                                          *
*      o  Health Checker                                              *
*      o  Consol Query                                                *
*      o  SMF logstreams                                              *
*                                                                     *
*      Whether SHOWzOS is authorized or not depends on how it has     *
*      been installed and in which environment it executes.           *
*                                                                     *
*      1. If SHOWzOS runs as an APF-authorized job step (authorized   *
*         library and AC=1), then it is authorized.                   *
*                                                                     *
*      2. If SHOWzOS is defined as an authorized TSO/E command or     *
*         program (e.g. in IKJTSOxx) and is invoked as such in a      *
*         batch or on-line TSO/E environment, then it is authorized.  *
*         Note that ISPF services are not available to authorized     *
*         TSO/E commands.                                             *
*                                                                     *
*      3. SHOWzOS is link-edited in such a way that it can take       *
*         advantage of the SDSF SVC.  All of the following condi-     *
*         tions must be met:                                          *
*                                                                     *
*         o The load-library is APF-authorized                        *
*                                                                     *
*         o The name of the load-module starts with "ISF"             *
*           (if you want to invoke it under the name "SHOWMVS",       *
*           define it as an alias)                                    *
*                                                                     *
*         o The load-module is marked RENT                            *
*                                                                     *
*         o SDSF is installed on the system                           *
*                                                                     *
*         o You need to excplicit specify the <lib> on your TSO       *
*           CALL command even this <lib> can be accessed via          *
*           regular ISPF/TSO search features                          *
*                                                                     *
*         In this case, and in this case only, will SHOWMVS be        *
*         able to invoke BRIF (or EDIF) and access authorized         *
*         functions at the same time.                                 *
*                                                                     *
*    Note on SDSF:                                                    *
*                                                                     *
*      Starting with HQX1600, the SDSF SVC checks the full name of    *
*      the invoker which *must* be ISFINIT; previous versions only    *
*      check the first three characters of the name.                  *
*                                                                     *
*      To use the SDSF V1R6 SVC with SHOWzOS, do as follows:          *
*                                                                     *
*      1. link SHOWzOS into an APF-authorized library under the       *
*         name ISFINIT; do not define SHOWMVS as an alias.            *
*                                                                     *
*      2. create a CLIST (or REXX EXEC) called SHOWzOS:               *
*                                                                     *
*           CALL '-dsname-(ISFINIT)'                                  *
*                                                                     *
*      3. invoke SHOWzOS by typing  TSO %SHOWMVS                      *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    How to invoke SHOWzOS?                                           *
*                                                                     *
*    There are several ways to run SHOWzOS, in batch, in batch and    *
*    foreground TSO, in ISPF, authorised via APF, the SDSF SVC,       *
*    IGX00GSF, or unauthorised.                                       *
*                                                                     *
*    This keeps confusing many people, including, as recently as      *
*    last night,both Roland Schiradin (the lead developer) and        *
*    myself.  Running SHOWzOS authorised is optional but it is        *
*    required when data has to be retrieved from certain fetch-       *
*    protected areas, or via authorised services, or from             *
*    other address-spaces, as is the case with JES2's start-up JCL.   *
*                                                                     *
*    1. You can run SHOWzOS in batch, as Mark said, just with         *
*                                                                     *
*      //SHOWMVS EXEC PGM=SHOWMVS                                     *
*      //SHOWMVS DD SYSOUT=*                                          *
*                                                                     *
*    If you need the displays that require authorisation, make        *
*    sure you execute SHOWzOS off of an APF-authorised library        *
*    and that the load-module (which can have any name you want)      *
*    was link-edited with AC=1.  BTW, the SHOWMVS DD is optional;     *
*    if you don't provide one, the program allocates it to            *
*    SYSOUT=*.                                                        *
*                                                                     *
*    2. You can run SHOWzOS in TSO batch, just with:                  *
*                                                                     *
*      //SHOWMVS EXEC PGM=IKJEFT01                                    *
*       /SYSTSPRT DD SYSOUT=*                                         *
*      //SYSTSIN DD *                                                 *
*      SHOWMVS PUTLINE                                                *
*                                                                     *
*    The PUTLINE operand is required to obtain the full display;      *
*    if you omit PUTLINE (or specify the SHORT_PUTLINE option),       *
*    SHOWzOS only produces the first two sections of the display      *
*    (20 lines or so).   If you need any of the displays that         *
*    require authorisation, add SHOWzOS to the AUTHCMD                *
*    section of your IKJTSOxx member in SYS1.PARMLIB.                 *
*                                                                     *
*    When run in batch TSO, SHOWzOS writes its output to the          *
*    SYSTSPRT DD using the PUTLINE macro, or to the SHOWMVS DD        *
*    if present.  The format of the output is different between       *
*    the two: on the SHOWMVS DD output, blank lines are inserted      *
*    to improve readability; on SYSTSPRT, there are no blank          *
*    lines.                                                           *
*                                                                     *
*    You can also invoke SHOWzOS via the CALL command, and add        *
*    SHOWMVS to the AUTHPGM section of IKJTSOxx to obtain the         *
*    authorised displays.  To obtain the full display, specify        *
*    the PARM as 'PUTLINE' in the CALL command. e.g.                  *
*    CALL lib(SHOWMVS) 'PUTLINE'.                                     *
*                                                                     *
*    3. You can also run SHOWzOS in ISPF, in which case the           *
*    output is, by default, presented using BRIF which allows         *
*    you to scroll back and forth and issue FIND commands.            *
*    If you invoke SHOWzOS as a TSO command with the EDIT             *
*    parameter (e.g. TSO SHOWMVS EDIT), then the output is            *
*    presented using EDIF, allowing you to EDIT the report and        *
*    issue commands or run macros agains it.                          *
*                                                                     *
*    If you invoke SHOWzOS in the ISPF environment with the           *
*    SHORT_PUTLINE or PUTLINE option, then SHOWzOS uses the           *
*    PUTLINE macro (instead of BRIF) to display its output in         *
*    line mode.  You can trap its output using the TSOFS              *
*    function of the FASTPATH utility or one of the numerous          *
*    CLISTs or REXX execs provided on the CBT tape that use           *
*    OUTTRAP to provide a similar service.  If FASTPATH is            *
*    installed, for example, you can set up a function key to         *
*    TSOFS SHOWMVS SHORT_PUTLINE for a quick display of the system    *
*    level and IPL date.                                              *
*                                                                     *
*    To obtain the authorised displays under ISPF, you can add        *
*    SHOWMVS to IKJTSOxx and run it off of an APF-authorised          *
*    library; this, unfortunately, leads SHOWzOS to think that        *
*    it's NOT running under ISPF and it defaults to SHORT_PUTLINE     *
*    which produces the first two sections of its normal output       *
*    in line mode.  To obtain a full display (that can be OUTTRAP'd), *
*    specify the PUTLINE parameter, e.g. TSO SHOWMVS PUTLINE or CALL  *
*    lib(SHOWMVS) 'PUTLINE'.                                          *
*                                                                     *
*    Authorising SHOWMVS using IKJTSOxx and, at the same time, using  *
*    OUTTRAP to enable BROWSE, EDIT or VIEW prevents you from taking  *
*    advantage of two SHOWzOS features: multi-tasking, which speeds   *
*    up the display of the first screen, and dynamic update, which    *
*    refreshes certain sections of the display each time you hit ENTER*
*    To have the best of both worlds (i.e. authorised displays AND    *
*    dynamic updates), then you have to use an extended SVC routine   *
*    (ESR) to authorise SHOWzOS.                                      *
*                                                                     *
*    SHOWzOS is designed to look for (and use, if present) two        *
*    different type-3 ESRs: the SDSF SVC (ISFSVC or IGX00011)         *
*    or IGX00GSF, which is supplied in file 183 of the CBT tape.      *
*    To take advantage of the SDSF SVC (which is readily available    *
*    on the majority of the OS/390 systems), SHOWzOS must be link-    *
*    edited under the name ISFINIT and, of course, be marked RENT and *
*    executed out of an APF-authorised library.  Calling the module   *
*    ISFINIT may conflict with SDSF's own ISFINIT module, although    *
*    on an R10 system, having SHOWzOS under the name ISFINIT in an    *
*    authorised STEPLIB or TSOLIB doesn't seem to affect SDSF at all. *
*                                                                     *
*    If you don't have SDSF on your system, or are worried about      *
*    linking SHOWzOS under the name ISFINIT, you can install the      *
*    IGX00GSF Type-3 ESR, which requires an IPL or a dynamic SVC      *
*    update capability.  After SHOWzOS is link-edited into an         *
*    APF-authorised library with the RENT attribute, you should       *
*    be able to invoke it under ISPF and obtain the authorised        *
*    displays via BRIF or EDIF.                                       *
*                                                                     *
*    If both the ISFSVC and IGX00GSF are installed, SHOWzOS only      *
*    uses the first one, i.e. the one with the lowest ESR number.     *
*    For example if IGX00GSF is installed under the name IGX00000     *
*    (i.e. type-3 ESR 0, which is the default for IGX00GSF) and the   *
*    SDSF SVC is installed as IGX00011, then SHOWzOS uses IGX00GSF    *
*    (i.e. IGX00000) and ignores the SDSF SVC.  If IGX00GSF is        *
*    installed as IGX00015 and the SDSF SVC is also installed,        *
*    then the SDSF SVC is used and IGX00015 is ignored.               *
*                                                                     *
*    Applications such as SDSF which run authorised within ISPF       *
*    execute in a hostile environment and have to be designed         *
*    to prevent the integrity of the system from being compromised.   *
*    When authorised via an ESR, SHOWzOS uses key=4 work areas and    *
*    large quantity of SYNCH RESTORE=YES macros and BAKR/PR           *
*    instructions to prevent hi-jacking of its authorised status.     *
*    How air-tight the code really is, I'm not 100% sure, and if you're
*    security-conscious, stick to the IKJTSOxx method.                *
*                                                                     *
*                                                                     *
*    Gilbert posted this doc in ng IBM-Main (03/25/01)                *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    Undocumented Interfaces                                          *
*                                                                     *
*    As SHOWzOS is enhanced to support additional functions,          *
*    it uses an increasing number of undocumented interfaces          *
*    and control blocks, many of them OCO.  This is required          *
*    to provide full support for recently introduced features,        *
*    such as Dynamic UCBs, CDE Extension, TSO/E tables, etc.          *
*                                                                     *
*    Besides the initial difficulty to understand them, which in      *
*    itself can be a source of problems, the format, contents, or     *
*    chaining method of undocumented control blocks may change in     *
*    future releases (or when PTFs are applied) and erroneous         *
*    results may occur (S0C4 is the most likely symptom).             *
*                                                                     *
*    SHOWzOS doesn't have the "right" to do this nor is this          *
*    supported or covered by IBM in any term. Use it on your risk!!!  *
*                                                                     *
*    It is distributed on an as is, where is basis, without expressed *
*    or implied warranty of any kind.                                 *
*                                                                     *
***********************************************************************
&REL      SETC 'R722'                  Release number            RS0613
&NUMLINES SETA 200000                  Max number of lines       RS0506
&LINESIZE SETA 125                     Max line width              JM
&LINESPPG SETA 60                      Lines per Page            DL1199
&TITLEPFX SETC '>'            Prefix for section title           RS0803
*
*   The following switches allow you to limited the output       RS0605
*   produced by SHOWzOS. In some cases you may also set a switch RS0605
*   to 'N' because required maintenance is not applied           RS0605
*   to your system                                               RS0605
*
&IOSCDR         SETC 'Y'      Y/N report IOSCDR                  RS0106
&MTTDATA        SETC 'N'      Y/N report Master Trace Table      RS0606
&TCPIPDATA      SETC 'Y'      Y/N report TCPIP data              RS1104
&VERBOSE_TN3270 SETC 'Y'      Y/N report TN3270 sessions         RS1004
&VERBOSE_CICS   SETC 'Y'      Y/N report CICS DFHRPL/STEPLIB     RS1004
&SMF_ZAAPZIIP   SETC 'Y'      Y/N report SMF for zAAP/ZIIP only  RS0307
&PRINT_CC       SETC 'Y'      Y/N prints page feed or always spaceS1206
*
*$722                                                            RS0613
*     Implement enhancements contributed by Greg Freney          GF0414
*       Label in wrong place for conditional assembly            GF0414
*       S0C4 with BPX1PCT - invalid opcodes for z/OS 2.1         GF0414
*       S0D5 RSN20 in JES2PAD - problem beyond my ability! (??)
*     Implement enhancements contributed by Roland Schiradin     RS0613
*       HWM for CSA above the bar                                RS1214
*       Loop causing S906 when no zFS system is implemented      RS1114
*       New BPXPRMxx Options             (HBB7780)               RS0414
*       New AllocXX Options              (HBB7780)               RS0414
*       New Init-Parm CATALOG and IXGCNF (HBB7780)               RS0414
*       Use IGDSGCL instead of IGDSGCLX OA13568 is very old      RS0414
*       Display of SMS Copy Pool Definition                      RS0414
*       Abend 0C4 Coupling Data z/OS R13                         RS0613
*       New ISV entries                                          RS0214
*       New ENF codes                                            RS0214
*       New LE-Option PAGEFRAMESIZE (HBB7780)                    RS0613
*       New CEEOCB version (HBB7780)                             RS0113
*     Implement enhancements contributed by John Hamlet          JH1404
*       New ULUT V3 support (HBB77A0) also via PTF for V1R13     JH1214
*       Toleration for z/OS V2R2 (HBB77A0)                       JH1214
*       Fix for Coupling Facility cache & list structure         JH1404
*        navigation issue (IXLMG) when new type 0x15 record      JH1404
*        present whose data entries are present BEFORE           JH1404
*        its header.                                             JH1404
*       TCP/IP Listener report enhancements to show MaxBackLog,  JH1402
*        # times backlog exceeded, current backlog, current      JH1402
*        active & birthdate & time for listen().                 JH1402
*       Fix for empty PLATFORM PROGRAMS in IKJTSO00 reports      JH1303
*       Initial HBB7790 support (V2R1) including additions to    JH1303
*         ENFCODET table, temporary fix for UCMSTRNM structure   JH1303
*         name moved to UPEA, patch for LE support at z/OS       JH1303
*         V1R13 & V2R1. <Some issues outstanding>                JH1303
*       Initial HJE7790 support. $PADs moved to                  JH1303
*         JES2AUX.JES2PSO dataspace.                             JH1303
*       JES2I200 fixups. $PIT layout not correct since z/OS      JH1303
*         V1R3 due to PITASCBT token introduction at V1R4.       JH1303
*         Does not include multi-character class support.        JH1303
*       ZAD fixes in JES2I200 routine.                           JH1303
*       Fix for BPX1MSS RC156 RSN0D070200 issue when entering    JH1303
*         split screen and launching an LE enabled application   JH1303
*         which attempts to set up a signaling envronment. Fix   JH1303
*         entails setting DUBPROCESS level dub'ing via BPX1SDD   JH1303
*         (setdubdefault) syscall during ShowZOS initializa-     JH1303
*         tion.                                                  JH1303
*       Formatting fixes for CSMLS00 routine to prevent ZAD      JH1303
*         violations being flagged in @STRING64 code after       JH1303
*         @STR313 label.                                         JH1303
*       Fix for USSOPT to not attempt to use the FS_GROW or      JH1303
*         AUTO_ATTACH options on BPX1PCT (pfsctl) syscall at     JH1303
*         HBB7790 where they are not supported.                  JH1303
*       Fix for lost GDA pointer in CSSTOR00 routine (ZAD).      JH1303
*       Fix in IPLST00 breaking subtasked reports due to LINE    JH1303
*         not being blank.                                       JH1303
*       Fix in ALLOC00 breaking subtasked reports due to LINE    JH1303
*         not being blank.                                       JH1303
*       Logic fix for JES2 initiator refresh display at all      JH1303
*         JES2 levels.                                           JH1303
*       Logic fix in subtask for IGWASMS environment.            JH1303
*       Thread level signal mask added to USS threads display    JH1309
*$721                                                            RS0510
*     Implement enhancements contributed by John Hamlet          JH0111
*       Toleration for z/OS V2R1 (HBB7790)                       JH0112
*       Fixes for valid CHIPID 0xFF                              JH0911
*       Fixes with Access Register                               JH0911
*       Fixes with DIAG TRAP IEAINITREGSTASK enabled (HBB7780)   JH0111
*     Implement enhancements contributed by Sam Golob            SG0610
*       Display CVT offset                                       SG0610
*     Implement enhancements contributed by Roland Schiradin     RS0712
*       Support solution for BRIF/EDIF OA38807                   RS0712
*       Support for DB2 V10                                      RS0511
*       Better support for IPL-Statistics (HBB7770)              RS0511
*       New IPA settings for z/OS R12 (HBB7770)                  RS0511
*       New ISV entry for Software AG                            RS0511
*       New CEEOCB version (HBB7770)                             RS0511
*       Toleration for z/OS R13 (HBB7780)                        RS0111
*       OBTAIN new keyword EADSCB=OK                             RS1110
*       CPU-ID was 2 digits. A z196 can have up to 100           RS1110
*       Display some ZFS info (HBB7740)                          RS0510
*       Display LX-Usage from IHASVTX (HBB7760)                  RS0510
*       Use IHAQDB instead of OCO z/OS R11 (HBB7760) and support RS0510
*         DSAB above and below the line                          RS0510
*$720                                                            RS0709
*     Implement enhancements contributed by John Hamlet          JH0110
*       ZAAPAWMT/ZIIPAWMT was wrong, new CCCMAXQL                JH0210
*       Better EAV disk volume support                           JH0110
*     Implement enhancements contributed by Sam Golob            SG1109
*       Number of Notices in the Broadcast Dataset (NUMNOT00)    SG1209
*       Local TSO Authorization Tables for this Userid (LAPTF00) SG1209
*       TSO Tables via PARMLIB (EXTAB00)                         SG1109
*     Implement enhancements contributed by Roland Schiradin     RS0709
*       New ISV entry for GDPS                                   RS0410
*       IOCINFO returns a low-value CSSID                        RS0410
*       CVTSCPIN is the IPL time SCPINFO and ECVTSCPIN is now    RS0410
*       the active SCPINFO (HBB7750)                             RS0410
*       Online Real Storage (at IPL) was wrong                   RS0410
*       Display Common/Shared memory objects (HBB7750)           RS0310
*       New VERIFY_UNCAT ALLOC (HBB7760)                         RS0310
*       New HEAPCHK suboptions (HBB7760)                         RS0310
*       New CEEOCB version (HBB7760)                             RS0310
*       New ENF codes                                            RS0210
*       CSVRTLS gone with z/OS R9 and above (OA29019/OA29995)    RS0210
*       DSQDBID could be DSAB or QDB (Mark Zelden)               RS0210
*       New NEDCLASS 12 (HBB7760)                                RS1209
*       New IPA settings for z/OS R11 (HBB7760)                  RS1209
*       Report Protection of Dead Zone                           RS1209
*       Correct VTAM level for z/OS R10                          RS1209
*       Display IFACROSSOVER gone for z/OS R8 and higher         RS1209
*       Display IIPHONORPRIORITY (Dean Tesar)                    RS1209
*       Toleration for z/OS R12 (HBB7770)                        RS1209
*       Verify the AXR (SystemRexx) pointer                      RS1109
*       Support HyperPav in the PAV display                      RS0909
*       New ENF68 for BCPii z/OS R10 (HBB7750)                   RS0909
*       This version require STRING64 516 (2GB offset)           RS0909
*       SAM64 and SAM31 not needed for SSAIR fixed S0C4-38       RS0909
*       New ALLOCxx parameter for z/OS R11 (HBB7760)             RS0909
*       Validation check for PCCA                                RS0709
*       New ISV entry for Action Software                        RS0709
*       Obsolete PRIORITYPG display gone                         RS0709
*$719                                                            RS0309
*     Implement enhancements contributed by Roland Schiradin     RS0309
*       Report wrong ECVTEORM setting (potential real storage)   RS0609
*       APAR OA18766 cause ASMA057E in IOSDIOFC z/OS R7 and R8   RS0609
*         Apply OA29017 to fix this problem                      RS0609
*       Support IWMWSYSQ EXTENDED_DATA=YES z/OS R9 (HBB7740)     RS0609
*         Apply OA27032                                          RS0609
*       Report GDATotalCSAHWM and GDATotalECSAHWM z/OS R10       RS0509
*         Includes also the converted CSA/ECSA                   RS0509
*       Use CVTMAXMP instead of hardcoded value. Report also     RS0509
*         ECVT_Installed_CPU_HWM for z/OS R10                    RS0509
*       Show dynamic CDT (RACFDATA) and a bit more for           RS0409
*         RACF Classes z/OS R6                                   RS0409
*       Support for 24bit LX (LXINFO and PCINFO) z/OS R6         RS0409
*       DFHRPL/STEPLIB concatination could be wrong              RS0309
*       Use SSAIR among other to support REUSASID(YES)           RS0309
*$718                                                            RS1107
*     Implement enhancements contributed by Roland Schiradin     RS0908
*       Check number of TCPIP interface entries                  RS0209
*       Display more ISPCFIG/ISPCFIGU data z/OS R9 (HBB7740)     JK0209
*       Wrong SMF types (off by one) for SMF-Logstreams          RS0209
*         (Mark Zelden)                                          RS0209
*       Fixed abend S0C4 in the SORT-Option Display while        RS0209
*         running in PSW-KEY 4 (Gary Dipillo)                    RS0209
*       Add minimal support for z/OS R11 (HBB7760)               RS0209
*       Display some System Rexx data                            RS0209
*       Fixed S0C7 using the TCP/IP client/server display func   RS1108
*       Display TCP/IP interface via IOCTL for first stack       RS1108
*       Display TCP/IP statistics via IOCTL for first stack      RS1108
*       Display special devices with alternate subchannel set    RS1108
*         (HBB7740 require OA24142) base of HBB7750. SHOWzOS     RS0209
*         display by default for HBB7750 only.                   RS0209
*       Display IOFACILITIES from IOCINFO (MIDAW and zHPF)       RS1108
*       Display zHPF flag for channels                           RS1108
*       Display zHPF flag for devices                            RS1108
*       Column Count in the RRS display gone                     RS1108
*       Display RACF data sharing status and mode                RS1108
*       Show Policy Event Message based or Policy based          RS1108
*         for CF and Structures                                  RS1108
*       Use MCTCurSystemUIC instead of RCVUICA (HBB7730)         RS1008
*         Add also MCTMaxSystemUIC and MCTMinSystemUIC           RS1008
*       Verify the IXGLOGR ASCB in a GDPS environment            RS1008
*         (Luc Martens)                                          RS1008
*       MCCAFCTH in IEAOPT was wrong, added display for          RS1008
*       BLWLTRPCT and BLWLINTHD. HiperDispatch value             RS1008
*       Display sequence number for Linkage Index (Reuse LX)     RS1008
*       Distinct big and small LX numbers (System and Non-System)RS1008
*       Fixed abend S1C7 in WLMD00 if ansarea is close to        RS1008
*       the last protected page, subtract 4096 to prevent 0C4    RS1008
*       on the last page (Paul Feller)                           RS1008
*       Show ASIDs using Crypto                                  RS0908
*       Hyperpav=Baseonly                                        RS0908
*       Title for SMF logstream only once                        RS0908
*       SMS system names was limited to 8 systems (W.Tomek)      RS0908
*       Don't show SYS1.MAN% if SMF logstream is set (W.Tomek)   RS0908
*       Show NOHONORREGIONLIMIT in the PPT (HBB7750)             RS0908
*       Show potential real storage (Mark Zelden)                RS0908
*       New IPA settings CEA (Common Event Adapter HBB7750)      RS0908
*$717                                                            RS1107
*     Implement enhancements contributed by DA                   DA0508
*       SMF Logstreams (HBB7740). IFAQUAA didn't work together   DA0508
*       with IXCYQUAA because of duplicate field definitions.    DA0508
*       Use IFAQUAAX from the SHOWMACS (OA25314)                 DA0508
*     Implement enhancements contributed by Roland Schiradin     RS1107
*       Fixed S0F8 RC18                                          RS0908
*       Status for Large Page Support, new IPA LFAREA            RS0808
*       IPL-Statistics Description                               RS0808
*       M/G for shared memory objects is wrong (Mr. Wiedemann)   RS0508
*       Abend0C4 (Structure details) miss to clear ANSLEN to     RS0508
*         force a GETMAIN instead of WORKADDR.                   RS0508
*       Size of CSA above the bar (HBB7750)                      RS0508
*       New CEEOCB version (HBB7750)                             JH0508
*       New IPA settings AXR (System Rexx) and HVCOMMON (HBB7750)JH0508
*       Healthcheck display miss some info, fixed S0C4 if        RS0508
*         HZSQUAAGNUMPARMLIBMEMBERSUFFIXES is zero               RS0508
*       CADS numbers from RCE (HBB7720)                          RS0508
*       Avoid abend0D5 in GDPS environment without System Logger RS0508
*       Omit volumes with no UCB in the Storage-Group Capacity   RS0508
*         display (Dean)                                         RS0508
*       Add minimal support for z/OS R10 (HBB7750)               RS0408
*       IHALLDS OCO change downward compatible                   RS0308
*       Fixed abend S0C4 running z/OS R9 under VM                RS0308
*       Fixed abend S0C4 in the TCPIP display                    RS0208
*       Fixed abend in the PAV-Area                              RS0108
*       Display GRS ENQMAXA and ENQMAXU setting (HBB7730)        RS1107
*       Add some code to ensure downward compatibility           RS1107
*$716                                                            RS0507
*     Implement enhancements contributed by John Hamlet          JH0907
*       IHALLDS OCO changed z/OS R9 (HBB7740 )                   JH0907
*         Sorry this change isn't compat. Assembly on z/OS R9    JH0907
*         will fails to work on pre z/OS R9. So you need to      JH0907
*         assemble on z/OS R8 again.                             JH0907
*     Implement enhancements contributed by Jack Schudel         JS0507
*       Bugfix JES2 level display, Check SSOBRETN                JS0507
*     Implement enhancements contributed by Roland Schiradin     RS0507
*       Disable UNICODE codepage pairs for z/OS R8 and R9        RS1007
*         will be back soon after I understand the new layout    RS1007
*       Add GVTCSGRSCONSTRAINED display z/OS R8 (HBB7730)        RS1007
*       CDATTR3 contain a new flag CDEPROTP z/OS R9 (HBB7740)    RS1007
*         among other general flags in the CSVT and TCB          RS1007
*         reported by David Cole. Display system wide REFRPROT   RS1007
*         setting in the Link-List display                       RS1007
*       CTS 3.2 verified and works fine                          RS1007
*       Add new LE option CEEDUMP for z/OS R9 (HBB7740)          RS1007
*       JES2 introduce a V2 IAZMOND. SHOWzOS still use V1        RS1007
*         z/OS R9 (HBB7740)                                      RS1007
*       SHOWzOS on z/OS V9 require OA22594 for ATRQUERY          RS0907
*       CEEOCB is now shipped in SCEEMAC z/OS R9 (HBB7740)       RS0907
*         my version is now called CEEOCBRS                      RS0907
*       ISGGVTX gone with z/OS R9 (HBB7740) display gone         RS0907
*       Add minimal support for z/OS R9 (HBB7740)                RS0907
*       Fixed Assembly error running on z/OS R3                  RS0907
*       Check Swap status for CICS regions                       RS0907
*       RMPTTOM is milliseconds since z/OS R7                    RS0607
*       GRS SYNCRES display                                      RS0507
*       CPU busy, UIC, 4H MSU, AFQ (CPU200 dynamic display)      RS0507
*         among other based on the RCT                           RS0507
*       4K Limit for DSECT DYNAM not gone but can now be larger. RS0507
*         It will be gone in the future but require newer hard   RS0507
*         ware (e.g with LAY support). Well it's just a matter   RS0507
*         of time until I'll use these new instructions and this RS0507
*         require a new set of hardware.                         RS0507
*       CTS 3.2 support works without any changes                RS0507
*       TSO CALL 'xxxx.xxx.xx(ISFINIT) fails (Doug Clower)       RS0507
*       Check DSNWLI2 instead of DSNALI as some products         RS0507
*         deliver DSNALI which is a real bad idea !!!!           RS0507
*         This could cause AbendS0C4 because the latest          RS0507
*         version, which is backward compatible, is required     RS0507
*         for SHOWzOS (Shannon Collinson)                        RS0507
*$715                                                            RS1206
*     Implement enhancements contributed by Roland Schiradin     RS1206
*       IXLMG require fix storage and more then 64K              RS0507
*       WORKADDR now obtain 128K                                 RS0507
*       Disable old D204 instruction (ABEND0C6)                  RS0507
*       Rework the CEEDOPT/CEECOPT/CEEQDOPT display to show      RS0407
*         only CEEPRM settings/changes                           RS0407
*       Bug in the Scheduling environment fixed                  RS0407
*       MIDAW=YES/NO                                             RS0407
*       Limit 'SMF data for each asid' for zAAP/ZIIP only        RS0307
*         depending on the switch &SMF_ZAAPZIIP                  RS0307
*       CEEPRM Option CESE/CICSDDS for TERMTHDACT                RS0307
*       Catalog info (AUTH) and support for IGGCRT with R8       RS0307
*       Device SSID code was disabled                            RS0307
*       #SNAP64 for 64bit register display, require STRING64     RS0207
*         version 515. STRING64 is included in this lib          RS0207
*         See doc inside STRING64 for more details               RS0207
*       Display SMCS info for consoles                           RS0207
*       Display more IEAOPT settings                             RS0207
*       Display APPC user                                        RS0207
*       Display SHOWzOS info same as PF1 under ISPF EDIT/VIEW    RS0207
*       Display Sysplex Routing entries                          RS0207
*       Miss some freemain                                       RS0207
*       New RACF options, verify dynamic CDT (HBB7720+HBB7730)   RS0207
*       Display active schedule environments in the sysplex      RS0207
*       Display enclave data (zIIP/zICP/zAAP/zACP)               RS0107
*       Display DFSORT options                                   RS0107
*       Display Timer Queue Elements (only DIE)                  RS0107
*       Coupling structure details (Attributes, Connections)     RS0107
*       Print all macro extensions as nobody prints the          RS0107
*         assembly listing at all. This change almost double     RS0107
*         the spool storage but this is just memory or DASD      RS0107
*         (John Hamlet)                                          RS0107
*       Coupling: Measurement data                               RS0107
*       Limit the number of entries in the Common Storage Usage  RS0107
*       Number of signals truncated                              RS0107
*       IWMWSYSQ RC8 RSN0F010828 apply OA03618                   RS0107
*       Bug in CSSTOR100 R3 was wrong (James Goreham)            RS0107
*       Display WLM Definitions not only active (WLMD)           RS0107
*         Includes Application Environments, Schedule Env        RS0107
*         Policies among other                                   RS0107
*       Display Transaction/Region manages (WLM212 ..)           RS1206
*       New EWLM Classification types                            RS1206
*       New switch to suppress the carriage control character    RS1206
*       Looks smarter in the PDF using TXT2PDF from Lionel       RS1206
*         &PRINT_CC   SETC 'Y' prints page feed or always space  RS1206
*       (David Jousma)                                           RS1206
*$714                                                            RS0806
*     Implement enhancements contributed by John Hamlet          JH0806
*       Unicode display on z/OS R8 (Eyecatcher IR8)              JH0806
*       ABENDS0C7 in V64USE00 for shared memory objects          JH0806
*       Clear IRARQSRV area before SVC 95 (SYSEVENT)             JH1106
*     Implement enhancements contributed by Roland Schiradin     RS1006
*       ASID > 999 behaviour                                     RS1106
*       Verify valid CAUB pointer                                RS1106
*       New DIAG204 subtype 5/6/7 didn't work for Hercules       RS1106
*       It just return the old DIAG204 data and this cause       RS1106
*       abend S878 because the code expect a length instead      RS1106
*       of an address !!  SHOWzOS recover from this abend        RS1106
*       and I haven't found any solution to avoid this abend.    RS1106
*       However I informed the Hercules newsgroup about this     RS1106
*       and offer a helping hand to provide such support !!!!    RS1106
*       Display IOS EKM Status (OA17593) z/OS R8                 RS1106
*       New value for RAXLVMEMLIMS (OA14391) Norbert Friemel     RS1106
*       If you run different DB2 at the same image make sure     RS1106
*         SHOWzOS runs with the highest level of SDSNLOAD and    RS1106
*         SDSNEXIT. Otherwise you might get abends while         RS1106
*         running SHOWzOS. Alternate you can omit these libaries RS1106
*         but SHOWzOS is unable to show the real DB2 Version.    RS1106
*       The CICS Region display contains only CICS regions       RS1106
*         with MRO connections. Only those are registered in the RS1106
*         SUDB pool.                                             RS1106
*       DIAG 204 subtype 6 for z800 and z890                     RS1106
*         Identify zAAP in the display (z900 and higher)         RS1106
*       CSRSI VM-Info missing                                    RS1006
*       ISPF display ISPCFIG/ISPCFIGU data like ISPVCALL         RS1006
*       SMS display Libname for optical drives                   RS1006
*       SMS display LibID for libraries                          RS1006
*       SMS display Volser for each Storage Group and the        RS1006
*         capacity, free and total used for each storage group   RS1006
*       Decimal ASID for LX and Name/Token display               RS1006
*       Support new DIAG204 set (easier to use)                  RS0906
*         Old display still exist to compare the data            RS0906
*       LPAR Config gets FAILCODE 39 (zIIP)                      RS0906
*       IEAOPTxx CPENABLE                                        RS0906
*       Display Cpucrit/Stgcrit for a service class              RS0906
*       IMS level for V9 and above                               RS0906
*       SYSEVENT REQSVDAT SMF info for each ASID includes        RS0906
*         info for enclaves, zIIP and zAAP if availble           RS0906
*         (Section SMFD00)                                       RS0906
*       LE-Option DYNDUMP (z/OS R8, LE-OCB Version 17, HBB7730)  RS0806
*       Mircocode level (A.Dominguez) not for VM, Hercules       RS0806
*       IPL-Statistics layout changed in z/OS R8 (HBB7730)       RS0806
*       GRS-RPT entry layout changed in z/OS R8 (HBB7730)        RS0806
*       New Event listener code z/OS R8 (HBB7730)                RS0806
*       MIDAW Status (HBB7709)                                   RS0806
*       GDPS Status Yes/No (HBB7707)                             RS0806
*       Increase buffer for EZBNMIFR from 256KB to 4MB           RS0806
*       ABENDS0C1 in USERS68 if # of TCP/IP user is zero         RS0806
*       Event listener code 64 (GDPS)                            RS0806
*       Bug AIF in IOSCDR wrong (changed) Mark Zelden            RS0806
*$713                                                            RS1205
*     Implement enhancements contributed by John Hamlet          JH0606
*       Bug fix/enhancement in the MPF/Console area              JH0606
*     Implement enhancements contributed by DA                   DA0106
*       Health checker display z/OS R7 (HBB7720)                 DA0106
*     Implement enhancements contributed by Roland Schiradin     RS1205
*       CVTH7720 can be present even running on CVTH7709         RS0806
*         Add SYSSTATE TEST and check the OSREL                  RS0806
*       Report zIIP CPU's and excl. zIIP from MIPS/SU calculationRS0706
*       UNICODE display needs more verification and support      RS0706
*       Systemlogger (IXGLOGR) Version 03 support                RS0706
*       SHOWzOS now require ASSEMBLY Option GOFF,LIST(133)       RS0606
*         &NUMLINES Limit is gone !!!!!!!!!!!!!!!!!!!!!!         RS0606
*         &CONSOLE switch gone                                   RS0606
*         &DEVICES switch gone                                   RS0606
*         &PAVDATA switch gone                                   RS0606
*         &IOSCDR switch remains because of performance          RS0606
*         &TCPIPDATA switch gone                                 RS0606
*       Default for Master Trace Table is now 'N'                RS0506
*         Possible garbage in this area (perhaps serialization)  RS0506
*       New option SWA/SERV_LINKLIB/SERV_LPALIB for USS          RS0506
*         SYSPLEX display was wrong (HBB7709 and HBB7720)        RS0506
*       Droped HARDCPU convert version to model as it makes      RS0506
*         no sense for newer hardware                            RS0506
*       Omit display for DF/DSS and DF/HSM level                 RS0506
*       Minor bug fixes reported by Greg Price                   RS0506
*       Support for all LE option member on z/OS R7 (HBB7720)    RS0506
*         CEEDOPT, CEECOPT, CELQDOPT                             RS0506
*       TCB Tree rework                                          RS0506
*       UNICODE display on z/OS R7 without APF (HBB7720)         RS0506
*       IEASYS/IPA display downward compatible (Sam Golob)       RS0506
*       Console Query Service WTOR and AMRF (HBB7720)            RS0506
*       IPA bug wrong AIF label                                  RS0506
*       PC usage is back for ASN-LX reusage (HBB7709)            RS0506
*       Support ASCBIOSX with OA14340 (HBB7709)                  RS0506
*       Display SMF Buffer settings (auth) OW56001 z/OS R6       RS0506
*       The D204LPAD isn't needed                                RS0406
*       The EZBNMRHA drives my crazy. Even of a VERSION1         RS0406
*         layout the length has been changed with z/OS R7 !!!!   RS0406
*         Got an email after reporting and understand the        RS0406
*         EZBNMRHA a bit better (no doc for assembler)           RS0406
*       Since STRING64 support type FD omit some internal        RS0406
*         coding using LG/CVDG                                   RS0406
*       Use STRING64 at all                                      RS0406
*       Support for Unicode layout IR5                           RS0406
*       The CONSOLE/DEVICE/PAVDATA display may contain huge      RS0406
*         data. Currently SHOWzOS can handle 130.000 lines       RS0406
*         To limit the ouput please set the switches to 'N'      RS0406
*         depending on your environment.                         RS0406
*         The default for &CONSOLES is 'Y'.                      RS0406
*         The default for &DEVICES is 'Y'.                       RS0406
*         The default for &PAVDATA is 'Y'.                       RS0406
*       STRING64 require a 144 Bytes Savearea                    RS0406
*       Add minimal support for z/OS R8 (HBB7730)                RS0106
*       Support for MIF ID display (tnx Mark Zelden)             RS1205
*     Implement enhancements contributed by Sam Golob            SG1205
*       IKJXPRM miss an extra character                          SG1205
*$712                                                            RS0605
*     Implement enhancements contributed by Charlie Seifert      CS1105
*       Fixed bug in PPT display                                 CS1105
*     Implement enhancements contributed by DA                   DA0805
*       Display JES2 job class information (JES00)               DA0805
*       Display JES Monitor data  (JES00 z/OS R7)                DA0805
*     Implement enhancements contributed by Calum Reid           CR0605
*       Support for JES2 Dynamic Proclibs Display                CR0605
*       Require APF for SHASMIG                                  CR0605
*     Implement enhancements contributed by Roland Schiradin     RS1005
*       The IOSCDR display might cause serious performance       RS0106
*         problems. If you think SHOWMVS runs to slow please     RS0106
*         try to set &IOSCDR to 'N' to omit this display.        RS0106
*         The default for &IOSCDR is 'Y'.                        RS0106
*       No zFS statistics for clients (Reasoncode=EF1A6425)      RS1105
*       New IPA for z/OS R7 (CEE, DRMODE, PRESCPU)               RS1105
*         Add some downward compat verification code             RS1105
*       Display V64-Bit usage and limits (V64USE00)              RS1105
*       Display PAV INFO (PAV00)                                 RS1105
*         Show SSID using IDCSS01                                RS1105
*         Omit display in the Device class section               RS1105
*       Bugfix in CDR00 (wrong register)                         RS1005
*       IEFSSSA and IGDSGCL wrong in z/OS R5, R6 R7 (OA13568)    RS0905
*       Better support for SHASMIG without APF                   RS0905
*       RACF display without SYS1.UADS (bad branch)              RS0905
*       GTRACE Length Display                                    RS0705
*       Virtual Storage map is now TOP DOWN was DOWN TOP         RS0705
*         Like IPLINFO, MXI or others. Also seperate lines       RS0705
*         for R/W and R/O Nucleus                                RS0705
*       Display command CMDS (IEECMDS) CONS600                   RS0705
*       Display Unicode Settings (UNICODE)                       RS0705
*         Works without authorization but relay on the DSTOKEN   RS0705
*         which is obtained while runing authorized only         RS0705
*       Display Config Data Read Interface (IOSCDR)              RS0705
*         Handle RC4 from IOSCDR                                 RS1105
*       Support for ISV display based on CSRCTABL (ECVTCTBL)     RS0705
*         The list of ISV might be incomplete. If you seen       RS0705
*         entries "Unknown ISV" please contact me                RS0705
*       Report DB2 V8 NFM Yes or n/a (require PK06381)           RS0705
*       PSW-Key switch missing in section HSM                    RS0605
*       Use ERLYMODN instead of ERLYPROD                         RS0605
*       Sysplex Info using IWMWSYSQ                              RS0605
*       Increased NUMLINES from 60000 to 100000                  RS0605
*       SMS display for StorGroupCollections (HBB7708 base)      RS0605
*       More GRS info using ISGRPT (Data Areas)                  RS0605
*       WLM Yes/No based on PCCARCFF  (D.Tesar)                  RS0605
*$711                                                            RS0405
*     Implement enhancements contributed by David Bond           DB0505
*       Display SMF Subtypes                                     DB0505
*       Buffer-Managment reside in SLCA cblock (HBB7709)         RS0505
*         On my ToDo List (version 713)                          RS0505
*     Implement enhancements contributed by John Hamlet          JH0405
*       Fixes with DIAG TRAP IEAINITREGSTASK enabled             JH0405
*       Fixes with DIAG TRAP IGVINITFREEMAIN enabled             JH0405
*       ECMB display miss devices with LOC=ABOVE                 JH0405
*     Implement enhancements contributed by DA                   DA0505
*       Expand the RRS display                                   DA0505
*       Increase size for ATRQUERY                               DA0505
*     Implement enhancements contributed by Roland Schiradin     RS0605
*       Display GRS GVTGRSQ status (HBB7707 OA07975)             RS0605
*       Display more info for ZFS files                          RS0505
*       Display Processor Speed changed ||                       RS0505
*       Excl. zAAP from MIPS/SU calculation                      RS0405
*       Use EZBNMRHA on z/OS R7 (HBB7720)                        RS0405
*         Use SHOWMRHA because of PK05194                        RS0505
*       IOSDULUT Ver2 layout with z/OS R7 (HBB7720)              RS0405
*       Add minimal support for z/OS R7 (HBB7720)                RS0405
*       zAAP Yes/No based on PCCAATTR  (D.Tesar)                 RS0405
*       Added SHOWMRHA because of problems in EZBNMRHA (PK04608) RS0405
*       New WLM Classification rule types                        RS0405
*       Add FLAG(NOALIGN) to avoid RC4                           RS0405
*       Bufix causing S806 (INIT634)                             RS0405
*       # of I/O Requests/Complete for PAGEDS                    RS0305
*       Bugfix Macro CICS not invoked under z/OS R3 (R.Lehmann)  RS0305
*       Restructure RTE table (O.Knudson)                        RS0305
*       SHOWZOS is baseless |||||||||                            RS0205
*       Baseregister R11 is gone (big issue)                     RS0205
*         Macro BEGIN_PROC and subroutine BEGIN_PROC             RS0105
*         ISF$SHOW code moved                                    RS0105
*         INIT634 changed                                        RS0105
*         Recovery tested                                        RS0105
*       Display HSM MCDS, BCDS, OCDS, JRNL DSN (A.Dominguez)     RS0105
*       Display ISPTCM entries                                   RS0105
*       Display ENF (Signal) Listener                            RS0105
*       Display Master Trace Table                               RS0105
*       Display all feature codes for SMS. Drop display for      RS0105
*         dynamic Linklist and LPA support.                      RS0105
*       New parm for SMFPRMxx (SMCX)                             RS0105
*       Report ECMB data z/OS R6 (HBB7709)                       RS0105
*          Works also on z/OS R4 (HBB7707) and up but require    RS0105
*          maintenance                                           RS0105
*       CICS Info works with CTS 3.1                             RS0105
*       Display Processor Speed is back but no more special      RS0105
*         handling for AMDAHL CPU's or CMOS/bipolar CPU's and    RS0105
*         weithings based on the no of CPU'S (Sam Golob)         RS0105
*       Report adjustment factor (CSRSI) bugfix                  RS0105
*$710
*     Implement enhancements contributed by DA
*       Show the status of the Console Availibility Feature      DA1104
*       See APAR II13752. You need to create a CNIDTRxx parmlib  DA1104
*       member, issue command "SET CNIDTR=xx", and then issue    DA1104
*       "SETCON TRACKING=ON" before anything useful is done      DA1104
*       once this level of code is on your system                DA1104
*       CICS region display may abendS0C4                        DA1104
*     Implement enhancements contributed by Roland Schiradin
*       ATRFZQRY is now default                                  RS1204
*       PC Usage display fails on z/OS R6 (HBB7709) on z990      RS1104
*       with driver55 because of ASN/LX Reuse Facility (ALRF)    RS1104
*         (I'll fix this in the future)                          RS1104
*       Show ASN/LX Reuse Facility status (HBB7709)              RS1104
*       CPU Weightings omit LPAR no 0 (physical)                 RS1104
*       VSMLIST RC=4 should work now (area is now 4K)            RS1104
*       TCTDCTR last DD is always EXCP=0 (G. Saint-Flour)        GS1104
*       The TCP/IP Display based on EZBNMIFR API is delivered    RS1104
*       via PTF in z/OS R4 and R5 but fails because of PQ86370.  RS1104
*       It also fails on z/OS R6 because of PQ96790.             RS1104
*       So this API require some maintenance applied to          RS1104
*       many systems therefore you need to apply this service    RS1104
*       and set the following switch to 'Y' in order to          RS1104
*       see the TCPIP statistics/connections/listener            RS1104
*       The default is 'Y'                                       RS1104
*       LXAT changed in z/OS R6 (LX reusage)                     RS1104
*       Make room for 144 Bytes SaveArea in DSECT DYNAM          RS1104
*          Required to invoke 64bit routines in the future       RS1104
*       Bug fix using VLDSYSOF                                   RS1004
*       Support for 3390-27, Prepare for 3390-54                 RS1004
*       Add IOCINFO to display IODF info (Mark Zelden)           RS1004
*       Add &VERBOSE switches to limit the ouput                 RS1004
*          CICS DFHRPL/STEPLIB can contain a lot of data         RS1004
*          TN3270 sessions can contain a lot of data             RS1004
*       VSMLIST area again to small                              RS1004
*       BPX1PCT fails for TFS also for NFS, ZFS (bugfix)         RS1004
*       RENT Check for SHOWZOS and SHOWMVS (Sam Golob)           RS1004
*       Display LE run-time options (CEEDOPT)                    RS1004
*       Report DFHRPL and STEPLIB for CICS regions (AUTH)        RS0904
*         Tested with CTS 2.3 (CICS 6.3) only                    RS0904
*       Support for long line IEASYSxx PAGE-SYS                  RS0904
*       Display SRM swap reason codes and counter (AUTH)         RS0904
*       Code for COMPAT mode deleted                             RS0904
*       Basic support for more then 16 CPU's (HBB7709)           RS0904
*       Display all TCP/IP users "TCP/IP users:"                 RS0904
*       Display all CICS regions "CICS regions:"                 RS0904
*       Avoid CSV002I for some BPX1* modules                     RS0904
*       New output mode SMF using BPX1SMF via parm SMF=NNN       RS0904
*         Require permission BPX.SMF in CL(FACILITY)             RS0904
*         nnn should be 128 to 255 depending on your environment RS0904
*         Look at SHOWSAS for a sample simple SAS code           RS0904
*       New TCP/IP display based on EZBNMIFR API (z/OS R4)       RS0904
*         see II13699 for more info                              RS0904
*         Require PQ86370 because of bad alignments              RS0904
*         Require TCPIP.SEZANMAC in the SYSLIB assembly          RS0904
*$709
*     Implement enhancements contributed by Roland Schiradin
*       New IPADESC for HVSHARE (HBB7708)                        RS0704
*       Rename BPXZOCVT to OCVT (HBB7709)                        RS0704
*       Add minimal support for z/OS R6 (HBB7709)                RS0704
*       Basic info for PAV devices (don't have such dev.)        RS0704
*       SYSEVENT REQLPDAT display (auth)                         RS0704
*       Macro SYS1.MODGEN(IHASCA) gone in z/OS R5                RS0704
*       Subpool usage display miss some data (area to small)     RS0704
*       Check binder setting RENT (RAS feature)                  RS0704
*         Avoid CSV003I, S0C4 and several emails                 RS0704
*       BPX1PCT fails for NFS and ZFS (tnx D. Tesar)             RS0704
*       Common Storage Usage display sorted by Total descending  RS0704
*         Marker for OwnerGone 'OG*'                             RS0704
*       TCBPIE (macro IKJTCB) is a 31-bit address since OS/390   RS0704
*         R8 but fails only if running under ISPF while ISHELL   RS0704
*         or OMVS is active (SPIE/ESPIE)                         RS0704
*       Display Processor Speed: gone for several reason         RS0704
*       Bug fix wrong arithmetic code  (tnx E. Jaffe)            RS0704
*       Bug fix Local Cell Pool Display (tnx B. Nitz)            RS0704
*       Display PCHID if present (tnx Alan Field) z/OS R4        RS0604
*         different location                                     RS0604
*       ARM Display Totals/Max Elements (tnx Alan Field)         RS0504
*       TSO Profile display includes IP-Adr/Port/Term/NetID      RS0504
*       LX number also in hex                                    RS0504
*       Changed CPU-Weightings Display for more CPUs             RS0504
*       SYNCHX (15) cause abends IBM APAR OA05361 I use          RS0504
*         SYNCHX (2) or other to be independent of this APAR     RS0504
*       Display correct time infos for USS (since 10.Jan.2004)   RS0504
*         Tnx Tony Harminc                                       RS0504
*       Display Sysplex Couple Datasets (XCFDS)                  RS0504
*         Tnx David Alcock pointing to IXCCPLX                   RS0504
*         Tnx Andreas Freybier for his support in this area      RS0504
*       Split USS display                                        RS0504
*       Small fixes for 708                                      RS0504
*       **** ATTENTION ******                                    RS0504
*       SHOWzOS 709 require z/Architecture and z/OS R3 !!!!      RS0504
*         Restructure Phase 1 and 2 done   !!!                   RS0504
*         Require Assembler Option FLAG(NOEXLITW)                RS0504
*       **** ATTENTION ******                                    RS0504
*$708
*     Implement enhancements contributed by Andreas Freybier
*       Save some literals (several locations)                   AF0404
*     Implement enhancements contributed by GSF
*       Deliver new STRING R512 (required)                       SF0903
*     Implement enhancements contributed by Roland Schiradin
*       z/OS R3 changed the SYS1.PLPA layout (all OCO)           RS0404
*       Bug fix beta 708 (Tnx Sam Golob)                         RS0404
*       Support for GRS RNLDEF TYPE(PATTERN) z/OS R2             RS0404
*       Tested with z/OS R5 maclib/modgen                        RS0204
*       Display AMDPIOXT for PATHIN                              RS0204
*       Add minimal support for z/OS R5 (HBB7708)                RS1103
*       Avoid BRAS in SNAP00                                     RS0903
*       New Display for HFS filesystem info (confighfs)          RS0903
*          Require GFUMPCTL in SYS1.MODGEN !!! If this doesn't   RS0903
*          exist please check APAR OW55760/OW47836               RS0903
*          Require z/OS R4 and ARCHLVL=2                         RS0903
*       Support for new GDA fields (OS/390 R10)                  RS0903
*$707
*     Implement enhancements contributed by MK                   MK0803
*       Added routine AUTHLVL to display if ShowMvs is running   MK0803
*       authorized or not                                        MK0803
*     Implement enhancements contributed by Roland Schiradin
*       I'm reaching more and more the limits so I have to       RS0703
*          redesign the code. Not sure if my time allow such     RS0703
*          rewrote at all.                                       RS0703
*       PAGE-SYS display is limited added to my Todo list        RS0803
*       Avoid AbendS0D5 because no IXGLOGR active                RS0803
*       Display time in Section IPL-Statistics                   RS0803
*       CPMF display (OS 390 R10 and z/OS R2)                    RS0803
*       Added a '>' in front of section title. This allow a      RS0803
*          find '>' 1 when browsing the output under ISPF        RS0803
*          If you don't like it please change &TITLEPFX to ' '   RS0803
*       OW57714 changed IOSDSHID which caused duplicates         RS0803
*       For OS/390 R8 and below: I assume OW37043 is applied     RS0803
*       (no more bypass for this)                                RS0803
*       Support channel/status for Coupling facility display     RS0803
*          Notify from TA (z/OS R2)                              RS0803
*       Bug fix in the ICSF/MVS if not installed/enabled         RS0803
*       Support for F CATALOG,REPORT (auth) OS/390 R10           RS0803
*       Support for AUTHPGMLIST (USS) and some minor changes     RS0803
*       Minor changes in CSM (macro IVTDATSP)                    RS0703
*          DATSP_SLEN contains the length of all entries and     RS0703
*          not of single entry (doc is a bit confusing)          RS0703
*       Minor changes in ETEINFO                                 RS0703
*       SPQX (OS/390 R10) along with TCBWSA and TCBUKYSP         RS0703
*          Notify from Rob Scott (MXI) Thanks                    RS0703
*       Moved the HWM for CSA/ECSA/SQA/ESQA as a VMAP column     RS0603
*          because of Mark Zelden IPLINFO and it looks better    RS0603
*       Display the source of IPA settings                       RS0603
*       Display Subpool-Usage (VSMLIST)                          RS0303
*       Display Control Register                                 RS0203
*       Count PAGE-DS (total/used) and SYSEVENT FREEAUX to       RS0203
*         display number of free slots                           RS0203
*       Fixed abend S206 running on z/OS R2 with DIAG TRAPS      RS0203
*       Count number of CADS and total MAXCAD in the dataspace   RS0203
*       I assume OW42971 is applied on all systems (mac ANTRQST) RS0203
*       Jerry Morris retired                                     RS0103
*         All the best to him. I'll miss him                     RS0103
*       If you seen CSV003I with an address as a name you        RS0103
*         linked ShowMvs with NORENT. ShowMvs is RENT            RS0103
*       Droped OpenMvs-Status add LPAR and SYSNAME               RS0103
*       Garbage in the USS PID display                           RS0103
*       Merged 706 bug fixes                                     RS0103
*       New display for CSFDACC (z/OS R4 and ARCHLVL=2)          RS0103
*         Works on z/OS R2 but require OW51003 applied           RS0103
*       CSFDACC (HBB7704) cause RC8 (APAR OA01618)               RS0103
*$706
*     Implement enhancements contributed by Jerry Morris
*       Exit-Status (Dynamic Exits)                              JM1202
*     Implement enhancements contributed by Roland Schiradin
*       ICHPCNST require RACF FMID installed. IRRPCNST used      RS1202
*       New display for WLM Activity (IWMRQRY) OS/390 R4         RS1202
*         Include a display for enclaves                         RS1002
*       Fixed bug running ShowMvs under OS/390 R9 without        RS1202
*         SYSSTATE ARCHLVL=1. Changed BRAS R14,STCKCONV to       RS1202
*         BAS R14,STCKCONV at some location                      RS1202
*       Fixed bug BEGIN_PROC if far offset contains a value      RS1202
*         > 32767 now it's handled unsigned                      RS1202
*       Small bug at label WLM078 display the duration           RS1002
*         (tnx Jim Connelly)                                     RS1002
*       Unlimit display for connected RACF groups                RS1002
*       New LOGGER display (OS/390 R10) Version1                 RS1002
*          The display may work on older versions but not tested RS1002
*          You may lower AIF/TM limit and post the results       RS1002
*       Basic support to display SMS optical drives (Sugliani)   RS1002
*       Support MEMLIMIT (z/OS R2 and ARCHLVL=2)                 RS1002
*          Just two instruction but a bunch of code to do this   RS0902
*          without z/Architecture                                RS0902
*       Fixed bug in the SMS display which leave the SMS display RS1002
*          to early (Bruno Sugliani)                             RS0902
*       Changed ATTACH to ATTACHX as ATTACHX will be invoked     RS0902
*          on z/OS R4 if runing in z/Architectur                 RS0902
*       Support for MSU (PSLC pricing) display                   RS1002
*          SYSEVENT QVS (z/OS R1)                                RS1002
*       Support for SYSEVENT STGTEST (Virtual Storage Effects)   RS1002
*          Will be updated dynamicly in browse mode              RS1002
*       Changed SYNCH to SYNCHX as SYNCHX will be invoked        RS0902
*          on z/OS R4 if runing in z/Architectur                 RS0902
*       Avoid ASMA045W after base-less                           RS0902
*       Save some bytes in the literal pool R11/RB               RS0902
*       Tested with SYSSTATE ARCHLVL=1 (except STORAGE_SP230)    RS0902
*          The following macros generate NON-ARCHLVL=1 code      RS0902
*          on z/OS R4 if invoked with ARCHLVL=1                  RS0902
*          Not delivered as this require OS/390 R10+             RS0902
*              LOAD with option ERRRET (fixed in z/OS R5)        RS0902
*              FREEPOOL                                          RS0902
*              IARR2V                                            RS0902
*              IEFSSREQ                                          RS0902
*              ANTRQST                                           RS0902
*              IVTCSM                                            RS0902
*              PGSER                                             RS0902
*              IWMPQRY                                           RS0902
*              ATRQUERY                                          RS0902
*              SYSEVENT                                          RS0902
*              NUCLKUP                                           RS0902
*              EZASMI (TCP/IP)                                   RS0902
*              CEEENTRY (LE)                                     RS0902
*              STRING (Internal)                                 RS0902
*       Display SCOPE=COMMON for dataspaces (Rob Scott)          RS0902
*       New DIAG display (z/OS R3) (Jim Mulder)                  RS0902
*       Avoid LogRec entries for SMS IEFSSREQ                    RS0902
*          Redesign of this code to let SMS do the getmains      RS0902
*          and just freemain the returned area                   RS0902
*       Support new MDQ layout z/OS R3                           RS0902
*       Support for new SMS info (destinations)                  RS0902
*          Unfortunally I don't have such entries, so please     RS0902
*          contact me if you get a #SNAP display in ShowMvs      RS0902
*$705
*     Implement enhancements contributed by Jerry Morris
*       Display SMF Subparms                                     JM1101
*       Add display for ADD/OVER mode in dump options            JM1101
*       Add display for MPF numbers (specific/generic)           JM0302
*       Display the execution mode (31 or 64bit)                 JM0702
*     Implement enhancements contributed by Roland Schiradin
*       Support for DSAB above the line z/OS R2                  RS0802
*       Add minimal support for z/OS R4 (HBB7707)                RS0602
*       Add CPU model, newer CPUs (2064) support CSRSI and will  RS0602
*       not added to the interal table                           RS0602
*       Changes in the Run-Time display (tnx Mr. Tschikart)      RS0502
*       Use VLDSTSMS instead of VLDSMSS                          RS0502
*          VLDSYSDT provide support for 256 systems. Look at     RS0502
*          SYS1.MODGEN(IGDVLD) for more info                     RS0502
*       New display Common Storage Usage                         RS0502
*       Int. macro Validate supports now "base-less"             RS0402
*          79 of possible 110 sections works without a base      RS0402
*          register.                                             RS0402
*       Display dynamic SLIP settings (SLIP SET command)         RS0402
*       Wrong jump in CATALOG Display (tnx Marcel Schmidt)       RS0402
*       Wrong display for Timezone if CVTLDTO is zero            RS0402
*       Check MQCTT57I/MQCTT58I for spaces                       RS0302
*       Suport for sections without a base register              RS0302
*          50 of possible 110 sections works without a base      RS0302
*          register.                                             RS0302
*       Tested with SYSSTATE ARCHLVL=1 and IEABRC but not        RS0302
*          delivered. Reason: IEABRC is not included in all      RS0302
*          OS/390 releases. IBM didn't allow to distribute       RS0302
*          IEABRC in the SHOWMACS.                               RS0302
*       Delete R&I display as ShowMvs require R&I                RS0302
*       Change code to use R&I if possible                       RS0302
*       Display more info about RACF                             RS0302
*          Most code based on RACFINFO from Tobias Doerkens      RS0302
*          I'm not a RACF person. Tnx David Alcock pointing      RS0302
*          me to RACFINFO. This code will not work for ACF2/TSS  RS0302
*          Droped support for pre RACF 2.1 code                  RS0302
*       Abend0C4 in MDQ display if MDQ is empty                  RS0302
*$704
*     Implement enhancements contributed by Jerry Morris
*       Note in the DAE display changed                          RS0302
*     Implement enhancements contributed by Roland Schiradin
*       Subpool-No decimal for JPAQ, LOAD LIST, Active LPA       RS0302
*       Add Amode display for JPAQ,LOAD LIST, Active LPA         RS0302
*       Support for changed macros                               RS0302
*          Add flag for CDATTR3 (OS/390 R9)                      RS0302
*          Bug in BAL output for IHALPDE (z/OS R3)               RS0302
*            Apply ptf for APAR OW53691 or change IHALPDE        RS0302
*       Merge old code to support a TCP/IP display               RS0302
*          ShowMvs is a client in terms of TCP/IP. This mean     RS0302
*          it connects to a port (server) and send the complete  RS0302
*          output to this listener (server) running on any       RS0302
*          platform.                                             RS0302
*          I provide a C prog (same source for OS/390 and        RS0302
*          Windows) and a Rexx-source to retrieve all the data   RS0302
*          from ShowMvs. Sorry but this can't be used under CICS.RS0302
*          In order to tell ShowMvs you need to specify a PARM   RS0302
*          like TCP=148.251.1.2:8000. While 148.251.1.2 specify  RS0302
*          the ip-address of the listener (server) and 8000 the  RS0302
*          port assigned for this listener.                      RS0302
*          In case of problems to connect to the given server    RS0302
*          ShowMvs switch to default mode depending              RS0302
*          on the current environment                            RS0302
*       Couple display in IHAIPA is wrong (parenthesis)          RS0302
*          It's a an IBM problem but it's not a defect because   RS0302
*          Couple doesn't allow parenthesis even it works        RS0302
*          New IPADESC for IKJTSO and LICENSE (z/OS R3)          RS0302
*       Support new USS options starting with OS/390 R10         RS0302
*       Changed &NUMLINES from 24000 to 60000                    RS0302
*          ShowMvs require now about 7 MB to buffer the output   RS0302
*       Support for DFAZOS (IHADFA) starting with z/OS R3        RS0302
*          Redesign for this section is on the ToDo list         RS0302
*          HDZ11G0 flag added                                    RS0302
*       VTS flag for tape devices (tnx Bruce Black)              RS0302
*       On z/OS R3 use IHAETE1 instead of IHAETEX                RS0302
*       In few cases the thread display (USS) miss some threads  RS0302
*       (APAR OW53233)                                           RS0302
*$703
*     Implement enhancements contributed by Jerry Morris
*       Correct code to display Dump-Option GRSQ                 JM1101
*       Avoid loop in the hardware display (V702)                JM0701
*         Fixed bug and the loop                                 RS1101
*     Implement enhancements contributed by David Alcock
*       Display LE-Version. Make sure you add CEE.SCEEMAC        DA0701
*         on your SYSLIB and CEE.SCEELKED on your Binder-JCL     DA0701
*         If missed no problem just no display                   DA0701
*         During runtime the SCEERUN should be linklisted or     DA0701
*         added to STEPLIB/JOBLIB                                DA0701
*     Implement enhancements contributed by Roland Schiradin
*       IPL-Statistic moved to another place                     RS0202
*       No LE level for OS/390 R5 and lower                      RS0202
*       Remove garbage (unprintable) in the ISPF display         RS0102
*       DSNALI no longer work with MQS V5R2 (ABEND0C4)           RS0102
*       Add minimal support for z/OS R3 (HBB7706)                RS0102
*         ASMSART no longer exist                                RS0102
*         ShowMvs run fine with z/OS R3 MACLIB/MODGEN except     RS0102
*         IHARTSD (APAR OW51976)                                 RS0102
*       Abend0C1 in the CSRSI code (OW44581+OW46242)             RS0102
*       Fixed bug in CF display (ABEND0C4 if RSN x'154' and      RS1201
*         other minor changes in this area)                      RS1201
*       DAE display was wrong in case of DAE sharing             RS1201
*       Abend0C4 (Debug-code was delivered, sorry my fault)      RS1101
*       Add display for CVTLSO (Leap Seconds)                    RS1101
*       Use CVTLDTO instead of old CVTTZ for timezone stuff      RS1101
*         (CVTTZ technique is 10 years out of date)              RS1101
*       Capture UCB if PAREUCBP contains an UCB above            RS1101
*       Report GDA HWM values under R10 (tnx Jim Mulder)         RS1101
*       IPA display include now MTLSHARE                         RS1101
*       IHARTSD (HBB7705) cause RC8 (see APAR OW51976)           RS1101
*       Report class in the WLM display was wrong (tnx Tim D.)   RS1001
*       Add display for global DeServ-Exits (tnx Greg Price)     RS1001
*       Fixed abend S46D and S0C4 reporting the LE-Version       RS1001
*       Fixed a bug reporting the timestamps of the USS-Display  RS1001
*       Changed the ASID-display to hex in the USS display       RS1001
*       Fixed a bug reporting the real version of DB2 and MQS    RS0701
*         Add SDSNLOAD to STEPLIB/JOBLIB for this display        RS0701
*       Add minimal support for z/OS R2 (HBB7705)                RS0701
*       Use CVTOSLV3 for level check of z/OS R1                  RS0701
*       USS display: All timer display are UTC based             RS0701
*         Support for local time is not planed, because          RS0701
*         I have to call GMTIME which is difficult               RS0701
*       USS display: Add a IPC (Interprocess Cmmunication)       RS0701
*         display                                                RS0701
*       Some minor changes to suport the web display from        RS0701
*       FILE#509. Try it yourself.                               RS0701
*       Add a dummy macro CVT to detect wrong SYSLIB concat      RS0701
*       Catalog cache Report (F CATALOG,REPORT,CACHE) R1         RS0701
*          lost the alphabetic order, now same as F CATALOG      RS0701
*$702
*     Implement enhancements contributed by John Hamlet
*       Support for MQ Series V5R2 (product code)                JH0501
*     Implement enhancements contributed by Roland Schiradin
*       Program Call usage (ETEINFO) R1                          RS0601
*          use IHAETEX in case of ESAME                          RS0601
*       New IPADESC for UNIP (R10) ILMLIB+ILMMODE (z/OS R1)      RS0601
*       Memory Delete Queue (MDQINFO) OS/390 R3                  RS0601
*       Avoid some EREP entries (not all) for SMS-display        RS0601
*       Correct display for ARCHLVL (my fault)                   RS0601
*       ATS flag (auto-switchable) tnx Mr. Jaffe, IDAW flag      RS0601
*       USS Thread display if R7 and higher                      RS0601
*       IPL Statistics (R3)                                      RS0601
*       TCPIP version no longer require macro EZASMI (native     RS0601
*       mode using cblocks) but leave EZASMI inside the prog     RS0601
*       because it will be required if my NT-Display is finished RS0601
*       More usage of AHI/LHI                                    RS0601
*$701
*     Implement enhancements contributed by Roland Schiradin
*       Name/Token bug                                           RS0401
*       Display GRS Mode STAR if present                         RS0401
*       USS changes for R10/R9                                   RS0401
*       EMCS-Console Display                                     RS0301
*       IOSCMXA contains bad parameters RETCODE/RSNCODE          RS0301
*         if invoked by UCB220 as R13 is bad                     RS0301
*       **** ATTENTION ******                                    RS0301
*       ShowMvs support OS/390 and z/OS ONLY, use Show628        RS0301
*       and ShowM628 (maclib for this version) for older         RS0301
*       releases                                                 RS0301
*       **** ATTENTION ******                                    RS0301
*       Catalog display contains now ECS and Locked flag         RS0301
*       Dump-Display: Add support for 4digit devices             RS0201
*          Default is 3digit's only                              RS0201
*          Avoid EXCP for compressed and PS-E datasets           RS0201
*       IVTCSM REQUEST=DUMP_INFO can return null Dataspaces      RS0101
*         This cause a loop. Happen if VTAM/TCPIP is not up      RS0101
*       IPA display include now Architecure level                RS0101
*       SRM MIPS display was wrong (R6 corrupted by CSRSI code)  RS0101
*       Some bug fixes or typo error                             RS0101
*       The GDA-address was wrong, used CVTDFA instead of CVTGDA RS0101
*$627
*     Implement enhancements contributed by Roland Schiradin
*       IXCMG require a fixed area even of DONTSWAP              RS1200
*         This happen on very large systems only                 RS1200
*         (thank you Dean for helping in this area)              RS1200
*       Avoid abend0C4 on HSM-MWE (no dump so no idea)           RS1200
*       Update documentation, looking for help in TCPIP-stuff    RS1200
*       Increase the "getmain" storage in sub-routine WORKADDR   RS1200
*         This has to be done because IXCMG returns RC8 RSN24    RS1200
*         Checked a larger area for access then the returned areaRS1200
*         Also fixed an old bug reported since 625               RS1200
*       Fix a bug reporting the PSA+System values (REAL=0)       RS1200
*       Fix a bug reporting the SMS release on OS/390 R10        RS1100
*       Support for big Real-Storage introduced with Freeway     RS1100
*         (thank you Mr. NN for your support)                    RS1100
*       Support for the new STSI instruction via CSRSI service   RS1000
*       Add new entries (CPU table)                              RS1000
*       Add new switch for z/OS                                  RS1000
*       Some bug fixes or typo error                             RS1000
*$626
*     Implement enhancements contributed by Dietmar Ley
*       Enhancements to system level name/token pair
*       Fixed a bug in CF which avoid to display any info
*     Implement enhancements contributed by Jerry Morris
*       Fixed S0C4 in the XMS display                            JM1000
*       Some bug fixes after the latest big public release       JM0900
*       Support for additional WLM attributes
*       ICSF Display (Crypto)
*       Avoid to cut some SMF record nummbers
*       Fixed bad RRS SSI-Request 54 data
*       CHPID and Path display
*       System Availability Manager status
*       SLIP data
*       Changed CPU-Weightings Display for more CPUs
*       Support for high number of SMF-Type
*       Subsystem-Display hex
*       Some bug fixes
*     Implement enhancements contributed by Roland Schiradin
*       &NUMLINES 16000 is to low for very big systems (high number
*       XMS-connection and a lot of DASD)
*       Add minimal support for 64-Bit
*       Add new info for USS settings (OS/390 R8)
*       Add ADMF (Async Data Mover) status (Auth)
*       Add new info for USS files systems (OS/390 R9)
*       Add minimal support for OS/390 R10 (HBB7703)
*       SDM (System Data Mover) level
*       Cross Memory Usage Display (auth)
*       Dataspace/Hiperspace Display (auth)
*       AXINFO (auth)
*       Make ShowMvs 626 happy with older releases starting XA 2.2
*       HSM info (non Auth) and HSM active work (Auth)
*       Fixed bad WLM display
*       Communication Storage Manager Display (Auth)
*       Retrieve DS-Name from dynamic activated Linklist instead
*       of the CSVLLTA
*       Support for SMS vector table
*       Support for SVCUpdate
*       Expanded Catalog-Display
*       Avoid garbage characters on some Display
*       UNIX System Service (OMVS) Display
*       Display all OMVS users (STC,TSO,JOB) "USS users:"
*       ShowMvs itself can be assembled with HLASM R3 FLAG(PAGE0)
*       EDCMSGT C-runtime is now called IEDCMSGT
*       Save some bytes in the DYNAM Dsect
*       Add new product code for MQ Series V2
*       SMS info
*       TCPIP version and used stacks (>=V3.2, EZASMI-Macro required)
*       GRS resource (RNL-entries)
*       SMS attributes for LNK/LPA DSN
*       Display Path instead of DSNAME if HFS
*
*$624 Add minimal support for OS/390 R7 & R8
*     Add support for dynamic link-list in DOBLDL
*     ShowMVS now requires STRING R507
*$623 Add EXTRN OPSYN WXTRN for ILRASMVT in OS/390 V2R6
*     IHALLCB, IRAWMST and ISGGVT now supplied in MACLIB/MODGEN
*     Name of PVTMACS macro library changed to SHOWMVS.MACLIB
*     Calculate MIPS rating from SRM's SU/sec factor
*     Implement enhancements contributed by JWM:
*       Path Information
*       External Time Reference (ETR)
*     Implement enhancements contributed by DL:
*       Coupling Facility Data                                     $DL
*$622 Check for empty tables in IKJTSOnn
*     Display JESDSNID from JESCT extension                       @DMT
*     Show SMS volume status on current system                     @TR
*     Display TOKEN information for the current IODF              @JWM
*     Correct number of link-list extents
*     Retrieve ACF2 release from ACCVT (instead of ACF2RLSE)
*     Implement enhancements contributed by RS:
*       Run-time Library Services (RTLS)                           $RS
*       Resource Recovery Manager (RRS)                            $RS
*       Automatic Restart Manager (ARM)                            $RS
*$621 Major Changes
*       More support for OS/390 R4
*       Display IPL type: Cold, Quick, Warm
*       Change V=V Region display, support VRREGN=0
*       Detect the Relative-and-Immediate instruction set
*       Prevent CSV003I REQUESTED MODULE HASMPIT  NOT FOUND
*       List modules on the Dynamic LPA Queue
*$620 Major Changes
*       More support for OS/390 R3
*     Implement enhancements contributed by RS
*       Name/Token (System and Address-space)                      $RS
*       Added subpool defintion and attributes                     $RS
*       Cell Pools (Global and Local)                              $RS
*       Enhanced SVC-Table Display                                 $RS
*       Product Registration info in table format                  $RS
*       Added CDATTR3 for LPA/JPAQ/TCB                             $RS
*     Implement enhancements contributed by JWM
*       LNKLST set information (OS/390 R3)                        @JWM
*       Work Load Manager definitions                             @JWM
*$619 Major Changes
*       Initialization Parameter Area (OS/390 R2)
*       Product Enable/Disable (OS/390 R1)
*       Resource Manager List (IEAVTRML)
*       Display ranges in SMF NOTYPE, SSI codes, ROUTCDE
*     Implement enhancements contributed by RS                     @RS
*       Sysplex-Environment (auth)                                 @RS
*       Enhanced Command Prefix Table (CPFT)                       @RS
*       TCP/IP Version                                             @RS
*     Miscellaneous enhancements:
*       Check for dummy RDS (lost SMF data)
*       Fix ddname identification error in RTE display
*       Fix GETUNIT5 code to support UCBs above the 16M line
*       SSCT for primary sub-system doesn't have to be first
*$618 Major Changes
*       Move in-line DSECTs to the PVTMACS library
*       SHOWMVS must now be assembled with the PVTMACS library
*       Use IGX00GSF for authorization when available
*     Implement enhancements contributed by DL
*       SYS1.DUMP Support for dynamic allocation
*       WLM Workload Manager information (auth)
*       DYNEXIT Dynamic Exit Facility information (auth)
*       SYMBOLS Show static symbols
*     New Displays:
*       Run-time Environments (Cobol, PL/I, LE, etc)
*       Primary Sub-system
*       Date and time of last CLPA if IPL'd with CLPA=NO
*       Date, time and title of SYS1.DUMP data sets
*       TSO Exits and Tables
*       Device Allocation Defaults (ALLOCxx)
*       DAE Parameters (ADYSETxx)
*       Message Processing Facility (MPF)
*       Command Prefix Table (CPFT)
*     Miscellaneous enhancements:
*       Restructure the initialization code to improve robustness
*       Show dates in ISO-recommended format (yyyy-mm-dd)
*       Reactivate AUTH=ESR support for MVS/XA and REXX
*       VMDATA now shows correct CPU id (wrong addr in DIAG 218)
*       Version codes for more AMDAHL CPUs
*       Adjust size of IGDBCD if SSSA1RSN=5001
*       Issue DIAG 204 to obtain PR/SM Config data if RMF not available
*       Replace CDX scan with CSVQUERY macro
*       Make Virtual Storage Usage display dynamic
*       Improve CPU Usage display
*       Add new entries to CPU table: CMOS-3, Multiprise, P/390
*$617 Use protected work areas when authorized by the SDSF SVC
*     Recovery Exits and Timers (by TCB)
*     Minor changes in GRS and RACF displays
*     Display ACF2 version from ACF2RLSE module
*$616 Display CPC ND and CPC ID from HID
*     Check for MAN=NONE in SMF display
*     Correct VTAM version
*$615 Support for OS/390 R1 and DFSMS/MVS 1.3
*     New output modes: EDIT, PUTLINE and SHORT_PUTLINE
*     Default mode at TSO READY changed to SHORT_PUTLINE
*     Implement enhancements contributed by JWM:
*       SYSPLEX name, OpenMVS Status, ACF2, DB2+,
*       SMF exits, ETR status, Dump options, Console name
*       More TSO/E Tables, CDA date & time
*       Linkage Index (LX) Table (if authorized)
*     Implement enhancements suggested by MXT:
*       CPU model for 308X,4381,3090,5995,9021,9121,9221,9672
*       Service units per second (using RMCTADJC)
*       Remove % sign from LPAR weights (can exceed 100)
*       Status of the Automatic Cartridge Loader (ACL)
*       2-char names in TSO tables no longer missing from display
*       JES2 Initiators (refreshed when you press ENTER)
*     New Displays:
*       LLA parameters and dsnames (thanks to MSCH)
*       GRS Configuration
*       VM Data: Real CPU Id, User ID, CP level
*       GTF Status
*       I/O Appendage Table (IEAAPPxx)
*       TSO Attention Exits
*       Addresses of some local & global control blocks (CVT, ASCB etc)
*     Miscellaneous enhancements:
*       ICKDSF level (from ICKRELVL) and CICS level (from DFHCSVC)
*       Primary sub-system name and type
*       Time Zone (from CLOCKxx)
*       Use DS1LSTAR to determine status of SYS1.DUMP data set
*       Version Information from sub-systems that supply it
*       Enlarge YYMMDD field in preparation for 4-digit years
*       Message displayed on 3480 screen (e.g. K 020436)
*       Address-space type: Batch/TSO-batch/TSO-on-line
*       Initial LOGON command (from TSO/E LOGON screen)
*       CPU Time Used value refreshed when TSO user presses ENTER
*$514 Implement the JUL2DAYS date calculation routine.
*     SHOWMVS must now be compiled with the BATCH option.
*     Reduce size of code generated by the STATUS macro
*     Prevent S0C4 when ICHRIN03 header has invalid number of entries
*$513 Detect Top-secret's presence in pseudo RCVT
*     Minor changes to JOB card formatting routine
*     Locate DDname for JPAQ modules loaded from a PDSE
*     Split MIPS table into bipolar and CMOS using IBM numbers
*$512 Add support for MVS SP 5.1.0 and RACF 2.1.0
*     Add RACF GROUP on JOB card
*     Implement NEXTLLE routine, 1st load-list entry is now the oldest
*     Display IPLPARM & HSA data from SCCB
*     Expand BCD to support DFSMS/MVS 1.2 (HDZ11B0)
*     Inactivate ESPIE environment created by invoking pgm
*     Use EQUates from IEFZB4UV macro
*     Fix error in LPAR display when lowest CPU ID is zero
*$411 Master JCL (IEEMSJCL)
*     Hash-code name to access CDX
*     PR/SM config if ESA 4.3 with RMF active
*     Prevent S0C4 when accessing fetch-protected SSVT
*$410 Format JOB and EXEC statements
*     Storage Allocation Table (using TCTCORE and LDA)
*$409 SMS Configuration Data from BCD
*     PR/SM partition number (ESA 4.3)
*     I/O Configuration from CDA (ESA 4.1)
*     LOG Class, LOG limit, CSCB location
*     Flag MLPA/FLPA modules that make PLPA modules inaccessible.
*     Opening msg with pgm assembly information and exec auth status
*     Space allocated in common area (ESA 4.3)
*     Status of GFS Trace (ESA 3.1) and CSA/SQA Tracking (ESA 4.3)
*$408 Display REXX environments with Host cmd tbl & func packge dirs.
*     Fix LNK/LPA flagging in TIOT display
*     Convert DDname to data set name for JPAQ entries
*     Implement NEXTCDE routine, first JPAQ entry is now the oldest
*$407 Display REGION parameter and actual below/above sizes
*     Replace RB table with NEXTRB routine
*     Consider IEAVESVC as equivalent to IGCERROR (unused SVC)
*     Retrieve DDname associated with JPAQ entries from CDEX (ESA 4.3)
*$406 Move sub-routines to $FARRTNE LOCTR to save addressable space
*     Incorporate enhancements from CBT375.FILE453
*     - Memory Map
*     - Use old WMSTIPM field at offset X'9C' before ESA 313
*     - Get SYS1.DUMP information from RTCT/SDDSQ, remove catalog scan
*     - RACF data sets and tables
*     - add 25% to MIPS rating if it's an AMDAHL box
*$405 Add support for Dynamic UCBs (ESA V4), display RACF mod lvl
*$404 Sort TSU and JOB names, add support for 4-digit device numbers
*$403 may now be executed via the DFP LOADER (or the LOADGO command)
*$402 Issue LOCATE for *SMS* and *MCAT* volsers (dynamic APFTABLE)
*$401 Switch to APPL(ISR) if invoked with APPL(ISF)
*$400 Document Code with sample output, reorg paragraphs further
*     Reorg Code, remove SPLEVEL macro, set hard-copy lrecl to 121
*$392 Use OBR codes instead of MDR to determine 3380/3390 model type
*$391 Display the PPT (if authorized)
*$390 Implement SDSF SVC to get into MODE=SUP, if available
*$389 Add Dynamic APF support (ESA 4.3)
*$388 Reorg JES2 identification code
*$387 Fix XA compatibility bugs
*$386 Display 3390-9 device type
*$385 Support MVS/ESA 4.3, JES2 4.3, DFSMS/MVS
*$384 TSO PARMLIB data and authorization tables (IKJTSOxx)
*$383 Use NUCLKUP to find the address of IGCERROR
*$382 A few glitches corrected
*$381 TCAS data (only if APF-authorized)
*     System consoles, with status and route codes
*     RACF and TSO profiles (from ACEE, PSCB, UPT)
*     IDENTIFY removed, ATTACH now uses main entry point
*$380 Enhanced device status which is refreshed when you hit ENTER
*$373 Address space usage, active jobs, TSU, STC
*     Hardcopy gets title, gets converted to uppercase if PARM=CAPS
*$372 Display device class table and corresponding unit names
*     Display extent information for link-list data sets
*     Change register assignment and TRTPRINT build routine
*$371 Added a SNAP routine (and #SNAP macro) for debugging purposes
*     Moved Processor speed loop to sub-task
*$370 DISPLAY EXISTING SYS1.DUMP DATA SETS WITH FULL/EMPTY STATUS
*     DISPLAY RESOURCE MANAGER PARAMETERS (SRM)
*$364 FIXED RANDOM ABENDS (S0C4 & SA03) AND BRIF FAILURES
*$363 FIXED JES2 410 OFFSETS (WITH A LITTLE HELP FROM MY FRIEND SAM)
*$362 ESTIMATE PROCESSOR SPEED IN "MIPS", IMPROVE IPL DATE FORMAT
*$361 PREVENT S13E ABENDS
*
SHOWMVS  CSECT
SHOWMVS  RMODE ANY
         GBLC  &SYSSTATE_OSREL         OSREL                     RS0806
         SYSSTATE TEST                                           RS0806
         SYSSTATE ARCHLVL=2                                      RS0504
         COPY  IEABRC                                            RS0504
         SAVE  (14,12),,'SHOWMVS &REL '
         LARL  R12,LTORG_AREA      LTORG area                    RS0504
         USING (LTORG_AREA,LTORG_AREA_END),R12                   RS0504
STATIC_AREA DS 0H
         LAM   R0,R0,=F'0'             Clear all ARs             JH1109
         CPYA  R1,R0                   """""""""""""             JH1109
         CPYA  R2,R0                   """""""""""""             JH1109
         CPYA  R3,R0                   """""""""""""             JH1109
         CPYA  R4,R0                   """""""""""""             JH1109
         CPYA  R5,R0                   """""""""""""             JH1109
         CPYA  R6,R0                   """""""""""""             JH1109
         CPYA  R7,R0                   """""""""""""             JH1109
         CPYA  R8,R0                   """""""""""""             JH1109
         CPYA  R9,R0                   """""""""""""             JH1109
         CPYA  R10,R0                  """""""""""""             JH1109
         CPYA  R11,R0                  """""""""""""             JH1109
         CPYA  R12,R0                  """""""""""""             JH1109
         CPYA  R13,R0                  """""""""""""             JH1109
         CPYA  R14,R0                  """""""""""""             JH1109
         CPYA  R15,R0                  """""""""""""             JH1109
BASEADDR LTR   R1,R1                   SUB_TASK call ?
         JLM   SUB_TASK                yes, go there (minus)
*
         BRASL R10,INITIAL             INITIALIZE THE ENVIRONMENT
         USING DYNAM,R13
INIT_R10_ADDR EQU *
         TM    INIT_DONE,L'INIT_DONE   VALID ISPF/BATCH ENVIRONMENT?
         JZ    GOBACK                  NO, QUIT
         BRASL R14,BLANK1              BLANK LINE AT THE TOP
*
         BRASL R14,AUTHLVL             Running Authorized?       MK0803
         BRASL R14,SPLEVEL             MVS/SP & DFP LEVELS
         BRASL R14,IPLDATA             IPL DATE
         TM    SHORT_PUTLINE,L'SHORT_PUTLINE SHORT_PUTLINE mode ?
         JO    MAIN_BRIF               YES, SKIP THE REST
         BRASL R14,OPENMSG             Issue ISRZ001 message
         BRASL R14,PRODUCTS            TSO, SPF, DFDSS, HSM, RACF, VTAM
         BRASL R14,LEO                 LE options                RS1004
         BRASL R14,SORT                SORT ALIAS
         BRASL R14,ISVSOFT             ISV software              RS0705
         BRASL R14,USSOPT              UNIX System Service Opt.  RS0504
         BRASL R14,USSF                UNIX System Service Files RS0504
         BRASL R14,USSP                UNIX System Service PID   RS0504
         BRASL R14,CSF                 Cryptography info         JM0300
         BRASL R14,SMFDATA             SMF DATA
         BRASL R14,SMSDATA             SMS Base Config Data
         BRASL R14,HSM                 HSM Data                  RS0400
         BRASL R14,SDM                 System data mover (SDM)   RS0800
         BRASL R14,GRSDATA             GRS Configuration
         BRASL R14,HARDWARE            HARDWARE DATA
         BRASL R14,VMDATA              VM DATA
         BRASL R14,LPAR00              LPAR Configuration
         BRASL R14,SYSPLEX00           SYSPLEX Configuration     RS0605
         BRASL R14,MEMORY              VIRTUAL MEMORY MAP
         BRASL R14,VSM00               Virtual Storage Manager   RS0303
         BRASL R14,CSSTOR00            Common Storage Usage      RS0502
         BRASL R14,V64INF00            Common/shared Storage     RS0310
         BRASL R14,DSPLST00            DataSpace/HiperSpace      RS0700
         BRASL R14,V64USE00            64-bit usage/limits       RS1105
         BRASL R14,CSMLS00       Communications Storage Manager +RS0200
         BRASL R14,XCFDATA             XCF Configuration
         BRASL R14,PATH00              Path Data
         BRASL R14,XCFDS00             Couple Datasets           RS0504
         BRASL R14,CFD00               Coupling Facility Data      +DL
         BRASL R14,STR00               Coupling Structure Detail RS0107
         BRASL R14,ETR00               External Time Reference (ETR)
         BRASL R14,SRM00               SRM DATA
         BRASL R14,WLMD00              WLM defintion IWMDEXTR    RS0107
         BRASL R14,WLM00               WLM DATA                    $JWM
         BRASL R14,SMFD00              SMF data for each ASID    RS0906
         BRASL R14,LOGR00              System Logger             RS1002
         BRASL R14,RRS00               Resource Recovery Manager    +RS
         BRASL R14,ARM00               Automatic Restart Manager   +RS
         BRASL R14,TCPIP00             TCPIP stack info          RS0904
         BRASL R14,AXR00               SystemRexx                RS1008
         BRASL R14,OPENCAT             OPEN CATALOGS
         BRASL R14,PAGEDS              PAGE DATA SETS
         BRASL R14,DUMPDS              DUMP DATA SETS
         BRASL R14,DAE00               DAE Parameters (ADYSETxx)
         BRASL R14,SLIP00              SLIP data                  JWM
         BRASL R14,GTF00               GTF DATA
         BRASL R14,DIAG00              DIAG data                 RS0902
         BRASL R14,IPA000              Initialization Parameter Area
         BRASL R14,IPLST00             IPL Statistics
         BRASL R14,HZS00               Health Checker            DA0106
         BRASL R14,MSTJCL00            Master JCL (IEEMSJCL)       @411
         BRASL R14,SUBSYSTM            SUB-SYSTEMS
         BRASL R14,PRISUB00            Primary sub-system
         BRASL R14,TCAS00              TCAS data (APF)
         BRASL R14,IKJTSO00            TSO PARMLIB data (IKJTSOxx)
         BRASL R14,EXTAB00             TSO Exits and Tables
         BRASL R14,NUMNOT00            ACCT/SYNC creates this # Notices
         BRASL R14,RACFDATA            RACF DATA                   @406
         BRASL R14,UNICODE             Unicode Environment       RS0705
         BRASL R14,USERS               Active jobs, STC, TSU
         BRASL R14,JES2INIT            JES2 Initiators
         BRASL R14,JES2PAD             JES2 Dynamic Proclib      CR0605
         BRASL R14,JES00               JESx Display              DA0805
         BRASL R14,LNKLST00            LNKLSTXX
         BRASL R14,LPALST00            LPALSTXX
         BRASL R14,APFLIST             APF LIST
         BRASL R14,DYNXIT              Dynamic Exits
         BRASL R14,SYMBOLS             System static symbols
         BRASL R14,LLALIST             LLA LIST
         BRASL R14,ATTACH           <- attach sub-task
         BRASL R14,LPAQ                ACTIVE LPA
         BRASL R14,SVCTABLE            SVC TABLE
         BRASL R14,LXINFO              Linkage Index info      JWMJUN96
         BRASL R14,AXINFO              Auth index info           RS0700
         BRASL R14,XMSINFO             Cross Memory Connection   RS0700
         BRASL R14,MDQINFO             Memory Delete Queue       RS0601
         BRASL R14,ETEINFO             PC usage                  RS0601
         BRASL R14,PCINFO              PC usage ASN-LX reusage   RS0506
         BRASL R14,ENF00               ENF listener              RS0105
         BRASL R14,TQE00               Timer Queue Elements (DIE)RS0107
         BRASL R14,PPT00               Program Properties Table (APF)
         BRASL R14,APP00               Appendage ID table (IEAAPPxx)
         BRASL R14,RML00               Resource Manager List (IEAVTRML)
         BRASL R14,PRED00              Product Enable/Disable
         BRASL R14,DEVICES             DEVICE CLASS & UNIT NAMES       X
                                       ON-LINE UNITS
         BRASL R14,DEVSP00             Special devices           RS1108
         BRASL R14,ECMB00              Channel Measurement       RS0105
         BRASL R14,CDR00               Config Data Record        RS0705
         BRASL R14,PAV00               PAV data                  RS1105
         BRASL R14,CHPID00             CHPID & PATH              JM0799
         BRASL R14,CPMF00              CPMF Data                 RS0803
         BRASL R14,CONSOLES            CONSOLES
         BRASL R14,CNZ00               CNZQUERY                  RS0506
         BRASL R14,MTT00               Master Trace (SYSLOG)     RS0105
         BRASL R14,CPFTAB00            Command Prefix Table
         BRASL R14,NTTAB00             Name/Token (SYSTEM)         $RS
         BRASL R14,ALLOC00             Allocation defaults
         BRASL R14,ADDR100             Addresses of Globalcontrol blks
*
*        Data from user's address space
*
         BRASL R14,JOBSTEP             JOB/STEP data
         BRASL R14,RACF00              RACF Profile
         BRASL R14,PROF00              TSO profile
         BRASL R14,ISPF00              ISPF Environment
         BRASL R14,REXX00              REXX Environment
         BRASL R14,TIOT00              TIOT
         BRASL R14,TREE                TCB TREE
         BRASL R14,ATTNX00             Attention exits
         BRASL R14,JPAQ                JPAQ
         BRASL R14,LOADLIST            LOAD LISTS
         BRASL R14,CELLPLOC            Local Cell Pools
         BRASL R14,TIMERS              Recovery and Timers
         BRASL R14,NTTAB50             Name/Token (LOCAL)          $RS
         BRASL R14,LAPFT00             TSO local auth tables     SG1209
         BRASL R14,ADDR200             Addresses of Local control blks
         ICM   R0,B'1111',OLDPICA      did we issue ESPIE?
         JZ    MAIN_BRIF               no, jump
         ESPIE RESET,OLDPICA           Reset SPIE/ESPIE environment
MAIN_BRIF EQU  *
         BRASL R14,ATTACH           <- attach sub-task (again)
         BRASL R14,BRIF                START BROWSE MODE
GOBACK   EQU   *
         LM    R1,R2,LINE1PTR          start/length of line buffer
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    GOBACK7                 YES, JUMP
         LTR   R1,R1                   buffer allocated?
         JZ    GOBACK5                 NO, JUMP
         FREEMAIN RC,LV=(R2),A=(R1)    FREE DYNAMIC STORAGE
GOBACK5  DS    0H
         L     R0,=A(DYNAML)           LENGTH OF DYNAMIC STORAGE AREA
*        LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA
         LR    R1,R13                  ADDRESS OF DYNAMIC STORAGE AREA
         L     R13,4(,R13)
         FREEMAIN R,LV=(0),A=(1)       FREE DYNAMIC STORAGE
         RETURN (14,12),RC=00
*
*        Free working-storage when AUTH=ESR
*
GOBACK7  LTR   R1,R1                   buffer allocated?
         JZ    GOBACK7B                NO, JUMP
         LR    R0,R2                   length for FREEMAIN
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
GOBACK7B DS    0H
         L     R0,=A(DYNAML)           LENGTH OF DYNAMIC STORAGE AREA
*        LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA
         L     R1,UNPROTWK             unprotected work area
         FREEMAIN R,LV=(0),A=(1)
         LR    R1,R13                  ADDRESS OF DYNAMIC STORAGE AREA
         L     R13,4(,R13)
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
         SLR   R15,R15                 RC=00
         EXIT
*
*        CAUTION: If the previous instruction fails with an
*                 "Undefined Operation Code" message, check the SYSLIB
*                 concatenation: the SHOWMVS.MACLIB macros are missing.
*
         DS    0A(@STRING)
*
*        CAUTION: If the previous instruction fails with an
*                 "UNDEFINED SYMBOL" message, check the SYSLIB
*                 concatenation: the STRING macro is missing.
*
         TITLE 'SHOWMVS &REL - Define the CVT and DFA'
*---------------------------------------------------------------------*
*                                                                     *
*        Define the CVT (Comunication Vector Table)                   *
*                                                                     *
*        The CVTOSLVL flags are later tested to conditionally         *
*        invoke PPT scan and dynamic APF macros.                      *
*                                                                     *
*---------------------------------------------------------------------*
         CVT   PREFIX=YES,DSECT=YES,LIST=NO
CVT      EQU   CVTMAP                  IWMQUERY
*---------------------------------------------------------------------*
*                                                                     *
*        Define the DFA map (Data Facilities area).                   *
*                                                                     *
*        The DFP V3 version of this macro defines the                 *
*        DFASMS symbol.  The existence of DFASMS is                   *
*        tested in the DEVSTAT routine to generate                    *
*        SMS-dependent code and macros.                               *
*                                                                     *
*---------------------------------------------------------------------*
         IHADFA  DSECT=YES             DFP AREA
*---------------------------------------------------------------------*
*                                                                     *
*        Define the CEECAA map (Language Environment)                 *
*                                                                     *
*        The existence of CEECAA is tested in the LE code             *
*                                                                     *
*---------------------------------------------------------------------*
         CEECAA    ,                   Language Environment
SHOWMVS  CSECT                         ADDRESSABLE CODE
         TITLE 'SHOWMVS &REL - Internal Macro Instructions'
***********************************************************************
*                                                                     *
*        Internal Macro-instructions                                  *
*                                                                     *
***********************************************************************
         MACRO                                                    MACRO
&NAME    BEGIN_PROC &SAVE=YES,&KW=,&AUTH=NO                      RS0302
         GBLC  &ENDPROC                                           MACRO
&ENDPROC SETC  'PROC&SYSNDX'                                      MACRO
&NAME    BRASL R15,BEGIN_PROC          Go To Bootstrap
         DC    AL4(&ENDPROC)           address to far routine  RS0205
*        DC    AL4(&ENDPROC-BASEADDR)  demi-offset to far routine
&PCE     SETC  '&KW._PCE'
         AIF   ('&KW' EQ '').KW2
         AIF   (D'&PCE).KW2
&PCE     IKJKEYWD ,                                          &KW
         IKJNAME '&KW'                                       &KW
.KW2     ANOP                                                &KW
         DC    0D'0',C'&NAME',0H'0'
         AIF   ('&SAVE' EQ 'NO').NOSAVE
         AIF   ('&SAVE' EQ 'STDSAVE').STDSAVE
         BASR  R15,0                   Next instruction          RS0302
&ENDPROC AHI   R15,PEND&SYSNDX-&ENDPROC  + End for Recovery      RS0302
         STM   R14,R15,END_PROC        RETURN/RETRY ADDRESSES     MACRO
         AIF   ('&AUTH' NE 'YES').AUTH4                      &AUTH
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         BNOR  R14                     no, exit
.AUTH4   ANOP                                                &KW
         AIF   ('&KW' EQ '').KW4                             &KW
         BRASL R14,SECTION_SELECTION
         DC    AL2(&KW._PCE+1-IKJPARMD)
.KW4     ANOP                                                &KW
&ENDPROC SETC  'PEND&SYSNDX'           FOR END_PROC MACRO         MACRO
         MEXIT
.NOSAVE  ANOP
&ENDPROC DS    0H
         MEXIT
.STDSAVE ANOP
&ENDPROC STM   R14,R12,12(R13)         save registers
.MEND    MEND                                                     MACRO
         MACRO                                                    MACRO
&NAME    END_PROC ,                                               MACRO
         GBLC  &ENDPROC                                           MACRO
         AIF   (T'&NAME EQ 'O').END2                              MACRO
&NAME    EQU   *
.END2    ANOP                                                     MACRO
&ENDPROC L     R14,END_PROC            RETURN ADDR
         BR    R14
         DROPTEMP                      RELEASE TEMP BASE REGS
         MEND                                                     MACRO
*---------------------------------------------------------------------*
         MACRO                                                    MACRO
&NAME    DROPTEMP ,                                               MACRO
         USING PSA,R0,R1,R2,R3,R4,R5,R6,R7,R14,R15           RS0902
         DROP  R1,R2,R3,R4,R5,R6,R7,R14,R15 RELEASE TEMP BASE REGS
         MEND                                                     MACRO
*---------------------------------------------------------------------*
         MACRO                                                    macro
&NAME    XCALL &EP,&OPRNDS,&ERRET=,&VL=1,&LINKAGE=BALR            macro
         GBLB  &IHBSWA                                            macro
&IHBSWA  SETB  (&VL EQ 1)              VL=1                       macro
&NAME    LA    R1,TENWORDS             parm list
         IHBOPLST ,&OPRNDS,MF=(E,(1))                             macro
         AIF   ('&LINKAGE' EQ 'SYNCH').SYNCH                      macro
         AIF   ('&EP'(1,1) EQ '(').BALRREG                        macro
         L     R15,&EP                 EP address
         BALR  R14,R15                 invoke routine
         AGO   .ERRET                                             macro
.BALRREG LR    R15,&EP(1)              EP address
         BALR  R14,R15                 invoke routine
         AGO   .ERRET                                             macro
.SYNCH   LARL  R2,SYNCH_&EP                                      RS0504
         SYNCHX (2),RESTORE=YES        invoke with TCB key       RS1002
.ERRET   AIF   (T'&ERRET EQ 'O').MEND                             macro
         LTR   R15,R15                 Any error?
         JNZ   &ERRET                  yes, jump
.MEND    MEND                                                     macro
         MACRO                                                    macro
&NAME    ICALL &EP,&OPRNDS,&ERRET=,&VL=1,&LINKAGE=BALR            macro
         GBLB  &IHBSWA                                            macro
&IHBSWA  SETB  (&VL EQ 1)              VL=1                       macro
&NAME    LA    R1,TENWORDS             parm list
         IHBOPLST ,&OPRNDS,MF=(E,(1))                             macro
&ICALLL1  SETC  'IHB&SYSNDX'                             RS0712   MACRO
&ICALLL1.A EQU  *                                                RS0712
         TM    0(R1),X'80'             Last parm?                RS0712
         JO    &ICALLL1.B              leave                     RS0712
         OI    0(R1),X'80'             set hight order bit       RS0712
         AHI   R1,4                    next parm                 RS0712
         J     &ICALLL1.A              leave                     RS0712
&ICALLL1.B EQU  *                                                RS0712
         LA    R1,TENWORDS             restore R1 to parm        RS0712
         AIF   ('&LINKAGE' EQ 'SYNCH').SYNCH                      macro
         AIF   ('&EP'(1,1) EQ '(').BALRREG                        macro
         L     R15,&EP                 EP address
         BALR  R14,R15                 invoke routine
         AGO   .ERRET                                             macro
.BALRREG LR    R15,&EP(1)              EP address
         BALR  R14,R15                 invoke routine
         AGO   .ERRET                                             macro
.SYNCH   LARL  R2,SYNCH_&EP                                      RS0504
         SYNCHX (2),RESTORE=YES        invoke with TCB key       RS1002
.ERRET   AIF   (T'&ERRET EQ 'O').MEND                             macro
         LTR   R15,R15                 Any error?
         JNZ   &ERRET                  yes, jump
.MEND    MEND                                                     macro
*---------------------------------------------------------------------*
         MACRO                                                    MACRO
&NAME    UCB_NAME &LEFT,&JES=NO                                   MACRO
&LAB     SETC  'IHB&SYSNDX'                                       MACRO
         AIF   ('&LEFT' EQ 'LEFT').LEFT                           MACRO
&NAME    MVI   UCB_NAME,C' '           first char is blank
         MVC   UCB_NAME+1(3),UCBNAME   3-character name
         UCBDEVN DEVN=UCB_NAME         get UCB name (ESA V4 only)
         MEXIT                                                    MACRO
.LEFT    ANOP                                                     MACRO
&NAME    MVC   UCB_NAME(3),UCBNAME     3-character name
         MVI   UCB_NAME+3,C' '         4th char is blank
         AIF   ('&JES' NE 'YES').LEFT4                            MACRO
         CLC   =C'JES ',UCB_NAME       JES console?
         JE    &LAB.X                  yes, jump
.LEFT4   L     R1,CVTPTR(,0)           point at CVT
         UCBDEVN DEVN=UCB_NAME         get UCB name (ESA only)
         CLI   UCB_NAME,C' '           3-char name?
         JNE   &LAB.X                  no, jump
         MVC   UCB_NAME(3),UCB_NAME+1  left justify
         MVI   UCB_NAME+3,C' '         4th char is blank
&LAB.X   EQU   *
.MEND    MEND                                                     MACRO
*---------------------------------------------------------------------*
         MACRO                                                    MACRO
&NAME   #SNAP  &ADDR=(1),&LENGTH=(0)                              MACRO
&NAME    STM   R14,R3,SNAPREGS         save registers             MACRO
         IHBINNRA &ADDR,&LENGTH                                   MACRO
         BRASL R14,SNAP00           <- SNAP STORAGE               MACRO
         LM    R14,R3,SNAPREGS         restore registers          MACRO
.MEND    MEND                                                     MACRO
         MACRO                                                   RS0207
&NAME   #SNAP64 &ADDR=(1),&LENGTH=(0)                             MACRO
&NAME    STMG  R14,R3,SNAPREGS         save registers             MACRO
         IHBINNRR &ADDR,&LENGTH                                   MACRO
         BRASL R14,SNAP64           <- SNAP STORAGE               MACRO
         LMG   R14,R3,SNAPREGS         restore registers          MACRO
.MEND    MEND                                                     MACRO
*
*---------------------------------------------------------------------*
         MACRO
&NAME   #STATUS &BYTE,&BIT,&MSG
         AIF   ('&BYTE'(1,3) EQ 'CVT' AND NOT D'&BIT).MEND
&NAME    TM    &BYTE,&BIT              check flag
         BRASL R14,$$STATUS            check CC, move, bump ptr
&N       SETA  K'&MSG-3
         DC    AL1(&N),C&MSG,0H'0'     Length,text,alignment
.MEND    MEND
*---------------------------------------------------------------------*
         MACRO
&NAME    VALIDATE &ADDR,&ERRET=                                  RS0402
&NAME    MVI   RCVYSAVE,X'C4'          set flag for RECOVERY routine
         BASR  R14,0                                             RS0402
         AHI   R14,&ERRET-*                                      RS0402
         CLI   &ADDR,0                 CHECK ADDRESS (get S0C4)
         MVI   RCVYSAVE,0              reset flag
         MEND
         MACRO
        #SWITCH &NAME
         GBLA  &BSWITCHES
&BSWITCHES SETA &BSWITCHES+1
&O       SETA  (&BSWITCHES-1)/8        OFFSET
&L       SETA  &BSWITCHES-&O*8         REMAINDER
&STR(1)  SETA  128,64,32,16,8,4,2,1
&L       SETA  &STR(&L)                MASK
&NAME    EQU   SWITCHES+&O,&L
         MEND
*
         MACRO
&NAME    TABLE &FN
&I       SETA  2
&J       SETA  &FN
&NAME2   SETC  '&NAME'
.LOOP    AIF   (T'&SYSLIST(&I) EQ 'O').NEXT
         AIF   ('&SYSLIST(&I)'(1,1) EQ '''').HH
&K       SETA  K'&SYSLIST(&I)
&NAME2   DC    AL1(&J,&K),C'&SYSLIST(&I)'
.HH      AIF   ('&SYSLIST(&I)'(1,1) NE '''').NEXT
&K       SETA  K'&SYSLIST(&I)-2
&NAME2   DC    AL1(&J,&K),C&SYSLIST(&I)
.NEXT    ANOP
&NAME2   SETC  ''
&I       SETA  &I+1
&J       SETA  &J+1
         AIF   (&I LE N'&SYSLIST).LOOP
         MEND
         MACRO
&NAME    CHARTAB &ID,&FN
         AIF   ('&ID'(1,1) EQ '''').GG
&J       SETA  K'&FN
         AIF   ('&FN'(1,1) EQ '''').AA
         DC    C'&ID',AL1(&J),C'&FN'
.AA      AIF   ('&FN'(1,1) NE '''').NEXT
&J       SETA  K'&FN-2
         DC    C'&ID',AL1(&J),C&FN
         AIF   ('&ID'(1,1) NE '''').NEXT
.GG      ANOP
&J       SETA  K'&FN
         AIF   ('&FN'(1,1) EQ '''').HH
         DC    C&ID,AL1(&J),C'&FN'
.HH      AIF   ('&FN'(1,1) NE '''').NEXT
&J       SETA  K'&FN-2
         DC    C&ID,AL1(&J),C&FN
.NEXT    ANOP
         MEND
*  Convert Bytes to Mega/Giga/Tera/Peta
*---------------------------------------------------------------------*
         MACRO
         B2MGTP &BYTES,&SIZE,&MGTP
&LAB     SETC  'IHB&SYSNDX'                                       MACRO
         AIF   (T'&BYTES NE 'O').AA
         MNOTE 8,'--- Bytes missing '
         AGO   .ZZ
.AA      AIF   (T'&SIZE NE 'O').AB
         MNOTE 8,'--- Size missing '
         AGO   .ZZ
.AB      AIF   (T'&MGTP NE 'O').AC
         MNOTE 8,'--- Mega/Giga/Tera/Peta switch missing'
         AGO   .ZZ
.AC      LG    R1,&BYTES               FD8 Bytes
         SRAG  R0,R1,10                size in KB (devide 1024)
         LGR   R1,R0
         SRAG  R0,R1,10                size in MB (devide 1024)
         LGR   R1,R0
         MVI   &MGTP,C'M'              Mega/Giga/Tera/Peta
         CLG   R1,=FD'1024'
         JL    &LAB.X
         SRAG  R0,R1,10                size in GB (devide 1024)
         LGR   R1,R0
         MVI   &MGTP,C'G'              Mega/Giga/Tera/Peta
         CLG   R1,=FD'1024'
         JL    &LAB.X
         SRAG  R0,R1,10                size in TB (devide 1024)
         LGR   R1,R0
         MVI   &MGTP,C'T'              Mega/Giga/Tera/Peta
         CLG   R1,=FD'1024'
         JL    &LAB.X
         SRAG  R0,R1,10                size in PB (devide 1024)
         LGR   R1,R0
         MVI   &MGTP,C'P'              Mega/Giga/Tera/Peta
         CLG   R1,=FD'1024'
         JL    &LAB.X
         SRAG  R0,R1,10                size in EB (devide 1024)
         LGR   R1,R0
         MVI   &MGTP,C'E'              Mega/Giga/Tera/Peta
&LAB.X   DS    0H
         CVDG  R0,&SIZE                convert
.ZZ      MEND
*---------------------------------------------------------------------*
         TITLE 'SHOWMVS &REL - Initialise The Environment'
***********************************************************************
*                                                                     *
*        INITIALISATION                                               *
*                                                                     *
*          1. Allocate Key=8 work area                                *
*          2. invoke INIT600 to determine environment                 *
*          3. check for APF authorization                             *
*          4. check for ESR authorization                             *
*          5. re-invoke myself                                        *
*              IF AUTH=ESR and not alone in TCB                       *
*              OR running in ISPF under wrong application             *
*          6. If AUTH=ESR, allocate KEY=4,SP=230 work area            *
*                                                                     *
***********************************************************************
INITIAL  BEGIN_PROC SAVE=NO
         BRAS  R6,INIT_R12_ADDR                                  RS1102
         DC    A(INIT_R12_ADDR)                                  RS1102
INIT_R12_ADDR EQU *
         L     R6,0(R6,0)                                        RS1102
         USING INIT_R12_ADDR,R6   Addressebility                 RS1102
*
*        Allocate small work area
*
         L     R0,=A(DYNAML)           LENGTH OF DYNAMIC STORAGE AREA
         GETMAIN R,LV=(0)              get small work area
         ST    R13,4(,R1)              chain save area
         ST    R1,8(,R13)              chain save area
         LM    R13,R1,8(R13)           chain save area
         USING DYNAM,R13
         LA    R14,DYNAM+72            clear storage
         LA    R15,DYNAML-512          clear storage
         SLR   R3,R3                   clear storage
         MVCL  R14,R2                  clear storage
         ST    R1,PARMADDR             SAVE PARM/CPPL ADDRESS
         ST    R13,UNPROTWK            save addr
         ST    R10,RDRTNR14            save return address
*                                                                JH1303
* Issue setdubdefault syscall to dub at the process level        JH1303
*                                                                JH1303
         L     R15,16              CVT - common vector table     JH1303
         L     R15,544(R15)        CSRTABLE                      JH1303
         L     R15,24(R15)         Open Edition CSR slot         JH1303
         L     R15,BPX1SDD(R15)    Address of the service        JH1303
         LHI   R1,DUBPROCESS       DUBPROCESS request            JH1303
         ST    R1,WKCELL1          Place in parameter area       JH1303
         CALL  (15),               SetDubDefault                 JH1303X
               (WKCELL1,           Input: DUBPROCESS             JH1303X
               WKCELL3,                Return_value 0 or -1      JH1303X
               LRETCODE,               Returncode                JH1303X
               LRSNCODE),              Resoncode                 JH1303X
               MF=(E,WORK256+100)                                JH1303
*                                                                JH1303
* Check setdubdefault results (not yet done)                     JH1303
*                                                                JH1303
         L     R8,CVTPTR(,0)           CVT ADDRESS
         SH    R8,=Y(CVTMAP-CVTFIX)    SUBTRACT PREFIX LENGTH
         USING CVTFIX,R8               PERMANENT ASSIGNMENT
         L     R9,PSATOLD-PSA(,0)      my TCB
         USING TCB,R9
*
         LARL  R2,INIT600
         SYNCHX (2),RESTORE=YES        Initialise working-storageRS0504
*
*        If I re-invoked myself in INIT600, exit now.
*
         LTR   R15,R15                 did I re-invoke myself ?
         JZ    INIT120                 no, continue
         L     R0,=A(DYNAML)           LENGTH OF DYNAMIC STORAGE AREA
         LR    R1,R13                  ADDR OF WORK AREA
         L     R13,4(,R13)             caller's save area
         FREEMAIN R,LV=(0),A=(1)       FREE SMALL WORK AREA
         LM    R2,R12,28(R13)          RESTORE CALLER'S R2-R12
         EXIT                          goback
*
*        Check for APF authorization
*
INIT120  TESTAUTH FCTN=1               CHECK APF STATUS
         LTR   R4,R15                  OK?
         JZ    INIT180                 yes, jump
*
*        Issue SVC 109 to switch to supervisor mode
*
         LH    R15,IGX00NNN            get extended SVC number
         LTR   R15,R15                 Auth ESR Available ?
         JM    INIT180                 NO, JUMP
*
         SLR   R0,R0                   OPTION CODE (ISFSVC)
         LA    R1,1                    OPTION CODE
SVC109   SVC   109                     TYPE-3 ESR
         LTR   R4,R15                  OK?
         JNZ   INIT180                 NO, JUMP
*
*  IGX00GSF/ISFSVC error codes (in R15)
*
*        BADOPT     4                  BAD OPTION PASSED TO SVC IN R1
*        NOTPRB     8                  CALLER NOT RUNNING UNDER A PRB
*        NOTSDS     12                 UNKNOWN CALLER
*        NOTALIB    16                 CALLER NOT FROM APF LIB
*        BADMOD     20                 MODULE PREFIX INVALID
*        BADSTAE    24                 CALLER ISSUED (E)STAE
*        BADXCTL    28                 CALLER ENTERED FROM XCTL
*        NOTREN     32                 CALLER NOT REENTRANT
*        BADADDR    36                 SVC NOT IN CALLER'S STORAGE
*
*        NOSVC109   109                IGX00GSF/ISFSVC not available
*
INIT140  BASR  R1,0
         LARL  R10,INIT_R10_ADDR
         LARL  R12,LTORG_AREA
         L     R9,PSATOLD-PSA(,0)      reload TCB address
         MODESET KEYADDR=TCBPKF,WORKREG=2 KEY=1 -> KEY=8 (ESR only)
         ICM   R0,B'1111',TCBTME       Active timer ?
         JNZ   INIT_NOT_ALONE          not alone, ABEND
         L     R5,TCBRBP               my PRB
         USING RBBASIC,R5
         TM    RBSTAB2,RBTCBNXT        oldest RB (end of chain) ?
         JNO   INIT_NOT_ALONE          not alone, ABEND
*
*        AUTH=ESR: allocate work area in KEY=4
*
INIT160  LR    R7,R13                  save addr of temp work-area
         L     R13,4(,R13)             caller's save area
         L     R0,=A(DYNAML)           LENGTH OF DYNAMIC STORAGE AREA
         SLR   R1,R1                   LOC=BELOW
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0
         ST    R1,TCBUSER              save addr into TCBUSER
         MODESET KEYREG=(2)            switch back to TCB key
         ST    R1,8(,R13)              chain save area
         L     R2,24(,R13)             caller's R1
         MODESET EXTKEY=KEY4           KEY=4
         LR    R3,R1                   save R1                   RS0203
         LR    R14,R1                  clear storage             RS0203
         L     R15,=A(DYNAML)          LENGTH OF DYNAMIC STORAGE AREA
         SLR   R1,R1                   clear storage             RS0203
         SLR   R0,R0                   clear storage             RS0203
         MVCL  R14,R0                  clear storage             RS0203
         LR    R1,R3                   reload R1                 RS0203
         ST    R13,4(,R1)              chain save area
         LR    R13,R1                  work area
*
         MVC   OLDPKF,TCBPKF           save TCB key for MODESET
         MVI   PROTKEY,KEY4*16         own protection key
         OI    AUTHORIZED,L'AUTHORIZED REMEMBER I'M AUTHORIZED
         OI    AUTH_ESR,L'AUTH_ESR     AUTH=ESR
         ST    R2,PARMADDR             SAVE PARM/CPPL ADDRESS
         ST    R7,UNPROTWK             addr of unprotected save area
         L     R0,=A(DYNAML)           LENGTH OF DYNAMIC STORAGE AREA
         ST    R0,UNPROTWK+4           store length
         BRASL R14,EXECKEY0            execute next instruction in key0
         LH    R0,IGX00NNN-DYNAM(,R7)  get extended SVC number
         STH   R0,IGX00NNN             pass it to open msg
*
         L     R0,=A(LINESL)           LENGTH OF LINES BUFFER
         ST    R0,LINE1PTR+4           save length
         LA    R1,1                    LOC=ANY
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
         ST    R1,LINE1PTR             save addr
         LARL  R2,INIT600
         SYNCHX (2),STATE=SUPV,KEYADDR=PROTKEY,AMODE=31,               X
               RESTORE=YES,MF=(E,SYNCHL)                         RS1002
*
*        Inactivate ESTAI exits
*
         ICM   R5,B'1111',TCBSTAB      First SCB
         JZ    INIT200                 no SCB, exit
         USING SCB,R5
*--loop
INIT168  BRASL R14,EXECKEY0            execute next instruction in key0
         OI    SCBFLGS3,SCBDUMMY       THIS SCB WILL NOT BE SCHEDULED
         ICM   R5,B'1111',SCBCHAIN     next SCB
         JNZ   INIT168                 loop through SCB chain
*--endloop
         J     INIT200                 continue
         DROP  R5                      SCB
*
INIT_NOT_ALONE LA R15,TCB              TCB address
         ABEND 1112,REASON=(15)  not alone in this task
*---------------------------------------------------------------------*
*                                                                     *
*        Allocate work areas in KEY=TCB                               *
*                                                                     *
*        This code is executed in two situations:                     *
*                                                                     *
*          1. SHOWMVS is APF authorized                               *
*          2. SHOWMVS is *not* authorized                             *
*                                                                     *
*---------------------------------------------------------------------*
INIT180  BASR  R1,0
         LARL  R10,INIT_R10_ADDR
         LARL  R12,LTORG_AREA
         L     R0,=A(LINESL)           LENGTH OF LINES BUFFER
         ST    R0,LINE1PTR+4           save length
         GETMAIN RU,LV=(0),BNDRY=PAGE
         ST    R1,LINE1PTR             save addr
         STC   R4,AUTH_RC              Authorization return code
         ST    R13,UNPROTWK            save addr
         LTR   R4,R4                   Authorized?
         JNZ   INIT190                 No, goback (MODE=PROB,KEY=TCB)
         OI    AUTHORIZED,L'AUTHORIZED REMEMBER I'M AUTHORIZED
         MODESET MODE=SUP              Switch to MODE=SUP
         L     R1,PSATOLD-PSA(,0)      MY TCB
         IC    R1,TCBPKF-TCB(,R1)      PSW KEY
         STC   R1,OLDPKF               save TCB key for MODESET
         STC   R1,PROTKEY              own protection key
         J     INIT200
*
*        IDENTIFY main entry point if invoked by the LOADER
*
INIT190  CLI   OWN_NAME,C'0'           IDENTIFY required?
         JL    INIT200                 no, jump
         L     R1,ISF$SHOW+4           own entry point
         IDENTIFY EPLOC=OWN_NAME,ENTRY=(R1)
*---------------------------------------------------------------------*
*                                                                     *
*        INITIALIZE THE ENVIRONMENT                                   *
*                                                                     *
*---------------------------------------------------------------------*
INIT200  EQU   *
*
*        BUILD A TRANSLATE TABLE FOR NON-PRINTABLE CHARACTERS
*
INIT210  MVI   TRTPRINT,C' '           PRINTABLE CHARACTERS
         MVC   TRTPRINT+1(255),TRTPRINT
         MVC   BLANKS,TRTPRINT         a bunch of blanks
         SLR   R15,R15
         SLR   R0,R0
         BRASL R1,INIT212
         DC    X'4A,7,5A,8,6A,6,7A,6'  Special characters
         DC    X'81,9,91,9,A2,8'       Lowercase
         DC    X'C1,9,D1,9,E2,8'       Uppercase
         DC    X'F0,A'                 Digits
         DC    X'00,0'                 end of table
*LOOP
INIT212  IC    R15,0(,R1)              FIRST BYTE
         IC    R0,1(,R1)               ITERATIONS
*--LOOP
INIT213  STC   R15,TRTPRINT(R15)       STORE X'4A' INTO TRTPRINT+X'4A'
         LA    R15,1(,R15)             BUMP INDEX
         JCT   R0,INIT213              NEXT CHARACTER
*--ENDLOOP
         LA    R1,2(,R1)               NEXT ENTRY IN TABLE
         CLI   0(R1),0                 END OF TABLE?
         JNE   INIT212                 NEXT STRING
*ENDLOOP
         MVC   TRTDOTS,TRTPRINT        all spaces
         MVI   TRTDOTS+C' ',C'.'       change space to dot
         TR    TRTDOTS,TRTDOTS         change spaces to dots
         MVI   TRTDOTS+C' ',C' '       space remains space
*
         L     R10,LINE1PTR            First line
         USING LINE,R10
*
INIT220  EQU   *
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         JZ    INIT230                 not TSO+ISPF, exit
         XCALL ISPLINK,                ISPF interface                  X
               (=C'ISREDIT',           ISPF FUNCTION                   X
               =F'5',                  length                          X
               =C'MACRO'),             Key-words                       X
               LINKAGE=SYNCH
INIT230  EQU   *
         OC    JCLPARM,BLANKS          CONVERT TO UPPERCASE
*
*        If PARM=CAPS, convert to uppercase
*
         CLC   =C'CAPS',JCLPARM        is it PARM=CAPS?
         JNE   INIT240                 no, jump
         OI    PARMCAPS,L'PARMCAPS     turn flag on
         OC    TRTPRINT+X'80'(48),BLANKS yes, convert to uppercase
*
*        Check for a //SHOWMVS DD
*
INIT240  LARL  R2,MY_DDN
         DEVTYPE (2),WKCELL1           CHECK FOR "SHOWMVS" DD
         LTR   R15,R15                 DD allocated?
         JNZ   INIT242                 no, jump
         OI    HARDCOPY,L'HARDCOPY     yes, remember it's hardcopy
*---------------------------------------------------------------------*
*                                                                     *
*        Non-TSO mode                                                 *
*                                                                     *
*---------------------------------------------------------------------*
INIT242  TM    NON_TSO,L'NON_TSO       MODE=NON_TSO ?
         JNO   INIT250                 no, exit
         CLC   =C'TCP=',JCLPARM        is it PARM=TCP=?          RS0302
         JE    INIT252                 yes, jump                 RS0302
         CLC   =C'SMF=',JCLPARM        is it PARM=SMF=?          RS0904
         JE    INIT254SMF              yes, jump                 RS0904
         TM    HARDCOPY,L'HARDCOPY     //SHOWMVS allocated already?
         JO    INIT249                 yes, skip DYNALLOC
*
*        Allocate //SHOWMVS DD SYSOUT=*
*
         LA    R1,TENWORDS+4           WORK AREA ADDRESS
         XC    0(20,R1),0(R1)          CLEAR STORAGE
         MVI   0(R1),20                LENGTH
         MVI   1(R1),1                 VERB=ALLOC
         LARL  R0,S99TXTPT             TEXT UNIT POINTERS
*        LA    R0,S99TXTPT             TEXT UNIT POINTERS
         ST    R0,8(,R1)               S99TUPTR
         ST    R1,TENWORDS             S99RBPTR
         OI    TENWORDS,X'80'          S99RBPTR
         LA    R1,TENWORDS             S99RBPTR
         DYNALLOC                      ALLOC SYSOUT=*,TERM=TS
         LTR   R15,R15                 DYNALLOC WENT OK?
         JNZ   INIT299                 NO, QUIT
         OI    HARDCOPY,L'HARDCOPY     yes, remember it's hardcopy
INIT249  EQU   *
         J     INIT260                 print title line
*
*        DYNALLOC stuff for //SHOWMVS DD
*
         CNOP  0,4
S99TXTPT DC    A(S99T1,S99T18+VL)      TEXT UNIT POINTERS
S99T1    DC    Y(1,1,L'MY_DDN)         DDN=SHOWMVS
MY_DDN   DC    CL8'SHOWMVS '           DDN=SHOWMVS
S99T18   DC    X'0018,0000'            SYSOUT=*
*---------------------------------------------------------------------*
*                                                                     *
*        TSO mode                                                     *
*                                                                     *
*---------------------------------------------------------------------*
INIT250  EQU   *
         CLC   =C'TCP=',JCLPARM        is it PARM=TCP=?          RS0302
         JE    INIT252                 yes, jump                 RS0302
         CLC   =C'SMF=',JCLPARM        is it PARM=SMF=?          RS0904
         JE    INIT254SMF              yes, jump                 RS0904
         CLC   =C'PUTLINE ',JCLPARM    PARM=PUTLINE?
         JNE   INIT251                 NO, EXIT                  RS0302
         OI    PUTLINE,L'PUTLINE       PUTLINE=ON
         NI    HARDCOPY,255-L'HARDCOPY HARDCOPY=OFF
         J     INIT260                 write title line
*
*        Determine output mode in the TSO/ISPF environment
*
INIT251  TM    HARDCOPY,L'HARDCOPY     hard-copy mode?
         JO    INIT260                 yes, write title
         TM    TSO_ON_LINE,L'TSO_ON_LINE
         JZ    INIT255                 not TSO+ISPF, exit
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         JZ    INIT255                 not TSO+ISPF, exit
         CLC   =C'SHORT_PUTLINE',JCLPARM is it PARM=SHORT_PUTLINE ?
         JE    INIT255                 yes, jump
         CLC   =C'EDIT',JCLPARM        is it PARM=EDIT?
         JE    INIT251E                yes, jump
         OI    BRIF_MODE,L'BRIF_MODE   NO, USE BRIF
         J     INIT290                 exit
INIT251E OI    EDIF_MODE,L'EDIF_MODE   NO, USE EDIF
         J     INIT290                 exit
INIT252  OI    TCP_MODE,L'TCP_MODE     use TCPIP                 RS0302
         LA    R2,JCLPARM                                        RS0302
         LA    R2,4(R2)                jump around TCP=          RS0302
         SR    R0,R0                   clear R0                  RS0302
*Loop                                                            RS0302
INIT252_1 LR   R3,R2                                             RS0302
*  Loop                                                          RS0302
INIT252_2 CLI  0(R2),C':'              is this a port?           RS0302
         JE    INIT252_3                 yes                     RS0302
         CLI   0(R2),C'.'              dot?                      RS0302
         JE    INIT252_3                 yes                     RS0302
         LA    R2,1(,R2)               +1                        RS0302
         J     INIT252_2               loop                      RS0302
*  Endloop                                                       RS0302
INIT252_3 LR   R4,R2                   copy                      RS0302
         SR    R4,R3                   minus start               RS0302
         LTR   R4,R4                   is it null ?              RS0302
         JZ    INIT254_1                 yes, error              RS0302
         BCTR  R4,0                    -1 now the length         RS0302
*INIT252_X PACK  WKCELL1,0(,R3)                                  RS0302
         EX    R4,=S(X'270'(R15),312(R13),0(R3))                 RS1108
         CVB   R1,WKCELL1              convert to binary         RS0302
         CHI   R1,256                  result > 256 ?            RS0302
         JNL   INIT254_1                 yes, error              RS0302
         SLL   R0,8                                              RS0302
         OR    R0,R1                                             RS0302
         CLI   0(R2),C':'              Next a port ?             RS0302
         JE    INIT252_4                 yes                     RS0302
         LA    R2,1(,R2)               +1                        RS0302
         J     INIT252_1                                         RS0302
*Endloop                                                         RS0302
INIT252_4 DS   0H                      port (:)                  RS0302
         LA    R2,1(,R2)               +1                        RS0302
         LR    R3,R2                                             RS0302
*Loop                                                            RS0302
INIT252_5 CLI  0(R2),C' '              end of parms              RS0302
         JE    INIT252_6                                         RS0302
         LA    R2,1(,R2)               +1                        RS0302
         J     INIT252_5                                         RS0302
*Endloop                                                         RS0302
INIT252_6 SR   R2,R3                                             RS0302
         LTR   R2,R2                   is it null ?              RS0302
         JZ    INIT254_1                 yes error               RS0302
         BCTR  R2,0                    -1                        RS0302
*INIT252_X PACK  WKCELL1,0(,R3)                                  RS0302
         EX    R4,=S(X'270'(R15),312(R13),0(R3))                 RS1108
         CVB   R1,WKCELL1                                        RS0302
INIT252_7 SR   R2,R3                                             RS0302
         STCM  R0,B'1111',IP_ADDRESS                             RS0302
         STCM  R1,B'0011',IP_PORT_NO                             RS0302
         BRASL R14,WORKADDR            32K work area             RS0302
         LR    R3,R1                                             RS0302
         USING IP_BUFFER,R3                                      RS0302
         MVC   WKCELL1(4),=F'1'                                  RS0302
         EZASMI TYPE=GETIBMOPT,RETCODE=LRETCODE,ERRNO=LRSNCODE,        X
               BUF=(R3),COMMAND=WKCELL1                          RS0302
         CLC   LRETCODE,=X'FFFFFFFF'    -1 indicate error        RS0302
         JE    INIT254_2                                         RS0302
         L     R4,IP_NUM_IMAGES                                  RS0302
         LTR   R4,R4                    check zero               RS0310
         JE    INIT254_2                                         RS0310
*loop                                                            RS0302
INIT252_9 DS   0H                                                RS0302
         TM    IP_STATUS,BIT0        Is this TCP-stack active??  RS0302
         JZ    INIT252_10                                        RS0302
         MVC   IP_NAME,IP_TCPIPNAME  remember 1. act IP-stack    RS0302
         J     INIT253                                           RS0302
INIT252_10 DS   0H                                               RS0302
         LA    R3,IP_BUF_ENTRY(R3)                               RS0302
         JCT   R4,INIT252_9                                      RS0302
*endloop                                                         RS0302
         J     INIT254_2                                         RS0302
INIT253  EQU   *                                                 RS0302
         MVC   IP_FAMILY,=H'2'     INET!!                        RS0302
         MVC   MY_NAME,OWN_NAME                                  RS0302
         EZASMI TYPE=INITAPI,     ISSUE INITAPI MACRO                  X
               SUBTASK=OWN_NAME,  SPECIFY SUBTASK IDENTIFIER           X
               MAXSOC==H'10',     SPECIFY MAXIMUM NUMBER OF SOCKETS    X
               MAXSNO=MAXSNO,     (HIGHEST SOCKET NUMBER ASSIGNED)     X
               APITYPE==H'2',     (SPECIFY APITYPE FIELD)              X
               IDENT=IDENT_IP,    NAME local                           X
               RETCODE=LRETCODE,ERRNO=LRSNCODE                   RS0302
         CLC   LRETCODE,=X'FFFFFFFF'    -1 indicate error        RS0302
         JE    INIT254_2                                         RS0302
         EZASMI TYPE=SOCKET,AF='INET',SOCTYPE='STREAM',                X
               RETCODE=LRETCODE,ERRNO=LRSNCODE                   RS0302
         CLC   LRETCODE,=X'FFFFFFFF'    -1 indicate error        RS0302
         JE    INIT254_2                                         RS0302
         L     R7,LRETCODE             Socket descriptor         RS0302
         STH   R7,SOC_DESC                                       RS0302
         EZASMI TYPE=CONNECT,S=SOC_DESC,NAME=IP_NAME_VAR,              X
               RETCODE=LRETCODE,ERRNO=LRSNCODE                   RS0302
         CLC   LRETCODE,=X'FFFFFFFF'    -1 indicate error        RS0302
         JE    INIT254_2                                         RS0302
         EZASMI TYPE=GETPEERNAME,S=SOC_DESC,NAME=IP_NAME_VAR,          X
               RETCODE=LRETCODE,ERRNO=LRSNCODE                   RS0302
         CLC   LRETCODE,=X'FFFFFFFF'    -1 indicate error        RS0302
         JE    INIT254_2                                         RS0302
         J     INIT290                 exit                      RS0302
INIT254_1 EQU   *                                                RS0302
         STRING64 'Can not interpret the given TCP= parm',             X
               INTO=LINE                                         RS0302
         BRASL R14,SPACE1              Single Space              RS0302
         STRING64 ' Parm was: ',(JCLPARM,,T),                          X
               'and should be something like TCP=10.1.1.1:8000',       X
               INTO=LINE                                         RS0302
         BRASL R14,SPACE1              Single Space              RS0302
         MVC   JCLPARM,BLANKS                                    RS0302
         NI    TCP_MODE,255-L'TCP_MODE TCPMODE=OFF               RS0302
         J     INIT230                 exit                      RS0302
*                                                                RS0302
*        Switch to default Mode because of some problems to      RS0302
*        establish a TCPIP-Connection                            RS0302
*                                                                RS0302
INIT254_2 EQU   *                                                RS0302
         STRING64 'TCP/IP Returncode: ',                               X
               (LRETCODE,,X),' with RSN (ErrNo): ',                    X
               (LRSNCODE,,X),' No Connection established',             X
               (JCLPARM),                                        RS0302X
               INTO=LINE                                         RS0302
         BRASL R14,SPACE1              Single Space              RS0302
         MVC   JCLPARM,BLANKS                                    RS0302
         NI    TCP_MODE,255-L'TCP_MODE TCPMODE=OFF               RS0302
         J     INIT230                 exit                      RS0302
*                                                                RS0904
*        Set SMF mode                                            RS0904
*                                                                RS0904
INIT254SMF  EQU   *                                              RS0904
         LA    R2,JCLPARM                                        RS0904
         LA    R2,4(R2)                jump around SMF=          RS0904
         PACK  WKCELL1,0(3,R2)                                   RS0904
         CVB   R1,WKCELL1                                        RS0904
         STC   R1,SMF_TYPE                               RS0904
         ST    R1,SMF_TYPE_1                             RS0904
         LOAD  EP=BPX1SMF              USS  callable service     RS0601
         ST    R0,BPX_MOD              SAVE EP ADDRESS           RS0601
         MVC   SMF_SUBTYPE,=F'0'     Set SMF record subtype
         L     R15,BPX_MOD
         CALL (15),                  smf_record                        X
               (SMF_TYPE_1,          SMF record type                   X
               SMF_SUBTYPE,          SMF record subtype                X
               =F'0',                SMF record length                 X
               =F'0',                SMF record address set to zero    X
               WKCELL1,              Return value: 0 or -1             X
               LRETCODE,             Return code                       X
               LRSNCODE),            Reason code                       X
               VL,MF=(E,WORK256+100) ------------------------------
         DELETE EP=BPX1SMF
         ICM   R15,B'1111',WKCELL1   Test return value
         JNZ   INIT254SMF_99         Not recording or error, quit
         OI    SMF_MODE,L'SMF_MODE    SMF mode on                RS0904
         J     INIT290                                           RS0904
INIT254SMF_99 EQU   *                                            RS0904
         STRING64 ' Parm: ',(JCLPARM,,T),                              X
               ' ignored. BPX1SMF',                                    X
               ' Returncode=',(LRETCODE,,X),                     RS0903X
               ' Reasoncode=',(LRSNCODE,,X),                     RS0903X
               INTO=LINE                                         RS0903
         BRASL R14,SPACE1              Single Space              RS0904
         MVC   JCLPARM,BLANKS                                    RS0904
         J     INIT230                                           RS0904
*
*        Set SHORT_PUTLINE mode
*
INIT255  EQU   *
         OI    PUTLINE,L'PUTLINE       PUTLINE mode
         OI    SHORT_PUTLINE,L'SHORT_PUTLINE SHORT_PUTLINE mode
         TM    TSO_ON_LINE,L'TSO_ON_LINE
         JZ    INIT260                 no, do not clear the screen
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         JO    INIT260                 yes, do not clear the screen
         STFSMODE ON,INITIAL=YES       CLEAR SCREEN
         STFSMODE OFF                  CLEAR SCREEN
*
*        Print Title line
*
INIT260  TIME  DEC
         STM   R0,R1,WKCELL1           HHMMSSHH,00YYDDDF
         STRING64 (TITLE,TITLE_L),INTO=LINE
         STRING64 (WKCELL1+4,P,YYYY-MM-DD),INTO=(LINE+60,20),          X
               2X,(WKCELL1,1,X),'.',(WKCELL1+1,1,X)
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1          <== First line is title
*
*        Retrieve the address of IEFEB4UV in LPA
*
INIT290  BRASL R1,INIT291              br around CL8
         DC    C'IEFEB4UV'             device type scan rtne
INIT291  EQU   *
         BRASL R14,LPASEARCH           GET ADDRESS OF IEFEB4UV ROUTINE
         ST    R15,IEFEB4UV            keep the address
*
*        establish the recovery environment
*
INIT295  EQU   *
         L     R2,=A(RECOVERY)         RECOVERY ROUTINE
         ESTAE (R2),                   RECOVERY ROUTINE                X
               CT,                     CREATE                          X
               PARAM=DYNAM,            PARAM FOR RECOVERY ROUTINE      X
               MF=(E,ESTAEL)
*
*        Inactivate any ESPIE environment created earlier
*        which could interfere with the trapping of my
*        own addressing and protection exceptions.
*
         ICM   R0,B'1111',TCBPIE       any ESPIE created earlier?
         JZ    ESPIE12                 no, exit
         TESTAUTH KEY=YES,STATE=YES,RBLEVEL=1    Check PSW key
         LTR   R15,R15                 running in mode=sup or key 0-7 ?
         JZ    ESPIE12                 yes, exit
         ESPIE SET,MF=(E,ESPIE11L)     Override existing PICA
         ST    R1,OLDPICA              Save its address for later
         J     ESPIE12
ESPIE11L ESPIE SET,ESPIE11X,PARAM=X'DEADBEEF',MF=L
ESPIE11X LR    R0,R1                   save addr of EPIE
         ICM   R1,B'1111',ESPIE11Z-ESPIE11X(R15)   get completion code
         ABEND (1)                     ABEND0C0
ESPIE11Z DC    X'80,0C0000'            S0C0 completion code
ESPIE12  EQU   *
*
         OI    INIT_DONE,L'INIT_DONE   initialization complete
*
INIT299  LARL  R14,INIT_R10_ADDR       load return address
         BR    R14
***********************************************************************
*                                                                     *
*        Initialize working storage.                                  *
*                                                                     *
*        This code is invoked twice, once to initialise the           *
*        unprotected work area and once again, when AUTH=ESR,         *
*        to initialise the protected work area.                       *
*                                                                     *
***********************************************************************
INIT600  EQU   *
         MVC   JSTCB,TCBJSTCB          THE JOB STEP TCB
         MVC   OLDPKF,TCBPKF           source key
         L     R1,CVTQLPAQ             first CDE on ALPAQ
         MVC   ALPACDE1,0(R1)          first CDE on ALPAQ
*
*        Move parm or command to JCLPARM
*
         ICM   R1,B'1111',PARMADDR     caller's R1
         JZ    INIT630                 zero, jump
         BRASL R14,EXECKEY0            execute next instr in key=0
         L     R2,0(,R1)               PARM/CPPL
         BRASL R14,EXECKEY0            execute next instr in key=0
         LH    R3,0(,R2)               length of parm or command
         LA    R4,2(,R2)               first byte of parm
         LTR   R2,R2                   INVOKED AS A PROGRAM?
         JM    INIT623M                YES, JUMP
*
         BRASL R14,EXECKEY0            execute next instr in key=0
         LH    R4,2(,R2)               LENGTH OF COMMAND NAME
         LA    R0,4(,R4)               OFFSET TO MESSSAGE TEXT
         SLR   R3,R0                   LENGTH OF MESSAGE TEXT
         LA    R4,4(R4,R2)             START OF MESSAGE TEXT
*
INIT623M MVC   JCLPARM,BLANKS          initialize parm area
         LA    R0,L'JCLPARM            length of "to" area
         CLR   R3,R0                   adjust length
         JNH   *+6                     adjust length
         LR    R3,R0                   adjust length
         IC    R15,OLDPKF              source key
         MVCK  JCLPARM(R3),0(R4),R15   Move data to working-storage
*
*        Check that the current PRB points at my entry point
*        and save my own name for ATTACH.
*
INIT630  L     R2,TCBRBP               Point to INIT600 PRB
         USING RBBASIC,R2
         L     R2,RBLINK               Point to SHOWMVS PRB
         TM    RBCDFLGS,RBCDSYNC       invoked via SYNCH?
         JO    INIT635                 yes, jump
         SLR   R3,R3
         ICM   R3,B'0111',RBCDE1       my own CDE or LPDE
         USING CDENTRY,R3
         L     R0,ISF$SHOW+4           A(SHOWMVS+VL)
*        LA    R1,ISF$SHOW-SHOWMVS     offset to other entry point
         ST    R12,WKCELL1             location ISF$SHOW         RS0405
         OI    WKCELL1,X'80'           turn on AMODE(31)         RS0405
         L     R1,WKCELL1                                        RS0405
         CL    R0,CDENTPT              current PRB pointing at me?
         JE    INIT634                 yes, jump
         CL    R1,CDENTPT              current PRB pointing at me?
         JNE   INIT637                 no, jump
INIT634  TM    CDATTR,CDMIN            minor entry point?
         JNO   INIT634S                no, jump
         L     R3,CDXLMJP              YES, POINT TO MAJOR CDE/LPDE
 ORG INIT634 <<<<<<<<
INIT634S ST    R3,OWN_CDE              my own CDE or LPDE
         TM    CDATTR,CDREN            am I re-entrant?
         JNO   INIT637                 no, jump
         MVC   OWN_NAME,CDNAME         my own name
         J     INIT640                 exit
*
*        Invoked via SYNCH
*
INIT635  L     R1,RBGRS15              addr of my entry point (R15)
*
*        If I've been invoked via SYNCH or BALR,
*        IDENTIFY my entry point for ATTACH.
*
INIT637  LA    R1,0(,R1)               get rid of AMODE bit
         STRING64 ((R1),,X),INTO=OWN_NAME convert addr to EBCDIC
*---------------------------------------------------------------------*
*                                                                     *
*        Determine address-space type                                 *
*                                                                     *
*---------------------------------------------------------------------*
INIT640  MVC   ZSCREENW,=A(L'LINE)     default ISPF screen size
         L     R2,TCBJSCB              my JSCB
         USING IEZJSCB,R2
         ICM   R3,B'1111',JSCBPSCB     TSO PSCB
         JNZ   INIT645L                TSO, jump
INIT645N OI    NON_TSO,L'NON_TSO
         J     INIT680                 no TSO, no ISPF
INIT645L ST    R3,PSCB@                save PSCB address
         MVC   UPT@,PSCBUPT-PSCB(R3)   save ECT address
         L     R3,PSAAOLD-PSA(,0)      point at ASCB
         USING ASCB,R3
         L     R4,ASCBASXB             my ASXB
         L     R4,ASXBLWA-ASXB(,R4)    Logon Work Area
         ST    R4,LWA@                 save LWA address
         USING LWA,R4
         MVC   ECT@,LWAPECT            SAVE FOR PUTLINE
         ICM   R14,B'1111',ASCBTSB     check TSB address
         JNZ   INIT645T                TSO on-line, jump
INIT645B OI    TSO_BATCH,L'TSO_BATCH
         J     INIT645X
INIT645T OI    TSO_ON_LINE,L'TSO_ON_LINE
         GTSIZE ,                      get terminal size
         ST    R1,ZSCREENW             save screen width
         MVC   TSB@,ASCBTSB            save TSB address
INIT645X EQU   *
         DROP  R3,R4                   ASCB,LWA
*---------------------------------------------------------------------*
*                                                                     *
*        Retrieve ISPF variables                                      *
*                                                                     *
*---------------------------------------------------------------------*
         WXTRN ISPLNK,ISPQRY           make them optional
INIT650  ICM   R0,B'1111',=A(ISPQRY)   ISPLINK linked with us?
         JNZ   INIT652                 yes, do not load it
         LOAD  EP=ISPQRY,ERRET=INIT680   LOAD ISPQRY
INIT652  ST    R0,ISPQRY@              STORE THE ADDRESS
         LARL  R2,SYNCH_ISPQRY
         SYNCHX (2),RESTORE=YES        Invoke ISPQRY             RS1002
         LTR   R15,R15                 running under ISPF?
         JNZ   INIT680                 no, exit
         OI    ISPF_AVAILABLE,L'ISPF_AVAILABLE
*
         ICM   R0,B'1111',=A(ISPLNK)   ISPLINK linked with us?
         JNZ   INIT653                 yes, do not load it
         LOAD  EP=ISPLINK              LOAD ISPLINK
INIT653  ST    R0,ISPLINK              save address
         LARL  R2,INIT660
         SYNCHX (2),RESTORE=YES                                  RS1002
         CHI   R15,20                  ISPF really available?
         JL    INIT670                 yes, continue
         NI    ISPF_AVAILABLE,255-L'ISPF_AVAILABLE
         J     INIT680                 no, exit
*
*        This code always executes in key=8
*
INIT660  L     R13,UNPROTWK            Point at unprotected area
         ST    R0,ISPLINK              store A(ISPLINK)
         XCALL ISPLINK,                ISPF interface                  X
               (=C'CONTROL',           ISPF FUNCTION                   X
               =C'ERRORS',             Key-word                        X
               =C'RETURN'),            Key-word                        X
               ERRET=INIT669           invoked via REXX
*
         LA    R14,L'ZENVIR            LENGTH
         LA    R15,L'ZPDFREL           LENGTH
         LA    R0,L'ZAPPLID            LENGTH
         LA    R1,L'ZSCREENW           LENGTH
         STM   R14,R1,WORK256          LENGTH ARRAY
         XCALL ISPLINK,                                                X
               (=C'VCOPY',             ISPF SERVICE                    X
               VARLIST1,               Variable list                   X
               WORK256,                LENGTH ARRAY                    X
               ISPFVARS,               AREA ADDRESS                    X
               =C'MOVE')               MOVE MODE
         LA    R1,ISPFVARS             data returned by ISPF
INIT669  EXIT                          goback to SYNCH and INIT670
VARLIST1 DC    C'(ZENVIR ZPDFREL ZAPPLID ZSCREENW)',0H'0'
*
INIT670  LA    R14,L'ISPFVARS          length
         IC    R15,OLDPKF              source key
         MVCK  ISPFVARS(R14),0(R1),R15 Move data to protected storage
*
INIT672  PACK  WKCELL3,ZSCREENW        convert to binary
         CVB   R0,WKCELL3              convert to binary
         CL    R0,=A(L'LINE)           too long?
         JL    *+8                     no, jump
         L     R0,=A(L'LINE)           yes, use line length
         ST    R0,ZSCREENW             save binary value
*
INIT674  MVC   NEWAPPL,=C'ISR '        convert to binary
         CLC   =C'ISF ',ZAPPLID        invoked under SDSF?
         JE    INIT679                 yes, JUMP
         CLC   =C'EPIC',ZAPPLID        invoked under EPIC/MVS?
         JE    INIT679                 yes, JUMP
         CLC   =C'SAR ',ZAPPLID        invoked under SAR?
         JE    INIT679                 yes, JUMP
         MVC   NEWAPPL,ZAPPLID         no, keep current APPLID
INIT679  EQU   *
*
*        Locate IGX00GSF module via the Type-3 SVC router table
*
INIT680  EQU   *
         TM    AUTHORIZED,L'AUTHORIZED
         JO    INIT690                 YES, EXIT
         MVI   IGX00NNN,X'FF'          IGX00NNN not available
         L     R1,CVTABEND             SECONDARY CVT
         L     R5,SCVTSVCT-SCVTSECT(,R1) START OF SVC TABLE
         USING SVCENTRY,R5
         L     R5,SVCENTRY+109*8       ADDR OF T3-ESR TABLE
         L     R1,SVCESRMX             get max ESR number
         LA    R0,1(,R1)               R0 = number of entries
         SLR   R1,R1                   init ctr
         LA    R5,SVCENTRY+8           SKIP HEADER
*loop
INIT681L L     R2,SVCEP                entry point
         CLC   =C'IGX00GSF',4(R2)      is this my own IGX00GSF ?
         JE    INIT685                 yes, exit loop
         LA    R5,SVCENTRY+8           NEXT SVC
         LA    R1,1(,R1)               count entries
         JCT   R0,INIT681L             try next SVC entry
*endloop
*
*        If IGX00GSF was not found, check that the SDSF SVC (IGX00011)
*        is in MLPA or PLPA
*
INIT684  EQU   *
         BRASL  R1,INIT684_1           br around CL8
         DC    C'IGX00011'             ISFSVC
INIT684_1 EQU   *
         BRASL R14,LPASEARCH           GET ADDRESS OF IGX00011 ROUTINE
         LTR   R1,R1                   CDE/LPDE located ?
         JZ    INIT690                 NO, EXIT
         LA    R1,11                   IGX00011
INIT685  EQU   *
         STH   R1,IGX00NNN             IGX00NNN available
*
*        Check that I'm alone in this TCB
*
INIT686  EQU   *
         L     R9,PSATOLD-PSA(,0)      my TCB
         USING TCB,R9
         L     R5,TCBRBP               my PRB (SYNCH)
         USING RBBASIC,R5
         L     R5,RBLINK               SHOWMVS PRB
         SLR   R6,R6
         ICM   R6,B'0111',RBCDE1       my CDE
         USING CDENTRY,R6
         TM    CDATTR2,CDSYSLIB        LOADED FROM AUTHORIZED LIBRARY ?
         JZ    INIT690                 no, exit
         ICM   R0,B'1111',TCBTME       Active timer ?
         JNZ   INIT687                 not alone, jump
         TM    RBSTAB2,RBTCBNXT        oldest RB (end of chain) ?
         JO    INIT690                 yes, jump
*
INIT687  EQU   *
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         JO    INIT689                 YES, ATTACH
INIT688  EQU   *
         L     R1,PARMADDR             caller's PARM or CPPL
         ATTACHX EPLOC=CDNAME,          my own name                    X
               SZERO=NO,               do not share SP0                X
               ECB=SUB_ECB1,           end of task ECB                 X
               SF=(E,ATTACHL)                                    RS1002
         ST    R1,SUB_ECB1+4           save TCB address
         WAIT  ECB=SUB_ECB1            wait for sub-task completion
         DETACH SUB_ECB1+4             detach the sub-task
         LA    R15,12                  RC=12
         EXIT
*
*        ISPF
*
INIT689  EQU   *
         STRING64 'CMD(',(OWN_NAME,,T),1X,(JCLPARM,,T),') MODE(FSCR)', X
               INTO=WORK256
         CLC   NEWAPPL,ZAPPLID         APPLID=ISR?
         JE    INIT695                 yes, jump
         STRING64 (WORK256,,T),' NEWAPPL(',(NEWAPPL,,T),')',           X
               INTO=WORK256
         J     INIT695                 yes, jump
*
*        re-invoke myself
*
INIT690  EQU   *
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         JZ    INIT699                 not TSO+ISPF, exit
         CLC   NEWAPPL,ZAPPLID         APPLID=ISR?
         JE    INIT699                 yes, jump
         STRING64 'PGM(',(OWN_NAME,,T),') PARM(',(JCLPARM,,T),         X
               ') NEWAPPL(',(NEWAPPL,,T),')',INTO=WORK256
INIT695  EQU   *
         XCALL ISPLINK,                                                X
               (=C'SELECT',            ISPF SERVICE                    X
               =A(L'WORK256),          length                          X
               WORK256)                text
         LTR   R2,R15                  OK?
         JZ    INIT698                 yes, jump
         STRING64 'SELECT Service failed at label INIT185, R15=',      X
               ((R2),,L),INTO=CSVDWORK
         TPUT  CSVDWORK,(R15)          issue error message
         LHI   R15,256
         TPUT  WORK256,(R15)           issue error message
*        TPUT  WORK256,256             issue error message
INIT698  EQU   *
         LA    R15,200(,R2)            auth failure code
         EXIT                          goback
INIT699  SLR   R15,R15                 RC=0
         EXIT                          goback
*---------------------------------------------------------------------*
*                                                                     *
*        Start key-word definitions for TSO Parse                     *
*                                                                     *
*---------------------------------------------------------------------*
PCLCSECT IKJPARM
PCLCSECT RMODE ANY
CAPS_PCE IKJKEYWD
         IKJNAME 'CAPS'
EDIT_PCE IKJKEYWD
         IKJNAME 'EDIT'
PUTLINE_PCE IKJKEYWD
         IKJNAME 'PUTLINE'
*
         TITLE 'SHOWMVS &REL - Authorization State'              MK0803
*---------------------------------------------------------------------*
*                                                                     *
*Just a quick check to indicate if we are running authorized          *
*                                                                     *
*---------------------------------------------------------------------*
AUTHLVL  BEGIN_PROC KW=AUTHLVL                                   MK0803
         TM    AUTHORIZED,L'AUTHORIZED Are we authorized?        MK0803
         JO    AUTHLVL1                Y, skip the not           NK0803
         STRING64 'SHOWMVS is ** NOT ** running authorized',INTO=LINE
         J     AUTHLVL2                                          MK0803
AUTHLVL1 EQU   *                                                 MK0803
         STRING64 'SHOWMVS is running authorized',INTO=LINE      MK0803
AUTHLVL2 DS    0H                                                MK0803
         BRASL R14,SPACE2                                        MK0803
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     X
               INEPNAME==CL8'SHOWZOS', Name                            X
               OUTATTR1=WKCELL1,       Attributes                      X
               MF=(E,CSVQRYWK)         WORK AREA                 RS1004
         TM    WKCELL1,X'20'           Rent ?                    RS1004
         JO    AUTHLVL_END               yes, continue           RS1004
         LTR   R2,R15                  Check RC                  RS1004
         JNZ   AUTHLVL98                                         RS1004
         STRING64 'SHOWzOS','is not RENT. This is not supported!!! ',  X
               ((R2),,X),1X,(WKCELL1,1,X),INTO=LINE              RS1004
         BRASL R14,SPACE1                                        RS1004
         J     MAIN_BRIF               RENT missing or CSVQUERY prob
AUTHLVL98 DS    0H                                               MK1004
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     X
               INEPNAME==CL8'SHOWMVS', Name                            X
               OUTATTR1=WKCELL1,       Attributes                      X
               MF=(E,CSVQRYWK)         WORK AREA RS0704
         TM    WKCELL1,X'20'           Rent ?                    RS0704
         JO    AUTHLVL_END               yes, continue           RS0704
         LTR   R2,R15                  Check RC                  RS1004
         JNZ   AUTHLVL99                                         RS1004
         STRING64 'ShowMvs','is not RENT. This is not supported!!! ',  X
               ((R2),,X),1X,(WKCELL1,1,X),INTO=LINE              RS0704
         BRASL R14,SPACE1                                        RS0704
         J     MAIN_BRIF               RENT missing or CSVQUERY prob
AUTHLVL99 DS    0H                                               MK1004
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     X
               INEPNAME==CL8'ISFINIT', Name                            X
               OUTATTR1=WKCELL1,       Attributes                      X
               MF=(E,CSVQRYWK)         WORK AREA RS0704
         TM    WKCELL1,X'20'           Rent ?                    RS0704
         JO    AUTHLVL_END               yes, continue           RS0704
         LR    R2,R15                                            RS0704
         STRING64 'ISFINIT','is not RENT. This is not supported!!! ',  X
               ((R2),,X),1X,(WKCELL1,1,X),INTO=LINE              RS0704
         BRASL R14,SPACE1                                        RS0704
         J     MAIN_BRIF               RENT missing or CSVQUERY prob
AUTHLVL_END    DS 0H                                             MK0803
         END_PROC                                                MK0803
*
         TITLE 'SHOWMVS &REL - Operating System Level'
*---------------------------------------------------------------------*
*                                                                     *
*Operating System:                                                    *
*                                                                     *
*  OS/390 01.01.00         CVTOSLVL: FF E7 C4 00 00                   *
*                                                                     *
*  DFSMS/MVS 1.1.0         Licensed Components: hsm dss rmm           *
*                                                                     *
*  JES2 Level: OS 1.1.0    NJE Node: SYS1                             *
*                                                                     *
*---------------------------------------------------------------------*
SPLEVEL  BEGIN_PROC KW=SPLEVEL                                   RS0302
         STRING64 '&TITLEPFX.Operating System:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R5,CVTJESCT             JES COMM TABLE
         USING JESCT,R5
         MVC   PRISUBNM,JESPJESN       NAME OF PRIMARY SUB-SYSTEM
         MVC   PRISUBTY,=C'JES2'       TYPE OF PRIMARY SUB-SYSTEM
         L     R7,CVTDFA               DATA FACILITIES AREA
         USING DFA,R7
         L     R4,CVTECVT              -> ECVT
         USING ECVT,R4
         ST    R4,ECVT@                save addr for later
         GBLC  &IHADFARELS                                      HDZ11C0
&SMSLEVEL SETC '&IHADFARELS'
*
*        Make last page read-only (output-Buffer)
*
         LM    R2,R3,LINE1PTR          addr/len of lines buffer
         ALR   R2,R3                   first byte after buffer
         BCTR  R2,0                    last byte of last page
         PUSH  USING
         BASR  R14,0                   Temp for PGSER
         USING *,R14
         PGSER R,PROTECT,A=(R2),EA=(R2)
         POP   USING
         STRING64 2X,(ECVTPNAM,,T),1X, OS/390                          X
               ECVTPVER,'.',ECVTPREL,'.',ECVTPMOD,                     X
               3X,'FMID: ',(CVTPRODI,8),3X,                    DL9809  X
               'CVTOSLVL: ',                                   DL9809  X
               (CVTOSLV0,1,X),1X,(CVTOSLV1,1,X),1X,                    X
               (CVTOSLV2,1,X),1X,(CVTOSLV3,1,X),1X,                    X
               (CVTOSLV4,1,X),1X,(CVTOSLV5,1,X),1X,                    X
               (CVTOSLV6,1,X),1X,(CVTOSLV7,1,X),1X,                    X
               INTO=LINE
         L     R1,CVTLINK              SYS1.LINKLIB
         LOAD  EP=IFAEDLIS,DCB=(R1)    ENABLE/DISABLE LIST
         ST    R0,IFAEDLIS             SAVE EP ADDRESS
&MVSLEVEL SETC '601'
         AIF   (D'CVTH7706).SPLVL31A
         TM    CVTOSLV3,CVTH7706       z/OS R3?                  RS1107
         JNZ   SPLVL31A                yes, jump                 RS1107
         STRING64 'SHOWzOS is designed to run under z/OS R3 and',      X
               ' above',INTO=LINE
         BRASL R14,SPACE1
         STRING64 'SHOWzOS also requires z/ARCHITECTURE',INTO=LINE
         BRASL R14,SPACE1
         STRING64 'Your environment indicated you are running an',     X
               ' older system',INTO=LINE
         BRASL R14,SPACE1
         STRING64 'Please use another ShowMvs version',INTO=LINE
         BRASL R14,SPACE1
.SPLVL31A ANOP
SPLVL31A DS    0H                                                RS1107
         AIF   (NOT D'CVTH7706).SPLVL31S                         RS0102
         TM    CVTOSLV3,CVTH7706       z/OS R3?                  RS0102
         JZ    SPLVL31S                no, jump                  RS0102
         OI    HBB7706,L'HBB7706       keep it for later         RS0102
&MVSLEVEL SETC '703'                                             RS0602
         AIF   (NOT D'CVTH7707).SPLVL31S                         RS0602
         TM    CVTOSLV3,CVTH7707       z/OS R4?                  RS0602
         JZ    SPLVL31S                no, jump                  RS0602
         OI    HBB7707,L'HBB7707       keep it for later         RS0602
&MVSLEVEL SETC '704'                                             RS1103
         AIF   (NOT D'CVTH7708).SPLVL31S                         RS1103
         TM    CVTOSLV3,CVTH7708       z/OS R5?                  RS1103
         JZ    SPLVL31S                no, jump                  RS1103
         OI    HBB7708,L'HBB7708       keep it for later         RS1103
&MVSLEVEL SETC '705'                                             RS0704
         AIF   (NOT D'CVTH7709).SPLVL31S                         RS0704
         AIF   (T'&SYSSTATE_OSREL EQ 'O').ZOSR16                 RS0806
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010106').SPLVL31S     RS0806
.ZOSR16  ANOP                                                    RS0806
         TM    CVTOSLV3,CVTH7709       z/OS R6?                  RS0704
         JZ    SPLVL31S                no, jump                  RS0704
         OI    HBB7709,L'HBB7709       keep it for later         RS0704
&MVSLEVEL SETC '706'                                             RS0405
.ZOSR7   ANOP
         AIF   (NOT D'CVTH7720).SPLVL31S                         RS0405
         AIF   (T'&SYSSTATE_OSREL EQ 'O').ZOSR17                 RS0806
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010107').SPLVL31S     RS0806
.ZOSR17  ANOP                                                    RS0806
         TM    CVTOSLV5,CVTH7720       z/OS R7?                  RS0405
         JZ    SPLVL31S                no, jump                  RS0405
         OI    HBB7720,L'HBB7720       keep it for later         RS0405
&MVSLEVEL SETC '707'                                             RS0106
.ZOSR8   ANOP
         AIF   (NOT D'CVTH7730).SPLVL31S                         RS0106
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010108').SPLVL31S     RS0806
         TM    CVTOSLV5,CVTH7730       z/OS R8?                  RS0106
         JZ    SPLVL31S                no, jump                  RS0106
         OI    HBB7730,L'HBB7730       keep it for later         RS0106
&MVSLEVEL SETC '708'                                             RS0106
.ZOSR9   ANOP                                                    RS0907
         AIF   (NOT D'CVTH7740).SPLVL31S                         RS0907
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010109').SPLVL31S     RS0907
         TM    CVTOSLV5,CVTH7740       z/OS R9?                  RS0907
         JZ    SPLVL31S                no, jump                  RS0907
         OI    HBB7740,L'HBB7740       keep it for later         RS0907
&MVSLEVEL SETC '709'                                             RS0408
.ZOSR10  ANOP                                                    RS0408
         AIF   (NOT D'CVTH7750).SPLVL31S                         RS0408
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010110').SPLVL31S     RS0408
         TM    CVTOSLV5,CVTH7750       z/OS R10?                 RS0408
         JZ    SPLVL31S                no, jump                  RS0408
         OI    HBB7750,L'HBB7750       keep it for later         RS0408
&MVSLEVEL SETC '710'                                             RS0408
.ZOSR11  ANOP                                                    RS0209
         AIF   (NOT D'CVTH7760).SPLVL31S                         RS0209
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010111').SPLVL31S     RS0209
         TM    CVTOSLV5,CVTH7760       z/OS R11?                 RS0209
         JZ    SPLVL31S                no, jump                  RS0209
         OI    HBB7760,L'HBB7760       keep it for later         RS0209
&MVSLEVEL SETC '711'                                             RS0209
.ZOSR12  ANOP                                                    RS1209
         AIF   (NOT D'CVTZOS_V1R12).SPLVL31S                     RS1209
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010112').SPLVL31S     RS1209
         TM    CVTOSLV5,CVTZOS_V1R12   z/OS R12?                 RS1209
         JZ    SPLVL31S                no, jump                  RS1209
         OI    HBB7770,L'HBB7770       keep it for later         RS1209
&MVSLEVEL SETC '712'                                             RS1209
.ZOSR13  ANOP                                                    RS0110
         AIF   (NOT D'CVTZOS_V1R13).SPLVL31S                     RS0110
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010113').SPLVL31S     RS0110
         TM    CVTOSLV5,CVTZOS_V1R13   z/OS R13?                 RS0110
         JZ    SPLVL31S                no, jump                  RS0110
         OI    HBB7780,L'HBB7780       keep it for later         RS0110
&MVSLEVEL SETC '713'                                             RS0110
.ZOSR21  ANOP                                                    JH0112
         AIF   (NOT D'CVTZOS_V2R1).SPLVL31S                      JH0112
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010201').SPLVL31S     JH0112
         TM    CVTOSLV6,CVTZOS_V2R1    z/OS V2R1?                JH0112
         JZ    SPLVL31S                no, jump                  JH0112
         OI    HBB7790,L'HBB7790       keep it for later         JH0112
&MVSLEVEL SETC '721'                                             JH0112
.ZOSR22  ANOP                                                    JH1214
         AIF   (NOT D'CVTZOS_V2R2).SPLVL31S                      JH1214
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010202').SPLVL31S     JH1214
         TM    CVTOSLV6,CVTZOS_V2R2    z/OS V2R2?                JH1214
         JZ    SPLVL31S                no, jump                  JH1214
         OI    HBB77A0,L'HBB77A0       keep it for later         JH1214
&MVSLEVEL SETC '722'                                             JH1214
.SPLVL31S ANOP
SPLVL31S BRASL R14,SPACE2              Double Space
         CLI   CVTVERID,C' '           blank                        JWM
         JE    CVT1N                   yes                          JWM
         STRING64 35X,'CVTVERID: ',CVTVERID,INTO=LINE               JWM
         BRASL R14,SPACE2              Double Space                 JWM
CVT1N    DS    0H
*
*        DFSMS/MVS LEVEL
*
         OI    HDZ11G0,L'HDZ11G0       SET FLAG ON               RS0302
         L     R2,CVTLINK              link-list DCB
         LOAD  EP=IGWASMS,DCB=(R2)     SMS callable service         +RS
         ST    R0,IGWASMS              SAVE EP ADDRESS              +RS
         LOAD  EP=IGWLSHR,DCB=(R2)     SMS callable service         +RS
         ST    R0,IGWLSHR              SAVE EP ADDRESS              +RS
         STRING64 '  DFSMS     ',                                  @385X
               (DFAVER,FL1,L),'.',     VERS                        @385X
               (DFARLSE,FL1,L),'.',    REL                         @385X
               (DFAMOD,FL1,L),         MOD                         @385X
               18X,'Feature : ',                                 RS0105X
               (DFAFEAT1,1,X),1X,(DFAFEAT2,1,X),1X,              RS0105X
               (DFAFEAT3,1,X),1X,(DFAFEAT4,1,X),1X,              RS0105X
               (DFAFEAT5,1,X),1X,(DFAFEAT6,1,X),1X,              RS0105X
               INTO=LINE
         BRASL R14,SPACE1              Single Space                 +JM
         TM    DFAFEAT4,DFAFORK        DFSMS loader fork?      DL9809
         JNO   SPLVL31W                no, jump                DL9809
         STRING64 26X,'DFSMS Loader Fork Exit is present',INTO=LINE
         BRASL R14,SPACE1              Single Space                 +JM
SPLVL31W EQU   *                                                 RS0799
         TM    DFAFEAT4,DFASNBK        DFSMS Snapshot?           RS0799
         JNO   SPLVL31X                no, jump                  RS0799
         STRING64 26X,'DFSMS RVA SnapShot is available',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0799
SPLVL31X EQU   *                                                 RS0799
         TM    DFAFEAT4,DFASNAP        DFSMS SnapShot API?       RS0799
         JNO   SPLVL31Y                no, jump                  RS0799
         STRING64 26X,'DFSMS RVA SnapShot API is available',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0799
SPLVL31Y EQU   *
         TM    DFAVERBO,DFATVS         Transactional Vsam inst   HDZ11E
         JNO   SPLVL31Z                no, jump                  HDZ11E
         STRING64 26X,'Transactional VSAM is installed',INTO=LINE
         BRASL R14,SPACE1              Single Space              HDZ11E
SPLVL31Z EQU   *                                                 HDZ11E
         BRASL R14,BLANK1              Double Space                 +JM
SPLVL320 EQU   *                                                 RS0799
*
*        JES2 LEVEL (MVS/ESA ONLY)
*
SPLVL32J EQU   *
         L     R6,JESCTEXT             JESCT Extension
         USING JESPEXT,R6
*
         LA    R0,=CL8'HASMHCCT'       MODEL NAME ($HCCT)
         BRASL R14,DOBLDL3             issue BLDL (tasklib)
         LTR   R15,R15                 HASMHCCT module found?
         JNZ   SPLVL32K                NO, JUMP
         OI    SHASMIG,L'SHASMIG       SHASMIG available
SPLVL32K EQU   *
*
         L     R5,JESSSCT              FIRST JSCVT
         USING SSCT,R5
*
*        Scan SSCT chain to locate the primary sub-system
*
*loop
SPLVL32L CLC   SSCTSNAM,PRISUBNM       is this the primary sub-system?
         JE    SPLVL32M                yes, exit loop
         ICM   R5,B'1111',SSCTSCTA     NEXT SSCVT
         JNZ   SPLVL32L                check next sub-system
*endloop
         J     SPLVL32N                exit
SPLVL32M ST    R5,PRISUBCT             JSCVT for primary sub-system
         CLI   SSCTSSID,SSCTJES3       TYPE=JES3?
         JNE   SPLVL32N                no, jump
         MVI   PRISUBTY+3,C'3'         TYPE OF PRIMARY SUB-SYSTEM
SPLVL32N EQU   *
*
*        Retrieve JES version and NJE node using the SSVI interface.
*
         LAM   R15,R15,=F'0'           Set AR15 to zero          RS0507
         LA    R1,PRISUBNM             POINT AT SUB-SYSTEM NAME
         BRASL R14,GET_SSVI         <- get SSVI info
         LTR   R15,R15                 supported by this sub-system?
         JNZ   SPLVL32X                no, jump
         USING SSVI,R1
         L     R2,SSVISDOF             length of fixed header    JS0507
         LA    R2,SSVI(R2)             start of data             JS0507
         USING SSVIVDAT,R2                                       JS0507
         LH    R0,SSVIVLEN             length                    JS0507
         LTR   R0,R0                   make sure length > 0      JS0507
         JZ    SPLVL32X                 avoid S0C4 if not        JS0507
*        LA    R2,SSVIVER1             start of data             JS0507
*        USING SSVIVDAT,R2                                       JS0507
*        LH    R0,SSVIVLEN             length                    JS0507
         LA    R3,SSVIDAT              START OF DATA
*loop
SPLVL32E CLC   =C',JES_NODE=',0(R3)    KEY-WORD FOUND?
         JE    SPLVL32F                YES, EXIT LOOP
         LA    R3,1(,R3)               NO, BUMP POINTER UP
         JCT   R0,SPLVL32E             KEEP ON SCANNING
*endloop
         J     SPLVL32X                NJE node not found
SPLVL32F LA    R4,10+1(,R3)            point at NJE node
         STRING64 2X,PRISUBNM,         JES2                            X
               ' Level: ',SSVIVERS,    OS 1.1.0                        X
               '    NJE Node: ',((R4),8),                              X
               '    DSNID: ',JESDSNID,                                 X
               INTO=LINE
         J     SPLVL99                 exit
         DROP  R1,R2                   SSVI,SSVIVDAT
SPLVL32X DS    0H                      point at NJE node
         STRING64 '  Unable to detect JES level',INTO=LINE
.SPLVL99 ANOP
SPLVL99  TR    LINE,TRTPRINT           clean up non-printable
         BRASL R14,SPACE2              Double Space
*
         GBLC  &STRING_MACRO_VERSION
*
         STRING64 '  SHOWzOS REL=&REL &SYSDATC &SYSTIME',              X
               ' MVS=&MVSLEVEL SMS=&SMSLEVEL',                         X
               ' HLASM=&SYSVER',                                       X
               ' OSREL=&SYSSTATE_OSREL',                               X
               ' STRING=R&STRING_MACRO_VERSION',                       X
               ' Switches=',(SWITCHES,,X),                             X
               ' Auth=Yes,ESR=IGX',(IGX00NNN,H,R5Z),                   X
               INTO=WORK256
         LA    R1,WORK256-16(R15)      point at YES
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED ?
         JO    SPLVL991                yes, jump
         STRING64 'No,ESR=N/A',INTO=((R1),32)
         CLI   IGX00NNN,X'FF'          ESR available?
         JE    SPLVL992                no, jump
         STRING64 'No,ESR=IGX',(IGX00NNN,H,R5Z),                       X
               ',RC=',(AUTH_RC,FL1,L),                                 X
               INTO=((R1),32)
         J     SPLVL992                continue
SPLVL991 EQU   *
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?
         JO    SPLVL992                yes, jump
         STRING64 'APF',INTO=((R1),32) no, must be APF
SPLVL992 EQU   *
         STRING64 (WORK256,66),INTO=LINE
         BRASL R14,SPACE1
         STRING64 1X,(WORK256+66,90),INTO=LINE
         BRASL R14,SPACE2
         END_PROC
         TITLE 'SHOWMVS &REL - Opening Message'
*---------------------------------------------------------------------*
*                                                                     *
*        Issue an opening message when running under ISPF             *
*                                                                     *
*---------------------------------------------------------------------*
OPENMSG  BEGIN_PROC                                              RS0302
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         JZ    OPENMSG9                no, exit
         TM    HARDCOPY,L'HARDCOPY     Hard-copy mode?
         JO    OPENMSG9                yes, exit
         TM    PUTLINE,L'PUTLINE       PUTLINE mode?
         JO    OPENMSG9                yes, exit
         STRING64 'SHOWMVS &REL',INTO=LINE
         ST    R15,WKCELL1             save length
         XCALL ISPLINK,(=C'VREPLACE',=C'ZEDSMSG ',WKCELL1,LINE),       X
               LINKAGE=SYNCH           KEY=8
*
*        Using the official ASMH/HLASM distinction trick,
*        simulate the SYSVER and SYSDATC variables
*        of HLASM when assembled under ASMH
*
         LCLA  &ASMH_HLASM
         AIF   (T'&ASMH_HLASM EQ 'N').ASMH1X
&SYSVER  SETC  'ASMH'
&SYSDATC SETC  '20'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)
         AIF   ('&SYSDATC' LT '20500000').ASMH1X
&SYSDATC SETC  '19'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)
.ASMH1X  ANOP
*
         STRING64 'REL=&REL &SYSDATC &SYSTIME',                        X
               ' MVS=&MVSLEVEL SMS=&SMSLEVEL',                         X
               ' HLASM=&SYSVER',                                       X
               ' OSREL=&SYSSTATE_OSREL',                               X
               ' STRING=R&STRING_MACRO_VERSION',                       X
               ' Switches=',(SWITCHES,,X),                             X
               ' Auth=Yes,ESR=IGX',(IGX00NNN,H,R5Z),                   X
               INTO=WORK256
         LA    R1,WORK256-16(R15)      point at YES
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED ?
         JO    OPENMSG4                yes, jump
         STRING64 'No,ESR=N/A',INTO=((R1),32)
         CLI   IGX00NNN,X'FF'          ESR available?
         JE    OPENMSG5                no, jump
         STRING64 'No,ESR=IGX',(IGX00NNN,H,R5Z),                       X
               ',RC=',(AUTH_RC,FL1,L),                                 X
               INTO=((R1),32)
         J     OPENMSG5                continue
OPENMSG4 EQU   *
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?
         JO    OPENMSG5                yes, jump
         STRING64 'APF',INTO=((R1),32) no, must be APF
OPENMSG5 EQU   *
*
*        Retrieve the dsname of the library I've been loaded from
*
         L     R1,OWN_CDE              own CDE
         L     R0,CDENTPT-CDENTRY(,R1) R0=EP ADDR
         BRASL R14,CSVDSN              get dsname
         LTR   R15,R15                 dsname found?
         JNZ   OPENMSG8                no, jump
         STRING64 (WORK256,,T),1X,((R1),44,T),'(',(OWN_NAME,,T),')',   X
               INTO=WORK256
*
OPENMSG8 XCALL ISPLINK,                                                X
               (=C'VREPLACE',=C'ZEDLMSG ',=A(L'WORK256),WORK256),      X
               LINKAGE=SYNCH           KEY=8
         XCALL ISPLINK,(=C'SETMSG ',=C'ISRZ000 '),                     X
               LINKAGE=SYNCH           KEY=8
OPENMSG9 END_PROC
         TITLE 'SHOWMVS &REL - Last IPL'
*---------------------------------------------------------------------*
*                                                                     *
*Last IPL:                                                            *
*                                                                     *
*  Date: Thursday 1989-12-16 (Yesterday) Time: 09.08 Julian: 1989.350 *
*  From: MVSRES/02E0  NUC Id: 1  Type: Warm Start  CVTUSER: 00C80000  *
*  Last Cold Start (CLPA):  1989-11-02   Time: 11.12.13               *
*  Last Quick Start (CVIO): 1989-12-03   Time: 12.13.14               *
*  SYSPLEX name: NSSPLEX   SYSPLEX ID: D1  OpenMVS available: YES     *
*  Timezone: E 01.00.00  Leap-Seconds:                                *
*                                                                     *
*---------------------------------------------------------------------*
IPLDATA  BEGIN_PROC KW=IPL                                       RS0302
         STRING64 '&TITLEPFX.Last IPL:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R6,CVTSMCA              SMF SMCA
         USING SMCABASE,R6
*
*        CALCULATE NUMBER OF DAYS SINCE LAST IPL
*
         TIME  DEC                     TODAY'S GMT DATE
         L     R15,=V(JUL2DAYS)        julian-days calc rtne
         BALR  R14,R15                 calc num of days since 1901.001
         LR    R2,R0                   save # of days
         L     R1,SMCAIDTE             IPL's YY.DDD
         L     R15,=V(JUL2DAYS)        julian-days calc rtne
         BALR  R14,R15                 calc num of days since 1901.001
         LR    R7,R1                   POINT TO DAY-OF-THE-WEEK
         STRING64 '(Today)',INTO=NEXTLINE
         SR    R2,R0                   R2 = days since IPL
         JZ    IPLDATA6                TODAY, JUMP
         STRING64 '(Yesterday)',INTO=NEXTLINE
         CHI   R2,1                    WAS IT YESTERDAY?
         JE    IPLDATA6                YES, JUMP
         STRING64 '(',((R2),,L0),' days ago)',INTO=NEXTLINE
*
*        CONVERT IPL TIME FROM BINARY TO HH:MM
*
IPLDATA6 EQU   *
         L     R1,SMCAITME             IPL TIME (BINARY)
         BRASL R14,BINTIME             convert time to HH MM SS
         ZAP   WKCELL1,SMCAIDTE        PACKED JULIAN DATE
         AP    WKCELL1,=P'1900000'     00YY -> 19YY
         STRING64 '  Date: ',((R7),9,T),1X,                            X
               (SMCAIDTE,P,YYYY-MM-DD),1X,(NEXTLINE,,T),               X
               '    Time: ',((R3),,R2Z),'.',((R2),,R2Z),               X
               '    Julian: ',(WKCELL1+4,2,X),'.',                     X
               (WKCELL1+6,P,R3Z),INTO=LINE
         BRASL R14,SPACE1          <== next line
*
         L     R7,CVTSYSAD             IPL UCB
         USING UCBOB,R7
         L     R3,CVTEXT2              CVT EXTENSION
         USING CVTXTNT2,R3
         L     R4,CVTASMVT             POINT TO ASM VECTOR TABLE
         USING ASMVT,R4
         LA    R5,=C'Warm '            warm start  (noCVIO,noCLPA)
         TM    ASMFLAG2,ASMWARM        Warm START ?
         JO    IPLDATA7                YES, JUMP
         LA    R5,=C'Quick'            quick start (CVIO,noCLPA)
         TM    ASMFLAG2,ASMQUICK       Quick START ?
         JO    IPLDATA7                YES, JUMP
         LA    R5,=C'Cold '            Cold start  (CVIO,CLPA)
IPLDATA7 EQU   *
         UCB_NAME LEFT                 get 4-character device number
         STRING64 '  From: ',UCBVOLI,'/',UCB_NAME,                     X
               '    NUC Id: ',CVTNUCLS,                                X
               '    Type: ',((R5),5,T),' Start',                       X
               '    CVTUSER: ',(CVTUSER,,X),INTO=LINE
         BRASL R14,SPACE1
*
*        Reserve blank line for LASTCLPA routine in sub-task
*
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         JZ    IPLDATA8                NO, JUMP
         L     R1,ASMPART              POINT TO PAGE ACT REF TABLE
         LA    R1,PARTENTS-PART(,R1)   FIRST PART ENTRY (PLPA)
         L     R7,PAREUCBP-PARTENT(,R1) UCB address (PLPA)
         USING UCBOB,R7
         TM    UCBTBYT4,X'0E'          3380/3390?
         JNO   IPLDATA8                no, exit
         CLI   0(R5),C'C'              Cold START ?
         JE    IPLDATA8                yes, exit
         ST    R10,CLPALINE            save line addr for sub-task
         STRING64 '  ?',INTO=LINE      place-holder
         BRASL R14,SPACE1
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         CLI   0(R5),C'Q'              Quick START ?
         JE    IPLDATA8                YES, JUMP
         ST    R10,CVIOLINE            save line addr for sub-task
         STRING64 '  ?',INTO=LINE      place-holder
         BRASL R14,SPACE1
IPLDATA8 EQU   *
*
*        SYSPLEX name, ID, Sysname, Lparname
*
         L     R4,CVTECVT              -> ECVT
         USING ECVT,R4                                         JWMJUN95
         STRING64 '  SYSPLEX name: ',ECVTSPLX,2X,              JWMJUN95X
               'SYSPLEX ID: ',ECVTCLON,2X,                     JWMJUN95X
               'Sysname: ',CVTSNAME,2X,                          RS0103X
               'Lparname: ',ECVTLPNM,                            RS0103X
               INTO=LINE
.ECVT98  ANOP
ECVT99   DS    0H
         BRASL R14,SPACE1                                      JWMJUN95
.ECVT99  ANOP
         L     R7,CVTABEND                                       JM1199
         USING SCVTSECT,R7                                       JM1199
         ICM   R2,15,SCVTAMSP          Sys  Ava Manager active   JM1199
         JZ    CVTNFO01                no                        JM1199
         STRING64 '  System Availability Manager active',INTO=LINE
         BRASL R14,SPACE1              Single Space              JM1199
CVTNFO01 DS    0H                                                JM1199
         DROP  R7                                                JM1199
*
*        TIMEZONE from CLOCKxx
*
         MVI   WKCELL1,C'W'            west                      RS0402
         STRING64 '00','.','00','.','00',INTO=STCKTIME Default !!
         ICM   R1,B'1111',CVTLDTOL     diff. local and GMT       RS1101
         JZ    IPLDAT42                is it zero ?              RS0402
         JM    *+8                     Negative difference       RS0402
         MVI   WKCELL1,C'E'            positive east             RS0402
         LG    R0,CVTLDTO              pass TOD clock value      RS0704
         LPGR  R0,R0                   no sign                   RS0704
         STG   R0,WKCELL2                                        RS0704
         LA    R1,WKCELL2              set R1 to this TOD
         BRASL R14,STCKCONV            calculate the time/day
IPLDAT42 DS    0H
         STRING64 '  Timezone: ',(WKCELL1,1),1X,  E/W            RS0402X
               (STCKTIME,8),1X,'Leap Seconds: ',(CVTLSO,,X),INTO=LINE
         BRASL R14,SPACE2                                        RS1101
.IPLDAT99 ANOP
IPLDAT99 DS 0H
         END_PROC
         TITLE 'SHOWMVS &REL - Installed Software Products'
*---------------------------------------------------------------------*
*                                                                     *
*System Software:                                                     *
*                                                                     *
*  TSO/E Level:   2.4.0                                               *
*                                                                     *
*  ISPF Level:    3.5     PDF 3.5                                     *
*                                                                     *
*  RACF Level:    1.9                                                 *
*                                                                     *
*  ICKDSF Level:  1.16.0                                              *
*                                                                     *
*  VTAM Level:    3.4.1       VE341           00BFF288                *
*                                                                     *
*  DB2 Level:     5740XYR01   SSCTSNAM=DSN    Inactive                *
*                                                                     *
*  CICS Level:    2.1.2       DFHCSVC                                 *
*                                                                     *
*  LE Version:    2.10.0                                              *
*                                                                     *
*  DB2 Level:     6.1.0       SSCTSNAM=DB2P   Active                  *
*  MQ Series:     2.1.0       SSCTSNAM=MQSP   Active                  *
*                                                                     *
*  IMS Level:     9           SSCTSNAM=IMSQ   Active                  *
*  IMS Level:     9           SSCTSNAM=IMSO   Active                  *
*  IMS Level:     9           SSCTSNAM=IMSN   Inactive                *
*                                                                     *
*  TCP/IP:        97.231 5655-HAL    MVPTASK                          *
*    Tseb     SI Proc     Ver   Tsdb     Tsdx     Asid TraceOpts Statu*
*    0C2700F8 01 TCPIP    05.10 0B841000 0B8410C8 0051 80000000  Activ*
*                                                                     *
*---------------------------------------------------------------------*
PRODUCTS BEGIN_PROC KW=PRODUCTS                                  RS0302
         STRING64 '&TITLEPFX.System Software:',INTO=LINE
         BRASL R14,SPACE2              Double Space
*
*        Retrieve the address of the ACF2 SSVT
*
         L     R4,CVTJESCT             JES COMM TABLE
         USING JESCT,R4
         L     R5,JESSSCT              FIRST JSCVT
         USING SSCT,R5
*LOOP
ACF2CVT1 ICM   R6,B'1111',SSCTSSVT     SUB-SYSTEM VECTOR TABLE
         JZ    ACF2CVT2                INACTIVE SUB-SYSTEM
         USING SSVT,R6
         CLC   =C'ACF2',SSCTSNAM       IS THIS ACF2?
         JNE   ACF2CVT2                NO, JUMP
         MVC   ACF2CVT,SSCTSUSE        save ACCVT address
ACF2CVT2 ICM   R5,B'1111',SSCTSCTA     NEXT SSCVT
         JNZ   ACF2CVT1
*ENDLOOP
         L     R7,CVTTVT               TSO VECTOR TABLE
         USING TSVT,R7
         PACK  WKCELL1,TSVTLREL        2-DIGIT RELEASE NUMBER
         STRING64 '  TSO/E Level:   ',TSVTLVER,'.',(WKCELL1,P,L0),'.', X
               TSVTLMOD,INTO=LINE
         BRASL R14,SPACE2              Double Space
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
*        JNO   DFDSS                   no jump
         JNO   RACFVM00                no jump                   RS0506
         STRING64 '  ISPF Level:    ',(ZENVIR+5,3),                    X
               5X,ZPDFREL,INTO=LINE
         BRASL R14,SPACE2              Double Space
*DFDSS    DS    0H
*        BRASL R0,DOBLDL1              issue BLDL
*        DC    C'ADRRELVL'             DF/DSS
*        LTR   R15,R15
*        JNZ   DFDSS8                  NOT FOUND, JUMP
*        BRASL R14,SAFELOAD            load ADRRELVL
*        STRING64 '  DF/DSS Level:  ',(1(R1),FL1,L),'.',               X
               (2(R1),FL1,L),'.',(3(R1),FL1,L),INTO=LINE
*DFDSS8   BRASL R14,SPACE2              Double Space
*
*        ICM   R7,B'1111',CVTHSM       HSM VECTOR TABLE
*        JZ    RACFVM00
*        USING MQCT,R7
*        CLI   MQCTID,C'Q'             CHECK CB ID
*        JNE   RACFVM00
*        STRING64 '  DF/HSM Level: ',MQCTVER,'.',MQCTREL,'.',MQCTMOD,  X
               INTO=LINE
*        BRASL R14,SPACE2              Double Space
*
*
RACFVM00 ICM   R7,B'1111',CVTRAC       RACF VECTOR TABLE
         JZ    RACFVM99
         USING RCVT,R7
         STRING64 '  RACF Level:    ',(RCVTVRMN,1),'.',(RCVTVRMN+1,2), X
               '.',(RCVTVRMN+3,1),INTO=LINE
*
*        Flag ACF2 and TopSecret pseudo-RCVT
*
         CLC   RCVTID,=C'ACF2'         Is this ACF2?
         JE    RACFVM95                yes, jump
         CLC   RCVTID,=C'RTSS'         Is this Top-secret?
         JE    RACFVM97                yes, jump
*
*        Check if ACF2 is on the system when RACFID='RCVT'
*
         TM    RCVTSTAT,RCVTRNA        RACF Inactive?
         JO    RACFVM98                yes, exit
         CLI   RCVTDSNL,0              Is it really RACF?
         JNZ   RACFVM98                yes, exit
*
*        Locate ACF2 ACCVT
*
RACFVM95 EQU   *
         ICM   R5,B'1111',ACF2CVT      ACCVT
         JZ    RACFVM98                INACTIVE SUB-SYSTEM
         USING ACCVT,R5
         LA    R6,ACCVT-ACCPFXP        offset to prefix address
         LNR   R6,R6                   negative pointer
         L     R6,ACCVT(R6)            =A(ACPFX)
         USING ACCPFX,R6
         STRING64 (LINE,,T),16X,(ACCPIDS,24), eTrust CA-ACF2 8.0 SP03  X
               INTO=LINE                                         RS0407
         J     RACFVM98
*
*        Display Top-Secret level
*
RACFVM97 EQU   *
         STRING64 (LINE,,T),16X,'(Top-Secret)',INTO=LINE
RACFVM98 BRASL R14,SPACE2              Double Space
RACFVM99 EQU   *
         DROP  R4,R5,R6,R7
*
*        DSF level
*
ICKDSF   BRASL R0,DOBLDL1              issue BLDL
         DC    C'ICKRELVL'             EPNAME
         LTR   R15,R15
         JNZ   ICKDSF8                 NOT FOUND, JUMP
         BRASL R14,SAFELOAD            load ICKDSF
         STRING64 '  ICKDSF Level:  ',(1(R1),FL1,L),'.',               X
               (2(R1),FL1,L),'.',(3(R1),FL1,L),INTO=LINE
         BRASL R14,SPACE2              Double Space
ICKDSF8  EQU   *
*
*        VTAM level
*
VTAM00   L     R3,PSAATCVT-PSA(,0)     ADDR OF VTAM CVT
         USING ATCVT,R3
         STRING64 (ATCVTLVL+2,1),'.',(ATCVTLVL+3,1),'.',               X
               (ATCVTLVL+4,1),INTO=WKCELL1
*        OI    WKCELL1+4,C'0'          4.3.  ->  4.3.0           RS1209
         STRING64 '  VTAM Level:    ',WKCELL1,4X,                      X
               ATCVTLVL,8X,            first 8 bytes of ATCVT          X
               (PSAATCVT-PSA,,X),      ADDR OF ATCVT                   X
               INTO=LINE
         TR    LINE,TRTPRINT           VTAM 3.2
         BRASL R14,SPACE2              Double Space
         DROP  R3
*
*        CICS level
*
CICS00   EQU   *
         BRASL R1,CICS01               br around CL8
         DC    C'DFHCSVC '             CICS SVC
CICS01   EQU   *
         BRASL R14,LPASEARCH        <- search LPA
         LTR   R3,R0                   found?
         JZ    CICS99                  no, exit
         STRING64 '  CICS Level:    ',                                 X
               (22(R3),1),'.',(23(R3),1),'.',(24(R3),1),7X,   3.3.0    X
               'DFHCSVC',                                              X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
CICS99   EQU   *
         AIF   (NOT D'CEECAA).LEINFOE   .Did user specify CEE.SCEEMAC?
*                                                                DA0701
** Obtain the LE version and platform ID                         DA0701
*                                                                DA0701
         LA    R0,=CL8'CEEGPID'                                  RS0302
         BRASL R14,DOBLDL3             issue BLDL                RS0701
         LTR   R15,R15                 found?                    DA0701
         JNZ   DB2SYS00                no, jump                  DA0701
         SLR   R0,R0                                             DA0701
         MVC   WORK256(2),=H'80'                                 RS1001
         STRING64 'TRAP(ON,NOSPIE)/01PTR1',INTO=WORK256+2        RS0903
         LA    R1,TENWORDS        returned area                  RS1001
         STCM  R1,B'1111',WORK256+20    move to user-parm (PTR1) RS0201
         LA    R1,WORK256                                        RS1001
         ST    R1,WKCELL1                                        RS1001
         LA    R1,WKCELL1                                        RS1001
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?                 RS1001
         JNO   LE$1                    yes, don't call           RS1001
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0         RS1001
LE$1     DS    0H                                                RS1001
         L     R15,=V(LESERV)          Locate our LE Services routine
         BALR  R14,R15                 Call our LE Services routine
*                                                                DA0701
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?                 RS1001
         JNO   LE$2                    yes, don't call           RS1001
         MODESET KEYREG=(2)            switch back to own key    RS1001
LE$2     DS    0H                                                RS1001
LE$LNEW  DS    0H                                                DA0701
         STRING64 '  LE Version:    ',                                 X
               (TENWORDS+1,FL1,L),'.',                                 X
               (TENWORDS+2,FL1,L),'.',                                 X
               (TENWORDS+3,FL1,L),                                     X
               INTO=LINE                                         DA0701
         BRASL R14,SPACE2              Double Space              DA0701
         J     DB2SYS00                leave                     RS0701
*                                                                DA0701
** Error message handling if CEECAA isn't found                  DA0701
*                                                                DA0701
         AGO   .LEINFOX                                          DA0701
.LEINFOE ANOP  ,                                                 DA0701
         STRING64 'CEE.SCEEMAC was not found at assembly time',        X
               INTO=LINE
         BRASL R14,SPACE2              Double Space              DA0701
*                                                                DA0701
         MNOTE 4,'The LE macro CEECAA could not be found, by normal'
         MNOTE 4,'MACRO search lookup. Please add CEE.SCEEMAC to '
         MNOTE 4,'the SHOWMVS assembly //SYSLIB'                 DA0701
.LEINFOX ANOP  ,                                                 DA0701
         J     DB2SYS00
$CEEGPID DC    C'CEEGPID '
*
*
*        DB2 level(s)
*
DB2SYS00 L     R1,CVTJESCT             JES COMM TABLE
         L     R5,JESSSCT-JESCT(,R1)   FIRST JSCVT
         USING SSCT,R5
         SLR   R7,R7                   no DB2 sub-system found
*LOOP
DB2SYS22 VALIDATE SSCT,ERRET=DB2SYS27  SSCT may be fetch-prot.
         ICM   R6,B'1111',SSCTSUSE     DB2'S ERLY
         JZ    DB2SYS27                INACTIVE SUB-SYSTEM
*        #SNAP ADDR=(R5),LENGTH=36     Debug                     RS1214
         USING ERLY,R6
         VALIDATE ERLY,ERRET=DB2SYS27  SSCT may be fetch-prot.
*        #SNAP ADDR=(R6),LENGTH=160    Debug                     RS1214
         CLC   =C'ERLY',ERLYCBID       IS THIS DB2?
         JNE   DB2SYS27                no, ignore for now
         LA    R4,=C'Inactive'                                 JWMFEB96
         ICM   R0,B'1111',ERLYSCOM     Pointer to SCOM         JWMFEB96
         JZ    DB2SYS24                No, jump                     +RS
         LA    R4,=C'Active  '         Yes                     JWMFEB96
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                   +RS
         JO    DB2SYS24                yes, don't call DSNALI      +RS
*        CLC   =C'5655F1000',ERLYPROD  DSNALI doesn't work with  RS0102
*        JE    DB2SYS24                  MQSeries V5R2+
         CLC   =C'CSQ',ERLYMODN        DSNALI doesn't work with  RS0605
         JE    DB2SYS24                  MQSeries                RS0605
*------------------------------------------------------------*     +RS
*        Load DB2 CAF routine                                *     +RS
*------------------------------------------------------------*     +RS
         LA    R0,=CL8'DSNWLI2'        program name              RS0507
         BRASL R14,DOBLDL3            issue BLDL (tasklib)
         LTR   R15,R15                 found?                      +RS
         JNZ   DB2SYS24                no, jump                    +RS
         LOAD  EPLOC==CL8'DSNALI'   Load the CAF service EP        +RS
         ST    R0,BPX_MOD          save the address                +RS
         ICM   R15,B'1111',BPX_MOD     load address of CAF         +RS
         JZ    DB2SYS24                  if zero leave             +RS
*------------------------------------------------------------*     +RS
*        Connect to Subsystem DB2 or MQ                      *     +RS
*        In case of tracing the requests, just add a         *     +RS
*        DD-Name for DSNTRACE SYSOUT=*                       *     +RS
*------------------------------------------------------------*     +RS
DB2SYS23 EQU   *                                                   +RS
         STRING64 'CONNECT',INTO=DB2_REQ
         XCALL BPX_MOD,(DB2_REQ,SSCTSNAM,WKCELL1,WKCELL1+4,WKCELL2,    X
               LRETCODE,LRSNCODE,,WKCELL2+4)                       +RS
         ICM   R7,B'1111',LRETCODE     Good RC  ??               RS1105
         JNZ   DB2SYS23X                 hups no leave           RS1105
         ICM   R7,B'1111',WKCELL2+4    EIB-Pointer
         JZ    DB2SYS23X                 If zero leave
         LA    R1,=C'n/a'            New function mode (PK06381)?RS0705
         TM    33(R7),X'40'          EIBNFM (DSNDEIB)            RS0705
         JNO   DB2SYS23X                                         RS0705
         LA    R1,=C'Yes'            New function mode (PK06381)?RS0605
*        #SNAP ADDR=(R7),LENGTH=48     Debug                     RS0705
DB2SYS23X EQU   *                                                RS070S
         ICM   R7,B'1111',WKCELL2      Rib-Pointer               RS0605
         JZ    DB2SYS24                  If zero leave             +RS
         USING RIB,R7                  tell assembly               +RS
         CLC   =C'RIB ',RIBEYEC        check Eyecatcher            +RS
         JNE   DB2SYS24
         AHI   R7,1                   Remember
         STRING64 '  DB2 Level:     ',                                 X
               (RIBREL,1),'.',(RIBREL+1,1),'.',(RIBREL+2,1),4X,        X
               '   SSCTSNAM=',SSCTSNAM,                                X
               3X,((R4),8),            Active/Inactive                 X
               1X,'NFM: ',((R1),3),    Yes or n/a                RS0705X
               INTO=LINE                                           +RS
         CLC   =C'999',RIBREL          DB2 V10?                  RS1211
         JNE   DB2SYS23Y                 no                      RS1211
         STRING64 '  DB2 Level:     ',(RIBCATVS+20,2),'.',       RS1211X
               (RIBCATVS+22,1),'.',(RIBCATVS+23,1),3X,           RS1211X
               '   SSCTSNAM=',SSCTSNAM,                          RS1211X
               3X,((R4),8),            Active/Inactive  RIBRELX  RS1211X
               1X,'NFM: ',((R1),3),    Yes or n/a                RS1211X
               INTO=LINE                                         RS1211
DB2SYS23Y EQU   *                                                RS1211
         STRING64 'DISCONNECT',INTO=DB2_REQ
         XCALL BPX_MOD,(DB2_REQ,LRETCODE,LRSNCODE)                  +RS
*        CLC   =C'5655F1000',ERLYPROD  MQ Series? V5 Rel 2       JH0501
*        JE    DB2SYS25                yes, jump                 RS0302
*        CLC   =C'569513700',ERLYPROD  MQ Series? V1           RSJUN99
*        JE    DB2SYS25                yes, jump                 RS0302
*        CLC   =C'5655A9500',ERLYPROD  MQ Series? V2           RSJUN99
*        JE    DB2SYS25                yes, jump                 RS0302
         CLC   =C'CSQ',ERLYMODN        DSNALI doesn't work with  RS0605
         JE    DB2SYS25                  MQSeries                RS0605
         J     DB2SYS26                                            +RS
DB2SYS24 EQU   *                                                   +RS
         STRING64 '  DB2 Level:     ',ERLYPROD,                JWMJUN95X
               '   SSCTSNAM=',SSCTSNAM,                        JWMJUN95X
               3X,((R4),8),            Active/Inactive         JWMFEB96X
               INTO=LINE                                       JWMJUN95
*        CLC   =C'5655F1000',ERLYPROD  MQ Series? V5 Rel 2       JH0501
*        JE    DB2SYS25                yes, jump                 RS0302
*        CLC   =C'569513700',ERLYPROD  MQ Series? V1           RSJUN99
*        JE    DB2SYS25                yes, jump                 RS0302
*        CLC   =C'5655A9500',ERLYPROD  MQ Series? V2           RSJUN99
*        JE    DB2SYS25                yes, jump                 RS0302
         CLC   =C'CSQ',ERLYMODN        DSNALI doesn't work with  RS0605
         JE    DB2SYS25                  MQSeries                RS0605
         J     DB2SYS26                might be DB2            RSJUN99
DB2SYS25 EQU   *                                               RSJUN99
         MVC   LINE+2(10),=C'MQ Series:'
DB2SYS26 EQU   *
         BRASL R14,SPACE1              Single Space
DB2SYS27 EQU   *
         LA    R0,1                    count sub-systems
         AH    R0,SUBSYSNO             count sub-systems
         STH   R0,SUBSYSNO             count sub-systems
         ICM   R5,B'1111',SSCTSCTA     NEXT SSCVT
         JNZ   DB2SYS22
*ENDLOOP
         LTR   R7,R7                   any DB2 system found?
         JZ    DB2SYS99                no, exit
         BRASL R14,BLANK1              Blank Line
DB2SYS99 EQU   *
         DROP  R5,R6,R7
*                                                                RS0906
*        IMS level(s)                                            RS0906
*                                                                RS0906
IMSSYS00 L     R1,CVTJESCT             JES COMM TABLE            RS0906
         L     R5,JESSSCT-JESCT(,R1)   FIRST JSCVT               RS0906
         USING SSCT,R5                                           RS0906
         SLR   R7,R7                   no IMS sub-system found   RS0906
*LOOP                                                            RS0906
IMSSYS22 VALIDATE SSCT,ERRET=IMSSYS27  SSCT may be fetch-prot.   RS0906
         LA    R4,=C'Inactive'                                   RS0906
         ICM   R0,B'1111',SSCTSSVT     Pointer to SSVT           RS0906
         JZ    IMSSYS24                No, jump                  RS0906
         LA    R4,=C'Active  '         Yes                       RS0906
IMSSYS24 EQU   *                                                 RS0906
         ICM   R6,B'1111',SSCTSUSE     Check SSCTSUSE            RS0906
         JZ    IMSSYS27                  if zero leave           RS0906
         VALIDATE 0(R6),ERRET=IMSSYS27  may be fetch-prot.       RS0906
*        #SNAP ADDR=(R6),LENGTH=16     Debug code                RS0906
         CLC   =X'F5000014',0(R6)      Is this IMS?              RS0906
         JNE   IMSSYS27                no, ignore for now        RS0906
         ICM   R6,B'1111',16(R6)       next step                 RS0906
         JZ    IMSSYS27                  if zero leave           RS0906
         VALIDATE 0(R6),ERRET=IMSSYS27  may be fetch-prot.       RS0906
*        #SNAP ADDR=(R6),LENGTH=20     Debug code                RS0906
         CLC   =C'SSCT',0(R6)          Is this IMS?              RS0906
         JNE   IMSSYS27                no, ignore for now        RS0906
         ICM   R6,B'1111',20(R6)       next step                 RS0906
         JZ    IMSSYS27                  if zero leave           RS0906
         VALIDATE 0(R6),ERRET=IMSSYS27  may be fetch-prot.       RS0906
*        #SNAP ADDR=(R6),LENGTH=16     Debug code                RS0906
         CLC   =C'SSCTEXT ',0(R6)      Is this IMS?              RS0906
         JNE   IMSSYS27                no, ignore for now        RS0906
         ICM   R6,B'1111',16(R6)       next step                 RS0906
         JZ    IMSSYS27                  if zero leave           RS0906
         VALIDATE 0(R6),ERRET=IMSSYS27  may be fetch-prot.       RS0906
*        #SNAP ADDR=(R6),LENGTH=44     Debug code                RS0906
         CLC   =C'DFSXSSCT',0(R6)      Is this IMS?              RS0906
         JNE   IMSSYS27                no, ignore for now        RS0906
         CLI   44(R6),C' '             Is this IMS?              RS0906
         JNE   IMSSYS27                no, ignore for now        RS0906
*        #SNAP ADDR=(R6),LENGTH=64     Debug code                RS0906
         STRING64 '  IMS Level:    ',                            RS0906X
               (12(R6),FL1,R2B),8X,                              RS0906X
               '   SSCTSNAM=',SSCTSNAM,3X,                       RS0906X
               ((R4),8),               Active/Inactive           RS0906X
               INTO=LINE                                         RS0906
         BRASL R14,SPACE1              Single Space              RS0906
IMSSYS27 EQU   *                                                 RS0906
         ICM   R5,B'1111',SSCTSCTA     NEXT SSCVT                RS0906
         JNZ   IMSSYS22                                          RS0906
*ENDLOOP                                                         RS0906
         LTR   R7,R7                   any IMS system found?     RS0906
         JZ    IMSSYS99                no, exit                  RS0906
         BRASL R14,BLANK1              Blank Line                RS0906
IMSSYS99 EQU   *                                                 RS0906
         DROP  R5                                                RS0906
*---------------------------------------------------------------------*
*                                                                     *
*        TCP/IP                                5655-HAL Version 3     *
*                                              5735-HAL Version 2     *
*---------------------------------------------------------------------*
TCPIP    EQU   *                                                   @RS
         BRASL R1,TCPIP1               br around CL8               @RS
         DC    C'MVPTASK '             TCPIP                       @RS
TCPIP1   EQU   *                                                  @RS
         BRASL R14,LPASEARCH        <- search LPA                  @RS
         LTR   R3,R0                   found?                      @RS
         JZ    TCPIP9                  no, exit                    @RS
         STRING64 '  TCP/IP:',8X,                                      X
               (17(R3),6),' ',(60(R3),8),4X,        96.085  5655-HAL   X
               'MVPTASK',                                              X
               INTO=LINE                                           @RS
         BRASL R14,SPACE2              Double Space                @RS
         L     R2,CVTECVT              ECVT                     RS0601
         USING ECVT,R2                                          RS0601
         L     R3,ECVTTCP-ECVT(,R2)    TCPIP                    RS0601
         USING TSAB,R3                                          RS0601
         LTR   R3,R3
         JZ    TCPIP9
         LA    R3,TSAB_L(R3)
         USING TSEB,R3
         LHI   R6,8
         STRING64 4X,'Tseb     SI Proc     Ver   Tsdb     Tsdx',       X
               '     Asid TraceOpts Status',INTO=LINE
         BRASL R14,SPACE1
TCPIP2   DS    0H
         L     R5,TSEB_TSDB
         USING TSDB,R5
         CLI   TSEB_TCPIP_NAME,0      Jobname low-value?
         JE    TCPIP5                   yes, ingore
         STRING64 4X,((R3),,X),1X,(TSEB_SI,,X),1X,(TSEB_TCPIP_NAME),   X
               1X,(TSEB_TCPIP_VERSION,1,X),'.',                        X
               (TSEB_TCPIP_VERSION+1,1,X),1X,                          X
               (TSEB_TSDB,,X),1X,(TSDB_TSDX,,X),1X,(TSEB_ASID,,X),     X
               1X,(TSEB_Trace,,X),INTO=LINE
         LA    R4,LINE+2(R15)
        #STATUS TSEB_STATUS,TSEB_ACTIVE,'Active'
        #STATUS TSEB_STATUS,TSEB_TERM,'Terminating'
        #STATUS TSEB_STATUS,TSEB_DOWN,'Down'
        #STATUS TSEB_STATUS,TSEB_STOP,'Stoped'
         BRASL R14,SPACE1
TCPIP5   DS    0H
         AH    R3,TSEB_LENGTH
         JCT   R6,TCPIP2
         BRASL R14,BLANK1
         DROP  R2,R3,R5
.TCP9    ANOP                                                      @RS
TCPIP9   EQU   *                                                   @RS
*---------------------------------------------------------------------*
*                                                                     *
*Run-time Environments                                                *
*                                                                     *
*   Name         DDname    Dsname                                     *
*   OS/VS COBOL  ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*                -LNKLST-  COB2.V1R4M0.COB2LIB                        *
*   VS COBOL II  ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*                -LNKLST-  COB2.V1R4M0.COB2LIB                        *
*   PL/I         ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*   FORTRAN      ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*   C/C++        ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*   LE           ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*   RTLS         n/a                                               +RS*
*                                                                     *
*---------------------------------------------------------------------*
RTE00    STRING64 '  Run-time Environments',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '    Name',9X,'DDname    Dsname',39X,'Module',       X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         BRASL R3,RTE11                branch around table
         DC    C'ILBOCOM ',C'OS/VS COBOL' VSCLLIB
         DC    C'IGZCTCO ',C'VS COBOL II' COB2LIB
         DC    C'CEEEV005',C'Ent. Cobol ' SCEERUN2               RS0305
         DC    C'AFBNAMEP',C'FORTRAN    ' VSF2FORT
         DC    C'IBMBLIIA',C'PLI + C/370' SIBMLINK or SCEERUN
         DC    C'IBMBPIIA',C'OS/VS PL/I ' PLILINK  or SCEERUN
         DC    C'CEEEV011',C'Ent. PL/I  ' SCEERUN                RS0305
         DC    C'EDCXV   ',C'C/370      ' SEDCLINK
         DC    C'CEEEV003',C'C/C++      ' SCEELPA                RS0305
         DC    C'SCEECPP ',C'C++        ' SCEERUN2               RS0305
*        DC    C'IEDCMSGT',C'C/C++      ' SEDC?     old          RS0305
*        DC    C'IBMBCCLA',C'PL/I       ' PLILINK   old          RS0305
         DC    C'CEEBLRR ',C'LE         ' SCEERUN
         DC    C'EQAEV006',C'Debug Tool ' SEQAMOD                RS0305
         DC    C'PASRTLIB',C'PASCAL/VS  ' SAMPRUN2
         DC    C'RPGII   ',C'RPG II     ' RG1LOAD
*        DC    C'EAGIVVER',C'REXX Alt.  ' SEAGLMD
*        DC    C'EAGRTXIN',C'REXX       ' SEAGLPA
         DC    C'EAGRTALT',C'REXX Alt.  ' SEAGALT                RS0709
         DC    C'EAGRTLIB',C'REXX       ' SEAGLPA                RS0709
         DC    C'LSCLDBCS',C'SAS/C      ' SISPSASC
         DC    X'00',0H'0'
*LOOP
RTE11    LR    R0,R3                   program name
         BRASL R14,DOBLDL3             issue BLDL (tasklib)
         LTR   R15,R15                 found?
         JNZ   RTE13                   no, jump
         STRING64 4X,(8(R3),11),2X,PDATA_DDN,2X,PDATA_DSN,1X,((R3),8), X
               INTO=LINE
         TR    LINE,TRTPRINT
         J     RTE14
RTE13    EQU   *
         STRING64 4X,(8(R3),11),'  n/a',52X,((R3),8),INTO=LINE
RTE14    EQU   *
         BRASL R14,SPACE1              Single Space
*
*        if found in tasklib, look for 2nd copy in linklib or lpa
*
         DEVTYPE PDATA_DDN,WKCELL1     check ddname
         LTR   R15,R15                 loaded from tasklib?
         JNZ   RTE19                   no, exit
         LR    R0,R3                   program name
         BRASL R14,DOBLDL2             issue BLDL (linklib)
         LTR   R15,R15                 found?
         JNZ   RTE19                   no, exit
         STRING64 17X,PDATA_DDN,2X,PDATA_DSN,1X,((R3),8),INTO=LINE
         TR    LINE,TRTPRINT
         J     RTE18
*
RTE17    EQU   *                       MLPA/PLPA
         STRING64 4X,(8(R3),11),2X,PDATA_DDN,47X,((R3),8),INTO=LINE
RTE18    EQU   *
         BRASL R14,SPACE1              Single Space
RTE19    EQU   *
         LA    R3,8+11(,R3)            next table entry
         CLI   0(R3),0                 end of table?
         JNE   RTE11                   no, loop
*ENDLOOP
         AIF   (D'CVTH7740).RTE299     z/OS R9? yes leave        RS0210
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS0210
         JNZ   RTE299                   yes, jump                RS0210
*
*        Run-time Library Services (RTLS)
*
         BRASL R14,WORKADDR            32K work area
         ST    R0,ANSLEN               pass length                 +RS
         LR    R4,R1                   length is zero, for now     +RS
         USING RTAAHDR,R4                                          +RS
*
*        Find out how much storage is needed for the answer area   +RS
*
         CSVRTLS MF=(E,WORK256,COMPLETE),ANSAREA=RTAAHDR,              X
               ANSLEN=ANSLEN,REQUEST=LIST,LISTTYPE=PHYSICAL,           X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE                   +RS
         CLC   LRETCODE,=AL4(CSVRTLSRC_OK) OK?                     +RS
         JH    RTE293                  No, error                   +RS
*                                                                  +RS
*        Process information in answer area when RC=0              +RS
*                                                                  +RS
         ICM   R5,B'1111',RTAAHNUMPH   how many RTAAPH entries?    +RS
         JZ    RTE293                  zero, exit                  +RS
         L     R3,RTAAHFIRSTPHADDR     Get first entry             +RS
         USING RTAAPH,R3                                           +RS
*loop                                                              +RS
RTE240   DS    0H                      RTAAPH loop                 +RS
         STRING64 4X,RTAAPHNAME,INTO=LINE Physical name            +RS
         L     R6,RTAAPHFIRSTDSADDR    get first DS entry          +RS
         USING RTAADS,R6                                           +RS
         ICM   R7,B'1111',RTAAPHNUMDS  how many DS entries?        +RS
         JNZ   RTE242                  a few, process them         +RS
         STRING64 'DSName n/a',INTO=LINE+27 no entries             +RS
         BRASL R14,SPACE1              Single Space                +RS
         J     RTE245                                              +RS
*--loop                                                            +RS
RTE242   DS    0H                      DS loop                     +RS
         STRING64 RTAADSNAME,INTO=LINE+27                          +RS
         BRASL R14,SPACE1                                          +RS
         L     R6,RTAADSNEXTADDR       point to next DS            +RS
         JCT   R7,RTE242                                           +RS
*--endloop                                                         +RS
RTE245   DS    0H                                                  +RS
         L     R3,RTAAPHNEXTADDR       Get next RTAAPH             +RS
         JCT   R5,RTE240             Continue while there are more +RS
*endloop                                                           +RS
         J     RTE299                                              +RS
RTE293   DS    0H                                                  +RS
         CLC   LRETCODE,=AL4(CSVRTLSRC_WARN) warn?                 +RS
         JH    RTE298                  No, error                   +RS
         CLC   LRSNCODE,=AL4(CSVRTLSRSNLISTNOMATCHES) none?
         JNE   RTE298                  no, loop
         STRING64 '    RTLS',9X,'is not managing any physical',        X
               ' libraries',INTO=LINE
         BRASL R14,SPACE1              Double Space                +RS
         J     RTE299                                              +RS
RTE298   DS    0H                                                  +RS
         STRING64 '    RTLS',9X,'RC: ',(LRETCODE,,X),  no RTLS         X
               ' RSN: ',(LRSNCODE,,X),INTO=LINE                    +RS
         BRASL R14,SPACE1              Double Space                +RS
RTE299   DS    0H
.RTE299  ANOP
         BRASL R14,BLANK1              Double Space
         END_PROC
         TITLE 'SHOWMVS &REL - LE options'
*---------------------------------------------------------------------*
*                                                                     *
* LE run-time options                                                 *
*     ABPERC(NONE)                                                    *
*     ABTERMENC(ABEND)                                                *
*   NOAIXBLD                                                          *
*     ALL31(ON)                                                       *
*     ANYHEAP(16384,8192,ANYWHERE,FREE)                               *
*   NOAUTOTASK                                                        *
*     BELOWHEAP(8192,4096,FREE)                                       *
*     CBLOPTS(ON)                                                     *
*     CBLPSHPOP(ON)                                                   *
*     CBLQDA(OFF)                                                     *
*     CHECK(ON)                                                       *
*     COUNTRY(US)                                                     *
*   NODEBUG                                                           *
*                                                                     *
*---------------------------------------------------------------------*
LEO      BEGIN_PROC KW=LEO                                       RS1004
         AIF   (NOT D'CEECAA).LEOEND    .Did user specify CEE.SCEEMAC?
         AIF   (NOT D'CVTH7709).LEO00    z/OS R6?                RS0506
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS0506
         JZ    LEO00                    no, jump                 RS0506
         L     R3,CVTECVT                                        RS0506
         USING ECVT,R3                                           RS0506
         L     R3,ECVTSLCA             point to ECVTSLCA         RS0506
*        USING SLCA,R3                 CEESLCA                   RS0506
*        STRING64 ' SLCA cblock',INTO=LINE                       RS0506
*        BRASL R14,SPACE1              Single Space              RS0506
*        #SNAP ADDR=(R3),LENGTH=104    dump this                 RS0506
         ICM   R5,B'1111',28(R3)       CEEPLCB present           RS0506
         JZ    LEO00                     no leave
*        #SNAP ADDR=(R5),LENGTH=256    dump this                 RS0506
*        USING CEEPLCB,R5                                        RS0506
         STRING64 '  CEE Parmlib member CEEPRM suffix=',(16(R5),2),    X
               INTO=LINE                                         RS4007
         BRASL R14,SPACE2                                        RS0506
         STRING64 '  LE run-time options CEEPRM ','(CEEDOPT)',         X
               INTO=LINE                                         RS4007
         BRASL R14,SPACE2                                        RS0506
         L     R3,120(,R5)             CEEDOPT                   RS0506
         BRASL R7,LESERV00                                       RS0506
         BRASL R14,BLANK1              Empty line                RS0506
         STRING64 '  LE run-time options CEEPRM ','(CEECOPT)',         X
               INTO=LINE                                         RS4007
         BRASL R14,SPACE2                                        RS0506
         L     R3,124(,R5)             CEECOPT                   RS0506
         BRASL R7,LESERV00                                       RS0506
         BRASL R14,BLANK1              Empty line                RS0506
         STRING64 '  LE run-time options CEEPRM ','(CELQDOPT)',        X
               INTO=LINE                                         RS4007
         BRASL R14,SPACE2                                        RS0506
         L     R3,128(,R5)             CELQDOPT                  RS0506
         MVI   WKCELL1,C'1'            64bit LE-Option           RS0606
         BRASL R7,LESERV00                                       RS0506
         XC    WKCELL1,WKCELL1         64bit LE-Option           RS0606
         BRASL R14,BLANK1              Empty line                RS0506
*        J     LEO99                                             RS0506
.LEO00   DS    0H                                                RS1004
LEO00    DS    0H                                                RS1004
         STRING64 '  LE run-time options (CEEDOPT)',INTO=LINE    RS1004
         BRASL R14,SPACE2                                        RS1004
         MVC   WORK256(2),=H'80'                                 RS1004
         STRING64 'TRAP(ON,NOSPIE)/02PTR1',INTO=WORK256+2        RS1004
         ST    R10,TENWORDS                                      RS1004
         LA    R1,TENWORDS        returned area                  RS1004
         STCM  R1,B'1111',WORK256+20    move to user-parm (PTR1) RS1004
         LA    R1,WORK256                                        RS1004
         ST    R1,WKCELL1                                        RS1004
         LA    R1,WKCELL1                                        RS1004
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?                 RS1004
         JNO   LEO1                    yes, don't call           RS1004
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0         RS1004
LEO1     DS    0H                                                RS1004
         L     R15,=V(LESERV)          Locate our LE Services routine
         BALR  R14,R15                 Call our LE Services routine
*                                                                RS1004
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?                 RS1004
         JNO   LEO2                    yes, don't call           RS1004
         MODESET KEYREG=(2)            switch back to own key    RS1004
LEO2     DS    0H                                                RS1004
         L     R10,TENWORDS            new R10     !!!           RS1004
         BRASL R14,BLANK1              Double Space              RS1004
LEO99    DS    0H                                                RS0506
.LEOEND  ANOP  ,                                                 RS1004
         END_PROC
         TITLE 'SHOWMVS &REL - Installed SORT Utility'
*---------------------------------------------------------------------*
*                                                                     *
*  SORT's true name is ICEMAN     (First 100 Bytes Follow)            *
*                                                                     *
*    D3C9C3C5 D5E2C5C4 40D4C1E3 C5D9C9C1 D3E24060   LICENSED MATERIAL *
*    40D7D9D6 D7C5D9E3 E840D6C6 40C9C2D4 40F5F7F4    PROPERTY OF IBM  *
*    F060E2D4 F1404DC3 5D40C3D6 D7E8D9C9 C7C8E340   0-SM1 (C) COPYRIG *
*    C9C2D440 C3D6D9D7 4B40F1F9 F7F36B40 F1F9F9F2   IBM CORP. 1973, 1 *
*    404DC35D 40C3D6D7 E8D9C9C7 C8E340E6 C1E3E2D6    (C) COPYRIGHT WA *
*                                                                     *
*---------------------------------------------------------------------*
SORT     BEGIN_PROC KW=SORT                                      RS0302
         LA    R0,=CL8'SORT'           program name
         BRASL R14,DOBLDL3             issue BLDL (tasklib)
         LTR   R15,R15
         JNZ   SORT100                 NOT FOUND, JUMP           RS0209
         BRASL R14,SAFELOAD            load SORT
         LR    R7,R1                   save load point
         STRING64 '  SORT loaded from ',                               X
               'DDN(',(PDATA_DDN,,T),') ',                             X
               'DSN(''',(PDATA_DSN,,T),'(',(PDS2NAME,,T),')'')',       X
               INTO=LINE
         CLC   PDATA_DDN,MLPADDN       found in MLPA?
         JE    SORTLPA                 yes, jump
         CLC   PDATA_DDN,PLPADDN       found in PLPA?
         JNE   SORT40                  no, jump
SORTLPA  EQU   *
         STRING64 '  SORT loaded from ',                               X
               'DDN(',(PDATA_DDN,,T),') ',                             X
               'PGM(',(PDS2NAME,,T),')',                               X
               INTO=LINE
*
SORT40   EQU     *
         BRASL R14,SPACE2              Double Space
*
*        Detect the ICEMAN eye-catcher (40 bytes at loadpt+X'120')
*
         CLC   PDS2NAME,X'120'(R7)     ICEMAN ?
         JNE   SORT41                  no, jump                  RS0302
         LA    R3,040/20               LOOP COUNTER (40 bytes)
         LA    R7,X'120'(R7)           skip copyright notice
         J     SORT42
*
*        DUMP THE FIRST 100 BYTES OF THE "SORT" FOR IDENTIFICATION
*
SORT41   EQU   *
         STRING64 '   (First 100 Bytes Follow)',INTO=LINE
         BRASL R14,SPACE2              Double Space
         LA    R3,100/20               LOOP COUNTER
SORT42   EQU   *
*LOOP
SORT42L  DS    0H
         STRING64 4X,((R7),4,X),1X,(4(R7),4,X),1X,(8(R7),4,X),1X,      X
               (12(R7),4,X),1X,(16(R7),4,X),3X,((R7),20),INTO=LINE
         TR    LINE,TRTPRINT           GET RID OF NON-PRINTABLE CHARS
         BRASL R14,SPACE1          <== next line
         LA    R7,020(,R7)             BUMP POINTER
         JCT   R3,SORT42L
*ENDLOOP
         BRASL R14,BLANK1              BLANK LINE
         STRING64 '    Sort Options',INTO=LINE
         BRASL R14,SPACE2
         STRING64 '    Item       JCL(ICEAM1)      INV(ICEAM2)',       X
               '      TSO(ICEAM3)      TSOINV(ICEAM4)',                X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    ---------- ---------------- -----------',       X
               '----- ---------------- --------------',                X
               INTO=LINE
         BRASL R14,SPACE1
         ST    R10,WKCELL1             Remember Start
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?                 RS0209
         JNO   ICEAM100                yes, don't switch         RS0209
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0         RS0209
ICEAM100 DS    0H                                                RS0209
         LOAD  EP=ICEAM1,ERRET=SORT99  Sort Options              RS0209
         LR    R3,R0
         USING ICEOPT,R3
         ICM   R5,B'1111',AIDENT
         USING DFSIDENT,R5
         STRING64 '    Release  : ',DFSREL,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Module   : ',DFSPGM,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    APAR lvl : ',DFSAPAR,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Compiled : ',DFSDATE,INTO=LINE
         BRASL R14,SPACE1
         ICM   R6,B'1111',ASELTDX
         USING DFSSELTDX,R6
         STRING64 '    Enable   : ',DFSSTDX,INTO=LINE
         BRASL R14,SPACE1
         ICM   R6,B'1111',ADATA
         USING DFSDATA,R6
         CLI   DFSDABCI,X'80'
         JNE   ICEAM101
         STRING64 '    ABCODE   : ','MSG',INTO=LINE
         J     ICEAM102
ICEAM101 DS    0H
         STRING64 '    ABCODE   : ',(DFSDABCI,,R2B),INTO=LINE
ICEAM102 DS    0H
         BRASL R14,SPACE1
         STRING64 '    ALTSEQ   : ','No Report',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    ARESALL  : ',(DFSDARSA,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    ARESINV  : ',(DFSDARSI,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    CFW      : ',DFSDCFW,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    CHALT    : ',DFSDCHAL,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    CHECK    : ',DFSDCHK,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    CINV     : ',DFSDCINV,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    COBEXIT  : ',DFSDCOB,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    DIAGSIM  : ',DFSDDIAS,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    DSA      : ',(DFSDDSA,H,L5B),INTO=LINE
         BRASL R14,SPACE1
         CLC   DFSDDSMX,=H'10000'
         JNE   ICEAM105
         STRING64 '    DSPSize  : ','MAX',INTO=LINE
         J     ICEAM106
ICEAM105 DS    0H
         STRING64 '    DSPSize  : ',(DFSDDSMX,H,L5B),INTO=LINE
ICEAM106 DS    0H
         BRASL R14,SPACE1
         STRING64 '    DYNALOC  : (',DFSDDYNA,INTO=LINE
         STRING64 (LINE,,T),',',(DFSDDYNN,H,L5B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    DYNAUTO  : ',DFSDDYNI,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    DYNSPC   : ',(DFSDDYNS,H,L5B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    EFS      : ',DFSDEFSN,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    EQUALS   : ',DFSDEQUA,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    ERET     : ',DFSDERET,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    ESTAE    : ',DFSDESTA,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    EXITCK   : ',DFSDEXIT,INTO=LINE
         BRASL R14,SPACE1
         CLC   DFSDEXPM,=F'8388607'
         JNE   ICEAM110
         STRING64 '    EXPMAX   : ','MAX',INTO=LINE
         J     ICEAM111
ICEAM110 DS    0H
         STRING64 '    EXPMAX   : ',(DFSDEXPM,F,L10B),INTO=LINE
ICEAM111 DS    0H
         BRASL R14,SPACE1
         CLC   DFSDEXPO,=F'8388607'
         JNE   ICEAM112
         STRING64 '    EXPOLD   : ','MAX',INTO=LINE
         J     ICEAM113
ICEAM112 DS    0H
         STRING64 '    EXPOLD   : ',(DFSDEXPO,F,L10B),INTO=LINE
ICEAM113 DS    0H
         BRASL R14,SPACE1
         STRING64 '    EXPRES   : ',(DFSDEXPR,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    FSZEST   : ',DFSDFSZ,INTO=LINE
         BRASL R14,SPACE1
         CLI   DFSDGENE,C' '
         JNE   ICEAM115
         STRING64 '    GENER    : ','not applicable',INTO=LINE
         J     ICEAM116
ICEAM115 DS    0H
         STRING64 '    GENER    : ',DFSDGENE,INTO=LINE
ICEAM116 DS    0H
         BRASL R14,SPACE1
         STRING64 '    GNPAD    : ',DFSDGPAD,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    GNTRUNC  : ',DFSDGTRU,INTO=LINE
         BRASL R14,SPACE1
         CLC   DFSDHMAX,=X'FFFF'
         JNE   ICEAM117
         STRING64 '    HIPRMAX  : ','optimal',INTO=LINE
         J     ICEAM118
ICEAM117 DS    0H
         STRING64 '    HIPRMAX  : ',(DFSDHMAX,H,L5B),INTO=LINE
ICEAM118 DS    0H
         BRASL R14,SPACE1
         STRING64 '    IDRCPCT  : ',(DFSDIDRC,H,L5B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    IEXIT    : ',DFSDIEXI,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    IGNCKPT  : ',DFSDIGN,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    IOMAXBF  : ',(DFSDIOMA,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    LIST     : ',DFSDLIST,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    LISTX    : ',DFSDLSTX,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    LOCALE   : ',DFSDLOCA,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    MAXLIM   : ',(DFSDMAXL,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    MINLIM   : ',(DFSDMINL,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     MOSIZE doesn't exists
         JE    ICEAM124_9
         CLC   DFSDMSIZ,=F'2147483647'
         JNE   ICEAM123
         STRING64 '    MOSIZE   : ','MAX',INTO=LINE
         J     ICEAM124
ICEAM123 DS    0H
         STRING64 '    MOSIZE   : ',(DFSDMSIZ,F,L10B),INTO=LINE
ICEAM124 DS    0H
         BRASL R14,SPACE1
ICEAM124_9 DS    0H
         STRING64 '    MSGCON   : ',DFSDMSGC,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    MSGDDN   : ',DFSDMSGD,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    MSGPRT   : ',DFSDMSGP,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    NOMSGDD  : ',DFSDNMSG,INTO=LINE
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     NULLOFL/NULLOUT doesn't exists
         JE    ICEAM125_9
         STRING64 '    NULLOFL  : ',DFSDNULF,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    NULLOUT  : ',DFSDNULO,INTO=LINE
         BRASL R14,SPACE1
ICEAM125_9 DS    0H
         STRING64 '    ODMAXBF  : ',(DFSDODMA,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    OUTREL   : ',DFSDOUTR,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    OUTSEC   : ',(DFSDO2AV,FL3,L5B),DFSDO2AI,       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    OVERRGN  : ',(DFSDOVRG,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    OVFLO    : ',DFSDIVFL,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    PAD      : ',DFSDPADV,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    PARMDDN  : ',DFSDDFSP,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    RESALL   : ',(DFSDRESA,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    RESET    : ',DFSDRESE,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    RESINV   : ',(DFSDRESI,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    SDB      : ',(DFSDSDB,1,X),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    SDBMSG   : ',(DFSDSDBM,1,X),INTO=LINE
         BRASL R14,SPACE1
         CLC   DFSDSIZE,=F'2147483647'
         JNE   ICEAM140
         STRING64 '    SIZE     : ','MAX',INTO=LINE
         J     ICEAM141
ICEAM140 DS    0H
         STRING64 '    SIZE     : ',(DFSDSIZE,F,L10B),INTO=LINE
ICEAM141 DS    0H
         BRASL R14,SPACE1
         STRING64 '    SMF      : ',DFSDSMF,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    SOLRF    : ',DFSDSOLR,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    SORTLIB  : ',DFSDSRTL,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    SPANINC  : ',DFSDSPRC,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    STIMER   : ',DFSDSTIM,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    SVC      : ',(DFSDSVCN,FL1,R3B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    SZERO    : ',DFSDSZER,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    TEXIT    : ',DFSDTEXI,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    TMAXLIM  : ',(DFSDTMAX,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    TRUNC    : ',DFSDTRUN,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VERIFY   : ',DFSDVERI,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VIO      : ',DFSDVIO,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VLLONG   : ',DFSDVLLO,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VLSCMP   : ',DFSDVSLC,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VLSHRT   : ',DFSDVLS,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VSAMBSP  : ',DFSDVBUF,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VSAMEMT  : ',DFSDVSEM,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VSAMIO   : ',DFSDVSIO,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    WRKREL   : ',DFSDWRKR,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    WRKSEC   : ',(DFSDS2AV,FL3,L5B),DFSDS2AI,       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Y2PAST   : ',(DFSDY2P,H,R2B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    ZDPRINT  : ',DFSDZDPR,INTO=LINE
         BRASL R14,SPACE1
ICEINFAM2 DS 0H
         DELETE EP=ICEAM1
         L     R10,WKCELL1             Remember Start
         LOAD  EP=ICEAM2               Sort Options
         LR    R3,R0
         USING ICEOPT,R3
         ICM   R5,B'1111',AIDENT
         USING DFSIDENT,R5
         STRING64 DFSREL,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSPGM,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSAPAR,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDATE,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         ICM   R6,B'1111',ASELTDX
         USING DFSSELTDX,R6
         STRING64 DFSSTDX,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         ICM   R6,B'1111',ADATA
         USING DFSDATA,R6
         CLI   DFSDABCI,X'80'
         JNE   ICEAM201
         STRING64 'MSG',INTO=(LINE+32,16)
         J     ICEAM202
ICEAM201 DS    0H
         STRING64 (DFSDABCI,,R2B),INTO=(LINE+32,16)
ICEAM202 DS    0H
         BRASL R14,SPACE1
         STRING64 'No Report',INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDARSA,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDARSI,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDCFW,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDCHAL,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDCHK,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDCINV,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDCOB,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDDIAS,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDDSA,H,L5B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         CLC   DFSDDSMX,=H'10000'
         JNE   ICEAM205
         STRING64 'MAX',INTO=(LINE+32,16)
         J     ICEAM206
ICEAM205 DS    0H
         STRING64 (DFSDDSMX,H,L5B),INTO=(LINE+32,16)
ICEAM206 DS    0H
         BRASL R14,SPACE1
         STRING64 '(',DFSDDYNA,INTO=(LINE+32,16)
         STRING64 (LINE,,T),',',(DFSDDYNN,H,L5B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
         STRING64 DFSDDYNI,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDDYNS,H,L5B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDEFSN,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDEQUA,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDERET,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDESTA,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDEXIT,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         CLC   DFSDEXPM,=F'8388607'
         JNE   ICEAM210
         STRING64 'MAX',INTO=(LINE+32,16)
         J     ICEAM211
ICEAM210 DS    0H
         STRING64 (DFSDEXPM,F,L10B),INTO=(LINE+32,16)
ICEAM211 DS    0H
         BRASL R14,SPACE1
         CLC   DFSDEXPO,=F'8388607'
         JNE   ICEAM212
         STRING64 'MAX',INTO=(LINE+32,16)
         J     ICEAM213
ICEAM212 DS    0H
         STRING64 (DFSDEXPO,F,L10B),INTO=(LINE+32,16)
ICEAM213 DS    0H
         BRASL R14,SPACE1
         STRING64 (DFSDEXPR,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDFSZ,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         CLI   DFSDGENE,C' '
         JNE   ICEAM215
         STRING64 'not applicable',INTO=(LINE+32,16)
         J     ICEAM216
ICEAM215 DS    0H
         STRING64 DFSDGENE,INTO=(LINE+32,16)
ICEAM216 DS    0H
         BRASL R14,SPACE1
         STRING64 DFSDGPAD,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDGTRU,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         CLC   DFSDHMAX,=X'FFFF'
         JNE   ICEAM217
         STRING64 'optimal',INTO=(LINE+32,16)
         J     ICEAM218
ICEAM217 DS    0H
         STRING64 (DFSDHMAX,H,L5B),INTO=(LINE+32,16)
ICEAM218 DS    0H
         BRASL R14,SPACE1
         STRING64 (DFSDIDRC,H,L5B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDIEXI,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDIGN,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDIOMA,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDLIST,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDLSTX,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDLOCA,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDMAXL,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDMINL,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     MOSIZE doesn't exists
         JE    ICEAM224_9
         CLC   DFSDMSIZ,=F'2147483647'
         JNE   ICEAM223
         STRING64 'MAX',INTO=(LINE+32,16)
         J     ICEAM224
ICEAM223 DS    0H
         STRING64 (DFSDMSIZ,F,L10B),INTO=(LINE+32,16)
ICEAM224 DS    0H
         BRASL R14,SPACE1
ICEAM224_9 DS    0H
         STRING64 DFSDMSGC,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDMSGD,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDMSGP,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDNMSG,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     NULLOFL/NULLOUT doesn't exists
         JE    ICEAM225_9
         STRING64 DFSDNULF,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDNULO,INTO=(LINE+32,16)
         BRASL R14,SPACE1
ICEAM225_9 DS    0H
         STRING64 (DFSDODMA,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDOUTR,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDO2AV,FL3,L5B),DFSDO2AI,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDOVRG,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDIVFL,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDPADV,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDDFSP,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDRESA,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDRESE,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDRESI,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSDB,1,X),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSDBM,1,X),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         CLC   DFSDSIZE,=F'2147483647'
         JNE   ICEAM240
         STRING64 'MAX',INTO=(LINE+32,16)
         J     ICEAM241
ICEAM240 DS    0H
         STRING64 (DFSDSIZE,F,L10B),INTO=(LINE+32,16)
ICEAM241 DS    0H
         BRASL R14,SPACE1
         STRING64 DFSDSMF,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDSOLR,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDSRTL,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDSPRC,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDSTIM,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSVCN,FL1,R3B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDSZER,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDTEXI,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDTMAX,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDTRUN,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVERI,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVIO,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVLLO,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSLC,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVLS,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVBUF,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSEM,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSIO,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDWRKR,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDS2AV,FL3,L5B),DFSDS2AI,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDY2P,H,R2B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDZDPR,INTO=(LINE+32,16)
         BRASL R14,SPACE1
ICEINFAM3 DS 0H
         DELETE EP=ICEAM2
         L     R10,WKCELL1             Remember Start
         LOAD  EP=ICEAM3               Sort Options
         LR    R3,R0
         USING ICEOPT,R3
         ICM   R5,B'1111',AIDENT
         USING DFSIDENT,R5
         STRING64 DFSREL,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSPGM,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSAPAR,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDATE,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         ICM   R6,B'1111',ASELTDX
         USING DFSSELTDX,R6
         STRING64 DFSSTDX,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         ICM   R6,B'1111',ADATA
         USING DFSDATA,R6
         CLI   DFSDABCI,X'80'
         JNE   ICEAM301
         STRING64 'MSG',INTO=(LINE+49,16)
         J     ICEAM302
ICEAM301 DS    0H
         STRING64 (DFSDABCI,,R2B),INTO=(LINE+49,16)
ICEAM302 DS    0H
         BRASL R14,SPACE1
         STRING64 'No Report',INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDARSA,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDARSI,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDCFW,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDCHAL,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDCHK,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDCINV,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDCOB,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDDIAS,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDDSA,H,L5B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         CLC   DFSDDSMX,=H'10000'
         JNE   ICEAM305
         STRING64 'MAX',INTO=(LINE+49,16)
         J     ICEAM306
ICEAM305 DS    0H
         STRING64 (DFSDDSMX,H,L5B),INTO=(LINE+49,16)
ICEAM306 DS    0H
         BRASL R14,SPACE1
         STRING64 '(',DFSDDYNA,INTO=(LINE+49,16)
         STRING64 (LINE,,T),',',(DFSDDYNN,H,L5B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
         STRING64 DFSDDYNI,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDDYNS,H,L5B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDEFSN,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDEQUA,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDERET,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDESTA,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDEXIT,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         CLC   DFSDEXPM,=F'8388607'
         JNE   ICEAM310
         STRING64 'MAX',INTO=(LINE+49,16)
         J     ICEAM311
ICEAM310 DS    0H
         STRING64 (DFSDEXPM,F,L10B),INTO=(LINE+49,16)
ICEAM311 DS    0H
         BRASL R14,SPACE1
         CLC   DFSDEXPO,=F'8388607'
         JNE   ICEAM312
         STRING64 'MAX',INTO=(LINE+49,16)
         J     ICEAM313
ICEAM312 DS    0H
         STRING64 (DFSDEXPO,F,L10B),INTO=(LINE+49,16)
ICEAM313 DS    0H
         BRASL R14,SPACE1
         STRING64 (DFSDEXPR,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDFSZ,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         CLI   DFSDGENE,C' '
         JNE   ICEAM315
         STRING64 'not applicable',INTO=(LINE+49,16)
         J     ICEAM316
ICEAM315 DS    0H
         STRING64 DFSDGENE,INTO=(LINE+49,16)
ICEAM316 DS    0H
         BRASL R14,SPACE1
         STRING64 DFSDGPAD,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDGTRU,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         CLC   DFSDHMAX,=X'FFFF'
         JNE   ICEAM317
         STRING64 'optimal',INTO=(LINE+49,16)
         J     ICEAM318
ICEAM317 DS    0H
         STRING64 (DFSDHMAX,H,L5B),INTO=(LINE+49,16)
ICEAM318 DS    0H
         BRASL R14,SPACE1
         STRING64 (DFSDIDRC,H,L5B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDIEXI,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDIGN,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDIOMA,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDLIST,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDLSTX,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDLOCA,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDMAXL,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDMINL,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     MOSIZE doesn't exists
         JE    ICEAM324_9
         CLC   DFSDMSIZ,=F'2147483647'
         JNE   ICEAM323
         STRING64 'MAX',INTO=(LINE+49,16)
         J     ICEAM324
ICEAM323 DS    0H
         STRING64 (DFSDMSIZ,F,L10B),INTO=(LINE+49,16)
ICEAM324 DS    0H
         BRASL R14,SPACE1
ICEAM324_9 DS    0H
         STRING64 DFSDMSGC,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDMSGD,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDMSGP,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDNMSG,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     NULLOFL/NULLOUT doesn't exists
         JE    ICEAM325_9
         STRING64 DFSDNULF,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDNULO,INTO=(LINE+49,16)
         BRASL R14,SPACE1
ICEAM325_9 DS    0H
         STRING64 (DFSDODMA,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDOUTR,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDO2AV,FL3,L5B),DFSDO2AI,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDOVRG,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDIVFL,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDPADV,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDDFSP,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDRESA,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDRESE,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDRESI,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSDB,1,X),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSDBM,1,X),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         CLC   DFSDSIZE,=F'2147483647'
         JNE   ICEAM340
         STRING64 'MAX',INTO=(LINE+49,16)
         J     ICEAM341
ICEAM340 DS    0H
         STRING64 (DFSDSIZE,F,L10B),INTO=(LINE+49,16)
ICEAM341 DS    0H
         BRASL R14,SPACE1
         STRING64 DFSDSMF,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDSOLR,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDSRTL,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDSPRC,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDSTIM,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSVCN,FL1,R3B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDSZER,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDTEXI,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDTMAX,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDTRUN,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVERI,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVIO,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVLLO,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSLC,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVLS,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVBUF,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSEM,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSIO,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDWRKR,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDS2AV,FL3,L5B),DFSDS2AI,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDY2P,H,R2B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDZDPR,INTO=(LINE+49,16)
         BRASL R14,SPACE1
ICEINFAM4 DS 0H
         DELETE EP=ICEAM3
         L     R10,WKCELL1             Remember Start
         LOAD  EP=ICEAM4               Sort Options
         LR    R3,R0
         USING ICEOPT,R3
         ICM   R5,B'1111',AIDENT
         USING DFSIDENT,R5
         STRING64 DFSREL,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSPGM,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSAPAR,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDATE,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         ICM   R6,B'1111',ASELTDX
         USING DFSSELTDX,R6
         STRING64 DFSSTDX,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         ICM   R6,B'1111',ADATA
         USING DFSDATA,R6
         CLI   DFSDABCI,X'80'
         JNE   ICEAM401
         STRING64 'MSG',INTO=(LINE+66,16)
         J     ICEAM402
ICEAM401 DS    0H
         STRING64 (DFSDABCI,,R2B),INTO=(LINE+66,16)
ICEAM402 DS    0H
         BRASL R14,SPACE1
         STRING64 'No Report',INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDARSA,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDARSI,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDCFW,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDCHAL,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDCHK,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDCINV,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDCOB,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDDIAS,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDDSA,H,L5B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         CLC   DFSDDSMX,=H'10000'
         JNE   ICEAM405
         STRING64 'MAX',INTO=(LINE+66,16)
         J     ICEAM406
ICEAM405 DS    0H
         STRING64 (DFSDDSMX,H,L5B),INTO=(LINE+66,16)
ICEAM406 DS    0H
         BRASL R14,SPACE1
         STRING64 '(',DFSDDYNA,INTO=(LINE+66,16)
         STRING64 (LINE,,T),',',(DFSDDYNN,H,L5B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
         STRING64 DFSDDYNI,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDDYNS,H,L5B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDEFSN,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDEQUA,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDERET,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDESTA,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDEXIT,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         CLC   DFSDEXPM,=F'8388607'
         JNE   ICEAM410
         STRING64 'MAX',INTO=(LINE+66,16)
         J     ICEAM411
ICEAM410 DS    0H
         STRING64 (DFSDEXPM,F,L10B),INTO=(LINE+66,16)
ICEAM411 DS    0H
         BRASL R14,SPACE1
         CLC   DFSDEXPO,=F'8388607'
         JNE   ICEAM412
         STRING64 'MAX',INTO=(LINE+66,16)
         J     ICEAM413
ICEAM412 DS    0H
         STRING64 (DFSDEXPO,F,L10B),INTO=(LINE+66,16)
ICEAM413 DS    0H
         BRASL R14,SPACE1
         STRING64 (DFSDEXPR,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDFSZ,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         CLI   DFSDGENE,C' '
         JNE   ICEAM415
         STRING64 'not applicable',INTO=(LINE+66,16)
         J     ICEAM416
ICEAM415 DS    0H
         STRING64 DFSDGENE,INTO=(LINE+66,16)
ICEAM416 DS    0H
         BRASL R14,SPACE1
         STRING64 DFSDGPAD,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDGTRU,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         CLC   DFSDHMAX,=X'FFFF'
         JNE   ICEAM417
         STRING64 'optimal',INTO=(LINE+66,16)
         J     ICEAM418
ICEAM417 DS    0H
         STRING64 (DFSDHMAX,H,L5B),INTO=(LINE+66,16)
ICEAM418 DS    0H
         BRASL R14,SPACE1
         STRING64 (DFSDIDRC,H,L5B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDIEXI,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDIGN,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDIOMA,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDLIST,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDLSTX,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDLOCA,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDMAXL,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDMINL,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     MOSIZE doesn't exists
         JE    ICEAM424_9
         CLC   DFSDMSIZ,=F'2147483647'
         JNE   ICEAM423
         STRING64 'MAX',INTO=(LINE+66,16)
         J     ICEAM424
ICEAM423 DS    0H
         STRING64 (DFSDMSIZ,F,L10B),INTO=(LINE+66,16)
ICEAM424 DS    0H
         BRASL R14,SPACE1
ICEAM424_9 DS    0H
         STRING64 DFSDMSGC,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDMSGD,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDMSGP,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDNMSG,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     NULLOFL/NULLOUT doesn't exists
         JE    ICEAM425_9
         STRING64 DFSDNULF,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDNULO,INTO=(LINE+66,16)
         BRASL R14,SPACE1
ICEAM425_9 DS    0H
         STRING64 (DFSDODMA,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDOUTR,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDO2AV,FL3,L5B),DFSDO2AI,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDOVRG,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDIVFL,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDPADV,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDDFSP,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDRESA,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDRESE,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDRESI,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSDB,1,X),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSDBM,1,X),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         CLC   DFSDSIZE,=F'2147483647'
         JNE   ICEAM440
         STRING64 'MAX',INTO=(LINE+66,16)
         J     ICEAM441
ICEAM440 DS    0H
         STRING64 (DFSDSIZE,F,L10B),INTO=(LINE+66,16)
ICEAM441 DS    0H
         BRASL R14,SPACE1
         STRING64 DFSDSMF,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDSOLR,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDSRTL,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDSPRC,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDSTIM,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSVCN,FL1,R3B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDSZER,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDTEXI,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDTMAX,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDTRUN,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVERI,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVIO,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVLLO,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSLC,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVLS,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVBUF,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSEM,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSIO,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDWRKR,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDS2AV,FL3,L5B),DFSDS2AI,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDY2P,H,R2B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDZDPR,INTO=(LINE+66,16)
         BRASL R14,SPACE2
ICEINFTD1 DS    0H
         DELETE EP=ICEAM4
         STRING64 '    Item       TD1(ICETD1)      TD2(ICETD2)',       X
               '      TD3(ICETD3)      TSOTD4(ICETD4)',                X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ---------- ---------------- -----------',         X
               '----- ---------------- --------------',                X
               INTO=LINE
         BRASL R14,SPACE1
         ST    R10,WKCELL1             Remember Start
         LOAD  EP=ICETD1,ERRET=SORT99  Sort Options
         LR    R3,R0
         USING ICEOPT,R3
         ICM   R5,B'1111',AIDENT
         USING DFSIDENT,R5
         STRING64 '    Release  : ',DFSREL,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Module   : ',DFSPGM,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    APAR lvl : ',DFSAPAR,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Compiled : ',DFSDATE,INTO=LINE
         BRASL R14,SPACE1
         ICM   R6,B'1111',ASELTDX
         USING DFSTOD,R6
         CLC   DFSSUN,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD1SU
         STRING64 '    Sunday   : ','None',INTO=LINE
         J     ICETD1SU_9
ICETD1SU DS    0H
         STRING64 '    Sunday   : ','Time specified',INTO=LINE
ICETD1SU_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSMON,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD1MO
         STRING64 '    Monday   : ','None',INTO=LINE
         J     ICETD1MO_9
ICETD1MO DS    0H
         STRING64 '    Monday   : ','Time specified',INTO=LINE
ICETD1MO_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSTUE,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD1TU
         STRING64 '    Tuesday  : ','None',INTO=LINE
         J     ICETD1TU_9
ICETD1TU DS    0H
         STRING64 '    Tuesday  : ','Time specified',INTO=LINE
ICETD1TU_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSWED,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD1WE
         STRING64 '    Wednesday: ','None',INTO=LINE
         J     ICETD1WE_9
ICETD1WE DS    0H
         STRING64 '    Wednesday: ','Time specified',INTO=LINE
ICETD1WE_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSTHU,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD1TH
         STRING64 '    Thuesday : ','None',INTO=LINE
         J     ICETD1TH_9
ICETD1TH DS    0H
         STRING64 '    Thuesday : ','Time specified',INTO=LINE
ICETD1TH_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSFRI,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD1FR
         STRING64 '    Friday   : ','None',INTO=LINE
         J     ICETD1FR_9
ICETD1FR DS    0H
         STRING64 '    Friday   : ','Time specified',INTO=LINE
ICETD1FR_9 DS    0H
         CLC   DFSSAT,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD1SA
         STRING64 '    Saturday : ','None',INTO=LINE
         J     ICETD1SA_9
ICETD1SA DS    0H
         STRING64 '    Saturday : ','Time specified',INTO=LINE
ICETD1SA_9 DS    0H
         BRASL R14,SPACE1
         ICM   R6,B'1111',ADATA
         USING DFSDATA,R6
         CLI   DFSDABCI,X'80'
         JNE   ICETD101
         STRING64 '    ABCODE   : ','MSG',INTO=LINE
         J     ICETD102
ICETD101 DS    0H
         STRING64 '    ABCODE   : ',(DFSDABCI,,R2B),INTO=LINE
ICETD102 DS    0H
         BRASL R14,SPACE1
         STRING64 '    ALTSEQ   : ','No Report',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    ARESALL  : ',(DFSDARSA,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    ARESINV  : ',(DFSDARSI,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    CFW      : ',DFSDCFW,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    CHALT    : ',DFSDCHAL,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    CHECK    : ',DFSDCHK,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    CINV     : ',DFSDCINV,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    COBEXIT  : ',DFSDCOB,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    DIAGSIM  : ',DFSDDIAS,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    DSA      : ',(DFSDDSA,H,L5B),INTO=LINE
         BRASL R14,SPACE1
         CLC   DFSDDSMX,=H'10000'
         JNE   ICETD105
         STRING64 '    DSPSize  : ','MAX',INTO=LINE
         J     ICETD106
ICETD105 DS    0H
         STRING64 '    DSPSize  : ',(DFSDDSMX,H,L5B),INTO=LINE
ICETD106 DS    0H
         BRASL R14,SPACE1
         STRING64 '    DYNALOC  : (',DFSDDYNA,INTO=LINE
         STRING64 (LINE,,T),',',(DFSDDYNN,H,L5B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    DYNAUTO  : ',DFSDDYNI,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    DYNSPC   : ',(DFSDDYNS,H,L5B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    EFS      : ',DFSDEFSN,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    EQUALS   : ',DFSDEQUA,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    ERET     : ',DFSDERET,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    ESTAE    : ',DFSDESTA,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    EXITCK   : ',DFSDEXIT,INTO=LINE
         BRASL R14,SPACE1
         CLC   DFSDEXPM,=F'8388607'
         JNE   ICETD110
         STRING64 '    EXPMAX   : ','MAX',INTO=LINE
         J     ICETD111
ICETD110 DS    0H
         STRING64 '    EXPMAX   : ',(DFSDEXPM,F,L10B),INTO=LINE
ICETD111 DS    0H
         BRASL R14,SPACE1
         CLC   DFSDEXPO,=F'8388607'
         JNE   ICETD112
         STRING64 '    EXPOLD   : ','MAX',INTO=LINE
         J     ICETD113
ICETD112 DS    0H
         STRING64 '    EXPOLD   : ',(DFSDEXPO,F,L10B),INTO=LINE
ICETD113 DS    0H
         BRASL R14,SPACE1
         STRING64 '    EXPRES   : ',(DFSDEXPR,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    FSZEST   : ',DFSDFSZ,INTO=LINE
         BRASL R14,SPACE1
         CLI   DFSDGENE,C' '
         JNE   ICETD115
         STRING64 '    GENER    : ','not applicable',INTO=LINE
         J     ICETD116
ICETD115 DS    0H
         STRING64 '    GENER    : ',DFSDGENE,INTO=LINE
ICETD116 DS    0H
         BRASL R14,SPACE1
         STRING64 '    GNPAD    : ',DFSDGPAD,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    GNTRUNC  : ',DFSDGTRU,INTO=LINE
         BRASL R14,SPACE1
         CLC   DFSDHMAX,=X'FFFF'
         JNE   ICETD117
         STRING64 '    HIPRMAX  : ','optimal',INTO=LINE
         J     ICETD118
ICETD117 DS    0H
         STRING64 '    HIPRMAX  : ',(DFSDHMAX,H,L5B),INTO=LINE
ICETD118 DS    0H
         BRASL R14,SPACE1
         STRING64 '    IDRCPCT  : ',(DFSDIDRC,H,L5B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    IEXIT    : ',DFSDIEXI,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    IGNCKPT  : ',DFSDIGN,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    IOMAXBF  : ',(DFSDIOMA,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    LIST     : ',DFSDLIST,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    LISTX    : ',DFSDLSTX,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    LOCALE   : ',DFSDLOCA,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    MAXLIM   : ',(DFSDMAXL,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    MINLIM   : ',(DFSDMINL,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     MOSIZE doesn't exists
         JE    ICETD124_9
         CLC   DFSDMSIZ,=F'2147483647'
         JNE   ICETD123
         STRING64 '    MOSIZE   : ','MAX',INTO=LINE
         J     ICETD124
ICETD123 DS    0H
         STRING64 '    MOSIZE   : ',(DFSDMSIZ,F,L10B),INTO=LINE
ICETD124 DS    0H
         BRASL R14,SPACE1
ICETD124_9 DS    0H
         STRING64 '    MSGCON   : ',DFSDMSGC,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    MSGDDN   : ',DFSDMSGD,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    MSGPRT   : ',DFSDMSGP,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    NOMSGDD  : ',DFSDNMSG,INTO=LINE
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     NULLOFL/NULLOUT doesn't exists
         JE    ICETD125_9
         STRING64 '    NULLOFL  : ',DFSDNULF,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    NULLOUT  : ',DFSDNULO,INTO=LINE
         BRASL R14,SPACE1
ICETD125_9 DS    0H
         STRING64 '    ODMAXBF  : ',(DFSDODMA,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    OUTREL   : ',DFSDOUTR,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    OUTSEC   : ',(DFSDO2AV,FL3,L5B),DFSDO2AI,       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    OVERRGN  : ',(DFSDOVRG,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    OVFLO    : ',DFSDIVFL,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    PAD      : ',DFSDPADV,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    PARMDDN  : ',DFSDDFSP,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    RESALL   : ',(DFSDRESA,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    RESET    : ',DFSDRESE,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    RESINV   : ',(DFSDRESI,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    SDB      : ',(DFSDSDB,1,X),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    SDBMSG   : ',(DFSDSDBM,1,X),INTO=LINE
         BRASL R14,SPACE1
         CLC   DFSDSIZE,=F'2147483647'
         JNE   ICETD140
         STRING64 '    SIZE     : ','MAX',INTO=LINE
         J     ICETD141
ICETD140 DS    0H
         STRING64 '    SIZE     : ',(DFSDSIZE,F,L10B),INTO=LINE
ICETD141 DS    0H
         BRASL R14,SPACE1
         STRING64 '    SMF      : ',DFSDSMF,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    SOLRF    : ',DFSDSOLR,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    SORTLIB  : ',DFSDSRTL,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    SPANINC  : ',DFSDSPRC,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    STIMER   : ',DFSDSTIM,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    SVC      : ',(DFSDSVCN,FL1,R3B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    SZERO    : ',DFSDSZER,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    TEXIT    : ',DFSDTEXI,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    TMAXLIM  : ',(DFSDTMAX,F,L10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    TRUNC    : ',DFSDTRUN,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VERIFY   : ',DFSDVERI,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VIO      : ',DFSDVIO,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VLLONG   : ',DFSDVLLO,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VLSCMP   : ',DFSDVSLC,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VLSHRT   : ',DFSDVLS,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VSAMBSP  : ',DFSDVBUF,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VSAMEMT  : ',DFSDVSEM,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    VSAMIO   : ',DFSDVSIO,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    WRKREL   : ',DFSDWRKR,INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    WRKSEC   : ',(DFSDS2AV,FL3,L5B),DFSDS2AI,       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Y2PAST   : ',(DFSDY2P,H,R2B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    ZDPRINT  : ',DFSDZDPR,INTO=LINE
         BRASL R14,SPACE1
ICEINFTD2 DS 0H
         DELETE EP=ICETD1
         L     R10,WKCELL1             Remember Start
         LOAD  EP=ICETD2               Sort Options
         LR    R3,R0
         USING ICEOPT,R3
         ICM   R5,B'1111',AIDENT
         USING DFSIDENT,R5
         STRING64 DFSREL,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSPGM,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSAPAR,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDATE,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         ICM   R6,B'1111',ASELTDX
         USING DFSTOD,R6
         CLC   DFSSUN,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD2SU
         STRING64 'None',INTO=(LINE+32,16)
         J     ICETD2SU_9
ICETD2SU DS    0H
         STRING64 'Time specified',INTO=(LINE+32,16)
ICETD2SU_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSMON,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD2MO
         STRING64 'None',INTO=(LINE+32,16)
         J     ICETD2MO_9
ICETD2MO DS    0H
         STRING64 'Time specified',INTO=(LINE+32,16)
ICETD2MO_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSTUE,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD2TU
         STRING64 'None',INTO=(LINE+32,16)
         J     ICETD2TU_9
ICETD2TU DS    0H
         STRING64 'Time specified',INTO=(LINE+32,16)
ICETD2TU_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSWED,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD2WE
         STRING64 'None',INTO=(LINE+32,16)
         J     ICETD2WE_9
ICETD2WE DS    0H
         STRING64 'Time specified',INTO=(LINE+32,16)
ICETD2WE_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSTHU,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD2TH
         STRING64 'None',INTO=(LINE+32,16)
         J     ICETD2TH_9
ICETD2TH DS    0H
         STRING64 'Time specified',INTO=(LINE+32,16)
ICETD2TH_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSFRI,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD2FR
         STRING64 'None',INTO=(LINE+32,16)
         J     ICETD2FR_9
ICETD2FR DS    0H
         STRING64 'Time specified',INTO=(LINE+32,16)
ICETD2FR_9 DS    0H
         CLC   DFSSAT,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD2SA
         STRING64 'None',INTO=(LINE+32,16)
         J     ICETD2SA_9
ICETD2SA DS    0H
         STRING64 'Time specified',INTO=(LINE+32,16)
ICETD2SA_9 DS    0H
         BRASL R14,SPACE1
         ICM   R6,B'1111',ADATA
         USING DFSDATA,R6
         CLI   DFSDABCI,X'80'
         JNE   ICETD201
         STRING64 'MSG',INTO=(LINE+32,16)
         J     ICETD202
ICETD201 DS    0H
         STRING64 (DFSDABCI,,R2B),INTO=(LINE+32,16)
ICETD202 DS    0H
         BRASL R14,SPACE1
         STRING64 'No Report',INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDARSA,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDARSI,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDCFW,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDCHAL,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDCHK,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDCINV,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDCOB,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDDIAS,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDDSA,H,L5B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         CLC   DFSDDSMX,=H'10000'
         JNE   ICETD205
         STRING64 'MAX',INTO=(LINE+32,16)
         J     ICETD206
ICETD205 DS    0H
         STRING64 (DFSDDSMX,H,L5B),INTO=(LINE+32,16)
ICETD206 DS    0H
         BRASL R14,SPACE1
         STRING64 '(',DFSDDYNA,INTO=(LINE+32,16)
         STRING64 (LINE,,T),',',(DFSDDYNN,H,L5B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
         STRING64 DFSDDYNI,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDDYNS,H,L5B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDEFSN,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDEQUA,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDERET,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDESTA,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDEXIT,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         CLC   DFSDEXPM,=F'8388607'
         JNE   ICETD210
         STRING64 'MAX',INTO=(LINE+32,16)
         J     ICETD211
ICETD210 DS    0H
         STRING64 (DFSDEXPM,F,L10B),INTO=(LINE+32,16)
ICETD211 DS    0H
         BRASL R14,SPACE1
         CLC   DFSDEXPO,=F'8388607'
         JNE   ICETD212
         STRING64 'MAX',INTO=(LINE+32,16)
         J     ICETD213
ICETD212 DS    0H
         STRING64 (DFSDEXPO,F,L10B),INTO=(LINE+32,16)
ICETD213 DS    0H
         BRASL R14,SPACE1
         STRING64 (DFSDEXPR,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDFSZ,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         CLI   DFSDGENE,C' '
         JNE   ICETD215
         STRING64 'not applicable',INTO=(LINE+32,16)
         J     ICETD216
ICETD215 DS    0H
         STRING64 DFSDGENE,INTO=(LINE+32,16)
ICETD216 DS    0H
         BRASL R14,SPACE1
         STRING64 DFSDGPAD,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDGTRU,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         CLC   DFSDHMAX,=X'FFFF'
         JNE   ICETD217
         STRING64 'optimal',INTO=(LINE+32,16)
         J     ICETD218
ICETD217 DS    0H
         STRING64 (DFSDHMAX,H,L5B),INTO=(LINE+32,16)
ICETD218 DS    0H
         BRASL R14,SPACE1
         STRING64 (DFSDIDRC,H,L5B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDIEXI,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDIGN,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDIOMA,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDLIST,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDLSTX,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDLOCA,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDMAXL,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDMINL,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     MOSIZE doesn't exists
         JE    ICETD224_9
         CLC   DFSDMSIZ,=F'2147483647'
         JNE   ICETD223
         STRING64 'MAX',INTO=(LINE+32,16)
         J     ICETD224
ICETD223 DS    0H
         STRING64 (DFSDMSIZ,F,L10B),INTO=(LINE+32,16)
ICETD224 DS    0H
         BRASL R14,SPACE1
ICETD224_9 DS    0H
         STRING64 DFSDMSGC,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDMSGD,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDMSGP,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDNMSG,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     NULLOFL/NULLOUT doesn't exists
         JE    ICETD225_9
         STRING64 DFSDNULF,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDNULO,INTO=(LINE+32,16)
         BRASL R14,SPACE1
ICETD225_9 DS    0H
         STRING64 (DFSDODMA,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDOUTR,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDO2AV,FL3,L5B),DFSDO2AI,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDOVRG,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDIVFL,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDPADV,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDDFSP,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDRESA,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDRESE,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDRESI,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSDB,1,X),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSDBM,1,X),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         CLC   DFSDSIZE,=F'2147483647'
         JNE   ICETD240
         STRING64 'MAX',INTO=(LINE+32,16)
         J     ICETD241
ICETD240 DS    0H
         STRING64 (DFSDSIZE,F,L10B),INTO=(LINE+32,16)
ICETD241 DS    0H
         BRASL R14,SPACE1
         STRING64 DFSDSMF,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDSOLR,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDSRTL,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDSPRC,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDSTIM,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSVCN,FL1,R3B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDSZER,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDTEXI,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDTMAX,F,L10B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDTRUN,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVERI,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVIO,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVLLO,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSLC,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVLS,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVBUF,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSEM,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSIO,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDWRKR,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDS2AV,FL3,L5B),DFSDS2AI,INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 (DFSDY2P,H,R2B),INTO=(LINE+32,16)
         BRASL R14,SPACE1
         STRING64 DFSDZDPR,INTO=(LINE+32,16)
         BRASL R14,SPACE1
ICEINFTD3 DS 0H
         DELETE EP=ICETD2
         L     R10,WKCELL1             Remember Start
         LOAD  EP=ICETD3               Sort Options
         LR    R3,R0
         USING ICEOPT,R3
         ICM   R5,B'1111',AIDENT
         USING DFSIDENT,R5
         STRING64 DFSREL,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSPGM,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSAPAR,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDATE,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         ICM   R6,B'1111',ASELTDX
         USING DFSTOD,R6
         CLC   DFSSUN,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD3SU
         STRING64 'None',INTO=(LINE+49,16)
         J     ICETD3SU_9
ICETD3SU DS    0H
         STRING64 'Time specified',INTO=(LINE+49,16)
ICETD3SU_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSMON,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD3MO
         STRING64 'None',INTO=(LINE+49,16)
         J     ICETD3MO_9
ICETD3MO DS    0H
         STRING64 'Time specified',INTO=(LINE+49,16)
ICETD3MO_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSTUE,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD3TU
         STRING64 'None',INTO=(LINE+49,16)
         J     ICETD3TU_9
ICETD3TU DS    0H
         STRING64 'Time specified',INTO=(LINE+49,16)
ICETD3TU_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSWED,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD3WE
         STRING64 'None',INTO=(LINE+49,16)
         J     ICETD3WE_9
ICETD3WE DS    0H
         STRING64 'Time specified',INTO=(LINE+49,16)
ICETD3WE_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSTHU,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD3TH
         STRING64 'None',INTO=(LINE+49,16)
         J     ICETD3TH_9
ICETD3TH DS    0H
         STRING64 'Time specified',INTO=(LINE+49,16)
ICETD3TH_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSFRI,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD3FR
         STRING64 'None',INTO=(LINE+49,16)
         J     ICETD3FR_9
ICETD3FR DS    0H
         STRING64 'Time specified',INTO=(LINE+49,16)
ICETD3FR_9 DS    0H
         CLC   DFSSAT,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD3SA
         STRING64 'None',INTO=(LINE+49,16)
         J     ICETD3SA_9
ICETD3SA DS    0H
         STRING64 'Time specified',INTO=(LINE+49,16)
ICETD3SA_9 DS    0H
         BRASL R14,SPACE1
         ICM   R6,B'1111',ADATA
         USING DFSDATA,R6
         CLI   DFSDABCI,X'80'
         JNE   ICETD301
         STRING64 'MSG',INTO=(LINE+49,16)
         J     ICETD302
ICETD301 DS    0H
         STRING64 (DFSDABCI,,R2B),INTO=(LINE+49,16)
ICETD302 DS    0H
         BRASL R14,SPACE1
         STRING64 'No Report',INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDARSA,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDARSI,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDCFW,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDCHAL,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDCHK,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDCINV,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDCOB,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDDIAS,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDDSA,H,L5B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         CLC   DFSDDSMX,=H'10000'
         JNE   ICETD305
         STRING64 'MAX',INTO=(LINE+49,16)
         J     ICETD306
ICETD305 DS    0H
         STRING64 (DFSDDSMX,H,L5B),INTO=(LINE+49,16)
ICETD306 DS    0H
         BRASL R14,SPACE1
         STRING64 '(',DFSDDYNA,INTO=(LINE+49,16)
         STRING64 (LINE,,T),',',(DFSDDYNN,H,L5B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
         STRING64 DFSDDYNI,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDDYNS,H,L5B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDEFSN,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDEQUA,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDERET,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDESTA,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDEXIT,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         CLC   DFSDEXPM,=F'8388607'
         JNE   ICETD310
         STRING64 'MAX',INTO=(LINE+49,16)
         J     ICETD311
ICETD310 DS    0H
         STRING64 (DFSDEXPM,F,L10B),INTO=(LINE+49,16)
ICETD311 DS    0H
         BRASL R14,SPACE1
         CLC   DFSDEXPO,=F'8388607'
         JNE   ICETD312
         STRING64 'MAX',INTO=(LINE+49,16)
         J     ICETD313
ICETD312 DS    0H
         STRING64 (DFSDEXPO,F,L10B),INTO=(LINE+49,16)
ICETD313 DS    0H
         BRASL R14,SPACE1
         STRING64 (DFSDEXPR,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDFSZ,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         CLI   DFSDGENE,C' '
         JNE   ICETD315
         STRING64 'not applicable',INTO=(LINE+49,16)
         J     ICETD316
ICETD315 DS    0H
         STRING64 DFSDGENE,INTO=(LINE+49,16)
ICETD316 DS    0H
         BRASL R14,SPACE1
         STRING64 DFSDGPAD,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDGTRU,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         CLC   DFSDHMAX,=X'FFFF'
         JNE   ICETD317
         STRING64 'optimal',INTO=(LINE+49,16)
         J     ICETD318
ICETD317 DS    0H
         STRING64 (DFSDHMAX,H,L5B),INTO=(LINE+49,16)
ICETD318 DS    0H
         BRASL R14,SPACE1
         STRING64 (DFSDIDRC,H,L5B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDIEXI,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDIGN,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDIOMA,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDLIST,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDLSTX,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDLOCA,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDMAXL,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDMINL,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     MOSIZE doesn't exists
         JE    ICETD324_9
         CLC   DFSDMSIZ,=F'2147483647'
         JNE   ICETD323
         STRING64 'MAX',INTO=(LINE+49,16)
         J     ICETD324
ICETD323 DS    0H
         STRING64 (DFSDMSIZ,F,L10B),INTO=(LINE+49,16)
ICETD324 DS    0H
         BRASL R14,SPACE1
ICETD324_9 DS    0H
         STRING64 DFSDMSGC,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDMSGD,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDMSGP,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDNMSG,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     NULLOFL/NULLOUT doesn't exists
         JE    ICETD325_9
         STRING64 DFSDNULF,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDNULO,INTO=(LINE+49,16)
         BRASL R14,SPACE1
ICETD325_9 DS    0H
         STRING64 (DFSDODMA,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDOUTR,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDO2AV,FL3,L5B),DFSDO2AI,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDOVRG,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDIVFL,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDPADV,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDDFSP,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDRESA,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDRESE,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDRESI,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSDB,1,X),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSDBM,1,X),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         CLC   DFSDSIZE,=F'2147483647'
         JNE   ICETD340
         STRING64 'MAX',INTO=(LINE+49,16)
         J     ICETD341
ICETD340 DS    0H
         STRING64 (DFSDSIZE,F,L10B),INTO=(LINE+49,16)
ICETD341 DS    0H
         BRASL R14,SPACE1
         STRING64 DFSDSMF,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDSOLR,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDSRTL,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDSPRC,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDSTIM,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSVCN,FL1,R3B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDSZER,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDTEXI,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDTMAX,F,L10B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDTRUN,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVERI,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVIO,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVLLO,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSLC,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVLS,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVBUF,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSEM,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSIO,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDWRKR,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDS2AV,FL3,L5B),DFSDS2AI,INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 (DFSDY2P,H,R2B),INTO=(LINE+49,16)
         BRASL R14,SPACE1
         STRING64 DFSDZDPR,INTO=(LINE+49,16)
         BRASL R14,SPACE1
ICEINFTD4 DS 0H
         DELETE EP=ICETD3
         L     R10,WKCELL1             Remember Start
         LOAD  EP=ICETD4               Sort Options
         LR    R3,R0
         USING ICEOPT,R3
         ICM   R5,B'1111',AIDENT
         USING DFSIDENT,R5
         STRING64 DFSREL,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSPGM,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSAPAR,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDATE,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         ICM   R6,B'1111',ASELTDX
         USING DFSTOD,R6
         CLC   DFSSUN,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD4SU
         STRING64 'None',INTO=(LINE+66,16)
         J     ICETD4SU_9
ICETD4SU DS    0H
         STRING64 'Time specified',INTO=(LINE+66,16)
ICETD4SU_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSMON,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD4MO
         STRING64 'None',INTO=(LINE+66,16)
         J     ICETD4MO_9
ICETD4MO DS    0H
         STRING64 'Time specified',INTO=(LINE+66,16)
ICETD4MO_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSTUE,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD4TU
         STRING64 'None',INTO=(LINE+66,16)
         J     ICETD4TU_9
ICETD4TU DS    0H
         STRING64 'Time specified',INTO=(LINE+66,16)
ICETD4TU_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSWED,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD4WE
         STRING64 'None',INTO=(LINE+66,16)
         J     ICETD4WE_9
ICETD4WE DS    0H
         STRING64 'Time specified',INTO=(LINE+66,16)
ICETD4WE_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSTHU,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD4TH
         STRING64 'None',INTO=(LINE+66,16)
         J     ICETD4TH_9
ICETD4TH DS    0H
         STRING64 'Time specified',INTO=(LINE+66,16)
ICETD4TH_9 DS    0H
         BRASL R14,SPACE1
         CLC   DFSFRI,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD4FR
         STRING64 'None',INTO=(LINE+66,16)
         J     ICETD4FR_9
ICETD4FR DS    0H
         STRING64 'Time specified',INTO=(LINE+66,16)
ICETD4FR_9 DS    0H
         CLC   DFSSAT,=X'09600000270F0000270F0000270F0000'
         JNE   ICETD4SA
         STRING64 'None',INTO=(LINE+66,16)
         J     ICETD4SA_9
ICETD4SA DS    0H
         STRING64 'Time specified',INTO=(LINE+66,16)
ICETD4SA_9 DS    0H
         BRASL R14,SPACE1
         ICM   R6,B'1111',ADATA
         USING DFSDATA,R6
         CLI   DFSDABCI,X'80'
         JNE   ICETD401
         STRING64 'MSG',INTO=(LINE+66,16)
         J     ICETD402
ICETD401 DS    0H
         STRING64 (DFSDABCI,,R2B),INTO=(LINE+66,16)
ICETD402 DS    0H
         BRASL R14,SPACE1
         STRING64 'No Report',INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDARSA,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDARSI,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDCFW,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDCHAL,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDCHK,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDCINV,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDCOB,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDDIAS,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDDSA,H,L5B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         CLC   DFSDDSMX,=H'10000'
         JNE   ICETD405
         STRING64 'MAX',INTO=(LINE+66,16)
         J     ICETD406
ICETD405 DS    0H
         STRING64 (DFSDDSMX,H,L5B),INTO=(LINE+66,16)
ICETD406 DS    0H
         BRASL R14,SPACE1
         STRING64 '(',DFSDDYNA,INTO=(LINE+66,16)
         STRING64 (LINE,,T),',',(DFSDDYNN,H,L5B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
         STRING64 DFSDDYNI,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDDYNS,H,L5B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDEFSN,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDEQUA,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDERET,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDESTA,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDEXIT,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         CLC   DFSDEXPM,=F'8388607'
         JNE   ICETD410
         STRING64 'MAX',INTO=(LINE+66,16)
         J     ICETD411
ICETD410 DS    0H
         STRING64 (DFSDEXPM,F,L10B),INTO=(LINE+66,16)
ICETD411 DS    0H
         BRASL R14,SPACE1
         CLC   DFSDEXPO,=F'8388607'
         JNE   ICETD412
         STRING64 'MAX',INTO=(LINE+66,16)
         J     ICETD413
ICETD412 DS    0H
         STRING64 (DFSDEXPO,F,L10B),INTO=(LINE+66,16)
ICETD413 DS    0H
         BRASL R14,SPACE1
         STRING64 (DFSDEXPR,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDFSZ,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         CLI   DFSDGENE,C' '
         JNE   ICETD415
         STRING64 'not applicable',INTO=(LINE+66,16)
         J     ICETD416
ICETD415 DS    0H
         STRING64 DFSDGENE,INTO=(LINE+66,16)
ICETD416 DS    0H
         BRASL R14,SPACE1
         STRING64 DFSDGPAD,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDGTRU,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         CLC   DFSDHMAX,=X'FFFF'
         JNE   ICETD417
         STRING64 'optimal',INTO=(LINE+66,16)
         J     ICETD418
ICETD417 DS    0H
         STRING64 (DFSDHMAX,H,L5B),INTO=(LINE+66,16)
ICETD418 DS    0H
         BRASL R14,SPACE1
         STRING64 (DFSDIDRC,H,L5B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDIEXI,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDIGN,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDIOMA,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDLIST,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDLSTX,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDLOCA,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDMAXL,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDMINL,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     MOSIZE doesn't exists
         JE    ICETD424_9
         CLC   DFSDMSIZ,=F'2147483647'
         JNE   ICETD423
         STRING64 'MAX',INTO=(LINE+66,16)
         J     ICETD424
ICETD423 DS    0H
         STRING64 (DFSDMSIZ,F,L10B),INTO=(LINE+66,16)
ICETD424 DS    0H
         BRASL R14,SPACE1
ICETD424_9 DS    0H
         STRING64 DFSDMSGC,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDMSGD,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDMSGP,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDNMSG,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         CLI   DFSREL+2,C'.'     NULLOFL/NULLOUT doesn't exists
         JE    ICETD425_9
         STRING64 DFSDNULF,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDNULO,INTO=(LINE+66,16)
         BRASL R14,SPACE1
ICETD425_9 DS    0H
         STRING64 (DFSDODMA,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDOUTR,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDO2AV,FL3,L5B),DFSDO2AI,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDOVRG,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDIVFL,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDPADV,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDDFSP,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDRESA,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDRESE,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDRESI,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSDB,1,X),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSDBM,1,X),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         CLC   DFSDSIZE,=F'2147483647'
         JNE   ICETD440
         STRING64 'MAX',INTO=(LINE+66,16)
         J     ICETD441
ICETD440 DS    0H
         STRING64 (DFSDSIZE,F,L10B),INTO=(LINE+66,16)
ICETD441 DS    0H
         BRASL R14,SPACE1
         STRING64 DFSDSMF,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDSOLR,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDSRTL,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDSPRC,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDSTIM,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDSVCN,FL1,R3B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDSZER,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDTEXI,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDTMAX,F,L10B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDTRUN,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVERI,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVIO,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVLLO,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSLC,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVLS,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVBUF,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSEM,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDVSIO,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDWRKR,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDS2AV,FL3,L5B),DFSDS2AI,INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 (DFSDY2P,H,R2B),INTO=(LINE+66,16)
         BRASL R14,SPACE1
         STRING64 DFSDZDPR,INTO=(LINE+66,16)
         BRASL R14,SPACE2
SORT99   DS    0H                                                RS0209
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?                 RS0209
         JNO   SORT99_2                yes, don't call           RS0209
         MODESET KEYREG=(2)            switch back to own key    RS0209
SORT99_2 DS    0H                                                RS0209
SORT100  END_PROC                                                RS0209
         TITLE 'SHOWMVS &REL - ISV Software (CSRCTABL)'
*---------------------------------------------------------------------*
*                                                                     *
* >ISV Software using CSRCTABL                                        *
*                                                                     *
*   CSRCTABL starts at: 01858940                                      *
*                                                                     *
*   Slot Offset  Pointer  ISV Product                                 *
*     31 x'0078' 0DD6B000 Compuware Strobe                            *
*     58 x'00E4' 01B18EC0 ASG TMON                                    *
*                                                                     *
*---------------------------------------------------------------------*
ISVSOFT  BEGIN_PROC KW=ISVSOFT                                   RS0705
         STRING64 '&TITLEPFX.ISV Software using CSRCTABL:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R3,CVTECVT
         USING ECVT,R3
         L     R4,ECVTCTBL
         STRING64 '  CSRCTABL starts at: ',((R4),,X),INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  Slot Offset  Pointer  ISV Product',INTO=LINE
         BRASL R14,SPACE1              Double Space
         SR    R7,R7                   Clear offset
         LHI   R5,1                    Start with one
*loop
ISVSOFT1 DS   0H
*        #SNAP ADDR=(R4),LENGTH=16     Debug code
         ICM   R6,B'1111',0(R4)
         JZ    ISVSOFT8                ok next one
         LR    R0,R5                   For SCANISV
*        Works only for 256 ISV entries
         BRASL R14,SCANISV
         STH   R7,WKCELL1              Offset
         STRING64 1X,((R5),,R5B),1X,'x''',(WKCELL1,2,X),'''',1X,       X
               ((R6),,X),1X,(2(R1),(R2)),INTO=LINE
         BRASL R14,SPACE1
ISVSOFT8 DS   0H
         AHI   R4,4                    Next entry
         AHI   R7,4                    Next offset
         AHI   R5,1                    +1
         CHI   R5,1024                 >  1024
         JH    ISVSOFT9                yes leave
         J     ISVSOFT1
*endloop
ISVSOFT9 DS   0H
         BRASL R14,BLANK1              BLANK LINE
         END_PROC
*
*----------------------------------------------------------------------
*        SCAN ISV TABLE
*----------------------------------------------------------------------
*
SCANISV  LARL  R1,ISVNAMES             ISV name table
         SLR   R2,R2
*LOOP
*        Works only for 256 ISV entries
SCANISV2 IC    R2,1(,R1)               PICK UP ENTRY LENGTH
         CLM   R0,B'0001',0(R1)        COMPARE SVC NUMBER WITH INTCODE
         BER   R14                     EQUAL, QUIT LOOP
         LA    R1,2(R2,R1)             BUMP TO NEXT ENTRY IN SVC TABLE
         CLI   0(R1),FF                END OF TABLE?
         JNE   SCANISV2                NO, TRY NEXT ENTRY
*ENDLOOP
         LA    R1,ISVUNK               unknown ISV
         LA    R2,11                   length=11
         BR    R14
*
*        If this list exceed 256 I need to change Macro Table
ISVNAMES TABLE 9,'BMC Mainview'
         TABLE 12,'Computer Associates'
         TABLE 21,'BMC Mainview'
         TABLE 25,'MVS Solutions ThruPut Manager'                RS1205
         TABLE 31,'Compuware Strobe'
         TABLE 32,'Software AG'                                  RS0511
         TABLE 34,'Computer Associates (Sterling)'
         TABLE 36,'Syncsort'
         TABLE 40,'Triangle'                                     RS0310
         TABLE 44,'BMC Control-O'
         TABLE 46,'IBM IMS Connect'
         TABLE 47,'Neon Software'                                RS0107
         TABLE 58,'ASG TMON'
         TABLE 59,'Action Software'                              RS0709
         TABLE 61,'DKL tableBASE'         Gary Weinhold
         TABLE 73,'IBM Debug Tool'        Helmut Waelder         RS0214
         TABLE 75,'Cole Software XDC'
         TABLE 76,'IBM Healthchecker'
         TABLE 78,'Rocket Software'
         TABLE 82,'SAS Institute, Inc.'                          JH0911
         TABLE 85,'IBM GDPS'                                     RS0410
         TABLE 88,'IBM DFSORT'            Helmut Waelder         RS0214
         TABLE 102,'IBM Netview'                                 RS0214
         TABLE 104,'IBM Infoprint'        Helmut Waelder         RS0214
         DC    X'FF',0D'0'             END OF TABLE
         TITLE 'SHOWMVS &REL - UNIX System Services Data Opt.'   RS1199
*---------------------------------------------------------------------*
*                                                                     *
* UNIX System Services (USS)                                          *
*                                                                     *
*   OMVS     000E Parm=BPXPRMF0 Trace=CTIBPXF0                        *
*   KernelToken: 0000003800000001                                     *
*   MAXPROCSYSTEM      =      200    MAXPROCUSER     =       25       *
*   MAXFILEPROC        =       64    MAXFILESIZE     =  NoLimit       *
*   MAXCPUTIME         =     1000    MAXUIDS         =       64       *
*   MAXRTYS            =      256    MAXPTYS         =      256       *
*   MAXMMAPAREA        =     4096    MAXASSIZE       = 41943040       *
*   MAXTHREADS         =      200    MAXTHREADTASKS  =       50       *
*   MAXCORESIZE        =  4194304    MAXSHAREPAGES   =   131072       *
*   IPCMSGQBYTES       =   262144    IPCMSGQMNUM     =    10000       *
*   IPCMSGNIDS         =      500    IPCSEMNIDS      =      500       *
*   IPCSEMNOPS         =       25    IPCSEMNSEMS     =       25       *
*   IPCSHMMPAGES       =      256    IPCSHMNIDS      =      500       *
*   IPCSHMNSEGS        =       10    IPCSHMSPAGES    =   262144       *
*   SUPERUSER          = $SYSMV2     FORKCOPY        =     Cow        *
*   TTYGROUP           = TTY                                          *
*   STEPLIBLIST(60Byte)= /system/steplib                              *
*   USERIDALIAS(60Byte)= /1                                           *
*   PRIORITYGOAL VALUES: NONE                                         *
*   MAXQUEUEDSIGS      =       1000    SHRLIBRGNSIZE   =   67108864   *
*   SHRLIBMAXPAGES     =       4096    VERSION         = /            *
*   SYSCALL COUNTS     =         No    TTYGROUP        = #SYSTTY      *
*   SYSPLEX            =        Yes                                   *
*   LIMMSG             =       None    AUTOCVT         =        Off   *
*   RESOLVER PROC      = DEFAULT                                      *
*   AUTHPGMLIST(60Byte)= NONE                                         *
*                                                                     *
*   HFS Statistics                                                    *
*     Maximum virtual storage:     1161 MB    Minimum fixed storage:  *
*     Virtual Storage        :    12211 Pages Fixed Storage        :  *
*     LookUp cache hit       :   178949       LookUp cache miss    :  *
*     1st data page hit      :   350917       1st data page miss   :  *
*     # of subtasks          :       20                               *
*     Pool  Size #DS   BP_pages      Fixed Already_fixed Not_already_ *
*        1     1   1       6747          0             0              *
*        2     4   1        584          0             0              *
*        3    16   1       1232          0             0              *
*        4    64   1       3648          0             0              *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
USSOPT   BEGIN_PROC KW=USSOPT                LOAD require        RS0302
         L     R2,CVTECVT              ECVT                      RS0500
         USING ECVT,R2                                           RS0500
         L     R3,ECVTOCVT-ECVT(,R2)   OCVT
         LTR   R3,R3
         JZ    USSOPT999
         TM    ECVTOCVT,ECVTOMVS       Check for OpenMVS
         JZ    USSOPT999               No
         USING OCVT,R3
         ICM   R4,B'1111',OCVTOCVE     OCVE
         JZ    USSOPT999
         USING OCVE,R4
         ICM   R5,B'1111',OCVEOPNT     OPNT (Options)
         JZ    USSOPT999
         USING OPTN,R5
         STRING64 '&TITLEPFX.UNIX System Services (USS):',INTO=LINE
         BRASL R14,SPACE2              single space
         STRING64 '  All date/time info are based on the UTC(GMT)',    X
               INTO=LINE
         BRASL R14,SPACE1              single space
*        #SNAP ADDR=(R5),LENGTH=256
         STRING64 2X,OCVT_STCNAME,1X,(OCVTASID,2,X),' Parm(up to 5)=', X
               (OPTN_BPXPRM,6,T),'(',                                  X
               (OPTN_PARMMEMLISTMVS,2,T),',',                          X
               (OPTN_PARMMEMLISTMVS+2,2,T),',',                        X
               (OPTN_PARMMEMLISTMVS+4,2,T),',',                        X
               (OPTN_PARMMEMLISTMVS+6,2,T),',',                        X
               (OPTN_PARMMEMLISTMVS+8,2,T),')',                        X
               ' Trace=',OPTN_TRACEPARM,                               X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 '  KernelToken: ',(OCVTSTOKEN,,X),                   X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 '  MAXPROCSYSTEM      = ',                           X
               (OPTN_MAXPROCSYSTEM,F,R10B),                            X
               '    MAXPROCUSER     = ',(OPTN_MAXPROCUSER,F,R10B),     X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 (OPTN_MAXFILESIZE,F,L),INTO=WKCELL1
         CLC   OPTN_MAXFILESIZE,=X'FFFFFFFF' NoLimit?
         JNE   *+4+6
         MVC   WKCELL1(8),=CL8'NoLimit'
         STRING64 '  MAXFILEPROC        = ',                           X
               (OPTN_MAXFILEPROC,F,R10B),                              X
               '    MAXFILESIZE     =  ',(WKCELL1,8,T),                X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 '  MAXCPUTIME         = ',                           X
               (OPTN_MAXCPUTIME,F,R10B),                               X
               '    MAXUIDS         = ',(OPTN_MAXUIDS,F,R10B),         X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 '  MAXRTYS            = ',                           X
               (OPTN_MAXRTYS,F,R10B),                                  X
               '    MAXPTYS         = ',(OPTN_MAXPTYS,F,R10B),         X
               INTO=LINE
         STRING64 '  MAXPTYS            = ',                           X
               (OPTN_MAXPTYS,F,R10B),INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 '  MAXMMAPAREA        = ',                           X
               (OPTN_MAXMMAPAREA,F,R10B),                              X
               '    MAXASSIZE       = ',(OPTN_MAXASSIZE,F,R10B),       X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 '  MAXTHREADS         = ',                           X
               (OPTN_MAXTHREADS,F,R10B),                               X
               '    MAXTHREADTASKS  = ',(OPTN_MAXTHREADTASKS,F,R10B),  X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 '  MAXCORESIZE        = ',                           X
               (OPTN_MAXCORESIZE,F,R10B),                              X
               '    MAXSHAREPAGES   = ',(OPTN_MAXSHAREPAGES,F,R10B),   X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 '  IPCMSGQBYTES       = ',                           X
               (OPTN_IPCMSGQBYTES,F,R10B),                             X
               '    IPCMSGQMNUM     = ',(OPTN_IPCMSGQMNUM,F,R10B),     X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 '  IPCMSGNIDS         = ',                           x
               (OPTN_IPCMSGNIDS,F,R10B),                               X
               '    IPCSEMNIDS      = ',(OPTN_IPCSEMNIDS,F,R10B),      X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 '  IPCSEMNOPS         = ',                           X
               (OPTN_IPCSEMNOPS,F,R10B),                               X
               '    IPCSEMNSEMS     = ',(OPTN_IPCSEMNSEMS,F,R10B),     X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 '  IPCSHMMPAGES       = ',                           X
               (OPTN_IPCSHMMPAGES,F,R10B),                             X
               '    IPCSHMNIDS      = ',(OPTN_IPCSHMNIDS,F,R10B),      X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 '  IPCSHMNSEGS        = ',                           X
               (OPTN_IPCSHMNSEGS,F,R10B),                              X
               '    IPCSHMSPAGES    = ',(OPTN_IPCSHMSPAGES,F,R10B),    X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 '  SUPERUSER          = ',OPTN_SUPERUSER,            X
               '      FORKCOPY        = ',                             X
               INTO=LINE
         LA    R4,LINE+2(R15)
         MVC   0(4,R4),=C' Cow'             Default
        #STATUS OPTN_OPTION_FLAG,OPTN_FORKCOPY,'Copy'
         BRASL R14,SPACE1              single space
         STRING64 '  STEPLIBLIST(60Byte)= ',(OPTN_STEPLIBLIST,60,T),   X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1              single space
         STRING64 '  USERIDALIAS(60Byte)= ',(OPTN_USERIDALIAS,60,T),   X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1
         ICM   R6,B'1111',OPTN_PRIORITYGOALS
         JZ    USSOPT023
         USING OPTN_SETP,R6
         TM    SETP_GOALS,X'01'
         JZ    USSOPT023
         STRING64 '  PRIORITYGOAL',' VALUES: ','PROPAGATE',            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,(SETP_GOAL1),1X,(SETP_GOAL2),1X,                  X
               (SETP_GOAL3),1X,(SETP_GOAL4),1X,                        X
               (SETP_GOAL5),                                           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,(SETP_GOAL6),1X,(SETP_GOAL7),1X,                  X
               (SETP_GOAL8),1X,(SETP_GOAL9),1X,                        X
               (SETP_GOAL10),                                          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,(SETP_GOAL11),1X,(SETP_GOAL12),1X,                X
               (SETP_GOAL13),1X,(SETP_GOAL14),1X,                      X
               (SETP_GOAL15),                                          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,(SETP_GOAL16),1X,(SETP_GOAL17),1X,                X
               (SETP_GOAL18),1X,(SETP_GOAL19),1X,                      X
               (SETP_GOAL20),                                          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,(SETP_GOAL21),1X,(SETP_GOAL22),1X,                X
               (SETP_GOAL23),1X,(SETP_GOAL24),1X,                      X
               (SETP_GOAL25),                                          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,(SETP_GOAL26),1X,(SETP_GOAL27),1X,                X
               (SETP_GOAL28),1X,(SETP_GOAL29),1X,                      X
               (SETP_GOAL30),                                          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,(SETP_GOAL31),1X,(SETP_GOAL32),1X,                X
               (SETP_GOAL33),1X,(SETP_GOAL34),1X,                      X
               (SETP_GOAL35),                                          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,(SETP_GOAL36),1X,(SETP_GOAL37),1X,                X
               (SETP_GOAL38),1X,(SETP_GOAL39),1X,                      X
               (SETP_GOAL40),                                          X
               INTO=LINE
         BRASL R14,SPACE1
         J     USSOPT025
USSOPT023 DS   0H
         STRING64 '  PRIORITYGOAL',' VALUES: ','NONE',                 X
               INTO=LINE
         BRASL R14,SPACE1
USSOPT025 DS   0H
         STRING64 '  MAXQUEUEDSIGS      = ',                           X
               (OPTN_MAXQUEUEDSIGS,F,R10B),INTO=LINE
         STRING64 '  MAXQUEUEDSIGS      = ',                           X
               (OPTN_MAXQUEUEDSIGS,F,R10B),                            X
               '    SHRLIBRGNSIZE   = ',(OPTN_SHRLIBRGNSIZE,F,R10B),   X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 '  SHRLIBMAXPAGES     = ',                           X
               (OPTN_SHRLIBMAXPAGES,F,R10B),                           X
               '    VERSION         = ',OPTN_VERSIONMVS,               X
               INTO=LINE
.USSOPT026 ANOP
USSOPT026 DS   0H
         BRASL R14,SPACE1              single space
         STRING64 '  SYSCALL COUNTS     = ',                           X
               INTO=LINE
         LA    R4,LINE+7(R15)
         MVC   0(3,R4),=C' No'             Default
        #STATUS OPTN_OPTION_FLAG,OPTN_SYSCALL_COUNT,'Yes'
         STRING64 (LINE,,L),'    TTYGROUP        = ',                  X
               OPTN_TTYGROUP,                                          X
               INTO=LINE
         BRASL R14,SPACE1              Single space
         STRING64 '  SYSPLEX            = ',                           X
               INTO=LINE                                         RS0302
         LA    R4,LINE+7(R15)                                    RS0302
         MVC   0(3,R4),=C' No'         Default No                RS0803
        #STATUS OPTN_OPTION_FLAG,OPTN_SYSPLEX,'Yes'              RS0506
         BRASL R14,SPACE1              Single space
         STRING64 '  LIMMSG             = ',                           X
               INTO=LINE                                         RS0302
         LA    R4,LINE+4(R15)                                    RS0302
         MVC   0(6,R4),=C'  None'      System  =F'1'             RS0803
         CLI   OPTN_LIMMSG+3,X'01'                               RS0803
         JE    USSOPT027                                         RS0803
         MVC   0(6,R4),=C'System  '    System  =F'2'             RS0803
         CLI   OPTN_LIMMSG+3,X'02'                               RS0803
         JE    USSOPT027                                         RS0803
         MVC   0(6,R4),=C'   All'      All     =F'3'             RS0803
USSOPT027 DS   0H
         STRING64 (LINE,,L),'    AUTOCVT         = ',            RS0803X
               INTO=LINE                                         RS0803
         LA    R4,LINE+7(R15)                                    RS0803
         MVC   0(3,R4),=C'Off'             Default               RS0803
        #STATUS OPTN_OPTION_FLAG2,OPTN_AUTOCVT,' On'             RS0803
         BRASL R14,SPACE1              Single space              RS0803
         STRING64 '  RESOLVER PROC      =   ',OPTN_RESOLVER_PROC,      X
               INTO=LINE                                         RS0302
         AIF   (NOT D'CVTH7707).USSOPT028 z/OS R4?               RS0302
         TM    HBB7707,L'HBB7707       running on z/OS R4        RS0302
         JZ    USSOPT028               no, jump and display      RS0803
         STRING64 (LINE,,L),'    LOSTMSG         = ',            RS0414X
               INTO=LINE                                         RS0414
         LA    R4,LINE+7(R15)                                    RS0414
         MVC   0(3,R4),=C'Off'             Default               RS0414
        #STATUS OPTN_OPTION_FLAG2,OPTN_LOSTMSGON,' On'           RS0414
         BRASL R14,SPACE1              Single space              RS0803
         STRING64 '  AUTHPGMLIST(60Byte)= ',(OPTN_AUTHPGMLIST,60,T),   X
               INTO=LINE
         AIF   (NOT D'CVTH7708).USSOPT028 z/OS R5?               RS0506
         TM    HBB7708,L'HBB7708       running on z/OS R5        RS0506
         JZ    USSOPT028               no, jump and display      RS0506
         BRASL R14,SPACE1              Single space              RS0506
         STRING64 '  SWA                = ',                           X
               INTO=LINE                                         RS0506
         LA    R4,LINE+5(R15)                                    RS0506
         MVC   0(5,R4),=C'Below'           Default               RS0506
        #STATUS OPTN_OPTION_FLAG2,OPTN_SWAAbove,'Above'          RS0506
         STRING64 (LINE,,L),'    NONEMPTYMOUNTPT = ',            RS0414X
               INTO=LINE                                         RS0414
         LA    R4,LINE+2(R15)                                    RS0414
         MVC   0(6,R4),=C'NOWARN'               ='1'             RS0414
         CLI   OPTN_NONEMPTYMOUNTPT,X'01'                        RS0414
         JE    USSOPT027Z                                        RS0414
         MVC   0(6,R4),=C'WARN  '               ='2'             RS0414
         CLI   OPTN_LIMMSG+3,X'02'                               RS0414
         JE    USSOPT027Z                                        RS0414
         MVC   0(6,R4),=C'DENY  '               ='3'             RS0414
USSOPT027Z DS   0H                                               RS0414
         AIF   (NOT D'CVTH7720).USSOPT028 z/OS R7?               RS0506
         AIF   (T'&SYSSTATE_OSREL EQ 'O').USSOPT028              RS0806
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010107').USSOPT028    RS0806
         TM    HBB7720,L'HBB7720       running on z/OS R7        RS0506
         JZ    USSOPT028               no, jump and display      RS0506
         BRASL R14,SPACE1              Single space              RS0506
         STRING64 '  SERV_LINKLIB       = ',OPTN_ServLinkLibMVS,       X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'            RS0506
         BRASL R14,SPACE1              Single space              RS0506
         STRING64 '  SERV_LPALIB        = ',OPTN_ServLpaLibMVS,        X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'            RS0506
         AIF   (NOT D'CVTH7780).USSOPT028 z/OS R13?              RS0414
         AIF   (T'&SYSSTATE_OSREL EQ 'O').USSOPT028              RS0414
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010113').USSOPT028    RS0414
         TM    HBB7780,L'HBB7780       running on z/OS R7        RS0414
         JZ    USSOPT028               no, jump and display      RS0414
         BRASL R14,SPACE1              Single space              RS0414
         STRING64 '  MAXUSERMOUNTSYS    = ',                     RS0414X
               (OPTN_MAXUSERMOUNTSYS,F,R10B),INTO=LINE           RS0414
         STRING64 (LINE,,L),'    MAXUSERMOUNTUSER= ',            RS0414X
               (OPTN_MAXUSERMOUNTUSER,F,R10B),INTO=LINE          RS0414
.USSOPT028 ANOP          pre z/OS R4
USSOPT028 DS   0H
         BRASL R14,SPACE1              Single space              RS0803
.USSOPT100 ANOP                                                  RS0800
USSOPT100 DS   0H
         DROP  R2,R3,R4,R5             no longer used
         BRASL R14,BLANK1                                        RS0903
         AIF   (NOT D'CVTH7707).USSOPT100N z/OS R4?              RS0504
         TM    HBB7707,L'HBB7707       running on z/OS R4        RS0504
         JZ    USSOPT100N              no, jump                  RS0504
         BRASL R14,WORKADDR            32K work area             RS0903
         LR    R5,R1                                             RS0903
         LOAD  EP=BPX1PCT              USS callable service      RS0903
         ST    R0,BPX_MOD              SAVE EP ADDRESS           RS0903
         STRING64 '  HFS Statistics',INTO=LINE                   RS0903
         BRASL R14,SPACE2                                        RS0903
         LA    R0,PCTL_BFRLIMITS_TYPE_LENGTH                     RS0903
         ST    R0,WKCELL1                                        RS0903
         USING PCTL_BFRLIMITS_TYPE,R5                            RS0903
         L     R15,BPX_MOD                                       RS0903
         CALL (15),                    pfsctl                    RS0903X
               (=CL8'HFS',             type                      RS0903X
               =A(DISPLAYBUFFERLIMITS),                          RS0903X
               WKCELL1,                length                    RS0903X
               PCTL_BFRLIMITS_TYPE,    Info                      RS0903X
               WKCELL2,                Return_value              RS0903X
               LRETCODE,               Returncode                RS0903X
               LRSNCODE),              Resoncode                 RS0903X
               MF=(E,WORK256+100)                                RS0903
         ICM   R15,B'1111',WKCELL2                               RS0903
         JM    USSOPT100E              Minus = Error             RS0903
         STRING64 '    Maximum virtual storage:',                RS0903X
               (PCTL_BL_VMAX_VAL,F,R9B),' MB   ',                RS0903X
               ' Minimum fixed storage:',                        RS0903X
               (PCTL_BL_FMIN_VAL,F,R9B),                         RS0903X
               ' MB',INTO=LINE                                   RS0903
         BRASL R14,SPACE1                                        RS0903
         J     USSOPT100G                                        RS0903
USSOPT100E DS  0H                      Error                     RS0903
*        #SNAP ADDR=(R5),LENGTH=PCTL_BFRLIMITS_TYPE_LENGTH
         STRING64 4X,'BPX1PCT',                                  RS0903X
               ' Returncode=',(LRETCODE,,X),                     RS0903X
               ' Reasoncode=',(LRSNCODE,,X),                     RS0903X
               INTO=LINE                                         RS0903
         BRASL R14,SPACE2              Double Space              RS0903
USSOPT100G DS  0H                      Global Statistics         RS0903
         BRASL R14,WORKADDR            32K work area             RS0903
         LR    R5,R1                                             RS0903
         LA    R0,PCTL_GLOBALSTATS_TYPE_LENGTH                   RS0903
         ST    R0,WKCELL1                                        RS0903
         USING PCTL_GLOBALSTATS_TYPE,R5                          RS0903
         L     R15,BPX_MOD                                       RS0903
         CALL (15),                    pfsctl                    RS0903X
               (=CL8'HFS',             type                      RS0903X
               =A(DISPLAYGLOBALSTATS), #                         RS0903X
               WKCELL1,                length                    RS0903X
               PCTL_GLOBALSTATS_TYPE,  Info                      RS0903X
               WKCELL2,                Return_value 0 or -1      RS0903X
               LRETCODE,               Returncode                RS0903X
               LRSNCODE),              Resoncode                 RS0903X
               MF=(E,WORK256+100)                                RS0903
         DELETE EP=BPX1PCT                                       JH0405
         ICM   R15,B'1111',WKCELL2                               RS0903
         JM    USSOPT100GE             Minus = Error             RS0903
         STRING64 '    Virtual Storage        :',                RS0903X
               (PCTL_GS_TOTVIRT,F,R9B),' Pages',                 RS0903X
               ' Fixed Storage        :',                        RS0903X
               (PCTL_GS_TOTFIX,F,R9B),' Pages',                  RS0903X
               INTO=LINE                                         RS0903
         BRASL R14,SPACE1                                        RS0903
         TM    CVTFLAG3,CVTZARCH       running ALS-2 ?           RS0903
         JZ    USSOPT100N                                        RS0903
         STRING64 '    LookUp cache hit       :',                      X
               (PCTL_GS_META_Y,FD,R9B),6X,                             X
               ' LookUp cache miss    :',                              X
               (PCTL_GS_META_N,FD,R9B),                                X
               INTO=LINE                                         RS0406
         BRASL R14,SPACE1                                        RS0903
         STRING64 '    1st data page hit      :',                      X
               (PCTL_GS_RPN0_Y,FD,R9B),6X,                             X
               ' 1st data page miss   :',                              X
               (PCTL_GS_RPN0_N,FD,R9B),                                X
               INTO=LINE                                         RS0406
         BRASL R14,SPACE1                                        RS0903
         AIF   (NOT D'CVTH7707).USSOPT100R2 z/OS R4              RS0903
         TM    HBB7707,L'HBB7707       running on z/OS R4        RS0903
         JZ    USSOPT100R2             no, jump and display      RS0903
         STRING64 '    # of subtasks          :',(PCTL_GS_TASKS,F,R9B),X
               INTO=LINE                                         RS0903
         BRASL R14,SPACE1                                        RS0903
.USSOPT100R2 ANOP                                                RS0903
USSOPT100R2 DS 0H                                                RS0903
         STRING64 '    Pool  Size #DS   BP_pages      Fixed',    RS0903X
               ' Already_fixed Not_already_fixed',               RS0903X
               INTO=LINE                                         RS0903
         BRASL R14,SPACE1                                        RS0903
         STRING64 '       1 ',(PCTL_GS_BP1_BFRSIZE,H,R5B),1X,    RS0903X
               (PCTL_GS_BP1_DSCNT,H,R3B),2X,                     RS0903X
               (PCTL_GS_BP1_TOTVIRT,F,R9B),2X,                   RS0903X
               (PCTL_GS_BP1_TOTFIX,F,R9B),5X,                    RS0903X
               (PCTL_GS_BP1_FIXD_Y,F,R9B),9X,                    RS0903X
               (PCTL_GS_BP1_FIXD_N,F,R9B),                       RS0903X
               INTO=LINE                                         RS0903
         BRASL R14,SPACE1                                        RS0903
         STRING64 '       2 ',(PCTL_GS_BP2_BFRSIZE,H,R5B),1X,    RS0903X
               (PCTL_GS_BP2_DSCNT,H,R3B),2X,                     RS0903X
               (PCTL_GS_BP2_TOTVIRT,F,R9B),2X,                   RS0903X
               (PCTL_GS_BP2_TOTFIX,F,R9B),5X,                    RS0903X
               (PCTL_GS_BP2_FIXD_Y,F,R9B),9X,                    RS0903X
               (PCTL_GS_BP2_FIXD_N,F,R9B),                       RS0903X
               INTO=LINE                                         RS0903
         BRASL R14,SPACE1                                        RS0903
         STRING64 '       3 ',(PCTL_GS_BP3_BFRSIZE,H,R5B),1X,    RS0903X
               (PCTL_GS_BP3_DSCNT,H,R3B),2X,                     RS0903X
               (PCTL_GS_BP3_TOTVIRT,F,R9B),2X,                   RS0903X
               (PCTL_GS_BP3_TOTFIX,F,R9B),5X,                    RS0903X
               (PCTL_GS_BP3_FIXD_Y,F,R9B),9X,                    RS0903X
               (PCTL_GS_BP3_FIXD_N,F,R9B),                       RS0903X
               INTO=LINE                                         RS0903
         BRASL R14,SPACE1                                        RS0903
         STRING64 '       4 ',(PCTL_GS_BP4_BFRSIZE,H,R5B),1X,    RS0903X
               (PCTL_GS_BP4_DSCNT,H,R3B),2X,                     RS0903X
               (PCTL_GS_BP4_TOTVIRT,F,R9B),2X,                   RS0903X
               (PCTL_GS_BP4_TOTFIX,F,R9B),5X,                    RS0903X
               (PCTL_GS_BP4_FIXD_Y,F,R9B),9X,                    RS0903X
               (PCTL_GS_BP4_FIXD_N,F,R9B),                       RS0903X
               INTO=LINE                                         RS0903
         BRASL R14,SPACE2                                        RS0903
         J     USSOPT100N                                        RS0903
USSOPT100GE DS 0H                      Global Statistics Error   RS0903
*        #SNAP ADDR=(R5),LENGTH=PCTL_GLOBALSTATS_TYPE_LENGTH     RS0903
         STRING64 4X,'BPX1PCT',                                  RS0903X
               ' Returncode=',(LRETCODE,,X),                     RS0903X
               ' Reasoncode=',(LRSNCODE,,X),                     RS0903X
               INTO=LINE                                         RS0903
         BRASL R14,SPACE2              Double Space              RS0903
.USSOPT100N ANOP                                                 RS0903
USSOPT100N DS  0H
         TM    HBB7740,L'HBB7740       running on z/OS R9
         JZ    USSOPT999                yes, jump
         STRING64 '  ZFS Info: ',INTO=LINE
         BRASL R14,SPACE2              Double Space
         BRASL R14,WORKADDR            32K work area
         LR    R5,R1
         LOAD  EP=BPX1PCT              USS callable service
         ST    R0,BPX_MOD              SAVE EP ADDRESS
         USING BUFFERA,R5              tell assembly
         LA    R0,BUFFERAL             Length
         ST    R0,WKCELL1              Keep length for freemain
         XC    APARMS(32),APARMS       clear Aparms
         LHI   R0,AGOP_QUERY_SYSLEVEL           opcode
         ST    R0,APARMS               opcode
         LHI   R0,32                   Offset to buffer (size only)
         ST    R0,APARMS+4             opcode
         XC    CFOP(CFOPL),CFOP        clear
         MVC   CFOP_EYE,=C'CFOP'
         LHI   R0,CFOPL
         STH   R0,CFOP_LEN
         LHI   R0,CFOP_VERSION1
         STC   R0,CFOP_VER
         L     R15,BPX_MOD
         CALL (15),                    pfsctl                          X
               (=CL8'ZFS',             type                            X
               =A(ZFSCALL_CONFIG),     ZFSCALL_CONFIG                  X
               WKCELL1,                length                          X
               (R5),                   Buffer                          X
               WKCELL2,                Return_value                    X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+200)
         ICM   R15,B'1111',WKCELL2
         JM    USSOPT100NF             Minus = Error             RS1114
         STRING64 '  Service Level: ',CFOP_STR,INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1              Double Space
         LHI   R0,AGOP_SYSPLEX_STATE            opcode
         ST    R0,APARMS               opcode
         LHI   R0,32                   Offset to buffer (size only)
         ST    R0,APARMS+4             opcode
         XC    CFOP(CFOPL),CFOP        clear
         MVC   CFOP_EYE,=C'CFOP'
         LHI   R0,CFOPL
         STH   R0,CFOP_LEN
         LHI   R0,CFOP_VERSION1
         STC   R0,CFOP_VER
         L     R15,BPX_MOD
         CALL (15),                    pfsctl                          X
               (=CL8'ZFS',             type                            X
               =A(ZFSCALL_CONFIG),     ZFSCALL_CONFIG                  X
               WKCELL1,                length                          X
               (R5),                   Buffer                          X
               WKCELL2,                Return_value                    X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+200)
         ICM   R15,B'1111',WKCELL2
         JM    USSOPT100NF             Minus = Error             RS1114
         STRING64 '  Sysplex State: ',(CFOP_STR,1),'.',                X
               (CFOP_STR+2,1),INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1              Double Space
         LHI   R0,AGOP_LOG_CACHE_SIZE           opcode
         ST    R0,APARMS               opcode
         LHI   R0,32                   Offset to buffer (size only)
         ST    R0,APARMS+4             opcode
         XC    CFOP(CFOPL),CFOP        clear
         MVC   CFOP_EYE,=C'CFOP'
         LHI   R0,CFOPL
         STH   R0,CFOP_LEN
         LHI   R0,CFOP_VERSION1
         STC   R0,CFOP_VER
         L     R15,BPX_MOD
         CALL (15),                    pfsctl                          X
               (=CL8'ZFS',             type                            X
               =A(ZFSCALL_CONFIG),     ZFSCALL_CONFIG                  X
               WKCELL1,                length                          X
               (R5),                   Buffer                          X
               WKCELL2,                Return_value                    X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+200)
         ICM   R15,B'1111',WKCELL2
         JM    USSOPT100NF             Minus = Error             RS1114
         STRING64 '  Logcache Size: ',(CFOP_STR,4),INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1              Double Space
         LHI   R0,AGOP_META_CACHE_SIZE           opcode
         ST    R0,APARMS               opcode
         LHI   R0,32                   Offset to buffer (size only)
         ST    R0,APARMS+4             opcode
         XC    CFOP(CFOPL),CFOP        clear
         MVC   CFOP_EYE,=C'CFOP'
         LHI   R0,CFOPL
         STH   R0,CFOP_LEN
         LHI   R0,CFOP_VERSION1
         STC   R0,CFOP_VER
         L     R15,BPX_MOD
         CALL (15),                    pfsctl                          X
               (=CL8'ZFS',             type                            X
               =A(ZFSCALL_CONFIG),     ZFSCALL_CONFIG                  X
               WKCELL1,                length                          X
               (R5),                   Buffer                          X
               WKCELL2,                Return_value                    X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+200)
         ICM   R15,B'1111',WKCELL2
         JM    USSOPT100NF             Minus = Error             RS1114
         STRING64 '  MetacacheSize: ',(CFOP_STR,4),INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1              Double Space
         LHI   R0,AGOP_ADM_THREADS               opcode
         ST    R0,APARMS               opcode
         LHI   R0,32                   Offset to buffer (size only)
         ST    R0,APARMS+4             opcode
         XC    CFOP(CFOPL),CFOP        clear
         MVC   CFOP_EYE,=C'CFOP'
         LHI   R0,CFOPL
         STH   R0,CFOP_LEN
         LHI   R0,CFOP_VERSION1
         STC   R0,CFOP_VER
         L     R15,BPX_MOD
         CALL (15),                    pfsctl                          X
               (=CL8'ZFS',             type                            X
               =A(ZFSCALL_CONFIG),     ZFSCALL_CONFIG                  X
               WKCELL1,                length                          X
               (R5),                   Buffer                          X
               WKCELL2,                Return_value                    X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+200)
         ICM   R15,B'1111',WKCELL2
         JM    USSOPT100NF             Minus = Error             RS1114
         STRING64 '  Admin Threads: ',(CFOP_STR,2),INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1              Double Space
         LHI   R0,AGOP_AGGR_FULL                 opcode
         ST    R0,APARMS               opcode
         LHI   R0,32                   Offset to buffer (size only)
         ST    R0,APARMS+4             opcode
         XC    CFOP(CFOPL),CFOP        clear
         MVC   CFOP_EYE,=C'CFOP'
         LHI   R0,CFOPL
         STH   R0,CFOP_LEN
         LHI   R0,CFOP_VERSION1
         STC   R0,CFOP_VER
         L     R15,BPX_MOD
         CALL (15),                    pfsctl                          X
               (=CL8'ZFS',             type                            X
               =A(ZFSCALL_CONFIG),     ZFSCALL_CONFIG                  X
               WKCELL1,                length                          X
               (R5),                   Buffer                          X
               WKCELL2,                Return_value                    X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+200)
         ICM   R15,B'1111',WKCELL2
         JM    USSOPT100NF             Minus = Error             RS1114
         STRING64 '  Aggr Full    : ',(CFOP_STR,8),INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1              Double Space
         LHI   R0,AGOP_AGGR_GROW                 opcode
         ST    R0,APARMS               opcode
         LHI   R0,32                   Offset to buffer (size only)
         ST    R0,APARMS+4             opcode
         XC    CFOP(CFOPL),CFOP        clear
         MVC   CFOP_EYE,=C'CFOP'
         LHI   R0,CFOPL
         STH   R0,CFOP_LEN
         LHI   R0,CFOP_VERSION1
         STC   R0,CFOP_VER
         L     R15,BPX_MOD
         CALL (15),                    pfsctl                          X
               (=CL8'ZFS',             type                            X
               =A(ZFSCALL_CONFIG),     ZFSCALL_CONFIG                  X
               WKCELL1,                length                          X
               (R5),                   Buffer                          X
               WKCELL2,                Return_value                    X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+200)
         ICM   R15,B'1111',WKCELL2
         JM    USSOPT100NF             Minus = Error             RS1114
         STRING64 '  Aggr grow    : ',(CFOP_STR,8),INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1              Double Space
         LHI   R0,AGOP_FS_FULL                 opcode
         ST    R0,APARMS               opcode
         LHI   R0,32                   Offset to buffer (size only)
         ST    R0,APARMS+4             opcode
         XC    CFOP(CFOPL),CFOP        clear
         MVC   CFOP_EYE,=C'CFOP'
         LHI   R0,CFOPL
         STH   R0,CFOP_LEN
         LHI   R0,CFOP_VERSION1
         STC   R0,CFOP_VER
         L     R15,BPX_MOD
         CALL (15),                    pfsctl                          X
               (=CL8'ZFS',             type                            X
               =A(ZFSCALL_CONFIG),     ZFSCALL_CONFIG                  X
               WKCELL1,                length                          X
               (R5),                   Buffer                          X
               WKCELL2,                Return_value                    X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+200)
         ICM   R15,B'1111',WKCELL2
         JM    USSOPT100NF             Minus = Error             RS1114
         STRING64 '  FS Full      : ',(CFOP_STR,8),INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1              Double Space
         TM    HBB7790,L'HBB7790       running z/OS V2R1?        GF0414
         JO    USSOPT100N_188           skip, opc 188 is invalid GF0414
         LHI   R0,AGOP_FS_GROW                 opcode
         ST    R0,APARMS               opcode
         LHI   R0,32                   Offset to buffer (size only)
         ST    R0,APARMS+4             opcode
         XC    CFOP(CFOPL),CFOP        clear
         MVC   CFOP_EYE,=C'CFOP'
         LHI   R0,CFOPL
         STH   R0,CFOP_LEN
         LHI   R0,CFOP_VERSION1
         STC   R0,CFOP_VER
         L     R15,BPX_MOD
         CALL (15),                    pfsctl                          X
               (=CL8'ZFS',             type                            X
               =A(ZFSCALL_CONFIG),     ZFSCALL_CONFIG                  X
               WKCELL1,                length                          X
               (R5),                   Buffer                          X
               WKCELL2,                Return_value                    X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+200)
         ICM   R15,B'1111',WKCELL2
         JM    USSOPT100NF             Minus = Error             RS1114
         STRING64 '  FS grow      : ',(CFOP_STR,8),INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1              Double Space
USSOPT100N_188 DS  0H                                            GF0414  GF01
         LHI   R0,AGOP_GROUP_SET                 opcode
         ST    R0,APARMS               opcode
         LHI   R0,32                   Offset to buffer (size only)
         ST    R0,APARMS+4             opcode
         XC    CFOP(CFOPL),CFOP        clear
         MVC   CFOP_EYE,=C'CFOP'
         LHI   R0,CFOPL
         STH   R0,CFOP_LEN
         LHI   R0,CFOP_VERSION1
         STC   R0,CFOP_VER
         L     R15,BPX_MOD
         CALL (15),                    pfsctl                          X
               (=CL8'ZFS',             type                            X
               =A(ZFSCALL_CONFIG),     ZFSCALL_CONFIG                  X
               WKCELL1,                length                          X
               (R5),                   Buffer                          X
               WKCELL2,                Return_value                    X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+200)
         ICM   R15,B'1111',WKCELL2
         JM    USSOPT100NF             Minus = Error             RS1114
         STRING64 '  Group        : ',(CFOP_STR,8),INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1              Double Space
         TM    HBB7790,L'HBB7790       running on z/OS V2R1 ?    JH1303
         JO    USSOPT100V2A            ...jif so, skip call      JH1303
         LHI   R0,AGOP_AUTO_ATTACH               opcode
         ST    R0,APARMS               opcode
         LHI   R0,32                   Offset to buffer (size only)
         ST    R0,APARMS+4             opcode
         XC    CFOP(CFOPL),CFOP        clear
         MVC   CFOP_EYE,=C'CFOP'
         LHI   R0,CFOPL
         STH   R0,CFOP_LEN
         LHI   R0,CFOP_VERSION1
         STC   R0,CFOP_VER
         L     R15,BPX_MOD
         CALL (15),                    pfsctl                          X
               (=CL8'ZFS',             type                            X
               =A(ZFSCALL_CONFIG),     ZFSCALL_CONFIG                  X
               WKCELL1,                length                          X
               (R5),                   Buffer                          X
               WKCELL2,                Return_value                    X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+200)
         ICM   R15,B'1111',WKCELL2
         JM    USSOPT100NF             Minus = Error             RS1114
         STRING64 '  Auto Attach  : ',(CFOP_STR,3),INTO=LINE
USSOPT100V2A DS 0H                                               JH1303
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE2              Double Space
         J     USSOPT999
USSOPT100NF DS 0H
         STRING64 4X,'BPX1PCT',' Type=',(APARMS,4,X),                  X
               ' Returncode=',(LRETCODE,,X),                           X
               ' Reasoncode=',(LRSNCODE,,X),                           X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
.USSOPT999 ANOP
USSOPT999 DS   0H
         END_PROC
         TITLE 'SHOWMVS &REL - UNIX System Services Data Files'  RS1199
*---------------------------------------------------------------------*
*                                                                     *
*   Files:                                                            *
*     TypeName   Device ----------Status----------- Mode QJobName    Q*
*     AUTOMNT        14 Active                      RDWR              *
*       Name=*AMD/u/al/public                                         *
*       Path=/u/al/public                                             *
*     AUTOMNT        13 Active                      RDWR              *
*       Name=*AMD/xuser                                               *
*       Path=/u/xt/user                                               *
*     AUTOMNT        12 Active                      RDWR              *
*       Name=*AMD/hnuser                                              *
*       Path=/u/hn/user                                               *
*     AUTOMNT        11 Active                      RDWR              *
*       Name=*AMD/aluser                                              *
*       Path=/u/al/user                                               *
*     HFS            22 Active                      RDWR              *
*       Name=XGCSSCH.OMVSALF0.HFSFILE                                 *
*       Path=/u/xt/user/xgcssch                                       *
*       File system size:    47208 Pages Used pages     :    18839 Pag*
*       Attribute pages :       13 Pages Cached pages   :        0 Pag*
*       Seq I/O reqs    :        0       Random I/O reqs:        0    *
*       Lookup hit      :        4       Lookup miss    :       92    *
*       1st page hit    :        0       1st page miss  :        0    *
*       Index new tops  :        0       Index splits   :        0    *
*       Index joins     :        0       Index read hit :      406    *
*       Index read miss :        5       Index write hit:        4    *
*       Index write miss:        0                                    *
*       RFS Flags       :       83       RFS error flags:       00    *
*       High format RFN :    47199       Member count   :       47    *
*       Sync interval   :       60                                    *
*                                                                     *
*---------------------------------------------------------------------*
USSF     BEGIN_PROC KW=USSF                LOAD require          RS0302
         L     R2,CVTECVT              ECVT                      RS0500
         USING ECVT,R2                                           RS0500
         L     R3,ECVTOCVT-ECVT(,R2)   OCVT
         LTR   R3,R3
         JZ    USSF999
         TM    ECVTOCVT,ECVTOMVS       Check for OpenMVS
         JZ    USSF999                 No
         USING OCVT,R3
         DROP  R2,R3                                             RS0505
         BRASL R14,WORKADDR            32K work area
         LA    R0,2000                 length for one entry only
         ST    R0,WKCELL4              pass length               RS0903
         LR    R5,R1
         USING MNTEH,R5                tell assembler
         LR    R6,R5                   point to the entries
         LA    R6,MNTEH#LENGTH(R6)     +Header
         USING MNTE,R6                 tell assembler
         STRING64 '  Files:',                                          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    TypeName   ','Device ','----------','Status',   X
               '-----------',' Mode ','QJobName  ','  QPid',           X
               INTO=LINE
         BRASL R14,SPACE1
         LOAD  EP=BPX1GMN              USS callable service
         ST    R0,BPX_MOD              SAVE EP ADDRESS
*Loop
USSF110  DS    0H
         MVC   WORK256(3),=C'GMN'
         MVC   MNTEHID,=C'MNT2'        Set the parms to get a    RS0800
         LHI   R0,MNTE#LENGTH          MNT2 reply                RS0601
         ST    R0,MNTEHBLEN            pass length               RS0800
.USSF115 ANOP                                                    RS0800
USSF115  DS    0H                                                RS0800
         XCALL BPX_MOD,                w_getmntent                     X
               (WKCELL4,               Length MNTE+MNTEH         RS0903X
               MNTEH,                  BPXYMNTH                        X
               WKCELL1,                -1 or Mount-entries             X
               LRETCODE,               Returncode                      X
               LRSNCODE)               Resoncode
         CLC   LRETCODE,=F'156'  X'9C' bad rc from USS
         JE    USSF980
         ICM   R15,B'1111',WKCELL1     Check ReturnValue
         JM    USSF980                  minus is an error
         JZ    USSF200                  zero no (more) entries
         STRING64 4X,(MNTENTFSTNAME,8),1X,(MNTENTFSDEV,F,R8B),         X
               INTO=LINE
         LA    R4,LINE+1(R15)
         MVC   0(6,R4),=C'Active  '   Default
        #STATUS MNTENTSTATUS,MNTENTFILEDEAD,'Not active'
        #STATUS MNTENTSTATUS,MNTENTFILERESET,'Reset UnMount'
        #STATUS MNTENTSTATUS,MNTENTFILEDRAIN,'Drain UnMount'
        #STATUS MNTENTSTATUS,MNTENTFILEFORCE,'Force UnMount'
        #STATUS MNTENTSTATUS,MNTENTFILEIMMED,'Immediate Unmount'
        #STATUS MNTENTSTATUS,MNTENTFILENORM,'Normal UnMount'
        #STATUS MNTENTSTATUS,MNTENTIMMEDTRIED,'Immed UnMount attempted'
        #STATUS MNTENTSTATUS,MNTENTQUIESCED,'Quiesced'
        #STATUS MNTENTSTATUS,MNTENTMNTINPROGRESS,'Mount in Progress'
         LA    R4,LINE+50                                        RS0902
         MVC   0(4,R4),=C'RDWR'   Default
*?      #STATUS MNTENTFSMODE4,MNTENTFSMODEEXPORT,'DFS Exported'
*?      #STATUS MNTENTFSMODE4,MNTENTFSMODENOSUID,'No SetUID'
        #STATUS MNTENTFSMODE4,MNTENTFSMODERDONLY,'READ'
         STRING64 (LINE,,L),1X,MNTENTJOBNAME,(MNTENTPID,F,R8B),        X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1
         STRING64 '      Name=',(MNTENTFSNAM44,44),                    X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1
         STRING64 '      Path=',(MNTENTMOUNTPOINT,60),                 X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1
         STRING64 6X,'OWNER=',(MNTENTSYSNAME),' AUTOMOVE=',INTO=LINE
         LA    R4,LINE+1(R15)                                    RS0800
         MVI   0(R4),C'Y'              default automove          DT0800
        #STATUS MNTENTFSMODE4,MNTENTFSNOAUTOMOVE,'N'             DT0800
         STRING64 (LINE,,L),' CLIENT=',INTO=LINE                 RS0800
         LA    R4,LINE+1(R15)                                    RS0800
         MVI   0(R4),C'N'              default client            RS0800
        #STATUS MNTENTFSMODE4,MNTENTFSCLIENT,'Y'                 RS0800
         BRASL R14,SPACE1                                        RS0800
         AIF   (NOT D'CVTH7707).USSF192 z/OS R4?                 RS0504
         TM    HBB7707,L'HBB7707       running on z/OS R4        RS0504
         JZ    USSF192                 no, jump                  RS0903
         CLI   MNTENTFSNAM44,C'*'      Automount ???             RS0903
         JE    USSF192                   yes, leave              RS0903
         CLC   =C'NFS',MNTENTFSTNAME   NFS ???                   RS0704
         JE    USSF192                   yes, leave              RS1004
         CLC   =C'ZFS',MNTENTFSTNAME   ZFS ???                   RS0505
         JE    USSF180                   yes, report ZFS         RS0505
         CLC   =C'TFS',MNTENTFSTNAME   TFS ???                   RS1004
         JE    USSF192                   yes, leave              RS1004
         LA    R2,PCTL_FSSTATS_TYPE_LENGTH                       RS0903
         ST    R2,WKCELL1                                        RS0903
*                                                                RS0903
*        Allocate an answer area                                 RS0903
*                                                                RS0903
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS0903
         JO    USSF150                 yes, jump                 RS0903
         GETMAIN RU,LV=(R2),BNDRY=PAGE allocate PATH work area   RS0903
         J     USSF151                                           RS0903
USSF150  DS    0H                                                RS0903
         LA    R1,1                    LOC=ANY                   RS0903
         LR    R0,R2                   Length of storage         RS0903
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
         LR    R2,R0
USSF151  DS    0H                                                RS0903
         LR    R7,R1                   where did we find it      RS0903
         STM   R1,R2,GETMAIN_LEN_ADDR  save addr and length      RS0903
         USING PCTL_FSSTATS_TYPE,R7                              RS0903
         MVC   PCTL_FS_NAME,MNTENTFSNAM44                        RS1004
         LOAD  EP=BPX1PCT              USS callable service      RS0903
         LR    R15,R0                                            RS0903
         CALL (15),                    pfsctl                    RS0903X
               (=CL8'HFS',             type                      RS0903X
               =A(DISPLAYFSSTATS),     #                         RS0903X
               WKCELL1,                length                    RS0903X
               PCTL_FSSTATS_TYPE,      Info                      RS0903X
               WKCELL2,                Return_value 0 or -1      RS0903X
               LRETCODE,               Returncode                RS0903X
               LRSNCODE),              Resoncode                 RS0903X
               MF=(E,WORK256+100)                                RS0903
         ICM   R15,B'1111',WKCELL2                               RS0903
         JM    USSF160                 Minus = Error             RS0903
         STRING64 6X,'File system size:',                        RS0903X
               (PCTL_FS_SIZE,F,R9B),' Pages',                    RS0903X
               ' Used pages     :',                              RS0903X
               (PCTL_FS_USED,F,R9B),' Pages',                    RS0903X
               INTO=LINE                                         RS0903
         BRASL R14,SPACE1                                        RS0903
         STRING64 6X,'Attribute pages :',                        RS0903X
               (PCTL_FS_AD_ALLOC,F,R9B),' Pages',                RS0903X
               ' Cached pages   :',                              RS0903X
               (PCTL_FS_PGS_CACHED,F,R9B),' Pages',              RS0903X
               INTO=LINE                                         RS0903
         BRASL R14,SPACE1                                        RS0903
         STRING64 6X,'Seq I/O reqs    :',                              X
               (PCTL_FS_SEQ_IO,FD,R9B),6X,                             X
               ' Random I/O reqs:',                                    X
               (PCTL_FS_RANDOM_IO,FD,R9B),                             X
               INTO=LINE                                         RS0406
         BRASL R14,SPACE1                                        RS0903
         STRING64 6X,'Lookup hit      :',                              X
               (PCTL_FS_META_Y,FD,R9B),6X,                             X
               ' Lookup miss    :',                                    X
               (PCTL_FS_META_N,FD,R9B),                                X
               INTO=LINE                                         RS0406
         BRASL R14,SPACE1                                        RS0903
         STRING64 6X,'1st page hit    :',                              X
               (PCTL_FS_RPN0_Y,FD,R9B),6X,                             X
               ' 1st page miss  :',                                    X
               (PCTL_FS_RPN0_N,FD,R9B),                                X
               INTO=LINE                                         RS0406
         BRASL R14,SPACE1                                        RS0903
         STRING64 6X,'Index new tops  :',                              X
               (PCTL_FS_IX_TOPS,FD,R9B),6X,                            X
               ' Index splits   :',                                    X
               (PCTL_FS_IX_SPLITS,FD,R9B),                             X
               INTO=LINE                                         RS0406
         BRASL R14,SPACE1                                        RS0903
         STRING64 6X,'Index joins     :',                              X
               (PCTL_FS_IX_JOINS,FD,R9B),6X,                           X
               ' Index read hit :',                                    X
               (PCTL_FS_IX_RDHIT,FD,R9B),                              X
               INTO=LINE                                         RS0406
         BRASL R14,SPACE1                                        RS0903
         STRING64 6X,'Index read miss :',                              X
               (PCTL_FS_IX_RDMISS,FD,R9B),6X,                          X
               ' Index write hit:',                                    X
               (PCTL_FS_IX_WRHIT,FD,R9B),                              X
               INTO=LINE                                         RS0406
         BRASL R14,SPACE1                                        RS0903
         STRING64 6X,'Index write miss:',                              X
               (PCTL_FS_IX_WRMISS,FD,R9B),6X,                          X
               INTO=LINE                                         RS0406
         BRASL R14,SPACE1                                        RS0903
         STRING64 6X,'RFS Flags       :',7X,(PCTL_FS_RFS_FLAGS,,X),6X, X
               ' RFS error flags:',7X,(PCTL_FS_RFS_SYNC_ERR,,X),       X
               INTO=LINE                                         RS0406
         BRASL R14,SPACE1                                        RS0903
         STRING64 6X,'High format RFN :',(PCTL_FS_HFRFN,F,R9B),6X,     X
               ' Member count   :',(PCTL_FS_MEM_CNT,F,R9B),            X
               INTO=LINE                                         RS0406
         BRASL R14,SPACE1                                        RS0903
         STRING64 6X,'Sync interval   :',(PCTL_FS_SYNC,H,R9B),         X
               INTO=LINE                                         RS0406
         BRASL R14,SPACE1                                        RS0903
         J     USSF170                                           RS0903
USSF160  DS    0H                                                RS0903
         STRING64 4X,'BPX1PCT',                                  RS0903X
               ' Returncode=',(LRETCODE,,X),                     RS0903X
               ' Reasoncode=',(LRSNCODE,,X),                     RS0903X
               INTO=LINE                                         RS0903
         BRASL R14,SPACE1              DOUBLE SPACE              RS0903
USSF170  DS    0H                                                RS0903
         DELETE EP=BPX1PCT
         LM    R1,R2,GETMAIN_LEN_ADDR  save addr and length      RS0903
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS0903
         JO    USSF171                 yes, jump                 RS0903
         FREEMAIN RU,LV=(R2),A=(R1)    free getmained work area  RS0903
         J     USSF192                 jump to next display      RS0903
USSF171  DS    0H                                                RS0903
         LR    R0,R2                   length for FREEMAIN       RS0903
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES           Free
         DROP  R7                                                RS0903
         J     USSF192                 jump to next display      RS0505
USSF180  DS    0H
         TM    MNTENTFSMODE4,MNTENTFSCLIENT Client ?             RS1105
         JNZ   USSF192                 yes leave                 RS1105
         LA    R2,BUFFERFSL
         ST    R2,WKCELL1
*
*        Allocate an answer area
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    USSF181                 yes, jump
         GETMAIN RU,LV=(R2),BNDRY=PAGE allocate PATH work area
         J     USSF182
USSF181  DS    0H
         LA    R1,1                    LOC=ANY
         LR    R0,R2                   Length of storage
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
         LR    R2,R0
USSF182  DS    0H
         LR    R7,R1                   where did we find it
         STM   R1,R2,GETMAIN_LEN_ADDR  save addr and length
         USING BUFFERFS,R7
         XC    FSID(FSIDL),FSID        clear                     RS0907
         MVC   FSID_EYE,=C'FSID'
         LHI   R0,FSIDL
         STC   R0,FSID_LEN
         LHI   R0,FSID_VERSION2
         STC   R0,FSID_VER
         MVC   FSID_NAME,MNTENTFSNAM44
         LHI   R4,44
         LA    R11,FSID_NAME
*loop
USSF182_A DS    0H
         CLI   0(R11),C' '             Blank ?
         JNE   USSF182_B
         MVI   0(R11),X'00'            set nullterminator
USSF182_B DS    0H
         LA    R11,1(R11)
         JCT   R4,USSF182_A            loop
*endloop
         MVC   FS_EYE,=C'FSST'
         LHI   R0,FSSTL
         STH   R0,FS_LEN
         LHI   R0,FSST_VERSION1
         STC   R0,FS_VER
         XC    FSPARMS(32),FSPARMS     clear parms
         LHI   R0,FSOP_GETSTAT_PARMDATA
         ST    R0,FSPARMS               opcode
         LHI   R0,32                   Offset to buffer (size only)
         ST    R0,FSPARMS+4             parm(0)
         AHI   R0,FSIDL                + length of FSID
         ST    R0,FSPARMS+8             parm(1)
         LOAD  EP=BPX1PCT              USS callable service
         LR    R15,R0
         CALL (15),                    pfsctl                          X
               (=CL8'ZFS',             type                            X
               =A(ZFSCALL_FILESYS),    ZFSCALL_FILESYS                 X
               WKCELL1,                length                          X
               (R7),                   Info                            X
               WKCELL2,                Return_value 0 or -1            X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)
*        #SNAP ADDR=(R7),LENGTH=512    Debug code
         ICM   R15,B'1111',WKCELL2
         JM    USSF183                 Minus = Error
*        #SNAP ADDR=FSST,LENGTH=FSSTL  Debug code
*zfsadm lsfs -aggregate SMIPDS.REPORT.ALF0.ZFSFILE -long
*IOEZ00129I Total of 1 file systems found for aggregate SMIPDS.REPORT
*SMIPDS.REPORT.ALF0.ZFSFILE 100011,,5 RW (Mounted R/W)
*   states 0x10010005 On-Line
*   4294967232 K alloc limit;       3814 K alloc usage
*        10647 K quota limit;       3814 K quota usage
*   Creation Mon Jan 17 13:13:56 2005
*   Last Update Wed Jan 26 12:12:19 2005
         LLGF  R1,FS_ALLOCLIMIT        load 32 unsigned
         CVDG  R1,WORK256+10           convert to decimal (PL16)
         LLGF  R1,FS_ALLOCUSAGE        load 32 unsigned
         CVDG  R1,WORK256+40           convert to decimal (PL16)
*
         STRING64 6X,'Alloc limit K: ',                                X
               (WORK256+10,P,L16B),                                    X
               ' Alloc Usage K: ',                                     X
               (WORK256+40,P,L16B),                                    X
               INTO=LINE
         BRASL R14,SPACE1
         LLGF  R1,FS_VISQUOTALIMIT     load 32 unsigned
         CVDG  R1,WORK256+10           convert to decimal (PL16)
         LLGF  R1,FS_VISQUOTAUSAGE     load 32 unsigned
         CVDG  R1,WORK256+40           convert to decimal (PL16)
         STRING64 6X,'Quota limit K: ',                                X
               (WORK256+10,P,L16B),                                    X
               ' Quota Usage K: ',                                     X
               (WORK256+40,P,L16B),                                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 6X,'Threshold    : ',                                X
               (FS_THRESHOLD,FL1,R3B),'%',12X,                         X
               ' Increment    : ',                                     X
               (FS_INCREMENT,FL1,R3B),'%',                             X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 6X,'Clone        : ','n/a',INTO=LINE
         ICM   R1,B'1111',FS_CLONETIME_TVSEC   epoch time
         JZ    USSF182_M
         BRASL R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value
         BRASL R14,STCKCONV
         STRING64 6X,'Clone        : ',(STCKDATE,,10),1X,(STCKTIME,,8),X
               INTO=LINE
USSF182_M DS    0H
         BRASL R14,SPACE1
         STRING64 6X,'Creation     : ','n/a',INTO=LINE
         ICM   R1,B'1111',FS_CREATETIME_TVSEC   epoch time
         JZ    USSF182_N
         BRASL R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value
         BRASL R14,STCKCONV
         STRING64 6X,'Creation     : ',(STCKDATE,,10),1X,(STCKTIME,,8),X
               INTO=LINE
USSF182_N DS    0H
         BRASL R14,SPACE1
         STRING64 6X,'Last Update  : ','n/a',INTO=LINE
         ICM   R1,B'1111',FS_UPDATETIME_TVSEC   epoch time
         JZ    USSF182_O
         BRASL R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value
         BRASL R14,STCKCONV
         STRING64 6X,'Last Update  : ',(STCKDATE,,10),1X,(STCKTIME,,8),X
               INTO=LINE
USSF182_O DS    0H
         BRASL R14,SPACE1
         STRING64 6X,'Last Access  : ','n/a',INTO=LINE
         ICM   R1,B'1111',FS_ACCESSTIME_TVSEC   epoch time
         JZ    USSF182_P
         BRASL R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value
         BRASL R14,STCKCONV
         STRING64 6X,'Last Access  : ',(STCKDATE,,10),1X,(STCKTIME,,8),X
               INTO=LINE
USSF182_P DS    0H
         BRASL R14,SPACE1
         J     USSF184
USSF183  DS    0H
         STRING64 4X,'BPX1PCT',                                        X
               ' Returncode=',(LRETCODE,,X),                           X
               ' Reasoncode=',(LRSNCODE,,X),                           X
               INTO=LINE
         BRASL R14,SPACE1              DOUBLE SPACE
USSF184  DS    0H
         DELETE EP=BPX1PCT
         LM    R1,R2,GETMAIN_LEN_ADDR  save addr and length
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    USSF185                 yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free getmained work area
         J     USSF192                 jump to next display
USSF185  DS    0H
         LR    R0,R2                   length for FREEMAIN
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES           Free
         DROP  R7
.USSF192 ANOP
USSF192  DS    0H                                                RS0903
         J     USSF110
*Endloop
USSF200  DS    0H
         DELETE EP=BPX1GMN
         BRASL R14,BLANK1              BLANK LINE
         J     USSF999
.USSF400 ANOP                                                    RS0601
USSF400  DS    0H                                                RS0601
.USSF980 ANOP
USSF980  DS    0H
         STRING64 2X,'BPX1',(WORK256,3),                               X
               ' Returncode=',(LRETCODE,,X),                           X
               ' Reasoncode=',(LRSNCODE,,X),                           X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
.USSF999 ANOP
USSF999  DS    0H
         END_PROC
         TITLE 'SHOWMVS &REL - UNIX System Services Data PID'    RS1199
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*  PID: (with OE-threads info and real Userid)                        *
*    User     Jobname   ASID         PID        PPID State  Start     *
*    $STCOEK  BPXOINIT  0038           1           0 MI   2003-08-28 1*
*             0 CMD=BPXPINPR                                          *
*      Thread_ID        TCB      User        SC  State ACC-Time      S*
*      0D12B81000000000 008EF920             FRK .X... 000H00M00S06  2*
*      0D12C50000000001 008EF788             WAT .W... 000H13M19S61  2*
*      0D1312A000000002 008EF4D0                 .Y... 000H00M00S01  2*
*      0D131F9000000003 008EC788             KIN .K... 000H00M00S00  2*
*      0D132C8000000004 008EC4E0             ACP .F... 000H00M00S00  2*
*                                                                     *
*---------------------------------------------------------------------*
USSP     BEGIN_PROC KW=USSP               LOAD require           RS0302
         L     R2,CVTECVT              ECVT                      RS0500
         USING ECVT,R2                                           RS0500
         L     R3,ECVTOCVT-ECVT(,R2)   OCVT
         LTR   R3,R3
         JZ    USSP999
         TM    ECVTOCVT,ECVTOMVS       Check for OpenMVS
         JZ    USSP999                 No
         USING OCVT,R3
         BRASL R14,WORKADDR            work area                 RS0601
         L     R0,=A(PGTHA#LEN+PGTHB#LEN+PGTHC#LEN+PGTHJ#LEN)    RS0601
         LR    R3,R1                   where did we find it      RS0601
         USING PGTHA,R3                tell assembler            RS0601
         XC    PGTHA,PGTHA             clear                     RS0601
         LA    R4,PGTHA#LEN(R3)                                  RS0601
         USING PGTHB,R4                tell assembler            RS0601
         MVI   PGTHAFLAG1,PGTHAPROCESS+PGTHACOMMAND+PGTHATHREAD  RS0601
         AIF   (NOT D'CVTH7790).JH0112D  z/OS V2R1 ? No          JH1309
         TM    HBB7790,L'HBB7790       running on z/OS V2R1 ?    JH1309
         JNO   USSP300             ...jif not                    JH1309
         MVI   PGTHAFLAG1B2,PGTHATHDSIGMASK Return signal mask   JH1309
USSP300  DS    0H                                                JH1309
.JH0112D ANOP                                                    JH1309
         MVI   PGTHAACCESSPID,PGTH#NEXT                          RS0601
         STRING64 '  PID: (with OE-threads info and real Userid)',     X
               INTO=LINE                                         RS0601
         BRASL R14,SPACE1                                        RS0601
         STRING64 4X,'User     ','Jobname   ','ASID         ',         X
               'PID        ','PPID ','State ','Start',                 X
               '              CT_Secs',INTO=LINE                 RS0601
         BRASL R14,SPACE1                                        RS0601
         LOAD  EP=BPX1GTH              USS  callable service     RS0601
         ST    R0,BPX_MOD              SAVE EP ADDRESS           RS0601
*Loop                                                            RS0601
USSP410  DS    0H                                                RS0601
*        #SNAP ADDR=(R3),LENGTH=PGTHA#LEN                        RS0601
         ST    R3,WKCELL1              pass address of PGTHA     RS0601
         ST    R4,WKCELL2              pass address of PGTHB     RS0601
         MVC   WORK256(3),=C'GTH'      Save ID of callable serviceS0601
         L     R15,BPX_MOD             load entry point          RS0601
         CALL (15),                    __getthent                      X
               (=A(PGTHA#LEN),         Length PGTHA                    X
               WKCELL1,                PGTHA (inout area)              X
               =A(PGTHB#LEN+PGTHC#LEN+PGTHJ#LEN+2048), length          X
               WKCELL2,                PGTHB and others                X
               WKCELL3,                Return_value 0 or -1            X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)                                RS0601
         CLC   LRETCODE,=F'156'  X'9C' bad rc from USS           RS0601
         JE    USSP980                                           RS0601
         ICM   R15,B'1111',WKCELL3     load returncode           RS0601
         JM    USSP500                 Minus = End of data       RS0601
*        #SNAP ADDR=(R3),LENGTH=PGTHA#LEN  debug code            RS0601
         SR    R5,R5                   clear R5                  RS0601
         ICM   R5,B'0111',PGTHBOFFC    get offset of PGTHC       RS0601
         AR    R5,R4                   add base                  RS0601
         USING PGTHC,R5                tell assembler            RS0601
         SR    R6,R6                   clear R6                  RS0601
         ICM   R6,B'0111',PGTHBOFFF    get offset of PGTHF       RS0601
         AR    R6,R4                   add base                  RS0601
         USING PGTHF,R6                tell assembler            RS0601
         SR    R7,R7                   clear R7                  RS0601
         ICM   R7,B'0111',PGTHBOFFJ    get offset of PGTHJ       RS0601
         AR    R7,R4                   add base                  RS0601
         USING PGTHJ,R7                tell assembler            RS0601
*        #SNAP ADDR=(R4),LENGTH=PGTHB#LEN  debug code            RS0601
*        #SNAP ADDR=(R5),LENGTH=PGTHC#LEN  debug code            RS0601
*        #SNAP ADDR=(R6),LENGTH=64         debug code            RS0601
*        #SNAP ADDR=(R7),LENGTH=300        debug code            RS0601
         L     R1,PGTHCSTARTTIME       get epoch time            RS0601
*        #SNAP ADDR=PGTHCSTARTTIME,LENGTH=4
         BRASL R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value      RS0601
         BRASL R14,STCKCONV            convert TOD clock to decimal0601
         LOAD  EP=BPX1SYC              Sysconf                   RS0601
         LR    R15,R0                  Entry point               RS0601
         MVC   WORK256(3),=C'SYC'                                RS0601
         CALL (15),                    w_getconf                       X
               (=A(SC_CLK_TCK),        For the clock_t                 X
               WKCELL3,                -1 or Clock_t value             X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)                                RS0601
         DELETE EP=BPX1SYC
         ICM   R15,B'1111',WKCELL3     check returncode          RS0601
         JM    USSP980                 Minus = Error             RS0601
*        #SNAP ADDR=WKCELL3,LENGTH=4   debug code                RS0601
         MVI   WORK256+4,C'M'          Multithread (default)     RS0601
         TM    PGTHCFLAG1,PGTHCMULPROCESS  Multithread process   RS0601
         JZ    USSP420_1                                         RS0601
         MVI   WORK256+4,C'1'          Single                    RS0601
USSP420_1 MVI  WORK256+5,C'-'                                    RS0601
         TM    PGTHCFLAG1,PGTHCSWAP    Swapped?                  RS0601
         JNO   USSP422_1                 no, don't set the I     RS0601
         MVI   WORK256+5,C'I'                                    RS0601
USSP422_1 DS   0H                                                RS0601
         L     R1,PGTHCUSERTIME        User-CPU                  RS0601
         A     R1,PGTHCSYSTIME         System time               RS0601
         ST    R3,WKCELL1              save R3                   RS0601
         BRASL R14,BINTIME             convert time to HH MM SS  RS0601
*        L     R3,WKCELL1              restore R3                RS0601
USSP430  DS    0H                                                RS0601
         STRING64 4X,PGTHCLOGINNAME,1X,PGTHCJOBNAME,                   X
               2X,(PGTHCASID,,X),3X,(PGTHCPID,F,R9B),                  X
               3X,(PGTHCPPID,F,R9B),1X,(WORK256+4,2),                  X
               3X,STCKDATE,1X,(STCKTIME,8),1X,                         X
               ((R3),,R3Z),':',((R2),,R2Z),':',                        X
               ((R1),,R2Z),':',((R0),,R2Z),                            X
               INTO=LINE                                         RS0601
         L     R3,WKCELL1              restore R3                RS1101
         TR    LINE,TRTPRINT           get rid of garbage        RS0601
         BRASL R14,SPACE1                                        RS0601
         CLI   PGTHBLIMITF,C'A'       info present ?             RS0103
         JNE   USSP465                   no leave                RS0103
         LH    R0,PGTHFLEN             Length of Command (Alignment)601
         BCTR  R0,0                    Minus one for CMD         RS0601
         STRING64 5X,(PGTHCEUID,F,R9B),' CMD=',(PGTHFCOMMAND,(R0)),    X
               INTO=LINE                                         RS0601
         TR    LINE,TRTDOTS      convert non-printable to dots   RS0102
         BRASL R14,SPACE1                                        RS0601
         DROP  R6                      No longer needed          RS0601
         LH    R6,PGTHCCNTOE           No. of Threads            RS0601
         LTR   R6,R6                   some thread?              RS0601
         JZ    USSP465                   no                      RS0601
         AIF   (NOT D'CVTH7790).JH0112G  z/OS V2R1 ? No          JH1309
         TM    HBB7790,L'HBB7790       running on z/OS V2R1 ?    JH1309
         JNO   USSP432             ...jif not                    JH1309
         STRING64 6X,'Thread_ID        ','TCB      ',            JH1309X
               'User     ',3X,'SC  ','State ',                   JH1309X
               '  Signal Mask   ',                               JH1309X
               'ACC-Time',6X,                                    JH1309X
               'Start',INTO=LINE                                 JH1309
         J     USSP434                                           JH1309
.JH0112G ANOP                                                    JH1309
USSP432  DS    0H                                                JH1309
         STRING64 6X,'Thread_ID        ','TCB      ',                  X
               'User     ',3X,'SC  ','State ','ACC-Time',6X,           X
               'Start',INTO=LINE                                 RS0601
USSP434  DS    0H                                                JH1309
         BRASL R14,SPACE1                                        RS0601
*  loop                                                          RS0601
USSP460  DS    0H                                                RS0601
*        #SNAP ADDR=(R7),LENGTH=PGTHJ#LEN  debug code            RS0601
         L     R1,PGTHJTTIME           Time                      RS0601
         ST    R3,WKCELL1              save R3                   RS0601
         BRASL R14,BINTIME             convert time to HH MM SS  RS0601
         AIF   (NOT D'CVTH7790).JH0112E  z/OS V2R1 ? No          JH1309
         TM    HBB7790,L'HBB7790       running on z/OS V2R1 ?    JH1309
         JNO   USSP462             ...jif not                    JH1309
         STRING64 6X,(PGTHJTHID,8,X),1X,(PGTHJTCB,4,X),1X,       JH1309X
               (PGTHJLOGINNAME),4X,(PGTHJSYSCALL+1,3),1X,        JH1309X
               (PGTHJSTATUSCHARS,5),1X,                          JH1309X
               (PGTHJSIGMASK,8,X),1X,                            JH1309X
               ((R3),,R3Z),':',((R2),,R2Z),':',                  JH1309X
               ((R1),,R2Z),':',((R0),,R2Z),1X,                   JH1309X
               1X,STCKDATE,1X,(STCKTIME,8),                      JH1309X
               INTO=LINE                                         JH1309
         J     USSP462A                                          JH1309
USSP462  DS    0H                                                JH1309
.JH0112E ANOP                                                    JH1309
         STRING64 6X,(PGTHJTHID,8,X),1X,(PGTHJTCB,4,X),1X,             X
               (PGTHJLOGINNAME),4X,(PGTHJSYSCALL+1,3),1X,              X
               (PGTHJSTATUSCHARS,5),1X,                                X
               ((R3),,R3Z),':',((R2),,R2Z),':',                        X
               ((R1),,R2Z),':',((R0),,R2Z),1X,                         X
               1X,STCKDATE,1X,(STCKTIME,8),                            X
               INTO=LINE                                         RS0601
USSP462A DS    0H                                                JH1309
         L     R3,WKCELL1              restore R3                RS1101
         TR    LINE,TRTPRINT           get rid of garbage        RS0601
         BRASL R14,SPACE1                                        RS0601
         CLI   PGTHJLIMITJ,PGTH#NOTCONNECTED End of area         RS0601
         JE    USSP465                        yes                RS0601
         CLI   PGTHJLIMITJ,PGTH#STORAGE     More entries !!!     RS0601
         JNE   USSP463                       no                  RS0601
         MVC   PGTHACONTINUE,PGTHBCONTINUE  get next             RS0601
         ST    R3,WKCELL1                                        RS0601
         ST    R4,WKCELL2                                        RS0601
         MVC   WORK256(3),=C'GTH'                                RS0601
         L     R15,BPX_MOD                                       RS0601
         CALL (15),                    __getthent                      X
               (=A(PGTHA#LEN),         Length PGTHA                    X
               WKCELL1,                PGTHA (inout area)              X
               =A(PGTHB#LEN+PGTHC#LEN+2048+PGTHJ#LEN), length          X
               WKCELL2,                PGTHB and others                X
               WKCELL3,                Return_value 0 or -1            X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)                                RS0601
         ICM   R15,B'1111',WKCELL3    Check returncode           RS0601
         JM    USSP980                Minus = Error              RS0601
         SR    R5,R5                  Clear R5                   RS0601
         ICM   R5,B'0111',PGTHBOFFC   get offset of PGTHC        RS0601
         AR    R5,R4                  add base                   RS0601
         SR    R7,R7                  Clear R7                   RS0601
         ICM   R7,B'0111',PGTHBOFFJ   get offset of PGTHJ        RS0601
         AR    R7,R4                  add base                   RS0601
         LH    R6,PGTHCCNTOE          No. of Threads             RS0601
         LTR   R6,R6                  Are there some thread?     RS0601
         JZ    USSP465                   no                      RS0601
         J     USSP460                                           RS0601
*  Endloop                                                       RS0601
USSP463  DS    0H                                                RS0601
         SR    R1,R1                  Clear R1                   RS0601
         ICM   R1,B'0111',PGTHJOFFJ   get next entry             RS0601
         LR    R7,R4                  load base                  RS0601
         AR    R7,R1                  add offset                 RS0601
         JCT   R6,USSP460             loop                       RS0601
USSP465  DS    0H                                                RS0601
         BRASL R14,BLANK1             BLANK LINE                 RS0601
         MVC   PGTHACONTINUE,PGTHBCONTINUE  next entry           RS0601
         J     USSP410                loop                       RS0601
         DROP  R3,R4,R5,R7                                       RS0701
*Endloop                                                         RS0601
USSP500  DS    0H                                                RS0601
         BRASL R14,BLANK1             BLANK LINE
         LOAD  EP=BPX1GEU             USS  callable service
         LR    R15,R0                 entry point
         MVC   WORK256(3),=C'GEU'
         CALL (15),                    w_getconf                       X
               (WKCELL1),                                              X
               MF=(E,WORK256+100)
         CLC   LRETCODE,=F'156'  X'9C' bad rc from USS
         JE    USSP980
         ICM   R1,B'1111',WKCELL1
         JZ    USSP505
         STRING64 4X,'The PID-list MIGHT be incomplete because your ', X
               'UID= ',(WKCELL1,F,R9B),' is not a SuperUID(0)',        X
               INTO=LINE
         BRASL R14,SPACE2                                        RS0800
         DELETE EP=BPX1GEU
USSP505  DS    0H                                                RS0601
         BRASL R14,WORKADDR            32K work area
         LR    R3,R1                   WHERE DID WE FIND IT
         USING IPCQ,R3                 tell assembler
         ST    R3,WKCELL2
         XC    WKCELL1,WKCELL1         token
         STRING64 '  IPC:',INTO=LINE
         BRASL R14,SPACE2
         LOAD  EP=BPX1GET              USS callable service      RS0601
         ST    R0,BPX_MOD              SAVE EP ADDRESS           RS0601
*Loop
USSP510  DS    0H
         MVC   WORK256(3),=C'GET'
         L     R15,BPX_MOD             Entry point
         CALL (15),                    w_getipc                        X
               (WKCELL1,               token                           X
               WKCELL2,                PGTHA (inout area)              X
               =A(IPCQ#LENGTH),        length                          X
               =A(IPCQ#ALL),           return all                      X
               WKCELL3,                Return_value 0 or -1            X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)
         ICM   R15,B'1111',WKCELL3
         JZ    USSP590                 Zero = end of data
         C     R15,=X'FFFFFFFF'        -1
         JZ    USSP980                 Error
         LA    R4,IPCQIPCP
         USING IPC_PERM,R4
         LA    R5,IPC_MODE
         USING S_MODE,R5
         CLC   IPCQTYPE,=C'IMSG'       msg queue
         JNE   USSP520
         CLI   WKCELL4,C'1'            Header already printed?
         JE    USSP515                   yes, jump around
         MVI   WKCELL4,C'1'            Mark header as printed
         STRING64 '    Message Queues:',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '            ID Key      Mode          Owner',       X
               '     CBytes       QNum STime     RTime     CTime',     X
               INTO=LINE
         BRASL R14,SPACE1
USSP515  DS    0H
         MVC   WORK256(3),=C'GPU'
         MVC   WORK256+10(8),BLANKS
         MVC   WORK256+15(3),=C'n/a'
         LOAD  EP=BPX1GPU              getpwuid
         LR    R15,R0                  Entry point
         CALL  (15),                   w_getipc                        X
               (IPC_UID,               Userid                          X
               WKCELL4+4,              Return_value 0 or ptr           X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)
         DELETE EP=BPX1GPU
         ICM   R6,B'1111',WKCELL4+4
         JZ    USSP515_1
         USING GIDN,R6
         STRING64 (GIDN_U_NAME,8),INTO=WORK256+10
USSP515_1 DS   0H
         STRING64 4X,(IPCQMID,F,R10B),1X,(IPCQKEY,,X),1X,              X
               (IPC_MODE,,X),3X,(WORK256+10,8),1X,                     X
               (IPCQQBYTES,F,R10B),1X,(IPCQNUM,F,R10B),                X
               INTO=LINE
         ICM   R1,B'1111',IPCQSTIME      get epoch time
         JZ    USSP516
         BRASL R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value
         BRASL R14,STCKCONV
         STRING64 (STCKTIME,,8),INTO=(LINE+66,8)
USSP516  DS    0H
         ICM   R1,B'1111',IPCQRTIME      get epoch time
         JZ    USSP517
         BRASL R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value
         BRASL R14,STCKCONV
         STRING64 (STCKTIME,,8),INTO=(LINE+76,8)
USSP517  DS    0H
         ICM   R1,B'1111',IPCQCTIME      get epoch time
         JZ    USSP518
         BRASL R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value
         BRASL R14,STCKCONV
         STRING64 (STCKTIME,,8),INTO=(LINE+86,8)
USSP518  DS    0H
         BRASL R14,SPACE1
         J     USSP580
USSP520  DS    0H
         CLC   IPCQTYPE,=C'ISEM'       Semaphore
         JNE   USSP530
         CLI   WKCELL4,C'2'            Header already printed?
         JE    USSP525                   yes, jump around
         MVI   WKCELL4,C'2'            Mark header as printed
         STRING64 '    Semaphores:',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '            ID Key      Mode          Owner',       X
               ' NSems OTime     CTime',                               X
               INTO=LINE
         BRASL R14,SPACE1
USSP525  DS    0H
         MVC   WORK256(3),=C'GPU'
         MVC   WORK256+10(8),BLANKS
         MVC   WORK256+15(3),=C'n/a'
         LOAD  EP=BPX1GPU              getpwuid
         LR    R15,R0                  Entry point
         CALL  (15),                   w_getipc                        X
               (IPC_UID,               Userid                          X
               WKCELL4+4,              Return_value 0 or ptr           X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)
         ICM   R6,B'1111',WKCELL4+4
         JZ    USSP525_1
         USING GIDN,R6
         STRING64 (GIDN_U_NAME,8),INTO=WORK256+10
USSP525_1 DS   0H
         STRING64 4X,(IPCQMID,F,R10B),1X,(IPCQKEY,,X),1X,              X
               (IPC_MODE,,X),3X,(WORK256+10,8),1X,                     X
               (IPCQNSEMS,H,R5B),INTO=LINE
         ICM   R1,B'1111',IPCQOTIME      get epoch time
         JZ    USSP526
         BRASL R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value
         BRASL R14,STCKCONV
         STRING64 (STCKTIME,,8),INTO=(LINE+50,8)
USSP526  DS    0H
         ICM   R1,B'1111',IPCQCTIME      get epoch time
         JZ    USSP527
         BRASL R14,EPOCH2TOD           convert EPOCH TO TOD
         LA    R1,TENWORDS             pass TOD clock value
         BRASL R14,STCKCONV
         STRING64 (STCKTIME,,8),INTO=(LINE+60,8)
USSP527  DS    0H
         BRASL R14,SPACE1
         J     USSP580
USSP530  DS    0H
         CLC   IPCQTYPE,=C'ISHM'       Shared memory
         JNE   USSP580
         CLI   WKCELL4,C'3'            Header already printed?
         JE    USSP535                   yes, jump around
         MVI   WKCELL4,C'3'            Mark header as printed
         STRING64 '     Shared Memory:',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '            ID Key      Mode          Owner',       X
               '       ACnt    SegSize        PID',                    X
               INTO=LINE
         BRASL R14,SPACE1
USSP535  DS    0H
         MVC   WORK256(3),=C'GPU'
         MVC   WORK256+10(8),BLANKS
         MVC   WORK256+15(3),=C'n/a'
         LOAD  EP=BPX1GPU              getpwuid
         LR    R15,R0                  Entry point
         CALL  (15),                   w_getipc                        X
               (IPC_UID,               Userid                          X
               WKCELL4+4,              Return_value 0 or ptr           X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)
         ICM   R6,B'1111',WKCELL4+4
         JZ    USSP535_1
         USING GIDN,R6
         STRING64 (GIDN_U_NAME,8),INTO=WORK256+10
USSP535_1 DS   0H
         STRING64 4X,(IPCQMID,F,R10B),1X,(IPCQKEY,,X),1X,              X
               (IPC_MODE,,X),3X,(WORK256+10,8),1X,                     X
               (IPCQACNT,F,R10B),1X,(IPCQSEGSZ,F,R10B),1X,             X
               (IPCQCPID,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         J     USSP580
USSP580  DS    0H
*        #SNAP ADDR=(R3),LENGTH=IPCQ#LENGTH
         MVC   WKCELL1,WKCELL3         set token for next call
         J     USSP510
USSP590  DS    0H
         DELETE EP=BPX1GET
         MVC   WORK256(3),=C'GET'
         LOAD  EP=BPX1GET              w_getipc
         LR    R15,R0                  Entry point
         CALL (15),                    w_getipc                        X
               (WKCELL1,               token                           X
               WKCELL2,                PGTHA (inout area)              X
               =A(IPCQ#LENGTH),        length                          X
               =A(IPCQ#OVER),          return all                      X
               WKCELL3,                Return_value 0 or -1            X
               LRETCODE,               Returncode                      X
               LRSNCODE),              Resoncode                       X
               MF=(E,WORK256+100)
         ICM   R15,B'1111',WKCELL3
         JM    USSP999                 Zero = end of data
*        #SNAP ADDR=(R3),LENGTH=IPCQ#LENGTH
         STRING64 '    Summary:',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Message Queues:',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '        MNIDS: ',(IPCQOMSGNIDS,F,R10B),             X
               ' HWIDS: ',(IPCQOMSGHIGHH2O,F,R10B),                    X
               ' CIDSA: ',(IPCQOMSGFREE,F,R10B),                       X
               ' CPRIV: ',(IPCQOMSGPRIVATE,F,R10B),                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '        CKEY:  ',(IPCQOMSGKEYED,F,R10B),            X
               ' GETEX: ',(IPCQOMSGREJECTS,F,R10B),                    X
               ' MAXQB: ',(IPCQOMSGQBYTES,F,R10B),                     X
               ' QMNUM: ',(IPCQOMSGQMNUM,F,R10B),                      X
               ' ENOMEM: ',(IPCQOMSGNOALC,F,R10B),                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Semaphores:',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '        MNIDS: ',(IPCQOSEMNIDS,F,R10B),             X
               ' HWIDS: ',(IPCQOSEMHIGHH2O,F,R10B),                    X
               ' CIDSA: ',(IPCQOSEMFREE,F,R10B),                       X
               ' CPRIV: ',(IPCQOSEMPRIVATE,F,R10B),                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '        CKEY:  ',(IPCQOSEMKEYED,F,R10B),            X
               ' GETEX: ',(IPCQOSEMREJECTS,F,R10B),                    X
               ' MNSEM: ',(IPCQOSEMSNSEMS,F,R10B),                     X
               ' MNOPS: ',(IPCQOSEMSNOPS,F,R10B),                      X
               ' SBYTES: ',(IPCQOSEMSBYTES,F,R10B),                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '        CBYTE: ',(IPCQOSEMCBYTES,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Shared Memory:',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '        MNIDS: ',(IPCQOSHMNIDS,F,R10B),             X
               ' HWIDS: ',(IPCQOSHMHIGHH2O,F,R10B),                    X
               ' CIDSA: ',(IPCQOSHMFREE,F,R10B),                       X
               ' CPRIV: ',(IPCQOSHMPRIVATE,F,R10B),                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '        CKEY:  ',(IPCQOSHMKEYED,F,R10B),            X
               ' GETEX: ',(IPCQOSHMREJECTS,F,R10B),                    X
               ' TPAGE: ',(IPCQOSHMSPAGES,F,R10B),                     X
               ' SPAGE: ',(IPCQOSHMMPAGES,F,R10B),                     X
               ' SEGPR:  ',(IPCQOSHMNSEGS,F,R10B),                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '        CPAG:  ',(IPCQOSHMCPAGES,F,R10B),           X
               ' MXSEG: ',(IPCQOSHMBIGGEST,F,R10B),                    X
               INTO=LINE
         BRASL R14,SPACE2
         J     USSP999
         DROP  R3,R4,R5,R6          no longer used
.USSP980 ANOP
USSP980  DS    0H
         STRING64 2X,'BPX1',(WORK256,3),                               X
               ' Returncode=',(LRETCODE,,X),                           X
               ' Reasoncode=',(LRSNCODE,,X),                           X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         J     USSP999
PGPSL    DC    A(PGPS#LENGTH)
.USSP999 ANOP
USSP999  DS    0H
         END_PROC
         TITLE 'SHOWMVS &REL - Cryptography Information'         JM0300
*---------------------------------------------------------------------*
*                                                                     *
*ICSF/MVS information                                                 *
*                                                                     *
*   Jobname: ICSF                                                     *
*   Cryptography is active: YES  Valid master key : NO                *
*   Initialization complete: YES  Active: YES                         *
*   Compatibility permitted: NO   At least one valid crypto unit: NO  *
*   CMOS hardware installed: NO                                       *
*   Installation exit word1 and word2: 00000000 00000000              *
*   FMID: HCRP220                                                     *
*   Userparm: E4E2C5D9D7C1D9D4(USERPARM)                              *
*                                                                     *
*   Measurements:                                                     *
*   Service            Calls           Bytes    Instructions          *
*   ENCSDES                0               0               0          *
*   ENCTDES              256            3632             256          *
*   DECSDES                0               0               0          *
*   DECTDES                0               0               0          *
*   MACGEN                 3             744               3          *
*   MACVER                 5            1240               5          *
*   OWH                  735       370196544             756          *
*   PTR                    0               0               0          *
*   PVR                    0               0               0          *
*                                                                     *
*---------------------------------------------------------------------*
CSF      BEGIN_PROC KW=CSF                                       RS0302
         STRING64 '&TITLEPFX.ICSF/MVS information:',INTO=LINE
         BRASL R14,SPACE2             Double Space
         L     R7,CVTABEND
         USING SCVTSECT,R7
         ICM   R7,15,SCVTCCVT          CRYPTOGRAPHY CVT
         JZ    CSF0090                 no
         USING CCVT,R7
         LH    R4,CCVTASID             ASID of ICSF/MVS address space
         LTR   R4,R4                   Valid asid?
         JZ    CSF0010                 no
         LOCASCB ASID=(R4)             Get addr of ASCB
         LTR   R15,R1                  Valid ASID?
         JNP   CSF0020                 No, jump
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   CSF0010                 Yes - continue
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         JNZ   CSF0010                 No - continue
         LA    R1,BLANKS
CSF0010  DS    0H
         STRING64 '  Jobname: ',((R1),8),INTO=LINE
         BRASL R14,SPACE1              Double Space
CSF0020  DS    0H
         LA    R1,=C'No '
         TM    CCVTSFG1,CCVTACT        Crypto active
         JNO   *+8                     no
         LA    R1,=C'Yes'
         LA    R2,=C'No '
         TM    CCVTSFG1,CCVTMK         Valid master key
         JNO   *+8                     no
         LA    R2,=C'Yes'
         STRING64 '  Cryptography is active: ',((R1),3),2X,            X
               'Valid master key : ',((R2),3),                         X
               INTO=LINE
         BRASL R14,SPACE1          <== First line is title
         LA    R1,=C'No '
         TM    CCVTSFG1,CCVTINIT       ICSF/MVS init complete
         JNO   *+8                     no
         LA    R1,=C'Yes'
         LA    R2,=C'No '
         TM    CCVTSFG1,CCVTCSF        ICSF/MVS is active
         JNO   *+8                     no
         LA    R2,=C'Yes'
         STRING64 '   Initialization complete: ',((R1),3),2X,          X
               'Active: ',((R2),3),                                    X
               INTO=LINE
         BRASL R14,SPACE1          <== First line is title
         LA    R1,=C'No '
         TM    CCVTSFG1,CCVTCOMP       Compatibility permitted
         JNO   *+8                     no
         LA    R1,=C'Yes'
         LA    R2,=C'No '
         TM    CCVTSFG1,CCVTMK         Valid master key
         JNO   *+8                     no
         LA    R2,=C'Yes'
         STRING64 '  Compatibility permitted: ',((R1),3),2X,           X
               'At least one valid crypto unit: ',((R2),3),            X
               INTO=LINE
         BRASL R14,SPACE1          <== First line is title
         AIF   (D'CVTZOS_V1R10).CSF0025                          RS1209
         TM    HBB7750,L'HBB7750       running on z/OS R10       RS1209
         JNZ   CSF0025                  yes, leave               RS1209
         LA    R1,=C'No '
         TM    CCVTSFG1,CCVTCMOS       CMOS hardware installed?
         JNO   *+8                     no
         LA    R1,=C'Yes'
         STRING64 '  CMOS hardware installed: ',((R1),3),              X
               INTO=LINE
         BRASL R14,SPACE1          <== First line is title
.CSF0025 ANOP                                                    RS1209
CSF0025  DS    0H                                                RS1209
         STRING64 '  Installation exit word1 and word2: ',             X
               (CCVTINW1,,X),1X,(CCVTINW2,,X),                         X
               INTO=LINE
         BRASL R14,SPACE1          <== First line is title
         STRING64 '  FMID: ',CCVTFMID,INTO=LINE
         BRASL R14,SPACE1          <== First line is title
         STRING64 '  Userparm: ',                                      X
               (CCVT_USERPARM,,X),'(',CCVT_USERPARM,')',               X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         AIF   (NOT D'CVTH7707).CSF0085    z/OS R4 ?             RS0103
         TM    HBB7707,L'HBB7707       running on z/OS R4 ?      RS0103
         JNO   CSF0085                 no, jump                  RS0103
         TM    CVTFLAG3,CVTZARCH       running ALS-2 ?           RS0803
         JZ    CSF0085                                           RS0803
         ICM   R5,B'1111',CCVTDACC     RMF measurement data      RS0103
         JZ    CSF0085                   not present             RS0103
         USING DACC,R5                                           RS0103
*        #SNAP ADDR=(R5),LENGTH==DACC_LEN_TOT debug code
         LH    R6,DACC_ENT_CNT         number of entries         RS0803
         JZ    CSF0085                   leave if zero           RS0103
         STRING64 '  Measurements:',INTO=LINE                    RS0103
         BRASL R14,SPACE1              Single Space              RS0103
         STRING64 '  Service            Calls           Bytes',  RS0103X
               '    Instructions',INTO=LINE                      RS0103
         BRASL R14,SPACE1              Single Space              RS0103
         LA    R5,DACC_ENTRIES                                   RS0103
         DROP  R5                                                RS0103
         USING DACC_ENTRY,R5                                     RS0103
*loop                                                            RS0103
CSF0080  DS    0H                                                RS0103
         STRING64 2X,(DACC_ENT_ID),                                    X
               (DACC_ENT_SVC_CNT,FD,R16B),                             X
               (DACC_ENT_BYT_CNT,FD,R16B),                             X
               (DACC_ENT_INT_CNT,FD,R16B),                             X
               INTO=LINE                                         RS0406
         BRASL R14,SPACE1                                        RS0103
         LA    R5,DACC_ENTRY_LEN(,R5)                            RS0103
         JCT   R6,CSF0080                                        RS0103
*endloop                                                         RS0103
         DROP  R5                                                RS0103
.CSF0085  ANOP
CSF0085  DS    0H
         J     CSF0095
CSF0090  DS    0H
         STRING64 '  Cryptography is not active/installed',INTO=LINE
         BRASL R14,SPACE1              Single space              RS0803
CSF0095  DS    0H
         BRASL R14,BLANK1              Empty line
.CSF99   ANOP
CSF99    END_PROC
         TITLE 'SHOWMVS &REL - SMF Data'
*---------------------------------------------------------------------*
*                                                                     *
*SMF Data:                                                            *
*                                                                     *
*  Member(SMFPRM00)                                                   *
*    MAN(All) SID(P390) JWT(0030) MAXDORM(3000) STATUS(010000)        *
*    MEMLIMIT(00000M) INTVAL(30) SYNCVAL(00)                          *
*    BUFSIZMAX(0128M) BUFUSEWARN(25%)                                 *
*                                                                     *
*  SYS1.MAN1                     DUMP REQUIRED    MVSRES         100% *
*  SYS1.MAN2                     ACTIVE           MVSRES          81% *
*  SYS1.MAN3                                      MVSRES           0% *
*                                                                     *
*  SYS   TYPE(1-13,15,17-39,41-59,61,64,70-255)                       *
*        EXITS(IEFUSI,IEFU83)                                         *
*                                                                     *
*---------------------------------------------------------------------*
SMFDATA  BEGIN_PROC KW=SMF                                       RS0302
         STRING64 '&TITLEPFX.SMF Data:',INTO=LINE
         BRASL R14,SPACE2               Double Space
         L     R6,CVTSMCA              SMF SMCA
         USING SMCABASE,R6
         LA    R1,=C'None'             MAN=NONE
         TM    SMCAMISC,SMCAUSER+SMCAMAN Recording active?
         JZ    SMFDATA3                no, jump
         LA    R1,=C'All '             MAN=ALL
         JO    SMFDATA3                no, jump
         LA    R1,=C'User'             MAN=NONE
SMFDATA3 EQU   *
         L     R7,SMCAACTP             ACT address
         USING IEEMBACT,R7
         STRING64 '  Member(SMFPRM',ACTMEMID,')',INTO=LINE
         BRASL R14,SPACE1               Single Space
         STRING64 '    MAN(',((R1),4,T), MAN(All)                      X
               ') SID(',SMCASID,       SID(IPO1)                       X
               ') JWT(',SMCASJWT,      JWT(0030)                       X
               ') MAXDORM(',SMCASMDM,  MAXDORM(3000)                   X
               ') STATUS(',SMCASSTS,   STATUS(010000)                  X
               ')',INTO=LINE
         BRASL R14,SPACE1               Double Space
         ICM   R7,B'1111',SMCASMCX     SMCX                      RS0105
         JZ    SMFDATA4                 zero leave               RS0105
         USING SMCX,R7                                           RS0105
         STRING64 '    MEMLIMIT(',SMCXMEM,                       RS0105X
               ') INTVAL(',SMCXINTP,                             RS0105X
               ') SYNCVAL(',SMCXSYNP,                            RS0105X
               ')',INTO=LINE
         BRASL R14,SPACE1               Double Space             RS0105
*        DROP  R7                                                RS0908
*                                                                RS0105
SMFDATA4 DS    0H                                                RS0105
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS0506
         JZ    SMFDATA5                  no leave                RS0506
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?          RS0506
         JZ    SMFDATA5                  no leave                RS0506
         MODESET EXTKEY=ZERO           switch to KEY=0           RS0506
         L     R2,SMCAASCB             SMF ASCB ||               RS0506
         USING ASCB,R2                                           RS0506
         LAM   R2,R2,=F'0'             Set AR2 to zero           RS0506
*                                                                RS0506
*        Get data from SMF ASCB                                  RS0506
*                                                                RS0506
         L     R3,ASCBASSB             ASSB address              RS0506
         USING ASSB,R3                                           RS0506
         ALESERV ADD,                                            RS0506X
               STOKEN=ASSBSTKN,        MSTR address space        RS0506X
               ALET=ALET1,             return ALET               RS0506X
               CHKEAX=NO,                                        RS0506X
               MF=(E,ALESERV2)                                   RS0506
         LAM   R4,R4,ALET1             POINT TO SMF ADDRESS SPACERS0506
         LAM   R6,R6,=F'0'             Set AR6 to Primary        JH0111
         SAC   512                     AR mode                   RS0506
         L     R4,SMCASLCA             current IFASLCA           RS0506
         USING SLCA,R4                 IFASLCA                   RS0506
         STRING64 '    BUFSIZMAX(',SLCA_BUFSIZMAXC,              RS0506X
               ') BUFUSEWARN(',SLCA_BUFUSEWARNC,                 RS0506X
               '%)',INTO=LINE                                    RS0506
         BRASL R14,SPACE1               Double Space             RS0506
         SAC   0                       AR mode OFF               RS0506
         LAM   R4,R4,=F'0'             Set AR4 to zero           RS0506
         ALESERV DELETE,ALET=ALET1,MF=(E,ALESERV2)               RS0506
         XC    ALET1,ALET1             zero ALET for RCVY rtne   RS0506
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
SMFDATA5 DS    0H                                                RS0506
         BRASL R14,BLANK1               Double Space             RS0506
         AIF   (NOT D'CVTH7740).SMFDATA6 z/OS R9?                RS0908
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS0908
         JZ    SMFDATA6                  no, jump                RS0908
         TM    SMCXLSBT,SMCXLSDS       SMF-Logstreams ?          RS0908
         JZ    SMFDATA6                  no, report SYS1.MAN%    RS0908
         TM    AUTHORIZED,L'AUTHORIZED Am I authorized ?         DA0108
         JO    SMF269                    yes, ship info          DA0108
         STRING64 '  SMF log stream recording active.',          RS0908X
               ' More details require APF',INTO=LINE             RS0908
         BRASL R14,SPACE2              Single Space              RS0908
         J     SMF269                                            RS0908
         DROP  R7                      SMCX                      RS0105
.SMFDATA6 ANOP                                                   RS0908
SMFDATA6 DS    0H                                                RS0908
         TM    SMCAMISC,SMCAUSER+SMCAMAN Recording active?
         JZ    SMF999                  no, exit
         ICM   R7,B'1111',SMCAFRDS     FIRST RDS
         JZ    SMF999                  SMF not active, exit
         USING IEEMBRDS,R7
*LOOP
SMFDS1   MVC   LINE,BLANKS             CLEAR LINE
         TM    RDSFLG2,RDSLOST         dummy RDS for lost data?
         JO    SMFDS6                  yes, jump
         MVC   DSNAME,RDSNAME          SYS1.PROD.MAN%
         MVC   VOLSER,RDSVOLID         VOLSER
         L     R1,RDSNXTBL             NEXT BLOCK
         M     R0,=F'100'              CALCULATE PERCENTAGE USED
         D     R0,RDSCAPTY             CALCULATE PERCENTAGE USED
SMFDS2   STRING64 ((R1),,R3B),'%',INTO=CATUNCAT
         TM    RDSFLG1,RDSREADY        READY?
         JO    SMFDS3                  YES, BRANCH AROUND MVC
         STRING64 'Active',INTO=(DSNAME+30,6)
SMFDS3   EQU   *
         TM    RDSFLG1,RDSDUMP         DATA-SET FULL MSG ISSUED?
         JNO   SMFDS4                  YES, BRANCH AROUND MVC
         STRING64 'Dump required',INTO=(DSNAME+30,13)
SMFDS4   EQU   *
         J     SMFDS7
SMFDS6   EQU   *
         STRING64 '<Dummy RDS for Lost Data>',INTO=DSNAME
SMFDS7   EQU   *
         BRASL R14,SPACE1           <== next line
         CLC   SMCAFRDS,SMCALRDS       only one RDS ?
         JE    SMFDS8                  yes, exit
         L     R7,RDSNEXT              NEXT RDS IN CHAIN
         C     R7,SMCALRDS             IS THIS THE END OF THE CHAIN?
         JNE   SMFDS1                  NO, PROCESS NEXT DATA SET
*ENDLOOP
SMFDS8   EQU   *
         BRASL R14,BLANK1               BLANK LINE
         DROP  R7                      RDS
*
*        SMF records not written, by sub-system
*
SMFTYPE_SAVE EQU WORK256+0,8,C'F'      saved R8 and R9           DB0505
SMFTYPE_LENG EQU WORK256+8,4,C'F'      length of LINE used       DB0505
SMFTYPE_NUM1 EQU WORK256+12,2,C'H'     start type number of rangeDB0505
SMFTYPE_NUMB EQU WORK256+14,17,C'C'    C'255(32766:32767),'      DB0505
         L     R3,SMCASSTP             SMF SELECTION CONTROL TABLE
         USING SST,R3                                          JWMFEB96
         LH    R4,SMCANSST             number of SST's
         STM   R8,R9,SMFTYPE_SAVE      save R8 and R9            DB0505
         PUSH USING                                              DB0505
         DROP  R6,R8,R9                                          DB0505
*LOOP
SMF201   CLI   SSTNAME,0               this SST in use?        JWMFEB96
         JZ    SMF249                  no, skip it
         LA    R6,SSTRCDON             address of type bits      DB0505
         SR    R5,R5                   start with type 0         DB0505
         TM    SSTFLAGS,SSTNOTYP       NOTYPE specified?         DB0505
         JNZ   SMF202                  yes, jump                 DB0505
         STRING64 2X,SSTNAME,'  TYPE(',INTO=LINE                 DB0505
         ST    R15,SMFTYPE_LENG        save length of line       DB0505
         J     SMF203                                            DB0505
SMF202   STRING64 2X,SSTNAME,'  NOTYPE(',INTO=LINE               DB0505
         ST    R15,SMFTYPE_LENG        save length of line       DB0505
SMF203   L     R9,0(,R6)               get next 32 bits          DB0505
         LA    R6,4(,R6)               address of next 32 bits   DB0505
         LA    R8,32                   have 32 bits now          DB0505
         TM    SSTFLAGS,SSTNOTYP       NOTYPE specified?         DB0505
         JZ    SMF204                  no, jump                  DB0505
         X     R9,=F'-1'               change TYPE bits to NOTYPEDB0505
SMF204   LTR   R9,R9                   record type selected?     DB0505
         JM    SMF210                  yes, jump                 DB0505
SMF205   LA    R5,1(,R5)               increment type number     DB0505
         CHI   R5,256                  end of bits?              DB0505
         JNL   SMF239                  yes, jump                 DB0505
         SLL   R9,1                    shift to next bit         DB0505
         JCT   R8,SMF204               go check next bit         DB0505
         J     SMF203                  go get more bits          DB0505
SMF210   STH   R5,SMFTYPE_NUM1         save starting type number DB0505
         ICM   R7,15,SSTSUBTP          subtype selection table   DB0505
         JZ    SMF225                  no subtype table, jump    DB0505
         Using STSTABLE,R7                                       DB0505
         LH    R0,STSTNMBR             number of types           DB0505
         LTR   R0,R0                   any types with subtypes?  DB0505
         JNP   SMF225                  no, jump                  DB0505
         LA    R7,STSTNTRY             address of first entry    DB0505
         Using STSTNTRY,R7                                       DB0505
SMF211   LH    R2,STSTSUBC             number of subtype ranges  DB0505
         CH    R5,STSTTYPE             type found?               DB0505
         JE    SMF212                  yes, jump                 DB0505
         MHI   R2,L'STSTSENT           length of subtype list    DB0505
         LA    R7,STSTSENT(R2)         address of next entry     DB0505
         JCT   R0,SMF211               go check next entry       DB0505
         J     SMF225                  no subtypes for type      DB0505
SMF212   LTR   R2,R2                   any subtypes for type?    DB0505
         JNP   SMF225                  no, jump                  DB0505
         LA    R7,STSTSENT             address of first subtype  DB0505
         USING STSTSENT,R7                                       DB0505
         CLC   STSTBEG,STSTEND         subtype range?            DB0505
         JNE   SMF213                  yes, branch               DB0505
         STRING64 (SMFTYPE_NUM1,H,L),'(',(STSTBEG,H,L),',',      DB0505X
               INTO=SMFTYPE_NUMB                                 DB0505
         J     SMF216                                            DB0505
SMF213   STRING64 (SMFTYPE_NUM1,H,L),'(',(STSTBEG,H,L),':',      DB0505X
               (STSTEND,H,L),',',INTO=SMFTYPE_NUMB               DB0505
         J     SMF216                                            DB0505
SMF214   CLC   STSTBEG,STSTEND         subtype range?            DB0505
         JNE   SMF215                  yes, branch               DB0505
         STRING64 (STSTBEG,H,L),',',INTO=SMFTYPE_NUMB            DB0505
         J     SMF216                                            DB0505
SMF215   STRING64 (STSTBEG,H,L),':',(STSTEND,H,L),',',           DB0505X
               INTO=SMFTYPE_NUMB                                 DB0505
SMF216   CHI   R2,1                    last subtype for type?    DB0505
         JH    SMF217                  no, jump                  DB0505
         LA    R1,SMFTYPE_NUMB-1(R15)  address of last char.     DB0505
         MVC   0(2,R1),=C'),'          mark end of subtype list  DB0505
         LA    R15,1(,R15)             address of end            DB0505
SMF217   LA    R0,L'LINE               maximum line length       DB0505
         S     R0,SMFTYPE_LENG         characters remaining      DB0505
         CR    R15,R0                  room for this subtype?    DB0505
         JH    SMF218                  no, branch                DB0505
         STRING64 (LINE,,L),(SMFTYPE_NUMB,,L),INTO=LINE          DB0505
         J     SMF220                                            DB0505
SMF218   BRASL R14,SPACE1              Single Space              DB0505
         TM    SSTFLAGS,SSTNOTYP       NOTYPE specified?         DB0505
         JNZ   SMF219                  yes, jump                 DB0505
         STRING64 13X,(SMFTYPE_NUMB,,L),INTO=LINE                DB0505
         J     SMF220                                            DB0505
SMF219   STRING64 15X,(SMFTYPE_NUMB,,L),INTO=LINE                DB0505
SMF220   ST    R15,SMFTYPE_LENG        save length of line       DB0505
         LA    R7,L'STSTSENT(,R7)      address of next entry     DB0505
         JCT   R2,SMF214               go format subtype         DB0505
         DROP  R7                                                DB0505
         J     SMF205                  done with this type       DB0505
SMF225   LA    R5,1(,R5)               increment type number     DB0505
         CHI   R5,256                  last type?                DB0505
         JNL   SMF230                  yes, jump                 DB0505
         SLL   R9,1                    shift to next bit         DB0505
         JCT   R8,SMF226               decrement bits in R9      DB0505
         L     R9,0(,R6)               get next 32 bits          DB0505
         LA    R6,4(,R6)               address of next 32 bits   DB0505
         LA    R8,32                   have 32 bits now          DB0505
         TM    SSTFLAGS,SSTNOTYP       NOTYPE specified?         DB0505
         JZ    SMF226                  no, jump                  DB0505
         X     R9,=F'-1'               change TYPE bits to NOTYPEDB0505
SMF226   LTR   R9,R9                   record type selected?     DB0505
         JNM   SMF230                  no, jump                  DB0505
SMF227   ICM   R7,15,SSTSUBTP          subtype selection table   DB0505
         JZ    SMF225                  no subtype table, jump    DB0505
         Using STSTABLE,R7                                       DB0505
         LH    R0,STSTNMBR             number of types           DB0505
         LTR   R0,R0                   any types with subtypes?  DB0505
         JNP   SMF225                  no, jump                  DB0505
         LA    R7,STSTNTRY             address of first entry    DB0505
         Using STSTNTRY,R7                                       DB0505
SMF228   LH    R2,STSTSUBC             number of subtype ranges  DB0505
         CH    R5,STSTTYPE             type found?               DB0505
         JE    SMF230                  yes, jump                 DB0505
         MHI   R2,L'STSTSENT           length of subtype list    DB0505
         LA    R7,STSTSENT(R2)         address of next entry     DB0505
         JCT   R0,SMF228               go check next entry       DB0505
         J     SMF225                  no subtypes for type      DB0505
         DROP  R7                                                DB0505
SMF230   LR    R2,R5                   get next type number      DB0505
         BCTR  R2,0                    get ending type number    DB0505
         CH    R2,SMFTYPE_NUM1         range of numbers?         DB0505
         JE    SMF231                  no, jump                  DB0505
         STRING64 (SMFTYPE_NUM1,H,L),':',((R2),,L),',',          DB0505X
               INTO=SMFTYPE_NUMB                                 DB0505
         J     SMF232                                            DB0505
SMF231   STRING64 (SMFTYPE_NUM1,H,L),',',INTO=SMFTYPE_NUMB       DB0505
SMF232   LA    R0,L'LINE               maximum line length       DB0505
         S     R0,SMFTYPE_LENG         characters remaining      DB0505
         CR    R15,R0                  room for this subtype?    DB0505
         JH    SMF233                  no, branch                DB0505
         STRING64 (LINE,,L),(SMFTYPE_NUMB,,L),INTO=LINE          DB0505
         J     SMF235                                            DB0505
SMF233   BRASL R14,SPACE1              Single Space              DB0505
         TM    SSTFLAGS,SSTNOTYP       NOTYPE specified?         DB0505
         JNZ   SMF234                  yes, jump                 DB0505
         STRING64 13X,(SMFTYPE_NUMB,,L),INTO=LINE                DB0505
         J     SMF235                                            DB0505
SMF234   STRING64 15X,(SMFTYPE_NUMB,,L),INTO=LINE                DB0505
SMF235   ST    R15,SMFTYPE_LENG        save length of line       DB0505
         CHI   R5,256                  end of bits?              DB0505
         JL    SMF204                  no, jump                  DB0505
SMF239   L     R15,SMFTYPE_LENG        get length of line        DB0505
         LA    R15,LINE(R15)           address of next char.     DB0505
         BCTR  R15,0                   address of last char.     DB0505
         MVI   0(R15),C')'             mark end of type list     DB0505
         LM    R8,R9,SMFTYPE_SAVE      restore R8 and R9         DB0505
         POP   USING                                             DB0505
         L     R6,CVTSMCA              SMF SMCA                  DB0505
*
*        Display exit table
*
         L     R2,SSTEXTAB             @ exit table            JWMFEB96
         USING EXITTAB,R2                                      JWMFEB96
         ICM   R5,B'1111',EXITNMBR     number of exits         JWMFEB96
         JZ    SMF248X                 no                      JWMFEB96
         BRASL R14,SPACE1              Single Space
         STRING64 6X,'  EXITS(',INTO=LINE                      JWMFEB96
         LA    R2,EXITNTRY             @ first exit entry      JWMFEB96
         USING EXITNTRY,R2                                     JWMFEB96
SMF248B  DS    0H                                              JWMFEB96
         STRING64 (LINE,,L),(EXITNAME,,L),',',INTO=LINE        JWMFEB96
         LA    R2,EXITEND              skip this one           JWMFEB96
         JCT   R5,SMF248B                                      JWMFEB96
         LA    R15,LINE(R15)           get OFFSET ADDRESS      JWMFEB96
         BCTR  R15,0                                           JWMFEB96
         MVI   0(R15),C')'             CLOSE PARENTHESIS       JWMFEB96
SMF248X  BRASL R14,SPACE2              Double Space
SMF249   AH    R3,SMCALSST             bump SST pointer
         JCT   R4,SMF201               process next SST
*ENDLOOP
*
*        SMF SUBPARMS
*
         L     R6,CVTSMCA              SMF SMCA                  JM1101
*        USING SMCABASE,R6                                       JM1101
         ICM   R4,B'1111',SMCASUBP     Any SUBPARM entries?      JM1101
         JZ    SMF259                  no                        JM1101
         USING IEESUBP,R4                                        JM1101
SMF250   EQU   *                                                 JM1101
         STRING64 '  SUBPARM(',(SUBPNAME,,T),'(',(SUBPPARM,,T),'))',   X
               INTO=LINE                                         JM1101
         BRASL R14,SPACE2              Double Space              JM1101
         ICM   R4,B'1111',SUBPNPRM     Any more SMF parms?       JM1101
         JNZ   SMF250                  Yes                       JM1101
SMF259   EQU   *                                                 JM1101
*ENDLOOP                                                         JM1101
SMF269   EQU   *
         AIF   (NOT D'CVTH7740).SMF500 z/OS R9?                  RS0508
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS0508
         JZ    SMF500                    yes, jump               RS0508
*
* See: http://www-1.ibm.com/support/docview.wss?uid=isg1OA20995
*
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED ?         DA0108
         JNO   SMF500                  No, skip this             DA0108
*                                                                DA0108
* Ensure this system has OA20995 (IFAQUERY support) on by        DA0108
* checking to see if the program invoked by IFAQUERY is in the   DA0108
* LNKLST.  IFAQUERY actually invokes it as a PC routine.         DA0108
*                                                                DA0108
         BRASL R0,DOBLDL1              Issue BLDL                DA0108
         DC    C'IFAPCQRY'             Name of IFAQUERY routine  DA0108
         LTR   R15,R15                 Was it found?             DA0108
         JNZ   SMF269_5                No, print error msg       DA0108
*                                                                DA0108
* Invoke IFAQUERY                                                DA0108
*                                                                DA0108
         BRASL R14,WORKADDR            Get work area             DA0108
         LR    R3,R1                   Save address              DA0108
         ST    R0,WKCELL2              Save length               DA0108
         IFAQUERY RETRIEVE,STATUS,     Get SMF information       DA0108X
               OUTAREA=(3),            ..Output area             DA0108X
               OUTLEN=WKCELL2,         ..Output Length           DA0108X
               RETCODE=LRETCODE,       ..Return code             DA0108X
               RSNCODE=LRSNCODE,       ..Reason code             DA0108X
               MF=(E,WORK256)                                    DA0108
         ICM   R15,B'1111',LRETCODE    Get IFAQuery RC           DA0108
         JZ    SMF269_3                Display data if RC0       DA0108
         C     R15,=F'4'               Warning?                  DA0108
         JNE   SMF269_3                                          DA0108
         CLC   LRSNCODE,=X'00000403'   No Log Stream             DA0108
         JE    SMF269_1                Yes, continue             DA0108
         CLC   LRSNCODE,=X'00000401'   OUTAREA too small         DA0108
         JE    SMF269_2                Yes, continue             DA0108
         J     SMF269_6                Show RC and Reason        DA0108
SMF269_1 DS    0H                                                DA0108
         STRING64 '  SMF records are not being ',                DA0108X
               'written to a log stream',INTO=LINE               DA0108
         BRASL R14,SPACE2              Single Space              DA0108
         J     SMF500                                            DA0108
SMF269_2 DS    0H                                                DA0108
         USING IFAQUAHDRTYPE,R3                                  DA0108
         STRING64 '  IFAQUERY OUTAREA not large enough, Need',   DA0108X
               (IFAQUAHTLEN,4,X),' bytes',                       DA0108X
               INTO=LINE                                         DA0108
         DROP  R3                                                DA0108
         BRASL R14,SPACE1              Single Space              DA0108
         J     SMF500                                            DA0108
*                                                                DA0108
* We got some information back from IFAQUERY                     DA0108
*                                                                DA0108
*                                                                DA0108
SMF269_3 DS    0H                                                DA0108
         USING IFAQUAHDRTYPE,R3        Map Header                DA0108
         ICM   R4,B'1111',IFAQUAH#REC  Get number of records     DA0108
         JZ    SMF269_5                None, give up             DA0108
         ICM   R5,B'1111',IFAQUAHDOFF  Offset to first data rec  DA0108
         JZ    SMF269_5                None, give up             DA0108
         AR    R5,R3                   Locate to first data rec  DA0108
         USING IFAQUALSTYPE,R5                                   DA0108
         STRING64 '  SMF Logstream',13X,'Types',INTO=LINE        RS0908
         BRASL R14,SPACE1              Single Space              RS0908
*loop                                                            RS0508
SMF269_4 DS    0H                                                DA0108
*        STRING64 '  SMF Logstream',13X,'Types',INTO=LINE        RS0508
*        BRASL R14,SPACE1              Single Space              RS0508
         LA    R0,L'IFAQUALSREC        Byte Loop                 RS0508
         LA    R1,0                    Start by 0                RS0209
         LA    R2,IFAQUALSREC          SMF record #              RS0508
         BRASL R14,BITSTR              edit bit STRING64         RS0508
         STRING64 2X,IFAQUALSNAME,(NEXTLINE,,T),INTO=LINE        RS0508
         BRASL R14,SPACE1              Single Space              RS0508
*-Note: more info from IFAQUA to be printed here                 DA0108
*                                                                DA0108
         AH    R5,IFAQUALSLEN          Locate to next record     DA0108
         JCT   R4,SMF269_4                                       DA0108
*endloop                                                         RS0508
         BRASL R14,BLANK1              Empty line                DA0108
         J     SMF500                                            DA0108
         DROP  R3                      Header                    DA0108
         DROP  R5                      Quals                     DA0108
*                                                                DA0108
* IFAQUERY support program not found on this system              DA0108
*                                                                DA0108
SMF269_5 DS    0H                                                DA0108
         LR    R2,R15                                            DA0108
         STRING64 '  IFAQUERY not available on this system',     DA0108X
               INTO=LINE                                         DA0108
         BRASL R14,SPACE2              Single Space              DA0108
         J     SMF500                                            DA0108
*                                                                DA0108
* IFAQUERY macro failed                                          DA0108
*                                                                DA0108
SMF269_6 DS    0H                                                DA0108
         STRING64 '  IFAQUERY Failed, ',                         DA0108X
               ' Returncode=',(LRETCODE,4,X),                    DA0108X
               ' Reasoncode=',(LRSNCODE,4,X),                    DA0108X
               INTO=LINE                                         DA0108
         BRASL R14,SPACE1              Single Space              DA0108
         J     SMF500                                            DA0108
*                                                                DA0108
.SMF500  ANOP                                                    RS0508
SMF500   DS    0H                                                DA0108
SMF999   END_PROC
         TITLE 'SHOWMVS &REL - SMS Configuration'
*---------------------------------------------------------------------*
*                                                                     *
*SMS Configuration:                                                   *
*                                                                     *
*  Description: SMS CONFIGURATION FOR ESAPROD1 SYSTEM                 *
*                                                                     *
*  Last Update: IBMUSER   1991-04-23  12.23                           *
*        Flags: 00000000                                              *
*     Defaults: MANAGEMENT_CLASS(STANDARD)   UNIT(3380)               *
*               TRACK_SIZE(47476)   TRACKS/CYL(15)                    *
* System Names: IPO1                                                  *
*    SCDS Name: SMS.SCDS                                              *
*  PDSE-SHR   : Normal                                                *
*                                                                     *
*  DataClas UserId   Date       Time   Spec1 Spec2 Description        *
*  DEXTCOM  AL13429  1998/07/20 13:40    00    00  HW-COMPRESSION ON  *
*  ...                                                                *
*                                                                     *
*  StorClas UserId   Date       Time   Flag1 Flag2 Description        *
*  NONSMS   SMM      1994/10/27 09:06    00    80  PSEUDO STORCLAS FOR*
*  ...                                                                *
*                                                                     *
*  MgmtClas UserId   Date       Time   Flag1 Flag2 Description        *
*  MALA0### SMM      1997/04/07 18:53    40    FE  DEFAULT FOR AL-AE  *
*  ...                                                                *
*                                                                     *
*  Storgrp  UserId   Date       Time   Spec1 Spec2 Description        *
*  ADSM     XCA1513  2004/02/03 13:40    1C    00  ADSM DATASETS      *
*  ALTPOOL  XCA1513  2004/02/03 13:40    DD    00  DATEIEN, DIE NICHT *
*  ...                                                                *
*                                                                     *
*  Storgrp  Volser   TotCap MB Free Cap MB Extent MB                  *
*  ADSM     EH0J01        2707           2         1                  *
*           EH0J02           0           0         0                  *
*           Summary       2707           2           99% used         *
*  ALTPOOL  n/a                                                       *
*  ANBUS    n/a                                                       *
*  CULPRIT  EB0C01        8120        4560      1612                  *
*           Summary       8120        4560           43% used         *
*  ...                                                                *
*                                                                     *
*  Aggregrp UserId   Date       Time   Spec1 Spec2 Description        *
*  ABDFHSM  XNN3006  1994/05/20 14:54    C0    00  DFHSM AGGREGAT SICH*
*  INF0420  XNN1029  1991/12/03 18:50    C0    00  SOFTWARESICHERUNG F*
*  TEST     NN446    1990/03/26 14:24    40    00                     *
*  ...                                                                *
*                                                                     *
*  LibName  UserId   Date       Time     LibID                        *
*  IBMLIBD1 XNN1513  2004/12/13 11:08    13577                        *
*  IBMLIBO1 XNN1513  2005/09/27 14:45    13578                        *
*  ...                                                                *
*                                                                     *
*  Optical Drives                                                     *
*  DevName  UserId   Date       Time     LibName                      *
*  L1D1     XCA1552  1998/03/14 08:03    L1                           *
*  L1D2     XCA1552  1998/03/14 08:02    L1                           *
*  L1D3     XCA1552  1998/03/14 08:02    L1                           *
*                                                                     *
*---------------------------------------------------------------------*
SMSDATA  BEGIN_PROC KW=SMS                                       RS0302
         STRING64 '&TITLEPFX.SMS Configuration:',INTO=LINE
         BRASL R14,SPACE2               Double Space
*
         L     R1,CVTJESCT             JES COMM TABLE
         L     R1,JESCTEXT-JESCT(,R1)  JESCT Extension
         ICM   R5,B'1111',JESSMSIB-JESPEXT(R1) SMS SSIB
         JZ    SMSB98                  SMS not active, exit
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS0902
         JZ    SMSB04                  no, jump                  RS0902
         MODESET EXTKEY=ZERO             switch to KEY=0         RS0902
SMSB04   EQU   *                                                 RS0902
         MVC   IGDSSIVT,SSIBSUSE-SSIB(R5)
*
         BRASL R14,WORKADDR            LOCATE WORK AREA
         ST    R1,SMS_SSOB             save addr for IEFSSREQ calls
         ST    R0,WKCELL3              save length               RS0601
         OI    SMS_SSOB,X'80'          SSOB_PTR
         LR    R3,R1                   get addr of SMS work area
         USING SMS_WORK,R3
*
         LA    R4,SSOB_WRK             POINT TO WORK AREA
         USING SSOB,R4
         MVI   SSOBLEN+1,SSOBHSIZ      SSOB length
         MVC   SSOBID,=C'SSOB'         SSOB
         MVI   SSOBFUNC+1,SSOBSSMS     FUNCTION
         ST    R5,SSOBSSIB             SMS SSIB
*
         LA    R5,SSSA_WRK             SSSA WORK AREA
         ST    R5,SSOBINDV             FUNCTION-DEPENDENT AREA
         USING IEFSSSA,R5
         LA    R0,SSSALN+SSSA1LN       LENGTH
         STH   R0,SSSALEN
         MVC   SSSAID,=C'SSSA'         SSSA
         MVI   SSSAVER+1,SSOBSSVR      VERSION
         MVI   SSSASFN+1,SSSAACTV      SUB-FUNCTION CODE
         MVI   SSSAIFLG,SSSANAUT       NON-AUTHORIZED CALLER
*
*        LH    R0,=Y(SMS_SUB_FUNCTION_WORK_AREA_LENGTH)
*        ST    R0,SSSA1LEN             LENGTH OF WORK AREA
*
*        TYP=2: return base configuration mapped by IGDBCD
*
         MVI   SSSA1TYP,SSSA1CON       RETURN ACTIVE CONFIGURATION
         LA    R1,SMS_SSOB             SSOB_PTR
         IEFSSREQ                  <== CALL SMS
         LTR   R1,R15                  SMS active?
         JNZ   SMSB97                  no, exit                     +JM
         ICM   R0,B'1111',SSOBRETN     TEST RETURN CODE
         JNZ   SMSB96                  OK, jump                  RS0902
*
SMSB40   EQU   *
         L     R6,SSSA1PTR             ADDR OF WORK AREA         RS0902
         USING IGDBCD,R6                                         RS0902
         STRING64 '  Description: ',BCDFDESC,INTO=LINE
         BRASL R14,SPACE2               Double Space
         STRING64 '  Last Update: ',BCDFUSER,2X,BCDFDATE,2X,BCDFTIME,  X
               INTO=LINE
         BRASL R14,SPACE1               next line
         STRING64 '        Flags: ',(BCDFLAGS,,X),INTO=LINE
         BRASL R14,SPACE1               next line
         OC    BCDMCNAM,BLANKS         00 -> 40
         STRING64 '     Defaults: MANAGEMENT_CLASS(',(BCDMCNAM,,T),')',X
               '   UNIT(',(BCDDUNIT,,T),')',                           X
               INTO=LINE
         BRASL R14,SPACE1               next line
         STRING64 14X,                                                 X
               ' TRACK_SIZE(',(BCDTRKSZ,F,L),')',                      X
               '   TRACKS/CYL(',(BCDCYLCP,F,L),')',                    X
               INTO=LINE
         BRASL R14,SPACE1               next line
*******  STRING64 '  Systm Names: ',(BCDFSYSN,8*8),INTO=LINE
         STRING64 ' System Names: ',INTO=LINE
*        LA    R1,BCDFSYSN             1st system name           RS0908
         LA    R1,BCDSSTAT             1st system name           RS0908
         LA    R2,1                    count systems
*        LA    R3,8                    max no of system names    RS0908
         LA    R3,256                  max no of system names    RS0908
*loop
SMSB50   CLC   CVTSNAME,0(R1)          is this my own system?
         JNE   SMSB51                  no, jump
         STH   R2,OWNSMSSYS            yes, remember it
SMSB51   STRING64 (LINE,,T),1X,((R1),L'BCDFSYSN),INTO=LINE
*        LA    R1,L'BCDFSYSN(,R1)      point to next system name RS0908
         LA    R1,L'BCDSSTAT(,R1)      point to next system name RS0908
         CLI   0(R1),C' '              Sysname blank is the end  RS0908
         JE    SMSB52                    ok leave                RS0908
         LA    R2,1(,R2)               Count+1
         JCT   R3,SMSB50               loop through array
*endloop
SMSB52   DS    0H                                                RS0908
         BRASL R14,SPACE1               next line
         L     R1,SSSA1PTR             load addr and length      RS0902
         L     R2,SSSA1LEN                                       RS0902
         FREEMAIN RU,LV=(R2),A=(R1)    free work area            RS0902
         L     R3,IGDSSIVT             SMS vector table          RS0100
         USING IGDSSIVTAB,R3                                     RS0100
         STRING64 '    Parmlib  : IGDSMS',IGDSPARM,INTO=LINE     RS0100
         BRASL R14,SPACE1              next line                 RS0100
         STRING64 '    SCDS Name: ',BCDSCDSN,INTO=LINE
         BRASL R14,SPACE1              next line
         STRING64 '    ACDS Name: ',IGDSACDS,INTO=LINE           RS0100
         BRASL R14,SPACE1              next line                 RS0100
         STRING64 '    Comm-DSN : ',IGDSCODS,INTO=LINE           RS0100
         BRASL R14,SPACE1              next line                 RS0100
         STRING64 '    ACS-Exits: ',(IGDSACSC,,X),' ',(IGDSACDC,,X),   X
               ' ',(IGDSACMC,,X),INTO=LINE                       RS0100
         BRASL R14,SPACE1              next line                 RS0100
*
*        Determine status of PDSE Sharing
*
*MSB75   LA    R5,=CL8'n/a'            undetermined
SMSB75   STRING64 'n/a     ',INTO=WORK256 undetermined           RS0902
         ICM   R6,B'1111',IGWLSHR      IGWLSHR module available?
         JZ    SMSB75F                 no, exit
         LARL  R2,SMSB75T
         SYNCHX (2),RESTORE=YES        CALL IGWLSHR in key=8     RS1002
         LTR   R15,R15                 Test return code
         JNZ   SMSB75F                 bad rc, ignore
         CL    R1,=F'1'                Check status                 +RS
         JNE   SMSB75D                 no, jump
         STRING64 'Normal  ',INTO=WORK256 Normal Sharing         RS0902
SMSB75D  CL    R1,=F'2'                Check status                 +RS
         JNE   SMSB75F                 no, jump
         STRING64 'Extended',INTO=WORK256 Extented Sharing       RS0902
SMSB75F  STRING64 '  PDSE-SHR   : ',(WORK256,8),INTO=LINE        RS0902
         BRASL R14,SPACE1              next line                    +JM
         J     SMSB75X                 exit
*
*        this code executes in key=8
*
SMSB75T  L     R13,UNPROTWK            Point at unprotected area
         XCALL (R6),                   IGWLSHR                         X
               (LRETCODE,              Returcode                       X
               LRSNCODE,               Reasoncode                      X
               WORK256+25,             Problemdata                     X
               =F'1',                  Input attr_selector             X
               =F'1',                  Input attr_array length         X
               WKCELL2)                Output attr_array            +RS
         L     R1,WKCELL2              return status index
         EXIT                                                       +RS
*
SMSB75X  EQU   *
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?          RS1001
         JZ    SMSB75Z                 NO, JUMP                  RS1001
         MVC   WORK256(8),=CL8'IGWDESP'
         LA    R0,DESP_LEN_IV
         ST    R0,WORK256+8
         MVI   WORK256+12,DESP_LEV_IV
         DESERV FUNC=EXIT,EXIT_SCOPE=GLOBAL,EXIT_OPTION=QUERY,   RS1001X
               EXIT_PREV_DSTPTR=WKCELL1,RETCODE=LRETCODE,        RS1001X
               RSNCODE=LRSNCODE,MF=(E,WORK256)                   RS1001
         STRING64 '  DeServ-Exit:',' RC: ',(LRETCODE,,X),              X
               ' RSN: ',(LRSNCODE,,X),INTO=LINE
         CLC   LRETCODE,=F'0'          Retruncode = 0?           RS1001
         JNE   SMSB75Y                   no, leave               RS1001
         STRING64 '  DeServ-Exit:',' n/a',INTO=LINE              RS1001
         ICM   R3,B'1111',WKCELL1      load DSTPTR               RS1001
         JZ    SMSB75Y                   leave if zero           RS1001
         USING DST,R3                                            RS1001
         STRING64 '  DeServ-Exit:',' Global exit at x''',              X
               (DST_EXIT_PTR,,X),'''',INTO=LINE
SMSB75Y  EQU   *                                                 RS1001
         BRASL R14,SPACE1              next line                 RS1001
SMSB75Z  EQU   *                                                 RS1001
         BRASL R14,BLANK1              double space                 +JM
*        TYP=9: return list of data classes                         +RS
*                                                                   +RS
         L     R3,SMS_SSOB             save addr for IEFSSREQ calls
         USING SMS_WORK,R3
*
         LA    R4,SSOB_WRK             POINT TO WORK AREA
         USING SSOB,R4
*
         LA    R5,SSSA_WRK             SSSA WORK AREA  RSNEW
         MVI   SSSA1TYP,SSSA1DCL       RETURN all data classes      +JM
         BRASL R14,IEFSS               call SMS                     +RS
         LTR   R1,R1                                                +RS
         JNZ   SMSB98X                                              +RS
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?                  +JM
         JE    SMSB84                  no, try next type
         USING IGDDCDH,R6                                           +RS
         STRING64 '  DataClas',1X,'UserId',3X,'Date',7X,'Time',3X,     X
               'Spec1',1X,'Spec2',1X,'Description',INTO=LINE        +RS
         BRASL R14,SPACE2          <== next line                    +RS
         L     R7,DCDPCNT              LOOP COUNTER                 +RS
         L     R1,DCDPLEN              Load length of a entry       +RS
         ST    R1,WKCELL4              Save length                  +RS
         LA    R6,DCDH_LENGTH(,R6)    point to entry                +RS
         USING IGDSCDE,R6           Caution this dsect maps not     +RS
*LOOP                               only the dataclass              +RS
SMSB82   DS    0H                                                   +RS
         STRING64 2X,(SCDNAME,8,T),1X,SCDUSER,1X,SCDDATE,1X,SCDTIME,1X,X
               (SCDFLG1,,X),4X,(SCDFLG2,,X),2X,(SCDDESC,80,T),INTO=LINE
         TR    LINE,TRTPRINT                                        +JM
         BRASL R14,SPACE1          <== next line                    +RS
         AL    R6,WKCELL4              Skip this entry              +JM
         JCT   R7,SMSB82               Do loop                      +RS
         BRASL R14,BLANK1              BLANK LINE                   +RS
*ENDLOOP                                                            +RS
         L     R1,SSSA1PTR             load addr and length         +RS
         L     R2,SSSA1LEN                                          +RS
         FREEMAIN RU,LV=(R2),A=(R1)    free work area               +RS
SMSB82A  DS    0H                                                   +JM
SMSB82C  DS    0H                                                   +JM
SMSB84   DS    0H                                                   +RS
         CLI   SSSA1TYP,SSSA1DCL       Dataclass ?                  +RS
         JE    SMSB86                    yes do StorClas
         CLI   SSSA1TYP,SSSA1SCL       Storageclass ?               +RS
         JE    SMSB85                    yes do MgmgtClass
         CLI   SSSA1TYP,SSSA1MCL       Mgmtclass ?                  +RS
         JE    SMSB87                    yes do Storgrp
         CLI   SSSA1TYP,SSSA1SGL       Storgrp ?                    +JM
         JE    SMSB88                    yes do Sgrp list volser
         CLI   SSSA1TYP,SSSA1SGV       StorGrp Liste Volser      RS1006
         JE    SMSB89                    yes do Aggregrp def     RS1006
         CLI   SSSA1TYP,SSSA1AGL       Aggregrp ?                   +JM
         JE    SMSB90                    yes do Optical lib def
         CLI   SSSA1TYP,SSSA1OLL       Optical lib's ?              +RS
         JE    SMSB92                    yes do Optical drive
         CLI   SSSA1TYP,SSSA1ODL       Optical drive ?              +RS
         JE    SMSB93                    yes do Destination      RS0902
         CLI   SSSA1TYP,SSSA1DSL       Destination definition    RS0902
         JE    SMSB94                    yes do collection       RS0605
         AIF   (NOT D'CVTH7708).SMSB85  z/OS R5? No              RS0605
         TM    HBB7708,L'HBB7708       running on z/OS R5        RS0605
         JZ    SMSB85                  no, leave                 RS0605
         CLI   SSSA1TYP,SSSA1CPL       StorGrp Collection        RS0605
         JE    SMSB95                    yes do end              RS0605
.SMSB85  ANOP                                                    RS0605
SMSB85   DS    0H                                                   +RS
*        TYP=10: return list of managment classes                   +RS
*                                                                   +RS
         MVI   SSSA1TYP,SSSA1MCL       RETURN all managment classes +RS
         BRASL R14,IEFSS               call SMS                     +RS
         LTR   R1,R1                                                +RS
         JNZ   SMSB98X                                              +RS
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?                  +JM
         JE    SMSB84                  no, try next type            +JM
         USING IGDMCDH,R6                                           +RS
         STRING64 '  MgmtClas',1X,'UserId',3X,'Date',7X,'Time',3X,     X
               'Flag1',1X,'Flag2',1X,'Description',INTO=LINE        +RS
         BRASL R14,SPACE2          <== next line                    +RS
         L     R7,MCDPCNT              LOOP COUNTE                  +RS
         L     R1,MCDPLEN              Load length of a entry       +JM
         ST    R1,WKCELL4              Save length                  +JM
         LA    R6,MCDH_LENGTH(,R6)    point to entry                +RS
         J     SMSB82                                               +RS
SMSB86   DS    0H                                                   +RS
*        TYP=11: return list of storage classes                     +RS
*                                                                   +RS
         L     R3,SMS_SSOB             save addr for IEFSSREQ calls
         USING SMS_WORK,R3
*
         LA    R4,SSOB_WRK             POINT TO WORK AREA
         USING SSOB,R4
*
         LA    R5,SSSA_WRK             SSSA WORK AREA  RSNEW
         MVI   SSSA1TYP,SSSA1SCL       RETURN all storage class     +RS
         BRASL R14,IEFSS               Call SMS                     +RS
         LTR   R1,R1                                                +RS
         JNZ   SMSB98X                                              +RS
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?                  +JM
         JE    SMSB84                  no, try next type
         L     R6,SSSA1PTR             use this address             +RS
         USING IGDSCDH,R6                                           +RS
         STRING64 '  StorClas',1X,'UserId',3X,'Date',7X,'Time',3X,     X
               'Flag1',1X,'Flag2',1X,'Description',INTO=LINE        +RS
         BRASL R14,SPACE2          <== next line                    +RS
         L     R7,SCDPCNT              LOOP COUNTE                  +RS
         L     R1,SCDPLEN              Load length of a entry       +JM
         ST    R1,WKCELL4              Save length                  +JM
         LA    R6,SCDH_LENGTH(,R6)     point to entry               +RS
         J     SMSB82                                               +RS
SMSB87   DS    0H                                                   +JM
*        TYP=12: return list of storage groups                      +JM
*                                                                   +JM
         MVI   SSSA1TYP,SSSA1SGL       RETURN all storage groups    +JM
         BRASL R14,IEFSS               call SMS                     +JM
         LTR   R1,R1                                                +JM
         JNZ   SMSB98X                                              +JM
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?                  +JM
         JE    SMSB84                  no, try next type
         USING IGDSGD,R6                                            +JM
         STRING64 '  Storgrp  ','UserId',3X,'Date',7X,'Time',3X,       X
               'Spec1',1X,'Spec2',1X,'Description',INTO=LINE        +JM
         BRASL R14,SPACE2          <== next line                    +JM
         L     R7,SGDPCNT              LOOP COUNTE                  +JM
         L     R1,SGDPLEN              Load length of a entry       +JM
         ST    R1,WKCELL4              Save length                  +JM
         LA    R6,SGDEF               point to entry                +JM
         J     SMSB82                                               +JM
SMSB88   DS    0H                                                RS1006
*        TYP=12: return list of storage groups                   RS1006
*                                                                RS1006
         MVI   SSSA1TYP,SSSA1SGL       Return all storage groups RS1006
         BRASL R14,IEFSS               call SMS                  RS1006
         LTR   R1,R1                                             RS1006
         JNZ   SMSB98X                                           RS1006
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?               RS1006
         JE    SMSB84                  no, try next type         RS1006
         USING IGDSGD,R6                                         RS1006
         L     R7,SGDPCNT              LOOP COUNTE               RS1006
         L     R1,SGDPLEN              Load length of a entry    RS1006
         ST    R1,WKCELL4              Save length               RS1006
         L     R2,SSSA1PTR             load addr and length      RS1006
         L     R1,SSSA1LEN                                       RS1006
         STM   R1,R2,GETMAIN_LEN_ADDR                            RS1006
         STRING64 '  Storgrp  ','Volser',3X,'TotCap MB ',        RS1006X
               'Free Cap MB ','Extent MB',8X,                    RS1302X
               'These for EAV-Volumes',INTO=LINE                 RS1302
         BRASL R14,SPACE2          <== next line                 RS1006
*        #SNAP ADDR=(R6),LENGTH=100    Debug code                RS1006
*loop                                                            RS1006
SMSB88_05 DS    0H                                               RS1006
*                                                                RS1006
*        TYP=07: return list of volser for a storage group       RS1006
*                                                                RS1006
         XC    WKCELL1,WKCELL1         Clear sum of Total and FreeS1006
         STRING64 2X,(SGDFNAME,8,T),                             RS1006X
               INTO=LINE                                         RS1006
         STM   R6,R7,WKCELL2           save R6 and R7            RS1006
         MVI   SSSA1TYP,SSSA1SGV       return all volser for     RS1006
         MVC   SSSA1CNT,=F'1'            a single                RS1006
         MVC   SSSA1NML,SGDNMLEN       storage group length      RS1006
         MVC   SSSA1NAM,SGDFNAME       storage group             RS1006
         BRASL R14,IEFSS               call SMS                  RS1006
         LTR   R1,R1                                             RS1006
         JNZ   SMSB98X                                           RS1006
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?               RS1006
         JE    SMSB84                  no, try next type         RS1006
         CLC   SSSARSN,=A(SSSA1NVL)    No volume found           RS1006
         JE    SMSB88_12                 report "n/a"            RS1006
         USING IGDVLD,R6                                         RS1006
         L     R7,VLDPCNT              Loop counter              RS1006
         L     R1,VLDPLEN              Load length of a entry    RS1006
         ST    R1,WKCELL4+4            Save length               RS1006
*        #SNAP ADDR=(R6),LENGTH=VLDPLEN Debug code               RS0508
         LTR   R7,R7                   Still some volumes?       RS1006
         JZ    SMSB88_12                 leave if not            RS1006
*  loop                                                          RS1006
SMSB88_08 DS    0H                                               RS1006
         STRING64 (VLDVSER,6),4X,'--------',4X,'--------',4X,    RS0508X
               '--------',INTO=LINE+11                           RS0508
         CLC   VLDNUCBA,=F'0'          UCB zero ?                RS0508
         JE    SMSB88_081                yes, dont show cap data RS0508
         STRING64 (VLDVSER,6),3X,(VLDNTCPY,F,R9B),3X,            RS1006X
               (VLDNFREE,F,R9B),1X,(VLDNLEXT,F,R9B),             RS1006X
               3X,(VLDNTCPB,F,R9B),1X,                           AF0811X
               (VLDNFREB,F,R9B),1X,(VLDNLEXB,F,R9B),             AF0811X
               INTO=LINE+11                                      RS1006
SMSB88_081 DS    0H                                              RS0508
         TR    LINE,TRTPRINT                                     RS1006
         BRASL R14,SPACE1          <== next line                 RS1006
         CLC   VLDNUCBA,=F'0'          UCB zero ?                RS0508
         JE    SMSB88_082                yes, dont show cap data RS0508
         L     R1,WKCELL1              Sum(VLDNTCPY)             RS1006
         AL    R1,VLDNTCPY                                       RS1006
         ST    R1,WKCELL1                                        RS1006
         L     R1,WKCELL1+4            Sum(VLDNFREE)             RS1006
         AL    R1,VLDNFREE                                       RS1006
         ST    R1,WKCELL1+4                                      RS1006
SMSB88_082 DS    0H                                              RS0508
*        #SNAP ADDR=(R6),LENGTH=200     Debug code               RS0508
         AL    R6,WKCELL4+4            Skip this entry           RS1006
         JCT   R7,SMSB88_08            Do loop                   RS1006
*  endloop                                                       RS1006
SMSB88_09 DS    0H                                               RS1006
         L     R1,SSSA1PTR             load addr and length      RS1006
         L     R2,SSSA1LEN                                       RS1006
         LTR   R1,R1                   Is there some work area?  RS1006
         JZ    SMSB88_10                 nothing to free         RS1006
         FREEMAIN RU,LV=(R2),A=(R1)    free work area            RS1006
SMSB88_10 DS    0H                                               RS1006
         CLC   WKCELL1,=F'0'           Summary line needed?      RS1006
         JNH   SMSB88_11                                         RS1006
         ICM   R1,B'1111',WKCELL1      total capacity            RS1006
         S     R1,WKCELL1+4            free space                RS1006
         M     R0,=F'100'              space used * 100          RS1006
         D     R0,WKCELL1              R1 = %USED                RS1006
         STRING64 'Summary  ',(WKCELL1,F,R9B),3X,                RS1006X
               (WKCELL1+4,F,R9B),10X,((R1),,R3B),'% used',       RS1006X
               INTO=LINE+11                                      RS1006
         BRASL R14,SPACE1          <== next line                 RS1006
SMSB88_11 DS    0H                                               RS1006
         XC    WKCELL1,WKCELL1         Clear sum of Total and FreeS1006
         LM    R6,R7,WKCELL2           restore R6 R7             RS1006
         AL    R6,WKCELL4              Skip this entry           RS1006
         JCT   R7,SMSB88_05            Do loop                   RS1006
*endloop                                                         RS1006
         BRASL R14,BLANK1              BLANK LINE                RS1006
         LM    R1,R2,GETMAIN_LEN_ADDR                            RS1006
         FREEMAIN RU,LV=(R1),A=(R2)    free work area            RS1006
         J     SMSB84                                            RS1006
SMSB88_12 DS    0H                                               RS1006
         STRING64 'n/a',INTO=LINE+11                             RS1006
         TR    LINE,TRTPRINT                                     RS1006
         BRASL R14,SPACE1          <== next line                 RS1006
         J     SMSB88_09               free work if needed       RS1006
SMSB89   DS    0H                                                RS1006
*                                                                   +JM
*        TYP=22: return list of aggrgate groups (ABARS)             +JM
*                                                                   +JM
         MVI   SSSA1TYP,SSSA1AGL       RETURN all aggrgate groups   +JM
         BRASL R14,IEFSS               call SMS                     +JM
         LTR   R1,R1                                                +JM
         JNZ   SMSB98X                                              +JM
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?                  +JM
         JE    SMSB84                  no, try next type
         USING IGDAGD,R6                                            +JM
         STRING64 '  Aggregrp',1X,'UserId',3X,'Date',7X,'Time',3X,     X
               'Spec1',1X,'Spec2',1X,'Description',INTO=LINE        +JM
         BRASL R14,SPACE2          <== next line                    +JM
         L     R7,AGDPCNT              LOOP COUNTE                  +JM
         L     R1,AGDPLEN              Load length of a entry       +JM
         ST    R1,WKCELL4              Save length                  +JM
         LA    R6,AGDEF               point to entry                +JM
         J     SMSB82                                               +JM
SMSB90   DS    0H                                                   +JM
*        TYP=24: return list of optical libraries                   +RS
*                                                                   +RS
         MVI   SSSA1TYP,SSSA1OLL       RETURN all                   +RS
         BRASL R14,IEFSS               call SMS                     +RS
         LTR   R1,R1                                                +RS
         JNZ   SMSB98X                                              +RS
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?                  +RS
         JE    SMSB84                  no, try next type
         USING IGDLBDH,R6                                           +RS
         L     R7,LBDPCNT              LOOP COUNTER
         STRING64 '  LibName ',1X,'UserId',3X,'Date',7X,'Time',5X,     X
               'LibID',INTO=LINE                                 RS1006
         BRASL R14,SPACE2          <== next line                    +RS
         L     R1,LBDELNG              Load length of a entry       +JM
         ST    R1,WKCELL4              Save length                  +JM
         LA    R6,LBDH_LENGTH(,R6)     point to entry               +RS
         USING IGDLBDE,R6           Caution this dsect maps not     +RS
SMSB90_1 DS    0H                                                   +JM
         STRING64 2X,(LBDNAME,8,T),1X,LBDUSER,1X,LBDDATE,1X,LBDTIME,   X
               1X,LBDLIBID,INTO=LINE                             RS1006
         TR    LINE,TRTPRINT                                     RS1006
         BRASL R14,SPACE1          <== next line                    +RS
*        #SNAP ADDR=(R6),LENGTH=2200   Debug code                RS0902
         AL    R6,WKCELL4              Skip this entry              +JM
         JCT   R7,SMSB90_1                                          +JM
         L     R1,SSSA1PTR             load addr and length      RS0902
         L     R2,SSSA1LEN                                       RS0902
         FREEMAIN RU,LV=(R2),A=(R1)    free work area            RS0902
         BRASL R14,BLANK1              BLANK LINE                   +JM
SMSB92   DS    0H                                                   +JM
*        TYP=26: return list of optical drives                   RS1002
*        partial dsect-info available                            RS1002
         MVI   SSSA1TYP,SSSA1ODL       RETURN all                RS1002
         BRASL R14,IEFSS               call SMS                  RS1002
         LTR   R1,R1                                             RS1002
         JNZ   SMSB98X                                           RS1002
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?               RS1002
         JE    SMSB84                  no, exit                  RS1002
         USING IGDDRDH,R6                                        RS1002
         L     R7,DRDPCNT              LOOP COUNTER              RS1002
         STRING64 '  Optical Drives',INTO=LINE                   RS1002
         BRASL R14,SPACE1          <== next line                 RS1002
         STRING64 '  DevName ',1X,'UserId',3X,'Date',7X,'Time',5X,     X
               'LibName',INTO=LINE                               RS1006
         BRASL R14,SPACE2          <== next line                 RS1002
         L     R1,DRDELNG              Load length of a entry    RS1002
         ST    R1,WKCELL4              Save length               RS1002
         LA    R6,DRDH_LENGTH(,R6)     point to entry            RS1002
         USING IGDDRDE,R6           Caution this dsect maps not  RS1002
SMSB92_1 DS    0H                                                RS1002
         STRING64 2X,(DRDNAME,8,T),1X,DRDUSER,1X,DRDDATE,1X,DRDTIME,   X
               1X,(DRDLNAME,8,T),INTO=LINE                       RS1006
         TR    LINE,TRTPRINT                                     RS1006
         BRASL R14,SPACE1          <== next line                 RS1002
*        #SNAP ADDR=(R6),LENGTH=2200   Debug code                RS1002
         AL    R6,WKCELL4              Skip this entry           RS1002
         JCT   R7,SMSB92_1                                       RS1002
         L     R1,SSSA1PTR             load addr and length      RS1002
         L     R2,SSSA1LEN                                       RS1002
         FREEMAIN RU,LV=(R2),A=(R1)    free work area            RS1002
         BRASL R14,BLANK1              BLANK LINE                RS1002
SMSB93   DS    0H                                                RS0902
*        TYP=28: return list of destination definition           RS0902
*        sorry no dsect-info available                           RS0902
         MVI   SSSA1TYP,SSSA1DSL       RETURN all                RS0902
         BRASL R14,IEFSS               call SMS                  RS0902
         LTR   R1,R1                                             RS0902
         JNZ   SMSB98X                                           RS0902
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?               RS0902
         JE    SMSB84                  no, exit                  RS0902
*        USING IGDSGD,R6                                         RS0902
         STRING64 '  Destination Definition',INTO=LINE           RS0902
         BRASL R14,SPACE2          <== next line                 RS0902
         STRING64 '  Contact Roland Schiradin',INTO=LINE         RS0605
         BRASL R14,SPACE2          <== next line                 RS0605
         #SNAP ADDR=(R6),LENGTH=100    Debug code                RS0605
SMSB94   EQU   *
         AIF   (NOT D'CVTH7708).SMSB95  z/OS R5? No              RS0605
         TM    HBB7708,L'HBB7708       running on z/OS R5        RS0605
         JZ    SMSB95                  no, leave                 RS0605
*        TYP=30: return list of Storage group collections        RS0605
*        sorry no dsect-info available                           RS0605
         MVI   SSSA1TYP,SSSA1CPL       RETURN all                RS0605
         BRASL R14,IEFSS               call SMS                  RS0605
         LTR   R1,R1                                             RS0605
         JNZ   SMSB98X                                           RS0605
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?               RS0605
         JE    SMSB84                  no, exit                  RS0605
         USING IGDSGCL,R6                                        RS0605
         L     R7,SGCPCNT              Loop Counter              RS0414
         STRING64 '  Copy Pool Definition',INTO=LINE             RS0414
         BRASL R14,SPACE1          <== next line                 RS0414
         STRING64 '  PoolName',4X,'UserId',3X,'Date',7X,'Time',5X,     X
               'Description',INTO=LINE                           RS0414
         BRASL R14,SPACE2          <== next line                 RS0414
         L     R1,SGCPLEN              Load length of a entry    RS0414
         ST    R1,WKCELL4              Save length               RS0414
         LA    R6,24(,R6)              point to entry            RS0414
         USING SGCDEF,R6            Caution this dsect maps not  RS0414
SMSB94_1 DS    0H                                                RS0414
         STRING64 2X,(SGCNAME,11,T),1X,SGCUSER,1X,SGCDATE,1X,SGCTIME,  X
               1X,(SGCDESC,50,T),INTO=LINE                       RS0414
         TR    LINE,TRTPRINT                                     RS0414
         BRASL R14,SPACE1          <== next line                 RS0414
*        #SNAP ADDR=(R6),LENGTH=512                              RS0414
         AL    R6,WKCELL4              Skip this entry           RS0414
         JCT   R7,SMSB94_1                                       RS0414
         L     R1,SSSA1PTR             load addr and length      RS0414
         L     R2,SSSA1LEN                                       RS0414
         FREEMAIN RU,LV=(R2),A=(R1)    free work area            RS0414
         BRASL R14,BLANK1              BLANK LINE                RS0414
.SMSB95  ANOP  ,                                                 RS0605
SMSB95   EQU   *                                                    +JM
*
*        Allocate an un-protected work area for the READ Routine
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS0902
         JZ    SMSB95X                 no, jump                  RS0902
         MODESET KEYADDR=PROTKEY,WORKREG=2                       RS0902
SMSB95X  DS    0H                                                RS0902
         LHI   R2,SMS_WORK_LENGTH
         GETMAIN RU,LV=(R2)            ALLOCATE SMS WORK AREA
         STM   R1,R2,SMS_SSOB          save addr for IEFSSREQ calls
         OI    SMS_SSOB,X'80'          SSOB_PTR
         J     SMSB99                  exit
*
SMSB96   STRING64 '  IEFSSREQ FAILED - ',                              X
               'R15=',((R1),,L),                                       X
               ' SSOBRETN=',(SSOBRETN,F,L),                            X
               ' SSSA1TYP=',(SSSA1TYP,FL1,L),                          X
               ' SSSASFN=',(SSSASFN,H,L),                              X
               ' SSSARSN=',(SSSARSN,F,L),                              X
               ' SSSA1LEN=',(SSSA1LEN,F,L),                            X
               ' SSSA1ALN=',(SSSA1ALN,F,L),                            X
               INTO=LINE                                            +JM
         BRASL R14,SPACE1              Double Space
         J     SMSB98X                 exit
*
SMSB97   DS    0H
         STRING64 '  SMS is not active on this system.',               XX
               ' R15=',((R1),,L),INTO=LINE
         BRASL R14,SPACE1              Double Space
         J     SMSB98X                 exit
*
SMSB98   DS    0H
         STRING64 '  SMS is not active on this system.',INTO=LINE
         BRASL R14,SPACE1              Double Space
*
*        Reaquire a SMS work arae                                   +JM
*
SMSB98X  DS    0H
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS0902
         JZ    SMSB98Y                 no, jump                  RS0902
         MODESET KEYADDR=PROTKEY,WORKREG=2                       RS0902
SMSB98Y  DS    0H                                                RS0902
         XC    SMS_SSOB,SMS_SSOB       clear SSOB pointer        RS0902
         LHI   R2,SMS_WORK_LENGTH
         GETMAIN RU,LV=(R2)            ALLOCATE SMS WORK AREA       +JM
         STM   R1,R2,SMS_SSOB          save addr for IEFSSREQ calls +JM
         OI    SMS_SSOB,X'80'          SSOB_PTR                     +JM
*
SMSB99   DS    0H                                                   +JM
*
SMSD999  END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*        IEFSSA-Request for StorClas/MgmtClass/DataClas               *
*                                                                     *
*---------------------------------------------------------------------*
IEFSS    BEGIN_PROC SAVE=NO                                         +RS
         STM   R12,R14,WORK256+32      save three register          +RS
*                                                                   +RS
         L     R1,CVTJESCT             JES COMM TABLE               +RS
         L     R1,JESCTEXT-JESCT(,R1)  JESCT Extension              +RS
         ICM   R5,B'1111',JESSMSIB-JESPEXT(R1) SMS SSIB             +RS
         JZ    IEFSS6                  SMS not active, exit         +JM
         L     R3,SMS_SSOB                                          +RS
         USING SMS_WORK,R3                                          +RS
*                                                                   +RS
         LA    R4,SSOB_WRK             POINT TO WORK AREA           +RS
         USING SSOB,R4                                              +RS
         MVI   SSOBLEN+1,SSOBHSIZ      SSOB length                  +RS
         MVC   SSOBID,=C'SSOB'         SSOB                         +RS
         MVI   SSOBFUNC+1,SSOBSSMS     FUNCTION                     +RS
         ST    R5,SSOBSSIB             SMS SSIB                     +RS
*                                                                   +RS
         LA    R5,SSSA_WRK             SSSA WORK AREA               +RS
         ST    R5,SSOBINDV             FUNCTION-DEPENDENT AREA      +RS
         USING IEFSSSA,R5                                           +RS
         LA    R0,SSSALN+SSSA1LN       LENGTH                       +RS
         STH   R0,SSSALEN                                           +RS
         MVC   SSSAID,=C'SSSA'         SSSA                         +RS
         MVI   SSSAVER+1,SSOBSSVR      VERSION                      +RS
         MVI   SSSASFN+1,SSSAACTV      SUB-FUNCTION CODE            +RS
         MVI   SSSAIFLG,SSSANAUT       NON-AUTHORIZED CALLER        +RS
         XC    SSSA1LEN,SSSA1LEN                                 RS0902
         XC    SSSA1PTR,SSSA1PTR                                 RS0902
         XC    SSSARSN,SSSARSN                                   RS1002
         LA    R1,SMS_SSOB             SSOB_PTR                     +RS
         IEFSSREQ                  <== CALL SMS                     +RS
         LTR   R1,R15                  SMS active?                  +RS
         JNZ   IEFSS6                  no, exit                     +RS
*        If req failed with RSN=5002, leave                         +RS
         CLC   SSSARSN,=A(SSSA1CNF)    Not found ?                  +RS
         JE    IEFSS9                  no, exit
*        If req failed with RSN=5003, leave                      RS1006
         CLC   SSSARSN,=A(SSSA1NVL)    Not found ?               RS1006
         JE    IEFSS9                  no, exit                  RS1006
         ICM   R1,B'1111',SSOBRETN     TEST RETURN CODE             +RS
         JZ    IEFSS9                  OK, jump                     +RS
*                                                                   +RS
IEFSS3   DS    0H                                                   +JM
*                                                                   +RS
IEFSS5   STRING64 '  IEFSSREQ FAILED - ',                              X
               'R15=',((R1),,L),                                       X
               ' SSOBRETN=',(SSOBRETN,F,L),                            X
               ' SSSA1TYP=',(SSSA1TYP,FL1,L),                          X
               ' SSSASFN=',(SSSASFN,H,L),                              X
               ' SSSARSN=',(SSSARSN,F,L),                              X
               ' SSSA1LEN=',(SSSA1LEN,F,L),                            X
               ' SSSA1ALN=',(SSSA1ALN,F,L),                            X
               INTO=LINE                                            +RS
         LA    R1,4                                                 +RS
         BRASL R14,SPACE1              Double Space                 +RS
         J     IEFSS9                  exit                         +RS
*                                                                   +RS
IEFSS6   STRING64 '  SMS is not active on this system.',               X
               ' R15=',((R1),,L),INTO=LINE
         BRASL R14,SPACE1              Double Space                 +RS
IEFSS9   DS    0H                                                   +RS
         L     R6,SSSA1PTR             ADDR OF WORK AREA         RS0902
IEFSSEND DS    0H                                                   +RS
         LM    R12,R14,WORK256+32      restore three register       +RS
         BR    R14                                                  +RS
         DROP  R3,R4,R5                                             +JM
         TITLE 'SHOWMVS &REL - HSM Data'
*---------------------------------------------------------------------*
*                                                                     *
*HSM Info                                                             *
*                                                                     *
*  HSM Info                                                           *
*                                                                     *
*   Jobname: SYSHSMF                                                  *
*   Version: 01.03.00                                                 *
*   MCDS   : SYS2.SMSAL00.HSMMCDS                                     *
*   BCDS   : SYS2.SMSAL00.HSMBCDS                                     *
*   OCDS   : SYS2.SMSAL00.HSMOCDS                                     *
*   JRNL   : SYS2.SMSAL00.HSMJRNL                                     *
*   Latest number of Requests:       754                              *
*   Maximum Storage for MWE:   102400 in used:         0              *
*   Inactivity Limit: 30% Active: 90% MWE:  4                         *
*   Time of ARC0057I: n/a                                             *
*   Time of ARC0058I: n/a                                             *
*                                                                     *
*  HSM Activity (MWE):                                                *
*  Date       Time        Function     UserID  Req-No DS-Name         *
*  2000-04-25 19:10:59.48 03 Recall    XSSGSCH     25 XSSGSCH.ADATA.CN*
*  2000-04-25 19:10:59.83 07 Backup    XSSGSCH     26 XSSGSCH.ARCHHFS.*
*  2000-04-25 19:11:00.57 06 Migrate   XSSGSCH     27 XSSGSCH.ATR.REPO*
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
HSM      BEGIN_PROC KW=HSM                                       RS0402
         STRING64 '&TITLEPFX.HSM Info:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  HSM not active',INTO=LINE
         ICM   R3,B'1111',CVTHSM
         JZ    HSM98
         USING MQCT,R3             FDR set MQCTFACT but not MQCTASCB
         TM    MQCTFLG1,MQCTFACT       HSM active?
         JZ    HSM98                  no, leave
         ICM   R15,B'1111',MQCTASCB    HSM ASCB present (FDRABR) ?
         JZ    HSM98                  no, leave
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   HSM10                Yes - continue
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         JNZ   HSM10                No - continue
         LA    R1,BLANKS
HSM10    DS    0H
         STRING64 '  Jobname: ',((R1),8),INTO=LINE               RS0105
         BRASL R14,SPACE1              Double Space              RS0105
         STRING64 '  Version: ',(MQCT_VRM+1,1,X),'.',(MQCT_VRM+2,1,X), X
               '.',(MQCT_VRM+3,1,X),INTO=LINE                    RS0105
         BRASL R14,SPACE1              Double Space              RS0105
         ICM   R4,B'1111',MQCTMULP     HSM Host elements         RS0105
         JZ    HSM12                     leave if zero           RS0105
         USING MQCT_MULT,R4            ARCQCT                    RS0105
         ICM   R5,B'1111',MQCTGRS      HSM GRS ?                 RS0105
         JZ    HSM12                     leave if zero           RS0105
         USING GRSCB,R5                ARCQCT                    RS0105
         LH    R0,GRCB_MCDSL                                     RS0105
         STRING64 '  MCDS   : ',(GRCB_MCDS,(R0),T),INTO=LINE     RS0105
         BRASL R14,SPACE1              Double Space              RS0105
         LH    R0,GRCB_BCDSL                                     RS0105
         STRING64 '  BCDS   : ',(GRCB_BCDS,(R0),T),INTO=LINE     RS0105
         BRASL R14,SPACE1              Double Space              RS0105
         LH    R0,GRCB_OCDSL                                     RS0105
         STRING64 '  OCDS   : ',(GRCB_OCDS,(R0),T),INTO=LINE     RS0105
         BRASL R14,SPACE1              Double Space              RS0105
         LH    R0,GRCB_JRNLL                                     RS0105
         STRING64 '  JRNL   : ',(GRCB_JRNL,(R0),T),INTO=LINE     RS0105
         BRASL R14,SPACE1              Double Space              RS0105
         DROP  R4,R5                                             RS0105
HSM12    DS    0H                                                RS0105
         STRING64 '  Latest number of Requests: ',(MQCTRQN,F,R9B), RS0105X
               INTO=LINE                                         RS0105
         BRASL R14,SPACE1              Double Space              RS0105
         STRING64 '  Maximum Storage for MWE:',(MQCTCSHL,F,R9B),       X
               ' in used: ',(MQCTCSCU,F,R9B),INTO=LINE
         BRASL R14,SPACE1              Double Space
         STRING64 '  Inactivity Limit: ',(MQCTCSIL,H,R2B),'% Active: ',X
               (MQCTCSAL,H,R2B),'% MWE: ',(MQCTCSNL,H,R2B),INTO=LINE
         BRASL R14,SPACE1              Double Space
*
         STRING64 'n/a                 ',INTO=WORK256
         CLC   MQCTT57I,=D'0'          present?
         JE    HSM20
         CLC   MQCTT57I,BLANKS         present?                  RS0302
         JE    HSM20                                             RS0302
         LM    R14,R15,MQCTT57I        load double               RS0302
         SLDL  R14,12                 Re-shift to make STCK format @JRH
         STM   R14,R15,WORK256+L'WORK256-8 Save @ end of WORK256   @JRH
         LA    R1,WORK256+L'WORK256-8  Adjust STCKCONV input       @JRH
         BRASL R14,STCKCONV            convert TOD clock to decimal
         STRING64 STCKDATE,2X,(STCKTIME,8),INTO=WORK256
HSM20    DS    0H
         STRING64 '  Time of ARC0057I: ',(WORK256,20),                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 'n/a                 ',INTO=WORK256
         CLC   MQCTT58I,=D'0'          present?
         JE    HSM30
         CLC   MQCTT58I,BLANKS         present?                  RS0302
         JE    HSM30                                             RS0302
         LM    R14,R15,MQCTT58I        load double               RS0302
         SLDL  R14,12                 Re-shift to make STCK format @JRH
         STM   R14,R15,WORK256+L'WORK256-8 Save @ end of WORK256   @JRH
         LA    R1,WORK256+L'WORK256-8  Adjust STCKCONV input       @JRH
         BRASL R14,STCKCONV            convert TOD clock to decimal
         STRING64 STCKDATE,2X,(STCKTIME,8),INTO=WORK256
HSM30    DS    0H
         STRING64 '  Time of ARC0058I: ',(WORK256,20),                 X
               INTO=LINE
         BRASL R14,SPACE2
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         JZ    HSM99                   no jump
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JZ    HSM40                   no, jump
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0
HSM40    DS    0H
         STRING64 '  HSM Activity (MWE): ',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  No active MWE found',INTO=LINE
         ICM   R4,B'1111',MQCTMEWH
         JZ    HSM97                    leave                    RS0605
         USING MWE,R4
         VALIDATE MWE,ERRET=HSM96     avoid 0C4 on MWE
         STRING64 '  Date',7X,'Time',8X,'Function     ','UserID',7X,   X
               'Req-No',' DS-Name',INTO=LINE
         BRASL R14,SPACE1
*loop
HSM80    DS    0H
         BRASL R1,HSM801
         DC    AL1(MWEFX00),CL9'RetQCTPtr'
         DC    AL1(MWEFX01),CL9'Start HSM'
         DC    AL1(MWEFX02),CL9'Stop HSM'
         DC    AL1(MWEFX03),CL9'Recall'
         DC    AL1(MWEFX04),CL9'Unused'
         DC    AL1(MWEFX05),CL9'Reocver'
         DC    AL1(MWEFX06),CL9'Migrate'
         DC    AL1(MWEFX07),CL9'Backup'
         DC    AL1(MWEFX08),CL9'ReadCDS'
         DC    AL1(MWEFX09),CL9'Command'
         DC    AL1(MWEFX10),CL9'Post MWE'
         DC    AL1(MWEFX11),CL9'Purge MWE'
         DC    AL1(MWEFX12),CL9'HDelete'
         DC    AL1(MWEFX13),CL9'AggBackup'
         DC    AL1(MWEFX14),CL9'AggRecov.'
         DC    AL1(00),CL9'*********'
*--loop
HSM801   DS    0H
         CLC   MWEFUNC,0(R1)           found type
         JE    HSM802                  yes
         LA    R1,10(,R1)              skip this entry
         CLI   0(R1),X'00'             end of list
         JNE   HSM801
*--endloop
HSM802   DS    0H
         ZAP   WKCELL1,MWESDAT
         STRING64 2X,(WKCELL1,P,YYYY-MM-DD),                     RS0500X
               1X,(MWESTIM,1,X),':',(MWESTIM+1,1,X),':',         RS0500X
               (MWESTIM+2,1,X),'.',(MWESTIM+3,1,X),              RS0500X
               1X,(MWEFUNC,,X),1X,(1(R1),9),                     RS0500X
               1X,MWEUID,2X,(MWERQN,F,R9B),1X,                   RS0500X
               INTO=LINE                                         RS0500
         LA    R6,LINE(R15)                                      RS0500
         CLI   MWEFUNC,X'09' Command ??                          RS0500
         JNE   HSM820
         LH    R0,MWECMDL                                        RS0500
         STRING64 (MWECMD,(R0),T),INTO=(0(R6),NEXTLINE)          RS0500
HSM820   DS    0H                                                RS0500
         BRASL R14,SPACE1
         ICM   R4,B'1111',MWEFWD
         JNZ   HSM80
*endloop
         J     HSM97                                             RS0605
*
HSM96    DS    0H                                                RS0605
         STRING64 '  Could not access the MWE-queue',INTO=LINE   RS0506
         BRASL R14,SPACE1
HSM97    DS    0H                                                RS0605
         BRASL R14,BLANK1              Blank line                RS0506
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JZ    HSM99                   no, jump
         MODESET KEYREG=(2)            switch back to own key
         J     HSM99
HSM98    DS    0H
         BRASL R14,SPACE2              Double Space
HSM99    END_PROC
         TITLE 'SHOWMVS &REL - SDM Data'                         RS0800
*---------------------------------------------------------------------*
*                                                                     *
*SDM (System Data Mover) Info                                         *
*                                                                     *
*  SDM (ANTAS00) active  Level: 00000004                              *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
SDM      BEGIN_PROC KW=SDM                                       RS0302
         STRING64 '&TITLEPFX.SDM (System Data Mover) Info:',INTO=LINE
         BRASL R14,SPACE2              Double Space
* In case of assembly error see OW42971
         ANTRQST REQUEST=LEVEL,RETINFO=WORK256,RETCODE=LRETCODE,       X
               RSNCODE=LRSNCODE,ILK=VERSION1,MF=(E,WORK256+100)  RS0800
         STRING64 '  SDM (ANTAS000)',' not',' active',INTO=LINE
         CLC   LRETCODE,=A(RQST_PC_NUMBER_ZERO)
         JE    SDM90
         CLC   LRETCODE,=A(RQST_SUCCESSFUL)
         JNE   SDM90                                             RS0302
         STRING64 '  SDM (ANTAS00)',' active',                         X
               '  Level: ',(WORK256,4,X),INTO=LINE
         J     SDM90
SDM80    DS    0H
         STRING64 '  SDM',9X,'RC: ',(LRETCODE,,X),                     X
               ' RSN: ',(LRSNCODE,,X),INTO=LINE
SDM90    DS    0H
         BRASL R14,SPACE2
.SDM99   ANOP
SDM99    END_PROC
         TITLE 'SHOWMVS &REL - GRS Configuration'
*---------------------------------------------------------------------*
*                                                                     *
*GRS Data                                                             *
*  Status: Join TryJoin     SYSNAME=M2                                *
*  Member(GRSCNFM2)                                                   *
*    RESMIL(10)    TOLINT(180)    ACCELSYS(2)                         *
*  Member(GRSRNLxx)                                                   *
*    RNLDEF RNL(EXCL) TYPE(Generic ) QNAME(SYSZVVDS)                  *
*    RNLDEF RNL(EXCL) TYPE(Generic ) QNAME(SYSVTOC )                  *
*    RNLDEF RNL(EXCL) TYPE(Generic ) QNAME(SYSZJES2)                  *
*    RNLDEF RNL(EXCL) TYPE(Generic ) QNAME(ACFVSAM )                  *
*    RNLDEF RNL(EXCL) TYPE(Generic ) QNAME(SYSDSN  ) RNAME(SYS1.DUMP) *
*    RNLDEF RNL(EXCL) TYPE(Generic ) QNAME(SYSDSN  ) RNAME(SYS1.MAN)  *
*                                                                     *
*    RNLDEF RNL(INCL) TYPE(Generic ) QNAME(SYSDSN  )                  *
*    RNLDEF RNL(INCL) TYPE(Generic ) QNAME(SYSZVOLS)                  *
*                                                                     *
*    RNLDEF RNL(CON) TYPE(Generic ) QNAME(SYSIGGV2)                   *
*    RNLDEF RNL(CON) TYPE(Generic ) QNAME(SPFEDIT )                   *
*    RNLDEF RNL(CON) TYPE(Generic ) QNAME(SOFTCTL )                   *
*    RNLDEF RNL(CON) TYPE(Generic ) QNAME(DSPURI0 )                   *
*    RNLDEF RNL(CON) TYPE(Generic ) QNAME(UCC11CMT)                   *
*    RNLDEF RNL(CON) TYPE(Generic ) QNAME(CTLIMSTR)                   *
*                                                                     *
*GRS Data                                                             *
*                                                                     *
*  Status: Join TryJoin     SYSNAME=D1                                *
*  Member(GRSCNF00)                                                   *
*    RESMIL(10)    TOLINT(300)    ACCELSYS(99)                        *
*  GRSRNL=EXCLUDE is in affect                                        *
*                                                                     *
*---------------------------------------------------------------------*
GRSDATA  BEGIN_PROC KW=GRS                                       RS0302
         L     R3,CVTGVT               GVT (GRS Vector Table)
         USING GVT,R3
         STRING64 '&TITLEPFX.GRS Data:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  Status: ',INTO=LINE
         LA    R4,LINE(R15)
        #STATUS GVTGRSOP,GVTSTART,'Start'
        #STATUS GVTGRSOP,GVTJOIN,'Join'
        #STATUS GVTGRSOP,GVTNONE,'None'
        #STATUS GVTGRSOP,GVTTRYJN,'TryJoin'
        #STATUS GVTGRSOP,GVTSTAR,'Star'                          RS0401
         STRING64 '    SYSNAME=',GVTSYSNM,INTO=((R4),NEXTLINE)
         BRASL R14,SPACE2              Single Space              RS0202
         ICM   R4,B'1111',GVTJCNFD     addr of GRSCNFxx data
         JZ    GRSD50                  zero, exit              RSAUG99
         USING GCC,R4
         STRING64 '  Member(',GCCMBRNM,')',INTO=LINE
         BRASL R14,SPACE1              Single Space
         SLR   R0,R0
         L     R1,GVTOLINT             Tolerance Time Interval
         D     R0,=F'1000'             milliseconds -> seconds
         STRING64 '    RESMIL(',(GCCRESMIL,F,L),')',                   X
               '    TOLINT(',((R1),,L),')',                            X
               '    ACCELSYS(',(GVTTHRS,H,L),')',                      X
               '    SYNCRES(',                                   RS0507X
               INTO=LINE
         LA    R4,LINE+0(R15)                                    RS0507
         MVC   0(3,R4),=C'No)'                                   RS0507
        #STATUS GVTCSFLG,GVTSYNCH,'Yes)'                         RS0507
         BRASL R14,SPACE1              Single Space              RS0507
         DROP  R4
         AIF   (NOT D'CVTH7707).GRSD50 z/OS R4?                  RS0605
         TM    HBB7707,L'HBB7707       running on z/OS R4        RS0605
         JZ    GRSD50                  no, jump                  RS0605
         STRING64 '    GRSQ(All)',INTO=LINE                      RS0605
         CLC   GVTGRSQ,=F'0'           GRSQ(ALL)                 RS0605
         JE    GRSD20                    ok print line           RS0605
         STRING64 '    GRSQ(Contention)',INTO=LINE               RS0605
         CLC   GVTGRSQ,=F'1'           GRSQ(CONTENTION)          RS0605
         JE    GRSD20                    ok print line           RS0605
         STRING64 '    GRSQ(Local)',INTO=LINE                    RS0605
GRSD20   EQU   *                                                 RS0605
*        BRASL R14,SPACE1                                        RS1007
         AIF   (NOT D'CVTH7730).GRSD30 z/OS R8?                  RS1007
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS1007
         JZ    GRSD30                  no, jump                  RS1007
         STRING64 (LINE,,T),' GVTCSGRSCONSTRAINED: ',INTO=LINE   RS1007
         LA    R4,LINE(R15)                                      RS1007
         MVC   0(2,R4),=C'No'               Default              RS1007
        #STATUS GVTCSGRSCONSTRAINED,GVTERQACONSTRAINED,'ERQA(YES)'
        #STATUS GVTCSGRSCONSTRAINED,GVTGRQACONSTRAINED,'GRQA(YES)'
        #STATUS GVTCSGRSCONSTRAINED,BIT2,'QRQA(YES)'             RS1107
         BRASL R14,SPACE1                                        RS1107
         BRASL R14,WORKADDR            32K work area             RS1107
         LR    R5,R1                                             RS1107
GRSD21   DS    0H                                                RS1107
         ISGQUERY REQINFO=ENQSTATS,                              RS1107X
               ASID==H'1',             asid us *MASTER*          RS1107X
               ANSAREA=(R5),           Data                      RS1107X
               RETCODE=LRETCODE,       Retcode                   RS1107X
               RSNCODE=LRSNCODE,       Rsncode                   RS1107X
               MF=(E,WORK256,COMPLETE)                           RS1107
         CLC   LRETCODE,=F'0'          Check RC                  RS1107
         JNE   GRSD29                  not zero leave            RS1107
         USING ISGYQUAAHDR,R5                                    RS1107
*        #SNAP ADDR=(R5),LENGTH=ISGYQUAAHDR_LEN debug code       RS1107
         L     R6,ISGYQUAAHDRFIRSTRECORD31 get first record      RS1107
         USING ISGYQUAASYS,R6          tell assembly             RS1107
*loop                                                            RS1107
GRSD22   DS    0H                                                RS1107
*        #SNAP ADDR=(R6),LENGTH=ISGYQUAASYS_LEN debug code       RS1107
         TM    ISGYQUAASYSFLAGS1,ISGYQUAASYSAUTHORIZED  Auth ?   RS1107
         JZ    GRSD23                  no, ok ENQMAXU            RS1107
         STRING64 '    ENQMAXA: ',(ISGYQUAASYSENQMAX,F,R9B),     RS1107X
               ' set by ASID ',(ISGYQUAASYSPEAKENQASID,H,R3B),   RS1107X
               ' Please note this ASID might be reused',         RS1107X
               INTO=LINE                                         RS1107
         BRASL R14,SPACE1              Single Space              RS1107
         J     GRSD24                  jump around               RS1107
GRSD23   DS    0H                                                RS1107
         STRING64 '    ENQMAXU: ',(ISGYQUAASYSENQMAX,F,R9B),     RS1107X
               ' set by ASID ',(ISGYQUAASYSPEAKENQASID,H,R3B),   RS1107X
               ' Please note this ASID might be reused',         RS1107X
               INTO=LINE                                         RS1107
         BRASL R14,SPACE1              Single Space              RS1107
GRSD24   DS    0H                                                RS1107
         ICM   R6,B'1111',ISGYQUAASYSNEXT31  one more?           RS1107
         JZ    GRSD50                  no leave                  RS1107
         J     GRSD22                  process next one          RS1107
*endloop                                                         RS1107
GRSD29   DS    0H                      Error msgs                RS1107
         STRING64 '  ISGQUERY RC: ',(LRETCODE,,X),' RSN: ',      RS1107X
               (LRSNCODE,,X),INTO=LINE                           RS1107
.GRSD30  ANOP                                                    RS1007
GRSD30   EQU   *                                                 RS1007
         BRASL R14,SPACE1                                        RS1007
.GRSD50  ANOP                                                    RS0605
GRSD50   EQU   *                                               RSAUG99
         BRASL R14,BLANK1                                        RS0605
         TM    GVTGRSOP,GVTNONE        GRS=NONE                RSAUG99
         JO    GRSD70                    Yes                    RS0605
         ICM   R5,B'1111',GVTSERNL     RNL Exlcude present     JMSEP99
         JZ    GRSD60                  No                      JMSEP99
         USING RNLE,R5                                         JMSEP99
         TM    RNLEFLGS,RNLEXALL       GRSRN=EXCLUDE           JMSEP99
         JZ    GRSD60                    No                     RS0605
         STRING64 '  GRSRNL=EXCLUDE is in affect',INTO=LINE    JMSEP99
         BRASL R14,SPACE2              Double space            JMSEP99
         DROP  R5                                              JMSEP99
         J     GRSD70                                          JMSEP99
GRSD60   EQU   *                                               JMSEP99
         STRING64 '  Member(GRSRNLxx)',INTO=LINE               RSAUG99
         BRASL R14,SPACE1              Single Space            RSAUG99
         MVC   WORK256(4),=C'EXCL'                             RSAUG99
         ICM   R5,B'1111',GVTSERNL     RNL Exlcude present     RSAUG99
         BRASL R7,GRSLP100             display RNLE-entries    RSAUG99
         BRASL R14,BLANK1                                      RSAUG99
         MVC   WORK256(4),=C'INCL'                             RSAUG99
         ICM   R5,B'1111',GVTSIRNL     RNL Include present     RSAUG99
         BRASL R7,GRSLP100             display RNLE-entries    RSAUG99
         BRASL R14,BLANK1                                      RSAUG99
         MVC   WORK256(4),=C'CON '                             RSAUG99
         ICM   R5,B'1111',GVTRCRNL     RNL Include present     RSAUG99
         BRASL R7,GRSLP100             display RNLE-entries    RSAUG99
         BRASL R14,BLANK1              Double Space            RSAUG99
GRSD70   DS    0H                                              RS0605
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         JZ    GRSD99                  no, jump
         AIF   (D'CVTH7740).GRSD99     z/OS R9?                  RS0907
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS0907
         JNZ   GRSD99                    yes, jump               RS0907
         L     R4,GVTGASCB             ASCB OF GRS
         USING ASCB,R4
         MVC   WKCELL2,ASCBASID        ASID OF GRS
         DROP  R4
         L     R4,GVTGVTX              GVTX
*        R4 --> GVTX in GRS address space
         ESAR  R2                      Get current sec. asid
         STH   R2,WKCELL1              Save current sec. asid
         AXSET AX==H'1'                Set auth
         LH    R2,WKCELL2              Get 'GRS' asid
         SSAR  R2                      Set GRS as secondary
* FIND GVTX
         LA    R14,255                 Set lenth of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R4),R15  Copy data from sec. asid
         LA    R5,WORK256
         USING GVTX,R5
*        #SNAP ADDR=(R5),LENGTH=(R14)  Debug
         L     R4,GVTXGRPT
         DROP  R3,R5                                             RS0806
* FIND RPT
         LA    R14,160                 Set lenth of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R4),R15  Copy data from sec. asid
         LA    R5,WORK256
         USING RPT,R5                  ISGRPT
*        #SNAP ADDR=(R5),LENGTH=(R14)  Debug
         STRING64 '  RPT Entries: ',(RPT_#ENTRIES,FL1,L),INTO=LINE
         BRASL R14,SPACE1              Double Space
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS0806
         JNZ   GRSD70_1                 yes, leave               RS0806
         STRING64 '  PEXB in use: ',(RPT_#EXTENTS,F,R9B),INTO=LINE
         BRASL R14,SPACE1              Double Space
         L     R2,RPT_TOTAL#EXTENTS
         S     R2,RPT_#EXTENTS
         STRING64 '  PEXB free  : ',((R2),,R9B),INTO=LINE
         BRASL R14,SPACE1              Double Space
GRSD70_1 DS    0H                                                RS0806
* Process the RPT entries
         SR    R6,R6                   clear R6
         IC    R6,RPT_#ENTRIES         number of entries
         AHI   R4,160                  around header
         STRING64 '  ID    Size     Count   Extent  Flag1/Flag2',      X
               INTO=LINE
         BRASL R14,SPACE1              Double Space
         LR    R7,R4                   now the base
         LR    R3,R4                   now the base for z/OS R8  RS0806
*loop
GRSD71   DS    0H
* Get RPT entry
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS0806
         JZ    GRSD71_1                 no, leave                RS0806
         LA    R14,8                   z/OS R8                   RS0806
         SR    R15,R15                 'from' key                RS0806
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
*        LG    R7,WORK256              It's FD but high order notRS0806
         L     R7,WORK256+4            used so far (z/OS R9?)    RS0806
GRSD71_1 DS    0H                                                RS0806
         LA    R14,48                  z/OS R4
         TM    HBB7709,L'HBB7709       running on z/OS R6
         JZ    GRSD72                   no, leave
         LA    R14,64                  z/OS R6
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS0806
         JZ    GRSD72                   no, leave                RS0806
         LA    R14,80                  z/OS R8                   RS0806
GRSD72   DS    0H
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R7),R15  Copy data from sec. asid
         LA    R5,WORK256
*        #SNAP ADDR=(R5),LENGTH=(R14)  Debug
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS0806
         JZ    GRSD72_1                 no, leave                RS0806
         USING RPT8,R5                 RPTE for z/OS R8          RS0806
         STRING64 2X,RPT8_ID,1X,(RPT8_CELLSIZE,H,R5B),1X,        RS0806X
               (RPT8_#EXTENTS,F,R9B),1X,(RPT8_RPTQUEUE31,,X),INTO=LINE
         LA    R4,LINE+2(R15)
        #STATUS RPT8_FLAGS1,RPT8_INACTIVEPEXBSQUEUED,'Inactive '
        #STATUS RPT8_FLAGS2,RPT8_SHADOWSUPPORT,'Shadow '
        #STATUS RPT8_FLAGS2,RPT8_SECONDSHADOWSUPPORT,'Second Shadow '
        #STATUS RPT8_FLAGS2,RPT8_HOTQUEUESUPPORT,'HotQueue '
         J     GRSD73                                            RS0806
GRSD72_1 DS    0H                      RPTE pre z/OS R8
         USING RPTE,R5
         STRING64 2X,RPTE_ID,1X,(RPTE_CELLSIZE,H,R5B),1X,              X
               (RPTE_#EXTENTS,F,R9B),1X,(RPTE_EXTENT,,X),INTO=LINE
         LA    R4,LINE+2(R15)
        #STATUS RPTE_FLAGS1,RPTE_INACTIVEPEXBSQUEUED,'Inactive '
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS0406
         JZ    GRSD73                                            RS0406
        #STATUS RPTE_FLAGS2,RPTE_SHADOWSUPPORT,'Shadow '
        #STATUS RPTE_FLAGS2,RPTE_SECONDSHADOWSUPPORT,'Second Shadow '
        #STATUS RPTE_FLAGS2,RPTE_HOTQUEUESUPPORT,'HotQueue '     RS0406
GRSD73   DS    0H                                                RS0406
         BRASL R14,SPACE1              Double Space
         AHI   R7,48                   z/OS R4 next entry
         TM    HBB7709,L'HBB7709       running on z/OS R6
         JZ    GRSD75                   no, leave
         AHI   R7,16                   z/OS R6 next entry (64 Bytes)
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS0806
         JZ    GRSD75                   no, leave                RS0806
         AHI   R7,16                   z/OS R8 next (80 Bytes)   RS0806
GRSD75   DS    0H
         AHI   R3,8                    R3 only used for z/OS R8  RS0806
         JCT   R6,GRSD71               Do until
*endloop
         BRASL R14,BLANK1              blank line
         LH    R2,WKCELL1
         SSAR  R2                      Should be same as primary
         AXSET AX==H'0'                Reset auth
         XC    WKCELL1,WKCELL1
.GRSD99  ANOP                                                    RS0907
GRSD99   END_PROC
*---------------------------------------------------------------------
*
*        RNLE entries sub-routine
*
*---------------------------------------------------------------------
*
GRSLP100 BEGIN_PROC SAVE=NO                                    RSAUG99
         USING RNLE,R5                                         RSAUG99
         LTR   R5,R5                   any entries ?           RSAUG99
         JNZ   GRSLP110                 yes, process them      RSAUG99
         STRING64 '    No RNL(',(WORK256,4,T),') entries',INTO=LINE
         BRASL R14,SPACE1                                      RSAUG99
         J     GRSLP900                goback                  RSAUG99
*Loop                                                          RSAUG99
GRSLP110 EQU   *                                               RSAUG99
         TM    RNLEFLGS,RNLELAST       last entry?             RSAUG99
         JO    GRSLP900                  yes, back             RSAUG99
         STRING64 '    RNLDEF RNL(',(WORK256,4,T),') TYPE(',INTO=LINE
         LA    R4,LINE(R15)                                    RSAUG99
         CLI   RNLEFLGS,0                                      RS0404
         JNE   GRSLP112                                        RS0404
         MVC   0(8,R4),=C'Specific'   RNLEFLGS = X'00'         RSAUG99
         LA    R4,8(,R4)                                       RSAUG99
GRSLP112 EQU   *                                               RSAUG99
        #STATUS RNLEFLGS,RNLEGENR,'Generic'                    RS0404
        #STATUS RNLEFLGS,RNLEPATT,'Pattern'                    RS0404
GRSLP115 EQU   *                                               RS0404
         STRING64 ') QNAME(',RNLEQNME,')',INTO=((R4),NEXTLINE) RSAUG99
         SLR   R0,R0                                           RSAUG99
         IC    R0,1(,R5)               pickup length           RSAUG99
         LTR   R0,R0                   Qname present?          RSAUG99
         JZ    GRSLP120                  no, length zero       RSAUG99
         STRING64 ') QNAME(',RNLEQNME,')',                     RSAUG99 x
               ' RNAME(',(10(R5),(R0)),')',INTO=((R4),NEXTLINE) RSAUG99
GRSLP120 EQU   *                                               RSAUG99
         BRASL R14,SPACE1                                      RSAUG99
*#SNAP ADDR=RNLEFLGS,LENGTH=18                                 RSAUG99
         LA    R5,10(R5)                                       RSAUG99
         AR    R5,R0     + variable length                     RSAUG99
         J     GRSLP110                                        RSAUG99
*EndLoop                                                       RSAUG99
GRSLP900 EQU   *                                               RSAUG99
         BR    R7                                              RSAUG99
         DROP  R5                                               RS0302
         TITLE 'SHOWMVS &REL - Hardware Configuration'
*---------------------------------------------------------------------*
*                                                                     *
*Hardware Configuration:                                              *
*                                                                     *
*  Central Processing Complex Node Description:                       *
*                                                                     *
*    Type(009000) Model(942) Manufacturer(IBM) Plant(00) Seqno(0000...*
*                                                                     *
*  On-line Processors:                                                *
*                                                                     *
*    CPU 0 Serial: 027506 Version: D4  Model: 9021-942 zAAP: No  WLM: *
*    CPU 1 Serial: 127506 Version: D4  Model: 9021-942                *
*                                                                     *
*  CSRSI Info                                                         *
*                                                                     *
*    PCCACPID:8102054B9672 PCCACPUA:   PCCACAFM:   CSRSR-FLG:E0       *
*                                                                     *
*    Type(9672) Model(R16) Manufacturer(IBM) Plant(83) Seqno(000000000*
*                                                                     *
*    CPU Info :                                                       *
*      Total:   5      Configured:   1 Standby:   0 Reserv.:   4 Capab*
*      Adjustment Factor:                                             *
*      92%                                                            *
*    CPC Number:   6                                                  *
*      Total:   1      Configured:   1 Standby:   0 Reserv.:   0      *
*      LPAR : LP0102   Dedicate:     0 Shared:    1 Capability:      1*
*                                                                     *
*  This system can deliver 2776 service units per second              *
*                                                                     *
*  SRM MIPS:  646.856  (SU/sec) / 48.5 No of CPU: 4 zAAP excl.        *
*                                                                     *
*  MSU QVS:  CEC: 108 IMG: 108                                        *
*                                                                     *
*  REQLPDAT: Flags:   Capdata valid                                   *
*            CEC-Capacity:       108                                  *
*            LPAR       : LP0203    Capacity    :       108           *
*            Factor     :      2138                                   *
*            Weight     :  20735025 # weight acc:    276467           *
*            Service    :        18                                   *
*            Time uncap :         0 capped      :         0           *
*                                                                     *
*  CPU%:  22 AFQ:     13189 UIC:  2540 MSU(4H):         2 FLG: 80     *
*                                                                     *
*  Processor Speed: 188.8 MIPS    (Estimated using a BCTR loop)       *
*                                                                     *
*  CVTFLAGS: 7C C0 00 00  SVPRC CUSE MVPG OVER CSTR CMPSC CMPSH       *
*                                                                     *
*  Control Register:                                                  *
*    0-3 5F01FE50 F75E0003 53099F80 00C00095  4-7 00000095 7FAF6540   *
*    8-B 00000000 00000000 00000000 00000000  C-F 7B2F465F F75E0003   *
*                                                                     *
*  Execution Mode: 64-bit                                             *
*                                                                     *
*  ADMF (Async Data Mover)  not active                                *
*                                                                     *
*  Online Real Storage: 8032M Base:  502M Increment: 16 / 16          *
*                                                                     *
*    Expanded Storage: 65536K                                         *
*                                                                     *
*  Service Processor Data:                                            *
*                                                                     *
*    LOADPARM: 0E6A 00 M                LPAR: YES                     *
*                                                                     *
*  I/O Configuration Data:                                            *
*                                                                     *
*    IODF Data Set Name: SYS1.IODF00                                  *
*    IODF Configuration Id: PROD00  Date: 96/04/01  Time: 11:12:13    *
*      Update Count: 0                                                *
*    EDT ID: 00                                                       *
*    Flags: 10000000                                                  *
*                                                                     *
*---------------------------------------------------------------------*
HARDWARE BEGIN_PROC KW=HARDWARE               LOAD require       RS0302
         STRING64 '&TITLEPFX.Hardware Configuration:',INTO=LINE
         BRASL R14,SPACE2              Double Space
*
*  Central Processing Complex Node Description:
*
*    Type(009000) Model(942) Manufacturer(IBM) Plant(00) Seqno(0000...
*
         L     R4,CVTHID               Host ID
         USING SHID,R4
         CLI   CPCND_FLAGS,0           HID Available?
         JE    HARD16X                 no, exit
         TM    CPCND_FLAGS,B'01000000'
         JZ    HARD16F
         TM    CPCND_FLAGS,B'10100000'
         JZ    HARD16X
HARD16F  EQU   *
         STRING64 '  Central Processing Complex Node Description:',    X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '    Type(',CPCND_TYPE,  3090                        X
               ') Model(',CPCND_MODEL,     40J                         X
               ') Manufacturer(',CPCND_MAN, IBM/AMH/HTC                X
               ') Plant(',CPCND_PLANT,     00                          X
               ') Seqno(',CPCND_SEQNO,')',                             X
               INTO=LINE
         TM    CPCID_FLAGS,B'10000000'
         JO    HARD16S
         STRING64 (LINE,,T),' Id(',(CPCID_MAP,,X),')',INTO=LINE
HARD16S  EQU   *
         BRASL R14,SPACE2              Double Space
HARD16X  EQU   *
*        ISRDDN B 10.?+25c?+1f4?+28                              RS0806
         L     R14,CVTOPCTP            Resource Manager Control Table06
         CLC   RMCTX1+116-RMCT(4,R14),=X'7FFFF000' Hercules/VM   RS0308
         JE    HARD16Y                 yes leave                 RS0806
         L     R4,RMCTX1+116-RMCT(,R14)                          RS0806
         STRING64 '  Microcode Level: ',(40(R4),8),INTO=LINE     RS0806
         BRASL R14,SPACE2              Double Space              RS0806
HARD16Y  DS    0H
*
*  On-line Processors:
*
* CPU 0   Serial: 019E7C  Version: 00  Model: 2094 zAAP: No  zIIP: No
* CPU 1   Serial: 019E7C  Version: 00  Model: 2094 zAAP: No  zIIP: No
* CPU 2   Serial: 019E7C  Version: 00  Model: 2094 zAAP: No  zIIP: No
* CPU 3   Serial: 019E7C  Version: 00  Model: 2094 zAAP: No  zIIP: No
* CPU 4   Serial: 019E7C  Version: 00  Model: 2094 zAAP: No  zIIP: No
* CPU 5   Serial: 019E7C  Version: 00  Model: 2094 zAAP: No  zIIP: Yes
*
         STRING64 '  On-line Processors:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         LH    R3,CVTMAXMP             Max CPU - 1               RS0709
         AHI   R3,1                                              RS0709
         STRING64 '    Max CPU :',((R3),,R3B),INTO=LINE          RS0709
         AIF   (NOT D'CVTH7750).HARDW0   z/OS R10 ? No           RS0709
         TM    HBB7750,L'HBB7750       running on z/OS R10       RS0709
         JZ    HARDW0                   no, leave                RS0709
         L     R4,CVTECVT              ECVT                      RS0709
         USING ECVT,R4                                           RS0709
         STRING64 '    Max CPU :',((R3),,R3B),                   RS0709X
               ' CPU HWM :',(ECVT_Installed_CPU_HWM,H,R3B),INTO=LINE
         DROP  R4                                                RS0709
.HARDW0  ANOP                                                    RS0709
HARDW0   DS    0H                                                RS0709
         BRASL R14,SPACE2              Double Space              RS0905
         SLR   R6,R6                   NUMBER OF CPU'S ON-LINE
*        MVC   WKCELL2,BLANKS          model code                RS0506
         L     R7,CVTPCCAT             PCCA VECTOR TABLE
         LH    R3,CVTMAXMP             Max number of CPU's-1     RS0709
         AHI   R3,1                    +1                        RS0709
*        #SNAP ADDR=WKCELL1,LENGTH=8      debug code
*        LHI   R3,16                   16 IS THE MAX NUMBER OF CPU'S
*        TM    HBB7709,L'HBB7709       running on z/OS R6        RS0904
*        JZ    HARDW1                   no, leave                RS0904
*        LHI   R3,64                   64 is the max # of CPU'S  RS0904
*LOOP
HARDW1   ICM   R4,B'1111',0(R7)        PCCA
         JZ    HARDW4                  This CPU is not actice    RS0509
         USING PCCA,R4
         LA    R0,2                    EBCDIC VERSION CODE (2 BYTES)
         MVC   WKCELL1,=C'No '         zAAP No                   RS0405
         TM    PCCAATTR,B'00000001'    zAAP CPU ?                RS0405
         JNO   HARDW2                    no leave                RS0405
         MVC   WKCELL1,=C'Yes'         zAAP Yes                  RS0405
HARDW2   DS    0H                                                RS0605
         MVC   WKCELL2,=C'No '         zIIP No                   RS0706
         TM    PCCAATTR,B'00000100'    zIIP CPU ?                RS0706
         JNO   HARDW2_1                  no leave                RS0706
         MVC   WKCELL2,=C'Yes'         zIIP Yes                  RS0706
HARDW2_1 DS    0H                                                RS0706
         MVC   WKCELL3,=C'No '         WLM No                    RS0605
         TM    PCCARCFF,B'10000000'    CPU WLM managed           RS0605
         JNO   HARDW2_2                  no leave                RS0605
         MVC   WKCELL3,=C'Yes'         WLM Yes                   RS0605
HARDW2_2 DS    0H                                                RS0506
*HARDW2_1 LA    R1,PCCACPID             EBCDIC VERSION CODE (2 BYTES)
*        LA    R15,STIDP_VERSION       output area
*        BRASL R14,X2B                 convert hex digits to binary
*        IC    R0,STIDP_VERSION        version code (binary)
*        BRASL R14,HARDCPU             convert 9021-C4 to 9021-941
         STRING64 '    CPU ',(PCCACPUA,H,L3),                    RS1110X
               '  Serial: ',(PCCACPID+2,6),                            X
               '  Version: ',(PCCACPID+0,2),                           X
               '  Model: ',(PCCACPID+8,4),                             X
               ' zAAP: ',(WKCELL1,3),                            RS0605X
               ' zIIP: ',(WKCELL2,3),                            RS0706X
               ' WLM: ',(WKCELL3,3),                             RS0605X
               INTO=LINE
         TM    PCCAATTR,B'00000001'    zAAP CPU ?                RS0405
         JO    HARDW3                    yes, don't count        RS0405
         TM    PCCAATTR,B'00000100'    zIIP CPU ?                RS0706
         JO    HARDW3                    yes, don't count        RS0706
         LA    R6,1(,R6)               COUNT ON-LINE CPU'S
HARDW3   BRASL R14,SPACE1          <== next line                 RS0405
HARDW4   LA    R7,4(,R7)               BUMP PCCAT PTR
         LTR   R7,R7                                             RS0709
         JZ    HARDW4E                                           RS0709
         JCT   R3,HARDW1
*ENDLOOP
HARDW4E  DS    0H                                                RS0709
         ST    R6,WKCELL3              keep # of CPU for later   RS0101
         BRASL R14,BLANK1              BLANK LINE
         LOAD  EP=CSRSI                                          RS1000
         ST    R0,BPX_MOD              Save EP address           RS1000
         STRING64 '  CSRSI',' Info',INTO=LINE                    RS1000
         BRASL R14,SPACE2              Double Space              RS1000
         LHI   R2,SIV1V2V3_LEN         length of dynamic storage RS1000
*                                                                RS1000
*        Allocate an answer area                                 RS1000
*                                                                RS1000
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS1000
         JO    HARDW4_1                yes, jump                 RS1000
         GETMAIN RU,LV=(R2),BNDRY=PAGE allocate PATH work area   RS1000
         J     HARDW4_2                                          RS1000
HARDW4_1 DS    0H                                                RS1000
         LA    R1,1                    LOC=ANY                   RS1000
         LR    R0,R2                   Length of storage         RS1000
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
HARDW4_2 DS    0H                                                RS1000
         LR    R3,R1                   where did we find it      RS1000
         LHI   R2,SIV1V2V3_LEN         length of dynamic storage RS1000
         STM   R1,R2,GETMAIN_LEN_ADDR  save addr and length      RS1000
         USING SIV1V2V3,R3             tell assembly             RS1000
         L     R15,BPX_MOD             Load CSRSI                RS1000
         CALL  (15),(=F'7',=A(SIV1V2V3_LEN),SIV1V2V3,LRETCODE),        X
               VL,MF=(E,WORK256)       call the CSRSI service    RS1000
         CLC   LRETCODE,=A(CSRSI_STSINOTAVAILABLE) Available     RS1000
         JH    HARDW4_E                             no, higher rcRS1000
         USING SI00,R3                 tell assembly             RS1000
         STRING64 '    PCCACPID :',SI00PCCACPID,                       X
               ' PCCACPUA :',SI00PCCACPUA,                             X
               ' PCCACAFM :',SI00PCCACAFM,                             X
               ' CSRSR-FLG :',(SI00VALIDITYFLAGS,1,X),                 X
               INTO=LINE                                         RS1000
         TR    LINE,TRTPRINT           get rid of garbage        RS1000
         BRASL R14,SPACE2                       Double Space     RS1000
         CLC   LRETCODE,=A(CSRSI_STSINOTAVAILABLE) STSI availableRS1000
         JE    HARDW4_9                         no, no more info RS1000
         MVC   WKCELL1(1),SI00VALIDITYFLAGS     keep it for laterRS1000
         LA    R3,L'SIV1V2V3SI00(R3)   point to the next area    RS1000
         TM    WKCELL1,SI00VALIDSI11V1 Check if info present     RS1000
         JZ    HARDW4_3                  no, jump to next area   RS1000
         USING SI11V1,R3                                         RS1000
*        #SNAP ADDR=(R3),LENGTH=200      debug code              RS1000
         STRING64 '    Type(',(SI11V1CPCTYPE,,T), 9672                 X
               ') Model(',(SI11V1CPCMODEL,,T),   R16                   X
               ') Manufacturer(',(SI11V1CPCMANUFACTURER,,T), IBM       X
               ') Plant(',(SI11V1CPCPLANTOFMANUFACTURE,,T),  83        X
               ') Seqno(',(SI11V1CPCSEQUENCECODE,,T),')',              X
               INTO=LINE                                         RS1000
         BRASL R14,SPACE2              Double Space              RS1000
HARDW4_3 DS    0H                                                RS1000
         AHI   R3,SI22V1_LEN           Offset of next area       RS0601
         TM    WKCELL1,SI00VALIDSI22V1 Check if info present     RS1000
         JZ    HARDW4_6                  no, jump to next area   RS1000
         USING SI22V1,R3               Tell assembly             RS1000
         STRING64 '    CPU Info :',                              RS1000X
               INTO=LINE                                         RS1000
         BRASL R14,SPACE1              Single space              RS1000
         STRING64 6X,'Total: ',(SI22V1TOTALCPUCOUNT,H,R3B),5X,         X
               ' Configured: ',(SI22V1CONFIGUREDCPUCOUNT,H,R3B),       X
               ' Standby: ',(SI22V1STANDBYCPUCOUNT,H,R3B),             X
               ' Reserv.: ',(SI22V1RESERVEDCPUCOUNT,H,R3B),            X
               ' Capability: ',(SI22V1CPUCAPABILITY,F,R9B),            X
               INTO=LINE                                         RS1000
         BRASL R14,SPACE1              Single Space              RS1000
         AIF   (NOT D'CVTH7730).HARDW4_31 z/OS R8?               RS0207
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS0207
         JZ    HARDW4_31               no, jump and display      RS0207
         STRING64 64X,' Secondary: ',                                  X
               (SI22V1SECONDARYCPUCAPABILITY,F,R9B),                   X
               INTO=LINE                                         RS0207
         BRASL R14,SPACE1              Single Space              RS0207
.HARDW4_31 ANOP                                                  RS0207
HARDW4_31 DS    0H                                               RS0207
         LA    R4,SI22V1MPCPUCAPABILITYAF  Point to factor table RS0207
         STRING64 '      Adjustment Factor:',                          X
               INTO=LINE                                         RS1000
         BRASL R14,SPACE1              Single Space              RS1000
         MVC   LINE(4),BLANKS          blank out next line       RS1000
         LA    R5,LINE+4               first entry               RS1000
         LA    R6,5                    length of each display entry1000
         LA    R7,LINE+90              end of line               RS1000
*Loop                                                            RS1000
HARDW4_4 DS    0H                                                RS1000
         STRING64 ' ',((R4),H,R3B),'%',INTO=((R5),(R6))          RS1000
         BRXLE R5,R6,HARDW4_5          this line full?           RS1000
         TR    LINE,TRTPRINT           get rid of garbage        RS1000
         BRASL R14,SPACE1              Single space              RS1000
         MVC   LINE(4),BLANKS          blank out next line       RS1000
         LA    R5,LINE+4               first entry               RS1000
         LA    R7,LINE+90              end of line               RS1002
HARDW4_5 DS    0H                                                RS1000
         LA    R4,L'SI22V1MPCPUCAPABILITYAF(R4) next entry       RS1000
         CLC   0(2,R4),=H'0'           end of list ?             RS0301
         JNE   HARDW4_4                  no                      RS0105
*Endloop                                                         RS1000
         TR    LINE,TRTPRINT           get rid of garbage        RS1000
         BRASL R14,SPACE1              Single space              RS1000
HARDW4_6 DS    0H                                                RS1000
         AHI   R3,SI22V2_LEN           Offset of next area       RS0601
         TM    WKCELL1,SI00VALIDSI22V2 Check if info present     RS1000
         JZ    HARDW4_7                  no, leave               RS1000
         USING SI22V2,R3               tell assembly             RS1000
*        #SNAP ADDR=(R3),LENGTH=200    debug code                RS1000
         STRING64 4X,'CPC Number: ',(SI22V2CPCNUMBER,H,R3B), '         X
               INTO=LINE                                         RS1000
         BRASL R14,SPACE1                                        RS1000
         STRING64 6X,'Total: ',(SI22V2TOTALLCPUCOUNT,H,R3B),5X,        X
               ' Configured: ',(SI22V2CONFIGUREDLCPUCOUNT,H,R3B),      X
               ' Standby: ',(SI22V2STANDBYLCPUCOUNT,H,R3B),            X
               ' Reserv.   : ',(SI22V2RESERVEDLCPUCOUNT,H,R3B),        X
               INTO=LINE                                         RS1000
         BRASL R14,SPACE1                                        RS1000
         STRING64 6X,'LPAR : ',SI22V2CPCNAME,                          X
               ' Dedicate  : ',(SI22V2DEDICATEDLCPUCOUNT,H,R3B),       X
               ' Shared : ',(SI22V2SHAREDLCPUCOUNT,H,R3B),             X
               ' Capability: ',(SI22V2CPCCAPABILITYAF,F,R9B),          X
               INTO=LINE                                         RS1000
         BRASL R14,SPACE2                                        RS1000
HARDW4_7 DS    0H                                                RS1000
         AHI   R3,SI22V3_LEN           Offset of next area       RS0601
         TM    WKCELL1,SI00VALIDSI22V3 Check if VM info present  RS1000
         JZ    HARDW4_9                  no, leave               RS1000
         USING SI22V3,R3                                         RS1000
         SR    R5,R5                   clear R5                  RS1000
         IC    R5,SI22V3DBCOUNTFIELD   load counter              RS1000
         LTR   R5,R5                   is this zero              RS1000
         JZ    HARDW4_9                  yes, leave              RS1000
         STRING64 '    VM Info :',     not tested on my system         X
               INTO=LINE                                         RS1000
         BRASL R14,SPACE1              Single space              RS1006
         LA    R4,SI22V3DBS                                      RS1000
         USING SI22V3DB,R4                                       RS1000
         STRING64 '    Total ','Config. ','Standby ','Reserv.',        X
               ' CpName ','   AF% ','HP-Identifier',INTO=LINE
         BRASL R14,SPACE1              Double space              RS1000
*loop                                                            RS1000
HARDW4_8 DS    0H                                                RS1000
         STRING64 6X,(SI22V3DBTOTALLCPUCOUNT,H,R3B),                   X
               5X,(SI22V3DBCONFIGUREDLCPUCOUNT,H,R3B),                 X
               5X,(SI22V3DBSTANDBYLCPUCOUNT,H,R3B),                    X
               5X,(SI22V3DBRESERVEDLCPUCOUNT,H,R3B),                   X
               1X,SI22V3DBCPCNAME,                                     X
               1X,(SI22V3DBCPCCAF,H,R3B),'%',                          X
               1X,SI22V3DBVMHPIDENTIFIER,                              X
               INTO=LINE                                         RS1000
         BRASL R14,SPACE1              Single space              RS1000
         LA    R4,SI22V3DB_LEN(,R4)     next entry               RS1000
         JCT   R5,HARDW4_8              Do until                 RS1000
*endloop                                                         RS1000
         J     HARDW4_9                 leave                    RS1000
HARDW4_E DS    0H                       Bad rc from CSRSI        RS1000
         CLC   LRETCODE,=A(CSRSI_STSINOTAVAILABLE) Available     RS1000
         JNE   HARDW4_E1                            no, higher rcRS1000
         STRING64 '  CSRSI',' not',' active',INTO=LINE the dflt  RS1000
         BRASL R14,SPACE1              Single space              RS1000
         J     HARDW4_9                 leave                    RS1000
HARDW4_E1 DS    0H                       Bad rc from CSRSI       RS1000
         STRING64 '  CSRSI',9X,'RC: ',(LRETCODE,,X),                   X
               INTO=LINE                                         RS1000
         BRASL R14,SPACE1              Single space              RS1000
HARDW4_9 DS    0H                                                RS1000
         BRASL R14,BLANK1              empty line                RS1000
         LM    R1,R2,GETMAIN_LEN_ADDR  save addr and length      RS1000
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS1000
         JO    HARDW4_10               yes, jump                 RS1000
         FREEMAIN RU,LV=(R2),A=(R1)    free getmained work area  RS1000
         J     HARD20                  jump to next display      RS1000
HARDW4_10 DS    0H                                               RS1000
         LR    R0,R2                   length for FREEMAIN       RS1000
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
         DROP  R3,R4                                             RS1000
.HARD20  ANOP                                                    RS1000
*
*        Service units per second (using RMCTADJC)
*
*        Source: IRARMCPU module in SYS1.NUCLEUS(IEAVNP10)
*
HARD20   L     R6,WKCELL3              restore CPU no            RS0101
         L     R3,=F'16000000'         16,000,000
         M     R2,=F'10000'            10K
         L     R14,CVTOPCTP            RESOURCE MANAGER CONTROL TABLE
         D     R2,RMCTADJC-RMCT(,R14)  adjustment factor for CPU
         CVD   R3,WKCELL3              R3=SU*10000
         MVC   WORK256(11),=X'4020202020214B20202020' 99999.9999
         ED    WORK256(11),WKCELL3+3   EDIT
         STRING64 '  This system can deliver',(WORK256,11),            X
               ' service units per second',                            X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
* MIPS = (SU/sec / 48.5) * CPUno    (From T. Falissard's MIPSMVS exec)
         SLR   R2,R2
         D     R2,=F'485'              MIPS=SU/48.5
         MR    R2,R6                   mult by num of CPUs
         CVD   R3,WKCELL3              R3=MIPS*1000
         MVC   WORK256(9),=X'40202020214B202020' 9999.999
         ED    WORK256(9),WKCELL3+4
         STRING64 '  SRM MIPS:',(WORK256,9),'  (SU/sec) / 48.5',       X
               ' No of CPU: ',((R6),,L),' zAAP/zIIP excl.',      RS0405X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
* SYSEVENT QVS                                                   RS1002
         LA    R1,WORK256                                        RS1002
         LA    R4,WORK256                                        RS1002
         USING QVS,R4                                            RS1002
         MVC   QVSLEN,QVS_LEN
         SYSEVENT QVS                                            RS1002
*        #SNAP ADDR=WORK256,LENGTH=96       DEBUG                RS0405
         STRING64 '  MSU QVS: ',' At least no CEC value',INTO=LINE
         TM    QVSFLAGS,QVSCECVALID    CEC data available?       RS1002
         JZ    HARD21                    no                      RS1002
         STRING64 '  MSU QVS: ',                                       X
               ' CEC: ',(QVSCECCAPACITY,F,L9B),INTO=LINE         RS1002
         TM    QVSFLAGS,QVSIMGVALID    IMG data available?       RS1002
         JZ    HARD21                    no                      RS1002
         STRING64 (LINE,,T),                                           X
               ' IMG: ',(QVSIMGCAPACITY,F,L9B),INTO=LINE         RS1002
         TM    QVSFLAGS,QVSVMVALID     VM data available?        RS1002
         JZ    HARD21                    no                      RS1002
         STRING64 (LINE,,T),                                           X
               ' VM: ',(QVSVMCAPACITY,F,L9B),INTO=LINE           RS1002
HARD21   DS    0H                                                RS1002
         BRASL R14,SPACE2              Double Space              RS1002
         DROP  R4                                                RS0704
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?          RS0704
         JNO   HARD23                  no, exit                  RS0704
         BRASL R14,WORKADDR            LOCATE WORK AREA          RS0704
         LR    R5,R1                   save addr                 RS0704
         USING LPDATMAP,R5                                       RS0704
         PGSER R,FIX,A=LPDATMAP,EA=LPDATMAP+4095,ECB=0           RS0704
         LR    R1,R5                   Set parm                  RS0704
         SYSEVENT REQLPDAT             first time detect length  RS0704
         LTR   R15,R15                 should be RC=4            RS0704
         JZ    HARD22                     if zero ok             RS0704
         SYSEVENT REQLPDAT             again with correct length RS0704
HARD22   DS    0H                                                RS0704
         PGSER R,FREE,A=LPDATMAP,EA=LPDATMAP+4095,ECB=0 fixed    RS0704
*        #SNAP ADDR=LPDATMAP,LENGTH=512 Debug                    RS0704
         STRING64 '  REQLPDAT: ','Flags: ',(LPDATFLAGS,1,X),     RS0704X
               INTO=LINE                                         RS0704
         LA    R4,LINE+2(R15)          point past text           RS0704
        #STATUS LPDATFLAGS,LPDATDEFCAPSET,'Defined capacity'     RS0704
        #STATUS LPDATFLAGS,LPDATDEFCAPDATAVALID,'Capdata valid'  RS0704
         BRASL R14,SPACE1              Single Space              RS0905
         STRING64 12X,'CEC-Capacity: ',(LPDATCECCAPACITY,F,R9B),       X
               INTO=LINE                                         RS0704
         BRASL R14,SPACE1              Single Space              RS0905
         STRING64 12X,'LPAR        : ',LPDATIMGLOGICALPARTITIONNAME,   X
               '  Capacity    : ',(LPDATIMGCAPACITY,F,R9B),            X
               INTO=LINE                                         RS0704
*        LPAR can be low value                                   RS0506
         TR    LINE,TRTPRINT           get rid of garbage        RS0506
         BRASL R14,SPACE1              Single Space              RS0905
         STRING64 12X,'Factor      : ',(LPDATPHYCPUADJFACTOR,F,R9B),   X
               INTO=LINE                                         RS0704
         BRASL R14,SPACE1              Single Space              RS0905
         STRING64 12X,'Weight      : ',(LPDATCUMWEIGHT,F,R9B),         X
               ' # weight acc: ',(LPDATWEIGHTACCUMCOUNTER,F,R9B),      X
               INTO=LINE                                         RS0704
         BRASL R14,SPACE1              Single Space              RS0905
         TM    LPDATFLAGS,LPDATDEFCAPDATAVALID                   RS0704
         JZ    HARD22_9                no leave                  RS1104
         STRING64 12X,'Service     : ',(LPDATAVGIMGSERVICE,F,R9B),     X
               INTO=LINE                                         RS0704
         BRASL R14,SPACE1              Single Space              RS0905
         STRING64 12X,'Time uncap  : ',                                X
               (LPDATCUMUNCAPPEDELAPSEDTIME,F,R9B),                    X
               ' capped      : ',(LPDATCUMCAPPEDELAPSEDTIME,F,R9B),    X
               INTO=LINE                                         RS0704
         BRASL R14,SPACE1              Single line               RS0506
HARD22_9 DS    0H                                                RS1104
         BRASL R14,BLANK1              Single Space              RS0506
         DROP  R5                                                RS0704
HARD23   DS    0H                                                RS0704
         L     R4,CVTOPCTP             RMCT                      RS0507
         L     R5,RMCTRCT-RMCT(,R4)    RCT                       RS0507
         USING RCT,R5                  IRARCT                    RS0507
         STRING64 '  The MSU capacity for this CEC is:',               X
               (RCTCECWU,F,R9B),INTO=LINE                        RS0507
         BRASL R14,SPACE1              Single Space              RS0507
         STRING64 '  The defined MSU capacity for this LPAR is:',      X
               (RCTIMGWU,F,R9B),INTO=LINE                        RS0507
         BRASL R14,SPACE1              Single Space              RS0507
         STRING64 '.CPU%',INTO=LINE    Place-holder for RDRTNE   RS0507
         BRASL R14,SPACE2              Single Space              RS0507
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED           RS0507
*
*        Place holder for processor speed (filled in by sub-task)
*
         LA    R5,LINE                 Addr of current line
         STM   R5,R6,CPUONLINE         save them for the sub-task
         BRASL R14,SPACE2              Double Space
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
*
*        Display CVTFLAGS (misc hardware features)
*
         STRING64 '  CVTFLAGS: ',(CVTFLAG1,,X),1X,(CVTFLAGS+1,1,X),    X
               1X,(CVTFLAGS+2,1,X),1X,(CVTFLAGS+3,1,X),                X
               INTO=LINE
         LA    R4,LINE+2(R15)          POINT PAST TEXT
        #STATUS CVTFLAG1,CVTRSMWD,'RSMWD'
        #STATUS CVTFLAG1,CVTSVPRC,'SVPRC'
        #STATUS CVTFLAG1,CVTCUSE,'CUSE'
        #STATUS CVTFLAG1,CVTMVPG,'MVPG'
        #STATUS CVTFLAG1,CVTOVER,'OVER'
        #STATUS CVTFLAG1,CVTCSTR,'CSTR'
        #STATUS CVTFLAG2,CVTCMPSC,'CMPSC'
        #STATUS CVTFLAG2,CVTCMPSH,'CMPSH'
        #STATUS CVTFLAG2,CVTSOPF,'SOPF'
        #STATUS CVTFLAG2,CVTBFPH,'BFPH'                          JM1199
        #STATUS CVTFLAG2,CVTPER2,'PER2'                          JM1199
        #STATUS CVTFLAG2,CVTIQD,'IQD'                            RS0203
         AIF    (NOT D'CVTALR).ALRFX    z/OS 1.6                 RS1104
         #STATUS CVTFLAG2,CVTALR,'ALRF' ASN/LX Reuse Facility    RS1104
.ALRFX   ANOP ,                                                  RS1104
         AIF    (NOT D'CVTEDAT).ALEDAT  z/OS 1.9                 RS0808
         #STATUS CVTFLAG2,CVTEDAT,'LP'  Large Page Support       RS0808
.ALEDAT  ANOP ,                                                  RS1104
         TM    CVTFLAG2,CVTBFPH        hardware installed        JM1199
         JO    HARD24                  yes                       JM1199
         TM    CVTOSLV2,CVTBFP         BFP support available     JM1199
         JNO   HARD24                  no, jump                  JM1199
         BRASL R14,SPACE2              Double Space              JM1199
         STRING64 '  Binary Floating Point support is simulated',      X
               INTO=LINE                                         JM1199
HARD24   DS    0H                                                JM1199
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?          RS0203
         JZ    HARD25                  no jump                   RS0203
         BRASL R14,SPACE2                                        RS0203
         STCTL R0,R15,WORK256          Store CR0-CR15            RS0203
         STRING64 '  Control Register:',INTO=LINE                RS0203
         BRASL R14,SPACE2                                        RS0203
         STRING64 4X,'0-3 ',(WORK256,4,X),1X,(WORK256+4,4,X),    RS0203X
               1X,(WORK256+8,4,X),1X,(WORK256+12,4,X),           RS0203X
               '  4-7 ',(WORK256+16,4,X),1X,(WORK256+20,4,X),    RS0203X
               1X,(WORK256+24,4,X),1X,(WORK256+28,4,X),INTO=LINE RS0203
         BRASL R14,SPACE1          <== next line                 RS0203
         STRING64 4X,'8-B ',(WORK256+32,4,X),1X,(WORK256+36,4,X),      X
               1X,(WORK256+40,4,X),1X,(WORK256+44,4,X),          RS0203X
               '  C-F ',(WORK256+48,4,X),1X,(WORK256+52,4,X),    RS0203X
               1X,(WORK256+56,4,X),1X,(WORK256+60,4,X),INTO=LINE RS0203
HARD25   DS    0H                                                RS0302
         BRASL R14,SPACE2                                        JM0702
         STRING64 '  Execution Mode: ','31-bit',INTO=LINE        JM0702
         CLI   FLCARCH,0               running ALS-2 ?           RS0105
         JE    HARD25X1                no                        RS0105
         OI    ARCHLVL2,L'ARCHLVL2     keep it for later         RS1002
         STRING64 '  Execution Mode: ','64-bit',INTO=LINE        JM0702
HARD25X1 DS    0H                                                RS1000
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?          RS0800
         JZ    HARD25Y                 no jump                   RS0800
         BRASL R14,SPACE2              Double Space              RS0800
         STRING64 '  ADMF (Async Data Mover) ',' not ','active',       X
               INTO=LINE
         IOSADMF AQUERY,CROSSOVER=WKCELL1,RETCODE=LRETCODE,            X
               RSNCODE=LRSNCODE,MF=(E,WORK256)                   RS0800
         LTR   R15,R15                                           RS0800
         JNZ   HARD25Y                                           RS0800
         STRING64 '  ADMF (Async Data Mover) ','active',' Crossover: ',X
               (WKCELL1,4,X),INTO=LINE                           RS0800
HARD25Y  DS    0H                                                JM0701
         BRASL R14,SPACE2              Double Space
*
*        REAL STORAGE
*
         CLI   FLCARCH,0               running ALS-2 ?           RS0105
         JE    HARD26B                 no                        RS0105
         ICM   R4,B'1111',CVTSCPIN     Service Call Control BlockRS1100
         JZ    HARD26B                 no, jump                  RS1100
         AIF   (NOT D'CVTZOS_V1R10).HARD25Z                     RS0410
         TM    HBB7750,L'HBB7750       running on z/OS R10       RS0410
         JZ    HARD25Z                  yes, leave               RS0410
         L     R5,CVTECVT              ECVT                      RS0410
         USING ECVT,R5                 IHAECVT                   RS0410
         ICM   R4,B'1111',ECVTSCPIN    SCP active                RS0410
         JZ    HARD26B                 no, jump                  RS0410
.HARD25Z ANOP ,                                                  RS0410
HARD25Z  DS    0H                                                RS1100
         USING SCCB,R4                                           RS1100
*        SR    R2,R2                   Clear R2                  RS1100
*        IC    R2,SCCBSAI              Increment counter         RS1100
*        MH    R2,SCCBSAR              * base                    RS1100
*        CLC   SCCBSAI,=H'0'           Is this zero              RS1100
*        JNE   HARD26A                   no, use this
*        ICM   R2,B'1111',SCCBSAIX     Use SCCBSAIX instead      RS0908
*        JZ    HARD26B                   if zero leave           RS0908
*        MH    R2,SCCBSAR              * base                    RS0908
HARD26A  DS    0H                                                RS1100
*        #SNAP ADDR=CVTRLSTG,LENGTH=4   debug code
*        #SNAP ADDR=SCCBSAR,LENGTH=2   debug code
*        #SNAP ADDR=SCCBSAI,LENGTH=1   debug code
*        #SNAP ADDR=SCCBSAIX,LENGTH=4   debug code
         STRING64 '  Online Real Storage (at IPL): ',                  X
               (CVTRLSTG,F,L),'K',                                     X
               ' Increment:',(SCCBSAR,FL2,L5B),                        X
               ' Base: ',(SCCBSAI,FL1,R3B),'M/ ',                      X
               (SCCBSAIX,F,R9B),'M',INTO=LINE                    RS0908
         BRASL R14,SPACE1              Single Space              RS0908
         L     R5,CVTECVT              ECVT                      RS0908
         USING ECVT,R5                                           RS0908
         LG    R0,ECVTEORM                                       RS0908
         AGF   R0,=F'1'                                          RS0609
         STG   R0,WKCELL1                                        RS0908
*        #SNAP ADDR=ECVTEORM,LENGTH=8  debug code
         B2MGTP WKCELL1,WORK256+16,WKCELL2                       RS0908
         STRING64 '  Potential real high storage : ',            RS0908X
               (WORK256+16,P,R4B),(WKCELL2,1),                   RS0908X
               INTO=LINE                                         RS0908
         BRASL R14,SPACE1              Single Space              RS0908
         STRING64 '  Difference is reconfigurable',              RS0908X
               INTO=LINE                                         RS0908
         BRASL R14,SPACE1          <== next line                 RS1209
         L     R4,CVTRCEP              RSM CTL & ENUM AREA       RS1209
         USING RCE,R4                  IARRCE                    RS1209
         STRING64 '  Dead Zone above the Bar is ','useable',     RS1209X
               INTO=LINE                                         RS1209
*        TM    RCEFLAGS,RCEUSE2GTO32GAREAOK                      RS1209
         TM    RCEFLAGS,X'02'                                    RS1209
         JZ    HARD26AA                                          RS1209
         STRING64 '  Dead Zone above the Bar is ','not ','useable',    X
               INTO=LINE
HARD26AA DS 0H                                                   RS1209
         BRASL R14,SPACE2              Double Space
         J     HARD30
         DROP  R4                                                RS1100
.HARD26B ANOP                                                    RS1100
HARD26B  DS    0H                                                RS1100
         LA    R1,0001
         AL    R1,CVTEORM              HI-ADDR
         SRL   R1,0010                 GET IT IN "K"
         STRING64 '  On-line Real Storage: ',(CVTRLSTG,F,L),'K',       X
               '   Highest Real Storage Address: ',((R1),,L),'K',      X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R3,CVTRCEP              RSM CTL & ENUM AREA
         L     R4,RCEESPL-RCE(,R3)     # OF Expanded STORAGE FRAMES
         SLL   R4,2                    CHANGE TO "K"
         STRING64 '      Expanded Storage: ',((R4),,L),'K',INTO=LINE
         BRASL R14,SPACE2              Double Space
*
*        Service Processor Data: IPLPARM and HSA
*
HARD30   DS    0H                      Service Call Control Block
         ICM   R5,B'1111',CVTSCPIN     Service Call Control BlockRS1100
         JZ    HARD39                  no, jump                  RS1100
         STRING64 '  Service Processor Data IPL:',INTO=LINE      RS0410
         AIF   (NOT D'CVTZOS_V1R10).HARD31                       RS0410
         TM    HBB7750,L'HBB7750       running on z/OS R10       RS0410
         JZ    HARD31                   yes, leave               RS0410
         L     R5,CVTECVT              ECVT                      RS0410
         USING ECVT,R5                 IHAECVT                   RS0410
         ICM   R5,B'1111',ECVTSCPIN    SCP active                RS0410
         JZ    HARD39                  no, jump                  RS0410
         STRING64 '  Service Processor Data active:',INTO=LINE RS0410
.HARD31  ANOP ,                                                  RS0410
HARD31   DS    0H                                                RS0410
         USING SCCB,R5
         BRASL R14,SPACE2              double space
         LA    R1,=C'No '              LPAR=NO
         TM    SCCBCON1,SCCBBFY        running under PR/SM?
         JNO   *+8                     no, jump
         LA    R1,=C'Yes'              LPAR=YES
         LA    R2,=C'Yes'              ETR=YES                 JWMJUN95
         ICM   R0,B'1111',SCCBETR      ETR installed ?         JWMJUN95
         JNZ   *+8                     No                      JWMJUN95
         LA    R2,=C'No '              ETR=NO                  JWMJUN95
         ANOP
         STRING64 4X,'LOADPARM: ',                                     X
               (SCCBPARM+0,4),1X,      addr of SYS1.IPLPARM            X
               (SCCBPARM+4,2),1X,      xx of LOADxx                    X
               (SCCBPARM+6,1),1X,      Message option   M P A          X
               (SCCBPARM+7,1),         NUC-ID                          X
               '    LPAR: ',((R1),3),  LPAR mode YES/NO                X
               '    ETR installed:  ',((R2),3),                JWMJUN95X
               INTO=LINE
         BRASL R14,SPACE2              double space
*
*        Hardware Storage Areas (HSA)
*
         LH    R2,SCCBNHSA             number of HSA's
         LTR   R2,R2                   any HSA used in this system?
         JZ    HARD39                  no, jump
         LH    R3,SCCBOHSA             offset to first HSA
         LA    R3,SCCB(R3)             change offset to address
         USING SCCBHSA,R3
         SLR   R4,R4                   HSA seqno
*loop
HARD36   LH    R1,SCCBHSSZ             HSA size (in 4K pages)
         SLL   R1,2                    make it in K
         STRING64 12X,'HSA number: ',((R4),,R3B),                      X
               '    HSA size: ',((R1),,R5B),'K',                       X
               '    HSA Address: ',(SCCBAHSA,,X),                      X
               INTO=LINE
         BRASL R14,SPACE1              single space
         LA    R3,6(,R3)               next HSA entry
         LA    R4,1(,R4)               bump up seq no
         JCT   R2,HARD36               print next HSA
*endloop
         BRASL R14,BLANK1              double space
HARD39   EQU   *
         DROP  R5,R3                   SCCB,SCCBHSA
*
*        I/O Configuration data
*
         L     R5,CVTIXAVL             IOS COMM AREA             RS1205
         L     R4,IOCOMWPT-IOCOM(,R5)  IOS COMM Area writeable   RS0806
         USING IOCOMW,R4                                         RS0806
         L     R6,IOCIOVTP-IOCOM(,R5)  IOS Vector Table          RS1205
         USING IOVT,R6                                           RS1205
         L     R7,IOVTCDA              Config Data area          RS1205
         USING CDA,R7                                            RS1205
*        CLC   =C'CDA ',CDACDA         is this a CDA?            RS1004
*        JNE   HARD49                  no, exit                  RS1004
HARD40   STRING64 '  I/O Configuration Data:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         AIF   (NOT D'CVTH7707).HARD41    z/OS R4?               RS0806
         TM    HBB7707,L'HBB7707       running on z/OS R4        RS0806
         JZ    HARD41                  no, jump and display      RS0806
         LA    R1,=C'No '              NO                        RS0806
*        TM    IOCFLAG2,IOCGDPSHSWAP2  GDPS Hyperswap II?        RS0806
         TM    IOCFLAG2,X'08'          GDPS Hyperswap II?        RS0806
         JNO   *+8                     no, jump                  RS0806
         LA    R1,=C'Yes'              YES                       RS0806
         STRING64 '    GDPS Hyperswap II : ',((R1),3),INTO=LINE  RS0806
         BRASL R14,SPACE1              single space              RS0806
         AIF   (NOT D'CVTH7709).HARD41    z/OS R6?               RS0407
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS0407
         JZ    HARD41                  no, jump and display      RS0407
         LA    R1,=C'No '              NO                        RS0407
         TM    IOVTFLG1,IOVTMIDAW      MIDAW ??                  RS0407
         JNO   *+8                     no, jump                  RS0407
         LA    R1,=C'Yes'              YES                       RS0407
         STRING64 '    MIDAW             : ',((R1),3),INTO=LINE  RS0407
         BRASL R14,SPACE1              single space              RS0407
         AIF   (NOT D'CVTH7730).HARD41    z/OS R8?               RS0207
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS0207
         JZ    HARD41                  no, jump and display      RS0207
         LA    R1,=C'No '              NO                        RS0207
*        TM    IOCFLAG4,IOCHPAV        Hyperpav=YES              RS0207
         TM    IOCFLAG4,X'80'          Hyperpav                  RS0207
         JNO   *+8                     no, jump                  RS0207
         LA    R1,=C'Yes'              YES                       RS0207
         STRING64 '    Hyperpav          : ',((R1),3),INTO=LINE  RS0207
         BRASL R14,SPACE1              single space              RS0207
         LA    R1,=C'No '              NO                        RS0908
*        TM    IOCFLAG4,IOCHPBO        Hyperpav=BASEONLY         RS0908
         TM    IOCFLAG4,X'40'          Hyperpav                  RS0908
         JNO   *+8                     no, jump                  RS0908
         LA    R1,=C'Yes'              YES                       RS0908
         STRING64 '    Hyperpav(Base)    : ',((R1),3),INTO=LINE  RS0908
         BRASL R14,SPACE1              single space              RS0908
         LA    R1,=C'No '              NO                        RS1106
*        TM    IOCFLAG3,IOCINBAND      EKM (in-band)??           RS1106
         TM    IOCFLAG3,X'04'          EKM (in-band)??           RS1106
         JNO   *+8                     no, jump                  RS1106
         LA    R1,=C'Yes'              YES                       RS1106
         STRING64 '    EKM (in-band)     : ',((R1),3),INTO=LINE  RS1106
         BRASL R14,SPACE1              single space              RS1106
.HARD41  ANOP                                                    RS0806
HARD41   DS    0H                                                RS0806
         DROP  R4                      IOCOMW                    RS0806
*        TM    CDAFLAGS,CDAINACT       HCD in use?
*        JO    HARD45                  NO, JUMP
         AIF   (NOT D'CVTH7740).HARD42   z/OS R9?                RS0209
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS0209
         JZ    HARD42                    no jump                 RS0209
         IOCINFO IOCAREA=WORK256+60,CSSID=WKCELL1,               RS1108X
               IOFACILITIES=WORK256+256,                         RS1108X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,WORK256)  RS1004
         J     HARD43                                            RS0209
.HARD42  ANOP                                                    RS0209
HARD42   DS    0H                                                RS0209
         IOCINFO IOCAREA=WORK256+60,CSSID=WKCELL1,               RS0209X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,WORK256)  RS0209
HARD43   DS    0H                                                RS0209
         CLC   LRETCODE,=F'0'          Check RC                  RS1004
         JNE   HARD45                  not zero leave            RS1004
         LA    R5,WORK256+60                                     RS1004
         USING IOSDICI,R5                                        RS1004
         STRING64 '    IODF Data Set Name: ',DICI_IODF,INTO=LINE RS1004
         BRASL R14,SPACE1              next line                 RS1004
         STRING64 '    IODF Config Id    : ',DICI_IOCID,         RS1004X
               '   Date: ',(DICI_LDATE,P,YYYY-MM-DD),            RS1004X
               '   Time: ',(DICI_LTIME,1,X),'.',                 RS1004X
               (DICI_LTIME+1,1,X),'.',(DICI_LTIME+2,1,X),        RS1004X
               INTO=LINE                                         RS1004
         BRASL R14,SPACE1              next line                 RS1004
*        STRING64 '      Update Count: ',(CDAUPDCT,H,L),INTO=LINE
*        BRASL R14,SPACE1              next line                 RS1004
         OI    WKCELL1,X'F0'           make if numeric           RS0410
         STRING64 '    CSS ID: ',(WKCELL1,1),INTO=LINE           RS1108
         BRASL R14,SPACE1              next line                 RS1108
         STRING64 '    EDT ID: ',DICI_EDT,INTO=LINE              RS1004
         BRASL R14,SPACE1              next line                 RS1004
         STRING64 '    MIF ID: ',(CDAMIFID,,X),INTO=LINE         RS1205
         BRASL R14,SPACE1              next line                 RS1205
         STRING64 '    TOKEN: Processor  : ',DICI_PROCE,         RS1004X
               '   Date: ',DICI_SDATE,                           RS1004X
               '   Time: ',DICI_STIME,                           RS1004X
               INTO=LINE                                         RS1004
         TR    LINE,TRTPRINT           get rid of garbage        RS0506
         BRASL R14,SPACE1              next line                 RS1004
         STRING64 11X,'Description: ',DICI_DESC,INTO=LINE        RS1004
         TR    LINE,TRTPRINT           get rid of garbage        RS0506
         BRASL R14,SPACE1              next line                 RS1004
         STRING64 '    Flags: ',(DICI_FLAGS,,X),INTO=LINE        RS1004
         BRASL R14,SPACE1              Single Space              RS1108
         AIF   (NOT D'CVTH7740).HARD45   z/OS R9?                RS0209
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS0209
         JZ    HARD49                    no jump                 RS0209
         LA    R5,WORK256+256                                    RS1108
         USING IOFC,R5                 IOSDIOFC                  RS1108
         STRING64 '    I/O-Facilities: MIDAW: ',INTO=LINE        RS1108
         STRING64 'n/a',INTO=(LINE+27,3)                         RS1108
         TM    IOFC_FLAG1,IOFC_MIDAW_HW  MIDAW Hardware          RS1108
         JNO   HARD44_1                no, skip                  RS1108
         STRING64 'Hardware',INTO=(LINE+27,8)                    RS1108
HARD44_1 DS    0H                                                RS1108
         STRING64 'n/a',INTO=(LINE+36,3)                         RS1108
         TM    IOFC_FLAG1,IOFC_MIDAW_SW  MIDAW Software          RS1108
         JNO   HARD44_2                no, skip                  RS1108
         STRING64 'Software',INTO=(LINE+36,8)                    RS1108
HARD44_2 DS    0H                                                RS1108
         STRING64 'zHPF: ',INTO=(LINE+45,7)                      RS1108
         STRING64 'n/a',INTO=(LINE+51,3)                         RS1108
         TM    IOFC_FLAG1,IOFC_FCX_HW    zHPF Hardware           RS1108
         JNO   HARD44_3                no, skip                  RS1108
         STRING64 'Hardware',INTO=(LINE+51,8)                    RS1108
HARD44_3 DS    0H                                                RS1108
         STRING64 'n/a',INTO=(LINE+60,3)                         RS1108
         TM    IOFC_FLAG1,IOFC_FCX_SW    zHPF Software           RS1108
         JNO   HARD44_4                no, skip                  RS1108
         STRING64 'Software',INTO=(LINE+60,8)                    RS1108
HARD44_4 DS    0H                                                RS1108
         BRASL R14,SPACE1              Double Space              RS1108
         J     HARD49                  leave                     RS1004
.HARD45  ANOP                                                    RS0209
HARD45   DS    0H                                                RS1004
         STRING64 ' IOCINFO  RC: ',(LRETCODE,,X),' RSN: ',             X
               (LRSNCODE,,X),INTO=LINE
         BRASL R14,SPACE1                                        RS1004
HARD49   DS    0H
         BRASL R14,BLANK1                                        RS0209
*
HARD99   END_PROC
         TITLE 'SHOWMVS &REL - VM Data'
*---------------------------------------------------------------------*
*                                                                     *
*VM Data                                                              *
*                                                                     *
*  VM/ESA Release 2.0, Service Level 9207  USER(MVSPROD1)             *
*                                                                     *
*  Real CPU Serial: 027506 Version: D4 Model: 9021-942                *
*                                                                     *
*---------------------------------------------------------------------*
VMDATA   BEGIN_PROC KW=VM,AUTH=YES                               RS0302
         STIDP STIDP_WORKAREA          GET CPU ID
         CLI   STIDP_VERSION,X'FF'     VM GUEST?
         JNE   VMDATA9                 NO,EXIT
         STRING64 '&TITLEPFX.VM Data:',INTO=LINE
         BRASL R14,SPACE2              Double Space
*
*        DIAG 000: Store Extended Identification
*
         PGSER R,FIX,A=WORK256,EA=WORK256+255,ECB=0 FIX PAGE
         SYSEVENT DONTSWAP             PGFIX/LRA
         LRA   R1,WORK256              LOAD REAL ADDRESS
         LA    R2,L'WORK256            length
         DIAG  R1,R2,X'0000'           store extended identification
         SYSEVENT OKSWAP               undo DONTSWAP
         PGSER R,FREE,A=WORK256,EA=WORK256+255,ECB=0 FREE PAGE
*
         LA    R3,WORK256              work area for diagnose
         USING VMDIAG,R3
         STRING64 2X,(VMPRODNO,,T),    VM/ESA                          X
               ' Release ',(VMRELS,FL1,L),'.', Release 2.              X
               (VMMODLVL,FL1,L),              Release 2.0              X
               ', Service Level ',     service level                   X
               (VMSVCLVL,H,R4Z),       Service Level 9207              X
               '   User(',(VMUSERID,,T),')',                           X
               INTO=LINE
         BRASL R14,SPACE2          <== double space
         MVC   STIDP_VERSION,VMCPUVER  CPU Version Code
*
*        DIAG 218: Get Real CPU ID (VM/ESA R2 and up)
*
         TM    VMBITMAP+1,X'C0'        VM/ESA R2?
         JNO   VMDATA3                 NO, SKIP DIAG 218
         PGSER R,FIX,A=STIDP_WORKAREA,EA=STIDP_WORKAREA+7,ECB=0 PGFIX
         SYSEVENT DONTSWAP             PGFIX/LRA
         LA    R1,0                    FUNCTION CODE
         LRA   R2,STIDP_WORKAREA       LOAD REAL ADDRESS
         DIAG  R1,R2,X'0218'           ISSUE STIDP DIAGNOSE
         SYSEVENT OKSWAP               undo DONTSWAP
         PGSER R,FREE,A=STIDP_WORKAREA,EA=STIDP_WORKAREA+7,ECB=0 PGFREE
VMDATA3  EQU   *
*
*        MVC   WKCELL2,BLANKS          model code                RS0506
         LA    R4,NEXTLINE             fake PCCA
         USING PCCA,R4
*        IC    R0,STIDP_VERSION        CPU Version code          RS0506
*        BRASL R14,HARDCPU             convert 9021-C4 to 9021-941S0506
         STRING64 '  Real CPU',                                        X
               '  Serial: ',(STIDP_SERIAL,,X),                         X
               '  Version: ',(STIDP_VERSION,,X),                       X
               '  Model: ',(STIDP_MODEL,,X),                           X
               INTO=LINE
         BRASL R14,SPACE2          <== double space
VMDATA9  END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*  PR/SM Partition Number: 3                                          *
*                                                                     *
*  LPAR Configuration as of 1994-06-20  13.19.34          01973000    *
*                                                                     *
*     LPAR   LPAR           CPU-Weightings                            *
*      NO    NAME     C00 C01 C02                                     *
*       1<   LP0201    10  10  10                                     *
*       2    LP0202    40  40  40                                     *
*       3    LP0203    50  50  50                                     *
*                                                                     *
*  LPAR Configuration as of 2006-10-01  01.39.26                      *
*                                                                     *
*     LPAR   LPAR           CPU-Weightings                            *
*      No    Name     C00 C01 C02 C03 C04 C05 C06                     *
*       3<   LP0101    10  10  10  10  10 IIP                         *
*       1    CFLP0101 ICF                                             *
*       2    CFLP0102                                                 *
*       4    LP0102    19                                             *
*       5    LP0103    70  70  70  70  70                             *
*       6    LP0104     1   1   1   1   1                             *
*       7    LP0105     1   1   1   1   1                             *
*       8    LP0106     1   1   1   1   1                             *
*                                                                     *
*---------------------------------------------------------------------*
LPAR00   BEGIN_PROC KW=LPAR                                      RS0302
         MVI   FAILCODE,1              failure code
         ICM   R5,B'1111',CVTSCPIN     Service Call Control Block
         JZ    LPAR990                 no, exit
         AIF   (NOT D'CVTZOS_V1R10).LPAR10                       RS0410
         TM    HBB7750,L'HBB7750       running on z/OS R10       RS0410
         JZ    LPAR10                   yes, leave               RS0410
         L     R5,CVTECVT              ECVT                      RS0410
         USING ECVT,R5                 IHAECVT                   RS0410
         ICM   R5,B'1111',ECVTSCPIN    SCP active                RS0410
         JZ    LPAR990                 no, jump                  RS0410
.LPAR10  ANOP ,                                                  RS0410
LPAR10   DS    0H                                                RS1100
         MVI   FAILCODE,2              failure code
         USING SCCB,R5
         TM    SCCBCON1,SCCBBFY        running under PR/SM?
         JZ    LPAR990                 no, exit
*
*        Get partition number from CSD
*
         L     R4,CVTCSD               common system data area
         USING CSD,R4
         CLI   CSDPLPN,0               running under PR/SM?
         JE    LPAR19                  no, exit
         STRING64 '  PR/SM Partition Number: ',(CSDPLPN,FL1,L),        X
               INTO=LINE
         MVC   OWN_LPAR,CSDPLPN        save LPAR number for later
         BRASL R14,SPACE2              Double Space
         J     LPAR925                 Disable OLD D204 ||||     RS0507
LPAR19   EQU   *
*
*        PR/SM config table (ESA 4.2 with RMF)
*
         ICM   R5,B'1111',CVTMFCTL     GLOBAL SUPERVISOR TABLE
         JZ    LPAR25                  LOST, QUIT
         USING ERBSTGST,R5
         CLC   =C'STGS',STGSNAME       RIGHT CB ID?
         JNE   LPAR25                  LOST, QUIT
         ICM   R6,B'1111',STGSCPU      CPU DATA TABLE
         JNP   LPAR25                  LOST, QUIT
         USING ERBCPUDT,R6
         L     R7,CPUD204              LPAR CONFIGURATION TABLE
         DROP  R5,R6                   ERBSTGST,ERBCPUDT
         LTR   R7,R7                   VALID POINTER?
         JP    LPAR30                  yes, continue
         USING D204,R7
*
*        PR/SM config table (DIAG 204)
*
LPAR25   EQU   *
         MVI   FAILCODE,25             failure code
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         JNO   LPAR990                 no, exit
         BRASL R14,WORKADDR            LOCATE WORK AREA
         LR    R7,R1                   save addr
         PGSER R,FIX,A=D204,EA=D204+4095,ECB=0 PGFIX
         SYSEVENT DONTSWAP             PGFIX/LRA
         LRA   R2,D204                 LOAD REAL ADDRESS
         LA    R3,4                    FUNCTION CODE
         DIAG  R2,R3,X'0204'           ISSUE PR/SM DIAGNOSE
         SYSEVENT OKSWAP               undo DONTSWAP
         PGSER R,FREE,A=D204,EA=D204+4095,ECB=0 PGFIX
*
LPAR30   DS    0H
*        #SNAP ADDR=(R7),LENGTH=512    Debug code                RS0406
         LH    R3,D204OWNP             OFFSET TO OWN PARTITION
         LA    R3,D204(R3)             CHANGE OFFSET TO ADDRESS
         USING D204LPAR,R3
         MVI   FAILCODE,38             failure code
         CLC   D204LPNO,CSDPLPN        OWN PARTITION NUMBER
         JNE   LPAR990                 LOST, QUIT
*        Check disable zIIP CSDCPUOL can be higher               RS0906
*        MVI   FAILCODE,39             failure code
*        CLC   D204LPCP,CSDCPUOL+1     # OF CPU'S ONLINE IN MY LPAR
*        JNE   LPAR990                 LOST, QUIT
         DROP  R3                      D204LPAR
*
         STCKSYNC TOD=WKCELL1          GET CURRENT TOD CLOCK VALUE
         MVI   FAILCODE,40             failure code
         CLC   WKCELL1(2),D204STCK     COMPARE YEAR/MONTH
         JNE   LPAR990                 LOST, QUIT
         LA    R1,D204STCK             pass TOD clock value
         BRASL R14,STCKCONV            convert TOD clock to decimal
         STRING64 '  LPAR Configuration as of ',                       X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),2X,        HH.MM.SS                        X
               10X,((R7),,X),          address of D204 area            X
               INTO=LINE
         BRASL R14,SPACE2           <- Double Space
*
*     Scan LPAR entries to build map of all physical CPU's
*
         LA    R3,L'D204HDR(,R7)       FIRST LPAR ENTRY
         USING D204LPAR,R3
*LOOP
LPAR511  DS    0H
         SLR   R1,R1
         IC    R1,D204LPCP             # OF PROCESSORS FOR THIS LPAR
         MHI   R1,24                   size of all proc entries
         LA    R3,L'D204LPAR(R1,R3)    SKIP LPAR ENTRY
*        #SNAP ADDR=(R3),LENGTH=50     Debug code                RS0406
         CLI   D204LPNO,0              PHYSICAL entry ?
         JNE   LPAR511                 not yet, try next LPAR
*ENDLOOP
*RS      MVC   PHYSICAL_LPAD,D204LPAD  addr of 1st CPU (0 or 1)  RS0406
         XC    PHYSICAL_LPAD,PHYSICAL_LPAD                       RS0406
*
LPAR520  DS    0H
         STRING64 '     LPAR   LPAR           CPU-Weightings',INTO=LINE
         LH    R2,PHYSICAL_LPAD        First CPU
         STRING64 '      NO    NAME     ',INTO=NEXTLINE
         LA    R3,NEXTLINE(R15)        FIRST "CPU n"
*LOOP
LPAR521  DS    0H
         STRING64 'C',((R2),,R2Z),INTO=((R3),7)                  RS0504
         LA    R2,1(,R2)               BUMP CPU NO
         LA    R3,04(,R3)              NEXT CPU #                RS0504
         LH    R0,D204PCCT             Max CPU ID
*        AH    R0,PHYSICAL_LPAD        First CPU                 RS0406
         CLR   R2,R0                   end of table yet?
         JL    LPAR521                 NO, NEXT CPU NO
*ENDLOOP
         BRASL R14,SPACE1           <- NEXT LINE
         BRASL R14,SPACE1           <- NEXT LINE
*
         LA    R3,L'D204HDR(,R7)       FIRST LPAR ENTRY
*LOOP
LPAR541  DS    0H
         LA    R2,D204LPNO             save addr of partition number
         CLI   0(R2),0                 Lpar number zero (Physical)
         JE    LPAR549                 leave
         STRING64 (D204LPNO,FL1,R8B),4X, LPAR NUMBER                   X
               D204LPNM,               LPAR NAME                       X
               INTO=LINE
         CLC   OWN_LPAR,D204LPNO       own LPAR?
         JNE   *+8                     no, jump
         MVI   LINE+8,C'<'             Flag own LPAR
         SLR   R0,R0
         ICM   R0,B'0001',D204LPCP     # OF PROCESSORS FOR THIS LPAR
         JZ    LPAR548                 NOT ACTIVE, IGNORE
         LA    R3,D204LPAD             FIRST PROCESSOR
         USING D204LPAD,R3
*--LOOP
LPAR545  DS    0H
         LH    R1,D204LPAD             CPU ADDR
*        SH    R1,PHYSICAL_LPAD        First CPU                 RS0406
         MHI   R1,4                    column width              RS0504
         LA    R1,LINE+21(R1)          CHANGE OFFSET TO ADDRESS
         STRING64 (D204LPRS,H,R3B),INTO=((R1),3)                 RS0504
         CLI   D204LPRS,255            dedicated processor?
         JNE   *+10                    no, skip MVC
         MVC   0(3,R1),=C'ded'         yes show it               RS0504
         LA    R3,24(,R3)              NEXT CPU ENTRY
         JCT   R0,LPAR545              NEXT CPU
*--ENDLOOP
         BRASL R14,SPACE1           <- NEXT LINE
         J     LPAR549
LPAR548  DS    0H
         LA    R3,L'D204LPAR(,R3)      SKIP INACTIVE LPAR ENTRY
         BRASL R14,SPACE1           <- NEXT LINE
LPAR549  DS    0H
         CLI   0(R2),0                 end of table?
         JNE   LPAR541                 not yet, keep on going
*ENDLOOP
         BRASL R14,BLANK1           <- blank line
*                                                                RS0906
*        PR/SM config table (DIAG 204.5 and DIAG 204.7)          RS0906
*                                                                RS0906
LPAR925  DS    0H                                                RS0906
         MVI   FAILCODE,25             failure code              RS0906
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?          RS0906
         JNO   LPAR990                 no, exit                  RS0906
         L     R6,=XL4'00010005'       Verify length             RS0906
         DIAG  R1,R6,X'0204'                                     RS0906
         LR    R0,R7                   length in KiB             RS0906
         SLA   R0,12                   * 4096                    RS0906
         ST    R0,WKCELL2              keep it for freemain      RS0906
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS0906
         JO    LPAR927                 yes, jump                 RS0906
         GETMAIN RU,LV=(R0)            allocate work area        RS0906
         J     LPAR928                                           RS0906
LPAR927  DS    0H                                                RS0906
         LA    R1,1                    LOC=ANY                   RS0906
         LARL  R2,STORAGE_SP230                                  RS0906
         SYNCHX (2),STATE=SUPV,RESTORE=YES                       RS0906
LPAR928  DS    0H                                                RS0906
         LR    R7,R1                   save addr                 RS0906
         USING D2047,R7                                          RS0906
         STRING64 '  CVTMDL: ',(CVTMDL,2,X),INTO=LINE            RS1106
         BRASL R14,SPACE1           <- Double Space              RS1106
         L     R6,=XL4'00010006'       get data DIAG204.6        RS1106
         CLC   CVTMDL,=X'2064'         z900 ?                    RS1206
         JE    LPAR929                   yes                     RS1206
         CLC   CVTMDL,=X'2066'         z800 ?                    RS1106
         JE    LPAR929                   yes                     RS1106
         CLC   CVTMDL,=X'2086'         z890 ?                    RS1106
         JE    LPAR929                   yes                     RS1106
         L     R6,=XL4'00010007'       get data DIAG204.7        RS0906
LPAR929  DS    0H                                                RS1106
         DIAG  R1,R6,X'0204'                                     RS0906
*                                                                RS0906
LPAR930  DS    0H                                                RS0906
*        #SNAP ADDR=(R7),LENGTH=4095   Debug code                RS0906
         LH    R3,D2047OWNP             OFFSET TO OWN PARTITION  RS0906
         LA    R3,D2047(R3)             CHANGE OFFSET TO ADDRESS RS0906
         USING D2047LPAR,R3                                      RS0906
         MVI   FAILCODE,38             failure code              RS0906
         CLC   D2047LPNO,CSDPLPN        OWN PARTITION NUMBER     RS0906
         JNE   LPAR990                 LOST, QUIT                RS0906
         DROP  R3                      D204LPAR                  RS0906
*                                                                RS0906
         STCKSYNC TOD=WKCELL1          GET CURRENT TOD CLOCK VALUES
         MVI   FAILCODE,40             failure code              RS0906
         CLC   WKCELL1(2),D2047STCK     COMPARE YEAR/MONTH       RS0906
         JNE   LPAR990                 LOST, QUIT                RS0906
         LA    R1,D2047STCK             pass TOD clock value     RS0906
         BRASL R14,STCKCONV            convert TOD clock to decimal
         STRING64 '  LPAR Configuration as of ',                       X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),2X,        HH.MM.SS                        X
               10X,((R7),,X),          address of D204 area            X
               INTO=LINE                                         RS0906
         BRASL R14,SPACE2           <- Double Space              RS0906
*                                                                RS0906
*     Scan LPAR entries to build map of all physical CPU's       RS0906
*                                                                RS0906
         LA    R3,L'D2047HDR(,R7)       FIRST LPAR ENTRY         RS0906
         USING D2047LPAR,R3                                      RS0906
LPAR9511 DS    0H                                                RS0906
         SLR   R1,R1                                             RS0906
*        #SNAP ADDR=(R3),LENGTH=16     Debug code                RS0906
         IC    R1,D2047LPEN            # OF entires for this LPARRS
         MHI   R1,96                   size                      RS0906
         LA    R3,L'D2047LPAR(R1,R3)    SKIP LPAR ENTRY          RS0906
*        #SNAP ADDR=(R3),LENGTH=80     Debug code                RS0906
         CLI   D2047LPNO,0              PHYSICAL entry ?         RS0906
         JNE   LPAR9511                 not yet, try next LPAR   RS0906
*ENDLOOP                                                         RS0906
         XC    PHYSICAL_LPAD,PHYSICAL_LPAD                       RS0906
*                                                                RS0906
LPAR9520 DS    0H                                                RS0906
         STRING64 '     LPAR   LPAR           CPU-Weightings/Capacity',X
               INTO=LINE                                         RS0607
         LH    R2,PHYSICAL_LPAD        First CPU                 RS0906
         STRING64 '      No    Name     ',INTO=NEXTLINE          RS0906
         LA    R3,NEXTLINE(R15)        FIRST "CPU n"             RS0906
*LOOP                                                            RS0906
LPAR9521 DS    0H                                                RS0906
         STRING64 'C',((R2),,R2Z),INTO=((R3),7)                  RS0906
         LA    R2,1(,R2)               BUMP CPU NO               RS0906
         LA    R3,04(,R3)              NEXT CPU #                RS0906
         LH    R0,D2047PCCT            Max CPU ID                RS0906
         CLR   R2,R0                   end of table yet?         RS0906
         JL    LPAR9521                NO, NEXT CPU NO           RS0906
*ENDLOOP                                                         RS0906
         BRASL R14,SPACE1           <- NEXT LINE                 RS0906
         BRASL R14,SPACE1           <- NEXT LINE                 RS0906
*                                                                RS0906
         LA    R3,L'D2047HDR(,R7)      FIRST LPAR ENTRY          RS0906
*LOOP                                                            RS0906
LPAR9541 DS    0H                                                RS0906
         LA    R2,D2047LPNO            save addr of partition number
         CLI   0(R2),0                 Lpar number zero (Physical)
         JE    LPAR9549                leave                     RS0906
         STRING64 (D2047LPNO,FL1,R8B),4X, LPAR NUMBER                  X
               D2047LPNM,              LPAR NAME                       X
               INTO=LINE                                         RS0906
         CLC   OWN_LPAR,D2047LPNO       own LPAR?                RS0906
         JNE   *+8                     no, jump                  RS0906
         MVI   LINE+8,C'<'             Flag own LPAR             RS0906
         SLR   R0,R0                                             RS0906
         ICM   R0,B'0001',D2047LPEN    # OF PROCESSORS FOR THIS LPAR
         JZ    LPAR9548                NOT ACTIVE, IGNORE        RS0906
         LA    R3,D2047LPAD            FIRST PROCESSOR           RS0906
         USING D2047LPAD,R3                                      RS0906
*--LOOP                                                          RS0906
LPAR9545 DS    0H                                                RS0906
         TM    D2047CPF2,X'20'         In use???                 RS0906
         JZ    LPAR9546                                          RS0906
         LH    R1,D2047LPAD             CPU ADDR                 RS0906
         MHI   R1,4                    column width              RS0906
         LA    R1,LINE+21(R1)          CHANGE OFFSET TO ADDRESS  RS0906
         STRING64 (D2047LPRS,H,R3B),INTO=((R1),3)                RS0906
         CLI   D2047LPRS,255            dedicated processor?     RS0906
         JNE   *+10                    no, skip MVC              RS0906
         MVC   0(3,R1),=C'ded'         yes show it               RS0906
         CLI   D2047CPF1,X'02'         Not 100% sure             RS1106
         JNE   *+10                    no, skip MVC              RS1106
         MVC   0(3,R1),=C'AAP'         yes show it               RS1106
         CLI   D2047CPF1,X'04'         Not 100% sure             RS0906
         JNE   *+10                    no, skip MVC              RS0906
         MVC   0(3,R1),=C'ICF'         yes show it               RS0906
         CLI   D2047CPF1,X'05'         Not 100% sure             RS0906
         JNE   *+10                    no, skip MVC              RS0906
         MVC   0(3,R1),=C'IIP'         yes show it               RS0906
*        STRING64 (D2047CPF1,1,X),INTO=((R1),3) Debug            RS1106
LPAR9546 DS    0H                                                RS0906
         LA    R3,96(,R3)              NEXT CPU ENTRY            RS0906
         JCT   R0,LPAR9545             NEXT CPU                  RS0906
*--ENDLOOP                                                       RS0906
         BRASL R14,SPACE1           <- NEXT LINE                 RS0906
         J     LPAR9549                                          RS0906
LPAR9548 DS    0H                                                RS0906
         LA    R3,L'D2047LPAR(,R3)     SKIP INACTIVE LPAR ENTRY  RS0906
         BRASL R14,SPACE1           <- NEXT LINE                 RS0906
LPAR9549 DS    0H                                                RS0906
         CLI   0(R2),0                 end of table?             RS0906
         JNE   LPAR9541                not yet, keep on going    RS0906
*ENDLOOP                                                         RS0906
         BRASL R14,BLANK1           <- blank line                RS0906
         L     R0,WKCELL2              Length                    RS0906
         LR    R1,R7                   area                      RS0906
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS0906
         JO    LPAR9590                yes, jump                 RS0906
         FREEMAIN RU,LV=(R0),A=(R1)    free getmained work area  RS0906
         J     LPAR999                 jump to next display      RS0906
LPAR9590 DS    0H                                                RS0906
         LARL  R2,STORAGE_SP230                                  RS0906
         SYNCHX (2),STATE=SUPV,RESTORE=YES                       RS0906
         J     LPAR999                 exit                      RS0906
.LPAR999 ANOP
LPAR990  EQU   *                       LPAR config could not be gen'd
         STRING64 '  LPAR Configuration could not be accessed (code=', X
               (FAILCODE,FL1,R3Z),')',INTO=LINE
         BRASL R14,SPACE2           <- Double space
LPAR999  END_PROC
*---------------------------------------------------------------------*
*                                                                     *
* Sysplex (IWMWSYSQ):                                                 *
*                                                                     *
*  System: AL10     CSA:   2084982 ECSA:  61986765                    *
*                   CPU-SU each CPU:      7843                        *
*                   CPU#:   4 Flag: 00                                *
*                   Level    1Min      3Min     10Min (SU per Interval)
*                     1   1755894   5309875  17888302                 *
*                     2   1707141   5217380  17696861                 *
*                     3   1673206   5147644  17534630                 *
*                     4   1495996   4893789  16991299                 *
*                     5   1495715   4891532  16983443                 *
*                     6   1495715   4891532  16983443                 *
*                     7   1143488   3799098  12286327                 *
*                                                                     *
*  System: ALA0     CSA:   2217760 ECSA:  45061216                    *
*                   CPU-SU each CPU:     20752                        *
*                   CPU#:   2 Flag: 00                                *
*                   Level    1Min      3Min     10Min (SU per Interval)
*                     1   2328784   6990147  23211194                 *
*                     2   2328784   6990147  23211168                 *
*                     3   2318707   6922973  22841193                 *
*                     4   2301100   6902926  22787723                 *
*                     5   2294703   6893072  22764880                 *
*                     6   2294703   6893072  22764880                 *
*                     7   2294499   6892467  22405503                 *
*                                                                     *
*  System: B158     CSA:   1861876 ECSA: 290195544                    *
*                   CPU-SU each CPU:     31128                        *
*                   CPU#:   2 Flag: 00                                *
*                   CPU  Level    1Min      3Min     10Min            *
*                   GCPU   0   1199472   3132139   9917586            *
*                   GCPU   1   1150659   2984383   9448044            *
*                   GCPU   2   1100560   2836914   8993830            *
*                   GCPU   3   1097921   2828533   8969898            *
*                   GCPU   4   1093432   2816421   8935320            *
*                   GCPU   5   1072899   2745872   8726735            *
*                   GCPU   6    761729   2434702   8415565            *
*                   GCPU   7    761729   2434702   8415565            *
*                   ZAAP   0    131072       256         0            *
*                   ZAAP   1         0         0         0            *
*                   ZAAP   2         0         0         0            *
*                   ZAAP   3         0         0         0            *
*                   ZAAP   4         0         0         0            *
*                   ZAAP   5         0         0         0            *
*                   ZAAP   6         0         0         0            *
*                   ZAAP   7         0         0         0            *
*                   ZIIP   0         0         0         0            *
*                   ZIIP   1       369         0         0            *
*                   ZIIP   2         0         0         0            *
*                   ZIIP   3         0         0         0            *
*                   ZIIP   4         0         0         0            *
*                   ZIIP   5         0         0         0            *
*                   ZIIP   6         0         0         0            *
*                   ZIIP   7         0         0         0            *
*                                                                     *
*---------------------------------------------------------------------*
SYSPLEX00 BEGIN_PROC KW=SYSPLEX                                  RS0605
         STRING64 '&TITLEPFX.Sysplex (IWMWSYSQ):',INTO=LINE
         BRASL R14,SPACE2           <- Double space
         BRASL R14,WORKADDR            Get Addr of a 32K Work Area
         ST    R0,ANSLEN               Save Length
         ST    R1,ANSAREA              Save Address
         AIF   (NOT D'CVTH7740).SYSPLEX02 z/OS R9                RS0609
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS0609
         JZ    SYSPLEX02                 no, jump                RS0609
         IWMWSYSQ MF=(E,WORK256,COMPLETE),SYSINFO_BLOCK=ANSAREA,       X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,EXTENDED_DATA=YES,      X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE                 RS0609
         J     SYSPLEX03                                         RS0609
.SYSPLEX02 ANOP                                                  RS0609
SYSPLEX02 DS    0H                                               RS0609
         IWMWSYSQ MF=(E,WORK256,COMPLETE),SYSINFO_BLOCK=ANSAREA,       X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,                        X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE
SYSPLEX03 DS    0H
         CLC   LRETCODE,=F'0'
         JNE   SYSPLEX95
         L     R4,ANSAREA
         USING SYSI,R4
*        #SNAP ADDR=(R4),LENGTH=400  Debug
         LA    R5,SYSI_ENTRIES         point to the entries
         USING SYSI_ENTRY,R5           tell assembly
         LH    R6,SYSI_INUSE_ENTRIES   number of entries
*loop
SYSPLEX10 DS    0H
         STRING64 2X,'System: ',SYSI_SYSNAME,1X,                       X
               'CSA: ',(SYSI_FREE_CSA,F,R9B),1X,                       X
               'ECSA: ',(SYSI_FREE_ECSA,F,R9B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 19X,'CPU-SU each CPU: ',(SYSI_CPU_UP,F,R9B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 19X,'CPU#: ',(SYSI_ONLINE_CPU_COUNT,H,R3B),1X,       X
               'Flag: ',(SYSI_ENTRY_STATUS,1,X),INTO=LINE
         BRASL R14,SPACE1
         STRING64 19X,'Level    1Min      3Min     10Min ',            X
               '(SU per Interval)',INTO=LINE
         LHI   R7,1                    number of entries
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS0609
         JZ    SYSPLEX12                 no, jump                RS0609
         STRING64 19X,'CPU  Level    1Min      3Min     10Min ',       X
               '(SU per Interval)',INTO=LINE                     RS0609
         SR    R7,R7                   Start at level 0          RS0609
SYSPLEX12 DS    0H
         BRASL R14,SPACE1
         ST    R5,WKCELL1              save R5
         AIF   (NOT D'CVTH7740).SYSPLEX20 z/OS R9                RS0709
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS0609
         JNZ   SYSPLEX21                 yes, jump               RS0609
.SYSPLEX20 ANOP                                                  RS0709
*  loop
SYSPLEX20 DS    0H
         STRING64 19X,((R7),,R3B),1X,(SYSI_SUM60,F,R9B),1X,            X
               (SYSI_SUM180,F,R9B),1X,(SYSI_SUM600,F,R9B),1X,          X
               INTO=LINE
         BRASL R14,SPACE1
         AHI   R5,L'SYSI_SU_ENTRY      next su entry
         AHI   R7,1                    +1
         CHI   R7,8                    < 8 loop
         JL    SYSPLEX20               else leave
*  endloop
         AIF   (NOT D'CVTH7740).SYSPLEX25 z/OS R9                RS0609
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS0609
         JZ    SYSPLEX25                 no, jump                RS0609
SYSPLEX21 DS    0H                                               RS0609
         LR    R5,R4                                             RS0609
         AH    R5,SYSI_EXT_OFFSET      set to extented data      RS0609
         USING SYSI_EXT_HEADER,R5      tell assembly             RS0609
*        #SNAP ADDR=(R5),LENGTH=SYSI_EXT_LEN DEBUG               RS0609
         LA    R5,SYSI_EXT_ENTRIES     point to entries          RS0609
         USING SYSI_EXT_ENTRY,R5       tell assembly             RS0609
         MVC   WKCELL2,=C'GCPU'        start with general CPUs   RS0609
*  loop                                                          RS0609
SYSPLEX22 DS    0H                                               RS0609
         CHI   R7,0                    First entry ??
         JNE   SYSPLEX22A                no jump
         STRING64 19X,(WKCELL2,4),1X,'CPU# : ',                  RS0609X
               (SYSI_EXT_ONLINE_PRO_COUNT,H,R3B),' Flag : ',     RS0609X
               (SYSI_EXT_PROC_FLAGS,1,X),' Norm-Fac. : ',        RS0609X
               (SYSI_EXT_PRO_NORMALIZATION,F,R9B),INTO=LINE      RS0609
         BRASL R14,SPACE1                                        RS0609
SYSPLEX22A DS    0H                                              RS0609
*        #SNAP ADDR=(R5),LENGTH=SYSI_EXT_ENTRY_LEN  DEBUG        RS0609
         STRING64 19X,(WKCELL2,4),1X,((R7),,R3B),1X,                   X
               (SYSI_EXT_SUM60,F,R9B),1X,                              X
               (SYSI_EXT_SUM180,F,R9B),1X,(SYSI_EXT_SUM600,F,R9B),1X,  X
               INTO=LINE               print data                RS0609
         BRASL R14,SPACE1                                        RS0609
         AHI   R5,L'SYSI_EXT_SU_ENTRY  next entry                RS0609
         AHI   R7,1                    +1                        RS0609
         CHI   R7,8                    < 8 loop                  RS0609
         JL    SYSPLEX22               else leave                RS0609
*  Endloop
         SR    R7,R7                   clear index               RS0609
         CLC   WKCELL2,=C'GCPU'        Was general CPU?          RS0609
         JNE   SYSPLEX23                 no jump around          RS0609
         MVC   WKCELL2,=C'zAAP'        yes now ZAAP              RS0609
         AHI   R5,8                    + SYSI_EXT_ONLINE_PRO_COUNRS0609
         J     SYSPLEX22                                         RS0609
*  Endloop                                                       RS0609
SYSPLEX23 DS    0H                                               RS0609
         CLC   WKCELL2,=C'zAAP'        Was general ZAAP?         RS0609
         JNE   SYSPLEX24                 no jump around          RS0609
         MVC   WKCELL2,=C'zIIP'        yes now ZIIP              RS0609
         AHI   R5,8                    + SYSI_EXT_ONLINE_PRO_COUNRS0609
         J     SYSPLEX22                                         RS0609
*  Endloop                                                       RS0609
SYSPLEX24 DS    0H                                               RS0609
*        CLC   WKCELL2,=C'zIIP'        Reserved for further      RS0609
*        JNE   SYSPLEX25               use                       RS0609
*        MVC   WKCELL2,=C'n/a '                                  RS0609
*        AHI   R5,8                    + SYSI_EXT_ONLINE_PRO_COUNRS0609
*        J     SYSPLEX22                                         RS0609
*  Endloop                                                       RS0609
.SYSPLEX25 ANOP                                                  RS0609
SYSPLEX25 DS    0H                                               RS0609
         L     R5,WKCELL1              restore R5
         DROP  R5
         USING SYSI_ENTRY,R5           tell assembly
         BRASL R14,BLANK1
         AHI   R5,SYSI_ENTRY_LEN       next system
         JCT   R6,SYSPLEX10            do until
*endloop
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS0609
         JZ    SYSPLEX26                 no, jump                RS0609
         STRING64 19X,'Level 0 = Total Capacity',INTO=LINE       RS0609
         BRASL R14,SPACE1                                        RS0609
SYSPLEX26 DS    0H                                               RS0609
         STRING64 19X,'Level(1-5) = Importance 6 = Discretionary',     X
               ' 7 = Unused',INTO=LINE
         BRASL R14,SPACE2
*endloop
SYSPLEX90 DS    0H
         J     SYSPLEX99
SYSPLEX95 STRING64 '  IWMWSYSQ failed -',                              X
               ' Returncode=',(LRETCODE,,X),                           X
               ' Reasoncode=',(LRSNCODE,,X),                           X
               ' Size=',(ANSLEN,F,L),                                  X
               ' Size=',(QUERYLEN,F,L),                                X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
SYSPLEX99 END_PROC
         TITLE 'SHOWMVS &REL - Display Map of Virtual Memory'
*---------------------------------------------------------------------*
*                                                                     *
*Virtual Storage Map:                                                 *
*                                                                     *
*        Area   Start(hex)-End(hex)    Size(KB)   Size(MB)    Used(KB)*
*                                                                     *
*     Reg. Ext.   0E800000  7FFFFFFF   1859584K    1816.0M            *
*      CSA Ext.   08611000  0E7FFFFF    100284K      97.9M     49913K *
*     MLPA Ext.   0860E000  08610FFF        12K        .0M            *
*     FLPA Ext.   0860B000  0860DFFF        12K        .0M            *
*     PLPA Ext.   033AE000  0860AFFF     84340K      82.3M            *
*      SQA Ext.   0187D000  033ADFFF     27844K      27.1M     15204K *
*  R/W Nuc.Ext.   01813000  0187CFFF       424K        .4M            *
*  R/O Nuc.Ext.   01000000  0181297F      8266K       8.0M            *
*       16M-line  ----------------------------------------            *
*  R/O Nucleus    00FD0000  00FFFFFF       192K        .1M            *
*  R/W Nucleus    00FBE000  00FCFD6F        71K        .0M            *
*          SQA    00E6C000  00FBDFFF      1352K       1.3M       606K *
*         PLPA    00BA5000  00E6BFFF      2844K       2.7M            *
*         FLPA    00000000  00000000         0K        .0M            *
*         MLPA    00BA4000  00BA4FFF         4K        .0M            *
*          CSA    00900000  00BA3FFF      2704K       2.6M       509K *
*   Region V=V    00006000  008FFFFF      9192K       8.9M            *
*   Region V=R    00000000  00000000         0K        .0M            *
*   PSA+System    00000000  00006000        24K        .0M            *
*                                                                     *
*                                                                     *
*   CSA space converted to SQA  :       0K                            *
*   ECSA space converted to ESQA:       0K                            *
*   Common Area Space Available :    2784K  (CSA+SQA)                 *
*                                                                     *
*   Common Area Space Alloc     :    1115K  (CSA+SQA)                 *
*   Common Area Space Alloc     :   65117K  (ECSA+ESQA)               *
*                                                                     *
*   GFS Trace: OFF   CSA Tracking: On    SQA Tracking: On             *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO                                               EU17 MACRO
         MEMORY_MAP &MSG,&START,&END,&SIZE,&ALLOC,&HWM       EU17 MACRO
         AIF   (T'&START NE 'O').AA                          EU17 MACRO
         MNOTE 8,'--- Start Address missing '                EU17 MACRO
         AGO   .ZZ                                           EU17 MACRO
.AA      L     R1,&START               START ADDRESS         EU17 MACRO
         AIF   (T'&END EQ 'O').CC                            EU17 MACRO
         L     R2,&END                 END ADDRESS           EU17 MACRO
         AIF   (T'&SIZE NE 'O').BB                           EU17 MACRO
         LA    R0,1                    ONE BYTE              EU17 MACRO
         ALR   R0,R2                   END ADDRESS           EU17 MACRO
         SLR   R0,R1                   SIZE IN BYTES         EU17 MACRO
         AGO   .EE                                           EU17 MACRO
.BB      L     R0,&SIZE                SIZE IN BYTES         EU17 MACRO
         AGO   .EE                                           EU17 MACRO
.CC      AIF   (T'&SIZE NE 'O').DD                           EU17 MACRO
         MNOTE 8,'--- End Address and/or Size missing '      EU17 MACRO
         AGO   .ZZ                                           EU17 MACRO
.DD      L     R0,&SIZE                SIZE IN BYTES         EU17 MACRO
         LTR   R2,R0                   size=0?               EU17 MACRO
         JZ    *+4+2+2                 yes, EA=0 too         EU17 MACRO
         AR    R2,R1                   END ADDRESS           EU17 MACRO
         BCTR  R2,0                    END ADDRESS           EU17 MACRO
.EE      STM   R1,R2,TENWORDS          START-END ADDRESSES   EU17 MACRO
         BRASL R14,MEM_SUB             Edit Size (KB and MB)      MACRO
&STR     SETC  '&MSG'(2,K'&MSG-2)                            EU17 MACRO
         STRING64 '  &STR  ',                                    RS0603X
               (TENWORDS,4,X),2X,(TENWORDS+4,4,X),2X,        EU17 MACROX
               WKCELL1,'K  ',WKCELL2,'M',INTO=LINE           EU17 MACRO
         AIF   ('&ALLOC' EQ '').MEM59
&LABEL   SETC  'IHB&SYSNDX'
         L     R0,GDA_&ALLOC._ALLOC    allocation, in Bytes
         SRL   R0,10                   allocation, in Kilos
         STRING64 ((R0),,R9B),'K',INTO=(LINE+58,LINE+L'LINE)
         AIF   ('&HWM' EQ '').MEM59
&LABEL   SETC  'IHB&SYSNDX'
         L     R0,GDA&HWM.HWM         allocation, in Bytes
         SRL   R0,10                   allocation, in Kilos
         STRING64 ((R0),,R9B),'K',INTO=(LINE+69,LINE+L'LINE)
.MEM59   BRASL R14,SPACE1          <== NEXT LINE             EU17 MACRO
.ZZ      MEND                                                EU17 MACRO
MEMORY   BEGIN_PROC KW=MEMORY                                    RS0302
         STRING64 '&TITLEPFX.Virtual Storage Map:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 8X,'Area   Start(hex)-End(hex)    Size(KB)',         X
               '   Size(MB)    Used(KB)    HWM(KB)',INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R7,CVTSMEXT             STORAGE MAP EXTENSION
         USING CVTVSTGX,R7
         L     R6,CVTGDA               GLOBAL DATA AREA           EU17
         USING GDA,R6                                             EU17
         XC    TENWORDS,TENWORDS                                  EU17
         L     R4,PSAAOLD-PSA          MY ASCB                   RS1200
         L     R5,ASCBLDA-ASCB(,R4)    MY LDA                    RS1200
         USING LDA,R5                                            RS1200
         AIF   (NOT D'CVTH7750).MEMORY10 z/OS R10 ? No           RS0508
         TM    HBB7750,L'HBB7750       running on z/OS R10       RS0508
         JZ    MEMORY10                no, leave                 RS0508
         L     R3,CVTRCEP              RSM CTL & ENUM AREA       RS0508
         USING RCE,R3                  IARRCE                    RS0508
         LG    R0,RCEHVCommonEnd       CSA above the bar End     RS0508
         LG    R1,RCEHVCommonStrt      CSA above the bar Start   RS0508
         SGR   R0,R1                                             RS0508
         STG   R0,WKCELL1                                        RS0508
         B2MGTP WKCELL1,WORK256+16,WKCELL2                       RS0508
         STRING64 4X,'CSA 64bit  ',                              RS0508X
               32X,(WORK256+16,P,R9B),(WKCELL2,1),               RS0508X
               INTO=LINE                                         RS0508
         LG    R0,RCEHVCommonHWMBytes  CSA above the bar HWM     RS1214
         STG   R0,WKCELL1                                        RS1214
         B2MGTP WKCELL1,WORK256+16,WKCELL2                       RS1214
         STRING64 (WORK256+16,P,R9B),(WKCELL2,1),                RS1214X
               INTO=(LINE+69,LINE+L'LINE)                        RS1214
         BRASL R14,SPACE1              Single Space              RS0508
         STRING64 7X,'The bar ',2X,                              RS0508X
               '----------------------------------------',INTO=LINE
         BRASL R14,SPACE1          <== next line                 RS0508
.MEMORY10 ANOP                                                   RS0508
MEMORY10 DS    0H                                                RS0508
         MEMORY_MAP '   Reg. Ext. ',GDAEPVT,,GDAEPVTS            RS0705
         MEMORY_MAP '    CSA Ext. ',GDAECSA,,GDAECSAS,ECSA,ECSA  RS0705
         MEMORY_MAP '   MLPA Ext. ',CVTEMLPS,CVTEMLPE            RS0705
         MEMORY_MAP '   FLPA Ext. ',CVTEFLPS,CVTEFLPE            RS0705
         MEMORY_MAP '   PLPA Ext. ',CVTEPLPS,CVTEPLPE            RS0705
         MEMORY_MAP '    SQA Ext. ',GDAESQA,,GDAESQAS,ESQA,ESQA  RS0705
         MEMORY_MAP 'R/W Nuc.Ext. ',CVTERWNS,CVTERWNE            RS0705
         MEMORY_MAP 'R/O Nuc.Ext. ',=X'01000000',CVTRONE         RS0705
         STRING64 7X,'16M-line',2X,                              RS0705X
               '----------------------------------------',INTO=LINE
         BRASL R14,SPACE1          <== next line                 RS0705
         MEMORY_MAP 'R/O Nucleus  ',CVTRONS,=X'00FFFFFF'         RS0705
         MEMORY_MAP 'R/W Nucleus  ',CVTRWNS,CVTRWNE              RS0705
         MEMORY_MAP '        SQA  ',GDASQA,,GDASQASZ,SQA,SQA     RS0705
         MEMORY_MAP '       PLPA  ',CVTPLPAS,CVTPLPAE            RS0705
         MEMORY_MAP '       FLPA  ',CVTFLPAS,CVTFLPAE            RS0705
         MEMORY_MAP '       MLPA  ',CVTMLPAS,CVTMLPAE            RS0705
         MEMORY_MAP '        CSA  ',GDACSA,,GDACSASZ,CSA,CSA     RS0705
         XC    TENWORDS,TENWORDS                                 RS0705
*        subroutine MEM_SUB destroy R5 so we need to recover     RS0705
         L     R4,PSAAOLD-PSA          MY ASCB
         L     R5,ASCBLDA-ASCB(,R4)    MY LDA
         USING LDA,R5
         MEMORY_MAP ' Region V=V  ',LDASTRTA,,LDASIZA            RS0705
         MEMORY_MAP ' Region V=R  ',GDAVR,,GDAVRSZ               RS0705
*        subroutine MEM_SUB destroy R5 so we need to recover     RS0705
         L     R4,PSAAOLD-PSA          MY ASCB                   RS0705
         L     R5,ASCBLDA-ASCB(,R4)    MY LDA                    RS0705
         CLC   GDAVR,=F'0'         is it null ? REAL=0 IEASYSxx  RS0705
         JE    MEMORY24              yes no real storage         RS0705
         MEMORY_MAP ' PSA+System  ',TENWORDS,GDAVR               RS1200
         J     MEMORY25                                          RS1200
MEMORY24 DS    0H                                                RS1200
         MEMORY_MAP ' PSA+System  ',TENWORDS,LDASTRTA            RS1200
MEMORY25 DS    0H                                                RS1200
         BRASL  R14,BLANK1             BLANK LINE                RS1100
         L     R1,GDA_CSA_CONV         CSA space converted to SQARS0903
         SRL   R1,10                   in kilobytes              RS0903
         STRING64 '  CSA space converted to SQA  :',                   X
               ((R1),,R8B),'KB',INTO=LINE                        RS0903
         BRASL  R14,SPACE1         <== next line                 RS0902
         L     R1,GDA_ECSA_CONV        ECSA space converted to ESQA
         SRL   R1,10                   in kilobytes              RS0903
         STRING64 '  ECSA space converted to ESQA:',                   X
               ((R1),,R8B),'KB',INTO=LINE                        RS0903
         BRASL  R14,SPACE1         <== next line                 RS0903
         L     R1,GDACSARE             unallocated space in common area
         SRL   R1,10                   in kilobytes
         STRING64 '  Common Area Space Available :',                   X
               ((R1),,R8B),'KB (CSA+SQA)',INTO=LINE
         BRASL R14,SPACE2              Double Space              RS0903
         L     R1,GDA_CSA_ALLOC        unallocated space in CSA  RS0903
         A     R1,GDA_SQA_ALLOC        unallocated space in SQA  RS0903
         SRL   R1,10                   in kilobytes              RS0903
         STRING64 '  Common Area Space Alloc     :',             RS0903X
               ((R1),,R8B),'KB (CSA+SQA)',INTO=LINE              RS0903
         BRASL R14,SPACE1              Single Space              RS0903
         L     R1,GDA_ECSA_ALLOC       unallocated space in ECSA RS0903
         A     R1,GDA_ESQA_ALLOC       unallocated space in ESQA RS0903
         SRL   R1,10                   in kilobytes              RS0903
         STRING64 '  Common Area Space Alloc     :',             RS0903X
               ((R1),,R8B),'KB (ECSA+ESQA)',INTO=LINE            RS0903
         BRASL R14,SPACE2              Double Space              RS0903
         AIF   (NOT D'CVTH7750).MEMORY27 z/OS R10?               RS0509
         TM    HBB7750,L'HBB7750       running on z/OS R10       RS0509
         JZ    MEMORY27                  no, jump                RS0509
         L     R1,GDATotalCSAHWM       HWM CSA+Conv              RS0509
         SRL   R1,10                   in kilobytes              RS0509
         STRING64 '  Common Area Space HWM       :',             RS0509X
               ((R1),,R8B),'KB (CSA+Conv)',INTO=LINE             RS0509
         BRASL R14,SPACE1              Single Space              RS0509
         L     R1,GDATotalECSAHWM      unallocated space in ECSA RS0509
         SRL   R1,10                   in kilobytes              RS0509
         STRING64 '  Common Area Space HWM       :',             RS0509X
               ((R1),,R8B),'KB (ECSA+Conv)',INTO=LINE            RS0509
         BRASL R14,SPACE2              Double Space              RS0509
*                                                                RS0509
.MEMORY27 ANOP                                                   RS0509
MEMORY27 DS    0H                                                RS0509
         MVC   WORK256(9),=C'OFFOFFOFF' init work area
         TM    GDAFLGS,GDAGFSTR        GFS Trace active?
         JZ    *+10                    no, jump
         MVC   WORK256+0(3),=C'On '    yes, remember it
         TM    GDAFLGS,GDACSATR        CSA Tracking active?
         JZ    *+10                    no, jump
         MVC   WORK256+3(3),=C'On '    yes, remember it
         TM    GDAFLGS,GDASQATR        SQA Tracking active?
         JZ    *+10                    no, jump
         MVC   WORK256+6(3),=C'On '    yes, remember it
         STRING64 '  GFS Trace: ',(WORK256,3),                         X
               '   CSA Tracking: ',(WORK256+3,3),                      X
               '   SQA Tracking: ',(WORK256+6,3),                      X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
MEMORY47 EQU   *
*---------------------------------------------------------------------*
*        Sub-Pool description                                         *
*---------------------------------------------------------------------*
MEMORY51 EQU   *                                                   $RS
         STRING64 '&TITLEPFX.Subpools:',INTO=LINE                  $RS
         BRASL R14,SPACE2              Double Space                $RS
         STRING64 '  Number  Type     Owner  Fix FProt Back  Dref Key',X
               ' DKey Aloc Free Conv Rpt Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  000-127 PVT/EPVT Task       FProt Below         ',X
               ' TCB  Low  Free        0',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  128     Undefined',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  129     PVT/EPVT Job        FProt Any        Any',X
               ' PSW  Low  Free      129 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  130     PVT/EPVT Job              Any        Any',X
               ' PSW  Low  Free      130 Auth',INTO=LINE
         STRING64 '  131     PVT/EPVT Job        FProt Any        Any',X
               ' PSW  Low  Free      131',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  132     PVT/EPVT Job              Any        Any',X
               ' PSW  Low  Free      132',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  133-202 Undefined',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  203     ELSQA    Task             Any   Dref   0',X
               '      High Free      203 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  204     ELSQA    Job              Any   Dref   0',X
               '      High Free      204 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  205     ELSQA    Memory           Any   Dref   0',X
               '      High           205 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  206-212 Undefined',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  213     ELSQA    Task       FProt Any   Dref   0',X
               '      High Free      213 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  214     ELSQA    Job        FProt Any   Dref   0',X
               '      High Free      214 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  215     ELSQA    Memory     Fprot Any   Dref   0',X
               '      High           215 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  216-222 Undefined',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  223     ELSQA    Task   Fix FProt Any          0',X
               '      High Free      223 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  224     ELSQA    Job    Fix FProt Any          0',X
               '      High Free      224 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  225     ELSQA    Memory Fix FProt Any          0',X
               '      High           225 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  226     SQA      None   Fix       Below        0',X
               '      High      Conv 226 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  227     CSA/ECSA None   Fix FProt Below      Any',X
               ' PSW  High           227 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  228     CSA/ECSA None   Fix       Below      Any',X
               ' PSW  High           228 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  229     PVT/EPVT Task       FProt Below      Any',X
               ' PSW  High Free      229 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  230     PVT/EPVT Task             Below      Any',X
               ' PSW  High Free      230 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  231     CSA/ECSA None       FProt Below      Any',X
               ' PSW  High           231 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  232     Undefined',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  233     L-/ELSQA Task   Fix       Any          0',X
               '      High Free      253 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  234     L-/ELSQA Job    Fix       Any          0',X
               '      High           254 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  235     L-/ELSQA Memory Fix       Any          0',X
               '      High           255 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  236     PVT/EPVT Task             Any          1',X
               '      High Free      236 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  237     PVT/EPVT Task             Any          1',X
               '      High Free      237 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  238     Undefined',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  239     SQA/ESQA None   Fix FProt Any          0',X
               '      High      Conv 237 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  240     PVT/EPVT Task       FProt Below         ',X
               ' TCB  Low  Free        0 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  241     CSA/ECSA None             Below      Any',X
               ' PSW  High Free      241 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  242-244 Undefined',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  245     SQA/ESQA None   Fix       Any          0',X
               '      High           245 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  246     Undefined',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  247     ESQA     None       FProt Any   Dref   0',X
               '      High      Conv 247 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  248     ESQA     None             Any   Dref   0',X
               '      High      Conv 248 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  249     PVT/EPVT Job              Below      Any',X
               ' PSW  High Free      249 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  250     PVT/EPVT Task       FProt Below         ',X
               ' TCB  Low  Free        0 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  251     PVT/EPVT Job        FProt Below         ',X
               ' TCB  Low  Free      251 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  252     PVT/EPVT Job              Below        0',X
               '      Low  Free      252 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  253     L-/ELSQA Task   Fix       Any          0',X
               '      High Free      253 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  254     L-/ELSQA Job    Fix       Any          0',X
               '      High           254 Auth',INTO=LINE
         BRASL R14,SPACE1              Single Space                $RS
         STRING64 '  255     L-/ELSQA Memory Fix       Any          0',X
               '      High           255 Auth',INTO=LINE
         BRASL R14,SPACE2              Double Space                $RS
*---------------------------------------------------------------------*
*                                                                     *
*Global Cellpools:                                                    *
*                                                                     *
*  PoolId   Ext  C-Size   P-Num   S-Num SPN Key TCB    Header         *
*  02003E00   1     216      21      20 239   0 000000 DAE SYMPTOM Q  *
*  020281C0   1      96      10      10 245   0 000000 SYS1.DUMP DAT  *
*                                                                     *
*---------------------------------------------------------------------*
         STRING64 '&TITLEPFX.Global Cellpools:',INTO=LINE          $RS
         BRASL R14,SPACE2              Double Space                $RS
         STRING64 '   PoolId  Ext  C-Size   P-Num   S-Num SPN Key TCB  X
                 Header',INTO=LINE                                 $RS
         BRASL R14,SPACE1              Single Space                $RS
         L     R4,GDAPPDFX             fixed PPD queue             $RS
         BRASL R7,CELLP100             display cell-pools          $RS
         L     R4,GDAPPDPG             pageable PPD queue          $RS
         BRASL R7,CELLP100             display cell-pools          $RS
         BRASL R14,BLANK1              BLANK LINE                  $RS
         DROP  R5,R6
         J     MEMORY99
*---------------------------------------------------------------- EU17
* "MEM_SUB" routine => EDIT SIZE IN K-BYTES AND M-BYTES           EU17
*                      R14 - link register                        EU17
*---------------------------------------------------------------- EU17
MEM_SUB  LR    R5,R0                   size to compute Mb         EU17
         M     R4,=F'10'               multiply by 10             EU17
         SRDL  R4,20                   and divide by 1 Mb         EU17
         CVD   R5,WKCELL3              convert                    EU17
         MVC   WKCELL2,=XL8'4040202020214B20' mask                EU17
         ED    WKCELL2,WKCELL3+5       edit                       EU17
         SRA   R0,10                   size in KB                 EU17
         CVD   R0,WKCELL3              convert                    EU17
         MVC   WKCELL1,=XL8'4020202020202120' mask                EU17
         ED    WKCELL1,WKCELL3+4       edit                       EU17
         BR    R14                     return                     EU17
MEMORY99 END_PROC                                                 EU17
*---------------------------------------------------------------------*
*                                                                     *
*Subpool Usage:                                                       *
*  Location: CSA  No: 15                                              *
*  SP-Key     Alloc      Free    AAlloc    BAlloc     AFree     BFree *
*  227-0          7         4     90112     28672      3000     11368 *
*  227-6         99        44   5115904     12288     10552      3072 *
*  227-7          1         0     24576         0         0         0 *
*  228-0         50        29   2277376     20480      3720      9272 *
*  228-1          3         4      8192      4096      3288      1216 *
*  228-2          6         6   1617920         0     14424         0 *
*  228-4          8         7    217088      4096      1896      3288 *
*  228-5          2         1     86016         0      1856         0 *
*  228-6         11         5    618496     12288      3896         8 *
*  228-7          7         4    172032      8192      3056      3072 *
*  228-8         12        15    192512      8192      3256      3600 *
*  231-0         29        45    409600     49152     19976      6584 *
*  231-1          9         6    135168         0      2000         0 *
*  231-4          4         4     32768         0      7848         0 *
*  231-5        293         2   2584576         0      8016         0 *
*  Total                       13582336    147456     86784     41480 *
*                                                                     *
*---------------------------------------------------------------------*
VSM00    BEGIN_PROC KW=VSM              GETMAIN
         LHI   R2,4096                 length of dynamic storage
*
*        Allocate an workarea
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    VSM01                   yes, jump
         GETMAIN RU,LV=(R2),BNDRY=PAGE allocate work area
         J     VSM02
VSM01    DS    0H
         LA    R1,1                    LOC=ANY
         LR    R0,R2                   Length of storage
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
         LR    R2,R0
VSM02    DS    0H
         LR    R4,R1                   where did we find it
         STM   R1,R2,GETMAIN_LEN_ADDR  save addr and length
         STRING64 '&TITLEPFX.Subpool Usage:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         BRASL R14,WORKADDR            allocate  Answer Area
         LR    R3,R1                   point to area
         ST    R3,WKCELL1              remember start
         MVI   WKCELL3,C'1'            CSA switch
         BRASL R14,VSMP100             display CSA/ECSA subpools
         BRASL R14,WORKADDR            allocate  Answer Area
         LR    R3,R1                   point to area
         ST    R3,WKCELL1              remember start
         MVI   WKCELL3,C'2'            SQA switch
         BRASL R14,VSMP100             display SQA/ESQA subpools
         BRASL R14,WORKADDR            allocate  Answer Area
         LR    R3,R1                   point to area
         ST    R3,WKCELL1              remember start
         MVI   WKCELL3,C'3'            LSQA switch
         BRASL R14,VSMP100             Display LSQA subpool
         BRASL R14,BLANK1              BLANK LINE
         LM    R1,R2,GETMAIN_LEN_ADDR  save addr and length
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    VSM98                   yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free getmained work area
         J     VSM99                   jump to next display
VSM98    DS    0H
         LR    R0,R2                   length for FREEMAIN
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
VSM99    DS    0H
         END_PROC
         TITLE 'SHOWMVS &REL - Common Storage Display'          RS0502
*---------------------------------------------------------------------*
*                                                                     *
* Common Storage Usage                                                *
*                                                                     *
*   JobName  JobID   Asid St       CSA     E-CSA       SQA     E-SQA  *
*   *SYSTEM*            0 Ac     88264  24771488    535952  11722872  *
*   *MASTER*            1 Ac    182896   2477432    190512   2698608  *
*   PCAUTH              2 Ac         0         0        32      1520  *
*   RASP                3 Ac         0         0         0      3360  *
*   TRACE               4 Ac         0         0         0      4464  *
*   DUMPSRV             5 Ac         0      4664        64     36712  *
*   and so on                                                         *
*                                                                     *
*---------------------------------------------------------------------*
CSSTOR00 BEGIN_PROC KW=CSSTOR
         STRING64 '&TITLEPFX.Common Storage Usage',                    *
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  JobName  JobID    Asid St        CSA',            *
               '     E-CSA       SQA     E-SQA     Total',INTO=LINE
         BRASL R14,SPACE1              Single Space
         LA    R4,1                    first ASID
         L     R5,CVTASVT              ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
         ST    R10,APFTABLE            For sort
         SR    R3,R3                   clear R3                  RS0107
*loop
CSSTOR11 LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R2,R1                   VALID ASID?
         JNP   CSSTOR18                NO, JUMP
         L     R2,ASCBASSB-ASCB(,R2)   ASSB address
         L     R2,ASSBVAB-ASSB(,R2)    VAB address
         USING VAB,R2
         LTR   R2,R2                   get VAB cblock
         JZ    CSSTOR18                  zero?, leave
         L     R3,CVTGDA               GDA                       JH1303
*        Test access (Recovery!!)
*        #SNAP ADDR=(R2),LENGTH=16
         ICM   R6,B'1111',VAB_CAUB     get CAUB cblock
         JZ    CSSTOR18                  zero?, leave
         USING CAUB,R6
         MVC   WKCELL3,=CL3'Ac '       Active
         SR    R11,R11                 clear R11 Counter         RS0107
         BRASL R7,CSSTOR100            Display data
         MVC   WKCELL3,=CL3'AS '       ASID
         CLC   VAB_CAUB,VAB_AS_CAUB    Equal ?
         JE    CSSTOR18                  yes, don't display
         L     R6,VAB_AS_CAUB          Initiators (JES, USS and so on)
         USING CAUB,R6
         SR    R11,R11                 clear R11 Counter         RS0107
         BRASL R7,CSSTOR100            display data
CSSTOR18 DS    0H
         LA    R4,1(,R4)               bump ASID
         JCT   R5,CSSTOR11             next address space
*endloop
CSSTOR80 DS    0H
         L     R3,CVTGDA               GDA
         USING GDA,R3
         L     R6,GDASCAUB             System
         USING CAUB,R6
         MVC   WKCELL3,=CL3'Ac '       Active
         SR    R11,R11                 clear R11 Counter         RS0107
         BRASL R7,CSSTOR100
         L     R6,GDAUCAUB             Unknown queue
         USING CAUB,R6
         SR    R11,R11                 clear R11 Counter         RS0107
         BRASL R7,CSSTOR100            display data
         L     R6,GDAFCAUB             Unowned
         USING CAUB,R6
         MVC   WKCELL3,=CL3'OG*'       Owner gone
         SR    R11,R11                 clear R11 Counter         RS0107
         BRASL R7,CSSTOR100
         CLI   WKCELL1,C'E'            Error (Limit reached) ?   RS0107
         JE    CSSTOR99                  yep, don't sort         RS0107
         LA    R2,APFTABLE             TABLE DESC
         MVI   WKCELL1,C'T'            Sort Total
         BRASL R14,TRIZO               SORT by Total
         J     CSSTOR99
*loop
CSSTOR100 DS    0H
*        #SNAP ADDR=(R6),LENGTH=72     CAUB
         AHI   R11,1                   R11+ 1                    RS0107
         L     R1,CAUB_CSA_BELOW
         A     R1,CAUB_CSA_ABOVE
         A     R1,CAUB_SQA_BELOW
         A     R1,CAUB_SQA_ABOVE
         ST    R1,WKCELL2
         CHI   R11,5000                Already 5000 entr. processRS0107
         JL    CSSTOR105                 no continue             RS0107
         STRING64 '  Display of individual entries suppressed after',  *
               ' reaching the limit of 5000 entries',INTO=LINE   RS0413
         BRASL R14,SPACE1              Single Space              RS0107
         STRING64 '  Sort order is lost',INTO=LINE               RS0107
         BRASL R14,SPACE2              Single Space              RS0107
         MVI   WKCELL1,C'E'            Set Error                 RS0107
         J     CSSTOR999               leave                     RS0107
CSSTOR105 DS    0H                                               RS0107
         STRING64 2X,CAUB_JOBNAME,1X,CAUB_JOBID,                       *
               1X,(CAUB_ASN,H,R4B),1X,(WKCELL3,3),                     *
               1X,(CAUB_CSA_BELOW,F,R9B),1X,(CAUB_CSA_ABOVE,F,R9B),    *
               1X,(CAUB_SQA_BELOW,F,R9B),1X,(CAUB_SQA_ABOVE,F,R9B),    *
               1X,(WKCELL2,F,R9B),INTO=LINE
         TR    LINE,TRTPRINT           get rid of garbage
         BRASL R14,SPACE1              Single Space
*        #SNAP ADDR=(R3),LENGTH=16
         CL    R6,GDALCAUB             last entry ?
         JE    CSSTOR999                 yes leave
         ICM   R6,B'1111',CAUB_UNOWNED_NEXT
         JNZ   CSSTOR100
CSSTOR999 DS    0H
*endloop
         BR    R7
.CSSTOR99 ANOP
CSSTOR99 DS    0H
         BRASL R14,BLANK1
         STRING64 '  ST: Ac-Active AS-VAB_AS_CAUB OG-Owner gone',      *
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         END_PROC
*---------------------------------------------------------------------*
*                                                                     *
* Common/Shared Memory objects                                        *
*                                                                     *
*  Number of Allocations :        2                                   *
*  Start            End              Flag Flag1 Dump                  *
*  0000020000000000 00000200000FFFFF 8C   80    00                    *
*  0000020080000000 000002207FFFFFFF 7C   80    00                    *
*                                                                     *
*  Flag : F0-Storage Key,08-FProt,04-Shared,02-NoDefaultGuardArea,01- *
*  Flag1: 80-SysAff,40-Guard,20-large Page,10-Dumpprotokoll           *
*                                                                     *
*---------------------------------------------------------------------*
V64INF00 BEGIN_PROC KW=V64INF,AUTH=YES                           RS0210
         AIF   (NOT D'CVTH7750).V64INF99 z/OS R10 ? No
         TM    HBB7750,L'HBB7750       running on z/OS R10
         JZ    V64INF99                 no, leave
         STRING64 '&TITLEPFX.Common/Shared Memory objects',            X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         BRASL R14,WORKADDR              get storage
         LR    R3,R0
         ST    R3,WKCELL1               length
         LR    R3,R1
         ST    R3,WKCELL1+4
*        #SNAP ADDR=(R3),LENGTH=16
         IARV64 REQUEST=LIST,                                          X
               V64LISTPTR=WKCELL1+4,                                   X
               V64LISTLENGTH=WKCELL1,                                  X
               V64SHARED=YES,                                          X
               V64COMMON=YES,    z/OS R10                              X
               V64SELECT=NO,                                           X
               RETCODE=LRETCODE,                                       X
               RSNCODE=LRSNCODE,                                       X
               MF=(E,WORK256,COMPLETE)
         ICM   R15,B'1111',LRETCODE    Get Returcode
         JNZ   V64INF99                 jump if not zero
         USING V64WAHEADER,R3
         STRING64 '  Number of Allocations :',                         X
               (V64WANUMDATAAREAS,F,R9B),INTO=LINE
         BRASL R14,SPACE1              Double Space
         STRING64 '  Start            End              Flag Flag1',    X
               ' Dump',INTO=LINE
         BRASL R14,SPACE1              Double Space
*        #SNAP ADDR=(R3),LENGTH=V64WAHEADER_LEN
         ICM   R4,B'1111',V64WANUMDATAAREAS
         JZ    V64INF99
         AHI   R3,V64WAHEADER_LEN
*loop
V64INF10  DS  0H
         USING V64WAENTRY,R3
*        #SNAP ADDR=(R3),LENGTH=V64WAENTRY_LEN
         STRING64 2X,(V64WASTART64,8,X),1X,                            X
               (V64WAEND64,8,X),1X,                                    X
               (V64WAFLAG,1,X),3X,                                     X
               (V64WAFLAG1,1,X),4X,                                    X
               (V64WADUMPPRIORITY,1,X),                                X
               INTO=LINE
         BRASL R14,SPACE1              Double Space
         AHI   R3,V64WAENTRY_LEN
         JCT   R4,V64INF10
         BRASL R14,BLANK1              Single Space
         J     V64INF90
*endloop
V64INF80 DS  0H
         STRING64 4X,'IARV64',                                         X
               ' Returncode=',(LRETCODE,,X),                           X
               ' Reasoncode=',(LRSNCODE,,X),                           X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
V64INF90 DS  0H
         STRING64 '  Flag : F0-Storage Key,08-FProt,04-Shared,',       X
               '02-NoDefaultGuardArea,01-DefaultGuardArea',INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 '  Flag1: 80-SysAff,40-Guard,20-large Page,',        X
               '10-Dumpprotokoll',INTO=LINE
         BRASL R14,SPACE2              Double Space
.V64INF99 ANOP
V64INF99 DS    0H
         END_PROC
*---------------------------------------------------------------------*
*                                                                     *
* Dataspace/Hiperspace                                                *
*                                                                     *
*   Name     ASID Dataspace ASTE     DSToken          Scope      RS0902
*                                                                     *
*   *MASTER*   1  IRR0001F  04DB9880 80001201000002D3                 *
*                 IRR0001E  04DB9C00 80001901000002D2                 *
*                 IRR0001D  04DB9B80 80001801000002D1                 *
*                 IRR0001C  04DB9A80 80001601000002D0                 *
*                 IRR0001B  04DB9B00 80001701000002CF                 *
*                 IRR0001A  04DB9A00 80001501000002CE                 *
*                 IRR00019  04DB9C80 80001A01000002CD                 *
*                 IRR00018  03B92500 80008B01000002CC                 *
*                 IRR00011  04DB9980 8000140100000015                 *
*                 00000CSM  1861E480 8000230000000074                 *
*                 IRR0000E  04DB9780 8000100100000011                 *
*                 IRR0000D  04DB9700 80000F0100000010                 *
*                 IRR0000C  04DB9680 80000E010000000F                 *
*                                                                     *
*---------------------------------------------------------------------*
DSPLST00 BEGIN_PROC KW=DSPLST,AUTH=YES                           RS0302
         MODESET EXTKEY=ZERO             switch to KEY=0         RS0310
         STRING64 '&TITLEPFX.Dataspace/Hiperspace',                    X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  Name     ','ASID ','Dataspace ','ASTE     ',      X
               'DSToken',10X,'Scope',INTO=LINE                   RS0902
         BRASL R14,SPACE2              Double Space
*
*        Locate the ASCB
*
DSPLST05 LA    R5,1                    first ASID
         L     R6,CVTASVT              point to ASVT
         L     R6,ASVTMAXU-ASVT(,R6)   max ASID
         XC    WKCELL2,WKCELL2         no of common dsp          RS0203
*loop
DSPLST10 LOCASCB ASID=(R5)             GET ADDR OF OWNER'S
         LTR   R2,R1                   VALID ASID?
         JNP   DSPLST80                NO, JUMP
         USING ASCB,R2
         ICM   R1,B'1111',ASCBJBNI-ASCB(R2) JOBNAME
         JNZ   DSPLST30                Yes - continue
         ICM   R1,B'1111',ASCBJBNS-ASCB(R2) START/MOUNT/LOGON
         JNZ   DSPLST30                No - continue
DSPLST20 DS    0H
         LA    R1,BLANKS
DSPLST30 DS    0H
         MVC   WORK256(8),0(R1)        Save Jobname
         XC    TENWORDS(8),TENWORDS    undocumented DSPCALL DSPLIST
         STH   R5,TENWORDS+2           services
         LA    R1,TENWORDS             PARM1 = Asid
         L     R4,CVTPTR(,0)           point to CVT
         L     R4,356(0,R4)            CVTPVTP
         L     R15,200(0,R4)           PVTCCDSL
         BALR  R14,R15                 DSPCALL DSPLIST service
         LTR   R15,R15                 returncode?
         JNZ   DSPLST80                  Yep try next asid
         L     R2,TENWORDS+4
         USING DSD,R2
         ICM   R3,B'1111',DSDNO                number of entries RS0902
         JZ    DSPLST80
         BRASL R7,DSPCADS              Check Common dataspace    RS0902
         CLC   DSDNAME(5),=C'CUNDS'    Unicode Dataspace keep    RS0705
         JNE   DSPLST40                DS-Token for later        RS0705
         MVC   UNIDSTOK,DSDSTKN        Used in section UNICODE   RS0705
DSPLST40 DS    0H                                                RS0705
         STRING64 2X,(WORK256,8),1X,((R5),,R4B),1X,(DSDNAME),2X,       X
               (DSDASTE,4,X),1X,(DSDSTKN,8,X),1X,(WORK256+8,6),        X
               INTO=LINE
         BRASL R14,SPACE1
         BCTR  R3,0                      -1                      RS0902
         LTR   R3,R3                     only one entry?         RS0902
         JZ    DSPLST80
* loop
DSPLST60 DS    0H
         LA    R2,DSDENTRY_LENGTH(,R2)   next entry
         BRASL R7,DSPCADS              Check Common dataspace    RS0902
         CLC   DSDNAME(5),=C'CUNDS'    Unicode Dataspace keep    RS0705
         JNE   DSPLST61                DS-Token for later        RS0705
         MVC   UNIDSTOK,DSDSTKN        Used in section UNICODE   RS0705
DSPLST61 DS    0H                                                RS0705
         STRING64 16X,(DSDNAME),2X,(DSDASTE,4,X),1X,                   X
               (DSDSTKN,8,X),1X,(WORK256+8,6),INTO=LINE
         BRASL R14,SPACE1
         JCT   R3,DSPLST60             No - continue             RS0902
* endloop
DSPLST80 DS    0H
         LA    R5,1(,R5)               bump ASID
         JCT   R6,DSPLST10             No - continue
*endloop
         BRASL R14,BLANK1
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
         L     R4,CVTECVT              Load addr of ECVT         RS0203
         L     R4,ECVTIPA-ECVT(,R4)    Init parm area            RS0203
         USING IPA,R4                                            RS0203
         L     R5,IPAPDES                                        RS0203
         USING IPAPDE,R5                                         RS0203
         LA    R5,IPAMAXCA             Point to MAXCAD           RS0203
         ICM   R1,B'1111',IPAPDESA     storage address           RS0203
         LH    R2,IPAPDESL             storage length            RS0203
         STRING64 '  Total MAXCAD=',((R1),(R2)),                 RS0203X
               ' Total used CADS=',(WKCELL2,H,L3B),INTO=LINE     RS0203
         BRASL R14,SPACE2              Double Space              RS0203
         AIF   (NOT D'CVTH7720).DSPLST99 z/OS R7 No?             RS0508
         AIF   (T'&SYSSTATE_OSREL EQ 'O').DSPLST99               RS0508
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010107').DSPLST99     RS0508
         TM    HBB7720,L'HBB7720       running on z/OS R7        RS0508
         JZ    DSPLST99                  no, leave               RS0508
         L     R3,CVTRCEP              RSM CTL & ENUM AREA       RS0508
         USING RCE,R3                  IARRCE                    RS0508
         STRING64 '  CADS HWM=',(RCECADSHW,H,L3B),               RS0508X
               ' total used CADS=',(RCECADSUsed,H,L3B),          RS0508X
               ' lost CADS=',(RCECADSLost,H,L3B),                RS0508X
               ' from RCE',INTO=LINE                             RS0508
         BRASL R14,SPACE2              Double Space              RS0508
.DSPLST99 ANOP
DSPLST99 DS    0H
         END_PROC
         TITLE 'SHOWMVS &REL - V64 Usage/Memlimit'               RS1105
*---------------------------------------------------------------------*
*                                                                     *
* 64-Bit Memory Objects and Memlimit                                  *
*                                                                     *
*  JobName  Asid  MemS  Memlimit  #ofObj      Alloc     Hidden      HWM
*  *MASTER*    1  03         15E       0                              *
*                         Shared       1         1M                  1M
*  PCAUTH      2  00          0M       0                              *
*  RASP        3  00          0M       0                              *
*  DB2SIRLM   75  02          2G       2         3M         0M       3M
*  SYSHSCSM   76  01          0M       0                              *
*  DB2SDBM1   77  02          4T       9         4G         1M       4G
*   and so on                                                         *
*                                                                     *
*  MemS: 1-SMF 2-JCL 3-Region=0M 4-IEFUSI 5-OMVS Seg                  *
*        6-Unix Setrlimit 7-Unix spawn 8-SETOMVS cmd                  *
*        9-Auth Pgm                                                   *
*                                                                     *
*---------------------------------------------------------------------*
V64USE00 BEGIN_PROC KW=V64USE
         STRING64 '&TITLEPFX.64-Bit Memory Objects and Memlimit',      *
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  JobName  Asid  MemS  Memlimit  #ofObj',           *
               '      Alloc     Hidden        HWM',INTO=LINE
         BRASL R14,SPACE1              Single Space
V64USE05 DS    0H
         LA    R4,1                    first ASID
         L     R5,CVTASVT              ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
*loop
V64USE10 LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R2,R1                   VALID ASID?
         JNP   V64USE80                NO, JUMP
         USING ASCB,R2
         ICM   R1,B'1111',ASCBJBNI-ASCB(R2) JOBNAME
         JNZ   V64USE30                Yes - continue
         ICM   R1,B'1111',ASCBJBNS-ASCB(R2) START/MOUNT/LOGON
         JNZ   V64USE30                No - continue
V64USE20 DS    0H
         LA    R1,BLANKS
V64USE30 DS    0H
         MVC   WKCELL2,0(R1)           Save Jobname
         L     R3,ASCBRSME-ASCB(,R2)   RAX address  (IARRAX)
         USING RAX,R3
         SR    R0,R0                   Default zero
         LG    R1,RAXLVMEMLIM          Memlimit
         LG    R0,RAXLVMEMLIM          Memlimit for the CVDG
         MVI   WKCELL1,C'M'            Megabyte
         CLG   R1,=FD'1024'
         JL    V64USE32
         SRAG  R0,R1,10                size in GB (divide 1024)
         LGR   R1,R0
         MVI   WKCELL1,C'G'            Gigabyte
         CLG   R1,=FD'1024'
         JL    V64USE32
         SRAG  R0,R1,10                size in TB (divide 1024)
         LGR   R1,R0
         MVI   WKCELL1,C'T'            Terabyte
         CLG   R1,=FD'1024'
         JL    V64USE32
         SRAG  R0,R1,10                size in PB (divide 1024)
         LGR   R1,R0
         MVI   WKCELL1,C'P'            Petabyte
V64USE32 DS    0H
         CVDG  R0,WORK256              convert
         B2MGTP RAXLVABYTES,WORK256+16,WKCELL1+1
         B2MGTP RAXLVHBYTES,WORK256+32,WKCELL1+2
         B2MGTP RAXLVGBYTES,WORK256+48,WKCELL1+3
         STRING64 2X,WKCELL2,2X,((R4),,R3B),2X,(RAXLVMEMLIMS,1,X),     *
               2X,(WORK256,P,R9B),(WKCELL1,1),                         *
               2X,(RAXLVNMOMB,F,R6B),                                  *
               INTO=LINE
         ICM   R0,B'1111',RAXLVNMOMB   Memory objects allocated ?
         JZ    V64USE50                  ok don't display
         STRING64 2X,WKCELL2,1X,((R4),,R4B),2X,(RAXLVMEMLIMS,1,X),     *
               2X,(WORK256,P,R9B),(WKCELL1,1),                         *
               2X,(RAXLVNMOMB,F,R6B),                                  *
               1X,(WORK256+16,P,R9B),(WKCELL1+1,1),                    *
               1X,(WORK256+32,P,R9B),(WKCELL1+2,1),                    *
               1X,(WORK256+48,P,R9B),(WKCELL1+3,1),                    *
               INTO=LINE
V64USE50 DS    0H
         BRASL R14,SPACE1              Single Space
         AIF   (NOT D'CVTH7708).V64USE80 z/OS R5? No
         TM    HBB7708,L'HBB7708       running on z/OS R5
         JZ    V64USE80                no, leave
         LG    R0,RAXLVSHRNMOMB        number of shared objects
         LTGR  R0,R0                   are there some?
         JZ    V64USE80                  no leave
         CVDG  R0,WORK256              convert to decimal        JH0806
         B2MGTP RAXLVSHRBYTES,WORK256+16,WKCELL1+1
         B2MGTP RAXLVSHRGBYTES,WORK256+48,WKCELL1+2
         STRING64 25X,'Shared',2X,(WORK256,P,R6B),               JH0806*
               1X,(WORK256+16,P,R9B),(WKCELL1+1,1),                    *
               12X,(WORK256+48,P,R9B),(WKCELL1+2,1),             RS0508*
               INTO=LINE
         BRASL R14,SPACE1              Single Space
.V64USE80 ANOP
V64USE80 DS    0H
         LA    R4,1(,R4)               bump ASID
         JCT   R5,V64USE10             No - continue
*endloop
.V64USE99 ANOP
V64USE99 DS    0H
         BRASL R14,BLANK1
         STRING64 '  MemS: 1-SMF 2-JCL 3-Region=0M 4-IEFUSI 5-OMVS Seg X
               6-Unix Setrlimit 7-Unix spawn 8-SETOMVS cmd',           X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 '        9-Auth Pgm 10=System def (R=0M/IEFUSI)',    X
               INTO=LINE                                         RS1106
         BRASL R14,SPACE2              Double Space
         END_PROC
         TITLE 'SHOWMVS &REL - COMMUNICATIONS STORAGE MANAGER'  +RS0200
*---------------------------------------------------------------------*
*                                                                     *
* Communication Storage Manager (CSM) Status                          *
*                                                                     *
*  Status      ECSA: ok                                               *
*         Fix. Stor: ok                                               *
*         DataSpace: ok          Name     Token            Alet       *
*                                00000CSM 8000290000000072 01FF0007   *
*                                                                     *
*---------------------------------------------------------------------*
CSMLS00  BEGIN_PROC KW=CSM,AUTH=YES             IVTCSM req       RS0302
         STRING64 '&TITLEPFX.Communications Storage Manager ',         X
               '(CSM) Status',INTO=LINE
         BRASL R14,SPACE2              double Space
         IVTCSM REQUEST=RESOURCE_STATS,STATAREA=WKCELL1,               X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,WORK256)
         CLC   LRETCODE,=F'0'           RetCode from IVTCSM Service
         JH    CSMLS80                   display RC and RSN if ne 0
         L     R3,WKCELL1
         USING IVTSTATA,R3
*        #SNAP ADDR=(R3),LENGTH=10
*        BRASL R14,SPACE1              double Space
*        MVC   WKCELL2,BLANKS                                    JH1303
         MVC   WKCELL2(11),BLANKS  Borrow 3 bytes from WKCELL3   JH1303
         MVC   WKCELL2(2),=C'ok'
         TM    STATA_FLAG,STATA_ESTAT
         JZ    CSMLS40
         MVC   WKCELL2(8),=C'Critical'
         TM    STATA_FLAG,STATA_ECRIT
         JO    CSMLS40
         MVC   WKCELL2(11),=C'Constrained'
         TM    STATA_FLAG,STATA_ECONS
         JO    CSMLS40
         MVC   WKCELL2(7),=C'Unknown'
CSMLS40  DS    0H
         STRING64 '  Status      ECSA: ',(WKCELL2,11,T),         JH1303X
               INTO=LINE                                         JH1303
         BRASL R14,SPACE1              single Space
*        MVC   WKCELL2,BLANKS                                    JH1303
         MVC   WKCELL2(11),BLANKS  Borrow 3 bytes from WKCELL3   JH1303
         MVC   WKCELL2(2),=C'ok'
         TM    STATA_FLAG,STATA_FSTAT
         JZ    CSMLS50
         MVC   WKCELL2(8),=C'Critical'
         TM    STATA_FLAG,STATA_FCRIT
         JO    CSMLS50
         MVC   WKCELL2(11),=C'Constrained'
         TM    STATA_FLAG,STATA_FCONS
         JO    CSMLS50
         MVC   WKCELL2(7),=C'Unknown'
CSMLS50  DS    0H
         STRING64 '         Fix. Stor: ',(WKCELL2,11,T),         JH1303X
               INTO=LINE                                         JH1303
         BRASL R14,SPACE1              single Space
*        MVC   WKCELL2,BLANKS                                    JH1303
         MVC   WKCELL2(11),BLANKS  Borrow 3 bytes from WKCELL3   JH1303
         MVC   WKCELL2(2),=C'ok'
         TM    STATA_FLAG,STATA_DSTAT
         JZ    CSMLS60
         MVC   WKCELL2(8),=C'Critical'
         TM    STATA_FLAG,STATA_DCRIT
         JO    CSMLS60
         MVC   WKCELL2(11),=C'Constrained'
         TM    STATA_FLAG,STATA_DCONS
         JO    CSMLS60
         MVC   WKCELL2(7),=C'Unknown'
CSMLS60  DS    0H
         STRING64 '         Dataspace: ',(WKCELL2,11),1X,        JH1303X
               'Name     ',                                      JH1303X
               'Token',12X,'Alet',INTO=LINE
         TR    LINE,TRTPRINT           get rid of garbage        RS0803
         BRASL R14,SPACE1              single Space
         IVTCSM REQUEST=DUMP_INFO,DS_INFO=WKCELL1,                     X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,WORK256)
         CLC   LRETCODE,=F'4'           RetCode from IVTCSM Service
         JH    CSMLS80                   display RC and RSN if > 4
         JE    CSMLS65                   end if RC = 4
         L     R3,WKCELL1
         USING IVTDATSP,R3             IVTDATSP
*        #SNAP ADDR=(R3),LENGTH=112                              RS0101
         ICM   R4,B'1111',DATSP_SNUM   number of DataSpaces      RS0101
         JNZ   CSMLS68                                           RS0101
CSMLS65  DS    0H                                                RS0101
         STRING64 '         No Dataspace active',INTO=LINE       RS0101
         BRASL R14,SPACE2              double Space              RS0101
         J     CSMLS99                                           RS0101
CSMLS68  DS    0H                                                RS0101
         LA    R5,DATSP_SINF           IVTDATSP
         USING DATSP_ENT,R5
CSMLS70  DS    0H
         STRING64 32X,DATSP_NAME,1X,(DATSP_TOKN,,X),1X,(DATSP_ALET,,X),X
               INTO=LINE
         BRASL R14,SPACE1              single Space
*        A     R5,DATSP_SLEN           next Entry                RS0703
         AHI   R5,20                   next Entry                RS0703
         JCT   R4,CSMLS70
         BRASL R14,BLANK1              double Space
         J     CSMLS99
CSMLS80  DS    0H
         CLC   LRETCODE,=F'4'           RetCode from IVTCSM service
         JNE   CSMLS85                   display RC/RSN IF > 4
         CLC   LRSNCODE,=F'2'           not inited?
         JNE   CSMLS85                   no
         STRING64 '  CSM - Service has not been initialized',INTO=LINE
         BRASL R14,SPACE2              double Space
         J     CSMLS99
CSMLS85  DS    0H
         STRING64 '  IVTCSM','RC: ',(LRETCODE,,X),                     X
               ' RSN: ',(LRSNCODE,,X),INTO=LINE
         BRASL R14,SPACE2              double Space
         J     CSMLS99
.CSMLS99 ANOP
CSMLS99  END_PROC
         TITLE 'SHOWMVS &REL - SYSPLEX Information'                @RS
*---------------------------------------------------------------------*
*                                                                  @RS*
*XCF Data                                                          @RS*
*                                                                  @RS*
*  SysName=MVS1    Interval: Monitor= 90   Operator= 93            @RS*
*    Status: 1996-11-20  10.25.14   Active                         @RS*
*                                                                  @RS*
*  SysName=MVS2    Interval: Monitor= 90   Operator= 93            @RS*
*    Status: 1996-11-20  10.25.17   Active                         @RS*
*                                                                  @RS*
*  SysName=MVS3    Interval: Monitor= 90   Operator= 93            @RS*
*    Status: 1996-11-20  10.25.17   Active                         @RS*
*                                                                  @RS*
* SYSGRS    (3)                                                    @RS*
*   Member=MVS1               Created Systemname=MVS1    Status:   @RS*
*   Member=MVS2               Created Systemname=MVS2    Status:   @RS*
*   Member=MVS3               Created Systemname=MVS3    Status:   @RS*
* SYSIGW01  (3)                                                    @RS*
*   Member=IGWCLM01MVS1       Created Systemname=MVS1    Status:   @RS*
*   Member=IGWCLM01MVS2       Created Systemname=MVS2    Status:   @RS*
*   Member=IGWCLM01MVS3       Created Systemname=MVS3    Status:   @RS*
*                                                                  @RS*
* and so on                                                        @RS*
*---------------------------------------------------------------------*
XCFDATA  BEGIN_PROC KW=XCF,AUTH=YES             Getmain req      RS0302
         STRING64 '&TITLEPFX.XCF Data',INTO=LINE                   @RS
         BRASL R14,SPACE2              Double Space                @RS
         BRASL R14,WORKADDR            allocate XCF Answer Area    @RS
         LA    R0,QUAHLENG+QUASLENG*32 Length of Answer-Area (>5.1)
         STM   R0,R1,WKCELL1           store length                @RS
         LR    R5,R1                   remember getmained storage  @RS
         USING QUAHDR,R5               tell assembly               @RS
         IXCQUERY REQINFO=SYSPLEX,ANSAREA=QUAHDR,ANSLEN=WKCELL1,       X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   @RS
         LTR   R15,R15                 Success?                    @RS
         JNZ   XCFD90                  No, error                   @RS
         ICM   R7,B'1111',QUAH#REC     record counter              @RS
         JZ    XCFD99                  no record, quit             @RS
         L     R6,QUAHSGOF             get offset                  @RS
         LA    R6,QUAHDR(R6)           point to the records        @RS
         USING QUASYS,R6               tell assembly               @RS
         CLC   QUAH#REM,=F'0'          got all records?            @RS
         JE    XCFD10                  yes, suppress info
         STRING64 'Got ',(QUAH#REC,F,L),' records,miss ',              X
               (QUAH#REM,F,L),                                     @RS X
               '==> increase MAXSYSPLEX-variable',INTO=LINE        @RS
         BRASL R14,SPACE2              Double Space                @RS
*loop                                                              @RS
XCFD10   EQU   *                                                   @RS
         SLR   R0,R0                                               @RS
         L     R1,QUASINTV             Monitor Time Interval       @RS
         D     R0,=F'100'              hundred seconds -> seconds  @RS
         SLR   R2,R2                                               @RS
         L     R3,QUASOPIN             Operator Time Interval      @RS
         D     R2,=F'100'              hundred seconds -> seconds  @RS
         STRING64 '  SysName=',QUASNAME,                               X
               'Interval: Monitor= ',((R1),,L),3X,                     X
               'Operator= ',((R3),,L),                                 X
               INTO=LINE                                           @RS
         BRASL R14,SPACE1              Single Space                @RS
         LA    R1,QUASSUTO             pass TOD clock value        @RS
         BRASL R14,STCKCONV            convert TOD clock to decimal@RS
         STRING64 '    Status: ',                                      X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),           HH.MM.SS                        X
               INTO=LINE                                           @RS
         LA    R4,LINE+35                                          @RS
        #STATUS QUASSTAT,QUASACTV,'Active'                         @RS
        #STATUS QUASSTAT,QUASSUM,'Status missing'                  @RS
        #STATUS QUASSTAT,QUASSYPT,'Sysplex part.'                  @RS
        #STATUS QUASSTAT,QUASLOCL,'Single System'                  @RS
        #STATUS QUASSTAT,QUASCLUP,'Cleanup Prog.'                  @RS
         BRASL R14,SPACE2           <- Double Space                @RS
         LA    R6,QUASLENG(R6)         next entry                  @RS
         JCT   R7,XCFD10               do until count = 0          @RS
*endloop
XCFD20   EQU   *                                                   @RS
*
*        First query to get the number of groups
*
         IXCQUERY REQINFO=GROUP,ANSAREA=QUAHDR,ANSLEN=WKCELL1,         X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   @RS
         CHI   R15,4                   Success? RC4 okay
         JH    XCFD90                  No, error                   @RS
         L     R1,QUAHTLEN             get total length needed     @RS
         LA    R2,QUAHDR(R1)           1st byte after data         @RS
         STM   R1,R2,WKCELL1           store length, nextaddr      @RS
*
*        next query to get the whole data
*
XCFD22   EQU   *                                                   @RS
         IXCQUERY REQINFO=GROUP,ANSAREA=QUAHDR,ANSLEN=WKCELL1,         X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   @RS
         LTR   R15,R15                 Success?                    @RS
         JNZ   XCFD90                  No, error                   @RS
         STRING64 '  Groups',INTO=LINE                             @RS
         BRASL R14,SPACE2              Double Space                @RS
         L     R6,QUAHSGOF             get offset                  @RS
         LA    R6,QUAHDR(R6)           point to the records        @RS
         USING QUAGRP,R6               tell assembly               @RS
         L     R7,QUAH#REC             record counter              @RS
*loop                                                              @RS
XCFD30   EQU   *                                                   @RS
         STM   R5,R7,TENWORDS          save registers
         STRING64 4X,QUAGNAME,'  (',(QUAG#MEM,F,L),')',INTO=LINE
         BRASL R14,SPACE1              Single Space                @RS
         LA    R1,QUAMLENG+32          length of member+32 user st @RS
         M     R0,QUAG#MEM             number of members
         LA    R1,QUAHLENG(,R1)        length of header
         ST    R1,WKCELL1              store length                @RS
         L     R5,WKCELL1+4            point past header           @RS
         IXCQUERY REQINFO=GROUP,GRPNAME=QUAGNAME,                      X
               ANSAREA=QUAHDR,ANSLEN=WKCELL1,                          X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   @RS
         LTR   R15,R15                 Success?                    @RS
         JNZ   XCFD90                  No, error                   @RS
         ICM   R7,B'1111',QUAH#REC     record counter              @RS
         JZ    XCFD50                  jump if null
         L     R6,QUAHSGOF             add offset                  @RS
         LA    R6,QUAHDR(R6)           point to the records        @RS
         USING QUAMEM,R6               tell assembly               @RS
*  loop                                                            @RS
XCFD40   EQU   *                                                   @RS
         STRING64 6X,'Member=',QUAMNAME,                               X
               INTO=LINE                                           @RS
         CLI   QUAMSTA1,QUAMSCRE       Created?
         JNE   *+10                    no, jump
         MVC   LINE+32(7),=C'Created'  yes, move word
         CLI   QUAMSTA1,QUAMSACT       Active?
         JNE   *+10                    no, jump
         MVC   LINE+32(6),=C'Active  ' yes, move word
         CLI   QUAMSTA1,QUAMSQUI       Quiesced?
         JNE   *+10                    no, jump
         MVC   LINE+32(8),=C'Quiesced' yes, move word
         CLI   QUAMSTA1,QUAMSFLD       Failed?
         JNE   *+10                    no, jump
         MVC   LINE+32(6),=C'Failed'   yes, move word
         STRING64 'Systemname=',QUAMSYS,                               X
               INTO=(LINE+40,NEXTLINE)
         TR    LINE,TRTPRINT           get rid of garbage        RS0803
         LA    R1,QUAMTOD              pass TOD clock value        @RS
         BRASL R14,STCKCONV            convert TOD clock to decimal@RS
         STRING64 '    Status: ',                                      X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),           HH.MM.SS                        X
               INTO=(LINE+60,NEXTLINE)
         BRASL R14,SPACE1              Single Space                @RS
         LA    R6,QUAMLENG+32(R6)      next entry                  @RS
         JCT   R7,XCFD40               do until count = 0          @RS
*  endloop                                                         @RS
XCFD50   EQU   *                                                   @RS
         LM    R5,R7,TENWORDS          restore register            @RS
         LA    R6,QUAGLENG(R6)         next entry                  @RS
         JCT   R7,XCFD30               do until count = 0          @RS
*endloop                                                           @RS
         BRASL R14,BLANK1              emty line                   @RS
         J     XCFD99                  end
XCFD90   STRING64 '  IXCQUERY (XCF) FAILED - ',                        X
               ' Returncode=',(LRETCODE,,X),                           X
               ' Reasoncode=',(LRSNCODE,,X),                           X
               ' Size=',(WKCELL1,F,L),                                 X
               INTO=LINE                                           @RS
         BRASL R14,SPACE2              Double Space                @RS
.XCFD99  ANOP
XCFD99   END_PROC                                                  @RS
         TITLE 'SHOWMVS &REL - XCF Path Data'                      +JM
*---------------------------------------------------------------------*
*                                                                     *
* Path data:                                                          *
*                                                                     *
* PATHIN   Type: CTC                                                  *
*       Local/Remote: Sysname D1/  Device 03C9/                       *
*       Status: Restarting (Unconnected)                              *
*       Path retry limit: 10  Current path retry count: 0             *
*       Cumulative number of restarts: 3                              *
*       Path max message limit: 750                                   *
*       Current number of 1K blocks of message buffer space in use: 0 *
*       Number of times max message limit reached: 0                  *
*                                                                     *
* PATHOUT  Type: CTC                                                  *
*       Local/Remote: Sysname D1/  Device 03CB/                       *
*       Status: Restarting (Unconnected)                              *
*       Path retry limit: 10  Current path retry count: 0             *
*       Cumulative number of restarts: 3                              *
*       Path max message limit: 750                                   *
*       Current number of 1K blocks of message buffer space in use: 0 *
*       Total number of signals sent: 0                               *
*       Current number of signals pending transfer: 0                 *
*       Number of signal requests satisfied while path not busy: 0    *
*       Number of signal requests satisfied by this path while busy: 0*
*       Transport Class name: DEFAULT                                 *
*                                                                     *
*   PATHIN   Type: LIST                                               *
*       Local/Remote: Sysname D1/D2                                   *
*       Status: Working                                               *
*       Path retry limit: 10  Current path retry count: 0             *
*       Cumulative number of restarts: 3                              *
*       Path max message limit: 750                                   *
*       Current number of 1K blocks of message buffer space in use: 24*
*       Number of times max message limit reached: 0                  *
*       Structure name: IXCPLEX_PATH2                                 *
*       Number of lists that remain available for use: 8              *
*       Number of other systems connected to this structure: 0        *
*       Number of list signalling paths started by this system: 0     *
*                                                                     *
* PATHOUT  Type: LIST                                                 *
*       Local/Remote: Sysname D1/D2                                   *
*       Status: Working                                               *
*       Path retry limit: 10  Current path retry count: 0             *
*       Cumulative number of restarts: 2                              *
*       Path max message limit: 750                                   *
*       Current number of 1K blocks of message buffer space in use: 28*
*       Total number of signals sent: 92448                           *
*       Current number of signals pending transfer: 0                 *
*       Number of signal requests satisfied while path not busy: 91673*
*       Number of signal requests satisfied by this path while busy: 7*
*       Transport Class name: DEFAULT                                 *
*       Structure name: IXCPLEX_PATH1                                 *
*       Number of lists that remain available for use: 9              *
*       Number of other systems connected to this structure: 0        *
*       Number of list signalling paths started by this system: 0     *
*                                                                     *
* Pending message data:                                               *
*                                                                     *
*   Device: 03CB                                                      *
*         Member token of message sending message: 020004A800000008   *
*         ASID of member sending message: 6 0006                      *
*         Home ASID that initiated message out request: 6 0006        *
*         Name of system that is target of message:                   *
*         Name of transport class: DEFAULT                            *
*         Device type: CTC  Address: 03CB                             *
*                                                                     *
* System entries data:                                                *
*                                                                     *
*   Outbound  System name: D2                                         *
*       Transport class: DEFAULT                                      *
*       * The following counts refer to this transport class          *
*       4 - Current number of paths in service                        *
*       0 - Number of times a no path condition occured               *
*       0 - Number of times a no buffer condition occured             *
*       3750 - Max number of 1K blocks of message buffer space permitt*
*       38 - Current number of 1K blocks of message buffer space in us*
*       750 - Customer defined maxmsg value. Default number of 1K bloc*
*       956 - Length of longest message that fits the buffer size     *
*       * The following values may wrap                               *
*       11904536 - Messages sent whose length exceeded the buffer size*
*       5755056 - Number of messages sent whose length fit the buffer *
*       0 - Number of messages sent whose length was smaller than buff*
*       3997673 - Messages sent whose length exceeded the buffer size *
*                                                                     *
*   Inbound   System name: D2                                         *
*       4 - Current number of paths in service                        *
*       0 - Number of times a no path condition occured               *
*       0 - Number of times a no buffer condition occured             *
*       3000 - Max number of 1K blocks of message buffer space permitt*
*       90 - Current number of 1K blocks of message buffer space in us*
*       750 - Customer defined maxmsg value. Default number of 1K bloc*
*                                                                     *
*   Local     System name: D1                                         *
*       Transport class: DEFAULT                                      *
*       * The following counts refer to this transport class          *
*       0 - Number of times a no buffer condition occured             *
*       750 - Max number of 1K blocks of message buffer space permitte*
*       0 - Current number of 1K blocks of message buffer space in use*
*       750 - Customer defined maxmsg value. Default number of 1K bloc*
*       956 - Length of longest message that fits the buffer size     *
*       * The following values may wrap                               *
*       0 - Messages sent whose length exceeded the buffer size (trans*
*       913 - Number of messages sent whose length fit the buffer size*
*       0 - Number of messages sent whose length was smaller than buff*
*       0 - Messages sent whose length exceeded the buffer size (signi*
*                                                                     *
* Source/destination data:                                            *
*                                                                     *
*     System      Group       Member              Signals    Signals  *
*     name        name        name                   Sent   Received  *
*     D2          SYSGRS      D2                   944554          9  *
*     D1          SYSGRS      D1                   953391     953391  *
*     D3          SYSGRS      D3                     8837     953382  *
*                                                                     *
* and so on                                                           *
*                                                                     *
*---------------------------------------------------------------------*
PATH00   BEGIN_PROC KW=PATH,AUTH=YES                             RS0302
         CNOP  0,4                     boundary
         STRING64 '  Path data:',INTO=LINE                       RS0500
         BRASL R14,SPACE2              double space              RS0500
         XC    GETMAIN_LEN_ADDR(8),GETMAIN_LEN_ADDR clear RS0508
         BRASL R14,WORKADDR            allocate XCF Answer Area
         LR    R3,R1                   remember getmained storage
         USING AMDAREA,R3              IXCYAMDA Answer area
         AHI   R0,-4096                prevent 0C4 on last page  RS0601
         ST    R0,AMDATLEN             try this length first
         LR    R4,R0                                             RS1200
         LA    R2,0(R3,R4)                                       RS1200
         BCTR  R2,0                                              RS1200
         PGSER R,FIX,A=AMDAREA,EA=(R2),ECB=0 FIX PAGE            RS1200
         SYSEVENT DONTSWAP             PGFIX/LRA
*
*        Find out how much storage is needed for the answer area
*
         IXCMG DATAAREA=AMDAREA,DATALEN=AMDATLEN,                      X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,                      X
               MF=(E,IXCMG,COMPLETE)
         SYSEVENT OKSWAP               undo DONTSWAP
         PGSER R,FREE,A=AMDAREA,EA=(R2),ECB=0 FREE PAGE          RS1200
         CLC   LRETCODE,=F'4'          Return code 4?
         JL    PATH1000                less, ok
         JH    PATH9020                greater than, yes
         CLC   LRSNCODE,=F'4'          Return code 4?
         JNE   PATH9020                no.
         L     R4,AMDATLEN             Load length of answer area
         AR    R4,R4                   double it
*
*        Allocate a answer area
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    PATH0004                yes, jump
         GETMAIN RU,LV=(R4),BNDRY=PAGE allocate PATH work area
         J     PATH0008
PATH0004 DS    0H
         LR    R0,R4                   Length of storage
         LA    R1,1                    LOC=ANY
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
PATH0008 DS    0H
         LR    R3,R1                   answer goes here
         ST    R4,AMDATLEN             Save length of answer area
         STM   R3,R4,GETMAIN_LEN_ADDR  save addr and length
         LA    R2,0(R3,R4)
         BCTR  R2,0
         PGSER R,FIX,A=AMDAREA,EA=(R2),ECB=0 FIX PAGE
         SYSEVENT DONTSWAP             PGFIX/LRA
*
*        Retrieve IXCMG information
*
         IXCMG DATAAREA=AMDAREA,DATALEN=AMDATLEN,                      X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,                      X
               MF=(E,IXCMG,COMPLETE)
         SYSEVENT OKSWAP               undo DONTSWAP
         PGSER R,FREE,A=AMDAREA,EA=(R2),ECB=0 FREE PAGE
         CLC   LRETCODE,=F'0'          Return code 0?
         JNE   PATH9030                No.
PATH1000 DS    0H
*        STRING64 'XCF - Tuning and Capacity Planning Data',INTO=LINE
*        BRASL R14,SPACE2              Double Space
*#SNAP ADDR=AMDAREA,LENGTH=AMDAREA_LEN
         ICM   R5,B'1111',AMDA#PTH     Any path entries?
         JZ    PATH1098                no
         L     R4,AMDAOPTH             Offset to path entries
         AR    R4,R3                   Start of Path entries
         USING AMDPATH,R4              Path data entry
*delete  STRING64 '  Path data:',INTO=LINE move to beginning     RS0500
*delete  BRASL R14,SPACE2              double space              RS0500
PATH1005 DS    0H
*#SNAP ADDR=AMDPATH,LENGTH=AMDPATH_LEN
         STRING64 'PATHIN ',INTO=WKCELL1
         TM    AMDPDIR,AMDPINB         Inbound path?
         JO    PATH1006                yes
         STRING64 'PATHOUT',INTO=WKCELL1
PATH1006 DS    0H
         LA    R1,=CL7'none'           none
         CLC   AMDPPHDT,=A(AMHDTNA)    Hardware type - n/a
         JE    PATH1010                yes
         LA    R1,=CL7'CTC '           CTC
         CLC   AMDPPHDT,=A(AMHDTCTC)   Hardware CTC (type 1)
         JE    PATH1010                yes
         LA    R1,=CL7'CF  '           CF
         CLC   AMDPPHDT,=A(AMHDTSTR)   Hardware CF (type 2)
         JE    PATH1010                yes
         LA    R1,=CL7'LIST'           list
         CLC   AMDPPHDT,=A(AMHDTLST)   Hardware list w/n CF (type 3)
         JE    PATH1010                yes
         LA    R1,=C'Unknown'          unknown
PATH1010 DS    0H
         STRING64 4X,(WKCELL1,7),'  Type: ',((R1),7),                  X
               INTO=LINE
         BRASL R14,SPACE1              single space
         CLC   AMDPPHDT,=A(AMHDTCTC)   Hardware CTC (type 1)
         JNE   PATH1015                no
         STRING64 10X,'Local/Remote: Sysname ',                        X
               (AMDPNAME,,L),'/',(AMDPONME,,L),                        X
               '  Device ',(AMDPDEV,,L),'/',(AMDPODEV,,L),             X
               INTO=LINE
         J     PATH1018
PATH1015 DS    0H
         STRING64 10X,'Local/Remote: Sysname ',                        X
               (AMDPNAME,,L),'/',(AMDPONME,,L),                        X
               INTO=LINE
PATH1018 DS    0H
         BRASL R14,SPACE1              single space
         SR    R15,R15                 clear for IC
         BRASL R1,PATH1024
         DC    AL1(AMDPSTRT),CL15'Starting       '
         DC    AL1(AMDPREST),CL15'Restarting     '
         DC    AL1(AMDPWORK),CL15'Working        '
         DC    AL1(AMDPSTOP),CL15'Stopping       '
         DC    AL1(AMDPLINK),CL15'Not connected  '
         DC    AL1(AMDPNOP),CL15'Not operational'
         DC    AL1(AMDPFAIL),CL15'Stop failed.   '
         DC    AL1(AMDPRBLD),CL15'Rebuilding     '
         DC    X'00',0H'0'             end of table
*PATH1023 TM    AMDPFLAG,*-*            check properties
PATH1024 DS    0H
         IC    R15,0(,R1)              pick up TM mask
*        EX    R15,PATH1023            test status
         EX    R15,=S(X'100'(R9),20(R4)) TM    AMDPFLAG,*-*
         JO    PATH1035                jump if on
         LA    R1,16(,R1)              Skip entry
         CLI   0(R1),0                 end of table?
         JNE   PATH1024                not yet, loop
         BRASL R1,PATH1030
         DC    AL1(AMDPQSCG),CL15'Quiescing      '
         DC    AL1(AMDPQSCD),CL15'Quiesced       '
         DC    X'00',CL15'unknown        '
*PATH1031 TM    AMDPSTA2,*-*            check properties
PATH1030 DS    0H
         IC    R15,0(,R1)              pick up TM mask
*        EX    R15,PATH1031            test status
         EX    R15,=S(X'100'(R9),21(R4)) TM    AMDPSTA2,*-*
         JO    PATH1035                jump if on
         LA    R1,16(,R1)              Skip entry
         CLI   0(R1),0                 end of table?
         JNE   PATH1030                not yet, loop
PATH1035 DS    0H
         STRING64 10X,'Status: ',(1(R1),15,T),INTO=LINE
         TM    AMDPFLAG,AMDPREST       Restarting
         JZ    PATH1040                no
         CLC   AMDPONME,BLANKS         remote system here
         JNE   PATH1040                yes
         CLC   AMDPODEV,BLANKS         remote device here
         JNE   PATH1040                yes
         STRING64 (LINE,,T),' (Unconnected)',INTO=LINE
PATH1040 DS    0H
         BRASL R14,SPACE1              single space
         STRING64 10X,'Path retry limit: ',                            X
               (AMDPMRET,F,L),                                         X
               '  Current path retry count: ',(AMDP#RET,F,L),          X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Cumulative number of restarts: ',(AMDP#RST,F,L),X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Path max message limit: ',                      X
               (AMDPMXMS,F,L),                                         X
               INTO=LINE
         BRASL R14,SPACE1              single space
         CLC   AMDPPHDT,=A(AMHDTSTR)   Hardware type CF (type 2)
         JE    PATH1050                yes
         STRING64 10X,'Current number of 1K blocks of message buffer spX
               ace in use: ',(AMDP#USE,F,L),                           X
               INTO=LINE
         BRASL R14,SPACE1              single space
         TM    AMDPDIR,AMDPINB         Inbound path?
         JO    PATH1045                yes
         STRING64 10X,'Total number of signals sent: ',(AMDP#SIG,F,L), X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Current number of signals pending transfer: ',  X
               (AMDP#ACT,F,L),                                         X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Number of signal requests satisfied while path nX
               ot busy: ',                                             X
               (AMDP#SUS,F,L),                                         X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Number of signal requests satisfied by this pathX
                while busy: ',(AMDP#APP,F,L),                          X
               INTO=LINE
         BRASL R14,SPACE1              single space
         J     PATH1050
PATH1045 DS    0H
         STRING64 10X,'Number of times max message limit reached: ',   X
               (AMDP#IBR,F,L),                                         X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Average I/O transfer time: ',(AMDPIOXT,F,L),    X
               INTO=LINE                                         RS0204
         BRASL R14,SPACE1              single space              RS0204
PATH1050 DS    0H
         TM    AMDPDIR,AMDPOUTB        outbound path?
         JZ    PATH1055                no
         STRING64 10X,'Transport Class name: ',AMDPTCN,INTO=LINE
         BRASL R14,SPACE1              single space
PATH1055 DS    0H
         CLC   AMDPPHDT,=A(AMHDTSTR)   Hardware type lower than 2
         JL    PATH1060                yes
         CLC   AMDPPHDT,=A(AMHDTLST)   Hardware type greater than 3
         JH    PATH1060                yes
         LA    R6,AMDPPHDD             Path hardware descriptor
         USING AMSTRHDD,R6
         STRING64 10X,'Structure name: ',AMSTRNAM,                     X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Number of lists that remain available for',     X
               ' use: ',(AMSTR#AV,F,L),                                X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Number of other systems connected to this structX
               ure: ',(AMSTR#OD,F,L),                                  X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Number of list signalling paths started by this X
               system: ',(AMSTR#LP,F,L),                               X
               INTO=LINE
         BRASL R14,SPACE1              single space
         DROP  R6
PATH1060 DS    0H
         BRASL R14,BLANK1              double space
         AH    R4,AMDPLENT             skip this entry
         JCT   R5,PATH1005
         J     PATH2000
         DROP  R4
PATH1098 DS    0H
         STRING64 4X,'No path data',INTO=LINE  was 10X           RS0500
         BRASL R14,SPACE2              double space
PATH2000 DS    0H
         STRING64 '  Pending message data:',INTO=LINE            RS0500
         BRASL R14,SPACE2              double space              RS0500
         ICM   R5,B'1111',AMDA#MPE     Any pending messages?
         JZ    PATH2098                no
         L     R4,AMDAOMPE             Offset to pending messages
         AR    R4,R3                   Start of Path entries
         USING AMDMPEND,R4             Pending messages entry
*delete  STRING64 '  Pending message data:',INTO=LINE            RS0500
*delete  BRASL R14,SPACE2              double space              RS0500
PATH2010 DS    0H
*#SNAP ADDR=AMDMPEND,LENGTH=AMDMPEND_LEN
         STRING64 '    Device: ',AMDMDEVN,INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Member token of message sending message: ',     X
               (AMDMTOKN,,X),INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'ASID of member sending message: ',              X
               (AMDMASID,H,L),1X,      ASID (decimal)                  X
               (AMDMASID,,X),          ASID (hex)                      X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Home ASID that initiated message out request: ',X
               (AMDMHOME,H,L),1X,      ASID (decimal)                  X
               (AMDMHOME,,X),          ASID (hex)                      X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Name of system that is target of message: ',    X
               AMDMTSNM,                                               X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Name of transport class: ',                     X
               AMDMTCN,                                                X
               INTO=LINE
         BRASL R14,SPACE1              single space
         CLC   AMDMPHDT,=A(AMHDTNA)    Hardware type - n/a
         JE    PATH2040                yes
         LA    R6,AMDMPHDD             Path hardware descriptor
         CLC   AMDMPHDT,=A(AMHDTCTC)   Hardware type CTC
         JE    PATH2020                yes
         CLC   AMDMPHDT,=A(AMHDTSTR)   Hardware type CF
         JE    PATH2030                yes
         CLC   AMDMPHDT,=A(AMHDTLST)   Hardware type list w/n CF
         JE    PATH2030                yes
PATH2020 DS    0H
         USING AMCTCHDD,R6
         STRING64 10X,'Device type: CTC  Address: ',AMCTCDEV,INTO=LINE
         BRASL R14,SPACE1               single space
         J     PATH2040
         DROP  R6
PATH2030 DS    0H
         USING AMSTRHDD,R6
         STRING64 10X,'Structure name: ',AMSTRNAM,                     X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Number of lists that remain available for',     X
               ' use: ',(AMSTR#AV,F,L),                                X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Number of other systems connected to this structX
               ure: ',(AMSTR#AV,F,L),                                  X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'Number of list signalling paths started by this X
               system: ',(AMSTR#LP,F,L),                               X
               INTO=LINE
         BRASL R14,SPACE1              single space
         DROP  R6
PATH2040 DS    0H
         BRASL R14,BLANK1              double space
         AH    R4,AMDMLENT             skip this entry
         JCT   R5,PATH2010
         J     PATH3000
         DROP  R4
PATH2098 DS    0H
         STRING64 4X,'No pending messages',INTO=LINE  was 10X    RS0500
         BRASL R14,SPACE2              Double space
PATH3000 DS    0H
         ICM   R5,B'1111',AMDA#SYS     Any system entries?
         JZ    PATH3030                no
         L     R4,AMDAOSYS             Offset to system entries
         AR    R4,R3                   Start to system entries
         USING AMDSYS,R4               System entry
         STRING64 '  System entries data:',INTO=LINE
         BRASL R14,SPACE2              double space
PATH3005 DS     0H
*#SNAP ADDR=AMDSYS,LENGTH=AMDSYS_LEN
         LA    R1,=CL8'Inbound '
         TM    AMDSYDIR,AMDSYIN        Inbound
         JO    PATH3010                yes
         LA    R1,=CL8'Outbound'
         TM    AMDSYDIR,AMDSYOUT       Outbound
         JO    PATH3010                yes
         LA    R1,=CL8'Local   '
         TM    AMDSYDIR,AMDSYLCL       Local
         JO    PATH3010                yes
         LA    R1,=CL8'unknown '
PATH3010 DS    0H
         STRING64 4X,((R1),8),'  System name: ',AMDSYNME,INTO=LINE
         BRASL R14,SPACE1              single space
         TM    AMDSYDIR,AMDSYIN        Inbound
         JO    PATH3015                yes
         STRING64 10X,'Transport class: ',AMDSYTCN,                    X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'* The following counts refer to this transport cX
               lass',INTO=LINE
         BRASL R14,SPACE1              single space
PATH3015 DS    0H
         TM    AMDSYDIR,AMDSYLCL       Local
         JO    PATH3020               yes
         STRING64 10X,(AMDSYPTH,F,L),                                  X
               ' - Current number of paths in service',                X
               INTO=LINE
         BRASL R14,SPACE1             single space
         STRING64 10X,(AMDSYNOP,F,L),                                  X
               ' - Number of times a no path condition occured',       X
               INTO=LINE
         BRASL R14,SPACE1             single space
PATH3020 DS    0H                     outbound
         STRING64 10X,(AMDSYBSY,F,L),                                  X
               ' - Number of times a no buffer condition occured',     X
               INTO=LINE
         BRASL R14,SPACE1             single space
         STRING64 10X,(AMDSYMXB,F,L),                                  X
               ' - Max number of 1K blocks of message buffer space permX
               itted for system',                                      X
               INTO=LINE
         BRASL R14,SPACE1             single space
         STRING64 10X,(AMDSYUSE,F,L),                                  X
               ' - Current number of 1K blocks of message buffer space X
               in use on system',                                      X
               INTO=LINE
         BRASL R14,SPACE1             single space
         STRING64 10X,(AMDSYSMX,F,L),                                  X
               ' - Customer defined maxmsg value. Default number of 1K X
               blocks of message buffer space',                        X
               INTO=LINE
         BRASL R14,SPACE1             single space
         TM    AMDSYDIR,AMDSYIN        Inbound
         JO    PATH3025                yes
         STRING64 10X,(AMDSYTCL,F,L),                                  X
               ' - Length of longest message that fits the buffer',    X
               ' size',INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,'* The following values may wrap',INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,(AMDSYBIG,F,L),                                  X
               ' - Messages sent whose length exceeded the buffer size X
               (trans class)',                                         X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,(AMDSYFIT,F,L),                                  X
               ' - Number of messages sent whose length fit the buffer X
               size',                                                  X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,(AMDSYSML,F,L),                                  X
               ' - Number of messages sent whose length was smaller thaX
               n buffer size',                                         X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 10X,(AMDSYOVR,F,L),                                  X
               ' - Messages sent whose length exceeded the buffer size X
               (signal service)',                                      X
               INTO=LINE
         BRASL R14,SPACE1              single space
PATH3025 DS    0H
         BRASL R14,BLANK1              double space
         AH    R4,AMDSYLEN             skip this entry
         JCT   R5,PATH3005
         J     PATH4000
         DROP  R4
PATH3030 DS    0H
         STRING64 10X,'No system entries',INTO=LINE
         BRASL R14,SPACE2              Double space
PATH4000 DS    0H
         ICM   R5,B'1111',AMDA#SD      Any source/destinations?
         JZ    PATH4098                no
         L     R4,AMDAOSD              Offset to source/destination
         AR    R4,R3                   Start of source/destination data
         USING AMDSD,R4                source/destination data entries
         STRING64 '  Source/destination data:',INTO=LINE
         BRASL R14,SPACE2              double space
         STRING64 6X,'System      Group       Member              SignaX
               ls    Signals',                                         X
               INTO=LINE                                        +JM0199
         BRASL R14,SPACE1              single space
         STRING64 6X,'name        name        name                   SeX
               nt   Received',                                         X
               INTO=LINE                                        +JM0199
         BRASL R14,SPACE1              single space             +JM0199
PATH4010 DS     0H                                              +JM0199
         STRING64 6X,AMDSSNAM,                                         X
               4X,AMDSGRP,                                             X
               4X,AMDSMEM,                                             X
               1X,(AMDSSCNT,F,R10B),                             RS0107X
               1X,(AMDSRCNT,F,R10B),                             RS0107X
               INTO=LINE                                        +JM0199
         BRASL R14,SPACE1              single space             +JM0199
         AH    R4,AMDSLENT             skip this entry          +JM0199
         JCT   R5,PATH4010                                      +JM0199
         BRASL R14,BLANK1              blank line               +JM0199
         J     PATH9000                                         +JM0199
         DROP  R4                                               +JM0199
PATH4098 DS    0H
         STRING64 10X,'No source/destination entries',INTO=LINE
         BRASL R14,SPACE2              double space
PATH9000 DS    0H
         LM    R1,R2,GETMAIN_LEN_ADDR  load addr and length
         LTR   R1,R1                   did we do a getmain
         JZ    PATH99                  no
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    PATH9010                yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free IXCM work area
         J     PATH99
PATH9010 DS    0H
         LR    R0,R2                   length for FREEMAIN
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES Free IXCM workarea
         J     PATH99
PATH9020 DS    0H
         STRING64 '  IXCMG-1 FAILED - ',                               X
               ' Returncode=',(LRETCODE,,X),                           X
               ' Reasoncode=',(LRSNCODE,,X),                           X
               ' Size=',(AMDATLEN,F,L),                                X
               INTO=LINE
         BRASL R14,SPACE2          <== double space
         J     PATH9000                Freemain if needed
PATH9030 DS    0H
         STRING64 '  IXCMG-2 FAILED - ',                               X
               ' Returncode=',(LRETCODE,,X),                           X
               ' Reasoncode=',(LRSNCODE,,X),                           X
               ' Size=',(AMDATLEN,F,L),                                X
               INTO=LINE
         BRASL R14,SPACE2              double space
         J     PATH9000                Freemain if needed
.PATH99  ANOP
PATH99   END_PROC
         TITLE 'SHOWMVS &REL - Couple Datsets'                   RS0504
*---------------------------------------------------------------------*
*  Couple DS:                                                         *
*   LPAR     No   Id   Type  Joined to XCF       Checkpoint time      *
*   AL10     0001 903A 2066  2004-04-02 02.55.16 2004-04-19 22.11.41  *
*     SYS2.AL01.PRIM.XCFCDS                       SYSN11   2002-10-31 *
*     SYS2.AL01.SEC.XCFCDS                        SYSN59   2002-10-31 *
*                                                                     *
*   AL20     0005 904A 2066  2004-03-28 10.25.15 2004-04-19 22.11.38  *
*     SYS2.AL01.PRIM.XCFCDS                       SYSN11   2002-10-31 *
*     SYS2.AL01.SEC.XCFCDS                        SYSN59   2002-10-31 *
*                                                                     *
*   ALA0     0002 903A 2066  2004-03-28 10.30.51 2004-04-19 22.11.38  *
*     SYS2.AL01.PRIM.XCFCDS                       SYSN11   2002-10-31 *
*     SYS2.AL01.SEC.XCFCDS                        SYSN59   2002-10-31 *
*                                                                     *
*   ALB0     0006 904A 2066  2004-03-28 10.31.08 2004-04-19 22.11.40  *
*     SYS2.AL01.PRIM.XCFCDS                       SYSN11   2002-10-31 *
*     SYS2.AL01.SEC.XCFCDS                        SYSN59   2002-10-31 *
*                                                                     *
*   ALF0     0003 903A 2066  2004-04-01 18.13.36 2004-04-19 22.11.41  *
*     SYS2.AL01.PRIM.XCFCDS                       SYSN11   2002-10-31 *
*     SYS2.AL01.SEC.XCFCDS                        SYSN59   2002-10-31 *
*                                                                     *
*---------------------------------------------------------------------*
XCFDS00  BEGIN_PROC KW=XCFDS,AUTH=YES
         L     R3,CVTECVT
         USING ECVT,R3
         L     R4,ECVTCPLX-ECVT(,R3)   CPLX
         LTR   R4,R4                   = 0 ?
         JZ    XCFDS99                 yes leave
         USING CPLX,R4
         MODESET EXTKEY=ZERO        <- switch to KEY=0
         ICM   R5,B'1111',CPLXPTR      Ptr ok?
         JZ    XCFDS99                 zero leaver
         USING CPLXDS,R5
         STRING64 '  Couple DS:',INTO=LINE
         BRASL R14,SPACE2              new line
* -------------------------------------------------------------- AF0911
         STRING64 3X,'Sysplex (Re-)Initialisation at',2X,        AF0911X
               INTO=LINE                                         AF0911
         LA    R1,CPLXTOD              cold start TOD            AF0911
         BRASL R14,STCKCONV            calculate the time/day    AF0911
         STRING64 STCKDATE,1X,(STCKTIME,8),INTO=(LINE+34,20)     AF0911
         BRASL R14,SPACE2              new line                  AF0911
* -------------------------------------------------------------- AF0911
         STRING64 3X,'LPAR',5X,                                        X
               'No',3X,                                                X
               'Id',3X,                                                X
               'Type',2X,                                              X
               'Joined to XCF',7X,                                     X
               'Checkpoint time',                                      X
               INTO=LINE
         BRASL R14,SPACE1              new line
         STRING64 5X,'DS-Name',37X,'Volser',3X,                        X
               'Dataset Creation',INTO=LINE
*loop
XCFDS10  DS 0H
         ICM   R6,B'1111',CPLXDSPTR
         JZ    XCFDS99
         USING CPLXDSE,R6
         CLI   CPLXDSNUM,X'00'         Entry valid?
         JE    XCFDS99
*        #SNAP ADDR=(R6),LENGTH=256    Debug code
*
         STRING64 3X,CPLXLPAR,1X,(CPLXLPARNO,2,X),1X,(CPLXCPUID,2,X),  X
               1X,(CPLXCPTYP,2,X),                                     X
               INTO=LINE
         LA    R1,CPLX_JOIN            date/time joined to XCF
         BRASL R14,STCKCONV            calculate the time/day
         STRING64 STCKDATE,1X,(STCKTIME,8),INTO=(LINE+28,20)
*
         LA    R1,CPLXCLCK1            Checkpoint
         BRASL R14,STCKCONV            calculate the time/day
         STRING64 STCKDATE,1X,(STCKTIME,8),INTO=(LINE+48,20)
         BRASL R14,SPACE1              new line
*---
         STRING64 5X,CPLXPRI,CPLXPRIVOL,INTO=LINE
*
         MVC   WKCELL2,CPLXPRICRE      PRI XCF DS creation date/time
         LA    R1,WKCELL2
         BRASL R14,STCKCONV            calculate the time/day
         STRING64 STCKDATE,1X,(STCKTIME,8),INTO=(LINE+58,20)
         BRASL R14,SPACE1              new line
*
         STRING64 5X,CPLXSEC,CPLXSECVOL,INTO=LINE
*
         LA    R1,CPLXSECCRE           SEC XCF DS creation date/time
         BRASL R14,STCKCONV            calculate the time/day
         STRING64 STCKDATE,1X,(STCKTIME,8),INTO=(LINE+58,20)
*
         BRASL R14,SPACE2              new line and 1 spaceline
         LA    R5,4(R5)
         J     XCFDS10
*endloop
.XCFDS99 ANOP
XCFDS99  DS 0H
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
         END_PROC
         TITLE 'SHOWMVS &REL - Coupling Facility Data'             +DL
*---------------------------------------------------------------------*
*                                                                  +DL*
*Coupling Facility Data                                            +DL*
*                                                                  +DL*
*   CFLevel supported by operating system: 4                       +DL*
*                                                                  +DL*
*   CFRM active policy data                                        +DL*
*                                                                  +DL*
*      Policy Name                : CFRMPOL0                       +DL*
*      Time of last update        : 1998-06-25   10.02.22          +DL*
*      Time policy was activated                                   +DL*
*         via operator command    : 1998-06-25   10.16.50          +DL*
*                                                                  +DL*
*   CFName: CFT101                                                 +DL*
*      Coupling Facility          : 009672.A10.HTC.01.000000000133 +DL*
*                                   Partition: 8      CPCID: 00    +DL*
*                                   Storage is volatile/nonvolatile+DL*
*      CF architected functional                                   +DL*
*         level                   : 2                              +DL*
*                                                                  +DL*
*      CF devices       CU number : 0FFA                           +DL*
*                   Device number : 0FEE                           +DL*
*                   Device number : 0FEF                           +DL*
*                                                                  +DL*
*      Total facility space size  : 59392 k                        +DL*
*      Total free space size      : 50176 k                        +DL*
*      Total dumping space size   : 4096 k                         +DL*
*      Storage increment size     : 256 k                          +DL*
*                                                                  +DL*
*      Structures                                                  +DL*
*                                                                  +DL*
*      StructureName     Type   Status    Size(k)  Max Size(k)  Min Si*
*                                                                     *
*      ISTGENERIC        List   Active      1024        2048         5*
*      DSNDB2M_GBP0      Cache  Rebuild     2048        3072         5*
*                                                                  +DL*
*---------------------------------------------------------------------*
CFD00    BEGIN_PROC KW=CFD,AUTH=YES                              RS0302
         STRING64 '&TITLEPFX.Coupling Facility Data',INTO=LINE     +DL
         BRASL R14,SPACE2              Double Space                +DL
         IXCQUERY REQINFO=COUPLE,CFLEVEL=WKCELL1                   +DL
         STRING64 '  CFLevel supported by operating system: ',     +DL X
               (WKCELL1,F,L),INTO=LINE                             +DL
         BRASL R14,SPACE2              Double Space                +DL
*        Allocate a work area for QUAHDR + QUACF                   +DL
         XC    GETMAIN_LEN_ADDR(8),GETMAIN_LEN_ADDR clear        RS0508
         LHI   R2,QUAHLENG+(QUACFLENG*32) Length of Anwer-Area   RS1201
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                   +DL
         JO    CFD01                   yes, jump                   +DL
         GETMAIN RU,LV=(R2)                                        +DL
         J     CFD02                                               +DL
CFD01    DS    0H                                                  +DL
         LR    R0,R2                   Length of storage           +DL
         LA    R1,1                    LOC=ANY                     +DL
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES             RS1002
         LR    R2,R0
CFD02    DS    0H                                                  +DL
         STM   R1,R2,GETMAIN_LEN_ADDR  addr, length              JM0900
         LR    R3,R1                   remember getmained storage  +DL
         USING QUAHDR,R3               tell assembly               +DL
         IXCQUERY REQINFO=CF,CFNAME=NO_CFNAME,                     +DL X
               ANSAREA=QUAHDR,ANSLEN=ANSLEN,                       +DL X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   +DL
         CH    R0,=Y(QUAARSNNOCFRMDSN) No CFRM                     +XX
         JE    CFD97                   No
         CH    R0,=Y(QUAARSNNOCFRMPOL) No CF activated           RS1201
         JE    CFD97                   No
         CLC   LRETCODE,=F'4'          Return code >4?           RS1201
         JH    CFD90                   Yes, display RC/RSN       RS1201
         ICM   R4,B'1111',QUAH#REC     check records             RS1201
         JNZ   CFD05                     Process recorde         RS1201
         STRING64 '  No Coupling Facility entries were provided',  +DL X
               INTO=LINE                                           +DL
         J     CFD95                   nothing to do               +DL
CFD05    DS    0H                                                  +DL
         L     R4,QUAHSGOF             offset from QUAHDR to 1. REC+DL
         LA    R4,QUAHDR(R4)           point to first CF record    +DL
         USING QUACF,R4                tell assembly               +DL
         L     R2,QUAH#REC             record counter              +DL
         STRING64 '  CFRM active policy data',INTO=LINE            +DL
         BRASL R14,SPACE2              Double Space                +DL
         STRING64 '    Policy Name                : ',QUACFPOLNAME,    X
               INTO=LINE                                           +DL
         BRASL R14,SPACE1              Single Space                +DL
         LA    R1,QUACFUPDTIME         pass TOD clock value        +DL
         BRASL R14,STCKCONV            convert TOD clock to decimal+DL
         STRING64 '    Time of last update        : ',             +DL X
               STCKDATE,2X,            YYYY-MM-DD                  +DL X
               (STCKTIME,8),           HH.MM.SS                    +DL X
               INTO=LINE                                           +DL
         BRASL R14,SPACE1              Single Space                +DL
         STRING64 '    Time policy was activated   ',INTO=LINE     +DL
         BRASL R14,SPACE1              Single Space                +DL
         LA    R1,QUACFSETTIME         pass TOD clock value        +DL
         BRASL R14,STCKCONV            convert TOD clock to decimal+DL
         STRING64 '       via operator command    : ',                 X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),           HH.MM.SS                        X
               INTO=LINE                                           +DL
         BRASL R14,SPACE1              Single Space              RS1108
         AIF   (NOT D'CVTH7730).CFD10  z/OS R8?                  RS1108
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS1108
         JZ    CFD10                   no, jump                  RS1108
         STRING64 '    Event Managment            : ',INTO=LINE  RS1108
         ST    R4,WKCELL1              Save R4                   RS1108
         LA    R4,LINE+0(R15)                                    RS1108
         STRING64 'Policy based',INTO=((R4),12)                  RS1108
        #STATUS QUACFPOLSTATUS,QUACFMSGBASEDEVENTMGMT,           RS1108X
               'Message based'                                   RS1108
         BRASL R14,SPACE2              Double Space              RS1108
         L     R4,WKCELL1              Restore R4                RS1108
*loop                                  Loop through the CFs        +DL
.CFD10   ANOP                                                    RS1108
CFD10    DS    0H                                                  +DL
*        #SNAP ADDR=(R4),LENGTH=QUACFLENG        debug code
         BRASL R14,WORKADDR            allocate XES Answer Area    +DL
         LR    R5,R1                   remember getmained storage  +DL
         USING IXLYAMDAREA,R5          tell assembly               +DL
         AHI   R0,-4096                prevent 0C4 on last page  RS0507
         STM   R0,R1,WKCELL1           store length                +DL
         LR    R6,R0                                             RS0507
         ST    R2,WKCELL2              save R2                   RS0507
         LA    R2,0(R5,R6)             End of R5 index R6        RS0507
         BCTR  R2,0                    -1                        RS0507
         PGSER R,FIX,A=IXLYAMDAREA,EA=(R2),ECB=0 FIX PAGE        RS0507
         SYSEVENT DONTSWAP             PGFIX/LRA                 RS0507
         IXLMG DATAAREA=IXLYAMDAREA,DATALEN=WKCELL1,                   X
               CFNAME=QUACFNAME,HWSTATISTICS=YES,AMDALEVEL=1,    RS0107X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXLMGWK)    +DL
         SYSEVENT OKSWAP               undo DONTSWAP             RS0507
         PGSER R,FREE,A=IXLYAMDAREA,EA=(R2),ECB=0 FREE PAGE      RS0507
         L     R2,WKCELL2                                        RS0507
         CLC   LRETCODE,=F'0'          Return code 0?            RS0507
         JNE   CFD93                   No.                       RS0507
*        LTR   R15,R15                 Success?                    +DL
*        JNZ   CFD93                   No, error                   +DL
*
         STRING64 '  CFName: ',QUACFNAME,INTO=LINE              +DL0199
         BRASL R14,SPACE2              Single Space             +DL0199
         ICM   R6,B'1111',IXLYAMDAREA_CFENT@
         JNZ   CFD12     zero, if not connected from this system+DL0199
         USING IXLYAMDCF,R6            tell assembly               +DL
&X SETC 'The running system is not connected to this coupling facility'
         STRING64 8X,'&X',INTO=LINE
         BRASL R14,SPACE2              Double Space             +DL0199
         J     CFD50                   try next entry           +DL0199
CFD12    DS    0H                                               +DL0199
*        #SNAP ADDR=(R6),LENGTH=IXLYAMDCF_LEN    debug code
         LA    R7,IXLYAMDCF_ND         addr of Hardware Node Descr.+DL
         USING NDE,R7                  tell assembly               +DL
         STRING64 '    Coupling Facility          : ',             +DL X
               NDETYPE,'.',NDEMODEL,'.',NDEMFG,'.',                +DL X
               NDEPLANT,'.',NDESEQUENCE,                           +DL X
               INTO=LINE                                           +DL
         BRASL R14,SPACE1              Single Space                +DL
         STRING64 33X,'Partition: ',(NDEPARTITION,FL1,L),          +DL X
               6X,'CPCID: ',(NDECPCID,1,X),INTO=LINE               +DL
         BRASL R14,SPACE1              Single Space                +DL
         STRING64 33X,'Storage is volatile ',INTO=LINE             +DL
         TM    IXLYAMDCF_FLAGS,IXLYAMDCF_VOLATILE volatile storage?+DL
         JO    CFD15                   yes, skip                   +DL
         STRING64 'nonvolatile',INTO=LINE_CF_NV                    +DL
LINE_CF_NV    EQU LINE+44,11           nonvolatile storage         +DL
LINE_STR_TTY  EQU LINE+22,5            Structure Type              +DL
LINE_STR_STAT EQU LINE+29,7            Structure Status            +DL
LINE_STR_SIZE EQU LINE+38,7            Structure Size              +DL
LINE_STR_MXSZ EQU LINE+50,7            Structure Max Size          +DL
LINE_STR_MISZ EQU LINE+63,7            Structure Min Size          +DL
CFD15    DS    0H                                                  +DL
         BRASL R14,SPACE1              Single Space                +DL
         DROP  R7                                                  +DL
         STRING64 '    CF architected functional',INTO=LINE      +DL
         BRASL R14,SPACE1              Single Space                +DL
         STRING64 '       level                   : ',             +DL X
               (IXLYAMDCF_CFLEVEL,F,L),INTO=LINE                   +DL
         BRASL R14,SPACE2              Double Space                +DL
         STRING64 '    CF devices       CU number : ',             +DL X
               (IXLYAMDCF_CUID,2,X),INTO=LINE                      +DL
         BRASL R14,SPACE1              Single Space              RS0803
         ICM   R7,B'1111',IXLYAMDCF_SC@ addr of 1. subchannel entRS0803
         JZ    CFD25                                             RS0803
         USING IXLYAMDSC,R7                                        +DL
         DROP  R6                                                RS0107
         ST    R6,WKCELL1              Save R6                   RS0803
         AGO   .JRH0911                                          JH0911
         LHI   R6,8                                              RS0803
*  loop
CFD20    DS    0H                                                  +DL
         CLI   IXLYAMDSC_CHPIDS,X'FF'  Not used                  RS0803
         JE    CFD20_N                                           RS0803
         CLI   IXLYAMDSC_CHPIDSTYPE,X'00' Not used               RS0803
         JE    CFD20_N                                           RS0803
         IC    R0,IXLYAMDSC_CHPIDS                               RS0803
         STH   R0,WKCELL2                                        RS0803
         IOSCHPD CHPID=WKCELL2,        Get path                        X
               ACRONYM=WKCELL3,                                        X
               MF=(E,WORK256+50,COMPLETE)                        RS0803
         LR    R1,R15
         STRING64 26X,'Path : ',(IXLYAMDSC_CHPIDS,1,X),                X
               ' Type : ',(IXLYAMDSC_CHPIDSTYPE,1,X),                  X
               ' Acronym : ',(WKCELL3,5),INTO=LINE               RS0803
         BRASL R14,SPACE1              Single Space              RS0803
CFD20_N  DS    0H                                                RS0803
         LA    R7,1(R7)                Next CHPID                RS0803
         JCT   R6,CFD20                do until count = 0        RS0803
.JRH0911 ANOP                                                    JH0911
         ST    R3,WKCELL1+4        Save R3                       RS1011
         LA    R3,X'80'            Load initial working mask     JH0911
         LR    R6,R7               Preserve IXLYAMDSC § for "EX" JH0911
CFD20    DS    0H
*CFD20PIM TM IXLYAMDSC_PIM,*-* Physically installed chpids       JH0911
*         EX R3,CFD20PIM       Is CHPID physically installed ?   JH0911
         EX    R3,=S(X'100'(R9),15(R6)) CHPID slot installed ?   JH0911
         JZ    CFD20_N             ...jif not, skip              JH0911
         IC    R0,IXLYAMDSC_CHPIDS                               RS0803
         STH   R0,WKCELL2                                        RS0803
         IOSCHPD CHPID=WKCELL2,        Get path                        X
               ACRONYM=WKCELL3,                                        X
               MF=(E,WORK256+50,COMPLETE)                        RS0803
         LR    R1,R15
         STRING64 26X,'Path : ',(IXLYAMDSC_CHPIDS,1,X),                X
               ' Type : ',(IXLYAMDSC_CHPIDSTYPE,1,X),                  X
               ' Acronym : ',(WKCELL3,5),INTO=LINE               RS0803
         BRASL R14,SPACE1              Single Space              RS0803
CFD20_N  DS    0H                                                RS0803
         LA    R7,1(R7)                Next CHPID                RS0803
         SRL   R3,1                Move mask over 1 bit          JH0911
         LTR   R3,R3               Any more CHPID slots ?        JH0911
         JNZ   CFD20               ...jif so                     JH0911
         L     R3,WKCELL1+4        Restore R3                    RS1011
*  endloop                             Loop through the 8 bytes  RS0803
         BRASL R14,BLANK1              Empty line                RS0803
         L     R6,WKCELL1              Restore R6                RS0803
         USING IXLYAMDCF,R6            tell assembly             RS0107
         ICM   R7,B'1111',IXLYAMDCF_SC@ addr of 1. subchannel entRS0803
*                                       restore R7               RS0107
         JZ    CFD25                                             RS0803
         USING IXLYAMDSC,R7                                        +DL
*loop                                  Loop through the SCs        +DL
CFD21    DS    0H                                                  +DL
*        #SNAP ADDR=(R7),LENGTH=IXLYAMDSSCC_LEN  debug code      RS0803
         STRING64 17X,'Device number : ',(IXLYAMDSC_SCDEVICE,2,X),     X
               ' Subchannel : ',(IXLYAMDSC_SCNUMBER,2,X),              X
               ' Status : ',INTO=LINE                            RS0803
         ST    R4,WKCELL1              Save R4
         LA    R4,LINE+0(R15)                                    RS0803
        #STATUS IXLYAMDSC_SUBCH_STATUS,IXLYAMDSC_NOTOPERATIONAL,       X
               'Not Operational'                                 RS0803
        #STATUS IXLYAMDSC_SUBCH_STATUS,IXLYAMDSC_NOTINUSE,             X
               'Not used'                                        RS0803
        #STATUS IXLYAMDSC_SUBCH_STATUS,IXLYAMDSC_ACTIVE,               X
               'Active'                                          RS0803
         BRASL R14,SPACE1              Single Space              RS0803
         L     R4,WKCELL1              Restore R4
         ICM   R7,B'1111',IXLYAMDSC_SCNEXT addr of next STR entryRS0803
         JNZ   CFD21                   loop if present             +DL
*endloop                               Loop through the SCs        +DL
         DROP  R7                                                  +DL
CFD25    DS    0H                                                  +DL
         BRASL R14,BLANK1              Double Space                +JM
         L     R1,IXLYAMDCF_TS         number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING64 '    Total facility space size  : ',             +DL X
               ((R1),,L),' k',INTO=LINE                            +DL
         BRASL R14,SPACE1              Single Space                +DL
         L     R1,IXLYAMDCF_FS         number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING64 '    Total free space size      : ',             +DL X
               ((R1),,L),' k',INTO=LINE                            +DL
         BRASL R14,SPACE1              Single Space                +DL
         L     R1,IXLYAMDCF_TDS        number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING64 '    Total dumping space size   : ',             +DL X
               ((R1),,L),' k',INTO=LINE                            +DL
         BRASL R14,SPACE1              Single Space                +DL
         XR    R1,R1                                               +DL
         LH    R1,IXLYAMDCF_STGI       number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING64 '    Storage increment size     : ',             +DL X
               ((R1),,L),' k',INTO=LINE                            +DL
         BRASL R14,SPACE2              Double Space                +DL
         ST    R6,WKCELL1              Save R6                   RS0107
         ICM   R7,B'1111',IXLYAMDCF_MI@ addr of measurement data RS0107
         JZ    CFD29                                             RS0107
         USING IXLYAMDCFMI,R7                                    RS0107
*        #SNAP ADDR=(R7),LENGTH=IXLYAMDCFMI_LEN  Debug code      RS0107
         ICM   R11,B'1111',IXLYAMDCFMI_INFO@ addr of CFMI        RS0107
         JZ    CFD29                                             RS0107
         ICM   R6,B'1111',IXLYAMDCFMI_INFOELEM number of elementsRS0107
         JZ    CFD29                                             RS0107
         USING IXLYAMDCFMINFO,R11                                RS0107
         STRING64 4X,'Measurements',INTO=LINE                    RS0107
         BRASL R14,SPACE2              Double Space              RS0107
         STRING64 4X,'CPU#  Executiontime    Waittime',INTO=LINE RS0107
         BRASL R14,SPACE2              Double Space              RS0107
*loop                                                            RS0107
CFD26    DS    0H                                                RS0107
*        #SNAP ADDR=(R11),LENGTH=IXLYAMDCFMINFO_LEN Debug code   RS0107
         XC    WKCELL2,WKCELL2                                   RS0107
         XC    WKCELL3,WKCELL3                                   RS0107
         MVC   WKCELL2+4(4),IXLYAMDCFMINFO_PEXTIME               RS0107
         MVC   WKCELL3+4(4),IXLYAMDCFMINFO_PWTTIME               RS0107
         STRING64 4X,(IXLYAMDCFMINFO_PNUM,F,R4B),5X,                   X
               (WKCELL2,FD,R10B),2X,                                   X
               (WKCELL3,FD,R10B),INTO=LINE                       RS0107
         BRASL R14,SPACE1                                        RS0107
         LA    R11,IXLYAMDCFMINFO_LEN(R11) next one              RS0107
         JCT   R6,CFD26                do until count = 0        RS0107
*endloop                                                         RS0107
         BRASL R14,BLANK1              Space                     RS0107
         DROP  R11                                               RS0107
CFD29    DS    0H                                                RS0107
         L     R6,WKCELL1              Restore R6                RS0107
         USING IXLYAMDCF1,R6           same as IXLYAMDCF         RS0107
         ICM   R7,B'1111',IXLYAMDCF1_RFADDR remote facility      RS0107
         JZ    CFD29_9                                           RS0107
         USING IXLYAMDCFRF,R7                                    RS0107
*loop                                                            RS0107
CFD29_1  DS    0H                                                RS0107
*        #SNAP ADDR=(R7),LENGTH=IXLYAMDCFRF_LEN  Debug code      RS0107
         ICM   R7,B'1111',IXLYAMDCFRF_RFNEXT next one            RS0107
         JNZ   CFD29_1                 do until addr > 0         RS0107
*endloop                                                         RS0107
         BRASL R14,BLANK1              Space                     RS0107
CFD29_9  DS    0H                                                RS0107
         USING IXLYAMDCF,R6            back to IXLYAMDCF         RS0107
         STRING64 4X,'Structures',INTO=LINE                        +DL
         BRASL R14,SPACE2              Double Space                +DL
         L     R7,IXLYAMDCF_STR@       addr of first structure entr+DL
         STRING64 4X,'StructureName     Type   Status    Size(k)  Max',X
               ' Size(k)  Min Size(k)',INTO=LINE                   +DL
         BRASL R14,SPACE2              Double Space                +DL
*  loop                                Loop through the STRs       +DL
CFD30    DS    0H
         LTR   R7,R7                   is there a STR entry?       +DL
         JZ    CFD50                   no, skip                    +DL
         CLI   0(R7),X'21'             list/lock structure?        +DL
         JE    CFD35                   yes
         CLI   0(R7),X'22'             cache structure?            +DL
         JE    CFD40                   yes
         STRING64 4X,'Unknown CF Structure Type : ',((R7),1,X),    +DL X
               INTO=LINE                                           +DL
         BRASL R14,SPACE1              Single Space                +DL
CFD35    DS    0H
* list/lock structure                                              +DL
         USING IXLYAMDSTRL,R7                                      +DL
         STRING64 4X,IXLYAMDSTRL_STRNAME,INTO=LINE                 +DL
         STRING64 'List ',INTO=LINE_STR_TTY                        +DL
         CLI   IXLYAMDSTRL_TTY,IXLYAMDA_LIST list structure?       +DL
         JE    CFD36                   yes, skip
         STRING64 'Lock ',INTO=LINE_STR_TTY                        +DL
CFD36    DS    0H                                                  +DL
         STRING64 'Active ',INTO=LINE_STR_STAT                     +DL
         TM    IXLYAMDSTRL_TTY_STATUS,IXLYAMDSTRL_RBLDVALID        +DL
         JNO   CFD37                   STR rebuild indicat. not valid
         TM    IXLYAMDSTRL_RBLDSTATUS,IXLYAMDSTRL_STRINREBLD       +DL
         JNO   CFD37                   STR not in rebuild          +DL
         STRING64 'Rebuild',INTO=LINE_STR_STAT                     +DL
CFD37    DS    0H                                                  +DL
         L     R1,IXLYAMDSTRL_SS       number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING64 ((R1),,R),INTO=LINE_STR_SIZE                     +DL
         L     R1,IXLYAMDSTRL_MSS      number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING64 ((R1),,R),INTO=LINE_STR_MXSZ                     +DL
         L     R1,IXLYAMDSTRL_MINSS    number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING64 ((R1),,R),INTO=LINE_STR_MISZ                     +DL
         BRASL R14,SPACE1              Single Space                +DL
         L     R7,IXLYAMDSTRL_STRNEXT  addr of next STR entry      +DL
         J     CFD30                                               +DL
CFD40    DS    0H                                                  +DL
* cache structure                                                  +DL
         USING IXLYAMDSTRC,R7                                      +DL
         STRING64 4X,IXLYAMDSTRC_STRNAME,INTO=LINE                 +DL
         STRING64 'Cache',INTO=LINE_STR_TTY                        +DL
         STRING64 'Active ',INTO=LINE_STR_STAT                     +DL
         TM    IXLYAMDSTRC_TTY_STATUS,IXLYAMDSTRC_RBLDVALID        +DL
         JNO   CFD47                   STR rebuild indicat. not valid
         TM    IXLYAMDSTRC_RBLDSTATUS,IXLYAMDSTRC_STRINREBLD       +DL
         JNO   CFD47                   STR not in rebuild          +DL
         STRING64 'Rebuild',INTO=LINE_STR_STAT                     +DL
CFD47    DS    0H                                                  +DL
         L     R1,IXLYAMDSTRC_SS       number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING64 ((R1),,R),INTO=LINE_STR_SIZE                     +DL
         L     R1,IXLYAMDSTRC_MSS      number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING64 ((R1),,R),INTO=LINE_STR_MXSZ                     +DL
         L     R1,IXLYAMDSTRC_MINSS    number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING64 ((R1),,R),INTO=LINE_STR_MISZ                     +DL
         BRASL R14,SPACE1              Single Space                +DL
         L     R7,IXLYAMDSTRC_STRNEXT  addr of next STR entry      +DL
         J     CFD30                                               +DL
*  endloop                             Loop through the STRs       +DL
CFD50    DS    0H                                                  +DL
         BRASL R14,BLANK1              Double Space                +JM
         LA    R4,QUACFLENG(R4)        next entry                  +DL
         JCT   R2,CFD10                do until count = 0          +DL
         J     CFD97                                               +JM
*endloop                               Loop through the CFs        +DL
CFD90    STRING64 '  IXCQUERY (CFD) FAILED - ',                  RS1201X
               ' Returncode=',(LRETCODE,,X),                       +DL X
               ' Reasoncode=',(LRSNCODE,,X),                       +DL X
               ' Size=',(GETMAIN_LEN_ADDR+4,F,L),                RS1201X
               INTO=LINE                                           +DL
         J     CFD95                                               +DL
CFD93    STRING64 '  IXLMG    FAILED - ',                          +DL X
               ' Returncode=',(LRETCODE,,X),                       +DL X
               ' Reasoncode=',(LRSNCODE,,X),                       +DL X
               ' Size=',(WKCELL1,F,L),                             +DL X
               ' Size=',(IXLYAMDAREA_TLEN,F,L),                  RS0507X
               INTO=LINE                                           +DL
CFD95    DS    0H                                                  +DL
         BRASL R14,SPACE2              Double Space                +XX
CFD97    DS    0H                                                  +XX
*        Free work area for QUAHDR + QUACF                         +DL
         LM    R1,R2,GETMAIN_LEN_ADDR  addr,length               JM0900
         LTR   R1,R1                   getmain done?
         JZ    CFD99
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                   +DL
         JO    CFD98                   yes, jump                   +DL
         FREEMAIN RU,LV=(R2),A=(R1)    free work area              +DL
         J     CFD99                                               +DL
CFD98    DS    0H                                                  +DL
         LR    R0,R2                   length for FREEMAIN         +DL
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES Free work area
.CFD99   ANOP                                                      +DL
CFD99    END_PROC                                                  +DL
         TITLE 'SHOWMVS &REL - Coupling Structure Details'       RS0107
*---------------------------------------------------------------------*
*                                                                     *
*Coupling Structure Details                                           *
*                                                                     *
*  StructureName    Type   Status PolSize Pol Init Pol Min  Thres Auto*
*                                 (k)     Size(k)  Size(k)  hold  Alt *
*                                                                     *
*  ISGLOCK          Lock   Alloc   131328   131328        0   80  No  *
*  Preference List : CFCEC5 CFCEC6                                    *
*  Exclusion List is empty                                            *
*  Active Structure                                                   *
*  ----------------                                                   *
*  Allocation Time:: 2006-12-10 10.12.32.06                           *
*  CFName          : CFCEC5                                           *
*  Actual Size(k)  : 131328                                           *
*  Locks total     : 32832                                            *
*  Physical Version: BFD4D92442460B65                                 *
*  Locical Version : BFD4D92442460B65                                 *
*  Acccess Time    :     0                                            *
*  Max Connections :  32                                              *
*  # Connections   :   8                                              *
*                                                                     *
*  Connection Name  Version  Sysname  Jobname  Asid xAsid State    Fla*
*  ISGLOCK#MVSW     000100C1 MVSW     GRS         7 0007  Active   820*
*  ISGLOCK#MVSE     00020090 MVSE     GRS         7 0007  Active   820*
*  ISGLOCK#MVSF     00030077 MVSF     GRS         7 0007  Active   820*
*  ISGLOCK#MVSR     000400B8 MVSR     GRS         7 0007  Active   820*
*  ISGLOCK#MVSA     00050043 MVSA     GRS         7 0007  Active   820*
*  ISGLOCK#MVSV     0006003B MVSV     GRS         7 0007  Active   820*
*  ISGLOCK#HUGO     0007000A HUGO     GRS         7 0007  Active   820*
*  ISGLOCK#FROG     00080007 FROG     GRS         7 0007  Active   820*
*                                                                     *
*  and so on                                                          *
*---------------------------------------------------------------------*
STR00    BEGIN_PROC KW=STR,AUTH=YES                              RS0107
         AIF   (NOT D'CVTH7708).STR99     z/OS R5?               RS1107
         TM    HBB7708,L'HBB7708       running on z/OS R5        RS1107
         JZ    STR99                   no, jump and display      RS1107
         STRING64 '  Coupling Structure Details',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 4X,'StructureName    Type   Status PolSize Pol Init',X
               ' Pol Min  Thres Auto Reb Dup',                         X
               ' Enforce Allow  State',INTO=LINE
         BRASL R14,SPACE1
         STRING64 35X,'(k)',5X,'Size(k)',2X,'Size(k)','  hold',        X
               2X,'Alt',2X,'%',3X,'lex',' Order   ReAllo',             X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
*        Allocate a work area
         XC    GETMAIN_LEN_ADDR(8),GETMAIN_LEN_ADDR clear        RS0508
         BRASL R14,WORKADDR            allocate Answer Area
         LR    R3,R1                   remember getmained storage
         LA    R0,QUAHLENG+QUASLENG*32                           RS0508
         ST    R0,ANSLEN                                         RS0508
         USING QUAHDR,R3               tell assembly
*
*        Find out how much storage is needed for the answer area
*
         AIF   (NOT D'CVTH7730).STR02  z/OS R8?                  RS1108
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS1108
         JZ    STR02                   no, jump                  RS1108
         IXCQUERY REQINFO=STR_ALLDATA,QUAALEVEL=3,               RS1108X
               ANSAREA=QUAHDR,ANSLEN=ANSLEN,                     RS1108X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK) RS1108
         J     STR02E                                            RS1108
.STR02   ANOP                                                    RS1108
STR02    DS    0H                                                RS1108
         IXCQUERY REQINFO=STR_ALLDATA,QUAALEVEL=2,                     X
               ANSAREA=QUAHDR,ANSLEN=ANSLEN,                           X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)
STR02E   DS    0H                                                RS1108
*        #SNAP ADDR=LRSNCODE,LENGTH=4
         CH    R0,=Y(QUAARSNNOCFRMDSN) No CFRM                     +XX
         JE    STR92                   No
         CH    R0,=Y(QUAARSNNOCFRMPOL) No CF activated
         JE    STR92                   No
         CH    R0,=Y(QUAARSNRECORDSREMAIN) To small
         JE    STR03                   Yes larger area and retry
         CH    R0,=Y(QUAARSNANSAREATOOSMALL) To small
         JE    STR03                   Yes larger area and retry
         CLC   LRETCODE,=F'0'          Return code >0?
         JH    STR90                   Yes, display RC/RSN
         J     STR10                   RC=0 okay
STR03    DS    0H
         L     R2,QUAHTLEN             Save length
*        Allocate a work area
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    STR04                   yes, jump
         GETMAIN RU,LV=(R2)            getmain larger area
         J     STR05
STR04    DS    0H
         LR    R0,R2                   Length of storage
         LA    R1,1                    LOC=ANY
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
         LR    R2,R0
STR05    DS    0H
         STM   R1,R2,GETMAIN_LEN_ADDR  addr, length
         LR    R3,R1                   remember getmained storage
         USING QUAHDR,R3               tell assembly
*
*        Needed storage is known, Invoke the service
*
         AIF   (NOT D'CVTH7730).STR09  z/OS R8?                  RS1108
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS1108
         JZ    STR09                   no, jump                  RS1108
         IXCQUERY REQINFO=STR_ALLDATA,QUAALEVEL=3,               RS1108X
               ANSAREA=QUAHDR,ANSLEN=ANSLEN,                     RS1108X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK) RS1108
         J     STR09E                                            RS1108
.STR09   ANOP                                                    RS1108
STR09    DS    0H                                                RS1108
         IXCQUERY REQINFO=STR_ALLDATA,QUAALEVEL=2,                     X
               ANSAREA=QUAHDR,ANSLEN=ANSLEN,                           X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)
STR09E   DS    0H                                                RS1108
         CLC   LRETCODE,=F'0'          Return code >0?
         JH    STR90                   Yes, display RC/RSN
STR10    DS    0H                       Process data
*        #SNAP ADDR=QUAHDR,LENGTH=QUAHLENG
         ICM   R5,B'1111',QUAH#REC     Record counter
         JZ    STR92
         L     R4,QUAHSGOF             offset from QUAHDR to 1. REC
         LA    R4,QUAHDR(R4)           point to first CF record
         USING QUASTR,R4               tell assembly
*loop
STR20    DS    0H                      Process data
*        #SNAP ADDR=QUASTR,LENGTH=QUASTR1_LEN
         STRING64 4X,QUASTRNAME,INTO=LINE  Structure name
         STRING64 'List  ',INTO=LINE+21
         CLI   QUASTRSTRTYPE,QUASTRTYPELIST  list structure?
         JE    STR21                   yes, skip
         STRING64 'Lock  ',INTO=LINE+21
         CLI   QUASTRSTRTYPE,QUASTRTYPELOCK  lock structure?
         JE    STR21                   yes, skip
         STRING64 'SerLst',INTO=LINE+21
         CLI   QUASTRSTRTYPE,QUASTRTYPESERLIST  ser. list structure?
         JE    STR21                   yes, skip
         STRING64 'Cache ',INTO=LINE+21
         CLI   QUASTRSTRTYPE,QUASTRTYPECACHE cache structure?
         JE    STR21                   yes, skip
         STRING64 'n/a',INTO=LINE+21
         CLI   QUASTRSTRTYPE,X'00'     Unknown
         JE    STR21                   yes, skip
         STRING64 '?=',(QUASTRSTRTYPE,1,X),INTO=LINE+21
STR21    DS    0H
         STRING64 'Alloc',INTO=LINE+28
         CLI   QUASTRINHDW,QUASTRINHDWON Allocated
         JE    STR22                   yes, skip
         STRING64 'n/a',INTO=LINE+28
STR22    DS    0H
         L     R1,QUASTRSIZE           number of 4k blocks
         SLL   R1,2
         STRING64 ((R1),,R),INTO=LINE+35
         L     R1,QUASTRINITSIZE
         SLL   R1,2
         STRING64 ((R1),,R),INTO=LINE+44
         L     R1,QUASTRMINSIZE
         SLL   R1,2
         STRING64 ((R1),,R),INTO=LINE+53
         STRING64 (QUASTRFULLTHRESHOLD,FL1,R2B),INTO=LINE+63
         STRING64 'Yes',INTO=LINE+67
         TM    QUASTRFLG,QUASTRALLOWAUTOALT AllowAutoAlt
         JO    STR23                   yes, skip
         STRING64 'No',INTO=LINE+67
STR23    DS    0H
         STRING64 (QUASTRREBUILDPERCENT,FL1,R2B),INTO=LINE+72
         STRING64 'Yes',INTO=LINE+76
         TM    QUASTRFLG,QUASTRDUPLEXALLOWED Duplex
         JO    STR24                   yes, skip
         STRING64 'No',INTO=LINE+76
STR24    DS    0H
         STRING64 'Yes',INTO=LINE+80
         TM    QUASTRFLG,QUASTRPREFENFORCE Enforce
         JO    STR25                   yes, skip
         STRING64 'No',INTO=LINE+80
STR25    DS    0H
         STRING64 'Yes',INTO=LINE+88
*        TM    QUASTRFLG,QUASTRALLOWREALLOCATE Allow Reallocate
         TM    QUASTRFLG,X'08'
         JO    STR25_1                 yes, skip
         STRING64 'No',INTO=LINE+88
STR25_1  DS    0H
         STRING64 (QUASTRSTATE,4,X),INTO=LINE+95
         BRASL R14,SPACE1
         ICM   R7,B'1111',QUASTRCF#    Allocate ?
         JZ    STR25_87                 no leave
         BRASL R14,WORKADDR            Locate work area
         ST    R0,WKCELL1              Save length
         LR    R11,R1
         USING IXLYAMDAREA,R11
         XC    WKCELL2,WKCELL2         clear temp data fields
         XC    WKCELL3,WKCELL3
         XC    WKCELL4,WKCELL4
         IXLMG DATAAREA=IXLYAMDAREA,DATALEN=WKCELL1,                   X
               STRNAME=QUASTRNAME,AMDALEVEL=1,                         X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXLMGWK)
         MVC   WKCELL1+4,IXLYAMDAREA_TLEN  keep size
         LTR   R15,R15                 Success?
         JNZ   STR25_86                No, error
         ICM   R11,B'1111',IXLYAMDAREA_CFENT@  point to the data RS0414
         JZ    STR25_87                leave if zero
         USING IXLYAMDCF,R11           CF entry addressability   JH1404
         ICM   R11,B'1111',IXLYAMDCF_STR@  point to the str      RS0414
         JZ    STR25_87               continue                   RS0414
         J     STR25_2              otherwise process STRx entry JH1404
         DROP  R11                     Drop IXLYAMDCF            JH1404
*  loop
STR25_2  DS    0H                      Process data
*        #SNAP ADDR=(R11),LENGTH=IXLYAMDAREA_LEN Debug code
         CLI   0(R11),X'21'           list/lock structure?
         JE    STR25_21                yes
         CLI   0(R11),X'22'           cache structure?
         JE    STR25_22                yes
         J     STR25_85               otherwise entry not neded
STR25_21 DS    0H
         USING IXLYAMDSTRL,R11
         MVC   WKCELL2(4),IXLYAMDSTRL_SS     actual size
         MVC   WKCELL2+4(4),IXLYAMDSTRL_NLE  number of locks total
         MVC   WKCELL3(4),IXLYAMDSTRL_LSEC   List entries in use
         MVC   WKCELL3+4(4),IXLYAMDSTRL_TMEC List total entries
         MVC   WKCELL4(4),IXLYAMDSTRL_LSELC  elements in use
         MVC   WKCELL4+4(4),IXLYAMDSTRL_MLSELC total elements
*        #SNAP ADDR=(R11),LENGTH=IXLYAMDSTRL1_LEN Debug code
         J     STR25_85
STR25_22 DS    0H
         USING IXLYAMDSTRC,R11
         MVC   WKCELL2(4),IXLYAMDSTRC_SS      actual size
         MVC   WKCELL3+4(4),IXLYAMDSTRC_TMEC  total entries
         MVC   WKCELL4+4(4),IXLYAMDSTRC_TMELC total elements
*        #SNAP ADDR=(R11),LENGTH=IXLYAMDSTRC1_LEN Debug code
         J     STR25_85
STR25_85 DS    0H
         L     R11,8(R11)             R11->next STRx entry       JH1404
         LTR   R11,R11                Any STRx left ?            JH1404
         JZ    STR25_87               ...jif not                 JH1404
         J     STR25_2                check next STRx entry      JH1404
*  endloop
STR25_86 STRING64 6X,'IXLMG (STR) FAILED - ',                          X
               ' Returncode=',(LRETCODE,,X),                           X
               ' Reasoncode=',(LRSNCODE,,X),                           X
               ' Size=',(WKCELL1,F,L),1X,                              X
               (WKCELL1+4,F,L),INTO=LINE
         BRASL R14,SPACE1              Single Space
STR25_87 DS    0H
         STRING64 6X,'Preference List :',INTO=LINE
         ICM   R7,B'1111',QUASTRPL#    number of records
         JZ    STR39
         L     R6,QUASTRPLO offset to records
         AR    R6,R4
         USING QUASTRPL,R6             tell assembly
*  loop
STR30    DS    0H
*        #SNAP ADDR=QUASTRPL,LENGTH=QUASTRPL1_LEN  Debug code
         STRING64 (LINE,,T),1X,QUASTRPLNAME,INTO=LINE
         LA    R6,QUASTRPL1_LEN(R6)
         JCT   R7,STR30
*  endloop
STR39    DS    0H
         BRASL R14,SPACE1              Single Space
         ICM   R7,B'1111',QUASTRXL#    number of records
         JZ    STR49
         L     R6,QUASTRXLO            offset to records
         AR    R6,R4
         USING QUASTRXL,R6             tell assembly
*  loop
STR40    DS    0H
*        STRING64 'QUASTRXL :',INTO=LINE
*        BRASL R14,SPACE1              Double Space
*        #SNAP ADDR=QUASTRXL,LENGTH=QUASTRXL1_LEN
         LA    R6,QUASTRXL1_LEN(R6)
         JCT   R7,STR40
         J     STR49_9
*  endloop
STR49    DS    0H                      Process data
         STRING64 6X,'Exclusion List is empty',INTO=LINE
         BRASL R14,SPACE1              Single Space
STR49_9  DS    0H                      Process data
         AIF   (NOT D'CVTH7730).STR49_A z/OS R8?                 RS1108
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS1108
         JZ    STR49_A                 no, jump                  RS1108
         DROP  R6                                                RS1108
         LR    R6,R4                                             RS1108
         USING QUASTR2,R6                                        RS1108
         STRING64 6X,'Event Managment : ',INTO=LINE              RS1108
         ST    R4,WKCELL1              Save R4                   RS1108
         LA    R4,LINE+0(R15)                                    RS1108
         STRING64 'Policy based',INTO=((R4),12)                  RS1108
        #STATUS QUASTRSTATE2,QUASTRMSGBASEDEVENTPROC,            RS1108X
               'Message based'                                   RS1108
         L     R4,WKCELL1              Restore R4                RS1108
         BRASL R14,SPACE1              Single Space              RS1108
         TM    QUASTRSTATE2,QUASTRMSGBASEDEVENTPROC              RS1108
         JZ    STR49_A                 no, jump                  RS1108
         STRING64 6X,'Sysid           : ',QUASTRMSGBASEDMGRSYSNAME,    X
               INTO=LINE                                         RS0609
         BRASL R14,SPACE1              Single Space              RS1108
         DROP  R6
.STR49_A ANOP
STR49_A  DS    0H                      Process data
         ICM   R7,B'1111',QUASTRCF#
         JZ    STR59
         STRING64 6X,'Active Structure',INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 6X,'----------------',INTO=LINE
         BRASL R14,SPACE1              Single Space
         L     R6,QUASTRCFO
         AR    R6,R4
         USING QUASTRCF,R6             tell assembly
*  loop
STR50    DS    0H
         LA    R1,QUASTRCFVERSION      pass TOD clock value
         BRASL R14,STCKCONV
         STRING64 6X,'Allocation Time:: ',                             X
               (STCKDATE,,10),1X,(STCKTIME,,8),INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 6X,'CFName          : ',QUASTRCFNAME,INTO=LINE
         BRASL R14,SPACE1              Single Space
         L     R1,WKCELL2              IXLYAMDSTRL_SS/IXLYAMDSTRC_SS
         SLL   R1,2
         STRING64 6X,'Actual Size(k)  : ',((R1),,L),                   X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         CLI   QUASTRSTRTYPE,QUASTRTYPELOCK  lock structure?
         JNE   STR51                   no, skip
         STRING64 6X,'Locks total     : ',(WKCELL2,F,L10B),            X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         J     STR52
STR51    DS    0H                      For list only
         STRING64 6X,'Entries in use  : ',(WKCELL3,F,R10B),            X
               ' Total : ',(WKCELL3+4,F,R10B),                         X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 6X,'Elements in use : ',(WKCELL4,F,R10B),            X
               ' Total : ',(WKCELL4+4,F,R10B),                         X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
STR52    DS    0H                      Process data
         STRING64 6X,'Physical Version: ',                             X
               (QUASTRCFPHYSICALVERSION,8,X),INTO=LINE
         BRASL R14,SPACE1              Single Space
         USING QUASTRCF1,R6             tell assembly
         STRING64 6X,'Locical Version : ',                             X
               (QUASTRCFLOGICALVERSION,8,X),INTO=LINE
         BRASL R14,SPACE1              Single Space
         USING QUASTRCF,R6             tell assembly
         STRING64 6X,'Acccess Time    : ',                             X
               (QUASTRCFACCESSTIMEMAXIMUM,H,R5B),                      X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 6X,'Max Connections : ',                             X
               (QUASTRCFMAXCONN,H,R3B),                                X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 6X,'# Connections   : ',                             X
               (QUASTRUSER#,F,R3B),                                    X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
*        STRING64 'QUASTRCF :',INTO=LINE
*        BRASL R14,SPACE1              Double Space
*        #SNAP ADDR=QUASTRCF,LENGTH=QUASTRCF1_LEN Debug code
         LA    R6,QUASTRCF1_LEN(R6)
         JCT   R7,STR50
*  endloop
STR59    DS    0H
         ICM   R7,B'1111',QUASTRUSER#  number of connections
         JZ    STR69
         STRING64 6X,'Connection Name  Version  Sysname  Jobname',     X
               '  Asid xAsid State    Flag',INTO=LINE
         BRASL R14,SPACE1              Single Space
         L     R6,QUASTRUSERO
         AR    R6,R4
         USING QUASTRUSER,R6           tell assembly
*  loop
STR60    DS    0H
         STRING64 6X,QUASTRUSERCNAME,1X,                               X
               (QUASTRUSERCONTOKEN+12,4,X),1X,                         X
               QUASTRUSERSYS,1X,QUASTRUSERJOB,1X,                      X
               (QUASTRUSERASID,H,R4B),1X,(QUASTRUSERASID,2,X),1X,      X
               INTO=LINE
         STRING64 'Active',INTO=LINE+61
         TM    QUASTRUSERFLG1,QUASTRUSERACT Active
         JO    STR61                   yes, skip
         STRING64 'Failed',INTO=LINE+61
         TM    QUASTRUSERFLG1,QUASTRUSERFAIL Failed
         JO    STR61                   yes, skip
         STRING64 'Terminate',INTO=LINE+61
         TM    QUASTRUSERFLG1,QUASTRUSERTERM Terminate
         JO    STR61                   yes, skip
         STRING64 'Discon',INTO=LINE+61
         TM    QUASTRUSERFLG1,QUASTRUSERDISC Disconnect
         JO    STR61                   yes, skip
STR61    DS    0H
         STRING64 (QUASTRUSERFLG1,4,X),INTO=LINE+70 Flags
         BRASL R14,SPACE1              Single Space
*        STRING64 'QUASTUSER :',INTO=LINE
*        BRASL R14,SPACE1              Double Space
*        #SNAP ADDR=QUASTRUSER,LENGTH=QUASTRUSER1_LEN
         LA    R6,QUASTRUSER1_LEN(R6)  next entry
         JCT   R7,STR60
*  endloop
STR69    DS    0H
         ICM   R7,B'1111',QUASTRSYSNUMRECS number of records
         JZ    STR79
         L     R6,QUASTRSYSO           offset to records
         AR    R6,R4
         USING QUASTRSYS,R6            tell assembly
*  loop
STR70    DS    0H                      Process data
*        STRING64 'QUASTRSYS:',INTO=LINE
*        BRASL R14,SPACE1              Double Space
*        #SNAP ADDR=QUASTRSYS,LENGTH=QUASTRSYS_LEN
         LA    R6,QUASTRSYS_LEN(R6)
         JCT   R7,STR70
*  endloop
STR79    DS    0H                      Process data
         BRASL R14,BLANK1              Empty line
         AIF   (NOT D'CVTH7730).STR79_1 z/OS R8?                 RS1108
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS1108
         JZ    STR79_1                 no, jump                  RS1108
         LA    R4,QUASTR2_LEN(R4)                                RS1108
         JCT   R5,STR20                                          RS1108
         J     STR97                                             RS1108
*endloop                                                         RS1108
.STR79_1 ANOP                                                    RS0209
STR79_1  DS    0H                      Process data              RS1108
         LA    R4,QUASTR1_LEN(R4)
         JCT   R5,STR20
*endloop
         J     STR97
STR90    STRING64 '  IXCQUERY (STR) FAILED - ',                        X
               ' Returncode=',(LRETCODE,,X),                           X
               ' Reasoncode=',(LRSNCODE,,X),                           X
               ' Size=',(GETMAIN_LEN_ADDR+4,F,L),1X,                   X
               (QUAHTLEN,F,L),INTO=LINE
         J     STR95
STR92    STRING64 '  No structure defined',INTO=LINE
STR95    DS    0H
         BRASL R14,SPACE2              Double Space
STR97    DS    0H
         LM    R1,R2,GETMAIN_LEN_ADDR  addr,length
         LTR   R1,R1                   getmain done?
         JZ    STR99
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    STR98                   yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free work area
         J     STR99
STR98    DS    0H
         LR    R0,R2                   length for FREEMAIN
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES Free work area
.STR99   ANOP                                                    RS1107
STR99    END_PROC
         TITLE 'SHOWMVS &REL - External Timer information'         +JM
*---------------------------------------------------------------------*
*                                                                     *
*External Time Reference (ETR) Data:                                  *
*                                                                     *
*  Synchronization Mode: ETR                                          *
*                                                                     *
*  Time of last update: 1998-11-15  20.18.05                          *
*                                                                     *
*  Port Information:                                                  *
*                                                                     *
*    The active port is tuned                                         *
*                                                                     *
*    ETR attached to a High Availability Configuration                *
*                                                                     *
*  CPC port 0: Operational  Enabled  Active                           *
*              Net id: 00  ETR id: 00  ETR Port: 04                   *
*                                                                     *
*  CPC port 1: Operational  Enabled                                   *
*              Net id: 00  ETR id: 01  ETR Port: 04                   *
*                                                                     *
*---------------------------------------------------------------------*
ETR00    BEGIN_PROC KW=ETR                                       RS0302
         LA    R5,TENWORDS             output area
         USING ETRI,R5
         ST    R5,WKCELL1
         IEAMETR OUTADDR=WKCELL1,MF=(E,WORK256,COMPLETE)
* 00     ETR status and port data was successfully obtained.
* 04     ETR status information is available, but port data is not.
* 08     No status or port data is available.
* 0C     The parameter list is not in the user's primary address space.
*        #SNAP ADDR=(R5),LENGTH=20     Debug code
         CHI   R15,8                   Bad param list?
         JH    ETR99                   Yes
         ST    R15,WKCELL1             Save for later
         STRING64 '&TITLEPFX.External Time Reference (ETR) Data:',     X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  Synchronization Mode:',INTO=LINE
         LA    R4,LINE+1(R15)
         TM    ETRIIMAGE,ETRIETR       ETR mode?
         JZ    ETR01                   No.
         STRING64 (LINE,,T),' ETR',INTO=LINE
         J     ETR04
ETR01    DS    0H
         TM    ETRIIMAGE,ETRILOCAL     LOCAL
         JZ    ETR02                   No.
         STRING64 (LINE,,T),' LOCAL',INTO=LINE
         J     ETR04
ETR02    DS    0H
         TM    ETRIIMAGE,ETRISIMETR    SIMETR?
         JZ    ETR03                   No.
         STRING64 (LINE,,T),' SIMETR',INTO=LINE
         J     ETR04
ETR03    DS    0H
         TM    ETRIIMAGE,ETRINOTINSTALLED ETR installed?
         JZ    ETR04                   No.
         STRING64 (LINE,,T),' ETR not installed',INTO=LINE
ETR04    DS    0H
         BRASL R14,SPACE2              Double Space
         TM    ETRIIMAGE,ETRINOTINSTALLED ETR installed?
         JO    ETR99                   No.
         CLC   WKCELL1,=F'8'           Port info?
         JE    ETR10                   no
         TM    ETRIIMAGE,ETRISIMETR    SIMETR?
         JZ    ETR20                   No
         STRING64 '    SIMETR port id: ',(ETRISIMETRID,,X),INTO=LINE
         BRASL R14,SPACE2              Double space
         J     ETR20
ETR10    DS    0H
         STRING64 '  No status or port data is available',INTO=LINE
         BRASL R14,SPACE2              Double space
ETR20    DS    0H
         LA    R1,ETRITMSTMP           pass TOD clock value
         BRASL R14,STCKCONV            convert TOD clock to decimal
         STRING64 '  Time of last update: ',                           X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),           HH.MM.SS                        X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         CLC   WKCELL1,=F'4'           Port info?
         JH    ETR40
         STRING64 '  Port Information:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         TM    ETRIIMAGE,ETRITUNED     Tuned port
         JZ    ETR30                   No
         STRING64 '    The active port is tuned',INTO=LINE
         BRASL R14,SPACE2              Double space
ETR30    DS    0H
         TM    ETRIIMAGE,ETRICPLD      High Ava Config
         JZ    ETR40                   No
         STRING64 '    ETR attached to a High Availability ConfiguratioX
               n',INTO=LINE
         BRASL R14,SPACE2              Double space
ETR40    DS    0H
         STRING64 '  CPC port 0: ',INTO=LINE
         LA    R4,LINE+0(R15)
        #STATUS ETRIP0FLAGS,ETRIP0OPER,'Operational '
        #STATUS ETRIP0FLAGS,ETRIP0ENABLED,'Enabled '
        #STATUS ETRIP0FLAGS,ETRIP0ACTIVE,'Active'
         BRASL R14,SPACE1              Single Space
         STRING64 14X,'Net id: ',(ETRIP0NETID,,X),                     X
               '  ETR id: ',(ETRIP0ETRID,,X),                          X
               '  ETR Port: ',(ETRIP0PORTN0,,X),INTO=LINE
         BRASL R14,SPACE2              Double space
         STRING64 '  CPC port 1: ',INTO=LINE
         LA    R4,LINE+0(R15)
        #STATUS ETRIP1FLAGS,ETRIP0OPER,'Operational '
        #STATUS ETRIP1FLAGS,ETRIP0ENABLED,'Enabled '
        #STATUS ETRIP1FLAGS,ETRIP0ACTIVE,'Active'
         BRASL R14,SPACE1              Single space
         STRING64 14X,'Net id: ',(ETRIP1NETID,,X),                     X
               '  ETR id: ',(ETRIP1ETRID,,X),                          X
               '  ETR Port: ',(ETRIP1PORTN0,,X),INTO=LINE
         BRASL R14,SPACE2              Double space
.ETR99   ANOP
ETR99    END_PROC
         TITLE 'SHOWMVS &REL - Resourse Manager Data (SRM)'
*---------------------------------------------------------------------*
*                                                                     *
* Resource Manager Data:                                              *
*                                                                     *
*   Swap reason           Phys.Swaps  Log. Swaps  Log.->Phys. Phys->E *
* Phys->Ext.                                                          *
*                                                                     *
*   Terminal Output Wait           0           0           0          *
*   Terminal Input Wait            0           0           0          *
*   Long Wait                      0           0           0          *
*   Aux Storage Shortage           0           0           0          *
*   Real Storage Shortage          1           0           0          *
*   Detect Wait                    0           0           0          *
*   ReqSwap Sysevent               0           0           0          *
*   Enq Exchange                   0           0           0          *
*   Recommend Exchange             0           0           0          *
*   Uniliteral Swap                0           0           0          *
*   Transition Swap                0           0           0          *
*   Swap for central Stor          0           0           0          *
*   Swap for System Paging         0           0           0          *
*   Swap to make Room              0           0           0          *
*   APPC wait                      0           0           0          *
*   OpenMVS Input Wait             0           0           0          *
*   OpenMVS Output Wait            0           0           0          *
*   RealSwap Sysevent              0           0           0          *
*                                                                     *
*Workload Manager Data:                                               *
*                                                                     *
*  WLM is running in "GOAL" mode                                      *
*                                                                     *
*  OPT parmlib member in use: IEAOPT00                                *
*                                                                     *
*  CCCAWMT = 12000                                                    *
*  ZAAPAWMT= 12000                                                    *
*  ZIIPAWMT= 12000                                                    *
*  CCCSIGUR= 30                                                       *
*  CNTCLIST= No                                                       *
*  CPENABLE=(10 ,30 )                                                 *
*  ERV     =  20000                                                   *
*  RMPTTOM = 1        in milliseconds                                 *
*  MCCAFCTH=(2076     ,4076     )                                     *
*  MCCFXEPR= 92                                                       *
*  MCCFXTPR= 80                                                       *
*  MCCMAXSW= 512                                                      *
*  RCCCPUT =(204,204)                                                 *
*  RCCFXET =(82 ,88 )                                                 *
*  RCCFXTT =(66 ,72 )                                                 *
*  IFACROSSOVER= No                                                   *
*  IFAHONORPRIORITY= Yes                                              *
*  PROJECTCPU= Yes                                                    *
*                                                                     *
*  Active service policy name: PROD                                   *
*  Activated by Userid: IBMUSER                                       *
*  Service definition was installed by Userid: IBMUSER                *
*  Service definition was installed on system: D1                     *
*                                                                     *
*---------------------------------------------------------------------*
SRM00    BEGIN_PROC KW=SRM,AUTH=YES                              RS0904
         STRING64 '&TITLEPFX.Resource Manager Data:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R14,CVTOPCTP            Resource Manager Control Table
         L     R14,RMCTRMCA-RMCT(,R14) RMCA (SRM Control Area)   RS0904
         L     R3,RMCASWCT-RMCA(,R14)  SWCT (Swap Count Table)   RS0904
         USING SWCT,R3                 IRASWCT                   RS0904
         LH    R7,SWCTCNT              number of swap reasons    RS0904
         LHI   R6,1
         LA    R4,SWCTSRCA
         USING SWCTSRCE,R4             IRASWCT
         STRING64 '  Swap reason',11X,'Phys.Swaps  ',                  X
               'Log. Swaps  ','Log.->Phys.  ',                         X
               'Phys->Ext.  ','Ext.->Aux',INTO=LINE
         BRASL R14,SPACE2
*loop
SRM010   DS    0H
         LR    R0,R6                   Swapreason
         BRASL R14,SCANTBLS            find SWAP reason
         STRING64 (2(R1),(R2)),INTO=(WORK256,22)
SRM014   DS    0H
         STRING64 2X,(WORK256,22),1X,(SWCTPSDA,F,R9B),3X,              X
               (SWCTLSES,F,R9B),3X,(SWCTLSAX,F,R9B),3X,                X
               (SWCTPSDE,F,R9B),3X,(SWCTPSM,F,R9B),INTO=LINE
         BRASL R14,SPACE1
         LA    R4,SWCTSRCL(,R4)
         AHI   R6,1                    Swap reason set null
         JCT   R7,SRM010               Do until swap reason counter
*endloop
         BRASL R14,BLANK1
         DROP  R3,R4
SRM020   DS    0H
         LA    R3,BLANKS               dummy work area
         STRING64 '&TITLEPFX.Workload Manager Data:',INTO=LINE     @522
         BRASL R14,SPACE2              BLANK LINE                  @522
         LA    R3,WORK256              get address of work area    @522
         USING SRMSTAT,R3              Establish addressability    @522
         PGSER R,FIX,A=SRMSTAT,EA=SRMSTAT,ECB=0                    @522
         LA    R1,SRMSTAT              load addr for SYSEVENT      @522
         LA    R0,SRMSTSIZ             Load real length of SRMSTAT @522
         STH   R0,SRMSTLEN             pass length                 @522
         SYSEVENT REQSRMST             Issue Requ. SRM status SYSEVENT
         PGSER R,FREE,A=SRMSTAT,EA=SRMSTAT                         @522
         TM    SRMSTFLG,SRMSTMDE       If ON - WLM compatibility mode
         JO    SRM99                   ON  - COMPAT mode leave   RS0904
*                                      OFF - WLM GOAL Mode       RS0904
*WLM compatibility mode                                            @522
*Coding deleted as z/OS R3 require GOAL MODE
         STRING64 '  WLM is running in "GOAL" mode',INTO=LINE      @522
         BRASL R14,SPACE2              BLANK LINE                  @522
         STRING64 '  OPT parmlib member in use: ',SRMSTOPT,INTO=LINE
         CLC   =C'--',SRMSTOPT+6       Is an OPT member in use?    @522
         JNE   SRM021                  Yes
         STRING64 '  No OPT parmlib member in use',INTO=LINE       @522
SRM021   DS    0H                                                  @522
         BRASL R14,SPACE2          <== double space                @522
         L     R14,CVTOPCTP            RMCT
         L     R4,RMCTCCT-RMCT(,R14)   CCT                       RS0207
         USING CCT,R4                  IRACCT                    RS0207
         AIF   (NOT D'CVTH7740).SRM022   z/OS R9?                RS1008
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS1008
         JZ    SRM022                   no, jump                 RS1008
         STRING64 '  BLWLTRPCT= ',(CCTTRPCT,H,L3B),INTO=LINE     RS1008
         BRASL R14,SPACE1          <== next line                 RS1008
         STRING64 '  BLWLINTHD= ',(CCTINTHD,H,L3B),INTO=LINE     RS1008
         BRASL R14,SPACE1          <== next line                 RS1008
.SRM022  ANOP                                                    RS1008
SRM022   DS 0H                                                   RS1008
         STRING64 '  CCCAWMT = ',(CCCAWMT,F,L9B),INTO=LINE       RS0207
         BRASL R14,SPACE1          <== next line                 RS0207
         STRING64 '  CCCSIGUR= ',(CCCSIGUR,F,L9B),INTO=LINE      RS0207
         BRASL R14,SPACE1          <== next line                 RS0207
         AIF   (NOT D'CVTH7730).SRM025   z/OS R8?                RS0207
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS0207
         JZ    SRM025                   no, jump                 RS0207
         STRING64 '  ZAAPAWMT= ',(CCCAWMTI,F,L9B),INTO=LINE      JH0210
         BRASL R14,SPACE1          <== next line                 JH0210
         STRING64 '  ZIIPAWMT= ',(CCCAWMTS,F,L9B),INTO=LINE      JH0210
         BRASL R14,SPACE1          <== next line                 JH0210
*    undocumented CCCMAXQL value from IRACCT                     JH0210
         STRING64 '  CCCMAXQL= ',(CCCMAXQL,H,L3B),INTO=LINE      JH0210
         BRASL R14,SPACE1          <== next line                 JH0210
.SRM025  ANOP                                                    RS0212
SRM025   DS 0H                                                   RS0207
         DROP  R4                                                RS0207
         L     R4,CVTOPCTP             Resource Manager Control  RS0207
         USING RMCT,R4                 RMCT                      RS0207
         LA    R1,=C'No '                                        RS0207
         TM    RMCTFLGS+1,RMCTCLST                               RS0207
         JZ    SRM074                                            RS0207
         LA    R1,=C'Yes'                                        RS0207
SRM074   DS 0H                                                   RS0207
         STRING64 '  CNTCLIST= ',((R1),3),INTO=LINE              RS0207
         BRASL R14,SPACE1          <== next line                 RS0207
         DROP  R4                                                RS0207
         L     R14,CVTOPCTP            RMCT                      RS0207
         L     R4,RMCTICT-RMCT(,R14)   ICT                       RS0207
         USING ICT,R4                  IRAICT                    RS0207
*        #SNAP ADDR=(R4),LENGTH=64     debug code                RS0207
         STRING64 '  CPENABLE=(',(ICCTPILO,H,L3B),',',                 X
               (ICCTPIHI,H,L3B),')',INTO=LINE                    RS0207
         BRASL R14,SPACE1          <== next line                 RS0207
         L     R14,CVTOPCTP            RMCT                      RS0207
         L     R4,RMCTRMPT-RMCT(,R14)  RMPT                      RS0207
         USING RMPT,R4                 IRARMPT                   RS0207
         STRING64 '  ERV     = ',RMPTOPE,INTO=LINE               RS0207
         BRASL R14,SPACE1          <== next line                 RS0207
         TM    HBB7720,L'HBB7720       running on z/OS R7        RS0607
         JNZ   SRM074_1                 yes, jump                RS0607
         STRING64 '  RMPTTOM = ',(RMPTTOM,F,L9B),'in milliseconds',    X
               INTO=LINE                                         RS0607
         J     SRM074_2                                          RS0607
SRM074_1 DS 0H                                                   RS0607
         STRING64 '  RMPTTOM = ',(RMPTTOM,F,L9B),'in microseconds',    X
               INTO=LINE                                         RS0607
SRM074_2 DS 0H                                                   RS0607
         BRASL R14,SPACE1          <== next line                 RS0207
         DROP  R4                                                RS0207
         L     R14,CVTOPCTP            RMCT                      RS0207
         L     R4,RMCTMCT-RMCT(,R14)   MCT                       RS0207
         USING MCT,R4                  IRAMCT                    RS1008
         STRING64 '  MCCAFCTH=(',(MCCAFCLO,H,L3B),',',                 X
               (MCCAFCOK,H,L3B),')',INTO=LINE                    RS1008
         BRASL R14,SPACE1          <== next line                 RS0207
         STRING64 '  MCCFXEPR= ',(MCCFXEPR,H,L3B),INTO=LINE      RS0207
         BRASL R14,SPACE1          <== next line                 RS0207
         STRING64 '  MCCFXTPR= ',(MCCFXTPR,H,L3B),INTO=LINE      RS0207
         BRASL R14,SPACE1          <== next line                 RS0207
         STRING64 '  MCCMAXSW= ',(MCCMAXSW,F,L9B),INTO=LINE      RS0207
         BRASL R14,SPACE1          <== next line                 RS0207
         DROP  R4                                                RS0207
         L     R14,CVTOPCTP            RMCT                      RS0207
         L     R4,RMCTRCT-RMCT(,R14)   RCT                       RS0207
         USING RCT,R4                  IRARCT                    RS0207
         STRING64 '  RCCCPUT =(',(RCCCPUTL,H,L3B),',',                 X
               (RCCCPUTH,H,L3B),')',INTO=LINE                    RS0207
         BRASL R14,SPACE1          <== next line                 RS0207
         STRING64 '  RCCFXET =(',(RCCFXETL,H,L3B),',',                 X
               (RCCFXETH,H,L3B),')',INTO=LINE                    RS0207
         BRASL R14,SPACE1          <== next line                 RS0207
         STRING64 '  RCCFXTT =(',(RCCFXTTL,H,L3B),',',                 X
               (RCCFXTTH,H,L3B),')',INTO=LINE                    RS0207
         BRASL R14,SPACE1          <== next line                 RS0207
         DROP  R4                                                RS0207
         AIF   (NOT D'CVTH7709).SRM080   z/OS R6?                RS0207
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS0207
         JZ    SRM080                   no, jump                 RS0207
         AIF   (NOT D'CVTZIIP).SRM080    zIIP fixes ?            RS0407
         L     R4,CVTSVT               Get address of SVT        RS0207
         USING SVT,R4                                            RS0207
         LA    R1,=C'No '                                        RS1008
         TM    SVTAWUQ,SVTAFFON                                  RS1008
         JZ    SRM075                                            RS1008
         LA    R1,=C'Yes'                                        RS1008
SRM075   DS 0H                                                   RS1008
         STRING64 '  HIPERDISPATCH= ',((R1),3),' runtime',       RS1008X
               INTO=LINE                                         RS1008
         BRASL R14,SPACE1          <== next line                 RS0207
         AIF   (D'CVTH7730).SRM075_2 z/OS R8?                    RS1209
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS1209
         JNZ   SRM075_2                 yes, jump                RS1209
         LA    R1,=C'No '                                        RS0207
         TM    SVTIFAFlags,SVT_Disp_IFACrossoverOK               RS0207
         JZ    SRM075_1                                          RS0207
         LA    R1,=C'Yes'                                        RS0207
SRM075_1 DS 0H                                                   RS0207
         STRING64 '  IFACROSSOVER= ',((R1),3),INTO=LINE          RS0207
         BRASL R14,SPACE1          <== next line                 RS0207
.SRM075_2 ANOP                                                   RS1209
SRM075_2 DS 0H                                                   RS1209
         LA    R1,=C'No '                                        RS0207
         TM    SVTIFAFlags,SVT_Disp_IFACrossoverHP               RS0207
         JZ    SRM076                                            RS0207
         LA    R1,=C'Yes'                                        RS0207
SRM076   DS 0H                                                   RS0207
         STRING64 '  IFAHONORPRIORITY= ',((R1),3),INTO=LINE      RS0207
         BRASL R14,SPACE1          <== next line                 RS0207
         LA    R1,=C'No '                                        RS1209
         TM    SVTIFAFlags,SVT_Disp_SUPHonorPriority             RS1209
         JZ    SRM077                                            RS1209
         LA    R1,=C'Yes'                                        RS1209
SRM077   DS 0H                                                   RS1209
         STRING64 '  IIPHONORPRIORITY= ',((R1),3),INTO=LINE      RS1209
         BRASL R14,SPACE1          <== next line                 RS1209
         LA    R1,=C'No '                                        RS0207
         TM    SVTIFAFlags,SVT_CPUProjection                     RS0207
         JZ    SRM078                                            RS0207
         LA    R1,=C'Yes'                                        RS0207
SRM078   DS 0H                                                   RS0207
         STRING64 '  PROJECTCPU= ',((R1),3),INTO=LINE            RS0207
         BRASL R14,SPACE1          <== next line                 RS0207
         DROP  R4                                                RS0207
.SRM080  ANOP                                                    RS0207
SRM080   DS    0H                                                RS0207
         BRASL R14,BLANK1
         STRING64 '  Active service policy name: ',SRMSTAPN,INTO=LINE
         BRASL R14,SPACE1          <== next line                   @522
         STRING64 '  Activated by Userid: ',SRMSTAPU,INTO=LINE     @522
         BRASL R14,SPACE1          <== next line                   @522
         STRING64 '  Service policy activation was initiated on ',     X
               'system: ',SRMSTAPS,INTO=LINE                       @522
         BRASL R14,SPACE1          <== next line                   @522
         STRING64 '  Installed service definition name at time of ',   X
               'policy activation: ',SRMSTADN,INTO=LINE            @522
         BRASL R14,SPACE1          <== next line                   @522
         STRING64 '  Service definition was installed by Userid: ',    X
               SRMSTADU,INTO=LINE                                  @522
         BRASL R14,SPACE1          <== next line                   @522
         STRING64 '  Service definition was installed on system: ',    X
               SRMSTADS,INTO=LINE                                  @522
         BRASL R14,SPACE2          <== double space                @522
         J     SRM99
*
*----------------------------------------------------------------------
*        SCAN Swapreason table
*----------------------------------------------------------------------
*
SCANTBLS LARL  R1,SWAPREAS             Swap reason
         SLR   R2,R2
*LOOP
SCANTBLS2 DS   0H
         IC    R2,1(,R1)               PICK UP ENTRY LENGTH
         CLM   R0,B'0001',0(R1)        COMPARE SWAP-REAS WITH INTCODE
         BER   R14                     EQUAL, QUIT LOOP
         LA    R1,2(R2,R1)             BUMP TO NEXT ENTRY IN SVC TABLE
         CLI   0(R1),FF                END OF TABLE?
         JNE   SCANTBLS2               NO, TRY NEXT ENTRY
*ENDLOOP
         LA    R1,BLANKS               unknown Swap Reason
         LA    R2,1                    length=1
         BR    R14
*
SWAPREAS TABLE 1,'Terminal Output Wait','Terminal Input Wait',         X
               'Long Wait','Aux Storage Shortage',                     X
               'Real Storage Shortage','Detect Wait',                  X
               'ReqSwap Sysevent','Enq Exchange',                      X
               'Recommend Exchange','Uniliteral Swap',                 X
               'Transition Swap','Swap for central Stor',              X
               'Swap for System Paging','Swap to make Room',           X
               'APPC wait','OpenMVS Input Wait','OpenMVS Output Wait', X
               'RealSwap Sysevent','Unknown (IRASWCT)'
         DC    X'FF',0D'0'             END OF TABLE
.SRM99   ANOP
SRM99    END_PROC
         TITLE 'SHOWMVS &REL - WorkLoad Manager Defintion'
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
WLMD00   BEGIN_PROC KW=WLMD            IWMDEXTR                  RS0107
         STRING64 '&TITLEPFX.Workload Manager Definition',INTO=LINE
         BRASL R14,SPACE2              Double Space
         XC    GETMAIN_LEN_ADDR(8),GETMAIN_LEN_ADDR clear        RS0508
         BRASL R14,WORKADDR            Locate work area
         AHI   R0,-4096                prevent 0C4 on last page  RS1008
         ST    R0,ANSLEN               Save length
         LR    R3,R1
         IWMDEXTR ANSAREA=(R3),ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,        X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,                      X
               MF=(E,WORK256,COMPLETE)
*        #SNAP ADDR=ANSLEN,LENGTH=8    debug code                RS1008
*        #SNAP ADDR=QUERYLEN,LENGTH=8  debug code                RS1008
         MVC   ANSLEN,QUERYLEN         set required length
         CH    R15,=Y(IWMRETCODEWARNING) Warning RC4
         JH    WLMD990                 No higher
         JL    WLMD010                 No lower
         CLM   R0,B'0011',=Y(IWMRSNCODEOUTPUTAREATOOSMALL) too small
         JNE   WLMD990                  no
         L     R2,QUERYLEN             load length of answer area
*
*        Allocate a work area for the WLM answer area
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    WLMD003                  yes, jump
         GETMAIN RU,LV=(R2)            allocate WLM work area
         J     WLMD009
WLMD003  DS    0H
         LR    R0,R2                   Length of storage
         LA    R1,1                    LOC=ANY
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
         LR    R2,R0
WLMD009  DS    0H
         STM   R1,R2,GETMAIN_LEN_ADDR  save addr and length
         LR    R3,R1                   answer goes here
WLMD010  DS  0H
         XC    QUERYLEN,QUERYLEN       clear querlen
         IWMDEXTR ANSAREA=(R3),ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,        X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,                      X
               MF=(E,WORK256,COMPLETE)
         LTR   R15,R15                  RC ?
         JNZ   WLMD990                  yes report
         USING SERVDHDR,R3
         ST    R3,WKCELL1               remember this addr
         AL    R3,SERVD_SVDEF_OFF       R3 plus offset
         USING SVDEFHDR,R3
*        #SNAP ADDR=SVDEFHDR,LENGTH=SVDEFHDR_LEN
         STRING64 '  Service Definition: ',SVDEFDES,INTO=LINE
         BRASL R14,SPACE2
         STRING64 4X,(SVDEFPN,H,L),' service policy',INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,(SVDEFWN,H,L),' workloads, with ',(SVDEFCN,H,L),  X
               ' service classes',INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,(SVDEFGN,H,L),' resource group',INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,(SVDEFRN,H,L),' report classes',INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,(SVDEFCAN,H,L),' service class attributes',       X
               INTO=LINE
         BRASL R14,SPACE2               <== double space
         LH    R5,SVDEFPN               number of policies
         LR    R4,R3
         AL    R4,SVDEFPO               + offset to policy
         USING SVDEFPOL,R4              Policy data
         STRING64 '    +--------+',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    |Policies|',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    +--------+',INTO=LINE
         BRASL R14,SPACE2
         STRING64 '    Name     ','Description',22X,'Created  ',       X
               'Update',INTO=LINE
         BRASL R14,SPACE2
*loop
WLMD100  DS    0H
*        #SNAP ADDR=(R4),LENGTH=SVDEFPOL_LEN
         LA    R1,SVDEFPRT             activation time/date
         BRASL R14,STCKCONV            convert TOD clock to decimal
         STRING64 4X,SVDEFPNM,1X,SVDEFPDE,1X,SVDEFPIU,1X,              X
               SVDEFPRU,1X,STCKDATE,1X,(STCKTIME,8),INTO=LINE
         BRASL R14,SPACE1
         LA    R4,SVDEFPOL_LEN(,R4)
         JCT   R5,WLMD100
*ENDLOOP
         BRASL R14,BLANK1
         LH    R5,SVDEFWN              number of workloads
         LR    R4,R3
         AL    R4,SVDEFWO               + offset to workloads
         USING SVDEFWKL,R4             Workload data
         STRING64 '    +---------+',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    |Workloads|',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    +---------+',INTO=LINE
         BRASL R14,SPACE2
         STRING64 '    Name     ','Description',22X,'Created  ',       X
               'Update',INTO=LINE
         BRASL R14,SPACE2          <== double space
*loop
WLMD110  DS    0H
*        #SNAP ADDR=(R4),LENGTH=SVDEFWKL_LEN
         LA    R1,SVDEFWRT             activation time/date
         BRASL R14,STCKCONV            convert TOD clock to decimal
         STRING64 4X,SVDEFWNM,1X,SVDEFWDE,1X,SVDEFWIU,1X,              X
               SVDEFWRU,1X,STCKDATE,1X,(STCKTIME,8),INTO=LINE
         BRASL R14,SPACE1
         LA    R4,SVDEFWKL_LEN(,R4)
         JCT   R5,WLMD110
*ENDLOOP
         BRASL R14,BLANK1
         LH    R5,SVDEFCN              number of service classes
         LR    R4,R3
         AL    R4,SVDEFCO              offset to serv classes
         USING SVDEFSCL,R4
         LR    R6,R3
         STRING64 '    +---------------+',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    |Service Classes|',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    +---------------+',INTO=LINE
         BRASL R14,SPACE2
         STRING64 '    Name     ','Description',22X,'Created  ',       X
               'Update',INTO=LINE
         BRASL R14,SPACE2          <== double space
*loop
WLMD120  DS    0H
*        #SNAP ADDR=(R4),LENGTH=SVDEFSCL_LEN
         LA    R1,SVDEFCRT             activation time/date
         BRASL R14,STCKCONV            convert TOD clock to decimal
         STRING64 4X,SVDEFCNM,1X,SVDEFCDE,1X,SVDEFCIU,1X,              X
               SVDEFCRU,1X,STCKDATE,1X,(STCKTIME,8),INTO=LINE
         BRASL R14,SPACE1
*        #SNAP ADDR=(R6),LENGTH=SVDEFCLA_LEN
         LR    R6,R3
         AL    R6,SVDEFCAO             points to class attributes
         USING SVDEFCLA,R6
         LH    R7,SVDEFCAN             number of entries
         LTR   R7,R7                   are any defined?
         JZ    WLMD125                 no
*--loop
WLMD121  DS    0H
*        #SNAP ADDR=(R6),LENGTH=SVDEFCLA_LEN
         CLC   SVDEFCNM,SVDEFSCN
         JNE   WLMD128
         MVC   WORK256(3),=C'No '
         TM    SVDEFFLG,SVDEFCPC       CPU crit ?
         JZ    WLMD121A                no
         MVC   WORK256(3),=C'Yes'
WLMD121A DS    0H
         STRING64 13X,'Base goal: ',SVDEFSPN,INTO=LINE
         BRASL R14,SPACE1
         STRING64 13X,'CPU Critical flag: ',(WORK256,3),INTO=LINE
         BRASL R14,SPACE1
         STM   R3,R4,WKCELL2           save R3,R4
         DROP  R3,R4                   tell assembly
         LR    R3,R4                   Start of Service Class          X
                                         definition section
         LA    R3,SVDEFCLA_LEN(,R6)    Offset to service class period  X
                                         entries for this service class
         USING SVDEFPDA,R3             Service class period information
         LA    R4,0                    entry counter
*        #SNAP ADDR=(R6),LENGTH=64
         STRING64 13X,'#  Duration   Imp  Goal description',INTO=LINE
         BRASL R14,SPACE1
         STRING64 13X,'-  --------    -  ',                            X
               '----------------------------',INTO=LINE
         BRASL R14,SPACE1
*-LOOP
WLMD122  DS    0H
         LA    R4,1(,R4)               entry number plus 1
         STRING64 (SVDEFVAL,F,R9Z),INTO=WORK256
         TM    SVDEFTYP,SVDEFPRC       Percentile response time goal
         JZ    WLMD123                 no
         TM    SVDEFRTU,X'01'          Milliseconds ?
         JZ    WLMD122_1                 No, not supported yet
         SLR   R0,R0                   clear R0
         ICM   R1,B'1111',SVDEFVAL     Dividend into R1
         D     R0,=F'3600000'          Divide by 3.600.000
         STCM  R1,B'0011',WORK256      Hours
         LR    R1,R0                   Reminder
         SLR   R0,R0                   clear R0
         D     R0,=F'60000'            Divide by 60.000
         STCM  R1,B'0011',WORK256+2    Minutes
         LR    R1,R0                   Reminder
         SLR   R0,R0                   clear R0
         D     R0,=F'1000'             Divide by 1.000
         STCM  R1,B'0011',WORK256+4    seconds
         J     WLMD122_2
WLMD122_1 DS   0H
         XC    WORK256(6),WORK256      Clear HHMMSS
WLMD122_2 DS   0H
         CLC   SVDEFDUR,=F'0'          any duration
         JE    WLMD122_3               no
         STRING64 12X,((R4),,R2B),2X,                                  X
               (SVDEFDUR,F,L8),4X,     duration                        X
               (SVDEFIMP,H,R1B),3X,    importance                      X
               (SVDEFPER,H,R2B),'% Complete within ',                  X
               (WORK256+0,H,R2Z),':',  Hours                           X
               (WORK256+2,H,R2Z),':',  Minutes                         X
               (WORK256+4,H,R2Z),'.',  Seconds                         X
               (WORK256+6,3),          Milliseconds                    X
               INTO=LINE
         J     WLMD127_1
WLMD122_3 DS    0H
         STRING64 12X,((R4),,R2B),2X,                                  X
               9X,3X,                  duration place holder           X
               (SVDEFIMP,H,R1B),3X,    importance                      X
               (SVDEFPER,H,R2B),'% Complete within ',                  X
               (WORK256+0,H,R2Z),':',  Hours                           X
               (WORK256+2,H,R2Z),':',  Minutes                         X
               (WORK256+4,H,R2Z),'.',  Seconds                         X
               (WORK256+6,3),          Milliseconds                    X
               INTO=LINE
         J     WLMD127_1
WLMD123  DS    0H
         TM    SVDEFTYP,SVDEFAVG       Average response time goal
         JZ    WLMD124                 no
         TM    SVDEFRTU,X'01'          Milliseconds ?
         JZ    WLMD123_1                 No, not supported yet
         SLR   R0,R0                   clear R0
         ICM   R1,B'1111',SVDEFVAL     Dividend into R1
         D     R0,=F'3600000'          Divide by 3.600.000
         STCM  R1,B'0011',WORK256      Hours
         LR    R1,R0                   Reminder
         SLR   R0,R0                   clear R0
         D     R0,=F'60000'            Divide by 60.000
         STCM  R1,B'0011',WORK256+2    Minutes
         LR    R1,R0                   Reminder
         SLR   R0,R0                   clear R0
         D     R0,=F'1000'             Divide by 1.000
         STCM  R1,B'0011',WORK256+4    seconds
         J     WLMD123_2
WLMD123_1 DS   0H
         XC    WORK256(6),WORK256      Clear HHMMSS
WLMD123_2 DS   0H
         CLC   SVDEFDUR,=F'0'          any duration
         JE    WLMD123_3               no
         STRING64 12X,((R4),,R2B),2X,                                  X
               (SVDEFDUR,F,L8),4X,     duration                        X
               (SVDEFIMP,H,R1B),3X,    importance                      X
               'Average Response time of ',                            X
               (WORK256+0,H,R2Z),':',  Hours                           X
               (WORK256+2,H,R2Z),':',  Minutes                         X
               (WORK256+4,H,R2Z),'.',  Seconds                         X
               (WORK256+6,3),          Milliseconds                    X
               INTO=LINE
         J     WLMD127_1
WLMD123_3 DS   0H
         STRING64 12X,((R4),,R2B),2X,                                  X
               9X,3X,                  duration place holder           X
               (SVDEFIMP,H,R1B),3X,    importance                      X
               'Average Response time of ',                            X
               (WORK256+0,H,R2Z),':',  Hours                           X
               (WORK256+2,H,R2Z),':',  Minutes                         X
               (WORK256+4,H,R2Z),'.',  Seconds                         X
               (WORK256+6,3),          Milliseconds                    X
               INTO=LINE
         J     WLMD127_1
WLMD124  DS    0H
         TM    SVDEFTYP,SVDEFVEL       Velocity goal
         JZ    WLMD125                 no
         CLC   SVDEFDUR,=F'0'          any duration
         JE    WLMD124_1               no
         STRING64 12X,((R4),,R2B),2X,                                  X
               (SVDEFDUR,F,L8),4X,     duration                        X
               (SVDEFIMP,H,R1B),3X,    importance                      X
               'Execution velocity of ',(SVDEFVAL,F,L),                X
               INTO=LINE
         J     WLMD127_1
WLMD124_1 DS   0H
         STRING64 12X,((R4),,R2B),2X,                                  X
               9X,3X,                  duration place holder           X
               (SVDEFIMP,H,R1B),3X,    importance                      X
               'Execution velocity of ',(SVDEFVAL,F,L),                X
               INTO=LINE
         J     WLMD127_1
WLMD125  DS    0H
         TM    SVDEFTYP,SVDEFDSC       Discretionary goal
         JZ    WLMD127                 no
         STRING64 12X,((R4),,R2B),2X,                                  X
               9X,3X,                  duration place holder           X
               1X,3X,                  importance                      X
               'Discretionary',                                        X
               INTO=LINE
         J     WLMD127_1
WLMD127  DS    0H
         STRING64 ' Unknown SVDEFTYP ',(SVDEFTYP,,X),INTO=LINE
WLMD127_1 DS   0H
         BRASL R14,SPACE1
WLMD127_2 DS   0H
         LA    R3,SVDEFPDA_LEN(,R3)    skip entry
         CH    R4,SVDEFCPN             number of entries
         JL    WLMD122                 loop
         LM    R3,R4,WKCELL2           restore R3,R4
         USING SVDEFHDR,R3             tell assembly
         USING SVDEFSCL,R4             tell assembly
         BRASL R14,BLANK1
WLMD128  DS    0H
         LA    R2,SVDEFPDA_LEN         length of policy entry
         MH    R2,SVDEFCPN             multiply by number of policies
         AR    R6,R2
         LA    R6,SVDEFCLA_LEN(,R6)    next class attributes
         JCT   R7,WLMD121              loop
*--endloop
         LA    R4,SVDEFSCL_LEN(,R4)    next service class
         JCT   R5,WLMD120              loop
*endloop
         BRASL R14,BLANK1
WLMD129  DS    0H
         LH    R5,SVDEFGN              number of resource groups
         LR    R4,R3
         AL    R4,SVDEFGO               + offset to res groups
         USING SVDEFGRP,R4             Notepad data
         STRING64 '    +---------------+',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    |Resource Groups|',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    +---------------+',INTO=LINE
         BRASL R14,SPACE2
         LTR   R5,R5                   are there some res groups?
         JZ    WLMD139                  no
         STRING64 '    Name     ','Description',22X,'Created  ',       X
               'Update',INTO=LINE
         BRASL R14,SPACE2          <== double space
*loop
WLMD130  DS    0H
*        #SNAP ADDR=(R4),LENGTH=SVDEFGRP_LEN
         LA    R1,SVDEFGRT             activation time/date
         BRASL R14,STCKCONV            convert TOD clock to decimal
         STRING64 4X,SVDEFGNM,1X,SVDEFGDE,1X,SVDEFGIU,1X,              X
               SVDEFGRU,1X,STCKDATE,1X,(STCKTIME,8),INTO=LINE
         BRASL R14,SPACE1
         LR    R6,R3
         AL    R6,SVDEFGAO             points to res group attr
         LH    R7,SVDEFGAN             Number of entries         RS0407
         LTR   R7,R7                   Any entries?              RS0407
         JZ    WLMD134                    no leave               RS0407
         USING SVDEFRGA,R6             Res group attr data
*--loop
WLMD131  DS    0H
*        #SNAP ADDR=(R6),LENGTH=SVDEFRGA_LEN
         CLC   SVDEFRGN,SVDEFGNM       same res group ?
         JNE   WLMD132                   no, next one
         STRING64 6X,'CPU service units ','(min) :',(SVDEFGMN,F,R9B),  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 6X,'CPU service units ','(max) :',(SVDEFGMX,F,R9B),  X
               INTO=LINE
         BRASL R14,SPACE1
WLMD132  DS    0H
         LA    R6,SVDEFRGA_LEN(,R6)    next res group attr
         JCT   R7,WLMD134              loop
         BRASL R14,BLANK1              space line
WLMD134  DS    0H
*--endloop
         LA    R4,SVDEFGRP_LEN(,R4)    next res group
         JCT   R5,WLMD130              loop
*ENDLOOP
         BRASL R14,BLANK1              space line
         J     WLMD139_9
WLMD139  DS    0H
         STRING64 '    Resource Groups: ','n/a',INTO=LINE
         BRASL R14,SPACE2
WLMD139_9 DS    0H
         LH    R5,SVDEFRN              number of report classes
         LR    R4,R3
         AL    R4,SVDEFRO               + offset to rep classes
         USING SVDEFRCL,R4             Notepad data
         STRING64 '    +--------------+',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    |Report Classes|',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    +--------------+',INTO=LINE
         BRASL R14,SPACE2
         LTR   R5,R5                   are there some rep class? JK0407
         JZ    WLMD190                  no                       JK0407
         STRING64 '    Name     ','Description',22X,'Created  ',       X
               'Update',INTO=LINE
         BRASL R14,SPACE2          <== double space
*loop
WLMD140  DS    0H
*        #SNAP ADDR=(R4),LENGTH=SVDEFRCL_LEN
         LA    R1,SVDEFRRT             activation time/date
         BRASL R14,STCKCONV            convert TOD clock to decimal
         STRING64 4X,SVDEFRNM,1X,SVDEFRDE,1X,SVDEFRIU,1X,              X
               SVDEFRRU,1X,STCKDATE,1X,(STCKTIME,8),INTO=LINE
         BRASL R14,SPACE1
         LA    R4,SVDEFRCL_LEN(,R4)    next report class
         JCT   R5,WLMD140              loop
*ENDLOOP
         BRASL R14,BLANK1
         J     WLMD190_9                                         JK0407
WLMD190  DS    0H
         STRING64 '    Report Classes: ','n/a',INTO=LINE         JK0407
         BRASL R14,SPACE2
WLMD190_9  DS    0H                                              JK0407
*        #SNAP ADDR=(R3),LENGTH=1024
         DROP  R3
         L     R3,WKCELL1
         USING SERVDHDR,R3
         AL    R3,SERVD_SVDCR_OFF
         USING SVDCRHDR,R3
         STRING64 '    +---------------+',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    |Subsystem Types|',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    +---------------+',INTO=LINE
         BRASL R14,SPACE2
*        #SNAP ADDR=(R3),LENGTH=1024
         STRING64 4X,'Subsystem Types defined: ',(SVDCRSN,H,L),        X
               INTO=LINE
         BRASL R14,SPACE2          <== double space
         LH    R5,SVDCRSN              number of entries
         LTR   R5,R5                   are any defined?
         JZ    WLMD222                 no
         LA    R4,SVDCRHDR             Start of SVD header
         AL    R4,SVDCRSO              Offset to subsystem definition
         USING SVDCRSST,R4             Subsystem information
*LOOP
WLMD210  DS    0H
         STRING64 6X,'Subsystem name: ',SVDCRSNM,INTO=LINE
         BRASL R14,SPACE2              <== double space
         STRING64 6X,'- --------Qualifier-------------',13X,           X
               '-------Class------',' -Stg-',' --Using goals of--',    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 6X,'# Type     Name     Start',20X,                  X
               'Service   Report',INTO=LINE
         BRASL R14,SPACE1
         LA    R1,BLANKS
         TM    SVDCRSFL,SVDCRSCI       Default service class name
         JZ    *+8                     no
         LA    R1,SVDCRSCN             yes
         LA    R2,BLANKS
         TM    SVDCRSFL,SVDCRSPI       Default report class name
         JZ    *+8                     no
         LA    R2,SVDCRSPN             yes
         STRING64 41X,'Defaults: ',((R1),8),2X,((R2),8),INTO=LINE
         BRASL R14,SPACE1
         LH    R7,SVDCRSRN             number of classification rules
         LTR   R7,R7                   zero
         JZ    WLMD219                 yes
         LA    R6,SVDCRSST             start of section
         AL    R6,SVDCRSRO             to classification section
         USING SVDCRRUL,R6
         ST    R8,WKCELL1+4            save address of CVT
*-LOOP
WLMD211  DS    0H
         BRASL R1,WLMD212
         DC    AL1(SVDCRRTN),CL4'TN  ',CL4'TNG '
         DC    AL1(SVDCRRTC),CL4'TC  ',CL4'TCG '
         DC    AL1(SVDCRRUI),CL4'UI  ',CL4'UIG '
         DC    AL1(SVDCRRSN),CL4'SI  ',CL4'SIG '
         DC    AL1(SVDCRRNI),CL4'NET ',CL4'NETG'
         DC    AL1(SVDCRRLU),CL4'LU  ',CL4'LUG '
         DC    AL1(SVDCRRAC),CL4'AI  ',CL4'    '
         DC    AL1(SVDCRRSP),CL4'SPM ',CL4'    '
         DC    AL1(00),CL4'****',CL4'****'
*--LOOP
WLMD212  DS    0H
         CLC   SVDCRRQT_BYTE1,0(R1)    found type
         JE    WLMD213                 yes
         LA    R1,9(,R1)               skip this entry
         CLI   0(R1),X'00'             end of list
         JNE   WLMD212                 no
*--ENDLOOP
         BRASL R1,WLMD212A
         DC    AL1(SVDCRRQT_COLL_NAME),CL4'CN  ',CL4'    '
         DC    AL1(SVDCRRQT_CORR_INFO),CL4'CI  ',CL4'    '
         DC    AL1(SVDCRRQT_CONN_TYPE),CL4'CT  ',CL4'CTG '
         DC    AL1(SVDCRRQT_PACK_NAME),CL4'PK  ',CL4'PKG '
         DC    AL1(SVDCRRQT_PLAN_NAME),CL4'PN  ',CL4'PNG '
         DC    AL1(SVDCRRQT_PERFORM),CL4'PF  ',CL4'PFG '
         DC    AL1(SVDCRRQT_PROC_NAME),CL4'PN  ',CL4'PNG '
         DC    AL1(SVDCRRQT_PRIORITY),CL4'PRI ',CL4'    '
         DC    AL1(00),CL4'****',CL4'****'
*--LOOP
WLMD212A DS    0H
         CLC   SVDCRRQT_BYTE2,0(R1)    found type
         JE    WLMD213                 yes
         LA    R1,9(,R1)               skip this entry
         CLI   0(R1),X'00'             end of list
         JNE   WLMD212A                no
*--ENDLOOP
         BRASL R1,WLMD212B
         DC    AL1(SVDCRRQT_PROCESS_NAME),CL4'PC  ',CL4'    '
         DC    AL1(SVDCRRQT_SYSTEM_NAME),CL4'SY  ',CL4'    '
         DC    AL1(SVDCRRQT_SUBSYSTEM_COLLECTION),CL4'SSC ',CL4'    '
         DC    AL1(SVDCRRQT_SCHEDULING_ENVIRONMENT),CL4'SE  ',CL4'    '
         AIF   (NOT D'CVTH7730).WLMD212B z/OS R8? OA12784        RS1107
         DC    AL1(SVDCRRQT_EWLM_SCLASS),CL4'ESC ',CL4'    '
         DC    AL1(SVDCRRQT_EWLM_TCLASS),CL4'ETC ',CL4'    '
.WLMD212B ANOP
         DC    AL1(00),CL4'****',CL4'****'
*--LOOP
WLMD212B DS    0H
         CLC   SVDCRRQT_BYTE3,0(R1)    found type
         JE    WLMD213                 yes
         LA    R1,9(,R1)               skip this entry
         CLI   0(R1),X'00'             end of list
         JNE   WLMD212B                no
*--ENDLOOP
WLMD213  DS    0H
         TM    SVDCRRFL,SVDCRRGI       is it a group
         JZ    *+8                     no
         LA    R1,4(,R1)               over to the group
         LA    R2,BLANKS
         TM    SVDCRRFL,SVDCRRCI       Service class name specified
         JZ    *+8                     no
         LA    R2,SVDCRRCN             yes
         LA    R8,BLANKS
         TM    SVDCRRFL,SVDCRRPI       Report class name specified
         JZ    *+8                     no
         LA    R8,SVDCRRPN             yes
         MVC   WORK256(3),=C'No '
         TM    SVDCRRFL,SVDCRSTR       Stg crit ?
         JZ    WLMD213A                no
         MVC   WORK256(3),=C'Yes'
WLMD213A DS    0H
         MVC   WORK256+3(11),=C'Transaction'
         TM    SVDCRRF3,SVDCRTRM       Manage REGION/TRANS goal
         JZ    WLMD213B                no
         MVC   WORK256+3(11),=C'Region     '
WLMD213B DS    0H
         STRING64 5X,                                                  X
               (SVDCRRLV,H,R2B),1X,    nest level                      X
               (1(R1),4),5X,           type                            X
               SVDCRRQV,2X,            name                            X
               (SVDCRRSV,H,L0B),23X,   start                           X
               ((R2),8),2X,            service                         X
               ((R8),8),2X,            report                          X
               (WORK256,3),2X,         Stg Protect                     X
               (WORK256+3,11),         Region/Trans goal               X
               INTO=LINE
         CLC   LINE+21(2),=C' 0'       Zero?
         JNE   *+10                    no
         MVC   LINE+21(2),BLANKS       blank it
         BRASL R14,SPACE1              single space
         CLI   1(R1),C'*'              Was it unknown
         JNE   WLMD214                 No
         STRING64 ' Unknown SVDCRRQT_BYTE1-3 ',                        X
               (SVDCRRQT_BYTE1,3,X),INTO=LINE
         BRASL R14,SPACE1
WLMD214  DS    0H
         AH    R6,SVDCRRS              skip this entry
         JCT   R7,WLMD211
*-endloop
         L     R8,WKCELL1+4            reload address of CVT
         BRASL R14,BLANK1              double space
         J     WLMD220
*
WLMD219  DS    0H
         BRASL R14,BLANK1              double space
         STRING64 8X,'There are no classification rules',INTO=LINE
         BRASL R14,SPACE2
WLMD220  DS    0H
         AH    R4,SVDCRSS              skip this entry
         JCT   R5,WLMD210
*ENDLOOP
WLMD222  DS    0H
         STRING64 '    +---------------------+',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    |Classification Groups|',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    +---------------------+',INTO=LINE
         BRASL R14,SPACE2
         LH    R5,SVDCRGN              number of groups
         LTR   R5,R5                   are any defined?
         JZ    WLMD298                 no
         STRING64 '    Name      Qualifier Name(s)',INTO=LINE
         BRASL R14,SPACE2              Double space
         LA    R4,SVDCRHDR             Start of SVPO
         AL    R4,SVDCRGO              Offset to group definition
         USING SVDCRGRP,R4             Group information
*LOOP
WLMD225  DS    0H
         MVC   LINE,BLANKS             Blank Line
         STRING64 4X,SVDCRGRN,INTO=LINE
         LH    R7,SVDCRGVN             number of group values
         LTR   R7,R7                   zero
         JZ    WLMD234                 yes
         LA    R6,SVDCRGRP             start of section
         AL    R6,SVDCRGVO             to Group values section
         USING SVDCRGVS,R6
         J     WLMD226
*-LOOP
WLMD225A DS    0H
         MVC   LINE,BLANKS             Blank Line
WLMD226  DS    0H
         LA    R1,LINE+14
         LA    R2,1                    Init inter loop
*-LOOP
WLMD227  DS    0H
         MVC   0(L'SVDCRGVV,R1),SVDCRGVV move the field
         LA    R1,L'SVDCRGVV+2(,R1)    skip this entry
         LA    R6,SVDCRGVS_LEN(,R6)    skip this entry
         CHI   R2,10                   Over count
         JE    WLMD228                 Yes
         LA    R2,1(,R2)               Count plus 1
         JCT   R7,WLMD227
         BRASL R14,SPACE1              Single Space
         J     WLMD235
WLMD228  DS    0H
         BRASL R14,SPACE1              Single space
         JCT   R7,WLMD225A
         J     WLMD235
*-ENDLOOP
WLMD234  DS    0H
         BRASL R14,SPACE1              Single space
         STRING64 6X,'There are no Group Value entries defined',       X
               INTO=LINE
         BRASL R14,SPACE2
WLMD235  DS    0H
         AH    R4,SVDCRGS              skip this entry
         JCT   R5,WLMD225
         BRASL R14,BLANK1              Double Space
         J     WLMD310
*ENDLOOP
WLMD298  DS    0H
         STRING64 '    Classification Groups defined: ',               X
               (SVDCRGN,H,L),INTO=LINE
         BRASL R14,SPACE2          <== double space
*
WLMD310  DS    0H
WLMD400  DS    0H
         L     R3,WKCELL1
         USING SERVDHDR,R3
         AL    R3,SERVD_SVNPA_OFF
         USING SVNPAHDR,R3             Notepad entries
         STRING64 '    +---------------+',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    |Notepad Entries|',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    +---------------+',INTO=LINE
         BRASL R14,SPACE2
         LH    R5,SVNPANDN             number of entries
         LTR   R5,R5                   some defined?
         JZ    WLMD490                 no
         LR    R4,R3
         AL    R4,SVNPANDO             Offset to notepad data
         USING SVNPADAT,R4             Notepad data
         STRING64 '    Notepad entries: ',(SVNPANDN,H,L),INTO=LINE
         BRASL R14,SPACE2          <== double space
*loop
WLMD410  DS    0H
*        #SNAP ADDR=(R4),LENGTH=16
         STRING64 4X,(SVNPANPD,80),INTO=LINE
         BRASL R14,SPACE1
         LA    R4,SVNPADAT_LEN(,R4)    next notepad entry
         JCT   R5,WLMD410              loop
*ENDLOOP
         BRASL R14,BLANK1              space
         J     WLMD500
WLMD490  DS    0H
         STRING64 '    Notepad entries: ','n/a',INTO=LINE
         BRASL R14,SPACE2
WLMD500  DS    0H
*        #SNAP ADDR=(R3),LENGTH=1024
         DROP  R3
         L     R3,WKCELL1
         USING SERVDHDR,R3
         AL    R3,SERVD_SVAEA_OFF
         USING SVAEAHDR,R3
         STRING64 '    +------------------------+',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    |Application Environments|',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    +------------------------+',INTO=LINE
         BRASL R14,SPACE2
         LH    R5,SVAEA_NUMBER_AE      number of entries
         LTR   R5,R5                   some defined?
         JZ    WLMD590                 no
         LR    R4,R3
         AL    R4,SVAEA_OFFSET_AE      Offset to applenv data
         USING SVAEAAE,R4              Applenv data
         STRING64 '    Applenv entries: ',(SVAEA_NUMBER_AE,H,L),       X
               INTO=LINE
         BRASL R14,SPACE2          <== double space
*loop
WLMD510  DS    0H
*        #SNAP ADDR=(R4),LENGTH=16
         STRING64 4X,'Appl ','Environment Name: ',                     X
               SVAEA_APPLICATION_ENVIRONMENT_NAME,INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,'Description          : ',                        X
               SVAEA_DESCRIPTION,INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,'Subsystem type       : ',                        X
               SVAEA_SUBSYSTEM_TYPE,INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,'Procedure name       : ',                        X
               SVAEA_PROCEDURE_NAME,INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,'Start parameters     : ',                        X
               (SVAEA_START_PARMS,60),INTO=LINE
         BRASL R14,SPACE1
         MVC   WORK256(18),=C'No Limit          '
         TM    SVAEA_WLM_OPTIONS,SVAEA_SINGLE_SERVER
         JZ    WLMD512                 no
         MVC   WORK256(18),=C'Single per System '
WLMD512  DS    0H
         TM    SVAEA_WLM_OPTIONS,SVAEA_SINGLE_SYSPLEX
         JZ    WLMD513                 no
         MVC   WORK256(18),=C'Single per Sysplex'
WLMD513  DS    0H
         STRING64 4X,'Limit                : ',                        X
               (WORK256,18),INTO=LINE
         BRASL R14,SPACE2
         LA    R4,SVAEAAE_LEN(,R4)     next applenv entry
         JCT   R5,WLMD510              loop
*ENDLOOP
         BRASL R14,BLANK1              space
         J     WLMD600
WLMD590  DS    0H
         STRING64 '    Applenv entries: ','n/a',INTO=LINE
         BRASL R14,SPACE2
WLMD600  DS    0H
*        #SNAP ADDR=(R3),LENGTH=1024
         DROP  R3
         L     R3,WKCELL1
         USING SERVDHDR,R3
         AL    R3,SERVD_SVSEA_OFF
         USING SVSEAHDR,R3             Scheduling env data
         STRING64 '    +-----------------------+',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    |Scheduling Environments|',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    +-----------------------+',INTO=LINE
         BRASL R14,SPACE2
         LH    R5,SVSEA_NUMBER_SE      number of entries
         LTR   R5,R5                   some defined?
         JZ    WLMD690                 no
         LR    R4,R3
         AL    R4,SVSEA_OFFSET_SE      Offset to schedenv data
         USING SVSEASE,R4              Schedenv data
         STRING64 '    Schedule entries: ',(SVSEA_NUMBER_SE,H,L),      X
               INTO=LINE
         BRASL R14,SPACE2          <== double space
*loop
WLMD610  DS    0H
*        #SNAP ADDR=(R4),LENGTH=16
         STRING64 4X,'Schedule ','Environment Name: ',                 X
               SVSEA_SE_SCHENV_NAME,INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,'Description              : ',                    X
               SVSEA_SE_DESCRIPTION,INTO=LINE
         BRASL R14,SPACE1
         LR    R6,R3
         LH    R7,SVSEA_NUMBER_SR      number of entries
         LTR   R7,R7                   are any defined?
         JZ    WLMD630                 no
         STRING64 6X,'Resource Name','  State',INTO=LINE
         BRASL R14,SPACE1
         AL    R6,SVSEA_OFFSET_SR
         USING SVSEASR,R6              Schedenv ext data
*--loop
WLMD620  DS    0H
         CLC   SVSEA_SE_SCHENV_NAME,SVSEA_SR_SCHENV_NAME
         JNE   WLMD622
         STRING64 6X,SVSEA_SR_RESOURCE_NAME,1X,                        X
               (SVSEA_SR_RESOURCE_STATE,1,X),INTO=LINE
         BRASL R14,SPACE1
WLMD622  DS    0H
         LA    R6,SVSEASR_LEN(,R6)     next Schedenv ext data
         JCT   R7,WLMD620              loop
         BRASL R14,BLANK1              space
WLMD630  DS    0H
*--endloop
         DROP  R6
         LA    R4,SVSEASE_LEN(,R4)     next Schedenv entry
         JCT   R5,WLMD610              loop
*endloop
         BRASL R14,BLANK1
         J     WLMD999
WLMD690  DS    0H
         STRING64 '    Schedule entries: ','n/a',                      X
               INTO=LINE
         BRASL R14,SPACE2
         J     WLMD999
WLMD990  DS  0H
         STRING64 '   IWMDEXTR',' FAILED - Returncode=',(LRETCODE,,X), X
               '  Reasoncode=',(LRSNCODE,,X),                          X
               ' Size=',(ANSLEN,F,L),                                  X
               ' Size=',(QUERYLEN,F,L),                                X
               INTO=LINE
         BRASL R14,SPACE2          <== double space
WLMD999  DS    0H
         LM    R1,R2,GETMAIN_LEN_ADDR  load addr and length
         LTR   R1,R1                   getmain done?
         JZ    WLMD999_9
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    WLMD999_5               yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free WLM work area
         J     WLMD999_9
WLMD999_5 DS    0H
         LR    R0,R2                   length for FREEMAIN
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES Free WLM work area
WLMD999_9  END_PROC
         TITLE 'SHOWMVS &REL - WorkLoad Manager Data'              +JM
*---------------------------------------------------------------------*
*                                                                     *
*Active WorkLoad Manager Data:                                        *
*                                                                     *
*  Service policy: PROD - Normal Production Policy                    *
*  Activated at: 1997-02-21 07.00.19 by userid: DN02241 on: D1        *
*  Definition extracted from: SYS1  description: SYS1 Definition      *
*             at: 1997-02-21 06.59.45 by userid: DN02241 on: D1       *
*                                                                     *
*  Service coefficients - CPU: 1.00  IOC: 1.00  MSO: 0  SRB: 1.00     *
*                                                                     *
*  Workloads defined: 9                                               *
*                                                                     *
*    ADR       ADR Workload                                           *
*    BATCH     Batch Workload                                         *
*    CICS      CICS Workload                                          *
*    DB2       DB2 Workload                                           *
*    IMS       IMS Workload                                           *
*    ONLINES   Production Online Workload                             *
*    STC       STC Workload                                           *
*    TSO       TSO Workload                                           *
*    SYSTEM    THE SYSTEM WORKLOAD                                    *
*                                                                     *
*    Service classes defined: 19                                      *
*                                                                     *
*      Service class: ADR_MUF   ADR MUF Regions                       *
*      Flag: 08 CPUcrit: No STGcrit :No                               *
*      Associated with workload: ONLINES                              *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1              2   Execution velocity of 25                    *
*                                                                     *
*      Service class: BAT_HOT   Batch - Hot                           *
*      Flag: 08 CPUcrit: No STGcrit :No                               *
*      Associated with workload: BATCH                                *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1              2   Execution velocity of 20                    *
*                                                                     *
*      Service class: BAT_LOW   Batch - No-priority                   *
*      Flag: 08 CPUcrit: No STGcrit :No                               *
*      Associated with workload: BATCH                                *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1                  Discretionary                               *
*                                                                     *
*      Service class: BAT_REG   Batch - Default                       *
*      Flag: 08 CPUcrit: No STGcrit :No                               *
*      Associated with workload: BATCH                                *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1              5   Execution velocity of 5                     *
*                                                                     *
*      Service class: BAT_WARM  Batch - Warm                          *
*      Flag: 08 CPUcrit: No STGcrit :No                               *
*      Associated with workload: BATCH                                *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1              4   Execution velocity of 10                    *
*                                                                     *
*      Service class: CICS_REG  CICS Regions                          *
*      Flag: 10 CPUcrit: No STGcrit :No                               *
*      Associated with workload: ONLINES                              *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1              2   Execution velocity of 30                    *
*                                                                     *
*      Service class: CICS_RSP  CICS Regions                          *
*      Flag: 10 CPUcrit: No STGcrit :No                               *
*      Associated with workload: ONLINES                              *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1              2   90% Complete within 00.00.05.000            *
*                                                                     *
*      Service class: DB2_REGS  DB2 Regions                           *
*      Flag: 10 CPUcrit: No STGcrit :No                               *
*      Associated with workload: ONLINES                              *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1              2   Execution velocity of 30                    *
*                                                                     *
*      Service class: IMS_CNTL  IMS Control Region                    *
*      Flag: 10 CPUcrit: No STGcrit :No                               *
*      Associated with workload: ONLINES                              *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1              2   Execution velocity of 35                    *
*                                                                     *
*      Service class: IMS_REGS  IMS MSG Regions                       *
*      Flag: 10 CPUcrit: No STGcrit :No                               *
*      Associated with workload: ONLINES                              *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1              2   Execution velocity of 30                    *
*                                                                     *
*      Service class: IMS_RSP   IMS Regions                           *
*      Flag: 08 CPUcrit: No STGcrit :No                               *
*      Associated with workload: ONLINES                              *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1              2   90% Complete within 00.00.05.000            *
*                                                                     *
*      Service class: STC_HOT   Started Task - Hot                    *
*      Flag: 08 CPUcrit: No STGcrit :No                               *
*      Associated with workload: STC                                  *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1              1   Execution velocity of 40                    *
*                                                                     *
*      Service class: STC_REG   Started Task - Default                *
*      Flag: 08 CPUcrit: No STGcrit :No                               *
*      Associated with workload: STC                                  *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1              3   Execution velocity of 20                    *
*                                                                     *
*      Service class: STC_WARM  Started Task - Warm                   *
*      Flag: 08 CPUcrit: No STGcrit :No                               *
*      Associated with workload: STC                                  *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1              2   Execution velocity of 25                    *
*                                                                     *
*      Service class: TEST_TRN  Test/Trn Onlines                      *
*      Flag: 08 CPUcrit: No STGcrit :No                               *
*      Associated with workload: ONLINES                              *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1              4   Execution velocity of 20                    *
*                                                                     *
*      Service class: TSO       TSO Service Class                     *
*      Flag: 08 CPUcrit: No STGcrit :No                               *
*      Associated with workload: TSO                                  *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1  1000        2   85% Complete within 00.00.01.000            *
*      2  1900        3   70% Complete within 00.00.05.000            *
*      3              4   Execution velocity of 20                    *
*                                                                     *
*      Service class: SYSTEM    HIGH PRIORITY SYSTEM WORK             *
*      Flag: 08 CPUcrit: No STGcrit :No                               *
*      Associated with workload: SYSTEM                               *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1                  System                                      *
*                                                                     *
*      Service class: SYSSTC    STARTED TASK DEFAULT                  *
*      Flag: 08 CPUcrit: No STGcrit :No                               *
*      Associated with workload: SYSTEM                               *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1                  System                                      *
*                                                                     *
*      Service class: SYSOTHER  UNCLASSIFIED WORK                     *
*      Flag: 08 CPUcrit: No STGcrit :No                               *
*      Associated with workload: SYSTEM                               *
*                                                                     *
*      #  Duration   Imp  Goal description                            *
*      -  --------    -   ----------------------------                *
*      1                  System                                      *
*                                                                     *
*                                                                     *
*    Report Classes defined: 227                                      *
*                                                                     *
*      Class     Description                                          *
*      NBSJBFHI                                                       *
*      ANBUSBAT  ANBUS*BATCH*BATCH                                    *
*      CICTRAN   FCMS*CICS*TRANSACT                                   *
*      DDFLAST   UNSPEC*TEST*DDF                                      *
*      EASBAT    AEW*BATCH*BATCH                                      *
*                                                                     *
*  Subsystem Types defined: 13                                        *
*                                                                     *
*    Subsystem name: ASCH                                             *
*                                                                     *
*    --------Qualifier-------------            -------Class--------   *
*    Type     Name     Start                    Service   Report      *
*                                       Defaults: VELO30I3  UNSAPPC   *
*    1 TN       FFPPUT*   0                       BATCHMED  NBSNDMF   *
*    1 TN       FSVISMD   0                       BATCHMED  NBSNDMC   *
*    1 AI       25302C05  0                       DISC      NBSNDMF   *
*    1 AI       20405C00  0                       DISC      NBSIDVA   *
*                                                                     *
*    Subsystem name: CB                                               *
*                                                                     *
*                                                                     *
*                                                                     *
*     Group     Qualifier Name(s)                                     *
*                                                                     *
*     BAT_HOT   SMF*      NMMJT0*                                     *
*     BAT_LOW   12345XYZ                                              *
*     BAT_WARM  WARMBAT                                               *
*     CICS_REG  CIC*      OCCI                                        *
*     DB2_REGS  DB2*                                                  *
*     IMS_CNTL  IM%%CNTL  IM%%DLI   IM%%DBRC  IM%%IRLM  BMCPNSS       *
*     IMS_REGS  IMS2*     IM1*      IM2*                              *
*     STC_SYS   JES2      NET       OMIIDMOD  OMIIRCOL  OMIIMVS   SMS *
*               MII       OMIICMS                                     *
*                                                                     *
*                                                                     *
*  WLM Activity                                                       *
*                                                                     *
*  JobName  Asid SrvClass RptClass ResGroup WorkLoad Server           *
*  *MASTER*    1 SYSTEM   STC               SYSTEM   No               *
*  PCAUTH      2 SYSTEM   SYSTEM            SYSTEM   No               *
*  RASP        3 SYSTEM   STC               SYSTEM   No               *
*  TRACE       4 SYSTEM   SYSTEM            SYSTEM   No               *
*                                                                     *
*  Enclave Token    Jobname  System   SrvClass P Workload Asid SST    *
*  0000002000000001 TCPIP    B158     SYSSTC   1 SYSTEM     99 STC    *
*  0000002400000002 TCPIP    B158     SYSOTHER 1 SYSTEM     99 TCP    *
*                                                                     *
*                                                                     *
*  Systems  Scheduling-Env   Description                              *
*  There are no scheduling environments                               *
*                                                                     *
*  Sysplex Routing Locations:                                         *
*                                                                     *
*  Locations          Netid    LU-Name  Weight                        *
*  TCPIP              BFFTEST2 TCPIP    01                            *
*                     BFFTEST2 TCPIP    01                            *
*  GPMDDSRV           B158     GPMDDS01 01                            *
*  DB1I               BFFNET1  L03DB1I  01                            *
*                     BFFNET1  L03DB1I  01                            *
*  WLMGRP01           CSKL     CBMZB    01                            *
*                     CSKL     CBMZB    01                            *
*  WLMGRP02           CSKL     CBMZB    01                            *
*                     CSKL     CBMZB    01                            *
*  WLMGRP03           CSKL     CBMZB    01                            *
*                     CSKL     CBMZB    01                            *
*  TN3270E                     BFFTEST  01                            *
*---------------------------------------------------------------------*
WLM00    BEGIN_PROC KW=WLM             IWMPQRY require           RS0302
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         JNO   WLM99                   no, jump
         XC    GETMAIN_LEN_ADDR(8),GETMAIN_LEN_ADDR Clear        RS0508
*
*        Find out how much storage is needed for the answer area
*
         IWMPQRY MF=(E,IWMPQRY,COMPLETE),ANSAREA=ANSAREA,              X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,                        X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE
         MVC   ANSLEN,QUERYLEN        set required length        RS0500
         CH    R15,=Y(IWMRETCODEWARNING) Warning
         JH    WLM160                  No
         CLM   R0,B'0011',=Y(IWMRSNCODEOUTPUTAREATOOSMALL) too small
         JNE   WLM160                  no
         L     R2,QUERYLEN             load length of answer area
*
*        Allocate a work area for the WLM PQRY answer area
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    WLM003                  yes, jump
         GETMAIN RU,LV=(R2)            allocate WLM work area
         J     WLM009
WLM003   DS    0H
         LR    R0,R2                   Length of storage
         LA    R1,1                    LOC=ANY
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES                       RS1002
         LR    R2,R0
WLM009   DS    0H
         STM   R1,R2,GETMAIN_LEN_ADDR  save addr and length
         LR    R3,R1                   answer goes here
*
*        Retrieve WLM information
*
         IWMPQRY MF=(E,IWMPQRY,COMPLETE),ANSAREA=(R3),                 X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,                        X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE
         CH    R15,=Y(IWMRETCODEWARNING)                           +RS
         JH    WLM160                                              +RS
         LTR   R0,R0                   default policy?            JWM98
         JE    WLM009X                 yes, jump
         CLM   R0,B'0011',=Y(IWMRSNCODEDEFAULTPOLICY)
         JNE   WLM160
WLM009X  DS    0H
         STRING64 '&TITLEPFX.Active WorkLoad Manager Data:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         USING SVPOLHD,R3              IWMPQRY Answer area
         LA    R4,SVPOLHD              Start of SVPO
         AL    R4,SVPOLDPO             Offset to service policy
         USING SVPOLSP,R4              Service policy information
         STRING64 '  Service policy: ',(SVPOLNSP,,L),' - ',SVPOLDSP,   X
               INTO=LINE
         BRASL R14,SPACE1          <== next line
         LA    R1,SVPOLTPA             activation time/date
         BRASL R14,STCKCONV            convert TOD clock to decimal
         STRING64 '  Activated at: ',STCKDATE,1X,(STCKTIME,8),         X
               ' by userid: ',(SVPOLIPU,,L),' on: ',SVPOLSNA,          X
               INTO=LINE
         BRASL R14,SPACE1          <== next line
         LA    R1,SVPOLTDI             service definition time/date
         BRASL R14,STCKCONV            convert TOD clock to decimal
         STRING64 '  Definition extracted from: ',(SVPOLIDN,,L),2X,    X
               'description: ',(SVPOLIDD,,L),                          X
               INTO=LINE
         BRASL R14,SPACE1          <== next line
         STRING64 13X,'at: ',STCKDATE,1X,(STCKTIME,8),                 X
               ' by userid: ',(SVPOLIDU,,L),' on: ',SVPOLIDS,          X
               INTO=LINE
         BRASL R14,SPACE2          <== double space
         STRING64 '  Service coefficients - ',                         X
               'CPU: ',(SVPOLECP,,T),2X,'IOC: ',(SVPOLEIO,,T),2X,      X
               'MSO: ',(SVPOLEMS,,T),2X,'SRB: ',(SVPOLESR,,T),         X
               INTO=LINE
         BRASL R14,SPACE2          <== next line
         STRING64 '  Workloads defined: ',(SVPOLDWC,H,L),INTO=LINE
         BRASL R14,SPACE2          <== double space
         LH    R5,SVPOLDWC             number of entries
         LTR   R5,R5                   are any defined?
         JZ    WLM170                  no
         LA    R4,SVPOLHD              Start of SVPO
         AL    R4,SVPOLDWO             Offset to workload definition
         USING SVPOLWD,R4              Workload information
WLM010   DS    0H
         STRING64 4X,SVPOLWNM,2X,SVPOLWDE,INTO=LINE
         BRASL R14,SPACE1          <== next line
         AH    R4,SVPOLDWL             next section
         JCT   R5,WLM010               loop
         BRASL R14,BLANK1          <== double space
         STRING64 4X,'Service classes defined: ',(SVPOLDCC,H,L),       X
               INTO=LINE
         BRASL R14,SPACE2          <== double space
         LH    R5,SVPOLDCC             number of entries
         LTR   R5,R5                   are any defined?
         JZ    WLM140                  no
         LA    R4,SVPOLHD              Start of SVPO
         AL    R4,SVPOLDCO             Offset to service class def's
         USING SVPOLCD,R4              Service class information
*LOOP
WLM020   DS    0H
         STRING64 6X,'Service class: ',SVPOLCNM,2X,SVPOLCDE,           X
               INTO=LINE
         BRASL R14,SPACE1          <== next line
         LA    R1,=C'No '                                        RS0906
         TM    SVPOLCFL,SVPOLCPC                                 RS0906
         JZ    WLM021                                            RS0906
         LA    R1,=C'Yes'                                        RS0906
WLM021   DS 0H                                                   RS0906
         LA    R0,=C'No '                                        RS0906
         TM    SVPOLCFL,SVPOLSTR                                 RS0906
         JZ    WLM022                                            RS0906
         LA    R0,=C'Yes'                                        RS0906
WLM022   DS 0H                                                   RS0906
         STRING64 6X,'Flag: ',(SVPOLCFL,1,X),' Cpucrit: ',((R1),3),    X
               ' Stgcrit: ',((R0),3),INTO=LINE                   RS0906
         BRASL R14,SPACE1          <== next line                 RS0906
         STRING64 6X,'Associated with workload: ',SVPOLCWN,INTO=LINE
         BRASL R14,SPACE1          <== next line
         CLC   SVPOLCRN,BLANKS         any resource group tere?
         JE    WLM030                  no
         STRING64 6X,'Associated resource group: ',SVPOLCRN,INTO=LINE
WLM030   DS    0H
         CLC   SVPOLCPN,=H'0'          Any service class period entries
         JNE   WLM040                  yes
         STRING64 '    No service class period entries are defined',   X
               INTO=LINE
         J     WLM130
WLM040   DS    0H
         BRASL R14,BLANK1              double space
         LA    R6,SVPOLCD              Start of Service Class          X
                                         definition section
         AL    R6,SVPOLCPO             Offset to service class period  X
                                         entries for this service class
         USING SVPOLPD,R6              Service class period information
         LA    R7,0                    entry counter
         STRING64 '      #  Duration   Imp  Goal description',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      -  --------    -   ---------------------------X
               -',INTO=LINE
         BRASL R14,SPACE1
*-LOOP
WLM050   DS    0H
         LA    R7,1(,R7)               entry number plus 1
         STRING64 (SVPOLVAL,F,R9Z),INTO=WORK256
         TM    SVPOLTYP,SVPOLPRC       Percentile response time goal
         JZ    WLM070                  no
         TM    SVPOLRTU,SVPOL_RTU_MS   Milliseconds ?            RS0300
         JZ    WLM051                    No, not supported yet   RS0300
         SLR   R0,R0                   clear R0                  RS0300
         ICM   R1,B'1111',SVPOLVAL     Dividend into R1          RS0300
         D     R0,=F'3600000'          Divide by 3.600.000       RS0300
         STCM  R1,B'0011',WORK256      Hours                     RS0300
         LR    R1,R0                   Reminder                  RS0300
         SLR   R0,R0                   clear R0                  RS0300
         D     R0,=F'60000'            Divide by 60.000          RS0300
         STCM  R1,B'0011',WORK256+2    Minutes                   RS0300
         LR    R1,R0                   Reminder                  RS0300
         SLR   R0,R0                   clear R0                  RS0300
         D     R0,=F'1000'             Divide by 1.000           RS0300
         STCM  R1,B'0011',WORK256+4    seconds                   RS0300
         J     WLM057                                            RS0300
WLM051   DS     0H                                               RS0300
         XC    WORK256(6),WORK256      Clear HHMMSS              RS0300
WLM057   DS     0H                                               RS0300
         CLC    SVPOLDUR,=F'0'         any duration
         JE     WLM060                 no
         STRING64 5X,((R7),,R2B),2X,                                   X
               (SVPOLDUR,F,L8),4X,     duration                  RS0200X
               (SVPOLIMP,H,R1B),3X,    importance                      X
               (SVPOLPER,H,R2B),'% Complete within ',                  X
               (WORK256+0,H,R2Z),':',  Hours                     RS0300X
               (WORK256+2,H,R2Z),':',  Minutes                   RS0300X
               (WORK256+4,H,R2Z),'.',  Seconds                   RS0300X
               (WORK256+6,3),          Milliseconds              RS0300X
               INTO=LINE
         J     WLM120
WLM060   DS     0H
         STRING64 5X,((R7),,R2B),2X,                                   X
               9X,3X,                  duration place holder           X
               (SVPOLIMP,H,R1B),3X,    importance                      X
               (SVPOLPER,H,R2B),'% Complete within ',                  X
               (WORK256+0,H,R2Z),':',  Hours                     RS0300X
               (WORK256+2,H,R2Z),':',  Minutes                   RS0300X
               (WORK256+4,H,R2Z),'.',  Seconds                   RS0300X
               (WORK256+6,3),          Milliseconds              RS0300X
               INTO=LINE
         J     WLM120
WLM070   DS    0H
         TM    SVPOLTYP,SVPOLAVG       Average response time goal
         JZ    WLM080                  no
         TM    SVPOLRTU,SVPOL_RTU_MS   Milliseconds ?            RS0300
         JZ    WLM071                    No, not supported yet   RS0300
         SLR   R0,R0                   clear R0                  RS0300
         ICM   R1,B'1111',SVPOLVAL     Dividend into R1          RS0300
         D     R0,=F'3600000'          Divide by 3.600.000       RS0300
         STCM  R1,B'0011',WORK256      Hours                     RS0300
         LR    R1,R0                   Reminder                  RS0300
         SLR   R0,R0                   clear R0                  RS0300
         D     R0,=F'60000'            Divide by 60.000          RS0300
         STCM  R1,B'0011',WORK256+2    Minutes                   RS0300
         LR    R1,R0                   Reminder                  RS0300
         SLR   R0,R0                   clear R0                  RS0300
         D     R0,=F'1000'             Divide by 1.000           RS0300
         STCM  R1,B'0011',WORK256+4    seconds                   RS0300
         J     WLM077                                            RS0300
WLM071   DS     0H                                               RS0300
         XC    WORK256(6),WORK256      Clear HHMMSS              RS0300
WLM077   DS     0H                                               RS0300
         CLC    SVPOLDUR,=F'0'         any duration
         JE     WLM078                 no
         STRING64 5X,((R7),,R2B),2X,                                   X
               (SVPOLDUR,F,L8),4X,     duration                  RS0300X
               (SVPOLIMP,H,R1B),3X,    importance                      X
               'Average Response time of ',                            X
               (WORK256+0,H,R2Z),':',  Hours                     RS0300X
               (WORK256+2,H,R2Z),':',  Minutes                   RS0300X
               (WORK256+4,H,R2Z),'.',  Seconds                   RS0300X
               (WORK256+6,3),          Milliseconds              RS0300X
               INTO=LINE
         J     WLM120
WLM078   DS     0H                                               RS0300
         STRING64 5X,((R7),,R2B),2X,                             RS0300X
               9X,3X,                  duration place holder           X
               (SVPOLIMP,H,R1B),3X,    importance                RS0300X
               'Average Response time of ',                      RS0300X
               (WORK256+0,H,R2Z),':',  Hours                     RS0300X
               (WORK256+2,H,R2Z),':',  Minutes                   RS0300X
               (WORK256+4,H,R2Z),'.',  Seconds                   RS0300X
               (WORK256+6,3),          Milliseconds              RS0300X
               INTO=LINE                                         RS0300
*              (SVPOLDUR,F,L8),4X,     duration                  RS1002
         J     WLM120                                            RS0300
WLM080   DS    0H
         TM    SVPOLTYP,SVPOLVEL       Velocity goal
         JZ    WLM090                  no
         CLC    SVPOLDUR,=F'0'         any duration              RS0200
         JE     WLM085                 no
         STRING64 5X,((R7),,R2B),2X,                                   X
               (SVPOLDUR,F,L8),4X,     duration                  RS0200X
               (SVPOLIMP,H,R1B),3X,    importance                      X
               'Execution velocity of ',(SVPOLVAL,F,L),                X
               INTO=LINE
         J     WLM120
WLM085   DS    0H                                                RS0200
         STRING64 5X,((R7),,R2B),2X,                             RS0200X
               9X,3X,                  duration place holder     RS0200X
               (SVPOLIMP,H,R1B),3X,    importance                RS0200X
               'Execution velocity of ',(SVPOLVAL,F,L),          RS0200X
               INTO=LINE                                         RS0200
         J     WLM120                                            RS0200
WLM090   DS    0H
         TM    SVPOLTYP,SVPOLDSC       Discretionary goal
         JZ    WLM100                  no
         STRING64 5X,((R7),,R2B),2X,                                   X
               9X,3X,                  duration place holder           X
               1X,3X,                  importance                      X
               'Discretionary',                                        X
               INTO=LINE
         J     WLM120
WLM100   DS    0H
         TM    SVPOLTYP,SVPOLSTM       System goal
         JZ    WLM110                  no
         STRING64 5X,((R7),,R2B),2X,                                   X
               9X,3X,                  duration place holder           X
               1X,3X,                  importance                      X
               'System',                                               X
               INTO=LINE
         J     WLM120
WLM110   DS    0H
         STRING64 ' Unknown SVPOLTYP ',(SVPOLTYP,,X),INTO=LINE
         J     WLM120
WLM120   DS    0H
         BRASL R14,SPACE1          <== next line
         AH    R6,SVPOLDZL             skip entry
         CH    R7,SVPOLCPN             number of entries
         JL    WLM050                  loop
*-ENDLOOP
WLM130   DS    0H
         BRASL R14,BLANK1              double space
         AH    R4,SVPOLDCL             next service class
         JCT   R5,WLM020               loop
*ENDLOOP
WLM140   DS    0H
         STRING64 '    Report Classes defined: ',(SVPOLDRC,H,L),       X
               INTO=LINE
         BRASL R14,SPACE2          <== double space
         LH    R5,SVPOLDRC             number of entries
         LTR   R5,R5                   any report class entries
         JZ    WLM170                  no
         STRING64 '      Class     Description',INTO=LINE
         BRASL R14,SPACE1              Single space
         LA    R4,SVPOLHD              Start of SVPO
         AL    R4,SVPOLDRO             Offset to report class
         USING SVPOLRD,R4
*LOOP
WLM150   DS    0H
         STRING64 6X,SVPOLRNM,2X,SVPOLRDE,INTO=LINE
         BRASL R14,SPACE1          <== next line
         AH    R4,SVPOLDRL             next section
         JCT   R5,WLM150               loop
         BRASL R14,BLANK1              double space
         J     WLM170
*endloop
WLM160   DS    0H
         STRING64 '   IWMPQRY',' FAILED - Returncode=',(LRETCODE,,X),  X
               '  Reasoncode=',(LRSNCODE,,X),                          X
               INTO=LINE
         BRASL R14,SPACE2          <== double space
         J     WLM200
WLM170   DS    0H
         LM    R1,R2,GETMAIN_LEN_ADDR  load addr and length
         LTR   R1,R1                   did we do a getmain
         JZ    WLM200
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    WLM175                  yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free WLM work area
         J     WLM200
WLM175   DS    0H
         LR    R0,R2                   length for FREEMAIN
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES Free WLM work area
WLM200   DS    0H
         XC    GETMAIN_LEN_ADDR(8),GETMAIN_LEN_ADDR Clear        RS0508
*
*        Find out how much storage is needed for the answer area
*
         IWMCQRY MF=(E,IWMCQRY,COMPLETE),ANSAREA=ANSAREA,              X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,                        X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE
         MVC   ANSLEN,QUERYLEN                                   RS0500
         CH    R15,=Y(IWMRETCODEWARNING) Warning
         JH    WLM300                  no
         CLM   R0,B'0011',=Y(IWMRSNCODEOUTPUTAREATOOSMALL) too small
         JNE   WLM300                  no
         L     R2,QUERYLEN             load length of answer area
*
*        Allocate a work area for the WLM CQRY answer area
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    WLM203                  yes, jump
         GETMAIN RU,LV=(R2)            allocate WLM work area
         J     WLM209
WLM203   DS    0H
         LR    R0,R2                   Length of storage
         LA    R1,1                    LOC=ANY
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES             RS1002
         LR    R2,R0
WLM209   DS    0H
         STM   R1,R2,GETMAIN_LEN_ADDR  save addr and length
         LR    R3,R1                   answer goes here
*
*        Retrieve WLM information
*
         IWMCQRY MF=(E,IWMCQRY,COMPLETE),ANSAREA=(R3),                 X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,                        X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE
         LTR   R15,R15                 did all go well
         JNZ   WLM300                  no
         USING SVDCRHDR,R3             IWMCQRY Answer area
         STRING64 '  Subsystem Types defined: ',(SVDCRSN,H,L),INTO=LINE
         BRASL R14,SPACE2          <== double space
         LH    R5,SVDCRSN              number of entries
         LTR   R5,R5                   are any defined?
         JZ    WLM222                  no
         LA    R4,SVDCRHDR             Start of SVD header
         AL    R4,SVDCRSO              Offset to subsystem definition
         USING SVDCRSST,R4             Subsystem information
*LOOP
WLM210   DS    0H
         STRING64 4X,'Subsystem name: ',SVDCRSNM,INTO=LINE
         BRASL R14,SPACE2              <== double space
         STRING64 4X,'- --------Qualifier-------------',13X,           X
               '-------Class------',' -Stg-',' --Using goals of--',    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 4X,'# Type     Name     Start',20X,                  X
               'Service   Report',INTO=LINE
         BRASL R14,SPACE1
         LA    R1,BLANKS
         TM    SVDCRSFL,SVDCRSCI       Default service class name
         JZ    *+8                     no
         LA    R1,SVDCRSCN             yes
         LA    R2,BLANKS
         TM    SVDCRSFL,SVDCRSPI       Default report class name
         JZ    *+8                     no
         LA    R2,SVDCRSPN             yes
         STRING64 39X,'Defaults: ',((R1),8),2X,((R2),8),INTO=LINE
         BRASL R14,SPACE1
         LH    R7,SVDCRSRN             number of classification rules
         LTR   R7,R7                   zero
         JZ    WLM219                  yes
         LA    R6,SVDCRSST             start of section
         AL    R6,SVDCRSRO             to classification section
         USING SVDCRRUL,R6
         ST    R8,WKCELL1              save address of CVT
*-LOOP
WLM211   DS    0H
         BRASL R1,WLM212
         DC    AL1(SVDCRRTN),CL4'TN  ',CL4'TNG '
         DC    AL1(SVDCRRTC),CL4'TC  ',CL4'TCG '
         DC    AL1(SVDCRRUI),CL4'UI  ',CL4'UIG '
         DC    AL1(SVDCRRSN),CL4'SI  ',CL4'SIG '
         DC    AL1(SVDCRRNI),CL4'NET ',CL4'NETG'
         DC    AL1(SVDCRRLU),CL4'LU  ',CL4'LUG '
         DC    AL1(SVDCRRAC),CL4'AI  ',CL4'    '
         DC    AL1(SVDCRRSP),CL4'SPM ',CL4'    '
         DC    AL1(00),CL4'****',CL4'****'
*--LOOP
WLM212   DS    0H
         CLC   SVDCRRQT_BYTE1,0(R1)    found type
         JE    WLM213                  yes
         LA    R1,9(,R1)               skip this entry
         CLI   0(R1),X'00'             end of list
         JNE   WLM212                  no
*--ENDLOOP
         BRASL R1,WLM212A                                        JM0411
         DC    AL1(SVDCRRQT_COLL_NAME),CL4'CN  ',CL4'    '       JM0411
         DC    AL1(SVDCRRQT_CORR_INFO),CL4'CI  ',CL4'    '       JM0411
         DC    AL1(SVDCRRQT_CONN_TYPE),CL4'CT  ',CL4'CTG '       JM0411
         DC    AL1(SVDCRRQT_PACK_NAME),CL4'PK  ',CL4'PKG '       JM0411
         DC    AL1(SVDCRRQT_PLAN_NAME),CL4'PN  ',CL4'PNG '       JM0411
         DC    AL1(SVDCRRQT_PERFORM),CL4'PF  ',CL4'PFG '         JM0411
         DC    AL1(SVDCRRQT_PROC_NAME),CL4'PN  ',CL4'PNG '       JM0411
         DC    AL1(SVDCRRQT_PRIORITY),CL4'PRI ',CL4'    '        JM0411
         DC    AL1(00),CL4'****',CL4'****'                       JM0411
*--LOOP                                                          JM0411
WLM212A  DS    0H                                                JM0411
         CLC   SVDCRRQT_BYTE2,0(R1)    found type                JM0411
         JE    WLM213                  yes
         LA    R1,9(,R1)               skip this entry           JM0411
         CLI   0(R1),X'00'             end of list               JM0411
         JNE   WLM212A                 no
*--ENDLOOP                                                       JM0411
         BRASL R1,WLM212B                                        JM0411
         DC    AL1(SVDCRRQT_PROCESS_NAME),CL4'PC  ',CL4'    '    JM0411
         DC    AL1(SVDCRRQT_SYSTEM_NAME),CL4'SY  ',CL4'    '     RS0405
         DC    AL1(SVDCRRQT_SUBSYSTEM_COLLECTION),CL4'SSC ',CL4'    '
         DC    AL1(SVDCRRQT_SCHEDULING_ENVIRONMENT),CL4'SE  ',CL4'    '
         AIF   (NOT D'CVTH7730).WLM212B  z/OS R8? OA12784        RS1107
         DC    AL1(SVDCRRQT_EWLM_SCLASS),CL4'ESC ',CL4'    '     RS1206
         DC    AL1(SVDCRRQT_EWLM_TCLASS),CL4'ETC ',CL4'    '     RS1206
.WLM212B ANOP                                                    RS1206
         DC    AL1(00),CL4'****',CL4'****'                       RS0500
*--LOOP                                                          JM0411
WLM212B  DS    0H                                                JM0411
         CLC   SVDCRRQT_BYTE3,0(R1)    found type                JM0411
         JE    WLM213                  yes
         LA    R1,9(,R1)               skip this entry           JM0411
         CLI   0(R1),X'00'             end of list               JM0411
         JNE   WLM212B                 no
*--ENDLOOP                                                       JM0411
WLM213   DS    0H
         TM    SVDCRRFL,SVDCRRGI       is it a group
         JZ    *+8                     no
         LA    R1,4(,R1)               over to the group
         LA    R2,BLANKS
         TM    SVDCRRFL,SVDCRRCI       Service class name specified
         JZ    *+8                     no
         LA    R2,SVDCRRCN             yes
         LA    R8,BLANKS
         TM    SVDCRRFL,SVDCRRPI       Report class name specified
         JZ    *+8                     no
         LA    R8,SVDCRRPN             yes
         MVC   WORK256(3),=C'No '                                RS1206
         TM    SVDCRRFL,SVDCRSTR       Stg crit ?                RS1206
         JZ    WLM213A                 no                        RS1206
         MVC   WORK256(3),=C'Yes'                                RS1206
WLM213A  DS    0H                                                RS1206
         MVC   WORK256+3(11),=C'Transaction'                     RS1206
         TM    SVDCRRF3,SVDCRTRM       Manage REGION/TRANS goal  RS1206
         JZ    WLM213B                 no                        RS1206
         MVC   WORK256+3(11),=C'Region     '                     RS1206
WLM213B  DS    0H                                                RS1206
         STRING64 3X,                                                  X
               (SVDCRRLV,H,R2B),1X,    nest level                      X
               (1(R1),4),5X,           type                            X
               SVDCRRQV,2X,            name                            X
               (SVDCRRSV,H,L0B),23X,   start                           X
               ((R2),8),2X,            service                         X
               ((R8),8),2X,            report                    RS1001X
               (WORK256,3),2X,         Stg Protect               RS1206X
               (WORK256+3,11),         Region/Trans goal         RS1206X
               INTO=LINE
         CLC   LINE+21(2),=C' 0'       Zero?
         JNE   *+10                    no
         MVC   LINE+21(2),BLANKS       blank it
         BRASL R14,SPACE1              single space              JM0900
         CLI   1(R1),C'*'              Was it unknown            JM0411
         JNE   WLM214                  No
         STRING64 ' Unknown SVDCRRQT_BYTE1-3 ',                  JM0411X
               (SVDCRRQT_BYTE1,3,X),INTO=LINE                    JM0411
         BRASL R14,SPACE1                                        JM0411
WLM214   DS    0H                                                JM0411
         AH    R6,SVDCRRS              skip this entry
         JCT   R7,WLM211
*-ENDLOOP
         L     R8,WKCELL1              reload address of CVT
         BRASL R14,BLANK1              double space
         J     WLM220
*
WLM219   DS    0H
         BRASL R14,BLANK1              double space
         STRING64 6X,'There are no classification rules',INTO=LINE
         BRASL R14,SPACE2
WLM220   DS    0H
         AH    R4,SVDCRSS              skip this entry
         JCT   R5,WLM210
*ENDLOOP
WLM222   DS    0H
         LH    R5,SVDCRGN              number of groups
         LTR   R5,R5                   are any defined?
         JZ    WLM298                  no
         STRING64 '    Group     Qualifier Name(s)',INTO=LINE
         BRASL R14,SPACE2              Double space
         LA    R4,SVDCRHDR             Start of SVPO
         AL    R4,SVDCRGO              Offset to group definition
         USING SVDCRGRP,R4             Group information
*LOOP
WLM225   DS    0H
         MVC   LINE,BLANKS             Blank Line
         STRING64 4X,SVDCRGRN,INTO=LINE
         LH    R7,SVDCRGVN             number of group values
         LTR   R7,R7                   zero
         JZ    WLM234                  yes
         LA    R6,SVDCRGRP             start of section
         AL    R6,SVDCRGVO             to Group values section
         USING SVDCRGVS,R6
         J     WLM226                                            JM0411
*-LOOP
WLM225A  DS    0H                                                JM0411
         MVC   LINE,BLANKS             Blank Line                JM0411
WLM226   DS    0H                                                JM0411
         LA    R1,LINE+14
         LA    R2,1                    Init inter loop
*-LOOP
WLM227   DS    0H
         MVC   0(L'SVDCRGVV,R1),SVDCRGVV move the field
         LA    R1,L'SVDCRGVV+2(,R1)    skip this entry
         LA    R6,SVDCRGVS_LEN(,R6)    skip this entry
         CHI   R2,10                   Over count
         JE    WLM228                  Yes
         LA    R2,1(,R2)               Count plus 1
         JCT   R7,WLM227
         BRASL R14,SPACE1              Single Space
         J     WLM235
WLM228   DS    0H
         BRASL R14,SPACE1              Single space
*delete  MVC   LINE,BLANKS             Blank Line                JM0411
         JCT   R7,WLM225A                                        JM0900
*delete  BRASL R14,BLANK1              Double Space              JM0411
         J     WLM235
*-ENDLOOP
WLM234   DS    0H
         BRASL R14,SPACE1              Single space
         STRING64 6X,'There are no Group Value entries defined',       X
               INTO=LINE
         BRASL R14,SPACE2
WLM235   DS    0H
         AH    R4,SVDCRGS              skip this entry
         JCT   R5,WLM225
         BRASL R14,BLANK1              Double Space
         J     WLM310
*ENDLOOP
WLM298   DS    0H
         STRING64 '  Classification Groups defined: ',                 X
               (SVDCRGN,H,L),INTO=LINE
         BRASL R14,SPACE2          <== double space
         J     WLM310
*
WLM300   DS    0H
         STRING64 '  IWMCQRY',' FAILED - Returncode=',(LRETCODE,,X),   X
               '  Reasoncode=',(LRSNCODE,,X),                          X
               INTO=LINE
         BRASL R14,SPACE2          <== double space
WLM310   DS    0H
         LM    R1,R2,GETMAIN_LEN_ADDR  load addr and length
         LTR   R1,R1                   did we do a getmain
         JZ    WLM400
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    WLM320                  yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free WLM work area
         J     WLM400                                            RS1202
WLM320   DS    0H
         LR    R0,R2                   length for FREEMAIN
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES Free WLM work area
WLM400   DS    0H                                                RS1202
         XC    GETMAIN_LEN_ADDR(8),GETMAIN_LEN_ADDR Clear        RS0508
*                                                                RS1202
*        Find out how much storage is needed for the answer area RS1202
*                                                                RS1202
         IWMRQRY MF=(E,WORK256,COMPLETE),ANSAREA=ANSAREA,              X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,INFO=ALL,ENCLAVES=ALL,  X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE                 RS1202
         MVC   ANSLEN,QUERYLEN                                   RS1202
         CH    R15,=Y(IWMRETCODEWARNING) Warning                 RS1202
         JH    WLM500                  no                        RS1202
         CLM   R0,B'0011',=Y(IWMRSNCODEOUTPUTAREATOOSMALL) too small
         JNE   WLM500                  no                        RS1202
         L     R2,QUERYLEN             load length of answer areaRS1202
*                                                                RS1202
*        Allocate a work area for the WLM CQRY answer area       RS1202
*                                                                RS1202
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS1202
         JO    WLM403                  yes, jump                 RS1202
         GETMAIN RU,LV=(R2)            allocate WLM work area    RS1202
         J     WLM409                                            RS1202
WLM403   DS    0H                                                RS1202
         LR    R0,R2                   Length of storage         RS1202
         LA    R1,1                    LOC=ANY                   RS1202
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES             RS1202
         LR    R2,R0
WLM409   DS    0H                                                RS1202
         STM   R1,R2,GETMAIN_LEN_ADDR  save addr and length      RS1202
         LR    R4,R1                   answer goes here          RS1202
*                                                                RS1202
*        Reinvoke IWMRQRY                                        RS1202
*                                                                RS1202
         IWMRQRY MF=(E,WORK256,COMPLETE),ANSAREA=(R4),                 X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,INFO=ALL,ENCLAVES=ALL,  X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE                 RS1202
         LTR   R15,R15                 did all go well           RS1202
         JNZ   WLM500                  no                        RS1202
         USING RQAA,R4                                           RS1202
         STRING64 '  WLM Activity',INTO=LINE                     RS1202
         BRASL R14,SPACE2          <== double space              RS1202
         LR    R5,R4                                             RS1202
         A     R5,RQAASCOF         point to RQAE entries         RS1202
         USING RQAE,R5             tell assembly                 RS1202
         STRING64 '  JobName  Asid SrvClass RptClass ResGroup',        X
               ' WorkLoad Server',INTO=LINE                      RS1106
         BRASL R14,SPACE1          <== single space              RS1202
         LH    R6,RQAASCA#         number                        RS1202
         LA    R7,1                asid                          RS1202
*loop                                                            RS1202
WLM410   DS   0H                                                 RS1202
         CLC   RQAEACRO,=C'RQAE'   in use ?                      RS1202
         JNE   WLM450                 no                         RS1202
*        #SNAP ADDR=(R4),LENGTH=134  Debug                       RS1202
         LOCASCB ASID=(R7)         GET ADDR OF OWNER'S           RS1202
         LTR   R2,R1               VALID ASID?                   RS1202
         JNP   WLM450              NO, JUMP                      RS1202
         USING ASCB,R2                                           RS1202
         ICM   R1,B'1111',ASCBJBNI-ASCB(R2) JOBNAME              RS1202
         JNZ   WLM420              Yes - continue                RS1202
         ICM   R1,B'1111',ASCBJBNS-ASCB(R2) START/MOUNT/LOGON    RS1202
         JNZ   WLM420              No - continue                 RS1202
         LA    R1,BLANKS                                         RS1202
WLM420   DS   0H                                                 RS1202
         LA    R0,=C'n/a'          not available                 RS0103
         LA    R0,=C'No '          Default Server = NO           RS1202
         TM    RQAEFLGS,RQAEMANAGEDASSERVER  Server ?            RS1202
         JNO   WLM430                  no                        RS1202
         LA    R0,=C'Yes'              yes                       RS1202
.WLM430  ANOP                                                    RS0103
WLM430   DS   0H                                                 RS1202
         STRING64 2X,((R1),8),1X,((R7),,R4B),1X,RQAESCLN,1X,           X
               RQAERCLN,1X,RQAERGNN,1X,RQAEWKLN,1X,((R0),3),1X,  RS1202X
               INTO=LINE
         BRASL R14,SPACE1          <== single space              RS1202
WLM450   DS   0H                                                 RS1202
         LA    R7,1(,R7)           next asid                     RS1202
         AH    R5,RQAASCAL                                       RS1202
         JCT   R6,WLM410                                         RS1202
         BRASL R14,BLANK1                                        RS1202
*endloop                                                         RS1202
         DROP  R5                                                RS1202
         STRING64 '  Enclave Token    Jobname  System   SrvClass P',   X
               ' Workload Asid SST  Subsys',                           X
               '    CPU/zAAP/zACP/zIIP/zICP',INTO=LINE
         BRASL R14,SPACE1          <== single space              RS1202
         ICM   R5,B'1111',RQAAXEDO point to RQAD entries         RS1202
         JNZ   WLM455              not empty process             RS1006
         STRING64 '  There are no Enclave entries',                    X
               INTO=LINE
         BRASL R14,SPACE2                                        RS1006
         J     WLM510              leave                         RS1006
WLM455   DS   0H                                                 RS1006
         AR    R5,R4               + R3                          RS1006
         USING RQAD,R5                                           RS1202
         L     R6,RQAAXED#            number                     RS1202
*loop                                                            RS1202
WLM460   DS   0H                                                 RS1202
         L     R1,RQADTOTALCPUTIME    Cpu                        RS1202
         BRASL R14,BINTIME                                       RS1202
         ICM   R7,B'1111',RQADQAEO    offset to the enclave      RS1202
         JZ    WLM470                 zero, leave                RS1202
         AR    R7,R5               point to the RQAE for this enclave02
         USING RQAE,R7                                           RS1202
*        #SNAP ADDR=(R5),LENGTH=134                              RS1202
         STRING64 2X,(RQADETKN,8,X),1X,RQADOWNERJOBNAME,1X,            X
               RQADOWNERSYSTEM,1X,RQAESCLN,1X,(RQAEPER#,FL1,R1B),1X,   X
               RQAEWKLN,1X,(RQADOWNERASID,H,R4B),1X,                   X
               RQADSUBSYSTEMTYPE,1X,RQADSUBSYSTEMNAME,'  CPU : ',      X
               ((R3),,R3Z),':',((R2),,R2Z),':',                        X
               ((R1),,R2Z),':',((R0),,R2Z),INTO=LINE             RS1202
         BRASL R14,SPACE1          <== single space              RS1202
         AIF   (NOT D'CVTH7709).WLM470
         AIF   (T'&SYSSTATE_OSREL EQ 'O').WLM470
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010106').WLM470
         TM    HBB7709,L'HBB7709       running on z/OS R6
         JZ    WLM470                    no, leave
         ICM   R1,B'1111',RQADTOTALIFATIME    zAAP CPU
         JZ    WLM461
         BRASL R14,BINTIME
         STRING64 77X,'zAAP: ',                                        X
               ((R3),,R3Z),':',((R2),,R2Z),':',                        X
               ((R1),,R2Z),':',((R0),,R2Z),INTO=LINE
         BRASL R14,SPACE1          <== single space
WLM461   DS   0H
         ICM   R1,B'1111',RQADTOTALIFACPTIME   zAAP CPU on CP
         JZ    WLM462
         BRASL R14,BINTIME
         STRING64 77X,'zACP: ',                                        X
               ((R3),,R3Z),':',((R2),,R2Z),':',                        X
               ((R1),,R2Z),':',((R0),,R2Z),INTO=LINE
         BRASL R14,SPACE1          <== single space
WLM462   DS   0H
         ICM   R1,B'1111',RQADTOTALSUPTIME    zIIP CPU
         JZ    WLM463
         BRASL R14,BINTIME
         STRING64 77X,'zIIP: ',                                        X
               ((R3),,R3Z),':',((R2),,R2Z),':',                        X
               ((R1),,R2Z),':',((R0),,R2Z),INTO=LINE
         BRASL R14,SPACE1          <== single space
WLM463   DS   0H
         ICM   R1,B'1111',RQADTOTALSUPCPTIME   zIIP CPU on CP
         JZ    WLM470
         BRASL R14,BINTIME
         STRING64 77X,'zICP: ',                                        X
               ((R3),,R3Z),':',((R2),,R2Z),':',                        X
               ((R1),,R2Z),':',((R0),,R2Z),INTO=LINE
         BRASL R14,SPACE1          <== single space
.WLM470  ANOP
WLM470   DS    0H
         A     R5,RQAAXEDL             next entry                RS1202
         JCT   R6,WLM460               loop                      RS1202
*endloop                                                         RS1202
         DROP  R7                                                RS1202
         BRASL R14,BLANK1              empty line                RS1202
         J     WLM510                                            RS1202
.WLM500  ANOP                                                    RS0803
WLM500   DS    0H                                                RS1202
         STRING64 '  IWMRQRY',' FAILED - Returncode=',(LRETCODE,,X),   X
               '  Reasoncode=',(LRSNCODE,,X),                          X
               INTO=LINE                                         RS1202
         BRASL R14,SPACE2          <== double space              RS1202
WLM510   DS    0H                                                RS1202
         LM    R1,R2,GETMAIN_LEN_ADDR  load addr and length      RS1202
         LTR   R1,R1                   did we do a getmain
         JZ    WLM600
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS1202
         JO    WLM520                  yes, jump                 RS1202
         FREEMAIN RU,LV=(R2),A=(R1)    free WLM work area        RS1202
         J     WLM600                                            RS1202
WLM520   DS    0H                                                RS1202
         LR    R0,R2                   length for FREEMAIN       RS1202
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES Free WLM work area
WLM600   DS  0H                                                  RS0207
         STRING64 '  Systems  Scheduling-Env   Description',           X
               INTO=LINE                                         RS0207
         BRASL R14,SPACE1              print                     RS0207
         XC    GETMAIN_LEN_ADDR(8),GETMAIN_LEN_ADDR Clear        RS0508
*                                                                RS0207
*        Find out how much storage is needed for the answer area RS0207
*                                                                RS0207
         IWMSEQRY MF=(E,WORK256,COMPLETE),ANSAREA=ANSAREA,             X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,                        X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE                 RS0207
*        #SNAP ADDR=QUERYLEN,LENGTH=4                            RS0207
         MVC   ANSLEN,QUERYLEN        set required length        RS0207
         CH    R15,=Y(IWMRETCODEWARNING) Warning ?               RS0207
         JH    WLM680                  No higher                 RS0207
         CLM   R0,B'0011',=Y(IWMRSNCODENOSCHENVDEFINED) not defined
         JE    WLM681                  leave not defined         RS0207
         CLM   R0,B'0011',=Y(IWMRSNCODEOUTPUTAREATOOSMALL) too small
         JNE   WLM680                  no                        RS0207
         L     R2,QUERYLEN             load length of answer areaRS0207
*                                                                RS0207
*        Allocate a work area for the WLM CQRY answer area       RS0207
*                                                                RS0207
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS0207
         JO    WLM603                  yes, jump                 RS0207
         GETMAIN RU,LV=(R2)            allocate WLM work area    RS0207
         J     WLM609                                            RS0207
WLM603   DS    0H                                                RS0207
         LR    R0,R2                   Length of storage         RS0207
         LA    R1,1                    LOC=ANY                   RS0207
         LARL  R2,STORAGE_SP230                                  RS0207
         SYNCHX (2),STATE=SUPV,RESTORE=YES                       RS0207
         LR    R2,R0                                             RS0207
WLM609   DS    0H                                                RS0207
         STM   R1,R2,GETMAIN_LEN_ADDR  save addr and length      RS0207
         LR    R3,R1                   answer goes here          RS0207
         USING SETHDR,R3               tell assembly             RS0207
*                                                                RS0207
*        Reinvoke IWMSEQRY                                       RS0207
*                                                                RS0207
         IWMSEQRY MF=(E,WORK256,COMPLETE),ANSAREA=(R3),                X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN,                        X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE                 RS0207
         LTR   R15,R15                 did all go well           RS0207
         JNZ   WLM680                  no                        RS0207
*        #SNAP ADDR=(R3),LENGTH=256                              RS0207
         LH    R5,SET_NUMBER_SYS                                 RS0207
         LR    R4,R3                   point to offset of SYSH entries
         A     R4,SET_OFFSET_SYS                                 RS0207
         USING SETSYS,R4                                         RS0207
*loop                                                            RS0207
WLM610   DS  0H                                                  RS0207
*        #SNAP ADDR=(R4),LENGTH=SETSYS_LEN                       RS0207
         MVC   WKCELL1,SET_SYS_NAME    keep for later            RS0207
         ICM   R2,B'1111',SET_SYS_STATUS_PTR SYSH entry present  RS0207
         JZ    WLM630                                            RS0207
         USING SETSYH,R2                                         RS0207
*        #SNAP ADDR=(R2),LENGTH=SETSYH_LEN                       RS0207
         LR    R11,R2                   point to offset of SES entries
         A     R11,SET_OFFSET_SES                                RS0207
         USING SETSES,R11                                        RS0207
         ST    R4,WKCELL2              save R4                   RS0207
         LH    R4,SET_NUMBER_SES       Number of SES/SE entry    RS0207
         LTR   R4,R4                   Leave if zero             RS0407
         JZ    WLM629                                            RS0407
*  loop                                                          RS0207
WLM620   DS  0H                                                  RS0207
         TM    SET_SES_FLAG1,SET_SES_AVAILABLE Available         RS0207
         JZ    WLM625                  no, skip                  RS0207
*        #SNAP ADDR=(R11),LENGTH=SETSES_LEN                      RS0207
         L     R6,SET_SES_SE_INDEX     Index of the SE entry     RS0207
         AHI   R6,-1                   minus one                 RS0207
         MH    R6,SET_SIZE_SE          size of an entry          RS0207
         AR    R6,R3                   + Start                   RS0207
         A     R6,SET_OFFSET_SE        + offset                  RS0207
         USING SETSE,R6                                          RS0207
*        #SNAP ADDR=(R6),LENGTH=SETSE_LEN                        RS0207
         STRING64 2X,(WKCELL1,8),1X,SET_SE_SCHENV_NAME,1X,             X
               SET_SE_DESCRIPTION,INTO=LINE                      RS0207
WLM623   DS  0H                                                  RS0207
         MVC   WKCELL1,BLANKS          clear Sysname             RS0207
         BRASL R14,SPACE1              print                     RS0207
WLM625   DS  0H                                                  RS0207
         AH    R11,SET_SIZE_SES         Next SETSES entry        RS0207
         JCT   R4,WLM620               do until                  RS0207
*  endloop                                                       RS0207
WLM629   DS  0H                                                  RS0407
         L     R4,WKCELL2              restore R4                RS0207
WLM630   DS  0H                                                  RS0207
         AH    R4,SET_SIZE_SYS         Next SETSYS entry         RS0207
         JCT   R5,WLM610               do until                  RS0207
*endloop                                                         RS0207
         BRASL R14,BLANK1              blank line                RS0207
         J     WLM690                  Freemain                  RS0207
WLM680   DS  0H                                                  RS0207
         STRING64 '  IWMSEQRY',' FAILED - Returncode=',                X
               (LRETCODE,,X),'  Reasoncode=',(LRSNCODE,,X),            X
               INTO=LINE                                         RS0207
         BRASL R14,SPACE2          <== double space              RS0207
         J     WLM690                  Freemain                  RS0207
WLM681   DS  0H                                                  RS0207
         STRING64 '  There are no scheduling environments',            X
               INTO=LINE                                         RS0207
         BRASL R14,SPACE2                                        RS0207
WLM690   DS    0H                                                RS0207
         LM    R1,R2,GETMAIN_LEN_ADDR  load addr and length      RS0207
         LTR   R1,R1                   did we do a getmain       RS0207
         JZ    WLM700                                            RS0207
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS0207
         JO    WLM691                  yes, jump                 RS0207
         FREEMAIN RU,LV=(R2),A=(R1)    free WLM work area        RS0207
         J     WLM700                                            RS0207
WLM691   DS    0H                                                RS0207
         LR    R0,R2                   length for FREEMAIN       RS0207
         LARL  R2,STORAGE_SP230                                  RS0207
         SYNCHX (2),STATE=SUPV,RESTORE=YES Free WLM work area    RS0207
WLM700   DS  0H                                                  RS0207
         XC    GETMAIN_LEN_ADDR(8),GETMAIN_LEN_ADDR clear        RS0508
         BRASL R14,WORKADDR            Locate work area          RS0207
         ST    R0,ANSLEN               Save length               RS0207
         LR    R3,R1                                             RS0207
         STRING64 '  Sysplex Routing Locations:',INTO=LINE       RS0207
         BRASL R14,SPACE2              Double Space              RS0207
         STRING64 '  Locations          Netid    LU-Name  Weight',     X
               INTO=LINE
         BRASL R14,SPACE1              Print
         USING SYSL,R3                                           RS0207
         IWMSRDNS LOCATION_NAMES=SYSL,                                 X
               ANSLEN=ANSLEN,                                          X
               ENTRY_COUNT=WKCELL1,                                    X
               QUERYLEN=WKCELL2,                                       X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,                      X
               MF=(E,WORK256,COMPLETE)                           RS0207
*        #SNAP ADDR=WORK256,LENGTH=256 debug code                RS0207
         CH    R15,=Y(IWMRETCODEWARNING) Warning ?               RS0207
         JE    WLM710                  Yes, no entry             RS0207
         LTR   R15,R15                 did all go well           RS0207
         JNZ   WLM780                  no                        RS0207
         ICM   R4,B'1111',WKCELL1      number of entries         RS0207
         JZ    WLM710                  jump if zero              RS0207
*loop                                                            RS0207
WLM702   DS    0H                                                RS0207
         MVC   ANSLEN,=F'412'
         LA    R5,WORK256+100
         USING SYSR,R5
         IWMSRSRS LOCATION=SYSL_LOCATION,                              X
               SYSINFO_BLOCK=WORK256+100,FUNCTION=QUERY,               X
               ANSLEN=ANSLEN,EXTENDED_DATA=NO,                         X
               ENTRY_COUNT=WKCELL1,                                    X
               QUERYLEN=WKCELL2,                                       X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,                      X
               MF=(E,WORK256,COMPLETE)                           RS0207
         LTR   R15,R15                 did all go well           RS0207
         JNZ   WLM781                  no                        RS0207
*        #SNAP ADDR=(R5),LENGTH=256
         STRING64 2X,SYSL_LOCATION,1X,SYSR_NETID,1X,SYSR_LUNAME,1X,    X
               (SYSR_WEIGHT,1,X),INTO=LINE
         BRASL R14,SPACE1              Print
         ICM   R6,B'1111',WKCELL1      Should be at least one
         JZ    WLM711                   hmhhhh don't know
         AHI   R6,-1                   first entry already done
         LTR   R6,R6                   more entries?
         JZ    WLM705                     no next location
*  loop
WLM704   DS    0H
         STRING64 21X,SYSR_NETID,1X,SYSR_LUNAME,1X,                    X
               (SYSR_WEIGHT,1,X),INTO=LINE
         BRASL R14,SPACE1              Print
         LA    R5,SYSR_LEN(R5)         next entry
         JCT   R6,WLM704               do until
*  endloop
WLM705   DS    0H
         LA    R3,SYSL_LEN(R3)         next entry                RS0207
         JCT   R4,WLM702               do until                  RS0207
*endloop                                                         RS0207
         J     WLM790                                            RS0207
WLM710   DS    0H                                                RS0207
         STRING64 '  No locations registered',INTO=LINE          RS0207
         BRASL R14,SPACE1
         STRING64 '  IWMSRDNS','  Reasoncode=',(LRSNCODE,,X),          X
               INTO=LINE                                         RS0307
         BRASL R14,SPACE1                                        RS0307
         J     WLM790                                            RS0207
WLM711   DS    0H                                                RS0207
         STRING64 2X,SYSL_LOCATION,' No data from IWMSRSRS',           X
               INTO=LINE
         BRASL R14,SPACE1                                        RS0207
         J     WLM705                  next location             RS0207
WLM780   DS    0H                                                RS0207
         STRING64 '  IWMSRDNS',' FAILED - Returncode=',                X
               (LRETCODE,,X),'  Reasoncode=',(LRSNCODE,,X),            X
               ' L: ',(WKCELL2,4,X),INTO=LINE                    RS0207
         BRASL R14,SPACE1                                        RS0207
         J     WLM790                                            RS0207
WLM781   DS    0H                                                RS0207
         STRING64 '  IWMSRSRS',' FAILED - Returncode=',                X
               (LRETCODE,,X),'  Reasoncode=',(LRSNCODE,,X),            X
               ' L: ',(WKCELL2,4,X),INTO=LINE                    RS0207
         BRASL R14,SPACE1                                        RS0207
WLM790   DS    0H                                                RS0207
         BRASL R14,BLANK1                                        RS0207
.WLM99   ANOP
WLM99    END_PROC
         TITLE 'SHOWMVS &REL - SMF data for each ASID'
*---------------------------------------------------------------------*
*                                                                     *
* SMF data for each ASID                                              *
*                                                                     *
* *MASTER* Workload: SYSTEM    Service    : SYSTEM    Resource:       *
*          Subsys  :           Env        :                           *
*          CPU     :   9137410 IOC        :    530710 MSO     :       *
*          Enc-CPU :         0 DepEnc-CPU :         0 Enc-TRC :       *
*          Enc-zAAP      :                0  DepEnc-zAAP      :       *
*          Enc-zAAP on CP:                0  DepEnc-zAAP on CP:       *
*          Enc-zAAP      :                0  DepEnc-zAAP      :       *
*          Enc-zIIP      :                0  DepEnc-zIIP      :       *
*          Enc-zIIP on CP:                0  DepEnc-zIIP on CP:       *
*          Enc-zIIP qual :                0  DepEnc-zIIP qual :       *
*          ASID-zIIP     :                0  ASID-zIIP on CP  :       *
* DB2SDIST Workload: STC       Service    : STCHIGH   Resource:       *
*          Subsys  : JESALF0   Env        :                           *
*          CPU     :   1559609 IOC        :      4317 MSO     :       *
*          Enc-CPU :   1475233 DepEnc-CPU :         0 Enc-TRC :       *
*          Enc-zAAP      :                0  DepEnc-zAAP      :       *
*          Enc-zAAP on CP:                0  DepEnc-zAAP on CP:       *
*          Enc-zAAP      :                0  DepEnc-zAAP      :       *
*          Enc-zIIP      :       1437218543  DepEnc-zIIP      :       *
*          Enc-zIIP on CP:         50696336  DepEnc-zIIP on CP:       *
*          Enc-zIIP qual :       7646622931  DepEnc-zIIP qual :       *
*          ASID-zIIP     :          2541920  ASID-zIIP on CP  :       *
* INIT     No data                                                    *
* INIT     No data                                                    *
*                                                                     *
*---------------------------------------------------------------------*
SMFD00   BEGIN_PROC KW=SMFD,AUTH=YES                             RS0906
         AIF   (NOT D'CVTH7707).SMFD99    z/OS R4?
         TM    HBB7707,L'HBB7707       running on z/OS R4
         JZ    SMFD99                  no, jump and display
         AIF   ('&SMF_ZAAPZIIP' EQ 'Y').SMFD02
         STRING64 '&TITLEPFX.SMF data for each ASID',INTO=LINE
         AGO   .SMFD03
.SMFD02  DS    0H
         STRING64 '&TITLEPFX.SMF data for each ASID (zAAP/zIIP)',      X
               INTO=LINE
.SMFD03  DS    0H
         BRASL R14,SPACE2
         L     R7,CVTASVT              point to ASVT
         L     R7,ASVTMAXU-ASVT(,R7)   max ASID
*        use a fix length of 1024 to be compatible with older
*        version without zAAP/zIIP data or newer version
*        LA    R2,RQSVLEN              length of dynamic storage area
         LA    R2,1024                 How much is required
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    SMFD06                  yes, jump
         GETMAIN RU,LV=(R2)            allocate work area
         J     SMFD07
SMFD06   DS    0H
         LR    R0,R2                   Length of storage
         LA    R1,1                    LOC=ANY
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
         LR    R2,R0
SMFD07   DS    0H
         STM   R1,R2,GETMAIN_LEN_ADDR  save addr and length
         LR    R3,R1                   remember getmained storage
* Clear IRARQSRV area                                            JH1106
         LR    R14,R1              R14 -> RQSV area              JH1106
         LA    R15,RQSVLEN         Clear work area (<1024 bytes) JH1106
         SLR   R1,R1               Clear work area               JH1106
         MVCL  R14,R0              Clear work area               JH1106
         USING RQSV,R3                 IRARQSRV
         PGSER R,FIX,A=RQSV,EA=RQSV,ECB=0
         LA    R4,1                    first ASID
*loop
SMFD10   DS    0H
         LOCASCB ASID=(R4)             get addr of owner's
         LTR   R2,R1                   valid ASID?
         JNP   SMFD80                  no, jump
         USING ASCB,R2
         ICM   R1,B'1111',ASCBJBNI-ASCB(R2) Jobanme
         JNZ   SMFD30                  Yes - continue
         ICM   R1,B'1111',ASCBJBNS-ASCB(R2) Start/Mount/Logon
         JNZ   SMFD30                  No - continue
SMFD20   DS    0H
         LA    R1,BLANKS
SMFD30   DS    0H
         MVC   WORK256(8),0(R1)        Save Jobname
         ST    R4,WKCELL1              ASID
         SR    R0,R0                   clear R0
         ICM   R0,B'1100',WKCELL1+2    ASID into R0
         ICM   R0,B'0001',=X'31'       Event x'31' 49
         LR    R1,R3                   Area to be return
*        SYSEVENT REQSVDAT             Macro destroy R0 use
         SVC   95                      the SVC
         CHI   R15,4                   rc4 ?
         JE    SMFD45                  yes no data
         JH    SMFD90                    > leave
SMFD40   DS    0H
         AIF   ('&SMF_ZAAPZIIP' EQ 'Y').SMFD41
         AGO   .SMFD42
.SMFD41  DS    0H
         CLC   RQSVSUS+104,=FD'0'
         JNE   SMFD42
         CLC   RQSVSUS+112,=FD'0'
         JNE   SMFD42
         CLC   RQSVSUS+152,=FD'0'
         JNE   SMFD42
         CLC   RQSVSUS+160,=FD'0'
         JNE   SMFD42
         J     SMFD80                    No data to display, next ASID
.SMFD42  DS    0H
SMFD42   DS    0H
*        #SNAP ADDR=(R3),LENGTH=320    debug code
         STRING64 2X,(WORK256,8),' Workload: ',(RQSVWKLD,8),           X
               '  Service    : ',(RQSVSCL,8),                          X
               '  Resource: ',(RQSVRGRP,8),                            X
               '  Report:      ',(RQSVRCL,8),                          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 10X,' Subsys  : ',(RQSVSUS+48,8),                    X
               '  Env        : ',(RQSVSUS+24,16),                      X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1
         STRING64 10X,' CPU     : ',(RQSVCPU,F,R9B),                   X
               ' IOC        : ',(RQSVIOC,F,R9B),                       X
               ' MSO     : ',(RQSVMSO,F,R9B),                          X
               ' SRB   : ',(RQSVSRB,F,R9B),                            X
               INTO=LINE
*              ' TRC: ',(RQSVTRC,F,R9B),  Needed ???
         BRASL R14,SPACE1
         STRING64 10X,' Enc-CPU : ',(RQSVECPU,F,R9B),                  X
               ' DepEnc-CPU : ',(RQSVDET,F,R9B),                       X
               ' Enc-TRC : ',(RQSVETRC,F,R9B),                         X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 10X,' Enc-zAAP      : ',(RQSVSUS+72,FD,R16B),        X
               '  DepEnc-zAAP      : ',(RQSVSUS+80,FD,R16B),           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 10X,' Enc-zAAP on CP: ',(RQSVSUS+88,FD,R16B),        X
               '  DepEnc-zAAP on CP: ',(RQSVSUS+96,FD,R16B),           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 10X,' Enc-zAAP      : ',(RQSVSUS+104,FD,R16B),       X
               '  DepEnc-zAAP      : ',(RQSVSUS+112,FD,R16B),          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 10X,' Enc-zIIP      : ',(RQSVSUS+120,FD,R16B),       X
               '  DepEnc-zIIP      : ',(RQSVSUS+128,FD,R16B),          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 10X,' Enc-zIIP on CP: ',(RQSVSUS+136,FD,R16B),       X
               '  DepEnc-zIIP on CP: ',(RQSVSUS+144,FD,R16B),          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 10X,' Enc-zIIP qual : ',(RQSVSUS+152,FD,R16B),       X
               '  DepEnc-zIIP qual : ',(RQSVSUS+160,FD,R16B),          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 10X,' ASID-zIIP     : ',(RQSVSUS+168,FD,R16B),       X
               '  ASID-zIIP on CP  : ',(RQSVSUS+176,FD,R16B),          X
               INTO=LINE
         BRASL R14,SPACE1
         J     SMFD80
SMFD45   DS    0H
         STRING64 2X,(WORK256,8),' No data',INTO=LINE
         BRASL R14,SPACE1
SMFD80   DS    0H
         LA    R4,1(,R4)               bump ASID
         BRCT  R7,SMFD10               No - continue
*endloop
         BRASL R14,BLANK1              blank line
         J     SMFD95
SMFD90   DS   0H
         ST    R15,LRETCODE
         STRING64 '  REQSVDAT FAILED',                                 X
               ' Returncode=',(LRETCODE,,X),                           X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
SMFD95   DS   0H
         PGSER R,FREE,A=RQSV,EA=RQSV,ECB=0
         LM    R1,R2,GETMAIN_LEN_ADDR  load addr and length
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    SMFD95_1                yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free work area
         J     ARMD99
SMFD95_1 DS    0H
         LR    R0,R2                   length for FREEMAIN
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES             RS1002
.SMFD99  ANOP
SMFD99   END_PROC
         TITLE 'SHOWMVS &REL - Logger (IXGLOGR)'
*---------------------------------------------------------------------*
*                                                                     *
* System Logger (IXGLOGR)                                             *
*                                                                     *
*   Type             Structure                  Date        Time      *
*   OPERLOG          SYSPLEX.OPERLOG            2009-04-01  12.34.31  *
*   LOGREC           SYSPLEX.LOGREC.ALLRECS     2009-04-01  12.32.11  *
*   HSA_LOG          HSA.WORKITEM.HISTORY       2009-04-01  12.32.17  *
*   HSA_LOG          HSA.MESSAGE.LOG            2009-04-01  12.32.16  *
*   *DASDONLY*       DFH.DCCPW01.DFHLOG         2002-10-21  04.18.53  *
*   *DASDONLY*       DFH.DCCP202.DFHSHUNT       2002-10-21  04.18.51  *
*   *DASDONLY*       DFH.DCCP201.DFHLOG         2002-10-21  04.18.48  *
*   *DASDONLY*       DFH.DCCP202.DFHLOG         2002-10-21  04.18.46  *
*   *DASDONLY*       DFH.DCCP203.DFHSHUNT       2002-10-21  04.18.43  *
*   *DASDONLY*       DFH.DCCP203.DFHLOG         2002-10-21  04.18.41  *
*   *DASDONLY*       DFH.DCCPT01.DFHSHUNT       2002-10-21  04.18.39  *
*   *DASDONLY*       DFH.DCCPT01.DFHLOG         2002-10-21  04.18.38  *
*   *DASDONLY*       DFH.DCCPF01.DFHSHUNT       2002-10-21  04.18.36  *
*   *DASDONLY*       DFH.DCCPF01.DFHLOG         2002-10-21  04.18.34  *
*   *DASDONLY*       ATR.RRSAL10.ARCHIVE        2002-09-07  21.06.34  *
*   *DASDONLY*       ATR.RRSAL10.RESTART        2002-09-07  21.06.33  *
*   *DASDONLY*       ATR.RRSAL10.DELAYED.UR     2002-09-07  21.06.27  *
*   *DASDONLY*       ATR.RRSAL10.MAIN.UR        2002-09-07  21.06.25  *
*   *DASDONLY*       ATR.RRSAL10.RM.DATA        2002-09-07  21.06.23  *
*                                                                     *
*---------------------------------------------------------------------*
LOGR00   BEGIN_PROC KW=LOGR,AUTH=YES                             RS1002
         STRING64 '&TITLEPFX.System Logger (IXGLOGR)',INTO=LINE
         BRASL R14,SPACE2
         STRING64 '  Type',13X,'Structure',18X,'Date',8X,'Time',       X
               INTO=LINE
         BRASL R14,SPACE2
         L     R3,CVTECVT
         ICM   R3,B'1111',ECVTLSAB-ECVT(R3)                      RS0803
         JZ    LOGR95                                            RS0803
         USING LSAB,R3                                           RS0803
         ICM   R4,B'1111',LSABASCB     IXGLOGR ASCB              RS0803
         JZ    LOGR95                    ok, not active leave    RS0803
         USING ASCB,R4
*        CTA@ in IXGLOGR address space
         AIF   (NOT D'CVTALR).LOGR01   z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    LOGR01                     no use old             RS0309
         ESAIR R2                      Get current sec. asid     RS0309
         STG   R2,WKCELL1              Save current sec. asid    RS0309
         J     LOGR01_1                Jump around               RS0309
.LOGR01  ANOP                                                    RS0309
LOGR01   DS    0H                                                RS0309
         ESAR  R2                      Get current sec. asid
         STH   R2,WKCELL1              Save current sec. asid
LOGR01_1 DS    0H                                                RS0309
         AXSET AX==H'1'                Set auth
         LH    R2,ASCBASID             Get IXGLOGR asid
         STH   R2,WKCELL2              Save current sec. asid
         LTR   R2,R2                   Valid asid?               RS0508
         JZ    LOGR91                    no, not active leave    RS0508
         LOCASCB ASID=(R2)             Get addr of ASCB          RS0508
         LTR   R15,R1                  Valid ASID?               RS0508
         JNP   LOGR91                    no, not active leave    RS1008
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME             RS1008
         JNZ   LOGR03                  Yes - continue            RS1008
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON   RS1008
         JNZ   LOGR03                  No - continue             RS1008
         J     LOGR91                                            RS1008
LOGR03   DS    0H                                                RS1008
         CLC   0(8,R1),=CL8'IXGLOGR'                             RS1008
         JNE   LOGR91                                            RS1008
         AIF   (NOT D'CVTALR).LOGR04   z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    LOGR04                     no use old             RS0309
         L     R1,ASCBASSB-ASCB(R15)   ASSB                      RS0309
         USING ASSB,R1                                           RS0309
         LMH   R2,R2,ASSBISQN             Sequence               RS0309
         DROP  R1                                                RS0309
         SSAIR R2                      Set IXGLOGR as secondary  RS0309
         J     LOGR04_1                Jump around               RS0309
.LOGR04  ANOP                                                    RS0309
LOGR04   DS    0H                                                RS0309
         SSAR  R2                      Set IXGLOGR as secondary
LOGR04_1 DS    0H                                                RS0309
         L     R3,LSABCTA@-LSAB(,R3)   Address of CTA
         DROP  R3,R4
         USING CTA@,R3
         LA    R14,CTA@HLEN             Set lenght of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
*        #SNAP ADDR=WORK256,LENGTH=CTA@HLEN debug code
         LA    R4,WORK256                                        RS0706
         USING CTA@,R4                                           RS0706
         CLI   CTA@VER,X'03'           Version 3??               RS0706
         JL    LOGR05                     no                     RS0706
         AHI   R3,16                   +16                       RS0706
         LA    R7,513                  number of CTA@ entries (201)0706
*                                      hardcoded !!!! formula    RS0706
*                                      (CTA@length-16)/88        RS0706
         J     LOGR10                                            RS0706
LOGR05   DS    0H                                                RS0706
         LA    R3,CTA@HLEN(,R3)        Address of first CTA
         LA    R7,257                  number of CTA@ entries (101)
*                                      hardcoded !!!! formula
*                                      (CTA@length-8)/88
         DROP  R3,R4
*loop
LOGR10   DS    0H
* get CTA-entry
         LA    R14,CTA@ELEN            Set length of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
*        #SNAP ADDR=WORK256,LENGTH=CTA@ELEN debug code
         LA    R4,WORK256
         USING CTA@ENTR,R4
         ICM   R5,B'1111',CTA@STRC
         JZ    LOGR80
         ICM   R5,B'1111',CTA@LSMF_F    first LSMF
         JZ    LOGR80
         DROP  R4                      WORK256 no longer needed
         LR    R4,R5                   R4 is free so reuse
* loop
LOGR30   DS 0H
         LA    R14,LSMFLEN             Set length of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256+100(R14),0(R4),R15 Copy data from sec. asid
*        #SNAP ADDR=WORK256+100,LENGTH=LSMFLEN debug code
         LA    R4,WORK256+100
         USING LSMF,R4
         LA    R1,LSMFTOD              TOD
         BRASL R14,STCKCONV            convert TOD clock to decimal
         STRING64 2X,LSMFTYPE,1X,LSMFDSN,1X,STCKDATE,2X,(STCKTIME,8),  X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         LA    R14,LCBLEN
         SR    R15,R15
         ICM   R5,B'1111',LSMFLCB
         JZ    LOGR70
         MVCP  WORK256+200(R14),0(R5),R15
         LA    R5,WORK256+200
         USING LCB,R5
*        data from LCB present but not displayed
LOGR70   DS 0H
         ICM   R4,B'1111',LSMFFORW     next LSMF
         JNZ   LOGR30                    more entries
*  endloop
LOGR80   DS 0H
         LA    R3,CTA@ELEN(,R3)        point to CTA@ entry
         JCT   R7,LOGR10               Do until number of entries
*endloop
LOGR90   DS 0H
         AIF   (NOT D'CVTALR).LOGR90_1 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    LOGR90_1                   no use old             RS0309
         LG    R2,WKCELL1                                        RS0309
         SSAIR R2                      Should be same as primary RS0309
         J     LOGR90_2                Jump around               RS0309
.LOGR90_1 ANOP                                                   RS0309
LOGR90_1 DS    0H                                                RS0309
         LH    R2,WKCELL1
         SSAR  R2                      Should be same as primary
LOGR90_2 DS    0H                                                RS0309
         AXSET AX==H'0'                Reset auth
         XC    WKCELL1,WKCELL1
         BRASL R14,BLANK1              blank line
         J     LOGR99                                            RS0803
LOGR91   DS 0H                                                   RS0508
         AXSET AX==H'0'                Reset auth                RS0508
         XC    WKCELL1,WKCELL1                                   RS0508
LOGR95   DS 0H                                                   RS0803
         STRING64 '  IXGLOGR not active',INTO=LINE               RS0803
         BRASL R14,SPACE2                                        RS0803
.LOGR99  ANOP
LOGR99   END_PROC
         TITLE 'SHOWMVS &REL - Resource Recovery Manager'
*---------------------------------------------------------------------*
*                                                                     *
*Resource Recovery Manager                                            *
*                                                                     *
* RRS-Name           Token (char - hex)   Version  Flags  State       *
* DSN.RRSPAS.IBM.DB25        l    0000D300   0000   0000      4       *
* DSN.RRSATF.IBM.DB25        l    0000D300   0000   0000      4       *
* DSN.RRSATF.IBM.DB26             00000000   0000   0000      6       *
* DSN.RRSPAS.IBM.DB26             00000000   0000   0000      6       *
*                                                                     *
* System    XCF-Member-Name   XCF-Stat  Log-Group                     *
* CA11      CA11              Active    PLEXC1                        *
*                                                                     *
* RRS Work Manager Name                                               *
* DSN.RRSPAS.IBM.DE0G                                                 *
*                                                                     *
*                                                                     *
* U.R.  Date Time   ID                WorkMgr Name                    *
*                                                                     *
* 2005-05-24 15.00  BD0EBBC67E62DF14  DSN.RRSPAS.IBM.DE0G             *
* 2005-05-24 15.00  BD0EBBC67E62FAB4  DSN.RRSPAS.IBM.DE0G             *
* 2005-05-24 15.00  BD0EBBC67E62FE28  DSN.RRSPAS.IBM.DE0G             *
*                                                                     *
*---------------------------------------------------------------------*
RRS00    BEGIN_PROC KW=RRS               ATRQUERY require        RS0302
RRS10    STRING64 '&TITLEPFX.Resource Recovery Service (RRS)',INTO=LINE
         BRASL R14,SPACE2                                          +RS
         BRASL R14,WORKADDR            LOCATE WORK AREA            +RS
         LR    R3,R1                   R3 = workarea               +RS
         AHI   R0,-32760               prevent 0C4 on last page  RA0505
         ST    R0,ANSLEN               try this length first     RS0601
         ST    R3,ANSAREA              Put output at this address  +JM
         MVC   ANSLEN,=F'32760'                                  DA0505
         ATRQUERY REQUEST=RMINFO,AREAADDR=ANSAREA,AREALEN=ANSLEN,      X
               COUNT=QUERYLEN,RETCODE=LRETCODE,RSNCODE=LRSNCODE,       X
               PLISTVER=6,                                             X
               MF=(E,WORK256,COMPLETE)                           RS0207
         CH    R0,=Y(ATRQUERY_RRS_NOT_ACTIVE) RRS active?
         JE    RRS80                   No                          +RS
         LTR   R15,R15                 Success?                    +RS
         JNZ   RRS90                   No, error                   +RS
         USING ATRFZRM,R3              tell assembly
         STRING64 '  RRS-Name',26X,'Token     (char - hex)',14X,       X
               'Version  Flags  State',                          RS1108X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
RRS20    DS    0H                                                  +JM
         STRING64 2X,ATRFZRMRMNAME,2X,                                 X
               ATRFZRMRMTOKEN,(ATRFZRMRMTOKEN,,X),7X,                  X
               (ATRFZRMVERSION,2,X),3X,                                X
               (ATRFZRMFLAGS,2,X),2X,                                  X
               (ATRFZRMRMSTATE,F,R5B),                                 X
               INTO=LINE
         TR    LINE,TRTDOTS      convert non-printable to dots   RS0102
         BRASL R14,SPACE1              Single Space                +JM
         ICM   R3,B'1111',ATRFZRMNEXT  any more                    +JM
         JNZ   RRS20                   yes                         +JM
         BRASL R14,BLANK1              Double Space
         CLC   LRETCODE,=AL4(ATRQUERY_WARNING) Problem?          DA0505
         JNE   RRS$RMX                 No, continue              DA0505
         CLC   LRSNCODE,=AL4(ATRQUERY_AREA_FULL) Area full?      DA0505
         JNE   RRS$RME                 No, continue              DA0505
         BRASL R14,BLANK1              Double Space              DA0505
         STRING64 '  Not all RMINFO entries were returned +',    DA0505X
               INTO=LINE                                         DA0505
         BRASL R14,SPACE1              Double Space              DA0505
RRS$RME  DS    0H                                                DA0505
         STRING64 '  ATRQUERY REQUEST=RMINFO ',                  DA0505X
               ' Returncode=',(LRETCODE,,X),                     DA0505X
               ' Reasoncode=',(LRSNCODE,,X),                     DA0505X
               ' Size=',(ANSLEN,F,L),                            DA0505X
               INTO=LINE                                         DA0505
         BRASL R14,SPACE2              Double Space              DA0505
RRS$RMX  DS    0H                                                DA0505
         DROP  R3                                                DA0505
*                                                                DA0505
* Display RRS System information (OS/390 R8 and above)           DA0505
*                                                                DA0505
         L     R14,ANSAREA             To: Address               DA0505
         L     R15,ANSLEN              To: Length                DA0505
         SLR   R1,R1                   From: Set length and pad  DA0505
         MVCL  R14,R0                  Zero out area             DA0505
         L     R3,ANSAREA              Get work area             DA0505
*                                                                DA0505
         ATRQUERY REQUEST=SYSINFO,     Get system info           DA0505X
               AREAADDR=ANSAREA,AREALEN=ANSLEN,                  DA0505X
               COUNT=QUERYLEN,                                   DA0505X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,                DA0505X
               MF=(E,WORK256,COMPLETE)                           RS0207
         CLC   LRETCODE,=AL4(ATRQUERY_WARNING) Problem?          DA0505
         JH    RRS$SIE                 Yes, report error         DA0505
         BRASL R14,BLANK1              Print Blank line          DA0505
         USING ATRFZSI,R3                                        DA0505
         STRING64 '  System    XCF-Member-Name   XCF-Stat  Log-Group', X
               INTO=LINE                                         DA0505
         BRASL R14,SPACE2              Double Space              DA0505
RRS$SIL  DS    0H                                                DA0505
         MVC   WKCELL1,BLANKS                                    DA0505
         CLI   ATRFZSIMEMSTATE,ATRFZSIMEMSTATE_ACTIVE            DA0505
         JNE   RRS$SILA                                          DA0505
         MVC   WKCELL1(6),=C'Active'                             DA0505
RRS$SILA DS    0H                                                DA0505
         STRING64 2X,ATRFZSISYSNAME,2X,                          DA0505X
               ATRFZSIMEMNAME,2X,                                DA0505X
               WKCELL1,2X,                                       DA0505X
               ATRFZSIGNAME,                                     DA0505X
               INTO=LINE                                         DA0505
         TR    LINE,TRTDOTS      convert non-printable to dots   DA0505
         BRASL R14,SPACE1              Print line                DA0505
         ICM   R3,B'1111',ATRFZSINEXT  Any more?                 DA0505
         JZ    RRS$SIX                 Yes, get next one         DA0505
*                                                                DA0505
         CLC   LRETCODE,=AL4(ATRQUERY_WARNING) Problem?          DA0505
         JNE   RRS$SIX                 No, continue              DA0505
         CLC   LRSNCODE,=AL4(ATRQUERY_AREA_FULL) Area full?      DA0505
         JNE   RRS$SIE                 No, continue              DA0505
         BRASL R14,BLANK1              Double Space              DA0505
         STRING64 '  Not all SYSINFO entries were returned +',   DA0505X
               INTO=LINE                                         DA0505
         BRASL R14,SPACE1              Double Space              DA0505
RRS$SIE  DS    0H                                                DA0505
         STRING64 '  ATRQUERY REQUEST=SYSINFO ',                 DA0505X
               ' Returncode=',(LRETCODE,,X),                     DA0505X
               ' Reasoncode=',(LRSNCODE,,X),                     DA0505X
               ' Size=',(ANSLEN,F,L),                            DA0505X
               INTO=LINE                                         DA0505
         BRASL R14,SPACE2              Double Space              DA0505
RRS$SIX  DS    0H                                                DA0505
         BRASL R14,BLANK1                                        DA0505
         DROP  R3                                                DA0505
*                                                                DA0505
* Display RRS Work Managers                                      DA0505
*                                                                DA0505
         L     R14,ANSAREA             To: Address               DA0505
         L     R15,ANSLEN              To: Length                DA0505
         SLR   R1,R1                   From: Set length and pad  DA0505
         MVCL  R14,R0                  Zero out area             DA0505
         L     R3,ANSAREA              Get work area             DA0505
*                                                                DA0505
         ATRQUERY REQUEST=WMINFO,      Get Work Manager info     DA0505X
               AREAADDR=ANSAREA,AREALEN=ANSLEN,                  DA0505X
               COUNT=QUERYLEN,                                   DA0505X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,                DA0505X
               PLISTVER=6,                                             X
               MF=(E,WORK256,COMPLETE)                           RS0207
         CLC   QUERYLEN,=F'0'          WMINFO exist?             RS0505
         JE    RRS$WMX                 No, continue              RS0505
         CLC   LRETCODE,=AL4(ATRQUERY_WARNING) Problem?          DA0505
         JH    RRS$WME                 Yes, report error         DA0505
         BRASL R14,BLANK1              Print Blank line          DA0505
         USING ATRFZWM,R3              tell assembly             DA0505
         STRING64 '  RRS WorkMgr-Name',                          DA0505X
               INTO=LINE                                         DA0505
         BRASL R14,SPACE2              Double Space              DA0505
RRS$WML  DS    0H                                                DA0505
         STRING64 2X,ATRFZWMWMNAME,                              DA0505X
               INTO=LINE                                         DA0505
         BRASL R14,SPACE1              Print line                DA0505
         ICM   R3,B'1111',ATRFZWMNEXT  Any more?                 DA0505
         JNZ   RRS$WML                 Yes, get next one         DA0505
*                                                                DA0505
         CLC   LRETCODE,=AL4(ATRQUERY_WARNING) Any problems?     DA0505
         JNE   RRS$WMX                 No, continue              DA0505
         CLC   LRSNCODE,=AL4(ATRQUERY_AREA_FULL) Area full?      DA0505
         JNE   RRS$WME                 No, continue              DA0505
         BRASL R14,BLANK1              Double Space              DA0505
         STRING64 '  Not all RRS WMINFO entries were returned +', DA0505
               INTO=LINE                                         DA0505
         BRASL R14,SPACE1              Double Space              DA0505
RRS$WME  DS    0H                                                DA0505
         STRING64 '  ATRQUERY REQUEST=WMINFO ',                  DA0505X
               ' Returncode=',(LRETCODE,,X),                     DA0505X
               ' Reasoncode=',(LRSNCODE,,X),                     DA0505X
               ' Size=',(ANSLEN,F,L),                            DA0505X
               INTO=LINE                                         DA0505
         BRASL R14,SPACE2              Double Space              DA0505
RRS$WMX  DS    0H                                                DA0505
         BRASL R14,BLANK1                                        DA0505
*                                                                DA0505
* Display RRS Units of Recovery.  There is a lot of fields in    DA0505
* ATRZFZUR and there may be other fields which give better info. DA0505
*                                                                DA0505
         L     R14,ANSAREA             To: Address               DA0505
         L     R15,ANSLEN              To: Length                DA0505
         SLR   R1,R1                   From: Set length and pad  DA0505
         MVCL  R14,R0                  Zero out area             DA0505
         L     R3,ANSAREA              Get work area             DA0505
*                                                                DA0505
         ATRQUERY REQUEST=URINFO,      Get UR info from RRS      DA0505X
               AREAADDR=ANSAREA,AREALEN=ANSLEN,                  DA0505X
               COUNT=QUERYLEN,                                   DA0505X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,                DA0505X
               PLISTVER=6,                                             X
               MF=(E,WORK256,COMPLETE)                           RS0207
         CLC   QUERYLEN,=F'0'          URINFO exist?             RS0505
         JE    RRS$URX                 No, continue              RS0505
         CLC   LRETCODE,=AL4(ATRQUERY_WARNING) Problem?          DA0505
         JH    RRS$URE                 Yes, report error         DA0505
         BRASL R14,BLANK1              Print Blank line          DA0505
         USING ATRFZUR,R3              tell assembly             DA0505
         STRING64 '  U.R.  Date Time   ID                WorkMgr-Name',X
               INTO=LINE                                         DA0505
         BRASL R14,SPACE2              Double Space              DA0505
RRS$URL  DS    0H                                                DA0505
         LA    R1,ATRFZURCRTIME        Locate Create time        DA0505
         BRASL R14,STCKCONV            Convert TOD to Dec        DA0505
         STRING64 2X,STCKDATE,1X,(STCKTIME,5),                   DA0505X
               2X,(ATRFZURURID,L'ATRFZURURID,X),2X,              DA0505X
               ATRFZURWMNAME,                                    DA0505X
               INTO=LINE                                         DA0505
         BRASL R14,SPACE1              Print line                DA0505
         ICM   R3,B'1111',ATRFZURNEXT  Any more?                 DA0505
         JNZ   RRS$URL                 Yes, get next one         DA0505
*                                                                DA0505
         CLC   LRETCODE,=AL4(ATRQUERY_WARNING) Problem?          DA0505
         JNE   RRS$URX                 No, continue              DA0505
         CLC   LRSNCODE,=AL4(ATRQUERY_AREA_FULL) Area full?      DA0505
         JNE   RRS$URE                 No, continue              DA0505
         BRASL R14,BLANK1              Just spaces               DA0505
         STRING64 '  Not all URINFO entries were returned +',    DA0505X
               INTO=LINE                                         DA0505
         BRASL R14,SPACE1              Double Space              DA0505
RRS$URE  DS    0H                                                DA0505
         STRING64 '  ATRQUERY REQUEST=URINFO ',                  DA0505X
               ' Returncode=',(LRETCODE,,X),                     DA0505X
               ' Reasoncode=',(LRSNCODE,,X),                     DA0505X
               ' Size=',(ANSLEN,F,L),                            DA0505X
               INTO=LINE                                         DA0505
         BRASL R14,SPACE2              Double Space              DA0505
RRS$URX  DS    0H                                                DA0505
         BRASL R14,BLANK1              Just spaces               DA0505
         J     RRS99                   end                         +JM
RRS80    STRING64 '  RRS is not active',INTO=LINE                  +RS
         J     RRS98                   end                         +RS
RRS90    STRING64 '  ATRQUERY FAILED - ',                              X
               ' Returncode=',(LRETCODE,,X),                           X
               ' Reasoncode=',(LRSNCODE,,X),                           X
               ' Size=',(ANSLEN,F,L),                                  X
               INTO=LINE                                           +RS
RRS98    BRASL R14,SPACE2              Double Space                +RS
RRS99    END_PROC
         TITLE 'SHOWMVS &REL - Automatic Restart Manager'
*---------------------------------------------------------------------*
*                                                                  +RS*
*ARM Data                                                          +RS*
*                                                                  +RS*
*  Element           Init-Sys Curr-Sys Clone Restart-Group    Jobname *
*---------------------------------------------------------------------*
ARM00    BEGIN_PROC KW=ARM,AUTH=YES              GETMAIN req     RS0302
         STRING64 '&TITLEPFX.ARM Data',INTO=LINE                   +RS
         BRASL R14,SPACE2              Double Space                +RS
         BRASL R14,WORKADDR            allocate XCF Answer Area    +RS
         LR    R5,R1                   remember getmained storage  +RS
         USING QUAHDR,R5               tell assembly               +RS
         MVC   ANSLEN,=F'1024'         try this length first       +RS
*
*        Find out how much storage is needed for the answer area
*
         IXCQUERY REQINFO=ARMS_ALLDATA,                                X
               ANSAREA=QUAHDR,ANSLEN=ANSLEN,                           X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   +RS
         CH    R0,=Y(QUAARSNNOARMDSN)  ARM dataset defined ?       +RS
         JE    ARMD80                  No
         CH    R0,=Y(QUAARSNRECORDSREMAIN) Data to short
         JE    ARMD05                  No
         LTR   R15,R15                 Success?
         JNZ   ARMD90                  No, error                   +RS
         J     ARMD15                  process data
ARMD05   DS    0H
*        Allocate a work area for the answer area and request the
*        data again
         MVI   WKCELL1,X'FF'           remember getmain
         L     R2,QUAHTLEN             How much is required        +JM
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    ARMD06                  yes, jump
         GETMAIN RU,LV=(R2)            allocate ARM work area
         J     ARMD10
ARMD06   DS    0H
         LR    R0,R2                   Length of storage
         LA    R1,1                    LOC=ANY
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES             RS1002
         LR    R2,R0
ARMD10   DS    0H
         STM   R1,R2,GETMAIN_LEN_ADDR  save addr and length
         LR    R5,R1                   remember getmained storage  +RS
         ST    R2,ANSLEN               Size of answer area         +JM
         IXCQUERY REQINFO=ARMS_ALLDATA,                                X
               ANSAREA=QUAHDR,ANSLEN=ANSLEN,                           X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   +RS
         LTR   R15,R15                 Success?                    +RS
         JNZ   ARMD90                  No, error                   +RS
ARMD15   DS    0H
         ICM   R7,B'1111',QUAH#REC     record counter              +RS
         JZ    ARMD80                  no record, quit             +RS
         L     R6,QUAHSGOF             get offset                  +RS
         LA    R6,QUAHDR(R6)           point to the records        +RS
         USING QUAARMS,R6              tell assembly               +RS
         STRING64 '  Registered Max: ',(QUAARMSMAXELEMENTS,F,R9B),     X
               '  Tot: ',(QUAARMSTOTELEMENTS,F,R9B),                   X
               INTO=LINE                                         RS0504
         BRASL R14,SPACE2              Double Space              RS0504
         STRING64 '  Element',10X,'Init-Sys Curr-Sys Clone ',          X
               'Restart-Group    Jobname',INTO=LINE
         BRASL R14,SPACE1              Single Space                +RS
*loop
ARMD20   STRING64 2X,QUAARMSELEMENT,1X,QUAARMSINITSYS,1X,              X
               QUAARMSCURRSYS,1X,QUAARMSINITCLONE,4X,                  X
               QUAARMSRESTARTGROUP,1X,QUAARMSJOBNAME,INTO=LINE     +RS
         BRASL R14,SPACE1                                          +RS
         LA    R6,QUAARMSLENG(R6)                                  +RS
         JCT   R7,ARMD20                                           +RS
*endloop
         J     ARMD98                                              +RS
ARMD80   STRING64 '  ARM-Dataset not defined',INTO=LINE            +RS
         J     ARMD97                  end                         +RS
ARMD90   STRING64 '  IXCQUERY (ARM) FAILED - ',                        X
               ' Returncode=',(LRETCODE,,X),                           X
               ' Reasoncode=',(LRSNCODE,,X),                           X
               ' Size=',(ANSLEN,F,L),                                  X
               INTO=LINE                                           +RS
ARMD97   BRASL R14,SPACE1              Single Space                +RS
ARMD98   BRASL R14,BLANK1              Blank line                  +RS
         CLI   WKCELL1,X'FF'           getmain done ?
         JNE   ARMD99
         LM    R1,R2,GETMAIN_LEN_ADDR  load addr and length
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    ARMD98_1                yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free ARM work area
         J     ARMD99
ARMD98_1 DS    0H
         LR    R0,R2                   length for FREEMAIN
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES             RS1002
.ARMD99  ANOP                                                      +RS
ARMD99   END_PROC                                                  +RS
         TITLE 'SHOWMVS &REL - TCP/IP Stack info'                RS0905
*---------------------------------------------------------------------*
*                                                                     *
*TCP/IP data                                                          *
*                                                                     *
*Statistics (see macro EZBZMONP)                                      *
*                                                                     *
*arpInRequests              :    6087014 arpOutRequests           :   *
*arpInReplies               :      16400 arpOutReplies            :   *
*ioReads                    :     429326 ioWrites                 :   *
*icmpInMsgs                 :       5779 icmpOutMsgs              :   *
*ipForwDatagram             :          0 ipFragCreates            :   *
*ipFragFails                :          0 ipFragOKs                :   *
*ipInAddrErrors             :       1445 ipInHdrErrors            :   *
*ipInReceives               :     538860 ipOutRequests            :   *
*ipReasmFails               :          0 ipReasmOKs               :   *
*ipReasmReqds               :          0                              *
*tcpInSegs                  :     350827 tcpOutSegs               :   *
*tcpRetransSegs             :        572 tcpConnections           :   *
*udpInDatagrams             :       1083 udpOutDatagrams          :   *
*                                                                     *
*TotCPUtime1                :          0 TotCPUtime2              :   *
*csaTotAllocated            :    9190984 csaTotInUse              :   *
*                                                                     *
* and so on                                                           *
*                                                                     *
*                                                                     *
*Storage-Statistics                                                   *
*ECSA Current: 5720000          Max: 7299872          Limit: 0        *
*Priv Current: 4392096          Max: 5599424          Limit: 0        *
*                                                                     *
*TCP/IP Connections                                                   *
*Resource Asid Interface Start-Date/Time     Local-IP:Port       Rem  *
*SYSNFSC    41 OSA11L    2004-09-17 13.44.07 10.1.7.1:2102       10.  *
*              State: 0005 Opt: 08 Optv6: 00 Cluster: 00 Proto: 00    *
*              Bytes/Segs in : 3279364/2307 out: 27800/232            *
*              ReXmit#: 0                                             *
*                                                                     *
*State: 1-Closed,2-Listen,3-SyncSent,4-SyncRcvd,5-Estab,6-InWait1,7-I *
*       9-LastAck,10-Closing,11-TimeWait,12-DeleteTCB                 *
*  Opt: 80-SO_ReuseRAddr,40-SO_OOBOnline,20-SO_Linger,10-T_MsgDontRou *
*       04-SO_Keepalive,02-Timing_Linger,01-Timing_Keepalive          *
* Opt6: 80-UNICAST_HOPS,40-HOPLIMIT,20-USEMINMTU,10-PKTINFO,08-RCVPKT *
*       02-V6ONLY                                                     *
*Clust: 08-InternalCluster,04-SameImage,02-SameCluster,01-NoCluster   *
* Prot: 04-Proto_TN3270E,02-Proto_TN3270,01-Proto_Line_Mode           *
*                                                                     *
*TCP/IP Listener                                                      *
*                                                                     *
*Resource Asid Start-Date/Time     Local-IP:Port                      *
*SYSADSMW  112 2004-08-27 11.57.44 0.0.0.0:1062                       *
*SYSTCPFT   66 2004-08-26 19.20.04 0.0.0.0:21                         *
*SYSTCAT   424 2004-09-17 11.33.48 0.0.0.0:8080                       *
*                                                                     *
*---------------------------------------------------------------------*
TCPIP00  BEGIN_PROC KW=TCPIP
         AIF   (NOT D'CVTH7707).TCPIP99   z/OS R4?
         TM    HBB7707,L'HBB7707       running on z/OS R4
         JZ    TCPIP99                 no, leave
         STRING64 '&TITLEPFX.TCP/IP data',INTO=LINE
         BRASL R14,SPACE2              Double Space
         BRASL R14,WORKADDR            32K work area
         LR    R3,R1
         USING IP_BUFFER,R3
         CNOP  0,4                     boundary
         BRAS  R6,TCPIP00_0
         CNOP  0,4
         DC    A(TCPIP00_0)
TCPIP00_0  DS    0H
         L     R6,0(R6,0)
         USING TCPIP00_0,R6
         MVC   WKCELL1(4),=F'1'
         EZASMI TYPE=GETIBMOPT,RETCODE=LRETCODE,ERRNO=LRSNCODE,        X
               BUF=(R3),COMMAND=WKCELL1
*        #SNAP ADDR=LRETCODE,LENGTH=8  debug code
*        #SNAP ADDR=(R3),LENGTH=16     Debug code
         CLC   LRETCODE,=X'FFFFFFFF'   -1 indicate error
         JE    TCPIP00_5
         L     R4,IP_NUM_IMAGES
         LTR   R4,R4                   check zero                RS0310
         JE    TCPIP100                  yes leave               RS0310
*loop
TCPIP00_1 DS   0H
         TM    IP_STATUS,BIT0          Is this TCP-stack active??
         JZ    TCPIP00_2
         MVC   IP_NAME,IP_TCPIPNAME    remember 1. act IP-stack
         J     TCPIP00_3
TCPIP00_2  DS   0H
         LA    R3,IP_BUF_ENTRY(R3)
         JCT   R4,TCPIP00_1
*endloop
         J     TCPIP00_6
TCPIP00_3 DS   0H
         DROP  R3
         MVC   IP_FAMILY,=H'2'         INET!!
         MVC   MY_NAME,OWN_NAME
         BRASL R14,WORKADDR            32K work area
         LR    R3,R1
         USING MonDataIn,R3            EZBZMONP
         MVC   BufVer,=A(MonDataVersion) Version 3 is supported
         MVC   BufLen,=A(MonDataOutLen) Length
         LR    R4,R3
         AHI   R4,MonDataInLen         around the MonDataIn
         USING MonDataOut,R4           EZBZMONP
         ST    R4,BuffAddr64LW
         EZASMI TYPE=INITAPI,     ISSUE INITAPI MACRO                  X
               SUBTASK=OWN_NAME,  SPECIFY SUBTASK IDENTIFIER           X
               MAXSOC==H'10',     SPECIFY MAXIMUM NUMBER OF SOCKETS    X
               MAXSNO=MAXSNO,     (HIGHEST SOCKET NUMBER ASSIGNED)     X
               APITYPE==H'2',     (SPECIFY APITYPE FIELD)              X
               IDENT=IDENT_IP,    NAME local                           X
               RETCODE=LRETCODE,ERRNO=LRSNCODE
*        #SNAP ADDR=LRETCODE,LENGTH=8
         CLC   LRETCODE,=X'FFFFFFFF'    -1 indicate error
         JE    TCPIP00_5
         EZASMI TYPE=SOCKET,AF='INET',SOCTYPE='STREAM',                X
               RETCODE=LRETCODE,ERRNO=LRSNCODE
*        #SNAP ADDR=LRETCODE,LENGTH=8
         CLC   LRETCODE,=X'FFFFFFFF'    -1 indicate error
         JE    TCPIP00_5
         L     R7,LRETCODE             Socket descriptor
         STH   R7,SOC_DESC
         EZASMI TYPE=IOCTL,S=SOC_DESC,                                 X
               REQARG=(R3),RETARG=(R4),COMMAND='SIOCGMONDATA',         X
               RETCODE=LRETCODE,ERRNO=LRSNCODE
*        #SNAP ADDR=(R3),LENGTH=MonDataOutLen  Debug code
         CLC   LRETCODE,=X'FFFFFFFF'    -1 indicate error
         JE    TCPIP00_5
         STRING64 '  Statistics (see macro EZBZMONP)',INTO=LINE
         BRASL R14,SPACE2
         STRING64 '  arpInRequests              : ',                   X
               (arpInRequests,F,R10B),                                 X
               ' arpOutRequests           : ',(arpOutRequests,F,R10B), X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  arpInReplies               : ',                   X
               (arpInReplies,F,R10B),                                  X
               ' arpOutReplies            : ',(arpOutReplies,F,R10B),  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ioReads                    : ',(ioReads,F,R10B),  X
               ' ioWrites                 : ',(ioWrites,F,R10B),       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  icmpInMsgs                 : ',                   X
               (icmpInMsgs,F,R10B),                                    X
               ' icmpOutMsgs              : ',(icmpOutMsgs,F,R10B),    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipForwDatagram             : ',                   X
               (ipForwDatagrams,F,R10B),                               X
               ' ipFragCreates            : ',(ipFragCreates,F,R10B),  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipFragFails                : ',                   X
               (ipFragFails,F,R10B),                                   X
               ' ipFragOKs                : ',(ipFragOKs,F,R10B),      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipInAddrErrors             : ',                   X
               (ipInAddrErrors,F,R10B),                                X
               ' ipInHdrErrors            : ',(ipInHdrErrors,F,R10B),  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipInReceives               : ',                   X
               (ipInReceives,F,R10B),                                  X
               ' ipOutRequests            : ',(ipOutRequests,F,R10B),  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipReasmFails               : ',                   X
               (ipReasmFails,F,R10B),                                  X
               ' ipReasmOKs               : ',(ipReasmOKs,F,R10B),     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipReasmReqds               : ',                   X
               (ipReasmReqds,F,R10B),                                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpInSegs                  : ',                   X
               (tcpInSegs,F,R10B),                                     X
               ' tcpOutSegs               : ',(tcpOutSegs,F,R10B),     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpRetransSegs             : ',                   X
               (tcpRetransSegs,F,R10B),                                X
               ' tcpConnections           : ',(tcpConnections,F,R10B), X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  udpInDatagrams             : ',                   X
               (udpInDatagrams,F,R10B),                                X
               ' udpOutDatagrams          : ',                         X
               (udpOutDatagrams,F,R10B),                               X
               INTO=LINE
         BRASL R14,SPACE2
         STRING64 '  TotCPUtime1                : ',                   X
               (TotCPUtime1,F,R10B),                                   X
               ' TotCPUtime2              : ',(TotCPUtime2,F,R10B),    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  csaTotAllocated            : ',                   X
               (csaTotAllocated,F,R10B),                               X
               ' csaTotInUse              : ',(csaTotInUse,F,R10B),    X
               INTO=LINE
         BRASL R14,SPACE2
         STRING64 '  ipInUnknownProtos          : ',                   X
               (ipInUnknownProtos,F,R10B),                             X
               ' ipInDiscards             : ',(ipInDiscards,F,R10B),   X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipInDelivers               : ',                   X
               (ipInDelivers,F,R10B),                                  X
               ' ipOutDiscards            : ',(ipOutDiscards,F,R10B),  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipOutNoRoutes              : ',                   X
               (ipOutNoRoutes,F,R10B),                                 X
               ' ipReasmTimeout           : ',(ipReasmTimeout,F,R10B), X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipInDevLayerCalls          : ',                   X
               (ipInDevLayerCalls,F,R10B),                             X
               ' ipInUnpackErrors         : ',                         X
               (ipInUnpackErrors,F,R10B),                              X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipInDiscardsMemory         : ',                   X
               (ipInDiscardsMemory,F,R10B),                            X
               ' ipOutDiscardsDlcSynch    : ',                         X
               (ipOutDiscardsDlcSynch,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipOutDiscardsDlcAsynch     : ',                   X
               (ipOutDiscardsDlcAsynch,F,R10B),                        X
               ' ipOutDiscardsMemory      : ',                         X
               (ipOutDiscardsMemory,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpActiveOpens             : ',                   X
               (tcpActiveOpens,F,R10B),                                X
               ' tcpPassiveOpens          : ',                         X
               (tcpPassiveOpens,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpAttemptFails            : ',                   X
               (tcpAttemptFails,F,R10B),                               X
               ' tcpEstabResets           : ',                         X
               (tcpEstabResets,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpOutRsts                 : ',                   X
               (tcpOutRsts,F,R10B),                                    X
               ' tcpPassiveDrops          : ',                         X
               (tcpPassiveDrops,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpTimeWaitReused          : ',                   X
               (tcpTimeWaitReused,F,R10B),                             X
               ' tcpConnsClosed           : ',                         X
               (tcpConnsClosed,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpPredictAck              : ',                   X
               (tcpPredictAck,F,R10B),                                 X
               ' tcpPredictData           : ',                         X
               (tcpPredictData,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpInDupAck                : ',                   X
               (tcpInDupAck,F,R10B),                                   X
               ' tcpInBadSum              : ',                         X
               (tcpInBadSum,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpInBadLen                : ',                   X
               (tcpInBadLen,F,R10B),                                   X
               ' tcpInShort               : ',                         X
               (tcpInShort,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpInPawsDrop              : ',                   X
               (tcpInPawsDrop,F,R10B),                                 X
               ' tcpInAllBeforeWin        : ',                         X
               (tcpInAllBeforeWin,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpInSomeBeforeWin         : ',                   X
               (tcpInSomeBeforeWin,F,R10B),                            X
               ' tcpInAllAfterWin         : ',                         X
               (tcpInAllAfterWin,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpInSomeAfterWin          : ',                   X
               (tcpInSomeAfterWin,F,R10B),                             X
               ' tcpInOutOfOrder          : ',                         X
               (tcpInOutOfOrder,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpInAfterClose            : ',                   X
               (tcpInAfterClose,F,R10B),                               X
               ' tcpInWinProbes           : ',                         X
               (tcpInWinProbes,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpInWinUpdates            : ',                   X
               (tcpInWinUpdates,F,R10B),                               X
               ' tcpOutWinUpdates         : ',                         X
               (tcpOutWinUpdates,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpOutDelayAcks            : ',                   X
               (tcpOutDelayAcks,F,R10B),                               X
               ' tcpRxmtTimers            : ',                         X
               (tcpRxmtTimers,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpRxmtDrops               : ',                   X
               (tcpRxmtDrops,F,R10B),                                  X
               ' tcpPMTURxmts             : ',                         X
               (tcpPMTURxmts,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpPMTUErrors              : ',                   X
               (tcpPMTUErrors,F,R10B),                                 X
               ' tcpOutWinProbes          : ',                         X
               (tcpOutWinProbes,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpProbeDrops              : ',                   X
               (tcpProbeDrops,F,R10B),                                 X
               ' tcpKeepAliveProbes       : ',                         X
               (tcpKeepAliveProbes,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  tcpKeepAliveDrops          : ',                   X
               (tcpKeepAliveDrops,F,R10B),                             X
               ' tcpFinwait2Drops         : ',                         X
               (tcpFinwait2Drops,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpInMsgs           : ',                   X
               (ipv6IfIcmpInMsgs,F,R10B),                              X
               ' ipv6IfIcmpInErrors       : ',                         X
               (ipv6IfIcmpInErrors,F,R10B),INTO=LINE
         STRING64 '  ipv6IfIcmpInDestUnreachs   : ',                   X
               (ipv6IfIcmpInDestUnreachs,F,R10B),                      X
               ' ipv6IfIcmpInAdminProhibs : ',                         X
               (ipv6IfIcmpInAdminProhibs,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpInTimeExcds      : ',                   X
               (ipv6IfIcmpInTimeExcds,F,R10B),                         X
               ' ipv6IfIcmpInParmProblems : ',                         X
               (ipv6IfIcmpInParmProblems,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpInPktTooBigs     : ',                   X
               (ipv6IfIcmpInPktTooBigs,F,R10B),                        X
               ' ipv6IfIcmpInEchos        : ',                         X
               (ipv6IfIcmpInEchos,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpInEchoReplies    : ',                   X
               (ipv6IfIcmpInEchoReplies,F,R10B),                       X
               ' ipv6IfIcmpInRtrSolicits  : ',                         X
               (ipv6IfIcmpInRtrSolicits,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpInRtrAdvs        : ',                   X
               (ipv6IfIcmpInRtrAdvs,F,R10B),                           X
               ' ipv6IfIcmpInRtrSolicits  : ',                         X
               (ipv6IfIcmpInNbrSolicits,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpInNbrAdvs        : ',                   X
               (ipv6IfIcmpInNbrAdvs,F,R10B),                           X
               ' ipv6IfIcmpInRedirects    : ',                         X
               (ipv6IfIcmpInRedirects,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpInGrpMembQueries : ',                   X
               (ipv6IfIcmpInGrpMembQueries,F,R10B),                    X
               ' ipv6IfIcmpInGrpMembResps : ',                         X
               (ipv6IfIcmpInGrpMembResps,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpInGrpMembReds    : ',                   X
               (ipv6IfIcmpInGrpMembReds,F,R10B),                       X
               ' ipv6IfIcmpOutMsgs        : ',                         X
               (ipv6IfIcmpOutMsgs,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpOutErrors        : ',                   X
               (ipv6IfIcmpOutErrors,F,R10B),                           X
               ' ipv6IfIcmpOutDestUnreachs: ',                         X
               (ipv6IfIcmpOutDestUnreachs,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpOutAdminProhibs  : ',                   X
               (ipv6IfIcmpOutAdminProhibs,F,R10B),                     X
               ' ipv6IfIcmpOutTimeExcds   : ',                         X
               (ipv6IfIcmpOutTimeExcds,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpOutParmProblems  : ',                   X
               (ipv6IfIcmpOutParmProblems,F,R10B),                     X
               ' ipv6IfIcmpOutPktTooBigs  : ',                         X
               (ipv6IfIcmpOutPktTooBigs,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpOutEchos         : ',                   X
               (ipv6IfIcmpOutEchos,F,R10B),                            X
               ' ipv6IfIcmpOutEchoReplies : ',                         X
               (ipv6IfIcmpOutEchoReplies,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpOutRtrSolicits   : ',                   X
               (ipv6IfIcmpOutRtrSolicits,F,R10B),                      X
               ' ipv6IfIcmpOutRtrAdvs     : ',                         X
               (ipv6IfIcmpOutRtrAdvs,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpOutNbrSolicits   : ',                   X
               (ipv6IfIcmpOutNbrSolicits,F,R10B),                      X
               ' ipv6IfIcmpOutNbrAdvs     : ',                         X
               (ipv6IfIcmpOutNbrAdvs,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpOutRedirects     : ',                   X
               (ipv6IfIcmpOutRedirects,F,R10B),                        X
               ' ipv6IfIcmpOutNbrAdvs     : ',                         X
               (ipv6IfIcmpOutNbrAdvs,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpOutGrpMembQueries: ',                   X
               (ipv6IfIcmpOutGrpMembQueries,F,R10B),                   X
               ' ipv6IfIcmpOutGrpMembResps: ',                         X
               (ipv6IfIcmpOutGrpMembResps,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6IfIcmpOutGrpMembReds   : ',                   X
               (ipv6IfIcmpOutGrpMembReds,F,R10B),                      X
               ' ipv6InReceives           : ',                         X
               (ipv6InReceives,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6InHdrErrors            : ',                   X
               (ipv6InHdrErrors,F,R10B),                               X
               ' ipv6InAddrErrors         : ',                         X
               (ipv6InAddrErrors,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6ForwDatagrams          : ',                   X
               (ipv6ForwDatagrams,F,R10B),                             X
               ' ipv6InUnknownProtos      : ',                         X
               (ipv6InUnknownProtos,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6InDiscards             : ',                   X
               (ipv6InDiscards,F,R10B),                                X
               ' ipv6InDelivers           : ',                         X
               (ipv6InDelivers,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6OutDiscards            : ',                   X
               (ipv6OutRequests,F,R10B),                               X
               ' ipv6OutNoRoutes          : ',                         X
               (ipv6OutNoRoutes,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6ReasmTimeout           : ',                   X
               (ipv6ReasmTimeout,F,R10B),                              X
               ' ipv6ReasmReqds           : ',                         X
               (ipv6ReasmReqds,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6ReasmOKs               : ',                   X
               (ipv6ReasmOKs,F,R10B),                                  X
               ' ipv6ReasmFails           : ',                         X
               (ipv6ReasmFails,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6FragOKs                : ',                   X
               (ipv6FragOKs,F,R10B),                                   X
               ' ipv6FragFails            : ',                         X
               (ipv6FragFails,F,R10B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ipv6FragCreates            : ',                   X
               (ipv6FragCreates,F,R10B),INTO=LINE
         BRASL R14,SPACE2
         STRING64 '  ioInOctetsSum   : ',                              X
               (ioInOctetsSum,FD,R16B),                                X
               '  ioOutOctetsSum   : ',                                X
               (ioOutOctetsSum,FD,R16B),                               X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ioInUcastSum    : ',                              X
               (ioInUcastSum,FD,R16B),                                 X
               '  ioOutUcastSum    : ',                                X
               (ioOutUcastSum,FD,R16B),                                X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ioInMulticastSum: ',                              X
               (ioInMulticastSum,FD,R16B),                             X
               '  ioOutMulticastSum: ',                                X
               (ioOutMulticastSum,FD,R16B),                            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  ioInBroadcastSum: ',                              X
               (ioInBroadcastSum,FD,R16B),                             X
               '  ioOutBroadcastSum: ',                                X
               (ioOutBroadcastSum,FD,R16B),                            X
               INTO=LINE
         BRASL R14,SPACE2
         DROP  R3,R4
         BRASL R14,WORKADDR            32K work area
         LR    R3,R1
         USING IF_NAMEINDEX,R3         BPXYIOCC
         EZASMI TYPE=IOCTL,S=SOC_DESC,                                 X
               REQARG==F'32767',RETARG=(R3),                           X
               COMMAND='SIOCGIFNAMEINDEX',                             X
               RETCODE=LRETCODE,ERRNO=LRSNCODE
*        #SNAP ADDR=(R3),LENGTH=256    Debug code
         CLC   LRETCODE,=X'FFFFFFFF'    -1 indicate error
         JE    TCPIP00_5
         STRING64 '  Interfaces (see macro BPXYIOCC)',INTO=LINE
         BRASL R14,SPACE2
         ICM   R4,B'1111',IF_NIENTRIES         Number of interf. RS0209
         JZ    TCPIP00_6                                         RS0209
         LA    R3,IF_NITABLE
         USING IF_NAMEINDEXENTRY,R3    BPXYIOCC
*loop
TCPIP00_4 DS   0H
         STRING64 2X,(IF_NINAME),INTO=LINE
         BRASL R14,SPACE1
         LA    R3,IF_NAMEINDEXENTRYL(,R3) next entry
         JCT   R4,TCPIP00_4
*endloop
         BRASL R14,BLANK1
         J     TCPIP00_6
TCPIP00_5 DS   0H
         STRING64 'TCP/IP Returncode: ',                               X
               (LRETCODE,,X),' with RSN (ErrNo): ',                    X
               (LRSNCODE,,X),                                          X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
TCPIP00_6 DS   0H
         DROP  R3,R6
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         JZ    TCPIP100                no, leave
*        Allocate a work area for the answer area and request the
*        data again
         MODESET EXTKEY=ZERO           switch to KEY=0
         L     R2,=A(4194504)          How much is required 4MB  RS0806
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    TCPIP01                 yes, jump
         GETMAIN RU,LV=(R2)            allocate work area
         J     TCPIP10
TCPIP01  DS    0H
         LR    R0,R2                   Length of storage
         LA    R1,1                    LOC=ANY
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
         LR    R2,R0
TCPIP10  DS    0H
         STM   R1,R2,GETMAIN_LEN_ADDR  save addr and length
         LR    R3,R1
* Storage Statistics
         STRING64 '  Storage-Statistics',INTO=LINE
         BRASL R14,SPACE2              Double Space
         USING NWMHeader,R3
         MVC   NWMHeaderIdent,=A(NWMHeaderIdentifier)
         MVC   NWMHeaderLength,=A(NWMHeaderSize)
         L     R0,=A(NWMCurrentVer)
         STH   R0,NWMVersion
         L     R0,=A(NWMStgStatsType)       Storage Statistics
         STH   R0,NWMType
         MVC   NWMBytesNeeded,=F'0'
         XC    NWMFilters,NWMFilters        clear
         L     R0,=A(NWMHeaderSize)         offset to NMWFilters
         ST    R0,NWMFilters
         MVC   NWMFilters+4(4),=F'128'      length of NNWFilters
         MVC   NWMFilters+8(4),=F'1'        number of NNWFilters
         XC    NWMStgStatsDesc,NWMStgStatsDesc Only Stg Statistics
         L     R0,=A(NWMHeaderSize+NWMFilterSize)
         ST    R0,NWMStgStatsDesc
         MVC   NWMTcpConnDesc+4(4),=A(NWMStgStatEntrySize)
         LR    R4,R3
         LA    R4,NWMHeaderSize(R4)
         USING NWMFilter,R4
         MVC   NWMFilterIdent,=A(NWMFilterIdentifier)
         XC    NWMFilterFlags,NWMFilterFlags  No Filter
         LR    R5,R3
         LA    R5,NWMHeaderSize(R5)
         LA    R5,NWMFilterSize(R5)
         USING NWMStgStatEntry,R5
         LOAD  EP=EZBNMIFR,ERRET=TCPIP39 LOAD API leave if not pres.
         LR    R15,R0
         CALL  (15),                   EZBNMIFR                        X
               (=CL8'*',               Name                            X
               NWMHeader,              ResponseBuffer                  X
               =F'0',                  ResponseBufferALet              X
               =F'4194504',            ResponseBufferLength      RS0806X
               WKCELL1,                ReturnValue                     X
               LRETCODE,               Retcode                         X
               LRSNCODE),              Rsncode                         X
               MF=(E,WORK256)
         DELETE EP=EZBNMIFR
         SLR   R0,R0
         ICM   R1,B'1111',WKCELL1
         JM    TCPIP19                 Minus = Error
*        #SNAP ADDR=(R7),LENGTH=NWMStgStatEntrySize debug code
         STRING64 '  ECSA Current: ',(NWMStgECSACurrent,FD,L16B),      X
               ' Max: ',(NWMStgECSAMax,FD,L16B),                       X
               ' Limit: ',(NWMStgECSALimit,FD,L16B),                   X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  Priv Current: ',(NWMStgPrivateCurrent,FD,L16B),   X
               ' Max: ',(NWMStgPrivateMax,FD,L16B),                    X
               ' Limit: ',(NWMStgPrivateLimit,FD,L16B),                X
               INTO=LINE
         BRASL R14,SPACE2
         J     TCPIP20
TCPIP19  DS    0H
         STRING64 '  EZBNMIFR  RC: ',(LRETCODE,,X),' RSN: ',           X
               (LRSNCODE,,X),' Type: ',(NWMType,,X),INTO=LINE
         BRASL R14,SPACE2
TCPIP20  DS    0H
         DROP  R4,R5
* Tcp Connections
         STRING64 '  TCP/IP Connections',INTO=LINE
         BRASL R14,SPACE2              Double Space
         MVC   NWMHeaderIdent,=A(NWMHeaderIdentifier)
         MVC   NWMHeaderLength,=A(NWMHeaderSize)
*        L     R0,=A(NWMCurrentVer)    Version2 is for z/OS R7   RS0505
         L     R0,=A(NWMVersion1)      Version1 is for all       RS0505
         STH   R0,NWMVersion
         L     R0,=A(NWMTcpConnType)
         STH   R0,NWMType
         MVC   NWMBytesNeeded,=F'0'
         XC    NWMFilters,NWMFilters        clear
         L     R0,=A(NWMHeaderSize)         offset to NMWFilters
         ST    R0,NWMFilters
         MVC   NWMFilters+4(4),=A(NWMFilterSize)
         MVC   NWMFilters+8(4),=F'1'        number of NNWFilters
         XC    NWMTcpConnDesc,NWMTcpConnDesc  Only TCP-Connection
         L     R0,=A(NWMHeaderSize+NWMFilterSize)
         ST    R0,NWMTcpConnDesc
         MVC   NWMTcpConnDesc+4(4),=F'262144'  256K
         LR    R4,R3
         LA    R4,NWMHeaderSize(R4)
         USING NWMFilter,R4
         MVC   NWMFilterIdent,=A(NWMFilterIdentifier)
         XC    NWMFilterFlags,NWMFilterFlags  No Filter ??
         LOAD  EP=EZBNMIFR,ERRET=TCPIP39 LOAD API leave if not pres.
         LR    R15,R0
         CALL  (15),                   EZBNMIFR                        X
               (=CL8'*',               Name                            X
               NWMHeader,              ResponseBuffer                  X
               =F'0',                  ResponseBufferALet              X
               =F'4194504',            ResponseBufferLength      RS0806X
               WKCELL1,                ReturnValue                     X
               LRETCODE,               Retcode                         X
               LRSNCODE),              Rsncode                         X
               MF=(E,WORK256)
         DELETE EP=EZBNMIFR
*        #SNAP ADDR=(R3),LENGTH=NWMHeaderSize  Debug
         SLR   R0,R0
         ICM   R1,B'1111',WKCELL1
         JM    TCPIP29                 Minus = Error
         LA    R7,NWMTcpConnDesc
         USING NWMQuadruplet,R7
*        L     R6,NWMQNumber           Number of entries         RS0208
         ICM   R6,B'1111',NWMQNumber           Number of entries RS0208
         JZ    TCPIP30                                           RS0208
         LR    R5,R3
         A     R5,NWMQOffset           Data starts here
         USING NWMTCPConnEntry,R5
TCPIP21  DS    0H
         STRING64 '  Resource ','Asid',1X,'Interface',1X,              X
               'Start-Date/Time',5X,                                   X
               'Local-IP:Port',7X,'Remote-IP:Port',INTO=LINE
         BRASL R14,SPACE1
*loop
TCPIP25  DS     0H
*        #SNAP ADDR=(R5),LENGTH=NWMTCPConnEntrySize or 276 |||   RS0406
         AIF   ('&VERBOSE_TN3270' EQ 'Y').TCPIP25N
         TM    NWMConnProto,X'04'  TN3270E ?
         JO    TCPIP25_1            omit those entries
         TM    NWMConnProto,X'02'  TN3270  ?
         JO    TCPIP25_1            omit those entries
.TCPIP25N ANOP
         LA    R1,NWMConnStartTime
         BRASL R14,STCKCONV
         STRING64 2X,(NWMConnResourceName),1X,                         X
               (NWMConnAsid,H,R4B),1X,                                 X
               (NWMConnIntfName,8),2X,                                 X
               (STCKDATE,10),1X,(STCKTIME,8),INTO=LINE
         STRING64 (LINE,,T),1X,(NWMConnLocalAddr4+4,FL1,L3B),INTO=LINE
         STRING64 (LINE,,T),'.',INTO=LINE
         STRING64 (LINE,,T),(NWMConnLocalAddr4+5,FL1,L3B),INTO=LINE
         STRING64 (LINE,,T),'.',INTO=LINE
         STRING64 (LINE,,T),(NWMConnLocalAddr4+6,FL1,L3B),INTO=LINE
         STRING64 (LINE,,T),'.',INTO=LINE
         STRING64 (LINE,,T),(NWMConnLocalAddr4+7,FL1,L3B),INTO=LINE
         STRING64 (LINE,,T),':',INTO=LINE
         STRING64 (LINE,,T),(NWMConnLocalAddr4+2,FL2,L5B),INTO=LINE
         STRING64 (LINE,66),(NWMConnRemoteAddr4+4,FL1,L3B),INTO=LINE
         STRING64 (LINE,,T),'.',INTO=LINE
         STRING64 (LINE,,T),(NWMConnRemoteAddr4+5,FL1,L3B),INTO=LINE
         STRING64 (LINE,,T),'.',INTO=LINE
         STRING64 (LINE,,T),(NWMConnRemoteAddr4+6,FL1,L3B),INTO=LINE
         STRING64 (LINE,,T),'.',INTO=LINE
         STRING64 (LINE,,T),(NWMConnRemoteAddr4+7,FL1,L3B),INTO=LINE
         STRING64 (LINE,,T),':',INTO=LINE
         STRING64 (LINE,,T),(NWMConnRemoteAddr4+2,FL2,L5B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 16X,'State: ',(NWMConnState,,X),                     X
               ' Opt: ',(NWMConnSockOpt,,X),                           X
               ' Optv6: ',(NWMConnSockOpt6,,X),                        X
               ' Cluster: ',(NWMConnClusterConnFlag,,X),               X
               ' Proto: ',(NWMConnProto,,X),                           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 16X,'Bytes/Segs in : ',(NWMConnBytesIn,FD,L16B),     X
               INTO=LINE
         STRING64 (LINE,,T),'/',(NWMConnInSegs,FD,L16B),INTO=LINE
         STRING64 (LINE,,T),' out: ',(NWMConnBytesOut,FD,L16B),        X
               INTO=LINE
         STRING64 (LINE,,T),'/',(NWMConnOutSegs,FD,L16B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 16X,'ReXmit#: ',(NWMConnReXmtCount,F,L9B),INTO=LINE
         BRASL R14,SPACE1
         CLI   NWMConnTargetAppl,C' '  Filled?
         JNH   TCPIP25_1                 no leave
         STRING64 16X,'Appl : ',NWMConnTargetAppl,                     X
               ' LU: ',NWMConnLuName,' Userid: ',NWMConnClientUserId,  X
               ' Mode: ',NWMConnLogMode,INTO=LINE
         BRASL R14,SPACE1
TCPIP25_1 DS     0H
         A     R5,NWMQLength
         JCT   R6,TCPIP25
         AIF   ('&VERBOSE_TN3270' EQ 'Y').TCPIP26
         STRING64 '  Output limited because VERBOSE was set to N',     X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
*endloop
.TCPIP26 ANOP
         STRING64 '  State: 1-Closed,2-Listen,3-SyncSent,4-SyncRcvd,', X
               '5-Estab,6-InWait1,7-InWait2,8-ClosWait',INTO=LINE
         BRASL R14,SPACE1              Double Space
         STRING64 8X,' 9-LastAck,10-Closing,11-TimeWait,12-DeleteTCB', X
               INTO=LINE
         BRASL R14,SPACE1              Double Space
         STRING64 '    Opt: 80-SO_ReuseRAddr,40-SO_OOBOnline,',        X
               '20-SO_Linger,10-T_MsgDontRoute,08-No_Delay',INTO=LINE
         BRASL R14,SPACE1              Double Space
         STRING64 9X,'04-SO_Keepalive,02-Timing_Linger,',              X
               '01-Timing_Keepalive',INTO=LINE
         BRASL R14,SPACE1              Double Space
         STRING64 '   Opt6: 80-UNICAST_HOPS,40-HOPLIMIT,20-USEMINMTU,',X
               '10-PKTINFO,08-RCVPKTINFO,04-RCVHOPLIM',INTO=LINE
         BRASL R14,SPACE1              Double Space
         STRING64 9X,'02-V6ONLY',INTO=LINE
         BRASL R14,SPACE1              Double Space
         STRING64 '  Clust: 08-InternalCluster,04-SameImage,',         X
               '02-SameCluster,01-NoCluster',INTO=LINE
         BRASL R14,SPACE1              Double Space
         STRING64 '   Prot: 04-Proto_TN3270E,02-Proto_TN3270,',        X
               '01-Proto_Line_Mode',INTO=LINE
         BRASL R14,SPACE2              Double Space
         J     TCPIP30
TCPIP29  DS    0H
         STRING64 '  EZBNMIFR  RC: ',(LRETCODE,,X),' RSN: ',           X
               (LRSNCODE,,X),' Type: ',(NWMType,,X),INTO=LINE
         BRASL R14,SPACE2
TCPIP30  DS    0H
         DROP  R4,R5,R7
* Tcp Listener
         STRING64 '  TCP/IP Listener',INTO=LINE
         BRASL R14,SPACE2              Double Space
         MVC   NWMHeaderIdent,=A(NWMHeaderIdentifier)
         MVC   NWMHeaderLength,=A(NWMHeaderSize)
*        L     R0,=A(NWMCurrentVer)    Version2 is for z/OS R7   RS0505
         L     R0,=A(NWMVersion1)      Version1 is for all       RS0505
         STH   R0,NWMVersion
         L     R0,=A(NWMTcpListenType)
         STH   R0,NWMType
         MVC   NWMBytesNeeded,=F'0'
         XC    NWMFilters,NWMFilters        clear
         L     R0,=A(NWMHeaderSize)         offset to NMWFilters
         ST    R0,NWMFilters
         MVC   NWMFilters+4(4),=A(NWMFilterSize)
         MVC   NWMFilters+8(4),=F'1'        number of NNWFilters
         XC    NWMTcpListenDesc,NWMTcpListenDesc Only Listener
         L     R0,=A(NWMHeaderSize+NWMFilterSize)
         ST    R0,NWMTcpListenDesc
         MVC   NWMTcpListenDesc+4(4),=F'262144'  256K
         LR    R4,R3
         LA    R4,NWMHeaderSize(R4)
         USING NWMFilter,R4
         MVC   NWMFilterIdent,=A(NWMFilterIdentifier)
         XC    NWMFilterFlags,NWMFilterFlags  No Filter ??
         LOAD  EP=EZBNMIFR,ERRET=TCPIP39 LOAD API leave if not pres.
         LR    R15,R0
         CALL  (15),                   EZBNMIFR                        X
               (=CL8'*',               Name                            X
               NWMHeader,              ResponseBuffer                  X
               =F'0',                  ResponseBufferALet              X
               =F'4194504',            ResponseBufferLength      RS0806X
               WKCELL1,                ReturnValue                     X
               LRETCODE,               Retcode                         X
               LRSNCODE),              Rsncode                         X
               MF=(E,WORK256)
         DELETE EP=EZBNMIFR
         SLR   R0,R0
         ICM   R1,B'1111',WKCELL1
         JM    TCPIP39                 Minus = Error
         LA    R7,NWMTcpListenDesc
         USING NWMQuadruplet,R7
*        L     R6,NWMQNumber           Number of entries         RS0208
         ICM   R6,B'1111',NWMQNumber           Number of entries RS0208
         JZ    TCPIP40                                           RS0208
         LR    R5,R3
         A     R5,NWMQOffset           Data starts here
         USING NWMTCPListenEntry,R5
TCPIP31  DS    0H
         STRING64 '                                       ',     JH1402X
               '                    ',                           JH1402X
               '  Exceed+    Curr+    ',INTO=LINE                JH1402
         BRASL R14,SPACE1                                        JH1402
         STRING64 '  Resource ','Asid',1X,                             X
               'Start-Date/Time',5X,                                   X
               'Local-IP:Port MaxBacklog    Backlog    Backlog', JH1402X
               ' CurrActive LastActivity',INTO=LINE              JH1402
         BRASL R14,SPACE1
*loop
TCPIP35  DS     0H
*        #SNAP ADDR=(R5),LENGTH=NWMTCPListenEntrySize or 104 ||| RS0406
*                                                                JH1402
* Send through IBM algorithm circa 1985                          JH1402
*                                                                JH1402
         L     R15,CVTPTR              Point at CVT              JH1402
         L     R15,CVTEXT2-CVTMAP(,R15) Point at CVT extension   JH1402
         USING CVTXTNT2,R15            Obtain addressdability    JH1402
         LM    R0,R1,NWMTCPLStartTime  Load STCK clock value     JH1402
         AL    R0,CVTLDTO              Add hi-order word         JH1402
         AL    R1,CVTLDTO+4            Add low-order word        JH1402
         BRC   12,*+8                                            JH1402
         AL    R0,=F'1'                Add carry                 JH1402
         SL    R0,CVTLSO               Subtract hi-order word    JH1402
         SL    R1,CVTLSO+4             Subtract low-order word   JH1402
         BRC   3,*+6                   Borrow ? Branch if not    JH1402
         BCTR  R0,0                    Subtract the borrow       JH1402
         DROP  R15                     CVTXTNT2                  JH1402
         STM   R0,R1,WORK256           Save doubleword value     JH1402
         LA    R1,WORK256              Stage for STCKCONV        JH1402
         BRASL R14,STCKCONV
         STRING64 2X,(NWMTCPLResourceName),1X,                         X
               (NWMTCPLAsid,H,R4B),1X,                                 X
               (STCKDATE,10),1X,(STCKTIME,8),INTO=LINE
         STRING64 (LINE,,T),1X,(NWMTCPLLocalAddr4+4,FL1,L3B),INTO=LINE
         STRING64 (LINE,,T),'.',INTO=LINE
         STRING64 (LINE,,T),(NWMTCPLLocalAddr4+5,FL1,L3B),INTO=LINE
         STRING64 (LINE,,T),'.',INTO=LINE
         STRING64 (LINE,,T),(NWMTCPLLocalAddr4+6,FL1,L3B),INTO=LINE
         STRING64 (LINE,,T),'.',INTO=LINE
         STRING64 (LINE,,T),(NWMTCPLLocalAddr4+7,FL1,L3B),INTO=LINE
         STRING64 (LINE,,T),':',INTO=LINE
         STRING64 (LINE,,T),(NWMTCPLLocalAddr4+2,FL2,L5B),INTO=LINE
         STRING64 1X,(NWMTCPLMaxBacklog,F,R10B),                 JH1402X
               INTO=LINE+49                                      JH1402
         STRING64 (LINE,,T),1X,(NWMTCPLExceedBacklog,F,R10B),    JH1402X
               INTO=LINE                                         JH1402
         STRING64 (LINE,,T),1X,(NWMTCPLCurrBacklog,F,R10B),      JH1402X
               INTO=LINE                                         JH1402
         STRING64 (LINE,,T),1X,(NWMTCPLCurrActive,F,R10B),       JH1402X
               INTO=LINE                                         JH1402
*                                                                JH1402
* Send through IBM algorithm circa 1985                          JH1402
*                                                                JH1402
         L     R15,CVTPTR              Point at CVT              JH1402
         L     R15,CVTEXT2-CVTMAP(,R15) Point at CVT extension   JH1402
         USING CVTXTNT2,R15            Obtain addressdability    JH1402
         LM    R0,R1,NWMTCPLLastActivity  d STCK clock value     JH1402
         AL    R0,CVTLDTO              Add hi-order word         JH1402
         AL    R1,CVTLDTO+4            Add low-order word        JH1402
         BRC   12,*+8                                            JH1402
         AL    R0,=F'1'                Add carry                 JH1402
         SL    R0,CVTLSO               Subtract hi-order word    JH1402
         SL    R1,CVTLSO+4             Subtract low-order word   JH1402
         BRC   3,*+6                   Borrow ? Branch if not    JH1402
         BCTR  R0,0                    Subtract the borrow       JH1402
         DROP  R15                     CVTXTNT2                  JH1402
         STM   R0,R1,WORK256           Save doubleword value     JH1402
         LA    R1,WORK256              Stage for STCKCONV        JH1402
*        LA    R1,NWMTCPLLastActivity                            JH1402
         BRASL R14,STCKCONV                                      JH1402
         STRING64 (LINE,,T),1X,(STCKDATE,10),1X,(STCKTIME,8),    JH1402X
               INTO=LINE                                         JH1402
         BRASL R14,SPACE1
         A     R5,NWMQLength
         JCT   R6,TCPIP35
*endloop
         J     TCPIP40
TCPIP39  DS    0H
         STRING64 '  EZBNMIFR  RC: ',(LRETCODE,,X),' RSN: ',           X
               (LRSNCODE,,X),' Type: ',(NWMType,,X),INTO=LINE
         BRASL R14,SPACE1
TCPIP40  DS    0H
         BRASL R14,BLANK1
         LM    R1,R2,GETMAIN_LEN_ADDR  load addr and length
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    TCPIP98                 yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free ARM work area
         J     TCPIP99
TCPIP98  DS    0H
         LR    R0,R2                   length for FREEMAIN
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
.TCPIP99 ANOP
TCPIP99  DS    0H
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
TCPIP100 DS    0H
         END_PROC
         TITLE 'SHOWMVS &REL - SystemRexx Info'                  RS0209
*---------------------------------------------------------------------*
*                                                                     *
*SystemRexx data (AXR)                                                *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
AXR00    BEGIN_PROC KW=AXR,AUTH=YES
         AIF   (NOT D'CVTH7740).AXR99     z/OS R9?
         TM    HBB7740,L'HBB7740       running on z/OS R9
         JZ    AXR99                   no, jump and display
         STRING64 '&TITLEPFX.SystemRexx data (AXR)',INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R3,CVTECVT
         TM    ECVTAXRB-ECVT(R3),ECVTAXRT                        RS1109
         JO    AXR95                                             RS1109
         ICM   R3,B'1111',ECVTAXRB-ECVT(R3)
         JZ    AXR95
         USING AXRB,R3
         ICM   R4,B'1111',AXRBASCB     SystemRexx
         JZ    AXR95                     ok, not active leave
         USING ASCB,R4
*        AXRB8 in AXR address space
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    AXR01                      no use old             RS0309
         ESAIR R2                      Get current sec. asid     RS0309
         STG   R2,WKCELL1              Save current sec. asid    RS0309
         J     AXR01_1                 Jump around               RS0309
AXR01    DS    0H                                                RS0309
         ESAR  R2                      Get current sec. asid
         STH   R2,WKCELL1              Save current sec. asid
AXR01_1  DS    0H                                                RS0309
         AXSET AX==H'1'                Set auth
         LH    R2,AXRBASID             Get AXR asid
         STH   R2,WKCELL2              Save current sec. asid
         LTR   R2,R2                   Valid asid?
         JZ    AXR91                     no, not active leave
         LOCASCB ASID=(R2)             Get addr of ASCB
         LTR   R15,R1                  Valid ASID?
         JNP   AXR91                     no, not active leave
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   AXR03                   Yes - continue
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         JNZ   AXR03                   No - continue
         J     AXR91
AXR03    DS    0H
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    AXR04                      no use old             RS0309
         L     R1,ASCBASSB-ASCB(R15)   ASSB                      RS0309
         USING ASSB,R1                                           RS0309
         LMH   R2,R2,ASSBISQN             Sequence               RS0309
         DROP  R1                                                RS0309
         SSAIR R2                      Set AXR as secondary      RS0309
         J     AXR04_1                 Jump around               RS0309
AXR04    DS    0H                                                RS0309
         SSAR  R2                      Set AXR as secondary
AXR04_1  DS    0H                                                RS0309
         L     R3,AXRBAXRB8P-AXRB(R3)  Address of AXRB8
         DROP  R3,R4
         LHI   R14,256                  Set lenght of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
         MVCP  WORK256+256(R14),256(R3),R15  Copy data from sec. asid
*        #SNAP ADDR=WORK256,LENGTH=512   debug code
         LA    R4,WORK256
         USING AXRB8,R4
         LA    R1,AXRB8TOD             pass TOD clock value
         BRASL R14,STCKCONV
         STRING64 2X,'SystemRexx started at: ',(STCKTIME,,8),1X,       X
               (STCKDATE,,10),INTO=LINE
         BRASL R14,SPACE1              Single Space
         L     R3,AXRB8PCOM            Address of PCOM
         DROP  R4
         LHI   R14,104                  Set lenght of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
         LA    R4,WORK256
         USING PCOM,R4
*        #SNAP ADDR=WORK256,LENGTH=104 debug code
         STRING64 2X,'Parmlib Member       : ',PCOMPARM,               X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 2X,'CPF                  : ',PCOMCPF,                X
               '  AXR-User             : ',PCOMUSER,                   X
               INTO=LINE
         BRASL R14,SPACE1              Double Space
AXR90    DS 0H
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    AXR90_1                    no use old             RS0309
         LG    R2,WKCELL1                                        RS0309
         SSAIR R2                      Should be same as primary RS0309
         J     AXR90_2                 Jump around               RS0309
AXR90_1  DS    0H                                                RS0309
         LH    R2,WKCELL1
         SSAR  R2                      Should be same as primary
AXR90_2  DS    0H                                                RS0309
         AXSET AX==H'0'                Reset auth
         XC    WKCELL1,WKCELL1
         BRASL R14,BLANK1              blank line
         J     AXR99
AXR91    DS 0H
         AXSET AX==H'0'                Reset auth
         XC    WKCELL1,WKCELL1
AXR95    DS 0H
         STRING64 '  SystemRexx not active',INTO=LINE
         BRASL R14,SPACE2
.AXR99   ANOP
AXR99    DS    0H
*        MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
         END_PROC
         TITLE 'SHOWMVS &REL - Open Catalogs'
*---------------------------------------------------------------------*
*                                                                     *
*Open Catalogs:                                                       *
*                                                                     *
*  SYS1.SYSTMCAT                                  MVSCAT   3380   4600*
*  ICF.USER.CATALOG                               MVSCAT   3380   0000*
*  UCAT.DB2                                       DB9001   3390   0100*
*                                                                     *
*---------------------------------------------------------------------*
OPENCAT  BEGIN_PROC KW=CATALOGS                                  RS0302
         STRING64 '&TITLEPFX.Open Catalogs:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  Data Set Name',34X,'Volser',13X,'Unit    FLags',  X
               INTO=LINE                                         RS0701
         BRASL R14,SPACE1              Double Space
         STRING64 '    Hit% -Records- -Searches --Found-- -Deletes-',  X
               ' -Updates- --Purge--',INTO=LINE                  RS0701
         BRASL R14,SPACE1              Double Space
         L     R5,CVTCBSP              AMCBS
*        #SNAP ADDR=(R5),LENGTH=144    debug code
         L     R6,CBSCAXCN-AMCBS(,R5)  FIRST IGGCAXWA IN CHAIN
         USING IGGCAXWA,R6
*        ST    R10,APFTABLE            for SORT routine
*LOOP
OPENCAT2 DS    0H
         #SNAP ADDR=(R6),LENGTH=272    debug code
         TM    CAXFLG5,X'80'           cat entry in use?         RS0310
         JNO   OPENCAT6                  yes next one            RS0310
         MVC   LINE,BLANKS
         ICM   R7,B'1111',CAXREUCB     Real UCB (31-bit) ?
         USING UCBOB,R7
         BRASL R14,GETUNIT             GET UNITNAME
         MVC   DSNAME,CAXCNAM          DSNAME
         CLI   DSNAME,C' '             .
         JNE   *+8                     no, jump
         MVI   DSNAME,C'?'             yes, replace space with ?
         MVC   VOLSER,UCBVOLI          VOLSER
**       MVC   VOLSER,CAXVOLID         VOLSER (CRA)
         MVC   WKCELL1,BLANKS          reset MASTER
         MVC   WKCELL3(6),=C'N-----'   default                   RS0301
         AGO   .JH0914A                                          JH0914
         ICM   R2,B'1111',CAXDSABP     Allocate to CAS?          RS1199
         JZ    OPENCAT2_1               no                       RS1199
         MVI   WKCELL3,C'Y'             Yes, set indicator       RS1199
OPENCAT2_1 DS 0H                                                 RS1199
         TM    CAXFLG3,CAXF3ICF        Check SMS                 RS1199
         JZ    OPENCAT2_2               no                       RS1199
*delete  ICM   R2,B'1111',CAXUCB       UCB                       DL0200
         LTR   R7,R7                                             DL0200
         JZ    OPENCAT2_2               no                       RS1199
         TM    1(R7),X'20'                                       DL0200
         JZ    OPENCAT2_2               no                       RS1199
         MVI   WKCELL3+1,C'S'          Yes set SMS Flag          RS1199
OPENCAT2_2 DS 0H                                                 RS1199
         MVI   WKCELL3+2,C'D'          mark as deleted           RS1199
         TM    CAXFLG2,CAXF2DT         Deleted?                  RS1199
         JNZ   OPENCAT2_10               yes ok let the D-flag   RS1199
         MVI   WKCELL3+2,C'C'          mark as closed            RS1199
         ICM   R2,B'1111',CAXACB       ACB present               RS1199
         JZ    OPENCAT2_3                no, check ISC           RS1199
         ICM   R2,B'1111',4(R2)        Check ACB                 RS1199
         JZ    OPENCAT2_10               ok let the C-flag       RS1199
OPENCAT2_3 DS 0H                                                 RS1199
         MVI   WKCELL3+2,C'V'          Mark as VLF               RS1199
         TM    CAXFLG6,CAXCDSCA        VLF?                      RS1199
         JNZ   OPENCAT2_9                yes, ok let the V-Flag  RS0402
         MVI   WKCELL3+2,C'I'          Mark as ISC               RS1199
         ICM   R2,B'1111',CAXISC       ISC?                      RS1199
         JNZ   OPENCAT2_9                 yes, ok let the I-Flag RS0301
         MVI   WKCELL3+2,C'-'          mark as neutral           RS1199
OPENCAT2_9  DS 0H                                                RS0301
         TM    CAXFLG4,CAXLOCK         Locked?                   RS0301
         JZ    OPENCAT2_10               no                      RS0301
         MVI   WKCELL3+5,C'K'          Locked                    RS0301
OPENCAT2_10 DS 0H                                                RS0301
         TM    CAXFLG3,CAXF3ICF+CAXF3SO4+CAXF3SHD                RS1199
         JNO   OPENCAT2_11               no                      RS1199
         MVI   WKCELL3+4,C'R'          Set R-Flag                RS1199
         ICM   R2,B'1111',CAXECS       Check ECS indicator       RS0301
         JZ    OPENCAT2_11               jump no ECS             RS0301
         MVI   WKCELL3+4,C'E'          Set E-Flag                RS1199
OPENCAT2_11 DS 0H                                                RS1199
         TM    CAXFLG5,CAXLCDB         ATL?                      RS1199
         JZ    OPENCAT2_12               no                      RS1199
         MVI   WKCELL3+3,C'A'          Set A-Flag                RS1199
         AGO   .JH0914B                                          JH0914
.JH0914A ANOP                                                    JH0914
         ICM   R2,B'1111',CAXDSABP-4   Allocate to CAS?          JH0914
         JZ    OPENCAT2_1               no                       JH0914
         MVI   WKCELL3,C'Y'             Yes, set indicator       JH0914
OPENCAT2_1 DS 0H                                                 JH0914
         LTR   R7,R7                   Any UCB ?                 JH0914
         JZ    OPENCAT2_2              ...jif not                JH0914
         TM    UCBFL5,UCBSMS           SMS ?                     JH0914
         JZ    OPENCAT2_2              ...jif not                JH0914
         MVI   WKCELL3+1,C'S'          Yes set SMS Flag          JH0914
OPENCAT2_2 DS 0H                                                 JH0914
         TM    CAXFLG2,CAXF2DT         Deleted ?                 JH0914
         JNZ   OPENCAT2_2B             ...jif so                 JH0914
         ICM   R2,B'1111',CAXACB       ACB in extended global    JH0914
         JZ    OPENCAT2_2A             ...jif no ACB             JH0914
         TM    X'174'(R6),X'20'        ????????????????????????? JH0914
         JNZ   OPENCAT2_2A             ...jif ?????????????????? JH0914
         ICM   R14,B'1111',4(R2)       ????????????????????????? JH0914
         JZ    OPENCAT2_2C             ????????????????????????? JH0914
OPENCAT2_2A DS 0H                                                JH0914
         TM    CAXFLG6,CAXCDSCA        VLF ?                     JH0914
         JNZ   OPENCAT2_2D             ...jif so                 JH0914
         ICM   R2,B'1111',CAXISC       ISC ?                     JH0914
         JZ    OPENCAT2_2F             ...jif not                JH0914
         J     OPENCAT2_2E             ...jif so                 JH0914
OPENCAT2_2B DS 0H                                                JH0914
         MVI   WKCELL3+2,C'D'          mark as deleted           JH0914
         J     OPENCAT2_2F             & skip mutually exclusive JH0914
OPENCAT2_2C DS 0H                                                JH0914
         MVI   WKCELL3+2,C'C'          mark as closed            JH0914
         J     OPENCAT2_2F             & skip mutually exclusive JH0914
OPENCAT2_2D DS 0H                                                JH0914
         MVI   WKCELL3+2,C'V'          Mark as VLF               JH0914
         J     OPENCAT2_2F             & skip mutually exclusive JH0914
OPENCAT2_2E DS 0H                                                JH0914
         MVI   WKCELL3+2,C'I'          Mark as ISC               JH0914
OPENCAT2_2F DS 0H                                                JH0914
         TM    CAXFLG4,CAXLOCK         Locked ?                  JH0914
         JZ    OPENCAT2_2G             ...jif not                JH0914
         MVI   WKCELL3+5,C'K'          Locked                    JH0914
OPENCAT2_2G DS 0H                                                JH0914
         TM    CAXFLG6,X'01'           Suspended ?               JH0914
         JZ    OPENCAT2_2H             ...jif not                JH0914
         MVI   WKCELL3+5,C'W'          Suspended                 JH0914
OPENCAT2_2H DS 0H                                                JH0914
         TM    CAXFLG3,CAXF3SO4        Shared ?????????????????? JH0914
         JNZ   OPENCAT2_2I             ...jif not                JH0914
         TM    X'174'(R6),X'40'        ????????????????????????? JH0914
         JNZ   OPENCAT2_2J             ...jif not                JH0914
OPENCAT2_2I DS 0H                                                JH0914
         TM    CAXFLG3,CAXF3SHD        Shared ?                  JH0914
         JZ    OPENCAT2_2J             ...jif not                JH0914
         MVI   WKCELL3+4,C'R'          Shared                    JH0914
OPENCAT2_2J DS 0H                                                JH0914
         ICM   R2,B'1111',X'104'(R6)   ECS ?                     JH0914
         JZ    OPENCAT2_2K             ...jif not                JH0914
         MVI   WKCELL3+4,C'E'          ECS                       JH0914
OPENCAT2_2K DS 0H                                                JH0914
         TM    X'174'(R6),X'20'        RLS ?                     JH0914
         JZ    OPENCAT2_2L             ...jif not                JH0914
         L     R2,CAXACB               Catalog ACB               JH0914
         TM    X'30'(R2),X'10'         Open ?                    JH0914
         JZ    OPENCAT2_2L             ...jif not                JH0914
         MVI   WKCELL3+2,C'U'          RLS                       JH0914
OPENCAT2_2L DS 0H                                                JH0914
         TM    CAXFLG5,X'10'           ATL ?                     JH0914
         JZ    OPENCAT2_2M             ...jif not                JH0914
         MVI   WKCELL3+3,C'A'          ATL                       JH0914
OPENCAT2_2M DS 0H                                                JH0914
.JH0914B ANOP                                                    JH0914
OPENCAT2_12 DS 0H
         TM    CAXFLGS,CAXMCT          master catalog?
         JZ    OPENCAT3                no, jump
         MVC   WKCELL1,=C'Master, '    first cat is master cat
*RS0701  MVC   WKCELL2(1),DSNAME       save first char of DSN
*RS0701  MVI   DSNAME,0                make sure MCAT ends up first
OPENCAT3 DS    0H
         STRING64 UNITNAME,                                            X
               (WKCELL3,6,T),2X,       Flags                     RS0301X
               (WKCELL1,,T),           MASTER                          X
               'Flags=',(CAXFLGS,4,X),(CAXFLG4,1,X),(CAXFLG6,1,X), RS11X
               ',ACB=',(CAXACB+1,3,X),                                 X
               INTO=(DEVTYPE+10,NEXTLINE)                        RS1199
         BRASL R14,SPACE1          <== next line
         SR    R1,R1                                             RS0701
         CLC   CAXSEAR,=F'0'                                     RS0701
         JE    OPENCAT5                                          RS0701
         L     R1,CAXFOUND             No of found               RS0701
         M     R0,=F'100'              Mutlitply by 100          RS0701
         D     R0,CAXSEAR              No of searches            RS0701
OPENCAT5 DS    0H
         STRING64 3X,((R1),,R3B),'%',                                  X
               2X,(CAXRECO,F,R9B),1X,(CAXSEAR,F,R9B),                  X
               1X,(CAXFOUND,F,R9B),1X,(CAXDELET,F,R9B),                X
               1X,(CAXUPD,F,R9B),1X,(CAXPURGE,F,R9B),                  X
               INTO=LINE                                         RS0701
         BRASL R14,SPACE1          <== next line                 RS0701
OPENCAT6 DS    0H                                                RS0310
         ICM   R6,B'1111',CAXCHN       NEXT CAXWA
         JNZ   OPENCAT2                PROCESS IF NOT END-OF-CHAIN
*ENDLOOP
         DROP  R6,R7                   IGGCAXWA, UCBOB
*        LA    R2,APFTABLE             TABLE DESC
*        BRASL R14,TRIZO               SORT BY DSN
*        L     R1,APFTABLE             point to first line (MCAT)
*        MVC   DSNAME-LINE(1,R1),WKCELL2 restore first char of DSN
         BRASL R14,BLANK1              BLANK LINE
         STRING64 '  Y/N-Allocated to CAS, S-SMS, V-VLF, I-ISC, ',     X
               'C-Closed, R-Shared, A-ATL, E-ECS, K-Locked',     RS0301X
               INTO=LINE                                         RS0301
         BRASL R14,SPACE2                                        RS1199
         TM    AUTHORIZED,L'AUTHORIZED                           RS0803
         JNO   OPENCAT9                                          RS0803
         MODESET EXTKEY=ZERO        <- switch to KEY=0           RS0803
         L     R6,CBSCRT-AMCBS(,R5)    CRT reside in KEY=5       RS0803
         USING CRT,R6                  IGGCRT                    RS0803
         USING AMCBS,R5                                          RS0803
*        #SNAP ADDR=(R5),LENGTH=256    debug code                RS0803
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS0307
         JNZ   OPENCAT7                 yes, leave               RS0307
*        #SNAP ADDR=(R6),LENGTH=4095   debug code                RS0803
         STRING64 '  Catalog Component Level   = ',CRTCOMP,            X
               '  Catalog Address Space ASN = ',(CRTASID,,X),          X
               INTO=LINE                                         RS0803
         BRASL R14,SPACE1                                        RS0803
         ICM   R1,B'1111',CRTSULIM          If zero default is 180
         JNZ   OPENCAT6_1                                        RS0803
         LHI   R1,180                       default              RS0803
OPENCAT6_1 DS    0H                                              RS0803
         ST    R1,WKCELL1                                        RS0307
         STRING64 '  Service Task Upper Limit  = ',(WKCELL1,F,R8B),    X
               '  Service Task Lower Limit  = ',(CRTSTLOW,F,R8B),      X
               INTO=LINE                                         RS0803
         BRASL R14,SPACE1                                        RS0803
         STRING64 '  Highest # Service Tasks   = ',(CRTHTASK,F,R8B),   X
               '  Current # Service Tasks   = ',(CRTSTCUR,F,R8B),      X
               INTO=LINE                                         RS0803
         BRASL R14,SPACE1                                        RS0803
         LA    R1,=C'No '                                        RS0803
         TM    CRTFLAG1,CRTALIT    Alias table available         RS0803
         JNZ   OPENCAT6_2                                        RS0803
         LA    R1,=C'Yes'                                        RS0803
OPENCAT6_2 DS    0H                                              RS0803
         STRING64 '  Maximum # Open Catalogs   = ',(CRTOPCAT,F,R8B),   X
               '  Alias Table available     = ',((R1),3),              X
               INTO=LINE                                         RS0803
         BRASL R14,SPACE1                                        RS0803
         IC    R1,CBSALIL          Alias level                   RS0803
         STCM  R1,B'0001',WKCELL1                                RS0803
         OI    WKCELL1,X'F0'                                     RS0803
         LA    R1,=C'On '                                        RS0803
         TM    CBSFLAG,CBSSYSC    SYS% to SYS1 conversion        RS0803
         JNZ   OPENCAT6_3                                        RS0803
         LA    R1,=C'Off'                                        RS0803
OPENCAT6_3 DS    0H                                              RS0803
         STRING64 '  Alias Levels specified    = ',(WKCELL1,1),7X,     X
               '  SYS% to SYS1 conversion   = ',((R1),3),              X
               INTO=LINE                                         RS0803
         BRASL R14,SPACE1                                        RS0803
         STRING64 '  CAS Mother Task           = ',(CRTCTASK,,X),      X
               '  CAS Modify Task           = ',(CRTMTASK,,X),         X
               INTO=LINE                                         RS0803
         BRASL R14,SPACE1                                        RS0803
         STRING64 '  CAS Analysis Task         = ',(CRTANTSK,,X),      X
               '  CAS Allocation Task       = ',(CRTATASK,,X),         X
               INTO=LINE                                         RS0803
         BRASL R14,SPACE1                                        RS0803
         MVC   WKCELL1,=C'None'                                  RS0803
         SR    R1,R1                                             RS0803
         IC    R1,CRTNOTEX            Notify extent              RS0803
         LTR   R1,R1                                             RS0803
         JZ    OPENCAT6_4                                        RS0803
         STRING64 ((R1),,R3B),'%',INTO=WKCELL1                   RS0803
OPENCAT6_4 DS    0H                                              RS0803
         STRING64 '  Volcat HI-Level Qualifier = ',CBSHLQ,             X
               '  Notify Extent             = ',(WKCELL1,4),           X
               INTO=LINE                                         RS0803
         BRASL R14,SPACE1                                        RS0803
         LA    R1,=C'On '                                        RS0803
         TM    CBSFLAG,CBSDELW     Delete UCAT/VVDS warning      RS0803
         JNZ   OPENCAT6_5                                        RS0803
         LA    R1,=C'Off'                                        RS0803
OPENCAT6_5 DS    0H                                              RS0803
         LA    R2,=C'Enabled '                                   RS0803
         TM    CRTFLAG3,CRTDSCHK   Dataset Syntax checking       RS0803
         JNZ   OPENCAT6_6                                        RS0803
         LA    R2,=C'Disabled'                                   RS0803
OPENCAT6_6 DS    0H                                              RS0803
         STRING64 '  Delete UCAT/VVDS Warning  = ',((R1),3),5X,        X
               '  Data set Syntax checking  = ',((R2),8),              X
               INTO=LINE                                         RS0803
         BRASL R14,SPACE2                                        RS0803
         J     OPENCAT8                Leave                     RS0307
OPENCAT7 DS    0H                                                RS0307
         USING CRT2,R6                 IGGCRT                    RS0803
*        #SNAP ADDR=(R6),LENGTH=900    debug code                RS0307
         STRING64 '  Catalog Component Level   = ',CRT2COMP,           X
               '  Catalog Address Space ASN = ',(CRT2ASID,,X),         X
               INTO=LINE                                         RS0307
         BRASL R14,SPACE1                                        RS0307
         ICM   R1,B'1111',CRT2SULIM    If zero default is 180
         JNZ   OPENCAT7_1                                        RS0307
         LHI   R1,180                  default                   RS0307
OPENCAT7_1 DS    0H                                              RS0307
         ST    R1,WKCELL1                                        RS0307
         STRING64 '  Service Task Upper Limit  = ',(WKCELL1,F,R8B),    X
               '  Service Task Lower Limit  = ',(CRT2STLOW,F,R8B),     X
               INTO=LINE                                         RS0307
         BRASL R14,SPACE1                                        RS0307
         STRING64 '  Highest # Service Tasks   = ',(CRT2HTASK,F,R8B),  X
               '  Current # Service Tasks   = ',(CRT2STCUR,F,R8B),     X
               INTO=LINE                                         RS0307
         BRASL R14,SPACE1                                        RS0307
         LA    R1,=C'No '                                        RS0307
         TM    CRT2FLAG1,CRT2ALIT    Alias table available       RS0307
         JNZ   OPENCAT7_2                                        RS0307
         LA    R1,=C'Yes'                                        RS0307
OPENCAT7_2 DS    0H                                              RS0307
         STRING64 '  Maximum # Open Catalogs   = ',(CRT2OPCAT,F,R8B),  X
               '  Alias Table available     = ',((R1),3),              X
               INTO=LINE                                         RS0307
         BRASL R14,SPACE1                                        RS0307
         IC    R1,CBSALIL          Alias level                   RS0307
         STCM  R1,B'0001',WKCELL1                                RS0307
         OI    WKCELL1,X'F0'                                     RS0307
         LA    R1,=C'On '                                        RS0307
         TM    CBSFLAG,CBSSYSC    SYS% to SYS1 conversion        RS0307
         JNZ   OPENCAT7_3                                        RS0307
         LA    R1,=C'Off'                                        RS0307
OPENCAT7_3 DS    0H                                              RS0307
         STRING64 '  Alias Levels specified    = ',(WKCELL1,1),7X,     X
               '  SYS% to SYS1 conversion   = ',((R1),3),              X
               INTO=LINE                                         RS0307
         BRASL R14,SPACE1                                        RS0307
         STRING64 '  CAS Mother Task           = ',(CRT2CTASK,,X),     X
               '  CAS Modify Task           = ',(CRT2MTASK,,X),        X
               INTO=LINE                                         RS0307
         BRASL R14,SPACE1                                        RS0307
         STRING64 '  CAS Analysis Task         = ',(CRT2ANTSK,,X),     X
               '  CAS Allocation Task       = ',(CRT2ATASK,,X),        X
               INTO=LINE                                         RS0307
         BRASL R14,SPACE1                                        RS0307
         MVC   WKCELL1,=C'None'                                  RS0307
         SR    R1,R1                                             RS0307
         IC    R1,CRT2NOTEX           Notify extent              RS0307
         LTR   R1,R1                                             RS0307
         JZ    OPENCAT7_4                                        RS0307
         STRING64 ((R1),,R3B),'%',INTO=WKCELL1                   RS0307
OPENCAT7_4 DS    0H                                              RS0307
         STRING64 '  Volcat HI-Level Qualifier = ',CBSHLQ,             X
               '  Notify Extent             = ',(WKCELL1,4),           X
               INTO=LINE                                         RS0307
         BRASL R14,SPACE1                                        RS0307
         LA    R1,=C'On '                                        RS0307
         TM    CBSFLAG,CBSDELW     Delete UCAT/VVDS warning      RS0307
         JNZ   OPENCAT7_5                                        RS0307
         LA    R1,=C'Off'                                        RS0307
OPENCAT7_5 DS    0H                                              RS0307
         LA    R2,=C'Enabled '                                   RS0307
         TM    CRT2FLAG3,CRT2DSCHK Dataset Syntax checking       RS0307
         JNZ   OPENCAT7_6                                        RS0307
         LA    R2,=C'Disabled'                                   RS0307
OPENCAT7_6 DS    0H                                              RS0307
         STRING64 '  Delete UCAT/VVDS Warning  = ',((R1),3),5X,        X
               '  Data set Syntax checking  = ',((R2),8),              X
               INTO=LINE                                         RS0307
         BRASL R14,SPACE1                                        RS0307
         STRING64 '  Flag4                     = ',(CRT2FLAG4,,X),     X
               INTO=LINE
         BRASL R14,SPACE1                                        RS0307
         STRING64 '  Default VVDS Space        = ',(CRT2TRK1,H,R3B),   X
               ',',(CRT2TRK2,H,R3B),INTO=LINE
         BRASL R14,SPACE2                                        RS0307
OPENCAT8 DS    0H                                                RS0307
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
.OPENCAT9 ANOP
OPENCAT9 DS    0H
         END_PROC
         TITLE 'SHOWMVS &REL - Page Data Sets'
*---------------------------------------------------------------------*
*                                                                     *
*Page Data Sets:
*
*  Data Set Name                                  Volser   Type     Use
*  SYS2.ALF0.PLPA2                                SYS109   PLPA      77
*  SYS2.ALF0.COMMON                               SYS105   COMMON     0
*  SYS2.ALF0.LOCAL1.PAGEDS                        SYS114   LOCAL      0
*  SYS2.ALF0.LOCAL3.PAGEDS                        SYS101   LOCAL      0
*                                                                     *
*  Free Aux Slots: 314495                                             *
*  I/O Req. rec. : 28269                                              *
*  I/O Req. comp.: 28269                                              *
*  N/S I/O Req.  : 21787                                              *
*  N/S I/O comp. : 21787                                              *
*                                                                     *
*  Total PAGE-DS: 10        Total used:   5 incl. 1 reserved slot for D
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
PAGEDS   BEGIN_PROC KW=PAGE                                      RS0302
         STRING64 '&TITLEPFX.Page Data Sets:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  Data Set Name',34X,'Volser   Type     Used    SlotX
               s  Slots/cyl',INTO=LINE
         BRASL R14,SPACE1              <== next line
         L     R4,CVTASMVT             POINT TO ASM VECTOR TABLE
         USING ASMVT,R4
         L     R2,ASMPART-ASMVT(,R4)   POINT TO PAGE ACT REF TABLE
         USING PART,R2
         L     R5,PARTDSNL             POINT TO 1ST PAGE DSN
         LA    R6,PARTENTS             POINT TO 1ST PARTE
         USING PARTENT,R6
         L     R7,PARTSIZE             NUMBER OF PART ENTRIES
*LOOP
PAGEDS1  TM    PAREFLG1,PARENUSE       THIS PARTE IN USE?
         JO    PAGEDS8                 NO, SKIP IT
         MVC   LINE,BLANKS             BLANK LINE
         MVC   DSNAME,0(R5)            MOVE DSNAME
         L     R1,PAREUCBP             UCB ADDRESS
         MVC   VOLSER,UCBVOLI-UCBOB(R1)  VOLSER
         TM    PAREFLG1,PARENVIO       IS THIS A NON-VIO DATA SET?
         JZ    PAGEDS4                 NO, JUMP
         MVC   YYYYMMDD(6),=C'NONVIO'  YES, SHOW IT
*
PAGEDS4  BRASL R1,PAGEDS4B
         DC    AL1(PAREPLPA),C'PLPA  '
         DC    AL1(PARECOMM),C'COMMON'
         DC    AL1(PAREDPLX),C'DUPLEX'
         DC    AL1(PARELOCL),C'LOCAL '
         DC    AL1(00),0H'0'
PAGEDS4B BRASL R14,SCAN_TM             CALL SCAN RTNE
         DC    Y(1+6)               0  LENGTH OF A TABLE ENTRY
         TM    PARETYPE,*-*         2  TEST LABEL TYPE FLAGS
         MVC   DEVTYPE(6),1(R1)     6  TYPE OF PAGE DATA SET
*
         L     R1,PARESZSL             GET TOTAL SIZE
         S     R1,PARESLTA             SLOTS AVAILABLE
         M     R0,=F'100'              CALCULATE PERCENTAGE USED
         D     R0,PARESZSL             CALCULATE PERCENTAGE USED
         L     R3,PAREPATP             Point to PAT            DL9809
         USING PAT,R3                                          DL9809
         STRING64 ((R1),,R3B),'%',                                     X
               (PARESZSL,F,R9B),       slots                           X
               (PATCYLSZ,H,R7B),       slots/cyl                       X
               INTO=(CATUNCAT,NEXTLINE)
         BRASL R14,SPACE1          <== next line
PAGEDS8  LA    R5,44(,R5)              NEXT DSN
         LA    R6,PARTELEN(,R6)        NEXT PARTE
         JCT   R7,PAGEDS1
*ENDLOOP
         BRASL R14,BLANK1              BLANK LINE
         SYSEVENT FREEAUX                                        RS0203
         ST    R0,WKCELL1                                        RS0203
         STRING64 '  Free Aux Slots: ',(WKCELL1,F,L9B),          RS0203X
               INTO=LINE                                         RS0203
         BRASL R14,SPACE1              Single Space              RS0305
         STRING64 '  I/O Requests received: ',(ASMIORQR,F,R9B),        X
               ' I/O Requests complete: ',(ASMIORQC,F,R9B),            X
               INTO=LINE                                         RS0305
         BRASL R14,SPACE1              Single Space              RS0305
         STRING64 '  N/S I/O Req. received: ',(ASMNSWRR,F,R9B),        X
               ' N/S I/O Req. complete: ',(ASMNSWRC,F,R9B),            X
               INTO=LINE                                         RS0305
         BRASL R14,SPACE2              Double Space              RS0203
         STRING64 '  Total PAGE-DS: ',(PARTSIZE,F,L9B),          RS0203X
               ' Total used: ',(PARTEUSE,H,R3B),                 RS0203X
               ' incl. 1 reserved slot for Duplex',INTO=LINE     RS0203
         BRASL R14,SPACE2              Double Space              RS0203
         END_PROC
         TITLE 'SHOWMVS &REL - Dump Data Sets and Options'
*---------------------------------------------------------------------*
*                                                                     *
*DUMP Data Sets and Options:                                          *
*                                                                     *
*  SYS1.DUMP00                                    MVSRES 911214  Full *
*    Date=1996-09-28 Time=07.11.52 Title=CICS DUMP: SYSTEM=CICSPROD   *
*  SYS1.DUMP01                                    MVSRES 911214  Empty*
*                                                                     *
*---------------------------------------------------------------------*
DUMPDS   BEGIN_PROC KW=DUMP                                      RS0302
         STRING64 '&TITLEPFX.DUMP Data Sets and Options:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R4,CVTRTMCT             RTM CTL TABLE
         USING RTCT,R4
         ICM   R5,B'1111',RTCTSDDS     FIRST ENTRY IN SDDS Q
         JZ    DUMP30                  dynalloc, jump
         USING SDDSQ,R5
         LH    R6,RTCTSDDC             NUMBER OF ENTRIES IN SDDSQ
*LOOP
DUMP25   MVC   LINE,BLANKS
         STRING64 'SYS1.DUMP',SDDSQDAN,INTO=DSNAME
         MVI   VOLSER,C'?'             $LOCATE required
         MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVC   CATUNCAT(5),=C'Empty'   set status
         TM    SDDSQFLG,SDDSQDDS       data set empty ?
         JZ    DUMP25N                 yes, jump
         MVI   CATUNCAT,C'%'           set status based on DS1LSTAR
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         JNO   DUMP25N                 no, jump
         BRASL R14,SPACE1          <== BUMP LINE PTR
         STRING64 '. (Date and title are being obtained)',INTO=LINE
DUMP25N  BRASL R14,SPACE1          <== BUMP LINE PTR
         L     R5,SDDSQFWD             next SDDSQ entry
         JCT   R6,DUMP25               process it
*ENDLOOP
         BRASL R14,BLANK1              BLANK LINE
         DROP  R5                      SDDSQ
*---------------------------------------------------------------------*
*                                                                     *
*  Automatic Allocation is active                                     *
*                                                                     *
*  DSNAME pattern: NSSLNSS.NSSFDUMP.&SYSNAME..D&LDATE..T&LTIME..S&SEQ.*
*                                                                     *
*  NSSLNSS.NSSFDUMP.D1.D961030.T005533.S00001     SMS445 951214  Full *
*    Date=1996-09-28 Time=07.11.52 Title=CICS DUMP: SYSTEM=CICSPROD   *
*                                                                     *
*---------------------------------------------------------------------*
DUMP30   EQU   *
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         JNO   DUMP40                  no, exit
         L     R5,RTCTRTSD             RTCT SDUMP Extension
         USING RTSD,R5
         BRASL R14,EXECKEY0            execute next instr in key=0
         ICM   R6,B'1111',RTSDXADR     SDRTX?
         JZ    DUMP40                  no, exit
         USING SDRTX,R6
         LA    R14,SDRTX_LENGTH        length
         SLR   R15,R15                 source key is zero
         MVCK  WORK256(R14),SDRTX,R15   Move line to buffer
         LA    R6,WORK256              un-protected SDRTX
*
*        DSNAME pattern
*
         XR    R1,R1                   Clear R1
         IC    R1,SDRTX_DSNPATL        Length of DSNAME pattern
         STRING64 '  DSNAME pattern: ',(SDRTX_DSNPAT,(R1)),INTO=LINE
         BRASL R14,SPACE2              BLANK LINE
*
*        Automatically-allocated DUMP data sets
*
         TM    SDRTXFLAGS,SDRTXFDYN    dynalloc active?
         JZ    DUMP40                  No, exit
         STRING64 '  Automatic Allocation is active',INTO=LINE
         BRASL R14,SPACE2              BLANK LINE
         ICM   R7,B'1111',SDRTX_SDDSQ1 First automatic SDDSQ
         JZ    DUMP39                  None, exit
         USING SDDSQ,R7
         SLR   R2,R2
         IC    R2,SDRTX_SDDSQ#         Load number of DUMPDS
*loop
DUMP35   MVC   LINE,BLANKS
         MVC   DSNAME,SDDSQDSN         move dsname
         MVI   VOLSER,C'?'             $LOCATE required
         MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVC   CATUNCAT(5),=C'Empty'   set status
         TM    SDDSQFLG,SDDSQDDS       data set empty ?
         JZ    DUMP35N                 yes, jump
         MVI   CATUNCAT,C'%'           set status based on DS1LSTAR
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         JNO   DUMP35N                 no, jump
         BRASL R14,SPACE1          <== BUMP LINE PTR
         STRING64 '. (Date and title are being obtained)',INTO=LINE
DUMP35N  BRASL R14,SPACE1          <== BUMP LINE PTR
         L     R7,SDDSQFWD             Next SDDSQ
         JCT   R2,DUMP35
*endloop
         BRASL R14,BLANK1              BLANK LINE
         J     DUMP40
DUMP39   DS    0H
         STRING64 '  No active Dump dataset(s) found',INTO=LINE  RS0506
         BRASL R14,SPACE2              NEXT LINE
*---------------------------------------------------------------------*
*                                                                     *
*  SYSABEND ADD SDATA=(NUC,SQA,LSQA,SWA,TRT,CB,ENQ,DM,IO,ERR,PCDATA,  *
*               SUM),PDATA=(SA,REGS,LPA,JPA,PSW,SPLS,SUBTASKS)        *
*  SYSUDUMP ADD SDATA=(LSQA,SWA,TRT,CB,ENQ,DM,IO,ERR,PCDATA,SUM),     *
*               PDATA=(SA,REGS,LPA,JPA,PSW,SPLS,SUBTASKS)             *
*  SYSMDUMP ADD SDATA=(NUC,SQA,LSQA,SWA,TRT,RGN,LPA,CSA,SUM,GRSQ)     *
*     SDUMP ADD OPTIONS=(ALLPSA,SQA,LSQA,RGN,LPA,TRT,CSA,SWA,SUMDUMP, *
*               ALLNUC,Q=NO,GRSQ,COUPLE,XESDATA,WLM)                  *
*           TYPE=(XMEME)                                              *
*           BUFFERS=0K   MAXSPACE=500M   MSGTIME=99999 Minutes        *
*                                                                     *
*---------------------------------------------------------------------*
DUMP40   EQU   *
         LA    R3,=C'ADD '             Take the default          RS0402
         TM    RTCTSAO+3,X'02'         ADD mode                  RS0402
         JZ    *+8                     Yes                       JM1101
         LA    R3,=CL4'OVER'           OVER mode                 RS0402
         STRING64 '  SYSABEND ',((R3),4,T),' SDATA=(',INTO=LINE  JM1101
         L     R0,=X'80000000'         first bit of first byte
         BASR  R1,0                    Next instr.               RS0402
         AHI   R1,DUMPSDAT-*                                     RS0402
         LA    R2,RTCTSAO              SYSABEND options
         BRASL R3,DUMP80               edit SDATA options
         STRING64 ',PDATA=(',INTO=(1(R6),NEXTLINE)
         BRASL R3,DUMP80               edit PDATA options
         BRASL R14,SPACE1          <== next line
*
         LA    R3,=C'ADD '             Take the default          RS0402
         TM    RTCTSUO+3,X'02'         ADD mode                  JM1101
         JZ    *+8                     Yes                       JM1101
         LA    R3,=CL4'OVER'           OVER mode                 RS0402
         STRING64 '  SYSUDUMP ',((R3),4,T),' SDATA=(',INTO=LINE  JM1101
         L     R0,=X'80000000'         first bit of first byte
         BASR  R1,0                    Next instr.               RS0402
         AHI   R1,DUMPSDAT-*                                     RS0402
         LA    R2,RTCTSUO              SYSUDUMP options
         BRASL R3,DUMP80               edit SDATA options
         STRING64 ',PDATA=(',INTO=(1(R6),NEXTLINE)
         BRASL R3,DUMP80               edit PDATA options
         BRASL R14,SPACE1          <== next line
*
         LA    R3,=C'ADD '             Take the default          RS0402
         TM    RTCTSYO+3,X'02'         ADD mode                  JM1101
         JZ    *+8                     Yes                       JM1101
         LA    R3,=CL4'OVER'           OVER mode                 RS0402
         STRING64 '  SYSMDUMP ',((R3),4,T),' SDATA=(',INTO=LINE  JM1101
         L     R0,=X'80000000'         first bit
         BASR  R1,0                    Next instr.               RS0402
         AHI   R1,DUMPMDMP-*                                     RS0402
         LA    R2,RTCTSYO              SYSMDUMP options          JM1101
         BRASL R3,DUMP80               edit options
         TM    RTCTSMX1,RTCTMGRS       GRSQ?                     JM1101
         JZ    DUMP52                  NO                      JWMJUN95
         STRING64 ',GRSQ)',INTO=(0(R6),NEXTLINE)               JWMJUN95
         LA    R6,5(,R6)               skip over to the )      JWMJUN95
DUMP52   DS    0H                                              JWMJUN95
         BRASL R14,SPACE1          <== next line
*
         LA    R3,=C'ADD '             OVER mode                 RS0402
         TM    RTCTSDO+3,X'02'         ADD mode                  JM1101
         JZ    *+8                     Yes                       JM1101
         LA    R3,=CL4'OVER'           OVER mode                 RS0402
         STRING64 '     SDUMP ',((R3),4,T),' OPTIONS=(',               X
               INTO=LINE                                         JM1101
         L     R0,=X'80000000'         first bit
         BASR  R1,0                    Next instr.               RS0402
         AHI   R1,DUMPSDMP-*                                     RS0402
         LA    R2,RTCTSDO              SVCDUMP options
         BRASL R3,DUMP80               edit options
         TM    RTCTEX1,RTCTGRSQ        GRSQ?                     JM1101
         JZ    DUMP60                  NO                      JWMJUN95
         STRING64 ',GRSQ)',INTO=(0(R6),NEXTLINE)               JWMJUN95
         LA    R6,5(,R6)               skip over to the )      JWMJUN95
DUMP60   DS    0H                                              JWMJUN95
         TM    RTCTEX1,RTCTCPL         COUPLE?                 JWMJUN95
         JZ    DUMP61                  NO                      JWMJUN95
         STRING64 ',COUPLE)',INTO=(0(R6),NEXTLINE)             JWMJUN95
         LA    R6,7(,R6)               skip over to the )      JWMJUN95
DUMP61   DS    0H                                              JWMJUN95
         TM    RTCTEX1,RTCTXES         XESDATA                 JWMJUN95
         JZ    DUMP62                  NO                      JWMJUN95
         STRING64 ',XESDATA)',INTO=(0(R6),NEXTLINE)            JWMJUN95
         LA    R6,8(,R6)               skip over to the )      JWMJUN95
DUMP62   DS    0H                                              JWMJUN95
         TM    RTCTEX1,RTCTWLM         WLM                     JWMJUN95
         JZ    DUMP63                  NO                      JWMJUN95
         STRING64 ',WLM)',INTO=(0(R6),NEXTLINE)                JWMJUN95
DUMP63   DS    0H                                              JWMJUN95
         LA    R6,8(,R6)               skip over to the )      JWMJUN95
         BRASL R14,SPACE1          <== next line               JWMJUN95
         STRING64 11X,'TYPE=(',INTO=LINE                       JWMJUN95
         L     R0,=X'80000000'         first bit               JWMJUN95
         BASR  R1,0                    Next instr.               RS0402
         AHI   R1,DUMPSTYP-*                                     RS0402
         LA    R2,RTCTTYP1                                     JWMJUN95
         BRASL R3,DUMP80                                       JWMJUN95
         BRASL R14,SPACE1          <== next line               JWMJUN95
         STRING64 11X,'BUFFERS=',(RTCTBUFV,F,L0),              JWMJUN95X
               'K   MAXSPACE=',(RTCTMXSP,F,L0),                JWMJUN95X
               'M   MSGTIME=',(RTCTMMTI,F,L0),' Minutes',      JWMJUN95X
               INTO=LINE                                       JWMJUN95
         BRASL R14,SPACE2              Double Space
         J     DUMP99
*
*        Sub-routine: Edit DUMP options
*
DUMP80   STRING64 (LINE,,T),INTO=LINE
         LA    R6,LINE(R15)            point past '('
*loop
DUMP81   LR    R15,R0                  point past ")"
         N     R15,0(,R2)              test bit
         JZ    DUMP82                  off, jump
         STRING64 (LINE,,T),((R1),8,T),',',INTO=LINE           JWMJUN95
         LA    R6,LINE(R15)            point past last ','
         BCTR  R6,0                    prepare to overlay ','
DUMP82   SRL   R0,1                    shift mask
         LA    R1,8(,R1)               next table entry        JWMJUN95
         CLI   0(R1),C'.'              end of table?
         JNE   DUMP81                  no, test next bit
*endloop
         MVI   0(R6),C')'              close paren
         L     R0,=X'00008000'         first bit of third byte
         BASR  R1,0                    Next instr.               RS0402
         AHI   R1,DUMPPDAT-*                                     RS0402
         BR    R3
*                                                              JWMJUN95
DUMPSDAT DC    CL8'NUC     '           SDATA parms             JWMJUN95
         DC    CL8'SQA     '                                   JWMJUN95
         DC    CL8'LSQA    '                                   JWMJUN95
         DC    CL8'SWA     '                                   JWMJUN95
         DC    CL8'TRT     '                                   JWMJUN95
         DC    CL8'CB      '                                   JWMJUN95
         DC    CL8'ENQ     '                                   JWMJUN95
         DC    CL8'DM      '                                   JWMJUN95
         DC    CL8'IO      '                                   JWMJUN95
         DC    CL8'ERR     '                                   JWMJUN95
         DC    CL8'PCDATA  '                                   JWMJUN95
         DC    CL8'SUM     '                                   JWMJUN95
         DC    CL8'NOSYM   '                                   JWMJUN95
         DC    CL1'.'                                          JWMJUN95
*                                                              JWMJUN95
DUMPSTYP DC    CL8'XMEM    '                                   JWMJUN95
         DC    CL8'XMEME   '                                   JWMJUN95
         DC    CL8'NOLOCAL '                                   JWMJUN95
         DC    CL1'.'                                          JWMJUN95
*                                                              JWMJUN95
DUMPMDMP DC    CL8'NUC     '           SYSMDUMP                JWMJUN95
         DC    CL8'SQA     '                                   JWMJUN95
         DC    CL8'LSQA    '                                   JWMJUN95
         DC    CL8'SWA     '                                   JWMJUN95
         DC    CL8'TRT     '                                   JWMJUN95
         DC    CL8'RGN     '                                   JWMJUN95
         DC    CL8'LPA     '                                   JWMJUN95
         DC    CL8'CSA     '                                   JWMJUN95
         DC    CL8'SUM     '                                   JWMJUN95
         DC    CL8'ALLNUC  '                                   JWMJUN95
         DC    CL8'NOSYM   '                                   JWMJUN95
         DC    CL1'.'                                          JWMJUN95
*                                                              JWMJUN95
DUMPSDMP DC    CL8'ALLPSA  '           SVCDUMP                 JWMJUN95
         DC    CL8'CPSA    '                                   JWMJUN95
         DC    CL8'NUC     '                                   JWMJUN95
         DC    CL8'SQA     '                                   JWMJUN95
         DC    CL8'LSQA    '                                   JWMJUN95
         DC    CL8'RGN     '                                   JWMJUN95
         DC    CL8'LPA     '                                   JWMJUN95
         DC    CL8'TRT     '                                   JWMJUN95
         DC    CL8'CSA     '                                   JWMJUN95
         DC    CL8'SWA     '                                   JWMJUN95
         DC    CL8'SUM     '                                   JWMJUN95
         DC    CL8'NOSUM   '                                   JWMJUN95
         DC    CL8'NOALLPSA'                                   JWMJUN95
         DC    CL8'NOSQA   '                                   JWMJUN95
         DC    CL8'ALLNUC  '                                   JWMJUN95
         DC    CL8'        '                                   JWMJUN95
         DC    CL8'Q=YES   '                                   JWMJUN95
         DC    CL8'Q=NO    '                                   JWMJUN95
         DC    CL1'.'                                          JWMJUN95
*
DUMPPDAT DC    CL8'SA      '                                   JWMJUN95
         DC    CL8'SAH     '                                   JWMJUN95
         DC    CL8'REGS    '                                   JWMJUN95
         DC    CL8'LPA     '                                   JWMJUN95
         DC    CL8'JPA     '                                   JWMJUN95
         DC    CL8'PSW     '                                   JWMJUN95
         DC    CL8'SPLS    '                                   JWMJUN95
         DC    CL8'SUBTASKS'                                   JWMJUN95
         DC    CL1'.',0H'0'                                    JWMJUN95
*                                                                JM1101
*UMPADD  DC    CL4'ADD '                                         JM1101
*UMPOVER DC    CL4'OVER'                                         JM1101
DUMP99   END_PROC
         TITLE 'SHOWMVS &REL - Dump Data Sets and Options'
*---------------------------------------------------------------------*
*                                                                     *
*DAE PArameters                                                       *
*                                                                     *
*  Member = ADYSET00                                                  *
*    Start                                                            *
*    Svcdump  = notify(3,30)  match  update  suppressall              *
*    Sysmdump = match  update  suppressall                            *
*    Records  = 400                                                   *
*    Dsn      = SYS1.DAE.SYSPLEX                                      *
*    Share    = dsn options                                           *
*    Global   = dsn options                                           *
*                                                                     *
*  Note. When SHARE(DSN) or SHARE(DSN,OPTIONS) is used,               *
*        the corresponding GLOBAL parameter is set.                   *
*                                                                    **
*  At the time DAE is started, any record older than 180 days, is    **
*  ignored.                                                           *
*    DSN(SYS1.DAE)                                                    *
*                                                                     *
*--------------------------------------------------------------------**
DAE00    BEGIN_PROC KW=DAE,AUTH=YES                              RS0302
         L     R4,CVTRTMCT             RTM CTL TABLE
         USING RTCT,R4
         STRING64 '&TITLEPFX.DAE Parameters',INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R5,RTCTDSCA             DAE Com area
         BRASL R14,WORKADDR            temp work area
         LA    R14,DSCA_LENGTH         get length for MVCK
         SLR   R15,R15                 source key is KEY 0
         MVCK  0(R14,R1),0(R5),R15     Move DSCA to unprot storage
         LR    R5,R1                   unprot DSCA
         USING DSCA,R5
         LA    R6,DSCA+DSCA_LENGTH     unprot DFL
         USING DFLM,R6
         L     R1,DSCDFL               DAE Default Module (ADYDFLT)
         LA    R14,DFL_LENGTH          get length for MVCK
         SLR   R15,R15                 source key is KEY 0
         MVCK  DFLM(R14),0(R1),R15     Move DFL to unprot storage
         STRING64 '  Member = ',DFLPLMEM,INTO=LINE
         BRASL R14,SPACE1              Single Space
         TM    DFLDAEO,DFLSTOP         DAE stopped?              RS1201
         JNO   DAE10                   No                        RS1201
         LA    R4,=C'Globalstop'
         TM    DFLDAEO,DFLGSTP         Globalstop?
         JO    *+8                     Yes
         LA    R4,BLANKS               No
         STRING64 '    Stop ',((R4),10,T),INTO=LINE
         BRASL R14,SPACE2              Double Space
         J     DAE99
DAE10    DS    0H
         STRING64 '    Start',INTO=LINE
         BRASL R14,SPACE1
         MVI   WORK256,C' '            Move in the seed
         MVC   WORK256+1(255),WORK256  clear the work area
         TM    DFLSVC,DFLSVCM          Match?
         JZ    DAE11                   No
         STRING64 'match',INTO=(WORK256,5)
DAE11    DS    0H
         TM    DFLSVC,DFLSVCU          update?
         JZ    DAE12                   No
         STRING64 'update',INTO=(WORK256+7,6)
DAE12    DS    0H
* It can not be both Suppress and Suppressall
         TM    DFLSVC,DFLSVCA          suppressall?
         JZ    DAE13                   No
         STRING64 'suppressall',INTO=(WORK256+14,11)
         J     DAE14                   Yes
DAE13    DS    0H
         TM    DFLSVC,DFLSVCS          suppress?
         JZ    DAE14                   No
         STRING64 'suppress',INTO=(WORK256+14,8)
DAE14    DS    0H
         STRING64 '    Svcdump  = notify(',                            X
               (DFLNOTDN,H,L),',',(DFLNOTTM,H,L),')  ',                X
               (WORK256,40,T),                                         X
               INTO=LINE
         BRASL R14,SPACE1
         MVI   WORK256,C' '            Move in the seed
         MVC   WORK256+1(255),WORK256  clear the work area
         LA    R1,WORK256
         TM    DFLSYSM,DFLSYSMM        Match?
         JZ    DAE16                   No
         STRING64 'match',INTO=(WORK256,5)
DAE16    DS    0H
         TM    DFLSYSM,DFLSYSMU        update?
         JZ    DAE17                   No
         STRING64 'update',INTO=(WORK256+7,6)
DAE17    DS    0H
* It can not be both Suppress and Suppressall
         TM    DFLSYSM,DFLSYSMA        suppressall?
         JZ    DAE18                   No
         STRING64 'suppressall',INTO=(WORK256+14,11)
         J     DAE19                   Yes
DAE18    DS    0H
         TM    DFLSYSM,DFLSYSMS        suppress?
         JZ    DAE19                   No
         STRING64 'suppress',INTO=(WORK256+14,8)
DAE19    DS    0H
         STRING64 '    Sysmdump = ',                                   X
               (WORK256,40,T),                                         X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Records  = ',(DFLRECNO,F,L),INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 '    Dsn      = ',(DFLDSN,,L),INTO=LINE
         TM    DFLDAEO,DFLSHR+DFLSHRO  Share dsn or options
         JZ    DAE20                   NO.
         BRASL R14,SPACE1              Single Space
         LA    R1,=C'dsn'
         TM    DFLDAEO,DFLSHR          Share dsn?
         JO    *+8                     Yes
         LA    R1,BLANKS               No
         LA    R2,=C'options'
         TM    DFLDAEO,DFLSHRO         Share option?
         JO    *+8                     Yes
         LA    R2,BLANKS               No
         STRING64 '    Share    = ',((R1),3,T),1X,((R2),7,T),INTO=LINE
DAE20    DS    0H
         TM    DFLGLB,DFLGLBD+DFLGLBO  global dsn or options
         JZ    DAE30                   NO.
         BRASL R14,SPACE1              Single Space
         LA    R1,=C'dsn'
         TM    DFLGLB,DFLGLBD          Global dsn?               RS1002
         JO    *+8                     Yes
         LA    R1,BLANKS               No
         LA    R2,=C'options'
         TM    DFLGLB,DFLGLBO          Global options?
         JO    *+8                     Yes
         LA    R2,BLANKS               No
         STRING64 '    Global   = ',((R1),3,T),1X,((R2),7,T),INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  Note. When GLOBAL(DSN) or GLOBAL(DSN,OPTIONS) is',X
               ' used,',INTO=LINE                                RS0302
         BRASL R14,SPACE1              Single Space
         STRING64 '        the corresponding SHARE parameter is set.', X
               INTO=LINE                                         RS0112
DAE30    DS    0H
         BRASL R14,SPACE2              Double Space
         STRING64 '  At the time DAE is started, any record older',    X
               ' than ',(DFLEXPIR,F,L),' days is ignored.',INTO=LINE
DAE90    DS    0H
         BRASL R14,SPACE2              Double Space
DAE99    END_PROC
         TITLE 'SHOWMVS &REL - SLIP Data'
*---------------------------------------------------------------------
*
*SLIP Data
*
*    ID   STATE    ID   STATE    ID   STATE    ID   STATE
*    S522 ENABLED  S137 ENABLED  S237 ENABLED  S213 ENABLED
*    INT3 ENABLED  EVAL ENABLED  IGN4 ENABLED  IMSP DISABLED
*    XD37 ENABLED  XE37 ENABLED  XEC6 ENABLED  XXC6 ENABLED
*    RRS1 ENABLED  RRS2 ENABLED  0001 ENABLED  0002 ENABLED
*
*    SLIP SET,ID=RRS1,ACTION=SVCD,JOBLIST=(DB2PMSTR,DB2PDBM1,RRS,DB2PIR
*    NUC,PSA,SUM,TRT,CSA,SQA,RGN,GRSQ),COMP=04X,REASON=00E5XXXX
*    SLIP SET,ID=RRS2,ACTION=SVCD,JOBLIST=(DB2PMSTR,DB2PDBM1,RRS,DB2PIR
*    NUC,PSA,SUM,TRT,CSA,SQA,RGN,GRSQ),COMP=04X,REASON=00E3XXXX
*    SLIP SET,COMP=U4040,ACTION=SVCD
*    SLIP SET,COMP=3X9,ACTION=SVCD
*
*---------------------------------------------------------------------
SLIP00   BEGIN_PROC KW=SLIP,AUTH=YES                             RS0302
         STRING64 '&TITLEPFX.SLIP Data',INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R3,CVTPTR(,0)           CVT ADDRESS
         USING CVTMAP,R3
         ICM   R3,15,CVTRTMS           address of Slip Header
         JZ    SLIP0090                no
         DROP  R3
         USING SHDR,R3
         ICM   R3,15,SHDRIDQ           First SCE on ID queue
         JZ    SLIP0090                no
         DROP  R3
         USING SCE,R3
         STRING64 '  ID   STATE    ID   STATE    ID   STATE    ID   STAX
               TE    ID   STATE',INTO=LINE
         BRASL R14,SPACE1              Single Space
         MVC   LINE(4),BLANKS          blank out next line
         LA    R5,LINE+2               first entry
         LA    R6,14                   length of each display entry
         LA    R7,LINE+70              end of line
         MODESET EXTKEY=ZERO        <- switch to KEY=0
SLIP0010 DS    0H
         LA    R2,=C'Enabled '         Default to enabled
         TM    SCEFLG1,SCEDSABL         True
         JZ    *+8                      yes
         LA    R2,=C'Disabled'         change to disabled
         STRING64 SCEID,' ',((R2),8),' ',INTO=((R5),(R6))
         BRXLE R5,R6,SLIP0020          this line full?
         TR    LINE,TRTPRINT           get rid of garbage
         BRASL R14,SPACE1              Single space
         MVC   LINE(4),BLANKS          blank out next line
         LA    R5,LINE+2               first entry
         LA    R7,LINE+68              end of line
SLIP0020 DS    0H
         ICM   R3,15,SCEIDQF           forward chain
         JNZ   SLIP0010                no
         DROP  R3
         CLI   LINE+4,X'00'            Last line to display
         JE    SLIP0030                no
         TR    LINE,TRTPRINT           get rid of garbage
         BRASL R14,SPACE1              Single space
SLIP0030 DS    0H
         BRASL R14,BLANK1              Just spaces
         L     R3,CVTPTR(,0)           CVT ADDRESS               RS0402
         USING CVTMAP,R3                                         RS0402
         ICM   R3,15,CVTRTMS           address of Slip Header    RS0402
         JZ    SLIP0090                no                        RS0402
         DROP  R3                                                RS0402
         USING SHDR,R3                                           RS0402
         ICM   R3,15,SHDRIDQ           First SCE on ID queue     RS0402
         JZ    SLIP0090                no                        RS0402
         DROP  R3                                                RS0402
         USING SCE,R3                                            RS0402
SLIP0050 DS    0H                                                RS0402
         ICM   R4,B'1111',SCESCVAP     SCVA pointer              RS0402
         USING SCVA,R4                                           RS0402
         LH    R5,SCVALEN                                        RS0402
*        #SNAP ADDR=(R4),LENGTH=(R5)   debug                     RS0402
         LA    R4,SCVACOM                                        RS0402
         DROP  R4                                                RS0402
         USING SCVACOM,R4                                        RS0402
SLIP0053 DS    0H                                                RS0402
         CLI   SCVACOID,SCVAIDL        Last Id entry ?           RS0402
         JE    SLIP0060                  yes, leave              RS0402
         CLI   SCVACOID,SCVAIDSD       Sdata entry?              RS0402
         JE    SLIP0053_15               no, loop                RS0402
         LH    R5,SCVACOLN                                       RS0402
         J     SLIP0053_X              next entry                RS0402
SLIP0053_15 DS    0H                                             RS0402
         ICM   R5,B'1111',SCVASLTB     SLTB                      RS0402
         JZ    SLIP0053_X                                        RS0402
         USING SLTB,R5                                           RS0402
*        #SNAP  ADDR=(R5),LENGTH=50                              RS0402
         L     R0,SLTBLEN              length                    RS0402
         AHI   R0,-16                - 16 header                 RS0402
SLIP0053_15_1  DS  0H                                            RS0402
         CHI   R0,80                                             RS0402
         JL    SLIP0057                                          RS0402
         STRING64 2X,(16(R5),80,T),INTO=LINE                     RS0402
         BRASL R14,SPACE1          <== next line                 RS0402
         AHI   R0,-80                                            RS0402
         LTR   R0,R0                                             RS0402
         JZ    SLIP0053_X                                        RS0402
         JM    SLIP0053_X                                        RS0402
         LA    R5,80(R5)                                         RS0402
         J     SLIP0053_15_1                                     RS0402
SLIP0057 DS    0H                                                RS0402
         STRING64 2X,(16(R5),(R0),T),INTO=LINE                   RS0402
         BRASL R14,SPACE1          <== next line                 RS0402
SLIP0053_X DS    0H                                              RS0402
         AH    R4,SCVACOLN                                       RS0402
         J     SLIP0053                                          RS0402
SLIP0060 DS    0H                                                RS0402
         ICM   R3,B'1111',SCEIDQF      forward chain             RS0402
         JNZ   SLIP0050                no                        RS0402
         DROP  R3                                                RS0402
         BRASL R14,BLANK1          <== next line                 RS0402
         J     SLIP99                                            RS0402
SLIP0090 DS    0H
         STRING64 '  SLIP is not active',INTO=LINE
         BRASL R14,SPACE2              Double Space
SLIP99   MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
         END_PROC
         TITLE 'SHOWMVS &REL - GTF Data'
*---------------------------------------------------------------------*
*                                                                     *
*GTF Data                                                             *
*                                                                     *
*  GTF Trace data lenght:      8192                                   *
*  GTF Active, TRACE=(USR,RNIO)                                       *
*                                                                     *
*---------------------------------------------------------------------*
GTF00    BEGIN_PROC KW=GTF                                       RS0302
         STRING64 '&TITLEPFX.GTF Data',INTO=LINE
         BRASL R14,SPACE2              Double Space
*        GTRACE QUERY,MAXLNG=WKCELL1   Require base reg          RS0705
         L     15,16(0,0)                                        RS0705
         ICM   15,B'0111',X'ED'(15)                              RS0705
         L     15,X'2C'(,15)                                     RS0705
         CLM   15,B'1111',=XL4'00100000'                         RS0705
         JH    *+8                                               RS0705
         J     *+8                                               RS0705
         LA    15,256                                            RS0705
         ST    15,WKCELL1                                        RS0705
         SR    15,15                                             RS0705
         STRING64 '  GTF Trace data length: ',(WKCELL1,F,R9B),INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0705
         STRING64 '.GTF',INTO=LINE     trigger for the sub-task
         BRASL R14,SPACE2              Double Space
GTF99    END_PROC
         TITLE 'SHOWMVS &REL - DIAG Data'
*---------------------------------------------------------------------*
*                                                                     *
*DIAG                                                                 *
*                                                                     *
*  VSM TRACK CSA(ON) SQA(ON)                                          *
*  VSM TRACE GET(OFF) FREE(OFF)                                       *
*  TRAPS NAME()                                                       *
*                                                                     *
*---------------------------------------------------------------------*
DIAG00   BEGIN_PROC KW=DIAG              LOAD require            RS0902
         L     R3,CVTECVT              Load addr of ECVT
         L     R4,ECVTDGNB-ECVT(,R3)   DIAG TRAP
         LTR   R4,R4
         JZ    DIAG99                  no, exit
         STRING64 '&TITLEPFX.DIAG',INTO=LINE
         BRASL R14,SPACE2              Double Space
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?
         JNO   DIAG05                  no, don' change mode
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0
DIAG05   DS    0H
         XC    WKCELL1,WKCELL1         clear parameter
         XC    WKCELL2,WKCELL2         clear parameter
         LOAD  EP=IGVDGNXT,ERRET=DIAG99 LOAD                     RS1207
         LR    R15,R0
         CALL  (15),                   IGVDGNXT                        X
               (WKCELL1,               AbdplPtr                        X
               WKCELL1+4,              SubpoolForDgnx                  X
               WKCELL2),               DGNXPtr                         X
               MF=(E,WORK256)
         L     R4,WKCELL2
         USING DGNX,R4                 tell assembly
         L     R6,DGNXLENGTH
         L     R5,DGNXTEXTAREAADDR     Start of Textarea
*        #SNAP ADDR=(R5),LENGTH=256    Debug code
         USING DGNXTEXTLINE,R5
         SR    R6,R6                   clear R6
*loop
DIAG10   DS    0H
         ICM   R6,B'0001',DGNXTEXTLEN  Length of Text
         JZ    DIAG80                  end if zero
*        #SNAP ADDR=(R5),LENGTH=(R6)   Debug code
         STRING64 2X,(DGNXTEXTDATA,(R6)),INTO=LINE
         BRASL R14,SPACE1              Single Space
         AR    R5,R6                   point to next line
         LA    R6,L'DGNXTEXTLEN        get length of length field
         AR    R5,R6                   point to next line
         J     DIAG10
*endloop
DIAG80   DS    0H
         L     R5,DGNXLENGTH           length
         L     R3,WKCELL1+4            Subpool
         FREEMAIN RU,LV=(R5),A=(R4),SP=(R3) free DGNX area
         DROP  R4,R5
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?
         JNO   DIAG90                  yes, don't call
         MODESET KEYREG=(2)            switch back to own key
DIAG90   DS    0H
         BRASL R14,BLANK1              Double Space
.DIAG99  ANOP
DIAG99   END_PROC
         TITLE 'SHOWMVS &REL - Init Parameters'
*---------------------------------------------------------------------*
*                                                                     *
*Initialisation Parameters                                            *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
IPA000   BEGIN_PROC KW=IPA                                       RS0302
         STRING64 '&TITLEPFX.Initialization Parameters',INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R3,CVTECVT              Load addr of ECVT
         L     R4,ECVTIPA-ECVT(,R3)    Init parm area
         USING IPA,R4
         TM    IPALFLAG,IPAJCLP        Master JCL came from PARMLIB ?
         JNO   *+8                     no, jump
         OI    MSTJCL_PARMLIB,L'MSTJCL_PARMLIB remember it for later
         STRING64 '  IPLPARM=',INTO=LINE,                              X
               IPAIODFU,1X,IPALOADS,1X,IPAPROMT,1X,IPANUCID
         BRASL R14,SPACE1              Single Space
         STRING64 '    IPLparm dsn=',(IPALPDSN,,T),INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 '  HWNAME=',(IPAHWNAM,,T),                           X
               ',LPARNAME=',(IPALPNAM,,T),                             X
               ',VMUSERID=',(IPAVMNAM,,T),                             X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 '  IODF     ',(IPAIODF,,T),INTO=LINE
         TR    LINE,TRTDOTS      convert non-printable to dots   RS0102
         BRASL R14,SPACE1              Single Space
         STRING64 '  NUCLEUS  ',(IPANUCID,,T),INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 '  SYSPARM  ',(IPASPARM,,T),INTO=LINE
         TR    LINE,TRTDOTS      convert non-printable to dots   RS0102
         BRASL R14,SPACE1              Single Space
         STRING64 '  SYSCAT   ',(IPASCAT,,T),INTO=LINE
         TR    LINE,TRTDOTS      convert non-printable to dots   RS0102
         BRASL R14,SPACE1              Single Space
         STRING64 '  IEASYM   ',(IPASYM,,T),INTO=LINE
         TR    LINE,TRTDOTS      convert non-printable to dots   RS0102
         BRASL R14,SPACE1              Single Space
         STRING64 '  SYSPLEX  ',(IPAPLEX,,T),INTO=LINE
         TR    LINE,TRTDOTS      convert non-printable to dots   RS0102
         BRASL R14,SPACE1              Single Space
         STRING64 '  ARCHLVL  ',(IPAARCHL,,T),INTO=LINE          RS0501
         BRASL R14,SPACE1              Single Space              RS0101
         STRING64 '  MTLSHARE ',(IPAMTLSH,,T),INTO=LINE          RS1101
         BRASL R14,SPACE1              Single Space              RS1101
         LH    R7,IPAPLNUM             number of PARMLIB images
         LA    R6,IPAPLIB              Start of PARMLIB images
         USING IPAPLIB,R6
*LOOP
IPA050   DS    0H
         STRING64 '  PARMLIB  ',(IPAPLIB,63,T),INTO=LINE
         BRASL R14,SPACE1              Single Space
         LA    R2,=C'Yes'              In use=YES
         TM    IPAPLFLG,IPAPLUSE       in use?
         JO    *+8                     YES, JUMP
         LA    R2,=C'No '              NO, In use=NO
         LA    R3,=C'Yes'              Default=YES
         TM    IPAPLFLG,IPAPLDEF       Default?
         JO    *+8                     YES, JUMP
         LA    R3,=C'No '              NO, Default=NO
         LA    R5,=C'Yes'              Found in catalog=YES
         TM    IPAPLFLG,IPAPLCAT       Found in catalog?
         JO    *+8                     YES, JUMP
         LA    R5,=C'No '              NO, Found in catalog=NO
         STRING64 11X,'In use: ',((R2),3),2X,                          X
               'Default: ',((R3),3),2X,                                X
               'Found in catalog: ',((R5),3),                          X
               INTO=LINE
         TM    IPAPLFLG,IPAPLUSE       in use?
         JO    IPA150                  YES, JUMP
         LA    R3,=C'Locate' AF0404
         TM    IPAPLFLG,IPAPLLCF       Locate failed?
         JO    IPA100                  YES, JUMP
         LA    R3,=C' Mount' AF0404
         TM    IPAPLFLG,IPAPLMNF       Mount failed?
         JO    IPA100                  YES, JUMP
         LA    R3,=C'  Open' AF0404
         TM    IPAPLFLG,IPAPLOPF       OPEN failed?
         JZ    IPA150                  No, JUMP
IPA100   DS    0H
         STRING64 (LINE,,T),' (',((R3),6,T),' failed)',INTO=LINE AF0404
IPA150   BRASL R14,SPACE1              Single Space
         LA    R6,64(,R6)              Skip this image
         JCT   R7,IPA050               loop through them
         DROP  R6
*ENDLOOP
         STRING64 '  NUCLST   ',(IPANUCL,,T),INTO=LINE
         BRASL R14,SPACE2              Double Space
*
*        display value of each initialization parameter
*
         BRASL R5,IPA301                Table
         DC    C'ALLOC   ',AL2(IPAALLOC-IPAPDESC)
         DC    C'APF     ',AL2(IPAAPF-IPAPDESC)
         DC    C'APG     ',AL2(IPAAPG-IPAPDESC)
         AIF   (NOT D'CVTH7770).IPA30A  z/OS R12?                RS0511
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010112').IPA30A       RS0511
         DC    C'AUTOR   ',AL2(IPAAUTOR-IPAPDESC)                RS0511
.IPA30A  ANOP                                                    RS0511
         AIF   (NOT D'CVTH7750).IPA30AA z/OS R10?                JH0508
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010110').IPA300AA     JH0508
         DC    C'AXR     ',AL2(IPAAXR-IPAPDESC)                  JH0508
.IPA30AA ANOP                                                    JH0508
         DC    C'BLDL    ',AL2(IPABLDL-IPAPDESC)
         DC    C'BLDLF   ',AL2(IPABLDLF-IPAPDESC)
         AIF   (NOT D'CVTH7750).IPA30AB z/OS R10?                RS0908
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010113').IPA30AAB     RS0414
         DC    C'CATALOG ',AL2(IPACATALOG-IPAPDESC)              RS0414
.IPA30AAB ANOP                                                   RS0414
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010110').IPA30AB      RS0908
         DC    C'CEA     ',AL2(IPACEA-IPAPDESC)                  RS0908
.IPA30AB ANOP                                                    RS0908
         AIF   (NOT D'CVTH7720).IPA300A z/OS R7?                 RS0506
         AIF   (T'&SYSSTATE_OSREL EQ 'O').IPA300A                RS0806
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010107').IPA300A      RS0806
         DC    C'CEE     ',AL2(IPACEE-IPAPDESC)                  RS1105
.IPA300A ANOP                                                    RS1105
         DC    C'CLOCK   ',AL2(IPACLOCK-IPAPDESC)
         DC    C'CLPA    ',AL2(IPACLPA-IPAPDESC)
         DC    C'CMB     ',AL2(IPACMB-IPAPDESC)
         DC    C'CMD     ',AL2(IPACMD-IPAPDESC)
         DC    C'CON     ',AL2(IPACON-IPAPDESC)
         DC    C'CONT    ',AL2(IPACONT-IPAPDESC)
         DC    C'COUPLE  ',AL2(IPACOUPL-IPAPDESC)
         AIF   (NOT D'CVTH7770).IPA30B  z/OS R12?                RS0511
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010112').IPA30B       RS0511
         DC    C'CPCR    ',AL2(IPACPCR-IPAPDESC)                 RS0511
.IPA30B  ANOP                                                    RS0511
         DC    C'CPQE    ',AL2(IPACPQE-IPAPDESC)
         DC    C'CSA     ',AL2(IPACSA-IPAPDESC)
         DC    C'CSCBLOC ',AL2(IPACSCBL-IPAPDESC)
         DC    C'CVIO    ',AL2(IPACVIO-IPAPDESC)
         AIF   (NOT D'CVTH7760).IPA30BA z/OS R11?                RS0110
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010111').IPA30BA      RS0110
         DC    C'DDM     ',AL2(IPADDM-IPAPDESC)                  RS0110
.IPA30BA ANOP                                                    RS0110
         DC    C'DEVSUP  ',AL2(IPADEVSU-IPAPDESC)
         DC    C'DIAG    ',AL2(IPADIAG-IPAPDESC)
         AIF   (NOT D'CVTH7720).IPA300B z/OS R7?                 RS1105
         AIF   (T'&SYSSTATE_OSREL EQ 'O').IPA300B                RS0806
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010107').IPA300B      RS0806
         DC    C'DRMODE  ',AL2(IPADRMOD-IPAPDESC)                RS1105
.IPA300B ANOP                                                    RS1105
         DC    C'DUMP    ',AL2(IPADUMP-IPAPDESC)
         DC    C'DUPLEX  ',AL2(IPADUPLE-IPAPDESC)
         DC    C'EXIT    ',AL2(IPAEXIT-IPAPDESC)
         DC    C'FIX     ',AL2(IPAFIX-IPAPDESC)
         DC    C'GRS     ',AL2(IPAGRS-IPAPDESC)
         DC    C'GRSCNF  ',AL2(IPAGRSCN-IPAPDESC)
         DC    C'GRSRNL  ',AL2(IPAGRSRN-IPAPDESC)
         AIF   (NOT D'CVTH7750).IPA300C z/OS R10?                JH0508
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010110').IPA300C      JH0508
         DC    C'HVCOMMON',AL2(IPAHVCOMMON-IPAPDESC)             JH0508
.IPA300C ANOP                                                    JH0508
         AIF   (NOT D'CVTH7708).IPA300E z/OS R5?                 RS0804
         DC    C'HVSHARE ',AL2(IPAHVSHARE-IPAPDESC)              RS0804
.IPA300E ANOP                                                    RS0804
         DC    C'ICS     ',AL2(IPAICS-IPAPDESC)
         DC    C'IKJTSO  ',AL2(IPATSO-IPAPDESC)                  RS0302
         DC    C'ILMLIB  ',AL2(IPAILML-IPAPDESC)                 RS0601
         DC    C'ILMMODE ',AL2(IPAILMOD-IPAPDESC)                RS0601
         DC    C'IOS     ',AL2(IPAIOS-IPAPDESC)
         DC    C'IPS     ',AL2(IPAIPS-IPAPDESC)
         AIF   (NOT D'CVTH7760).IPA30EA z/OS R11?                RS0110
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010111').IPA30EA      RS0110
         DC    C'IQP     ',AL2(IPADDM-IPAPDESC)                  RS0110
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010113').IPA30EA      RS0414
         DC    C'IXGCNF  ',AL2(IPAIXGCNF-IPAPDESC)               RS0414
.IPA30EA ANOP                                                    RS0110
         AIF   (NOT D'CVTH7740).IPA300F z/OS R9?                 RS0808
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010109').IPA300F      RS0808
         DC    C'LFAREA  ',AL2(IPALFAREA-IPAPDESC)               RS0808
.IPA300F ANOP                                                    RS0808
         DC    C'LICENSE ',AL2(IPALIC-IPAPDESC)                  RS0302
         DC    C'LNK     ',AL2(IPALNK-IPAPDESC)
         DC    C'LNKAUTH ',AL2(IPALNKAU-IPAPDESC)
         DC    C'LOGCLS  ',AL2(IPALOGCL-IPAPDESC)
         DC    C'LOGLMT  ',AL2(IPALOGLM-IPAPDESC)
         DC    C'LOGREC  ',AL2(IPALOGRE-IPAPDESC)
         DC    C'LPA     ',AL2(IPALPA-IPAPDESC)
         DC    C'MAXCAD  ',AL2(IPAMAXCA-IPAPDESC)
         DC    C'MAXUSER ',AL2(IPAMAXUS-IPAPDESC)
         DC    C'MLPA    ',AL2(IPAMLPA-IPAPDESC)
         DC    C'MSTRJCL ',AL2(IPAMSTRJ-IPAPDESC)
         DC    C'NONVIO  ',AL2(IPANONVI-IPAPDESC)
         DC    C'NSYSLX  ',AL2(IPANSYSL-IPAPDESC)
         DC    C'NUCMAP  ',AL2(IPANUCMA-IPAPDESC)
         DC    C'OMVS    ',AL2(IPAOMVS-IPAPDESC)
         DC    C'OPI     ',AL2(IPAOPI-IPAPDESC)
         DC    C'OPT     ',AL2(IPAOPT-IPAPDESC)
         DC    C'PAGE-OP ',AL2(IPAPAGEO-IPAPDESC)
         DC    C'PAGE-SYS',AL2(IPAPAGEP-IPAPDESC)
         DC    C'PAGNUM  ',AL2(IPAPAGNU-IPAPDESC)
         DC    C'PAGTOTL ',AL2(IPAPAGTO-IPAPDESC)
         DC    C'PAK     ',AL2(IPAPAK-IPAPDESC)
         DC    C'PLEXCFG ',AL2(IPAPLEXC-IPAPDESC)
         AIF   (NOT D'CVTH7720).IPA300H z/OS R7?                 RS1105
         AIF   (T'&SYSSTATE_OSREL EQ 'O').IPA300H                RS0806
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010107').IPA300H      RS0806
         DC    C'PRESCPU ',AL2(IPAPRCPU-IPAPDESC)                RS1105
.IPA300H ANOP                                                    RS1105
         DC    C'PRODP   ',AL2(IPAPRODP-IPAPDESC)
         DC    C'PROG    ',AL2(IPAPROG-IPAPDESC)
         DC    C'PURGE   ',AL2(IPAPURGE-IPAPDESC)
         DC    C'RDE     ',AL2(IPARDE-IPAPDESC)
         DC    C'REAL    ',AL2(IPAREAL-IPAPDESC)
         DC    C'RER     ',AL2(IPARER-IPAPDESC)
         DC    C'RSU     ',AL2(IPARSU-IPAPDESC)
         DC    C'RSVNONR ',AL2(IPARSVNO-IPAPDESC)
         DC    C'RSVSTRT ',AL2(IPARSVST-IPAPDESC)
         DC    C'RTLS    ',AL2(IPARTLSP-IPAPDESC)
         DC    C'SCH     ',AL2(IPASCH-IPAPDESC)
         DC    C'SMF     ',AL2(IPASMF-IPAPDESC)
         DC    C'SMS     ',AL2(IPASMS-IPAPDESC)
         DC    C'SQA     ',AL2(IPASQA-IPAPDESC)
         DC    C'SSN     ',AL2(IPASSN-IPAPDESC)
         DC    C'SVC     ',AL2(IPASVC-IPAPDESC)
         DC    C'SWAP    ',AL2(IPASWAP-IPAPDESC)
         DC    C'SYSNAME ',AL2(IPASYSNA-IPAPDESC)
         DC    C'SYSP    ',AL2(IPASYSP-IPAPDESC)
         DC    C'UNIP    ',AL2(IPAUNIP-IPAPDESC)                 RS0601
         DC    C'VAL     ',AL2(IPAVAL-IPAPDESC)
         DC    C'VIODSN  ',AL2(IPAVIODS-IPAPDESC)
         DC    C'VRREGN  ',AL2(IPAVRREG-IPAPDESC)
         AIF   (NOT D'CVTH7760).IPA30ZZ z/OS R11?                RS0110
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010111').IPA30ZZ      RS0110
         DC    C'ZAAPZIIP',AL2(IPAZAAPZIIP-IPAPDESC)             RS0110
.IPA30ZZ ANOP                                                    RS0110
         DC    H'-1'                   end of table
*loop
IPA301   LH    R6,8(,R5)               offset to PDE
         LA    R6,IPAPDESC(R6)         point at PDE
         USING IPAPDE,R6
         ICM   R1,B'1111',IPAPDESA     storage address
         JZ    IPA359                  zero, ignore
         LH    R2,IPAPDESL             storage length
         STRING64 'IEASYS',IPAPDEDO,INTO=(WORK256,8)             RS0603
         CLC   IPAPDEDO,=X'FFFF'                                 RS0603
         JNE   IPA349                                            RS0603
         STRING64 'Operator',INTO=(WORK256,8)                    RS0603
         J     IPA350                                            RS0603
IPA349   DS 0H                                                   RS0603
         CLI   IPAPDEDO,0                                        RS0603
         JNE   IPA350                                            RS0603
         STRING64 'Default ',INTO=(WORK256,8)                    RS0603
         J     IPA350                                            RS0603
IPA350   DS 0H                                                   RS0603
         CLC   =C'PAGE-SYS',0(R5)      Page-SYS entry is long    RS0904
         JE    IPA360                                            RS0904
         LTR   R1,R1                   Downward compatible       RS0506
         JM    IPA359                  just some verification    RS0506
         LTR   R2,R2                   Downward compatible       RS1105
         JM    IPA359                  just some verification    RS1105
         CH    R2,=H'80'                                         RS1105
         JH    IPA359                                            RS1105
IPA352   DS 0H                                                   RS1105
         STRING64 2X,(WORK256,8),1X,((R5),8,T),'=',((R1),(R2)),        X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
IPA359   LA    R5,8+2(,R5)             next entry in IPA table
         CLI   0(R5),X'FF'             end of table?
         JNE   IPA301                  no, process next entry
*endloop
         J     IPA390                  leave                     RS0904
IPA360   DS 0H                         long line                 RS0904
         STM   R1,R2,WKCELL1                                     RS0904
         ST    R6,WKCELL1                                        RS0904
         STRING64 2X,(WORK256,8),1X,((R5),8,T),'=',INTO=LINE     RS0904
         LR    R7,R1                   start of IPA              RS0904
         LHI   R6,1                                              RS0904
*loop                                                            RS0904
IPA361   DS 0H                                                   RS0904
         CLI   0(R1),C','                                        RS0904
         JE    IPA365                                            RS0904
         CLI   0(R1),C')'                                        RS0904
         JE    IPA367                                            RS0904
         LA    R1,1(,R1)               next byte                 RS0904
         AHI   R6,1                    +1                        RS0904
         JCT   R2,IPA361                                         RS0904
*endloop                                                         RS0904
IPA362   DS 0H                                                   RS0904
         LM    R1,R2,WKCELL1                                     RS0904
         L     R6,WKCELL1                                        RS0904
         J     IPA359                                            RS0904
IPA365   DS    0H                                                RS0904
         STRING64 ((R7),(R6)),INTO=(LINE+20,80)                  RS0904
         TR    LINE,TRTPRINT           get rid of garbage        RS0506
         BRASL R14,SPACE1              Single Space              RS0904
         MVC   LINE(20),BLANKS
         LHI   R6,1                                              RS0904
         LA    R7,1(R1)                point after ','           RS0904
         LA    R1,1(R1)                point after ','           RS0904
         J     IPA361                  goto loop                 RS0904
IPA367   DS    0H                                                RS0904
         STRING64 ((R7),(R6)),INTO=(LINE+20,80)                  RS0904
         TR    LINE,TRTPRINT           get rid of garbage        RS0506
         BRASL R14,SPACE1              Single Space              RS0904
         J     IPA362                                            RS0904
IPA390   DS 0H                                                   RS0904
         BRASL R14,BLANK1              blank line
*LH R0,IPALEN                                                     -DEL-
*#SNAP ADDR=IPA,LENGTH=(R0)                                       -DEL-
.IPA999  ANOP
IPA999   END_PROC
         TITLE 'SHOWMVS &REL - IPL Statistics'
*---------------------------------------------------------------------*
*IPL-Statistic:                                                       *
*  End of Table: 0BD00000 Next free entry: 0BCFF45A                   *
*  Type   Suffix/Mod Timer-Units Table-Entry                          *
*    IPL           10          14    0BCFF00C                         *
*    IPL           20      446194    0BCFF014                         *
*  and so on                                                          *
*---------------------------------------------------------------------*
IPLST00  BEGIN_PROC KW=IPLST                                     RS0302
         L     R3,CVTECVT              ECVT
         L     R3,ECVTIPST-ECVT(,R3)   IPST Ipl-Statistics
         LTR   R3,R3                   zero?
         JZ    IPLST99                   yes, leave
         USING IPST,R3                 tell assembler
         STRING64 '&TITLEPFX.IPL-Statistic:',INTO=LINE
         BRASL R14,SPACE2
         STRING64 '  End of Table: ',(IPSTENDP,,X),                    X
               ' Next free entry: ',                                   X
               (IPSTNXTP,,X),INTO=LINE
         BRASL R14,SPACE1
*  Info taken from IPCS IPLDATA STATUS                           RS0808
*  Starting with z/OS R8 there is 18 Bytes of unknown data       RS0806
*  in the header and between IPL and NIP data                    RS0806
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS0806
         JZ    IPLST20                  no, leave                RS0806
         AHI   R3,18                   z/OS R8 + 18 Bytes        RS0806
IPLST20  DS    0H                                                RS0806
         STRING64 '  Type   Suf/Mod Timer-Units Time',8X,        RS0808X
               'Description',INTO=LINE                           RS0808
         BRASL R14,SPACE1
*Loop
IPLST50  DS    0H
         CLI   IPST_TYPE,IPST_IPL      type IPL ?
         JNE   IPLST60                   no, leave               RS0806
         XC    WKCELL2,WKCELL2
         MVC   WKCELL2+2(4),IPST_DATA1_TIMEU
         BRASL R7,IPLST90                time-units to time
         SLR   R2,R2                                             RS0808
         BRASL R1,IPLST51                                        RS0808
         CHARTAB 10,'ISNIRIM - Read SCPINFO'                     RS0808
         CHARTAB 20,'Test Block storage to 2G'                   RS0808
         CHARTAB 11,'Fast FIND service'                          RS0808
         CHARTAB 31,'LOAD service'                               RS0808
         CHARTAB 30,'IPLWTO service'                             RS0808
         CHARTAB 46,'Read SCHIBs into IPL workspace'             RS0808
         CHARTAB 49,'Process Load and Default parameters'        RS0808
         CHARTAB 50,'IPL parmlib-process LOADxx and NUCLSTxx'    RS0808
         CHARTAB 51,'System architecture'                        RS0808
         CHARTAB 43,'Find and Open IODF data set'                RS0808
         CHARTAB 60,'Read NCRs from IODF'                        RS0808
         CHARTAB 70,'UIM environment - load CBD and IOS services'
         CHARTAB 71,'Build DFT for each device'                  RS0808
         CHARTAB 08,'Read EDT information from IODF'             RS0808
         CHARTAB 40,'Read MLTs from nucleus'                     RS0808
         CHARTAB 42,'Read NMLs from nucleus (IEANynnn modules)'  RS0808
         CHARTAB 41,'Read PDS directory entries and CESD records'
         CHARTAB 05,'Build and sort NUCMAP'                      RS0808
         CHARTAB 02,'Load nucleus modules'                       RS0808
         CHARTAB 04,'Allocate PFT and SQA/ESQA'                  RS0808
         CHARTAB 14,'Build LSQA/ELSQA for Master'                RS0808
         CHARTAB 09,'IAXMI - PFT, master RAB,       etc.'        RS0808
         CHARTAB 07,'Update AMODE for nucleus resident SVCs'     RS0808
         CHARTAB 03,'Build UCBs, ULUT, etc.'                     RS0808
         CHARTAB 18,'Copy and relocate EDT to ESQA'              RS0808
         CHARTAB 99,'Page frame table and cleanup'               RS0808
         DC    AL1(00)                                           RS0808
*  Loop                                                          RS0808
IPLST51  IC    R2,2(,R1)               Length of entry           RS0808
         CLC   IPST_DATA1_MODID,0(R1)  found type?               RS0808
         JE    IPLST52                 yes                       RS0808
         LA    R1,3(R2,R1)             Bump to next entry in tableS0808
         CLI   0(R1),X'00'             End of table?             RS0808
         JNE   IPLST51                 No, try next entry        RS0808
*  Endloop                                                       RS0808
IPLST52  DS    0H
         STRING64 3X,'IPL',8X,IPST_DATA1_MODID,3X,                     X
               (IPST_DATA1_TIMEU,F,R9B),1X,(STCKTIME),1X,(3(R1),(R2)), X
               INTO=LINE                                         RS0808
         BRASL R14,SPACE1                                        RS0511
         SLR   R2,R2                                             RS0511
         IC    R2,IPST_DATA_LENGTH                               RS0511
         LA    R3,2(R2,R3)             next entry                RS0511
         J     IPLST50                 loop
*Endloop
*Loop
IPLST60  DS    0H                                                RS0511
         CLI   IPST_TYPE,X'05'         type ???? unknown         RS0511
         JE    IPLST60_A                 Yes, around it          RS0511
         CLI   IPST_TYPE,X'08'         type ???? unknown         RS0511
         JNE   IPLST60_B                 no, leave               RS0511
IPLST60_A DS    0H                     jump around theses entriesRS0511
         SLR   R2,R2                                             RS0511
         IC    R2,IPST_DATA_LENGTH                               RS0511
         LA    R3,2(R2,R3)             next entry                RS0511
IPLST60_B DS    0H                                               RS0511
*        #SNAP ADDR=(R3),LENGTH=32     Debugcode
         CLI   IPST_TYPE,IPST_NIP      type NIP ?
         JNE   IPLST70                   no, leave
         XC    WKCELL2,WKCELL2
         MVC   WKCELL2+2(4),IPST_DATA1_TIMEU
         BRASL R7,IPLST90              time-units to time
         SLR   R2,R2                                             RS0808
         BRASL R1,IPLST61                                        RS0808
         CHARTAB P0,'NIP Base'                                   RS0808
         CHARTAB PM,'Invoke NIP RIMs'                            RS0808
         CHARTAB E6,'Service Processor Interface'                RS0808
         CHARTAB FF,'Loadwait/Restart'                           RS0808
         CHARTAB A6,'RTM - RTCT and recording buffer'            RS0808
         CHARTAB C6,'WTO'                                        RS0808
         CHARTAB C3,'Issue messages from IPL message queue'      RS0808
         CHARTAB 24,'SMS Open/Mount'                             RS0808
         CHARTAB 06,'Machine Check'                              RS0808
         CHARTAB 27,'Reconfiguration'                            RS0808
         CHARTAB A2,'IOS - Non-DASD UCBs'                        RS0808
         CHARTAB CA,'NIP Console'                                RS0808
         CHARTAB B2,'IOS - DASD UCBs'                            RS0808
         CHARTAB 11,'Locate and Open master calalog'             RS0808
         CHARTAB C7,'Open SYS1.SVCLIB'                           RS0808
         CHARTAB OP,'Open PARMLIB'                               RS0808
         CHARTAB IL,'Process IEALSTxx'                           RS0808
         CHARTAB C4,'Prompt for System Parameters'               RS0808
         CHARTAB 03,'Merge and analyze system parameters'        RS0808
         CHARTAB CF,'Process system name and system variables'   RS0808
         CHARTAB 76,'Open LOGREC'                                RS0808
         CHARTAB E8,'RSM - Process REAL'                         RS0808
         CHARTAB 23,'Build GRS blocks in SQA'                    RS0808
         CHARTAB 04,'ASM - Open page and swap data sets'         RS0808
         CHARTAB A8,'VSM - Expand SQA'                           RS0808
         CHARTAB 14,'ASM part 2 - Build SQA control blocks'      RS0808
         CHARTAB GD,'Move console data to ESQA'                  RS0808
         CHARTAB 25,'Process SVC='                               RS0808
         CHARTAB 05,'LPA, APF'                                   RS0808
         CHARTAB 44,'ASA Reuse stuff'                            RS0808
         CHARTAB B1,'Process CSCBLOC='                           RS0808
         CHARTAB E2,'RACF SAF'                                   RS0808
         CHARTAB B8,'Create CSA'                                 RS0808
         CHARTAB 47,'ENF'                                        RS0808
         CHARTAB D6,'RTM - SDUMP, ABDUMP, ESTAE'                 RS0808
         CHARTAB 09,'Build ASVT'                                 RS0808
         CHARTAB D8,'RSM - Frame queues, VRREGN= and RSU='       RS0808
         CHARTAB 10,'SRM - OPT=, IPS=, etc.'                     RS0808
         CHARTAB D1,'ABDUMP'                                     RS0808
         CHARTAB D2,'SDUMP'                                      RS0808
         CHARTAB CX,'Context services, registration services'    RS0808
         CHARTAB X1,'NIP cleanup'                                RS0808
         CHARTAB F5,'PCAUTH'                                     RS0808
         CHARTAB F8,'RASP'                                       RS0808
         CHARTAB 1F,'SRM - I/O measurement blocks'               RS0808
         CHARTAB C2,'IOS - Move CDT to SQA'                      RS0808
         CHARTAB 51,'TRACE'                                      RS0808
         CHARTAB 20,'Process CLOCK='                             RS0808
         CHARTAB 21,'TOD clock'                                  RS0808
         CHARTAB 57,'SDUMP'                                      RS0808
         CHARTAB F9,'XCF'                                        RS0808
         CHARTAB 33,'GRS'                                        RS0808
         CHARTAB ED,'PROD'                                       RS0808
         CHARTAB 26,'SMS'                                        RS0808
         CHARTAB E5,'LNKLST'                                     RS0808
         CHARTAB D5,'Load pageable device support modules'       RS0808
         CHARTAB 88,'Allocation move EDT II'                     RS0808
         CHARTAB A1,'CONSOLE'                                    RS0808
         CHARTAB DC,'WLM'                                        RS0808
         CHARTAB 16,'EXCP appendages'                            RS0808
         CHARTAB 13,'Prepare NIP/MSI interface'                  RS0808
         CHARTAB 17,'GTF Monitor Call interface'                 RS0808
         CHARTAB G8,'VSM defined monitor call enablement'        RS0808
         CHARTAB 18,'PARMLIB Scan Routine interface'             RS0808
         CHARTAB F2,'Process IOS='                               RS0808
         CHARTAB 15,'Process VATLST'                             RS0808
         CHARTAB RR,'RRS'                                        RS0808
         CHARTAB OE,'USS'                                        RS0808
         CHARTAB SC,'Metal C RTL'                                RS0808
         CHARTAB LE,'System LE RIM'                              RS0808
         CHARTAB UN,'Unicode'                                    RS0808
         CHARTAB XL,'zXML Parser'                                RS0808
         CHARTAB 1B,'Close catalog'                              RS0808
         CHARTAB PX,'Nip final cleanup'                          RS0808
         CHARTAB AR,'Auto-Reply'                                 RS0511
         CHARTAB CI,'IQP'                                        RS0511
         CHARTAB DD,'DDM'                                        RS0511
         DC    AL1(00)                                           RS0808
*  Loop                                                          RS0808
IPLST61  IC    R2,2(,R1)               Length of entry           RS0808
         CLC   IPST_DATA1_MODID,0(R1)  found type?               RS0808
         JE    IPLST62                 yes                       RS0808
         LA    R1,3(R2,R1)             Bump to next entry in tableS0808
         CLI   0(R1),X'00'             End of table?             RS0808
         JNE   IPLST61                 No, try next entry        RS0808
*  Endloop                                                       RS0808
IPLST62  DS    0H
         STRING64 3X,'NIP',8X,IPST_DATA1_MODID,3X,                     X
               (IPST_DATA1_TIMEU,F,R9B),1X,(STCKTIME),1X,(3(R1),(R2)), X
               INTO=LINE                                         RS0808
         BRASL R14,SPACE1                                        RS0511
         SLR   R2,R2                                             RS0511
         IC    R2,IPST_DATA_LENGTH                               RS0511
         LA    R3,2(R2,R3)             next entry                RS0511
         J     IPLST60                  loop
*Endloop
*Loop
IPLST70  DS    0H
         CLI   IPST_TYPE,X'06'         type ???? unknown         RS0511
         JE    IPLST70_A                 no, leave               RS0511
         CLI   IPST_TYPE,X'07'         type ???? unknown         RS0511
         JNE   IPLST70_B                 no, leave               RS0511
IPLST70_A DS    0H                                               RS0511
         SLR   R2,R2                                             RS0511
         IC    R2,IPST_DATA_LENGTH                               RS0511
         LA    R3,2(R2,R3)             next entry                RS0511
IPLST70_B DS    0H                                               RS0511
*        #SNAP ADDR=(R3),LENGTH=32
         CLI   IPST_TYPE,IPST_MSI       type MSI ?
         JNE   IPLST80                    no, leave
         XC    WKCELL2,WKCELL2
         MVC   WKCELL2+2(4),IPST_DATA2_TIMEU
         BRASL R7,IPLST90                time-unit --> time
         SLR   R2,R2                                             RS0808
         BRASL R1,IPLST71                                        RS0808
         CHARTAB IEETRACE,'Master trace'                         RS0808
         CHARTAB 'ISNMSI  ','SPI'                                RS0808
         CHARTAB UCMPECBM,'CONSOLE address space'                RS0808
         CHARTAB ENFPC005,'CONSOLE ready ENF'                    RS0808
         CHARTAB IEFSCHIN,'IEFSCHAS address space'               RS0808
         CHARTAB IEFJSINT,'Subsystem interface'                  RS0808
         CHARTAB IEFSJLOD,'JESCT'                                RS0808
         CHARTAB 'IAZINIT ','JESXCF address space'               RS0808
         CHARTAB 'IAZFSII ','FSI trace'                          RS0808
         CHARTAB IEFQBINT,'SWA manager'                          RS0808
         CHARTAB IEFAB4I0,'ALLOCAS address space'                RS0808
         CHARTAB 'IEEVIPL ','Summary'                            RS0808
         CHARTAB IEEMB845,'CSCB Chain Manipulation'              RS0511
         CHARTAB 'ILRTMRLG','ASM'                                RS0511
         CHARTAB 'IEEVMSI ','Reconfiguration'                    RS0511
         CHARTAB 'IARM8MSI','RSM - bring storage online'         RS0511
         CHARTAB 'IECVIOSI','IOS dynamic pathing'                RS0511
         CHARTAB 'RACROUTE','Initialize Security Environment'    RS0511
         CHARTAB 'ATBINSYS','APPC'                               RS0511
         CHARTAB 'IKJEFXSR','TSO'                                RS0511
         CHARTAB 'IXGBLF00','Logger'                             RS0511
         CHARTAB 'AXRINSTR','System REXX'                        RS0511
         CHARTAB 'CEAINSTR','Common Event Adapter'               RS0511
         CHARTAB 'HWIAMIN1','BCPii'                              RS0511
         CHARTAB 'COMMNDXX','COMMANDxx processing'               RS0511
         CHARTAB 'IEAVTMSI','RTM'                                RS0511
         CHARTAB 'SMFWAIT ','SMF'                                RS0511
         CHARTAB 'ICHSEC05','Security Server'                    RS0511
         CHARTAB 'MSIEXIT ','Cnz_MSIExit Dynamic Exit'           RS0511
         CHARTAB 'IEFJSIN2','SSN= subsystem'                     RS0511
         CHARTAB 'IEFHB4I2','ALLOCAS - UCB scan'                 RS0511
         CHARTAB 'CSRINIT ','Windowing services'                 RS0511
         CHARTAB 'FINSHMSI','Wait for attached CMDs'             RS0511
         CHARTAB 'IEEMB860','Summary'                            RS0511
         DC    AL1(00)                                           RS0808
*  Loop                                                          RS0808
IPLST71  IC    R2,8(,R1)               Length of entry           RS0808
         CLC   IPST_DATA2_MODID,0(R1)  found type?               RS0808
         JE    IPLST72                 yes                       RS0808
         LA    R1,9(R2,R1)             Bump to next entry in tableS0808
         CLI   0(R1),X'00'             End of table?             RS0808
         JNE   IPLST71                 No, try next entry        RS0808
*  Endloop                                                       RS0808
IPLST72  DS    0H
         STRING64 3X,'MSI',2X,IPST_DATA2_MODID,3X,                     X
               (IPST_DATA2_TIMEU,F,R9B),1X,(STCKTIME),1X,(9(R1),(R2)), X
               INTO=LINE                                         RS0808
         BRASL R14,SPACE1                                        RS0511
         SLR   R2,R2                                             RS0511
         IC    R2,IPST_DATA_LENGTH                               RS0511
         LA    R3,2(R2,R3)             next entry                RS0511
         J     IPLST70                  loop
*Endloop
IPLST80  DS 0H
         BRASL R14,BLANK1               double space             RS0513
         J     IPLST99
IPLST90  DS 0H
         LM    R14,R15,=X'8126D60E46000000' Since 1972
         LM    R0,R1,WKCELL2                time-units
         ALR   R14,R0
         ALR   R15,R1
         BRC   12,NOINCR
         AL    R14,=F'1'
NOINCR   DS    0H
         STM   R14,R15,WKCELL2
         LA    R1,WKCELL2              pass TOD clock value
         BRASL R14,STCKCONV            convert TOD clock to decimal
         BR    R7
.IPLST99  ANOP
IPLST99  DS 0H
         END_PROC
         TITLE 'SHOWMVS &REL - Health Checker'                   DA0601
***********************************************************************
*                                                                     *
* Get information from IBM's Health Checker                           *
*                                                                     *
* >Health Checker                                                     *
*                                                                     *
*  Procname is HCHECKER Started Task ID is HCHECKER                   *
*                                                                     *
*  Parmlib member suffix=00                                           *
*                                                                     *
*  Name                             CheckOwner       State            *
* Status             Result Diag1    Diag2                            *
*  USS_MAXSOCKETS_MAXFILEPROC       IBMUSS           ACTIVE(DISABLED) *
* USS NOT AVAIL           0 00000000 00000000                         *
*  USS_AUTOMOUNT_DELAY              IBMUSS           ACTIVE(DISABLED) *
* USS NOT AVAIL           0 00000000 00000000                         *
*  USS_FILESYS_CONFIG               IBMUSS           ACTIVE(DISABLED) *
* USS NOT AVAIL           0 00000000 00000000                         *
*  CNZ_SYSCONS_MASTER               IBMCNZ           ACTIVE(ENABLED)  *
* SUCCESSFUL              0 00000000 00000000                         *
*  CNZ_SYSCONS_PD_MODE              IBMCNZ           ACTIVE(ENABLED)  *
* SUCCESSFUL              0 00000000 00000000                         *
*  CNZ_EMCS_INACTIVE_CONSOLES       IBMCNZ           ACTIVE(ENABLED)  *
* SUCCESSFUL              0 00000000 00000000                         *
*                                                                     *
*                                                                     *
***********************************************************************
HZS00    BEGIN_PROC KW=HZS,AUTH=YES  Health Check                DA0601
*                                                                DA0601
* IBM Health checker comes with z/OS 1.7 *but* could be in       DA0601
* previous releases.  It may be okay to issue HZSQUERY before    DA0601
* z/OS 1.7 but to be safe let's check.                           DA0601
*                                                                DA0601
         AIF   (NOT D'CVTH7720).HZS999   z/OS R7?
         AIF   (T'&SYSSTATE_OSREL EQ 'O').HZS999                 RS0806
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010107').HZS999       RS0806
         TM    HBB7720,L'HBB7720       running on z/OS R7
         JZ    HZS999                   no, jump
         STRING64 '&TITLEPFX.Health Checker',                    DA0601X
               INTO=LINE                                         DA0601
         BRASL R14,SPACE2                                        DA0601
*                                                                DA0601
* Get general information about the Health Checker               DA0601
*                                                                DA0601
         BRASL R14,WORKADDR           Locate work area           DA0601
         LR    R6,R1                  Set work area to good reg  DA0601
         USING HZSQUAAHDR,R6                                     DA0601
         L     R0,=F'32760'           Get length of answer area  DA0601
         ST    R0,WKCELL1             Save length of answer area DA0601
*                                                                DA0601
         XC    0(HZSQUAAHDR_LEN,R6),0(R6) Ensure header is zero  DA0601
         XC    WORK256,WORK256
*        MVC   WORK256(C_HQZQL),C_HQZQ                           DA0601
         HZSQUERY REQUEST=GENINFO,    Get Health Checker Info    DA0601X
               ANSAREA=(R6),          ..Answer return area       DA0601X
               ANSLEN=WKCELL1,        ..Answer return area len   DA0601X
               MF=(E,WORK256)                                    DA0601
         LTR   R15,R15                Successful?                DA0601
         JZ    HZS020                 Yes, format answer area    DA0601
         STM   R15,R0,WKCELL2         No, save RC and Reason     DA0601
         C     R15,=A(HzscheckRc_EnvError) Environment Error?    DA0601
         JNE   HZS010                                            DA0601
         STRING64 '  IBM Health Checker for z/OS is not active', DA0601X
               INTO=LINE                                         DA0601
         BRASL R14,SPACE2             Double Space               DA0601
         J     HZS999                 Leave                      DA0601
HZS010   DS    0H                                                DA0601
         STRING64 '  HZSQUERY REQUEST=GENINFO',                  DA0601X
               ' RC=',(WKCELL2,F,L),                             DA0601X
               ' REASON=',(WKCELL2+6,2,X),                       DA0601X
               ' HZSQUAAHTLEN=',(HZSQUAAHTLEN,4,X),              DA0601X
               INTO=LINE                                         DA0601
         BRASL R14,SPACE2              Double Space              DA0601
         J     HZS999                                            DA0601
*                                                                DA0601
HZS020   DS    0H                                                DA0601
         STRING64 '  Procname is ',HZSQUAAHPROCNAME,             DA0601X
               ' Started Task ID is ',HZSQUAAHSTID,              DA0601X
               INTO=LINE                                         DA0601
         BRASL R14,SPACE2              Double Space              DA0601
         ICM   R3,B'1111',HZSQUAAHNUMQUAAG                       DA0601
         JZ    HZS050                                            DA0601
         ICM   R2,B'1111',HZSQUAAHQUAAGADDR                      DA0601
         JZ    HZS050                                            DA0601
         USING HZSQUAAG,R2                                       DA0601
HZS030   DS    0H                                                DA0601
         STRING64 '  Checks not deleted:   ',                    DA0601X
               (HZSQUAAGNUMCHECKSNOTDELETED,F),                  DA0601X
               INTO=LINE                                         DA0601
         BRASL R14,SPACE1                                        RS0508
         STRING64 '  Checks Deleted:       ',                    DA0601X
               (HZSQUAAGNUMCHECKSDELETED,F),                     DA0601X
               INTO=LINE                                         DA0601
         BRASL R14,SPACE1                                        RS0508
         STRING64 '  Checks delete pending:',                    DA0601X
               (HZSQUAAGNUMCHECKSDELETEPENDING,F),               DA0601X
               INTO=LINE                                         DA0601
         BRASL R14,SPACE1                                        RS0508
         STRING64 '  Checks eligible:      ',                    DA0601X
               (HZSQUAAGNUMCHECKSELIGIBLE,F),                    DA0601X
               INTO=LINE                                         DA0601
         BRASL R14,SPACE1                                        RS0508
*                                                                DA0601
         LA    R4,HZSQUAAGPARMLIBMEMBERSUFFIXES                  DA0601
         LH    R5,HZSQUAAGNUMPARMLIBMEMBERSUFFIXES               DA0601
*        STRING64 '  HZSQUERY REQUEST=GENINFO',                  RS0508X
               ' Number=',                                       RS0508X
               (HZSQUAAGNUMPARMLIBMEMBERSUFFIXES,H,R3B),         RS0508X
               INTO=LINE               Debugcode                 RS0508
*        BRASL R14,SPACE2              Double Space              RS0508
         LTR   R5,R5                   verify number             RS0508
         JZ    HZS050                    leave if zero           RS0508
HZS040   DS    0H                                                DA0601
         STRING64 '  Parmlib member suffix=',((R4),2),           DA0601X
               INTO=LINE                                         DA0601
         BRASL R14,SPACE1              Double Space              DA0601
         LA    R4,2(R4)                                          DA0601
         JCT   R5,HZS040                                         DA0601
         BRASL R14,BLANK1              Double Space              DA0601
*        LA    R2,HZSQUAAG_LEN(R2)                               DA0601
*        JCT   R3,HCHK$GHL                                       DA0601
HZS050   DS    0H                                                DA0601
         DROP  R2                                                DA0601
*                                                                DA0601
* Now obtain Check Information.  More than likely, we will need  DA0601
* one call to get storage needed (as returned in HZSQUAAHTLEN)   DA0601
* and then another call using that HZSQUAAHTLEN length.          DA0601
*                                                                DA0601
         XC    GETMAIN_LEN_ADDR(8),GETMAIN_LEN_ADDR clear        RS0508
         L     R0,=F'32760'           Get len of our work area   DA0601
         LA    R7,2                   Do CHECKINFO Twice         DA0601
HZS060   DS    0H                                                DA0601
         XC    0(HZSQUAAHDR_LEN,R6),0(R6) Ensure header is zero  DA0601
         ST    R0,WKCELL1             Save length of answer area DA0601
         XC    WORK256,WORK256
*        MVC   WORK256(C_HQZQL),C_HQZQ                           DA0601
         HZSQUERY REQUEST=CHECKINFO,  Get Health Checker Info    DA0601X
               CHECKOWNER==CL16'*',   ..Return all owners        DA0601X
               CHECKNAME==CL32'*',    ..Return all names         DA0601X
               ANSAREA=(R6),          ..Answer return area       DA0601X
               ANSLEN=WKCELL1,        ..Answer return area len   DA0601X
               MF=(E,WORK256)                                    DA0601
         LTR   R15,R15                Successful?                DA0601
         JZ    HZS080                 Yes, format answer area    DA0601
         STM   R15,R0,WKCELL2         No, save RC and Reason     DA0601
         C     R15,=A(HzsaddckRc_Warn)                           DA0601
         JNE   HZS070                                            DA0601
         CLM   R0,B'0011',=AL2(HzsqueryRsn_NotAllDataReturned)   DA0601
         JNE   HZS070                                            DA0601
*                                                                DA0601
         L     R2,HZSQUAAHTLEN        Get length required        DA0601
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    HZS061                  yes, jump
         GETMAIN RU,LV=(R2)            allocate work area
         J     HZS062
HZS061   DS    0H
         LR    R0,R2                   Length of storage
         LA    R1,1                    LOC=ANY
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
         LR    R2,R0
HZS062   DS    0H
         STM   R1,R2,GETMAIN_LEN_ADDR  save addr and length
         LR    R6,R1                  Save address of new area   DA0601
         JCT   R7,HZS060              Do CHECKINFO again w/area  DA0601
*                                                                DA0601
HZS070   DS    0H                                                DA0601
         STRING64 '  HZSQUERY CHECKINFO',                        DA0601X
               ' RC=',(WKCELL2,F,L),                             DA0601X
               ' REASON=',(WKCELL2+6,2,X),                       DA0601X
               ' HZSQUAAHTLEN=',(HZSQUAAHTLEN,4,X),              DA0601X
               ' ANSLEN=',(WKCELL1,4,X),                         DA0601X
               INTO=LINE                                         DA0601
         BRASL R14,SPACE2             Double Space               DA0601
         J     HZS100                 Bypass process AAC entries DA0601
*                                                                DA0601
HZS080   DS    0H                                                DA0601
         ICM   R3,B'1111',HZSQUAAHNUMQUAAC # of HZSQUAAC entries DA0601
         JZ    HZS100                                            DA0601
         ICM   R2,B'1111',HZSQUAAHQUAACADDR First HZSQUACC entry DA0601
         JZ    HZS100                                            DA0601
         USING HZSQUAAC,R2                                       DA0601
         STRING64 '  Name',29X,'CheckOwner',7X,                  DA0601X
               'State',14X,'Status',13X,'Result',1X,             DA0601X
               'Diag1',4X,'Diag2',                               DA0601X
               INTO=LINE                                         DA0601
         BRASL R14,SPACE1                                        DA0601
HZS090   DS    0H                                                DA0601
         LA    R4,HZSQUAACDATA                                   DA0601
         USING HZSPQE,R4                                         DA0601
         STRING64 2X,                                            DA0601X
               PQE_CheckName,1X,                                 DA0601X
               PQE_CheckOwner,1X,                                DA0601X
               PQE_Text_String_State,1X,                         DA0601X
               PQE_Text_String_Status,1X,                        DA0601X
               (PQE_Result,F,R8B),1X,                            DA0601X
               (PQE_Diag1,4,X),1X,                               DA0601X
               (PQE_Diag2,4,X),1X,                               DA0601X
               INTO=LINE                                         DA0601
         BRASL R14,SPACE1                                        DA0601
         DROP  R4                                                DA0601
         AH    R2,HZSQUAACLEN         Locate next AAC            DA0601
         JCT   R3,HZS090              And process it             DA0601
         BRASL R14,BLANK1
HZS100   DS    0H                                                DA0601
         DROP  R2                                                DA0601
         LM    R1,R2,GETMAIN_LEN_ADDR  load addr and length
         LTR   R1,R1                   check getmain done
         JZ    HZS999                   no leave
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    HZS998                  yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free ARM work area
         J     HZS999
HZS998   DS    0H
         LR    R0,R2                   length for FREEMAIN
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
.HZS999  ANOP
HZS999   END_PROC
*
         TITLE 'SHOWMVS &REL - Master JCL (IEEMSJCL)'
*---------------------------------------------------------------------*
*                                                                     *
*Master JCL (IEEMSJCL)                                                *
*                                                                     *
*  //MSTJCL00 JOB MSGLEVEL=(0,0)                                      *
*  //         EXEC PGM=IEEMB860,DPRTY=(15,15)                         *
*  //STCINRDR DD SYSOUT=(A,INTRDR)                                    *
*  //PROCLIB  DD DSN=SYS1.PROCLIB,DISP=SHR                            *
*                                                                     *
*---------------------------------------------------------------------*
MSTJCL00 BEGIN_PROC KW=MASTERJCL              Load require       RS0302
         MVC   WKCELL3,=C'IEEMSJCL'    default name for SP2/SP3
         TM    MSTJCL_PARMLIB,L'MSTJCL_PARMLIB master JCL in PARMLIB?
         JO    MSTJCL40                yes, jump
         MVC   WKCELL3,=C'MSTJCL00'    default name for SP4
         L     R4,CVTMSER              Master Sched Resident Data Area
*                                      IEEBASEA
         ICM   R5,B'1111',MSSCHED-BASE(R4) SCHEDULER NIP PARAMETER LIST
         JZ    MSTJCL12                zero, jump
         USING SNPL,R5
*#SNAP ADDR=SNPL,LENGTH=32                                        -DEL-
         CLI   SCHEDJCL,C' '           MSTRCL in PARMLIB ?     JWMMAY96
         JE    MSTJCL40                yes, exit
         CLI   SCHEDJCL,0              MSTRCL=NN specified?
         JE    MSTJCL12                no, jump
         MVC   WKCELL3+6(2),SCHEDJCL   MEMBER NAME SUFFIX
*
         LA    R0,WKCELL3              program name
         BRASL R14,DOBLDL2             issue BLDL (linklib)
         LTR   R15,R15                 found?
         JNZ   MSTJCL40                no, exit
*
MSTJCL12 STRING64 '&TITLEPFX.Master JCL (',WKCELL3,')',INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R1,CVTLINK              SYS1.LINKLIB
         LOAD  EPLOC=WKCELL3,DCB=(1),ERRET=MSTJCL99
         LR    R3,R0                   first line
         SLR   R4,R4
         LA    R5,4095                 mask for "NR"
         NR    R5,R1                   size in double words
         D     R4,=F'10'               size in lines
*loop
MSTJCL31 MVC   LINE,BLANKS             blank out the line
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR ?
         JNO   MSTJCL34                no, jump
         LA    R14,80                  length
         IC    R15,OLDPKF              source key
         MVCK  LINE+4(R14),0(R3),R15   Move line to buffer
         J     MSTJCL35                continue
MSTJCL34 MVC   LINE+4(80),0(R3)        move a line
MSTJCL35 BRASL R14,SPACE1              next line
         LA    R3,80(,R3)              next card image
         JCT   R5,MSTJCL31             print JCL stmts
*endloop
         BRASL R14,BLANK1              blank line
         DELETE EPLOC=WKCELL3          delete IEEMSJCL
         J     MSTJCL99                continue
*
*        Master JCL was loaded from PARMLIB
*
MSTJCL40 STRING64 '&TITLEPFX.Master JCL was loaded from PARMLIB',      X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         JNO   MSTJCL99                no, exit
         LA    R1,1                    asid of *MASTER* ASCB
         LOCASCB ASID=(1)              GET ADDR OF *MASTER* ASCB
         LTR   R2,R1                   VALID ASID?
         JNP   MSTJCL99                NO, JUMP
         USING ASCB,R2
         LAM   R2,R2,=F'0'             Set AR2 to zero           JH0405
*
*
*        Print *MASTER* JCL (ESA 5.1 only)
*
         L     R3,ASCBASSB             ASSB address
         USING ASSB,R3
         ALESERV ADD,                                                  X
               STOKEN=ASSBSTKN,        MSTR address space              X
               ALET=ALET1,             return ALET                     X
               CHKEAX=NO,                                              X
               MF=(E,ALESERV2)
         LAM   R4,R4,ALET1             POINT TO MSTR ADDRESS SPACE
         CPYA  R5,R4                   POINT TO MSTR ADDRESS SPACE
         CPYA  R6,R4                   POINT TO MSTR ADDRESS SPACE
         CPYA  R7,R4                   POINT TO MSTR ADDRESS SPACE
*        LAM   R12,R12,=F'0'           Set AR12 to Primary JH0111JH0911
*        SAC   512                     AR mode                   JH0911
         L     R4,ASCBXTCB             current JS TCB
         SAC   512                     AR mode                   JH0911
         L     R4,TCBJSCB-TCB(,R4)     current JSCB
         USING IEZJSCB,R4
         L     R5,JSCDSABQ             DSAB QDB
         USING DSABQDB,R5
         CLC   =C'DSAB',DSQDBID        am I lost?
         JE    MSTJCL50                no continue               RS0210
         CLC   =C'QDB ',DSQDBID        am I lost?                RS0210
         JE    MSTJCL50                no continue               RS0210
         J     MSTJCL90                yes, quit                 RS0210
MSTJCL50 DS    0H                                                RS0210
         AIF   (NOT D'CVTH7760).MSTJCL50_A z/OS R11              RS0510
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010111').MSTJCL50_A   RS0510
         TM    HBB7760,L'HBB7760       running on z/OS R11       RS0510
         JZ    MSTJCL50_A               no, leave                RS0510
         USING QDB,R5                                            RS0510
         L     R5,QDBFELMA             FIRST DSAB ON CHAIN       RS0510
         J     MSTJCL50_B              jump around old code      RS0510
.MSTJCL50_A  ANOP                                                RS0510
MSTJCL50_A DS  0H                                                RS0510
         AIF   (D'CVTH7760).MSTJCL50_B z/OS R11                  RS0510
         L     R5,DSQFRSTP             FIRST DSAB ON CHAIN
.MSTJCL50_B  ANOP                                                RS0510
MSTJCL50_B DS  0H                                                RS0210
         USING DSAB,R5
         L     R6,JSCBCSCB             CSCB address
         USING CHAIN,R6
         STRING64 '  //',CHPROCSN,' EXEC PGM=',JSCBPGMN,INTO=LINE
         BRASL R14,SPACE1              Single Space
*loop
MSTJCL51 L     R6,DSABSIOT             get SIOT address
         USING INDMSIOT,R6
         TM    SIOTBYT5,SIOTWTRN       Is program name a writer?
         JZ    MSTJCL52                No
         CLC   SCTOUTNM,=C'INTRDR  '   Is writer name valid for sysout
         JNE   MSTJCL52                no
         STRING64 '  //',SCTDDNAM,' DD SYSOUT=(',SCTOUTPN,',INTRDR)',  X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         J     MSTJCL59                                             +JM
MSTJCL52 EQU   *
         L     R7,SJFCBPTR             GET JFCB ADDRESS FROM SIOT
         USING INFMJFCB,R7
         STRING64 '  //',SCTDDNAM,' DD DSN=',(JFCBDSNM,,T),INTO=LINE
         TM    JFCBIND1,JFCPDS         DO WE HAVE A MEMBER NAME?
         JZ    MSTJCL53                NO, JUMP
         STRING64 (LINE,,T),'(',(JFCBELNM,,T),')',INTO=LINE
MSTJCL53 EQU   *
         CLI   JFCBNVOL,X'00'          Any volumes                  +JM
         JE    MSTJCL54                No
         STRING64 (LINE,,T),',VOL=SER=',JFCBVOLS,INTO=LINE
MSTJCL54 EQU   *
         BRASL R14,SPACE1              Single Space
MSTJCL59 EQU   *
         ICM   R5,B'1111',DSABFCHN     NEXT DSAB                    +JM
         JNZ   MSTJCL51                Not finished yet, keep on going
*endloop
MSTJCL90 BRASL R14,BLANK1              Blank line
         SAC   0                       AR mode OFF
         LAM   R4,R4,=F'0'             Set AR4 to zero           RS0506
         CPYA  R5,R4                   Set AR5 to zero           RS0506
         CPYA  R6,R4                   Set AR6 to zero           RS0506
         CPYA  R7,R4                   Set AR7 to zero           RS0506
         ALESERV DELETE,ALET=ALET1,MF=(E,ALESERV2)
         XC    ALET1,ALET1             zero ALET for RCVY rtne
.MSTJCL99 ANOP
MSTJCL99 END_PROC
*
         TITLE 'SHOWMVS &REL - Sub-System Vector Table'
*---------------------------------------------------------------------*
*                                                                     *
*Sub-system Vector Table:                                             *
*                                                                     *
*  Name (hex)     SSCTSSVT Function codes
*  JES2(D1C5E2F2) 00C0D288 1-13,16-21,53-54,64,70-71,75,77,79-80      *
*       JES2     SP 4.3.0 HJE4430  ,JES_NODE='APL1    ',JES_MEMBERNAME*
*  MSTR(D4E2E3D9) 00C2EEB8 4-6,8-10,12,14-15,32-33,48,50,54,63,68,72-7*
*       MASTER   SP4.3.0  HBB4430  ,DYNAMIC_OUTPUT='NO'               *
*  SMS (E2D4E240) 00C2E2F0 8,15-17,55                                 *
*                                                                     *
*---------------------------------------------------------------------*
SUBSYSTM BEGIN_PROC KW=SUBSYSTEMS                                RS0402
         L     R4,CVTJESCT             JES COMM TABLE
         USING JESCT,R4
         STRING64 '&TITLEPFX.Sub-system Vector Table (',               X
               (SUBSYSNO,H,L),' entries)',                             X
               INTO=LINE
         CLC   JESNRSS,SUBSYSNO        EXACT COUNT?
         JE    SUBSYS07                YES, JUMP
         LA    R1,LINE(R15)            end of text
         BCTR  R1,0                    overlay ")"
         STRING64 ', JESNRSS=',(JESNRSS,H,L),')',INTO=((R1),NEXTLINE)
SUBSYS07 EQU   *
         BRASL R14,SPACE2              Double Space
         L     R5,JESSSCT              FIRST JSCVT
         USING SSCT,R5
*
         STRING64 '  Name (hex)     SSCTSSVT Function codes',INTO=LINE
         BRASL R14,SPACE1          <== next line
*LOOP
SUBSYS22 MVC   NEXTLINE,BLANKS
         ICM   R6,B'1111',SSCTSSVT     SUB-SYSTEM VECTOR TABLE
         JZ    SUBSYS70                INACTIVE SUB-SYSTEM
         USING SSVT,R6
         VALIDATE SSVT,ERRET=SUBSYS66  validate SSVT address
         LA    R1,1                    FIRST FUNCTION CODE
         LA    R2,256                  MAX NUMBER OF FUNCTIONS
         BASR  R3,0                    FIRST TIME SWITCH
*--LOOP
SUBSYS31 LA    R14,SSVTFCOD-1(R1)      point at function code
         CLI   0(R14),0                THIS BYTE OFF?
         JZ    SUBSYS34                YES, JUMP
         LTR   R3,R3                   START OF A NEW RANGE?
         JNM   SUBSYS37                NO, IGNORE
         LR    R3,R1                   1ST CODE IN RANGE
         CLI   NEXTLINE,C' '           FIRST RANGE?
         JE    SUBSYS33                YES, JUMP
         STRING64 (NEXTLINE,,L),',',((R3),,L),INTO=NEXTLINE
         J     SUBSYS37
SUBSYS33 EQU   *                       FIRST RANGE
         STRING64 ((R3),,L),INTO=NEXTLINE
         J     SUBSYS37
SUBSYS34 EQU   *                       END OF RANGE
         LTR   R3,R3                   PREV CODE ON?
         JM    SUBSYS37                NO, IGNORE
         BCTR  R1,0                    PREVIOUS CODE (END OF RANGE)
         CLR   R3,R1                   SINGLE-CODE RANGE?
         JE    SUBSYS36                YES, JUMP
         STRING64 (NEXTLINE,,L),'-',((R1),,L),INTO=NEXTLINE
SUBSYS36 EQU   *
         LA    R1,1(,R1)               UNDO PREVIOUS "BCTR R1,0"
         BASR  R3,0                    PREV CODE WAS OFF
SUBSYS37 EQU   *
         LA    R1,1(,R1)               BUMP CURRENT FUNCTION CODE
         JCT   R2,SUBSYS31             NOT YET, PROCESS NEXT BYTE
*--ENDLOOP
         LTR   R3,R3                   PREV CODE ON?
         JM    SUBSYS39                NO, EXIT
         BCTR  R1,0                    PREVIOUS CODE (END OF RANGE)
         CLR   R3,R1                   SINGLE-CODE RANGE?
         JE    SUBSYS39                YES, EXIT
         STRING64 (NEXTLINE,,L),'-',((R1),,L),INTO=NEXTLINE
SUBSYS39 EQU   *
*--ENDLOOP
         J     SUBSYS70
SUBSYS66 STRING64 ' SSVT could not be accessed',INTO=NEXTLINE
SUBSYS70 STRING64 2X,SSCTSNAM,'(',(SSCTSNAM,,X),')',1X,(SSCTSSVT,,X),  X
               1X,NEXTLINE,INTO=LINE
         BRASL R14,SPACE1          <== next line
*
*        Get Sub-system Version Information
*
         LA    R1,SSCTSNAM             POINT AT SUB-SYSTEM NAME
         BRASL R14,GET_SSVI         <- get SSVI info
         LTR   R15,R15                 supported by this sub-system?
         JNZ   SUBSYS79                no, jump
         USING SSVI,R1
* Use SSVISDOF see APAR xxnnnn  (no number assigned yet)
*        LH    R2,SSVIFLEN             length of fixed-length header
         L     R2,SSVISDOF             length of fixed header    JM1199
         LA    R2,SSVI(R2)             start of data
         USING SSVIVDAT,R2
         LH    R0,SSVIVLEN             length
         STRING64 7X,SSVICNAM,1X,                                      X
               SSVIVERS,1X,                                            X
               SSVIFMID,1X,                                            X
               (SSVIDAT,(R0)),                                         X
               INTO=LINE
         TR    LINE,TRTPRINT           get rid of garbage        RS0803
         BRASL R14,SPACE1              BLANK LINE
.SPLVL79 ANOP
*
SUBSYS79 ICM   R5,B'1111',SSCTSCTA     NEXT SSCVT
         JNZ   SUBSYS22
*ENDLOOP
         BRASL R14,BLANK1              BLANK LINE
         END_PROC
         TITLE 'SHOWMVS &REL - Primary Sub-system'
*---------------------------------------------------------------------*
*                                                                     *
*Primary Sub-system                                                   *
*                                                                     *
*   Name(JES2)  ASID(0017)  Started(1996-11-10 19.32)                 *
*                                                                     *
*   //IEFPROC  EXEC PGM=HASJES20                                      *
*   //PROC00   DD DSN=SYS1.PROCLIB,VOL=SER=RES430                     *
*   //         DD DSN=SYS2.TEST.PROCLIB,VOL=SER=CATVOL                *
*   //         DD DSN=PROD.PROCLIB,VOL=SER=CATVOL                     *
*   //ALTPARM  DD DSN=SYS1.PARMLIB(JES2PARM),VOL=SER=CATVOL           *
*   //SYS00001 DD DSN=SYS1.HASPCKP1,VOL=SER=SPOOL1                    *
*   //$SPOOL1  DD DSN=SYS1.HASPACE,VOL=SER=SPOOL1                     *
*                                                                     *
*---------------------------------------------------------------------*
PRISUB00 BEGIN_PROC KW=PRISUB                                    RS0302
         STRING64 '&TITLEPFX.Primary Sub-system',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  Name(',(PRISUBNM,,T),')',INTO=LINE
         CLC   PRISUBNM,PRISUBTY       NAME=TYPE?
         JE    PRISUB10                YES, DON'T PRINT TWICE
         STRING64 (LINE,,T),'  Type(',(PRISUBTY,,T),')',INTO=LINE
*
*        Locate the ASCB
*
PRISUB10 LA    R4,1                    first ASID
         L     R5,CVTASVT              point to ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
*loop
PRISUB11 LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R2,R1                   VALID ASID?
         JNP   PRISUB18                NO, JUMP
         USING ASCB,R2
         ICM   R1,B'1111',ASCBJBNI     JOBNAME
         JNZ   PRISUB18                yes - CONTINUE
         ICM   R1,B'1111',ASCBJBNS     START/MOUNT/LOGON
         CLI   4(R1),C' '              4-byte name?
         JNE   PRISUB18                no - CONTINUE
         CLC   PRISUBNM,0(R1)          is this my ASCB ?
         JE    PRISUB21                yes, exit
PRISUB18 LA    R4,1(,R4)               bump ASID
         JCT   R5,PRISUB11             next address space
*endloop
         BRASL R14,SPACE2              Double Space
         STRING64 '  ASCB could not be located',INTO=LINE
         BRASL R14,SPACE2              Double Space
         J     PRISUB99                exit
*
*        Display ASID, start-up date & time
*
PRISUB21 EQU   *
         STRING64 (LINE,,T),'  ASID(',(ASCBASID,,X),')',INTO=LINE
         LA    R1,ASCBINTS             Start time in STCK format
         BRASL R14,STCKCONV            convert it to yyyymmddhhmmsshh
         STRING64 (LINE,,T),'  Started(',STCKDATE,                     X
               1X,(STCKTIME,5),                                        X
               ')',INTO=LINE
         BRASL R14,SPACE2              Double Space
*
*        Print JES JCL
*
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         JNO   PRISUB99                no, exit
         L     R3,ASCBASSB             ASSB address
         USING ASSB,R3
         ALESERV ADD,                                                  X
               STOKEN=ASSBSTKN,        JES2 address space              X
               ALET=ALET1,             return ALET                     X
               CHKEAX=NO,                                              X
               MF=(E,ALESERV2)
         LAM   R4,R4,ALET1             POINT TO JES2 ADDRESS SPACE
         CPYA  R5,R4                   POINT TO JES2 ADDRESS SPACE
         CPYA  R6,R4                   POINT TO JES2 ADDRESS SPACE
         CPYA  R7,R4                   POINT TO JES2 ADDRESS SPACE
         LAM   R12,R12,=F'0'           Set AR12 to Primary       JH0111
         L     R4,ASCBXTCB             current JS TCB
         SAC   512                     AR mode                   JH0911
         L     R4,TCBJSCB-TCB(,R4)     current JSCB
         USING IEZJSCB,R4
         L     R5,JSCDSABQ             DSAB QDB
         USING DSABQDB,R5
         CLC   =C'DSAB',DSQDBID        am I lost?
         JE    PRISUB50                no continue               RS0210
         CLC   =C'QDB ',DSQDBID        am I lost?                RS0210
         JE    PRISUB50                no continue               RS0210
         J     PRISUB90                yes, quit                 RS0210
PRISUB50 DS    0H                                                RS0210
         AIF   (NOT D'CVTH7760).PRISUB50_A z/OS R11              RS0510
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010111').PRISUB50_A   RS0510
         TM    HBB7760,L'HBB7760       running on z/OS R11       RS0510
         JZ    PRISUB50_A               no, leave                RS0510
         USING QDB,R5                                            RS0510
         L     R5,QDBFELMA             FIRST DSAB ON CHAIN       RS0510
         J     PRISUB50_B              jump around old code      RS0510
.PRISUB50_A  ANOP                                                RS0510
PRISUB50_A DS  0H                                                RS0510
         AIF   (D'CVTH7760).PRISUB50_B z/OS R11                  RS0510
         L     R5,DSQFRSTP             FIRST DSAB ON CHAIN
.PRISUB50_B  ANOP                                                RS0510
PRISUB50_B DS  0H                                                RS0210
         USING DSAB,R5
         L     R6,JSCBCSCB             CSCB address
         USING CHAIN,R6
         STRING64 '  //',CHPROCSN,' EXEC PGM=',JSCBPGMN,INTO=LINE
         BRASL R14,SPACE1              Single Space
*loop
PRISUB51 L     R6,DSABSIOT             get SIOT address
         USING INDMSIOT,R6
         L     R7,SJFCBPTR             GET JFCB ADDRESS FROM SIOT
         USING INFMJFCB,R7
         STRING64 '  //',SCTDDNAM,' DD DSN=',(JFCBDSNM,,T),INTO=LINE
         TM    JFCBIND1,JFCPDS         DO WE HAVE A MEMBER NAME?
         JZ    PRISUB56                NO, JUMP
         STRING64 (LINE,,T),'(',(JFCBELNM,,T),')',INTO=LINE
PRISUB56 EQU   *
         STRING64 (LINE,,T),',VOL=SER=',JFCBVOLS,INTO=LINE
         BRASL R14,SPACE1              Single Space
         ICM   R5,B'1111',DSABFCHA     NEXT DSAB (above/below)   RS0802
         JNZ   PRISUB51                Not finished yet, keep on RS0802
         J     PRISUB90                jump over                 RS0802
*endloop
PRISUB90 BRASL R14,BLANK1              Blank line
         SAC   0                       AR mode OFF
         LAM   R4,R4,=F'0'             Set AR4 to zero           RS0506
         CPYA  R5,R4                   Set AR5 to zero           RS0506
         CPYA  R6,R4                   Set AR6 to zero           RS0506
         CPYA  R7,R4                   Set AR7 to zero           RS0506
         ALESERV DELETE,ALET=ALET1,MF=(E,ALESERV2)
         XC    ALET1,ALET1             zero ALET for RCVY rtne
.PRISUB99 ANOP
PRISUB99 END_PROC
         TITLE 'SHOWMVS &REL - TCAS Data'
*---------------------------------------------------------------------*
*                             This display requires APF-authorization *
*                                                                     *
*TCAS parameters                                                      *
*                                                                     *
*  USERMAX: 250     RCONLIM: 10                                       *
*                                                                     *
*---------------------------------------------------------------------*
TCAS00   BEGIN_PROC KW=TCAS,AUTH=YES                             RS0302
         L     R6,CVTTCASP             Addr of TCAS parameters
         USING TCAST,R6
         STRING64 '&TITLEPFX.TCAS parameters',INTO=LINE
         BRASL R14,SPACE2              Double Space
         MODESET EXTKEY=VTAM,SAVEKEY=(2) switch to KEY=6
         LH    R4,TCASUMAX             Max users
         LH    R5,TCASRCON             Recon limit
         MODESET KEYREG=(2)            switch back to own key
         STRING64 '  USERMAX: ',((R4),,L8),                            X
               'RCONLIM: ',((R5),,L8),INTO=LINE
         BRASL R14,SPACE2              Double Space
TCAS99   END_PROC
         TITLE 'SHOWMVS &REL - TSO/E Parmlib Data'
*---------------------------------------------------------------------*
*                                                           TSO/E 1.4 *
*TSO Parmlib data                                                     *
*                                                                     *
*  Member(IKJTSO00)                                                   *
*                                                                     *
*  Authcmd  +                                                         *
*     Names ( +                                                       *
*         RECEIVE  TRANSMIT XMIT     LISTB    LISTBC   SEND +         *
*         ALTUSER  BLKUPD   CONNECT  CONSOLE  CONSOLE  DELDSD +       *
*         PARMLIB  LISTUSER SEARCH   TMONMVS  VLFNOTE  VLFNOTE  )     *
*                                                                     *
*  Authpgm  +                                                         *
*     Names ( +                                                       *
*         IEBCOPY  ICHUT100 ICHUT200 ICHUT400 IRRUT100 IRRUT200 +     *
*         IRRDSC00 ICHDSM00 OMEGAMON OBROUTR  OBSPFAU  DGA0TSO  )     *
*                                                                     *
*  Notbkgnd +                                                         *
*     Names ( +                                                       *
*         OPER     OPERATOR TERM     TERMINAL )                       *
*                                                                     *
*  Authtsf  +                                                         *
*     Names ( +                                                       *
*         IEBCOPY  IKJEFF76 )                                         *
*                                                                     *
*  Platpgm  +                                                         *
*     Names ( +                                                       *
*         IEFBR14  IKJEFF76 )                                         *
*                                                                     *
*  Platcmd  +                                                         *
*     Names ( +                                                       *
*         ALLOCATE ALLOC    ALTLIB   IKJADLIB ATTRIB   ATTR     CALL  *
*         IKJEFFCA SUBMIT   SUB      SYNC     TRANSMIT XMIT     )     *
*                                                                     *
*  Transrec  +                                                        *
*     Nodesmf ( +                                                     *
*              (*,*) +                                                *
*             ) +                                                     *
*     Spoolcl(B)   Sysout(*) +                                        *
*     Cipher(NO) +                                                    *
*     Outwarn(20000,20000)  Outlim(500000) +                          *
*     Vio(VIO     ) +                                                 *
*     Logsel(LOG     ) +                                              *
*     Logname(MISC   ) +                                              *
*     Usrctl(NAMES.TEXT                                 ) +           *
*     Sysctl(SYS1.USER.NAMES                             ) +          *
*     Daprefix(TUPREFIX)                                              *
*                                                                     *
*  Send +                                                             *
*     Opersend(ON) +                                                  *
*     Usersend(ON) +                                                  *
*     Save(ON) +                                                      *
*     Chkbrod(OFF) +                                                  *
*     Usebrod(ON) +                                                   *
*     Msgprotect(ON) +                                                *
*     Logname(BRODCAST) +                                             *
*     Sysplexshr(ON) +                                                *
*     Opersewait(ON)                                                  *
*                                                                     *
*  Help  +                                                            *
*     ENU( +                                                          *
*         SYS1.HELP )                                                 *
*                                                                     *
*  Console  +                                                         *
*     Initunum(1000)  Initsnum(1000)  Maxunum(10000)  Maxsnum(10000)  *
*                                                                     *
*  Test  +                                                            *
*     Tsocmd( +                                                       *
*         ) +                                                         *
*     Subcmd( +                                                       *
*           )                                                         *
*                                                                     *
*  Allocate  +                                                        *
*     default(SHR)                                                    *
*                                                                     *
*---------------------------------------------------------------------*
IKJTSO00 BEGIN_PROC KW=TSO                                       RS0302
         L     R2,CVTTVT
         USING TSVT,R2
         CLC   =C'1040',TSVTTSOL       TSO/E 1.4 OR HIGHER?
         JH    IKJTSO99                NO, EXIT
         L     R3,TSVTTPVT             TSO/PARMLIB vector table
         USING TPVT,R3
         CLC   =C'TPVT',TPVT_ID        ARE WE LOST?
         JNE   IKJTSO99                YES, EXIT
         L     R4,TPVTCTLT             Control table
         USING CTLT,R4
         STRING64 '&TITLEPFX.TSO Parmlib data',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  Member(',TPVT_MEM,')',INTO=LINE (IKJTSOxx)
         CLC   =C'2060',TSVTTSOL       TSO/E 2.6 OR HIGHER?
         JNH   IKJTSO17                YES,JUMP
         STRING64 '  Member(',TPVT_MEM1,')',INTO=LINE (IKJTSOxx)
IKJTSO17 EQU   *
         BRASL R14,SPACE2              Double Space
*
*        Auth tables
*
         CLC   =C'CTLT',CTLT_ID        ARE WE LOST?
         JNE   IKJTSO29                YES, EXIT
         LA    R5,CTLTTE2              A(IKJEFTE2)
         BRASL R7,IKJTSO20
         DC    C'Authcmd '             E2
         DC    C'Authpgm '             E8
         DC    C'Notbkgnd'             NS
         DC    C'Authtsf '             AP
         DC    H'-1'
*loop
IKJTSO20 STRING64 2X,((R7),8),' +',INTO=LINE
         BRASL R14,SPACE1          <== yes, print it
         STRING64 '     Names ( +',INTO=LINE
         BRASL R14,SPACE1          <== next line
         MVC   LINE,BLANKS             blank out next line
         LA    R6,LINE                 first entry
         LH    R0,8(,R5)               # of entries
         LTR   R0,R0                   any entry in this table?
         JNP   IKJTSO27                no, exit
         L     R1,0(,R5)               start of table
         LA    R1,16(,R1)              skip table header
*--loop
IKJTSO21 CLI   11(R5),8                entry length is 8?
         JE    IKJTSO22                yes, jump
         LA    R1,2(,R1)               skip 2 bytes
IKJTSO22 CLI   0(R1),C' '              blank entry?
         JE    IKJTSO24                yes, jump
         LA    R14,9                   increment in print line
         LA    R15,LINE+70             end of line
         BRXLE R6,R14,IKJTSO23         this line full?
         MVI   0(R6),C'+'              continuation
         BRASL R14,SPACE1          <== yes, print it
         MVC   LINE,BLANKS             blank out next line
         LA    R6,LINE+9               continuation
IKJTSO23 MVC   0(8,R6),0(R1)           move name
IKJTSO24 LA    R1,8(,R1)               next entry
         JCT   R0,IKJTSO21             not finished yet, loop more
*--endloop
IKJTSO27 EQU   *
         MVI   9(R6),C')'              close parenthsis
         BRASL R14,SPACE2              Double Space
         LA    R5,CTLTTE8-CTLTTE2(,R5) next table
         LA    R7,8(,R7)               next name
         CLI   0(R7),X'FF'             last table processed?
         JL    IKJTSO20                not yet, process next one
*endloop
IKJTSO29 EQU   *
*
*        Platform Programs
*
         L     R4,TPVTPPVEC            Control table           JWMMAY96
         LTR   R4,R4                   Does PPVE exist?          JH1303
         JZ    IKJTSO39                ...jif not                JH1303
         USING PPVE,R4                                         JWMMAY96
         CLC   =C'PPVE',PPVE_ID        ARE WE LOST?            JWMMAY96
         JNE   IKJTSO39                YES, EXIT
         STRING64 '  Platpgm  +',INTO=LINE                     JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         STRING64 '     Names ( +',INTO=LINE                   JWMMAY96
         BRASL R14,SPACE1          <== next line               JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE                 first entry             JWMMAY96
         L     R0,PPVE_COUNT           # of entries            JWMMAY96
         LA    R1,PPVE_ENTRY           start of table          JWMMAY96
*loop
IKJTSO32 CLI   0(R1),C' '              blank entry?            JWMMAY96
         JE    IKJTSO35                yes, jump
         LA    R14,9                   increment in print line JWMMAY96
         LA    R15,LINE+70             end of line             JWMMAY96
         BRXLE R6,R14,IKJTSO34         this line full?         JWMMAY96
         MVI   0(R6),C'+'              continuation            JWMMAY96
         BRASL R14,SPACE1          <== yes, print it           JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE+9               continuation            JWMMAY96
IKJTSO34 MVC   0(8,R6),0(R1)           move name               JWMMAY96
IKJTSO35 LA    R1,8(,R1)               length of an entry      JWMMAY96
         JCT   R0,IKJTSO32                                     JWMMAY96
*endloop
         MVI   9(R6),C')'              close parenthsis        JWMMAY96
         BRASL R14,SPACE2              Double Space            JWMMAY96
IKJTSO39 EQU   *
*
*        Platform Commands
*
         L     R4,TPVTFCVEC            Control table           JWMMAY96
         USING FCVE,R4                                         JWMMAY96
         CLC   =C'FCVE',FCVE_ID        ARE WE LOST?            JWMMAY96
         JNE   IKJTSO49                YES, EXIT
         STRING64 '  Platcmd  +',INTO=LINE                     JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         STRING64 '     Names ( +',INTO=LINE                   JWMMAY96
         BRASL R14,SPACE1          <== next line               JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE                 first entry             JWMMAY96
         L     R0,FCVE_COUNT           # of entries            JWMMAY96
         LA    R1,FCVE_ENTRY           start of table          JWMMAY96
*loop
IKJTSO42 CLI   0(R1),C' '              blank entry?            JWMMAY96
         JE    IKJTSO45                yes, jump
         LA    R14,9                   increment in print line JWMMAY96
         LA    R15,LINE+70             end of line             JWMMAY96
         BRXLE R6,R14,IKJTSO44         this line full?         JWMMAY96
         MVI   0(R6),C'+'              continuation            JWMMAY96
         BRASL R14,SPACE1          <== yes, print it           JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE+9               continuation            JWMMAY96
IKJTSO44 MVC   0(8,R6),0(R1)           move name               JWMMAY96
IKJTSO45 LA    R1,8(,R1)               length of an entry      JWMMAY96
         JCT   R0,IKJTSO42                                     JWMMAY96
*endloop
         MVI   9(R6),C')'              close parenthsis        JWMMAY96
         BRASL R14,SPACE2              Double Space            JWMMAY96
IKJTSO49 EQU   *
*
*        Transmit/Receive
*
         L     R4,TPVTXPRMD            Inmxparm table          JWMMAY96
         USING XPRM,R4                                         JWMMAY96
         CLC   =C'INMXPARM',XPRM_ID    ARE WE LOST?            JWMMAY96
         JNE   IKJTSO59                YES, EXIT
*
         STRING64 '  Transrec  +',INTO=LINE                    JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         STRING64 5X,'Nodesmf ( +',INTO=LINE                   JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         L     R7,XPRM_NJE_START       Start of nje/smf pairs  JWMMAY96
         USING XPRM_NODE,R7                                    JWMMAY96
         LH    R0,XPRM_NJE#            Count of pairs          JWMMAY96
*loop
IKJTSO51 STRING64 14X,'(',                                     JWMMAY96X
               (XPRM_NODE,,T),',',(XPRM_SMF,,T),') +',         JWMMAY96X
               INTO=LINE                                       JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         LA    R7,XPRM_NS_L(,R7)       Next pair               JWMMAY96
         JCT   R0,IKJTSO51             Skip to next pair       JWMMAY96
*endloop
         STRING64 13X,') +',INTO=LINE                          JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         DROP  R7                                              JWMMAY96
         STRING64 5X,'Spoolcl(',XPRM_SPOOLCL,                  JWMMAY96X
               ')   Sysout(',XPRM_SOUT,') +',INTO=LINE         JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'No    '           Cipher(NO)              JWMMAY96
         TM    XPRM_SW,XPRM_CIPHER_NO Cipher - no?             JWMMAY96
         JO    IKJTSO52                YES, JUMP               JWMMAY96
         LA    R7,=C'YES   '           NO, Cipher(YES)         JWMMAY96
         TM    XPRM_SW,XPRM_CIPHER_YES Cipher - yes?           JWMMAY96
         JO    IKJTSO52                YES, JUMP               JWMMAY96
         LA    R7,=C'ALWAYS'           NO, Cipher(ALWAYS)      JWMMAY96
IKJTSO52 STRING64 5X,'Cipher(',((R7),6,T),') +',INTO=LINE      JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         STRING64 5X,'Outwarn(',(XPRM_WARN1,F,L),',',          JWMMAYl5X
               (XPRM_WARN2,F,L),')',                           JWMMAY96X
               '  Outlim(',(XPRM_LIM,F,L),') +',INTO=LINE      JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         MVC   WORK256(L'XPRM_VIO_U),XPRM_VIO_U                JWMMAY96
         OC    WORK256(L'XPRM_VIO_U),BLANKS  X'00' -> X'40'    JWMMAY96
         STRING64 5X,'Vio(',(WORK256,L'XPRM_VIO_U,T),') +',    JWMMAY96X
               INTO=LINE                                       JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         STRING64 5X,'Logsel(',(XPRM_LOGSEL,,T),INTO=LINE
         LA    R1,LINE(R15)            Point to end of text
         BCTR  R1,0                    Point to last char
         MVC   0(3,R1),=C') +'         LOGSEL(LOG. -> LOGSEL(LOG) +
         BRASL R14,SPACE1              Single Space            JWMMAY96
         STRING64 5X,'Logname(',                               JWMMAY96X
               (XPRM_LOGNAME,L'XPRM_LOGNAME,T),                  SG1205X
               ') +',INTO=LINE                                 JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         STRING64 5X,'Usrctl(',(XPRM_USRCTL+1,L'XPRM_USRCTL-1,T),      X
               ') +',INTO=LINE                                 JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         MVC   WORK256(L'XPRM_SYSCTL),XPRM_SYSCTL              JWMMAY96
         OC    WORK256(L'XPRM_SYSCTL),BLANKS   X'00' -> X'40'  JWMMAY96
         STRING64 5X,'Sysctl(',(WORK256,L'XPRM_SYSCTL,T),') +', JWMMAY96
               INTO=LINE                                       JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'USERID  '         DAPREFIX = USERID       JWMMAY96
         TM    XPRM_SW,XPRM_USERID     Is it true              JWMMAY96
         JO    IKJTSO56                YES, JUMP               JWMMAY96
         LA    R7,=C'TUPREFIX'         DAPREFIX = TUPREFIX     JWMMAY96
IKJTSO56 STRING64 5X,'Daprefix(',((R7),8,T),')',INTO=LINE      JWMMAY96
         BRASL R14,SPACE2              Double Space            JWMMAY96
*
         L     R4,TPVTSEND             IKJEESCB table          JWMMAY96
         USING IKJEESCB,R4                                     JWMMAY96
         CLC   =C'IKJEESCB',EESCB_IDENTIFIER ARE WE LOST?      JWMMAY96
         JNE   IKJTSO59                YES, EXIT
         STRING64 '  Send +',INTO=LINE                         JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Opersend(ON)            JWMMAY96
         TM    EESCB_FLAGS_1,X'80'     This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Opersend(OFF)       JWMMAY96
         STRING64 5X,'Opersend(',((R7),3,T),') +',INTO=LINE    JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Usersend(ON)            JWMMAY96
         TM    EESCB_FLAGS_1,X'40'     This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Usersend(OFF)       JWMMAY96
         STRING64 5X,'Usersend(',((R7),3,T),') +',INTO=LINE    JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Save(ON)                JWMMAY96
         TM    EESCB_FLAGS_1,X'20'     This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Save(OFF)           JWMMAY96
         STRING64 5X,'Save(',((R7),3,T),') +',INTO=LINE        JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Chkbrod(ON)             JWMMAY96
         TM    EESCB_FLAGS_1,X'10'     This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Chkbrod(OFF)        JWMMAY96
         STRING64 5X,'Chkbrod(',((R7),3,T),') +',INTO=LINE     JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Usebrod(ON)             JWMMAY96
         TM    EESCB_FLAGS_1,X'08'     This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Usebrod(OFF)        JWMMAY96
         STRING64 5X,'Usebrod(',((R7),3,T),') +',INTO=LINE     JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Msgprotect(ON)          JWMMAY96
         TM    EESCB_FLAGS_1,X'04'     This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Msgprotect(OFF)     JWMMAY96
         STRING64 5X,'Msgprotect(',((R7),3,T),') +',INTO=LINE  JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         STRING64 5X,'Logname(',(EESCB_LOGNAME,,T),') +',      JWMMAY96x
               INTO=LINE                                       JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Sysplexshr(ON)          JWMMAY96
         TM    EESCB_FLAGS_1,X'02'     This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Sysplexshr(OFF)     JWMMAY96
         STRING64 5X,'Sysplexshr(',((R7),3,T),') +',INTO=LINE  JWMMAY96
         BRASL R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'On '              Opersewait(ON)          JWMMAY96
         TM    EESCB_FLAGS_1+1,X'80'   This flag on ?          JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'Off'              NO, Opersewait(OFF)     JWMMAY96
         STRING64 5X,'Opersewait(',((R7),3,T),')',INTO=LINE    JWMMAY96
*
         L     R4,TPVTHELP             IKJEFHCB table          JWMMAY96
         USING HELP,R4                                         JWMMAY96
         CLC   =C'IKJEFHCB',HELP_ID    ARE WE LOST?            JWMMAY96
         JNE   IKJTSO59                YES, EXIT
         BRASL R14,SPACE2              Double Space            JWMMAY96
         STRING64 '  Help  +',INTO=LINE                        JWMMAY96
         L     R7,HELP_LANG_CNT        Number of lang entries  JWMMAY96
         LA    R1,HELP_LANG_ENTRY      First lang entry        JWMMAY96
         USING HELP_LANG_ENTRY,R1                              JWMMAY96
*loop
IKJTSO57 BRASL R14,SPACE1              Single Space            JWMMAY96
         STRING64 5X,HELP_LANG_TYPE,'( +',INTO=LINE            JWMMAY96
         SR    R0,R0                   clear work reg          JWMMAY96
         IC    R0,HELP_DSN_COUNT       Count of dsn's          JWMMAY96
         LA    R2,HELP_DSN_ENTRY                               JWMMAY96
         USING HELP_DSN_ENTRY,R2                               JWMMAY96
*--loop
IKJTSO58 BRASL R14,SPACE1              Single space            JWMMAY96
         MVC   WORK256(44),HELP_DSN    Move the dsn            JWMMAY96
         OC    WORK256(44),BLANKS      X'00' -> X'40'          JWMMAY96
         STRING64 9X,(WORK256,44,T),' +',INTO=LINE             JWMMAY96
         LA    R2,HELP_END_ENTRY       Skip this entry         JWMMAY96
         JCT   R0,IKJTSO58             Next dsn                JWMMAY96
*--end loop
         LA    R15,LINE(R15)           end of dsm              JWMMAY96
         BCTR  R15,R0                                          JWMMAY96
         MVC   0(3,R15),=C') +'                                JWMMAY96
         L     R1,HELP_NEXT_LANG_ENTRY Next entry              JWMMAY96
         JCT   R7,IKJTSO57                                     JWMMAY96
*endloop
         MVI   2(R15),C' '             Remove last '+'         JWMMAY96
         BRASL R14,SPACE2              Double Space            JWMMAY96
         L     R4,TPVTCONSOLE          IKJCNPRM table          JWMMAY96
         USING CNPRM,R4                                        JWMMAY96
         CLC   =C'IKJCNPRM',CNPRM_ID   ARE WE LOST?            JWMMAY96
         JNE   IKJTSO59                YES, EXIT
         STRING64 '  Console  +',INTO=LINE                     JWMMAY96
         BRASL R14,SPACE1              Single space            JWMMAY96
         STRING64 5X,                                          JWMMAY96X
               'Initunum(',(CNPRM_INITUNUM,F,L),')  ',         JWMMAY96X
               'Initsnum(',(CNPRM_INITSNUM,F,L),')  ',         JWMMAY96X
               'Maxunum(',(CNPRM_MAXUNUM,F,L),')  ',           JWMMAY96X
               'Maxsnum(',(CNPRM_MAXSNUM,F,L),')  ',           JWMMAY96X
               INTO=LINE                                       JWMMAY96
         BRASL R14,SPACE2              Double space            JWMMAY96
IKJTSO59 EQU   *
*
*        TSO TEST
*
         L     R4,TPVTTEST             TPT table               JWMMAY96
         USING TPT,R4                                          JWMMAY96
         CLC   =C'TPT ',TPT_ID         ARE WE LOST?            JWMMAY96
         JNE   IKJTSO69                YES, EXIT
         STRING64 '  Test  +',INTO=LINE                        JWMMAY96
         BRASL R14,SPACE1              Single space            JWMMAY96
         STRING64 5X,'Tsocmd( +',INTO=LINE                   JWMMAY96
         BRASL R14,SPACE1              Single space            JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE                 first entry             JWMMAY96
         L     R5,TPT_TCT_ENTRY        A(TCT table)            JWMMAY96
         USING TCT_TEST,R5                                     JWMMAY96
         CLC   =C'TCT ',TCT_ID         ARE WE LOST?            JWMMAY96
         JNE   IKJTSO69                YES, EXIT
         L     R0,TPT_TCT_LENGTH       Load length of C.B.     JWMMAY96
         SRL   R0,3                    Divide by 8             JWMMAY96
         LA    R1,TCT_TSOCMD                                   JWMMAY96
         USING TCT_TSOCMD,R1                                   JWMMAY96
*--loop
IKJTSO62 CLI   0(R1),C' '              blank entry?            JWMMAY96
         JE    IKJTSO65                yes, jump
         LA    R14,9                   increment in print line JWMMAY96
         LA    R15,LINE+70             end of line             JWMMAY96
         BRXLE R6,R14,IKJTSO64         this line full?         JWMMAY96
         MVI   0(R6),C'+'              continuation            JWMMAY96
         BRASL R14,SPACE1          <== yes, print it           JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE+9               continuation            JWMMAY96
IKJTSO64 MVC   0(8,R6),TCT_TSOCMD      move name               JWMMAY96
IKJTSO65 LA    R1,TCT_ENTRY_END        length of an entry      JWMMAY96
         JCT   R0,IKJTSO62                                     JWMMAY96
*--end loop
         MVC   9(3,R6),=C') +'         close parenthsis        JWMMAY96
         BRASL R14,SPACE1          <== yes, print it           JWMMAY96
         STRING64 5X,'Subcmd( +',INTO=LINE                     JWMMAY96
         BRASL R14,SPACE1              Single space            JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE                 first entry             JWMMAY96
         L     R5,TPT_SCT_ENTRY        A(TCT table)            JWMMAY96
         USING SCT_TEST,R5                                     JWMMAY96
         CLC   =C'SCT ',SCT_ID         ARE WE LOST?            JWMMAY96
         JNE   IKJTSO69                YES, EXIT
         L     R0,TPT_SCT_LENGTH       Load length of C.B.     JWMMAY96
         SRL   R0,4                    Divide by 16            JWMMAY96
         LA    R1,SCT_SUBCMD                                   JWMMAY96
         USING SCT_SUBCMD,R1                                   JWMMAY96
*--loop
IKJTSO67 CLI   0(R1),C' '              blank entry?            JWMMAY96
         JE    IKJTSO68                yes, jump
         STRING64 9X,'(',SCT_SUBCMD,' ',SCT_PGM,') +',         JWMMAY96X
               INTO=LINE                                       JWMMAY96
         BRASL R14,SPACE1              Single space            JWMMAY96
IKJTSO68 LA    R1,SCT_ENTRY_END        length of an entry      JWMMAY96
         JCT   R0,IKJTSO67                                     JWMMAY96
*--end loop
         STRING64 11X,')',INTO=LINE                            JWMMAY96
         BRASL R14,SPACE2              Double space            JWMMAY96
IKJTSO69 EQU   *
*
*        Allocate Command
*
         L     R4,TPVTALPL             ALPL table              JWMMAY96
         USING ALPL,R4                                         JWMMAY96
         CLC   =C'ALPL',ALPL_ID        ARE WE LOST?            JWMMAY96
         JNE   IKJTSO79                YES, EXIT
         STRING64 '  Allocate  +',INTO=LINE                    JWMMAY96
         BRASL R14,SPACE1              Single space            JWMMAY96
         LA    R7,=C'SHR'              Opersewait(ON)          JWMMAY96
         TM    ALPL_FLAG,ALPL_SHR      Alloc(SHR) ?            JWMMAY96
         JO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'OLD'              NO, Opersewait(OFF)     JWMMAY96
         STRING64 5X,'default(',((R7),3,T),')',INTO=LINE       JWMMAY96
         BRASL R14,SPACE2              Double space            JWMMAY96
IKJTSO79 EQU   *
*
IKJTSO99 END_PROC
         TITLE 'SHOWMVS &REL - TSO/E Exits and Tables'
*---------------------------------------------------------------------*
*                                                                     *
*TSO Exits and Tables                                                 *
*                                                                     *
*  Name      Type   Origin   Address                                  *
*  IKJEFTE2  Table  Steplib  80341234                                 *
*  IKJEFTE8  Table  Linklib  80341234                                 *
*  INMXZ21R  Exit   Parmlib  80341234                                 *
*  IRXTINIT  Exit   LPA      80341234                                 *
*                                                                     *
*---------------------------------------------------------------------*
EXTAB00  BEGIN_PROC KW=TSO                                       RS0302
         L     R3,CVTTVT
         USING TSVT,R3
         CLC   =C'2020',TSVTTSOL       TSO/E 2.2 OR HIGHER?
         JH    EXTAB99                 NO, EXIT
         L     R4,TSVTETVP             EXIT/TABLE VECTOR
         USING EXTAB_VECT,R4
         CLC   =C'EXTV',EXTV_ID        am I lost?
         JNE   EXTAB99                 yes, exit
         L     R5,EXTV_ENTRY#          number of entries
         STRING64 '&TITLEPFX.TSO Exits and Tables - from Exit/Table VecX
               tor Table in Common Storage',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  Name      Type   Origin   Address',INTO=LINE
         BRASL R14,SPACE1              Single Space
*loop
EXTAB21  CLI   EXTV_FLAG1,0            This entry active?
         JE    EXTAB27                 no, ignore it
         LA    R6,=C'Table'            type
         CLC   =C'IKJEFT',EXTV_ENT_NAME is this a table?
         JE    *+8                     yes, jump
         LA    R6,=C'Exit '            type
         TM    EXTV_FLAG1,EXTV_FLAG1_LPA
         JNO   *+8
         LA    R7,=CL7'LPA'            Origin
         TM    EXTV_FLAG1,EXTV_FLAG1_LNKLST
         JNO   *+8
         LA    R7,=CL7'Linklib'        Origin
         TM    EXTV_FLAG1,EXTV_FLAG1_STEPLIB
         JNO   *+8
         LA    R7,=CL7'Steplib'        Origin
         STRING64 2X,EXTV_ENT_NAME,2X, name                            X
               ((R6),5),2X,            type                            X
               ((R7),7),1X,            origin                          X
               (EXTV_LOAD_ADDR,,X),    address                         X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
EXTAB27  EQU   *
         LA    R4,L'EXTV_ENT(,R4)      next entry
         JCT   R5,EXTAB21
*endloop
         BRASL R14,BLANK1              Blank line
         DROP  R4                                                SG1109
*start display of PARMLIB table addresses                        SG1109
         STRING64 '&TITLEPFX.TSO Tables Created by PARMLIB - in Common X
               Storage',INTO=LINE
         BRASL R14,SPACE2              Double Space              SG1109
         STRING64 '  Name      Type   Origin   Address',INTO=LINE
         L     R4,TSVTTPVT             Point to TPVT             SG1109
         L     R5,X'14'(,R4)         Point to CTLT control block SG1109
         LA    R6,=C'Table'            Type                      SG1109
         L     R4,X'8'(,R5)            Point to E2 table         SG1109
         LA    R7,9(,R4)               Origin                    SG1109
         CLC   0(R7,7),=C'PARMLIB'                               SG1109
         BE    EXTAB30A                                          SG1109
         LA    R7,=C'LPA    '                                    SG1109
EXTAB30A EQU   *                                                 SG1109
         BRASL R14,SPACE1              Single Space              SG1109
         STRING64 2X,'IKJEFTE2',2X,    name                            X
               ((R6),5),2X,            type                            X
               ((R7),7),1X,            origin                          X
               ((R4),,X),              address                         X
               INTO=LINE
         L     R4,X'14'(,R5)           Point to E8 table         SG1109
         LA    R7,9(,R4)               Origin                    SG1109
         CLC   0(R7,7),=C'PARMLIB'                               SG1109
         BE    EXTAB30B                                          SG1109
         LA    R7,=C'LPA    '                                    SG1109
EXTAB30B EQU   *                                                 SG1109
         BRASL R14,SPACE1              Single Space              SG1109
         STRING64 2X,'IKJEFTE8',2X,    name                            X
               ((R6),5),2X,            type                            X
               ((R7),7),1X,            origin                          X
               ((R4),,X),              address                         X
               INTO=LINE
         L     R4,X'2C'(,R5)           Point to AP table         SG1109
         LA    R7,9(,R4)               Origin                    SG1109
         CLC   0(R7,7),=C'PARMLIB'                               SG1109
         BE    EXTAB30C                                          SG1109
         LA    R7,=C'LPA    '                                    SG1109
EXTAB30C EQU   *                                                 SG1109
         BRASL R14,SPACE1              Single Space              SG1109
         STRING64 2X,'IKJEFTAP',2X,    name                            X
               ((R6),5),2X,            type                            X
               ((R7),7),1X,            origin                          X
               ((R4),,X),              address                         X
               INTO=LINE
         BRASL R14,SPACE1              Single Space              SG1109
         L     R4,X'20'(,R5)           Point to NS table         SG1109
         LA    R7,9(,R4)               Origin                    SG1109
         CLC   0(R7,7),=C'PARMLIB'                               SG1109
         BE    EXTAB30D                                          SG1109
         LA    R7,=C'LPA    '                                    SG1109
EXTAB30D EQU   *                                                 SG1109
         STRING64 2X,'IKJEFTNS',2X,    name                            X
               ((R6),5),2X,            type                            X
               ((R7),7),1X,            origin                          X
               ((R4),,X),              address                         X
               INTO=LINE
*start display of platcmd and platpgm tables (if they exist)     SG1109
         L     R4,TSVTTPVT             Point to TPVT             SG1109
         L     R4,X'34'(,R4)           Point to PLATCMD pointer  SG1109
         LTR   R4,R4                   Is there any?             SG1109
         JNZ   EXTAB40A                Yes.Say it ain't so Joe.  SG1109
         BRASL R14,SPACE1              Single Space              SG1109
       STRING64 '  PLATCMD   Table was not coded in PARMLIB',INTO=LINE
         B     EXTAB40B                                          SG1109
EXTAB40A EQU   *                                                 SG1109
         LA    R6,=C'Table'            type                      SG1109
         LA    R7,=C'PARMLIB'          origin                    RS0513
         BRASL R14,SPACE1              Single Space              SG1109
         STRING64 2X,'PLATCMD ',2X,    name                            X
               ((R6),5),2X,            type                            X
               ((R7),7),1X,            origin                          X
               ((R4),,X),              address                         X
               INTO=LINE
EXTAB40B EQU   *                                                 SG1109
         L     R4,TSVTTPVT             Point to TPVT             SG1109
         L     R4,X'40'(,R4)           Point to PLATPGM pointer  SG1109
         LTR   R4,R4                   Is there any?             SG1109
         JNZ   EXTAB41A                Yes.Say it ain't so Joe.  SG1109
         BRASL R14,SPACE1              Single Space              SG1109
       STRING64 '  PLATPGM   Table was not coded in PARMLIB',INTO=LINE
         J     EXTAB41B                                          SG1109
EXTAB41A EQU   *                                                 SG1109
         LA    R6,=C'Table'            type                      SG1109
         LA    R7,=C'PARMLIB'          origin                    RS0513
         BRASL R14,SPACE1              Single Space              SG1109
         STRING64 2X,'PLATPGM ',2X,    name                            X
               ((R6),5),2X,            type                            X
               ((R7),7),1X,            origin                          X
               ((R4),,X),              address                         X
               INTO=LINE
*end display of PARMLIB table addresses                          SG1109
EXTAB41B EQU   *                                                 SG1109
         BRASL R14,SPACE1                                        SG1209
         DROP  R3                                                SG1209
*end display of platcmd and platpgm tables (if they exist)       SG1109
*end display of PARMLIB table addresses                          SG1109
*start display of LWA TSO auth table addresses                   SG1109
EXTAB50  EQU   *                       Get the Logon Work Area   SG1209
         L     R4,LWA@                 LWA address               SG1209
         LTR   R4,R4                   Is there any?             SG1209
         JZ    EXTAB59                 No. Skip this routine.    SG1209
         BRASL R14,BLANK1              Single Space              SG1109
         STRING64 '&TITLEPFX.TSO Tables Local to Userid - from Logon WoX
               rk Area (LWA) - (used by your TSO id)',INTO=LINE
         USING LWA,R4                                            SG1209
         BRASL R14,SPACE2              Double Space              SG1109
         STRING64 '  Name      Type   Origin   Address  Length  SteplibX
               ',INTO=LINE
         BRASL R14,SPACE1                                        SG1209
         LA    R6,=C'Table'            type                      SG1209
         LA    R7,=CL7'LWA    '        origin                    SG1209
         L     R5,LWATE2               Userid's IKJEFTE2 address SG1209
         TM    LWAPRMLB,LWATE2ST       origin from steplib?      SG1209
         JZ    EXTAB50A                                          SG1209
         LA    R3,=C'Yes'                                        SG1209
         J     EXTAB50B                                          SG1209
EXTAB50A EQU   *                                                 SG1209
         LA    R3,=C'NO '                                        SG1209
EXTAB50B EQU   *                                                 SG1209
         STRING64 2X,'IKJEFTE2',2X,    name                            X
               ((R6),5),2X,            type                            X
               ((R7),7),1X,            origin                          X
               ((R5),,X),'    ',       address                         X
               (LWATE2LN,,X),'     ',  length                          X
               ((R3),3),               steplib?                        X
               INTO=LINE
         BRASL R14,SPACE1                                        SG1209
         L     R5,LWATE8               Userid's IKJEFTE8 address SG1209
         TM    LWAPRMLB,LWATE8ST       origin from steplib?      SG1209
         JZ    EXTAB50C                                          SG1209
         LA    R3,=C'Yes'                                        SG1209
         J     EXTAB50D                                          SG1209
EXTAB50C EQU   *                                                 SG1209
         LA    R3,=C'NO '                                        SG1209
EXTAB50D EQU   *                                                 SG1209
         STRING64 2X,'IKJEFTE8',2X,    name                            X
               ((R6),5),2X,            type                            X
               ((R7),7),1X,            origin                          X
               ((R5),,X),'    ',       address                         X
               (LWATE8LN,,X),'     ',  length                          X
               ((R3),3),               steplib?                        X
               INTO=LINE
         BRASL R14,SPACE1                                        SG1209
         L     R5,LWATAP               Userid's IKJEFTAP address SG1209
         TM    LWAPRMLB,LWATAPST       origin from steplib?      SG1209
         JZ    EXTAB50E                                          SG1209
         LA    R3,=C'Yes'                                        SG1209
         J     EXTAB50F                                          SG1209
EXTAB50E EQU   *                                                 SG1209
         LA    R3,=C'NO '                                        SG1209
EXTAB50F EQU   *                                                 SG1209
         STRING64 2X,'IKJEFTAP',2X,    name                            X
               ((R6),5),2X,            type                            X
               ((R7),7),1X,            origin                          X
               ((R5),,X),'    ',       address                         X
               (LWATAPLN,,X),'     ',  length                          X
               ((R3),3),               steplib?                        X
               INTO=LINE
         BRASL R14,SPACE1                                        SG1209
         L     R5,LWATNS               Userid's IKJEFTNS address SG1209
         TM    LWAPRMLB,LWATNSST       origin from steplib?      SG1209
         JZ    EXTAB50G                                          SG1209
         LA    R3,=C'Yes'                                        SG1209
         J     EXTAB50H                                          SG1209
EXTAB50G EQU   *                                                 SG1209
         LA    R3,=C'NO '                                        SG1209
EXTAB50H EQU   *                                                 SG1209
         STRING64 2X,'IKJEFTNS',2X,    name                            X
               ((R6),5),2X,            type                            X
               ((R7),7),1X,            origin                          X
               ((R5),,X),'    ',       address                         X
               (LWATNSLN,,X),'     ',  length                          X
               ((R3),3),               steplib?                        X
               INTO=LINE
         BRASL R14,SPACE2                                        SG1209
         STRING64 '   If Steplib = YES, then PARMLIB UPDATE(xx) will noX
               t overlay this table.',INTO=LINE
         BRASL R14,SPACE1                                        SG1209
         STRING64 '   If Length = 0000, then the first blank entry willX
                delimit this table.',INTO=LINE
         BRASL R14,SPACE1                                        SG1209
EXTAB59  EQU   *
*end display of LWA TSO auth table addresses                     SG1109
         BRASL R14,BLANK1              Blank line                SG1109
EXTAB99  END_PROC
         TITLE 'SHOWMVS &REL - Number of Notices made by ACCT/SYNC'
*---------------------------------------------------------------------*
*                                                                     *
*Number of Notices Created by ACCOUNT/SYNC in the Broadcast Dataset   *
*                                                                     *
*   Default Number of Global Notices Records:  100                    *
*                                                                     *
*---------------------------------------------------------------------*
NUMNOT00 BEGIN_PROC                                              SG1209
         STRING64 '&TITLEPFX.Number of Notices Created by ACCOUNT/SYNC X
               in the Broadcast Dataset',INTO=LINE               SG1209
         BRASL R14,SPACE2              Double Space              SG1209
         L     R3,CVTEXT2                                        RS1209
         USING CVTXTNT2,R3                                       RS1209
         STRING64 '  Default Number of Global Notices Records:  ',     X
               (CVTBCLMT,,L),'   (fullword at CVT+X''5A8'')',    SG0610X
               INTO=LINE                                         SG1209
         BRASL R14,SPACE2              Double Space              SG1209
NUMNOT99 END_PROC                                                SG1209
         TITLE 'SHOWMVS &REL - RACF Data'
*---------------------------------------------------------------------*
*                                                                     *
*RACF Data                                                            *
*                                                                     *
*  SYS1.RACF                            SYSCAT  Active Master Primary *
*  SYS1.UADS                            SYSCAT  TSO                   *
*                                                                     *
*  Datasharing is Active                                              *
*  Datasharing mode is on                                             *
*  Passwords expire after 35 days  (warning period is 0 days)         *
*  Number of password generations: 6                                  *
*  ID revoked after 3 tries.                                          *
*                                                                     *
*                                                                     *
*  Protect All     :  Fail          List of Groups  :  Active         *
*  DASDVOL         :  Active        TAPEVOL         :  Inactive       *
*  ADSP            :  Inactive      TAPEDSN         :  Inactive       *
*  Enh Generic     :  Inactive      Inact Interval  :   0             *
*  JES-XBMALLRACF  :  Active        JES-EARLYVERIFY :  Active         *
*  JES-BATCHALLRACF:  Active        NJE-UserID      :  ???            *
*  Undefined Userid:  ++++++++      Dynamic CDT     :  Active         *
*  Password lowerc.:  Inactive      PW Chg min days :   0             *
*  Password Rules  :                                                  *
*    Rules         :  AN                                              *
*    A-alpha C-consonant L-alphanum N-numeric V-vowel W-novowel *-a   *
*                                                                     *
*  Exit      Entry    Desc                                            *
*                                                                     *
*  Class      ID  RC Refer    Stoken           MaxL 1. Oth UAcc Flg   *
*  $ADASEC     0   4          8000050100000006   32 F0 F0  01   17    *
*  $ASI        0   4          0000000000000000   16 C0 E0  00   63    *
*                                                                     *
*  Started procedures table (ICHRIN03)                                *
*                                                                     *
*    JES2     MVSSTC   MVSID    / Privileged                          *
*    LLA      MVSSTC   MVSID    / Privileged                          *
*                                                                     *
*  Authorized program table (ICHAUTAP)                                *
*                                                                     *
*    AMASPZAP MVSSTC   MVSID    / Privileged                          *
*                                                                     *
*---------------------------------------------------------------------*
RACFDATA BEGIN_PROC KW=RACF                                      RS0302
         L     R7,CVTRAC               RACF VECTOR TABLE
         USING RCVT,R7
         CLC   RCVTID,=C'RCVT'         Is this RACF?
         JNE   RACFD70                 no, prevent S0C4
         STRING64 '&TITLEPFX.RACF Data:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         TM    RCVTSTAT,RCVTRNA        inactive?
         JO    RACFD91                 no, active
         TM    RCVTFLGS,RCVTROFF       deactivated?
         JO    RACFD92                 yes, exit
RACFD10  L     R5,RCVTDSDT             DSN table
         USING DSDT,R5
*        #SNAP ADDR=(R5),LENGTH=144    Debug code                RS1108
         CLC   DSDTID,=C'DSDT'         Is this RACF?
         JNE   RACFD70                 no, prevent S0C4
         L     R2,DSDTNUM              number of table entries
         SLL   R2,1                    each consists of 2 entries
         LA    R6,DSDTENTY2            start of table               2.1
         USING DSDE,R6
*loop
RACFD21  L     R3,DSDERUCB             UCB pointer
         USING UCBOB,R3
         TM    DSDESTAT,DSDEACTV       Active?
         JNO   RACFD25                 no, ignore
         STRING64 2X,DSDEDSN,1X,UCBVOLI,INTO=LINE
         LA    R4,LINE+2(R15)          status
        #STATUS DSDESTAT,DSDEACTV,'Active'
        #STATUS DSDESTAT,DSDEMSTR,'Master'
        #STATUS DSDESTAT,DSDEPRIM,'Primary'
         TM    DSDESTAT,DSDEPRIM       was primary?
*        JO    *+L'*+6                 yes
         JO    RACFD24                yes
         STRING64 'Back-Up',INTO=((R4),7)
RACFD24  EQU   *
         BRASL R14,SPACE1          <== yes, next line
RACFD25  EQU   *
         LA    R6,L'DSDENT2(,R6)       bump to next                2.1
RACFD29  JCT   R2,RACFD21
*endloop
RACFD30  CLI   RCVTUADS,0              TSO?
         JE    RACFD30_1               no                        RS0905
         STRING64 2X,RCVTUADS,1X,RCVTUVOL,INTO=LINE
         LA    R4,LINE+2(R15)          show it
         MVC   0(3,R4),=C'TSO'
         BRASL R14,SPACE2              Double Space
         STRING64 '  Datasharing is ',INTO=LINE                  RS1108
         LA    R4,LINE(R15)                                      RS1108
         MVC   0(8,R4),=C'Inactive'                              RS1108
        #STATUS DSDTDSFL,DSDTDSRQ,'Active  '                     RS1108
         BRASL R14,SPACE1          <== yes, next line            RS1108
         TM    DSDTDSFL,DSDTDSRQ                                 RS1108
         JZ    RACFD30_9                                         RS1108
         STRING64 '  Datasharing mode is',' not on',INTO=LINE    RS1108
         CLI   DSDTDSMO,DSDTDSNO                                 RS1108
         JE    RACFD30_1                                         RS1108
         STRING64 '  Datasharing mode is',' on',INTO=LINE        RS1108
         CLI   DSDTDSMO,DSDTDSHR                                 RS1108
         JE    RACFD30_1                                         RS1108
         STRING64 '  Datasharing mode is',' readonly',INTO=LINE  RS1108
         CLI   DSDTDSMO,DSDTDSRO                                 RS1108
         JE    RACFD30_1                                         RS1108
         STRING64 '  Datasharing mode is',' transition',INTO=LINE S1108
         CLI   DSDTDSMO,DSDTTRAN                                 RS1108
         JE    RACFD30_1                                         RS1108
RACFD30_1 DS   0H                                                RS1108
         BRASL R14,SPACE1          <== yes, next line            RS1108
         DROP  R5,R6                   DSDT,DSDE
*
RACFD30_9 DS   0H                                                RS0905
         STRING64 '  Passwords expire after ',(RCVTPINV,FL1,L),        X
               ' days  (warning period is ',(RCVTWARN,FL1,L),' days)', X
               INTO=LINE
         BRASL R14,SPACE1              next line
         STRING64 '  Number of password generations: ',                X
               (RCVTHIST,FL1,L6),INTO=LINE
         BRASL R14,SPACE1              next line
         STRING64 '  ID revoked after ',(RCVTRVOK,FL1,L),' tries.',    X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  Protect All     : ',INTO=LINE               RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
         TM    RCVTFLG1+1,RCVTPRO                                RS0302
         JZ    RACFD31                                           RS0302
         MVC   0(8,R4),=C'Fail    '                              RS0302
        #STATUS RCVTFLG1+1,RCVTPROF,'Warning'                    RS0302
RACFD31  EQU   *                                                 RS0302
         STRING64 (LINE,35),'List of Groups  : ',INTO=LINE       RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTOPTX,RCVTLGRP,'Active  '                     RS0302
         BRASL R14,SPACE1              Single Space              RS0302
         STRING64 '  DASDVOL         : ',INTO=LINE               RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTSTA1,RCVTDASD,'Active  '                     RS0302
         STRING64 (LINE,35),'TAPEVOL         : ',INTO=LINE       RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTSTA1,RCVTTAPE,'Active  '                     RS0302
         BRASL R14,SPACE1              Single Space              RS0302
         STRING64 '  ADSP            : ',INTO=LINE               RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Active  '                              RS0302
        #STATUS RCVTSTAT,RCVTNADS,'Inactive'                     RS0302
         STRING64 (LINE,35),'TAPEDSN         : ',INTO=LINE       RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTFLG1,RCVTTDSN,'Active  '                     RS0302
         BRASL R14,SPACE1              Single Space              RS0302
         STRING64 '  Enh Generic     : ',INTO=LINE               RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTSTAT,RCVTEGN,'Active  '                      RS0302
         STRING64 (LINE,35),'Inact Interval  : ',(RCVTINAC,FL1,R3B),   X
               INTO=LINE                                         RS1006
         TR    LINE,TRTPRINT           get rid of garbage if hdr is bad
         BRASL R14,SPACE1              Single Space              RS0302
         STRING64 '  JES-XBMALLRACF  : ',INTO=LINE               RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTSTA1,RCVTJXAL,'Active  '                     RS0302
         STRING64 (LINE,35),'JES-EARLYVERIFY : ',INTO=LINE       RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTSTA1,RCVTJCHK,'Active  '                     RS0302
         BRASL R14,SPACE1              Single Space              RS0302
         STRING64 '  JES-BATCHALLRACF: ',INTO=LINE               RS0302
         LA    R4,LINE+1(R15)                                    RS0302
         MVC   0(8,R4),=C'Inactive'                              RS0302
        #STATUS RCVTSTA1,RCVTJXAL,'Active  '                     RS0302
         STRING64 (LINE,35),'NJE-UserID      :  ',(RCVTJSYS),INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0302
         STRING64 '  Undefined Userid:  ',(RCVTJUND),INTO=LINE   RS0302
         AIF   (NOT D'CVTH7709).RACFD32  z/OS R6?                RS0207
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS0207
         JZ    RACFD32                  no, jump                 RS0207
         STRING64 (LINE,35),'Dynamic CDT     : ',INTO=LINE       RS0207
         LA    R4,LINE+1(R15)                                    RS0207
         MVC   0(8,R4),=C'Inactive'                              RS0207
        #STATUS RCVTFLG3,RCVTDCDT,'Active  '                     RS0207
         AIF   (NOT D'CVTH7720).RACFD32  z/OS R7?                RS0207
         TM    HBB7720,L'HBB7720       running on z/OS R7        RS0207
         JZ    RACFD32                  no, jump                 RS0207
         BRASL R14,SPACE1              Single Space              RS0207
         STRING64 '  Password lowerc.: ',INTO=LINE               RS0207
         LA    R4,LINE+1(R15)                                    RS0207
         MVC   0(8,R4),=C'Inactive'                              RS0207
        #STATUS RCVTFLG3,RCVTPLC,'Active  '                      RS0207
         STRING64 (LINE,35),'PW Chg min days : ',(RCVTPMIN,FL1,R3B),   X
               INTO=LINE                                         RS0207
         TR    LINE,TRTPRINT           get rid of garbage        RS0207
.RACFD32 ANOP                                                    RS0207
RACFD32  DS    0H                                                RS0207
         BRASL R14,SPACE1              Single Space              RS0302
         STRING64 '  Password Rules  :  ',INTO=LINE              RS0902
         LA    R5,RCVTSNTX                                       RS0302
         USING RCVTSNTD,R5                                       RS0302
         CLI   0(R5),X'00'                                       RS0302
         JNE   RACFD33                                           RS0302
         STRING64 (LINE,,T),'  n/a',INTO=LINE                    RS0902
         BRASL R14,SPACE1              Single Space              RS0302
         J     RACFD38                                           RS0302
RACFD33  DS    0H                                                RS0302
         BRASL R14,SPACE1              Single Space              RS0302
         LA    R6,8                    number of rules           RS0302
*loop                                                            RS0302
RACFD35  DS    0H                                                RS0302
         CLI   0(R5),X'00'             Is this rule in use ?     RS0302
         JE    RACFD37                   no leave                RS0302
         STRING64 '    Rules         :  ',(RCVTRUL1,8),INTO=LINE RS0302
         BRASL R14,SPACE1              Single Space              RS0302
         LA    R5,10(,R5)                                        RS0302
         JCT   R6,RACFD35                                        RS0302
*endloop                                                         RS0302
         DROP  R5                                                RS0302
RACFD37  DS    0H                                                RS0302
         STRING64 '    A-alpha C-consonant L-alphanum N-numeric',      X
               ' V-vowel W-novowel *-anything',INTO=LINE         RS0302
         BRASL R14,SPACE2              Double Space              RS0302
RACFD38  DS    0H                                                RS0302
         STRING64 '  Exit      Entry    Desc',INTO=LINE          RS0302
         BRASL R14,SPACE1              Single Space              RS0302
         ICM   R5,B'1111',RCVTRIX                                RS0302
         JZ    RACFD39                                           RS0302
         STRING64 '  ICHRIX01 ',(RCVTRIX,,X),                          X
               '  Racroute request','=verify(x) ','pre-exit',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0302
RACFD39  DS    0H                                                RS0302
         ICM   R5,B'1111',RCVTRIXP                               RS0302
         JZ    RACFD40_1                                         RS0302
         STRING64 '  ICHRIX02 ',(RCVTRIXP,,X),                         X
               '  Racroute request','=verify(x) ','post-exit',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0302
RACFD40_1  DS    0H                                              RS0302
         ICM   R5,B'1111',RCVTRCX                                RS0302
         JZ    RACFD40_2                                         RS0302
         STRING64 '  ICHRCX01 ',(RCVTRCX,,X),                          X
               '  Racroute request','=auth ','pre-exit',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0302
RACFD40_2 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTRCXP                               RS0302
         JZ    RACFD40_3                                         RS0302
         STRING64 '  ICHRCX02 ',(RCVTRCXP,,X),                         X
               '  Racroute request','=auth ','post-exit',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0302
RACFD40_3 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTRDX                                RS0302
         JZ    RACFD40_4                                         RS0302
         STRING64 '  ICHRDX01 ',(RCVTRDX,,X),                          X
               '  Racroute request','=define ','pre-exit',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0302
RACFD40_4 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTRDXP                               RS0302
         JZ    RACFD40_5                                         RS0302
         STRING64 '  ICHRDX02 ',(RCVTRDXP,,X),                         X
               '  Racroute request','=define ','post-exit',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0302
RACFD40_5 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTRLX                                RS0302
         JZ    RACFD40_6                                         RS0302
         STRING64 '  ICHRLX01 ',(RCVTRLX,,X),                          X
               '  Racroute request','=list ','pre-exit',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0302
RACFD40_6 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTRLXP                               RS0302
         JZ    RACFD40_7                                         RS0302
         STRING64 '  ICHRLX02 ',(RCVTRLXP,,X),                         X
               '  Racroute request','=list ','post-exit',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0302
RACFD40_7 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTFRXP                               RS0302
         JZ    RACFD40_8                                         RS0302
         STRING64 '  ICHRFX01 ',(RCVTFRXP,,X),                         X
               '  Racroute request','=fastpath ','pre-exit',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0302
RACFD40_8 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTFRX2                               RS0302
         JZ    RACFD40_9                                         RS0302
         STRING64 '  ICHRFX02 ',(RCVTFRX2,,X),                         X
               '  Racroute request','=fastpath ','post-exit',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0302
RACFD40_9 DS    0H                                               RS0302
         ICM   R5,B'1111',RCVTFRX3                               RS0302
         JZ    RACFD40_10                                        RS0302
         STRING64 '  ICHRFX03 ',(RCVTFRX3,,X),                         X
               '  Racroute request','=fastpath ','exit',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0302
RACFD40_10 DS    0H                                              RS0302
         ICM   R5,B'1111',RCVTFRX4                               RS0302
         JZ    RACFD40_11                                        RS0302
         STRING64 '  ICHRFX04 ',(RCVTFRX4,,X),                         X
               '  Racroute request','=fastpath ','exit',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0302
RACFD40_11 DS    0H                                              RS0302
         ICM   R5,B'1111',RCVTPWDX                               RS0302
         JZ    RACFD40_12                                        RS0302
         STRING64 '  ICHPWX01 ',(RCVTPWDX,,X),                         X
               '  Password ','exit',INTO=LINE                    RS0302
         BRASL R14,SPACE1              Single Space              RS0302
RACFD40_12 DS    0H                                              RS0302
         ICM   R5,B'1111',RCVTDESX                               RS0302
         JZ    RACFD40_13                                        RS0302
         STRING64 '  ICHDES01 ',(RCVTDESX,,X),                         X
               '  Password ','encryption ','exit',INTO=LINE      RS0302
         BRASL R14,SPACE1              Single Space              RS0302
RACFD40_13 DS    0H                                              RS0302
         AIF   (NOT D'CVTH7730).RACFD40_14 z/OS R8?              RS0207
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS0207
         JZ    RACFD40_14               no, jump                 RS0207
         ICM   R5,B'1111',RCVTPHRX                               RS0207
         JZ    RACFD40_14                                        RS0207
         STRING64 '  ICHPWX11 ',(RCVTPHRX,,X),                         X
               '  Password ','phrase ','exit',INTO=LINE          RS0207
         BRASL R14,SPACE1              Single Space              RS0207
.RACFD40_14 ANOP                                                 RS0207
RACFD40_14  DS    0H                                             RS0207
         BRASL R14,BLANK1                                        RS0302
         AIF   (D'CVTH7709).RACFD43    z/OS R6?                  RS0409
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS0409
         JNZ   RACFD43                  no, jump                 RS0409
         STRING64 '  Class      ID  RC Refer    Stoken           ',    X
               INTO=LINE                                         RS0302
         BRASL R14,SPACE1              Single Space              RS0302
         ICM   R5,B'1111',RCVTCDTP                               RS0207
         JZ    RACFD42                                           RS0207
         USING CNST,R5                 tell assembly             RS0302
*loop                                                            RS0302
RACFD41  DS    0H                                                RS0302
         L     R6,CNSTCNSX             CNST extension            RS0302
         USING CNSX,R6                 tell assembly             RS0302
*        #SNAP ADDR=(R5),LENGTH=30     Debug
*        STRING64 2X,CNSTNAME,2X,(CNSTID,FL1,R3B),1X,(CNSTDFRC,FL1,R3B),
               1X,CNSTXREF,1X,(CNSTSTKN,,X),INTO=LINE            RS0302
         STRING64 2X,CNSTNAME,2X,(CNST+2,FL1,R3B),1X,                  X
               (CNSX+136,FL1,R3B),                                     X
               1X,(CNST+11,8),1X,(CNSX+144,8,X),INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0302
         AH    R5,CNSTLGT              Add length                RS0302
         CLC   CNSTLGT,=H'0'           If null end               RS0302
         JNE   RACFD41                                           RS0302
*endloop                                                         RS0302
         BRASL R14,BLANK1              blank line                RS0302
         J     RACFD50                                           RS0207
RACFD42  DS    0H                                                RS0207
         STRING64 '  No class entries found',INTO=LINE           RS0409
         BRASL R14,SPACE2              Double Space              RS0207
         J     RACFD50                                           RS0409
.RACFD43 ANOP                                                    RS0409
RACFD43  DS    0H                                                RS0409
         MVC   WKCELL1,BLANKS      Set classname to blanks       RS0409
         LA    R4,COPYAREA                                       RS0409
         USING CNST,R4             Addressability to CNST fields RS0409
         LA    R5,COPYCNSX                                       RS0409
         USING CNSX,R5             Addressability to CNSX fields RS0409
*                                                                RS0409
         LA    R0,COPYAREA                                       RS0409
         LA    R1,COPYLEN                                        RS0409
         SLR   R15,R15                                           RS0409
         MVCL  R0,R14        Clear the return area for CDT entry RS0409
         STRING64 '  Class      ID  RC Refer    Stoken           ',    X
               'MaxL 1. Oth UAcc Flg Flg0 Flg1',INTO=LINE        RS0409
         BRASL R14,SPACE1                                        RS0409
         MVC   RACFL(RACFL_LENGTH),RACF_FIX initialize workarea  RS0409
*                                                                RS0409
RACFD44  DS   0H                                                 RS0409
*                                                                RS0409
* Issue RACROUTE REQUEST=STAT to get first/next class.           RS0409
*                                                                RS0409
         RACROUTE REQUEST=STAT,COPY=COPYAREA,COPYLEN=COPYLEN,          X
               NEXT=WKCELL1,WORKA=WORK256,                             X
               RELEASE=7709,MF=(E,RACFL)                         RS0409
*                                                                RS0409
         L     R6,CNSTLGT          See if we have reached the endRS0409
         LTR   R6,R6                                             RS0409
         JZ    RACFD45                                           RS0409
*        IRRPCNST miss some fields definitions from ICHPCNST     RS0409
*        Use the offsets instead of the names as ICHPCNST is     RS0409
*        avaiable for RACF user only                             RS0409
         STRING64 2X,CNSTNAME,2X,(CNST+2,FL1,R3B),1X,                  X
               (CNSX+136,FL1,R3B),1X,(CNST+11,8),1X,                   X
               (CNSX+144,8,X),2X,(CNSTMAXL,FL1,R3B),1X,                X
               (CNST+20,1,X),1X,(CNST+21,1,X),2X,                      X
               (CNST+22,1,X),3X,(CNST+23,1,X),2X,                      X
               (CNSX+137,1,X),3X,(CNSX+140,1,X),                       X
               INTO=LINE                                         RS0409
         BRASL R14,SPACE1              Single Space
*                                                                RS0409
* Process each class here.  A copy of the CDT entry is in COPYAREA
* and the class name is also in WKCELL1.                         RS0409
*                                                                RS0409
*        #SNAP ADDR=(R4),LENGTH=CNSTCBLN                         RS0409
*        #SNAP ADDR=(R5),LENGTH=CNSXCBLN                         RS0409
         J     RACFD44                                           RS0409
RACFD45  DS   0H                                                 RS0409
*endloop                                                         RS0409
         BRASL R14,BLANK1              blank line                RS0409
         STRING64 '  MaxL: Max length of member name',INTO=LINE  RS0409
         BRASL R14,SPACE1              Single Space              RS0409
         STRING64 '    1.: Syntax of first character ',                X
               '80-Alpha 40-National 20-Numeric 10-Special',           X
               INTO=LINE                                         RS0409
         BRASL R14,SPACE1              Single Space              RS0409
         STRING64 '   Oth: Syntax of other character ',                X
               '80-Alpha 40-National 20-Numeric 10-Special',           X
               INTO=LINE                                         RS0409
         BRASL R14,SPACE1              Single Space              RS0409
         STRING64 '  UAcc: Universial Access ',                        X
               '80-Alter 40-Control 20-Update 10-Read ',               X
               '08-Execute 01-None',                                   X
               INTO=LINE                                         RS0409
         BRASL R14,SPACE1              Single Space              RS0409
         STRING64 '   Flg: 80-ResGroup 40-UAcc from ACE ',             X
               '20-Operation 10-RACList 08-GENList ',                  X
               '04-Dataspace 02-CNSX pres 01-User CDT',                X
               INTO=LINE                                         RS0409
         BRASL R14,SPACE1              Single Space              RS0409
         STRING64 '  Flg0: 80-RACList req. 40-Def. Profiles ',         X
               '20-Seclabel 10-Reverse',                               X
               INTO=LINE                                         RS0409
         BRASL R14,SPACE1              Single Space              RS0409
         STRING64 '        08-Duplicate 04-Preserve check ',           X
               '02-Equal check 01-Send ENF',INTO=LINE            RS0409
         BRASL R14,SPACE1              Single Space              RS0409
         STRING64 '  Flg1: 80-Dynamic CDT ',                           X
               '40-Dup ICHRRCDE and dyn. CDT ',                        X
               '20-Copy CDT 10-SETR generic allowed',                  X
               INTO=LINE                                         RS0409
         BRASL R14,SPACE2              Double Space              RS0409
*        ICHRIN03 (Authorized procedures)
*        see SYS1.SAMPLIB(RACTABLE)
*
.RACFD50 ANOP                                                    RS0803
RACFD50  ICM   R5,B'1111',RCVTSPT      ICHRIN03 table
         JZ    RACFD60                 none
         LH    R6,0(,R5)               number of entries
         SLL   R6,17                   clear out format flag
         SRL   R6,17                   # of entries in low 15 bits
         LTR   R6,R6                   any entry in this table?
         JZ    RACFD60                 none, exit
         STRING64 '  Started procedures table (ICHRIN03)',INTO=LINE
         BRASL R14,SPACE2              Double Space
         LA    R3,2(,R5)               first entry
         SLR   R2,R2                   Initialize counter
*loop
RACFD51  LA    R2,1(,R2)               count entries
         STRING64 ((R2),,R6B),2X,(0(R3),8),1X,(8(R3),8),1X,(16(R3),8), X
               INTO=LINE
         TR    LINE,TRTPRINT           get rid of garbage if hdr is bad
         TM    0(R5),X'80'             new format?
         JZ    RACFD52                 no, old
         LA    R4,LINE+1(R15)
         MVI   0(R4),C'/'
         LA    R4,2(R4)                status
        #STATUS 24(R3),BIT0,'Privileged'
        #STATUS 24(R3),BIT1,'Trusted'
RACFD52  BRASL R14,SPACE1          <== next line
         LA    R3,24(,R3)              next entry
         TM    0(R5),X'80'             new format?
         JZ    RACFD55                 no, old
         LA    R3,8(,R3)               yes
RACFD55  JCT   R6,RACFD51              loop if more
*endloop
         BRASL R14,BLANK1              blank line
*
RACFD60  ICM   R5,B'1111',RCVTAUTP     ICHAUTAB table
         JZ    RACFD99                 none
         USING RCATABLE,R5
         CLI   RCNAME,C' '             empty (last entry)?
         JE    RACFD99                 yes, none
         STRING64 '  Authorized program table (ICHAUTAP)',INTO=LINE
         BRASL R14,SPACE2              Double Space
         SLR   R2,R2                   Initialize counter
*loop
RACFD61  LA    R2,1(,R2)               count entries
         STRING64 ((R2),,R6B),2X,RCNAME,INTO=LINE
         TM    RCFLAGS,RCINIT+RCRSV    any flag on?
         JZ    RACFD62                 no, jump
         LA    R4,LINE+1(R15)          point past pgm name
         MVI   0(R4),C'/'              separator
         LA    R4,2(,R4)               authorization
        #STATUS RCFLAGS,RCINIT,'RACINIT'
        #STATUS RCFLAGS,RCRSV,'RACLIST'
RACFD62  LA    R5,RCATABLE+12          next entry
         BRASL R14,SPACE1          <== next line
         CLI   0(R5),C' '              last entry?
         JNE   RACFD61                 no
*endloop
         J     RACFD98
*
*        ACF2
*
RACFD70  CLC   RCVTID,=C'ACF2'         Is this ACF2?
         JNE   RACFD80                 no, jump
         J     RACFD99
*
*        TOP-Secret
*
RACFD80  CLC   RCVTID,=C'RTSS'         Is this Top-secret?
         JNE   RACFD99                 no, jump
         J     RACFD99
*
RACFD91  STRING64 '  RACF is inactive',INTO=LINE
         J     RACFD97
RACFD92  STRING64 '  RACF has been deactivated by a RVARY command',    X
               INTO=LINE
*
RACFD97  BRASL R14,SPACE1          <== next line
RACFD98  BRASL R14,BLANK1              blank line
RACFD99  END_PROC
         TITLE 'SHOWMVS &REL - Unicode Data'                     RS0705
*---------------------------------------------------------------------*
*                                                                     *
*Unicode Data:                                                        *
*                                                                     *
* Image created: 06/24/2005 10:22:37                                  *
* Active Pages :       248                                            *
*                                                                     *
* From -   To-Search tech.    From -   To-Search tech.                *
* 00273-01200-                01200-00273-                            *
* 01252-01200-                01200-01252-                            *
* 01140-01200-                01200-01140-                            *
* 01208-00273-                00273-01208-                            *
* 00037-00273-                00273-00037-                            *
* 01208-00037-                00037-01208-                            *
* 00273-00367-ER              00367-00273-ER                          *
* 00273-01208-ER              01208-00273-ER                          *
* 00273-01200-ER              01200-00273-ER                          *
*                                                                     *
*---------------------------------------------------------------------*
UNICODE  BEGIN_PROC KW=UNICODE                                   RS0705
*        Helpful for this display was a utility
*        //UNIC     EXEC PGM=CUNMIMAP,PARM='ACTIVE'
*        //SYSPRINT DD SYSOUT=*
         STRING64 '&TITLEPFX.Unicode Data:',INTO=LINE            RS0506
         BRASL R14,SPACE2              Double Space              RS0506
         TM    HBB7720,L'HBB7720       running on z/OS R7        RS0506
         JZ    UNICO05                   no, leave               RS0506
         L     R3,CVTECVT              Load addr of ECVT         RS0506
         ICM   R4,B'1111',ECVTNTTP-ECVT(R3)   Name/Token         RS0506
         JZ    UNICO99                 yes, no entries  jump     RS0506
         USING NTTH,R4                                           RS0506
         ICM   R5,B'1111',NTTHNTTF     First NTTE                RS0506
         JZ    UNICO99                 yes, no entries  jump     RS0506
         USING NTTE,R5                                           RS0506
*loop                                                            RS0506
UNICO01  DS    0H                                                RS0506
         CLC   NTTENAME,=C'SYSZCUNDATASPACE'                     RS0506
         JNE   UNICO02                                           RS0506
         MVC   WKCELL1,NTTETOKN        remember ALET and         RS0506
         J     UNICO06                 access the dataspace      RS0506
UNICO02  DS    0H                                                RS0506
         ICM   R5,B'1111',NTTENEXT     next entry                RS0506
         JNZ   UNICO01                 jump if not zero          RS0506
*endloop                                                         RS0506
         DROP  R4,R5                                             RS0506
UNICO05  DS    0H                                                RS0506
         CLC   UNIDSTOK,=D'0'          Unicode dataspace ?
         JE    UNICO99                   no leave
         MVC   WKCELL1,=F'-1'
         ALESERV SEARCH,STOKEN=UNIDSTOK,ALET=WKCELL1,                  X
               AL=PASN,MF=(E,ALESERV2) get ALET
         LTR   R15,R15                 Check RC
         JNZ   UNICO94                   no leave
UNICO06  DS    0H                                                RS0506
         LAM   R4,R4,WKCELL1           Point to the dataspace
         CPYA  R5,R4                   Copy ALET
         L     R4,=F'4096'             Start at 4096
         LAM   R12,R12,=F'0'           Set AR12 to primary       JH0111
         USING UCCH,R4
         SAC   512                     MODE=AR
         CLC   UCCHEYEC2,=C'IR4'       check eyecatcher
         JE    UNICO10                    bad report             RS0406
         CLC   UCCHEYEC2,=C'IR5'       check eyecatcher
         JE    UNICO10                    bad report             RS0406
         L     R4,=F'8192'             Start at 8192 (IR5 |||)   RS0406
         CLC   UCCHEYEC2,=C'IR5'       check eyecatcher          RS0406
         JE    UNICO10                    bad report             RS0406
         CLC   UCCHEYEC2,=C'IR8'       check eyecatcher Z/OS R8  RS0806
         JNE   UNICO91                    bad report             RS0806
UNICO10  DS    0H                                                RS0406
         STRING64 '  Image created: ',UCCHCDTT,INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 '  Active Pages : ',(UCCHACTP,F,R9B),INTO=LINE
         BRASL R14,SPACE2              Double Space
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS1007
         JNZ   UNICO95                   yes, jump               RS1007
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS1007
         JNZ   UNICO95                   yes, jump               RS1007
         STRING64 '  From -   To-Search tech.  ',                      X
               '  From -   To-Search tech.  ',INTO=LINE
         BRASL R14,SPACE1
*        MVC   WORK256,0(R4)           Debugcode
*        #SNAP ADDR=WORK256,LENGTH=256 Debugcode
         ICM   R5,B'1111',UCCHUCCE     Ptr to UCCE
         JZ    UNICO93                    jump if zero
         USING UCCE,R5
         ICM   R7,B'1111',UCCH#UCCE    # of UCCE entries
         JZ    UNICO92                    zero
*loop
UNICO20  DS    0H
*        MVC   WORK256,0(R5)           Debugcode
*        #SNAP ADDR=WORK256,LENGTH=30  Debugcode
         CLC   UCCEEYEC+16,=C'UCCE'    Verfication code          RS0806
         JNE   UNICO25                                           RS0806
         AHI   R5,16                   z/OS R7 and higher        RS0806
UNICO25  DS    0H                                                RS0806
         CLC   UCCEEYEC,=C'UCCE'       Verfication code
         JNE   UNICO90
         STRING64 2X,(UCCECPFR,F,R5Z),'-',(UCCECPTO,F,R5Z),            X
               '-',UCCESR,INTO=LINE
         A     R5,UCCELEN              next UCCE
         AHI   R7,-1                   Loop counter -1
         LTR   R7,R7                   even/uneven pair of settingS0506
         JZ    UNICO98                  yes, display and leave   RS0506
*        MVC   WORK256,0(R5)           Debugcode
*        #SNAP ADDR=WORK256,LENGTH=30  Debugcode
         CLC   UCCEEYEC+16,=C'UCCE'    Verfication code          RS0806
         JNE   UNICO35                                           RS0806
         AHI   R5,16                   z/OS R7 and higher        RS0806
UNICO35  DS    0H                                                RS0806
         CLC   UCCEEYEC,=C'UCCE'       Verfication code
         JNE   UNICO90
         STRING64 (UCCECPFR,F,R5Z),'-',(UCCECPTO,F,R5Z),               X
               '-',UCCESR,INTO=LINE+30
         BRASL R14,SPACE1              Single Space
         A     R5,UCCELEN              next UCCE
         JCT   R7,UNICO20              next if any
*endloop
         J     UNICO99                 leave
UNICO90  DS    0H
         BRASL R14,BLANK1              Single Space
         STRING64 '  UCCE Eyecatcher missing ',INTO=LINE
         BRASL R14,SPACE1              Single Space
         MVC   WORK256,0(R4)           Debugcode
         #SNAP ADDR=WORK256,LENGTH=256 Debugcode
         MVC   WORK256,0(R5)           Debugcode
         #SNAP ADDR=WORK256,LENGTH=208 Debugcode
         J     UNICO99                 leave
UNICO91  DS    0H
         STRING64 '  Eyecatcher IRn missing: ',UCCHEYEC2,INTO=LINE
         BRASL R14,SPACE1              Single Space
         MVC   WORK256,0(R4)           Debugcode
         #SNAP ADDR=WORK256,LENGTH=256 Debugcode
         L     R4,=F'4096'             Start at 4096
         MVC   WORK256,0(R4)           Debugcode
         #SNAP ADDR=WORK256,LENGTH=256 Debugcode
         J     UNICO99                 leave
UNICO92  DS    0H
         STRING64 '  # of UCCE is null: ',(UCCH#UCCE,4,X),INTO=LINE
         BRASL R14,SPACE1              Single Space
         J     UNICO99                 leave
UNICO93  DS    0H
         STRING64 '  UCCE entry missing: ',(UCCHUCCE,4,X),INTO=LINE
         BRASL R14,SPACE1              Single Space
         J     UNICO99                 leave
UNICO94  DS    0H
         STRING64 '  ALESERV for Unicode-DS failed R15=',((R15),,X),   X
               INTO=LINE
         J     UNICO99                 leave                     RS1007
UNICO95  DS    0H                                                RS1007
         STRING64 '  Unicode detail disabled',INTO=LINE          RS1007
UNICO98  DS    0H                                                RS0506
         BRASL R14,SPACE1              Single Space
UNICO99  DS    0H
         SAC   0                       AR mode OFF
         LAM   R4,R4,=F'0'             Clear AR4
         LAM   R5,R5,=F'0'             Clear AR5
         BRASL R14,BLANK1              Blank line
         END_PROC
         TITLE 'SHOWMVS &REL - Address Space Usage'
*---------------------------------------------------------------------*
*                                                                     *
*>Address Space Usage                                                 *
*                          Total         In use      Available        *
*  Address spaces            400            109            291        *
*    Started/SASI             50              0             50        *
*    Non-reusable            200             27            173        *
*             Bad             27                                      *
*                                                                     *
*>Active Jobs:                                                        *
*                                                                     *
*  SYSADSMW  SYSINETD  SYSLOGD1  SYSMNAGC  SYSTCPFT  SYSTCPPM         *
*                                                                     *
*# of active Jobs: 7                                                  *
*                                                                     *
*>TSO Users:                                                          *
*  XSSGSCH                                                            *
*                                                                     *
*# of TSO Users: 1                                                    *
*                                                                     *
*>Started Tasks:                                                      *
*                                                                     *
*  *MASTER*  PCAUTH    RASP      TRACE     DUMPSRV   XCFAS            *
*  OMVS      IEFSCHAS  JESXCF    ALLOCAS   IOSAS     IXGLOGR          *
*  SYSDLF    VMCF      SYSTCPIP  RRS       SYSSMFAL  BPXAS            *
*  CATALOG   SYSNFSC   JES2MON   INIT      INIT      INIT             *
*  SYSSDSF   SYSRMM    SYSRMF    SYSTSO    DCCSXCAS  SYSNFSS          *
*  SYSTCPRD  BPXAS     SYSHSMF   MQSSMSTR  SYSRXISV  SYSTCPSM         *
*  SYSEMCSC  SYSCSMSL  SYSWEBS   SYSDFS    SYSCSMSL  SYSMTLFS         *
*  RMFGAT    BPXAS     BPXAS     TNF       BPXOINIT  STRBSSA          *
*  DB2SMSTR  DB2SDBM1  SYSTCAT   DB2SMDB   DCCSMCSM                   *
*                                                                     *
*# of Started Tasks: 101                                              *
*                                                                     *
*>USS users:                                                          *
*                                                                     *
*  SYSTCPIP  BPXAS     ASID  35  SYSNFSC   XSSGSCHL  SYSMNAGC         *
*  SYSTCPRD  BPXAS     SYSINETD  SYSTCPPM  SYSRXISV  SYSTCPSM         *
*  SYSCSMSL  BPXAS     BPXAS     DCCSXWUI  BPXAS     SYSADSMW         *
*  SYSMTHBR  DB2SDIST  SYSTCAT                                        *
*                                                                     *
*# of USS users: 39                                                   *
*                                                                     *
*>CICS regions:                                                       *
*                                                                     *
*  DCCSXCMS DCCSXCMS SUDB=0C9D10E0                                    *
*                                                                     *
*# of CICS regions: 1                                                 *
*                                                                     *
*>TCP/IP users:                                                       *
*                                                                     *
*  SYSTCPIP  ASID  35  SYSNFSC   XSSGSCHL  SYSMNAGC  SYSNFSS          *
*  SYSTCPPM  SYSRXISV  SYSTCPSM  SYSADSMD  MQSSCHIN  SYSCSMSL         *
*  SYSTCAT                                                            *
*                                                                     *
*# of TCP/IP users: 25                                                *
*                                                                     *
*---------------------------------------------------------------------*
USERS    BEGIN_PROC KW=USERS                                     RS0302
         L     R6,CVTASVT
         USING ASVT,R6
         STRING64 '&TITLEPFX.Address Space Usage',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 26X,'Total',9X,'In use',6X,'Available',INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R1,ASVTMAXI             MAXUSER
         SL    R1,ASVTAAV              AVAILABLE
         STRING64 '  Address spaces',(ASVTMAXI,F,R15B),                X
               ((R1),,R15B),(ASVTAAV,F,R15B),INTO=LINE
         BRASL R14,SPACE1          <== next line
         L     R1,ASVTSTRT             MAXUSER
         SL    R1,ASVTAST              AVAILABLE
         STRING64 '    Started/SASI',(ASVTSTRT,F,R15B),                X
               ((R1),,R15B),(ASVTAST,F,R15B),INTO=LINE
         BRASL R14,SPACE1          <== next line
         L     R1,ASVTNONR             MAXUSER
         SL    R1,ASVTANR              AVAILABLE
         STRING64 '    Non-reusable',(ASVTNONR,F,R15B),                X
               ((R1),,R15B),(ASVTANR,F,R15B),INTO=LINE
         BRASL R14,SPACE1          <== next line
*
*        Count "bad" address spaces                                @DHC
*
         L     R0,ASVTMAXU             number of ASVT slots
         SR    R1,R1
         LA    R2,ASVTENTY             point at first ASVT entry
         LA    R3,ASVTENTY             point at first ASVT entry
*loop
USERSL5  CLM   R2,B'0111',1(R3)        Master ASVT entry?
         JNE   USERSL5N                no, jump
         LA    R1,1(,R1)               yes, increment counter
USERSL5N LA    R3,4(,R3)               next ASVT entry
         JCT   R0,USERSL5              run the table
*endloop
         STRING64 '             Bad',((R1),,R15B),INTO=LINE
         BRASL R14,SPACE2              Double Space
         DROP  R6                      ASVT
         STRING64 '&TITLEPFX.Active Jobs:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         BRASL R14,WORKADDR            get work space
         LR    R2,R1                   addr of work area
         ST    R2,WKCELL1              save it for SORT8 rtne
         LA    R4,1                    first ASID
         L     R5,CVTASVT              point to ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
         SLR   R6,R6                   init counter
*loop
USERS11  LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R15,R1                  VALID ASID?
         JNP   USERS11N                NO, JUMP
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JZ    USERS11N                no - CONTINUE
         LA    R6,1(,R6)               increase counter        DL9809
         MVC   0(8,R2),0(R1)           move job name
         ST    R2,WKCELL1+4            save it for SORT8 rtne
         LA    R2,8(,R2)               bump addr in work area
USERS11N LA    R4,1(,R4)               bump ASID
         JCT   R5,USERS11              next address space
*endloop
         STRING64 '  (none)',INTO=LINE set default value
         CL    R2,WKCELL1              any JOB found?
         JE    USERS19                 none, exit
         BRASL R14,SORT8            <- sort the names
         SLR   R2,R2                   first time switch
*loop
USERS13  BRASL R14,EOL                 check for end-of-line
         MVC   0(8,R2),0(R1)           move job name
         CL    R1,WKCELL1+4            last entry?
         LA    R1,8(,R1)               next name
         JNE   USERS13                 not finished yet
*endloop
USERS19  BRASL R14,SPACE2              Double Space
         LTR   R6,R6                   any JOB?
         JZ    USERS19X                no, exit
         STRING64 '# of active Jobs: ',((R6),,L),INTO=LINE     DL9809
         BRASL R14,SPACE2              Double Space            DL9809
USERS19X EQU   *
*
         STRING64 '&TITLEPFX.TSO Users:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         BRASL R14,WORKADDR            get work space
         LR    R2,R1                   addr of work area
         ST    R2,WKCELL1              save it for SORT8 rtne
         LA    R4,1                    first ASID
         L     R5,CVTASVT              point to ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
         SLR   R6,R6                   init counter
*loop
USERS21  LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R15,R1                  VALID ASID?
         JNP   USERS21N                NO, JUMP
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   USERS21N                yes - CONTINUE
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         JZ    USERS21N                no - CONTINUE
         L     R14,ASCBOUCB-ASCB(,R15) point to OUCB
         TM    OUCBYFL-OUCB(R14),OUCBSTT+OUCBMNT  START OR MOUNT ?
         JNZ   USERS21N                YES, IGNORE
         LA    R6,1(,R6)               increase counter        DL9809
         MVC   0(8,R2),0(R1)           move job name
         ST    R2,WKCELL1+4            save it for SORT8 rtne
         LA    R2,8(,R2)               bump addr in work area
USERS21N LA    R4,1(,R4)               bump ASID
         JCT   R5,USERS21              next address space
*endloop
         STRING64 '  (none)',INTO=LINE set default value
         CL    R2,WKCELL1              any TSU found?
         JE    USERS29                 none, exit
         BRASL R14,SORT8            <- sort the names
         SLR   R2,R2                   first time switch
*loop
USERS23  BRASL R14,EOL                 check for end-of-line
         MVC   0(8,R2),0(R1)           move job name
         CL    R1,WKCELL1+4            last entry?
         LA    R1,8(,R1)               next name
         JNE   USERS23                 not finished yet
*endloop
USERS29  BRASL R14,SPACE2              Double Space
         LTR   R6,R6                   any TSO user?
         JZ    USERS29X                no, exit
         STRING64 '# of TSO Users: ',((R6),,L),INTO=LINE       DL9809
         BRASL R14,SPACE2              Double Space            DL9809
USERS29X EQU   *
*
         STRING64 '&TITLEPFX.Started Tasks:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         SLR   R2,R2                   first time switch
         LA    R4,1                    first ASID
         L     R5,CVTASVT              point to ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
         SLR   R6,R6                   init counter
*loop
USERS31  LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R15,R1                  VALID ASID?
         JNP   USERS38                 NO, JUMP
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   USERS38                 yes - CONTINUE
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         L     R14,ASCBOUCB-ASCB(,R15) point to OUCB
         TM    OUCBYFL-OUCB(R14),OUCBSTT+OUCBMNT  START OR MOUNT ?
         JZ    USERS38                 NO, process
         BRASL R14,EOL                 check for end-of-line
         LA    R6,1(,R6)               increase counter        DL9809
         MVC   0(8,R2),0(R1)           move job name
USERS38  LA    R4,1(,R4)               bump ASID
         JCT   R5,USERS31              next address space
*endloop
         BRASL R14,SPACE2              Double Space
         STRING64 '# of Started Tasks: ',((R6),,L),INTO=LINE   DL9809
         BRASL R14,SPACE2              Double Space            DL9809
USERS39X EQU   *
*
         STRING64 '&TITLEPFX.USS users:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         SLR   R2,R2                   first time switch
         LA    R4,1                    first ASID
         L     R5,CVTASVT              point to ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
         SLR   R6,R6                   init counter
*loop
USERS41  LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R15,R1                  VALID ASID?
         JNP   USERS48                 NO, JUMP
         USING ASCB,R1
USERS45  DS    0H
         ICM   R7,B'1111',ASCBASSB-ASCB(R15) ASSB ?
         JZ    USERS48                   no, zero
         ICM   R0,B'1111',ASSBOASB-ASSB(R7) USS ??
         JZ    USERS48                   no, zero
         STRING64 'ASID',(ASCBASID,H,R4B),INTO=WKCELL3
         ICM   R7,B'1111',ASSBJSAB-ASSB(R7)
         JZ    USERS47
         MVC   WKCELL3(8),JSABJBNM-JSAB(R7) move jobname
USERS47  DS    0H
         BRASL R14,EOL                 check for end-of-line
         LA    R6,1(,R6)               increase counter
         MVC   0(8,R2),WKCELL3
USERS48  DS    0H
         LA    R4,1(,R4)               bump ASID
         JCT   R5,USERS41              next address space
*endloop
         DROP  R1
         LTR   R6,R6                   Any entries ??
         JZ    USERS48N                   No                     RS0806
         BRASL R14,SPACE2              Double Space
USERS48N DS    0H                                                RS0806
         STRING64 '# of USS users: ',((R6),,L),INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '&TITLEPFX.CICS regions (with MRO):',INTO=LINE RS1106
         BRASL R14,SPACE2                                        RS0904
***********************************************************************
***                                                              RS0904
**   Locate to the first SUDB                                    RS0904
***                                                              RS0904
***********************************************************************
*                                                                RS0904
** Find the CICS subsystem and get the SSCTSUSE (DFHSAB) in R4   RS0904
*                                                                RS0904
         L     R4,CVTJESCT                -> JESCT               RS0904
         L     R4,JESSSCT-JESCT(R4)       -> SSCVT               RS0904
         LA    R3,0                                              RS0904
USERS50  DS    0H                                                RS0904
         CLC   SSCTSNAM-SSCT(4,R4),=C'CICS'  SubSystem Match?    RS0904
         JE    USERS51                       Yes, leave loop     RS0904
         ICM   R4,B'1111',SSCTSCTA-SSCT(R4)  Check next one out  RS0904
         JNZ   USERS50                      Got one, repeat      RS0904
         J     USERS58                       SubSystem not found...0904
USERS51  DS    0H                            SubSystem found     RS0904
         ICM   R4,B'1111',SSCTSUSE-SSCT(R4)  -> DFHSAB           RS0904
         JZ    USERS58                       No CICS region      DA1104
*                                                                RS0904
** Locate the SCTE                                               RS0904
*                                                                RS0904
         ICM   R4,B'1111',SABSCTE-SAB(R4) Locate SCTE            RS0904
         JZ    USERS58                                           RS0904
         USING SCTE,R4                                           RS0904
*                                                                RS0904
** Locate the LACB (Logon Address Space Control Block)           RS0904
*                                                                RS0904
         ICM   R5,B'1111',SCTELACB-SCTE(R4)  Locate LACB         RS0904
         JZ    USERS58                                           RS0904
*                                                                RS0904
** Locate the first SUDB                                         RS0904
*                                                                RS0904
         ICM   R7,B'1111',LACBSUDB-LACB(R5) Locate SUDB          RS0904
         JZ    USERS58                                           RS0904
         CLI   SCTEVER#,SCTEVER3            CICS 6.2/CTS 2.2?    RS0904
         JE    USERS52                      YES                  RS0904
         CLI   SCTEVER#,SCTEVER2            CICS 5.1/CTS 1.1?    RS0904
         JNE   USERS53                      YES                  RS0904
USERS52  DS    0H                                                RS0904
         ICM   R7,B'1111',LACBSUD2-LACB(R5) Locate SUDB          RS0904
         JZ    USERS58                      None!                RS0904
*        DROP  R5,R6 no longer needed                            RS0904
USERS53  DS    0H                                                RS0904
***********************************************************************
***                                                              RS0904
**       Process all of the SUDBs                                RS0904
***                                                              RS0904
***********************************************************************
*loop                                                            RS0904
USERS54  DS    0H                                                RS0904
         ICM   R1,B'1111',SUDBCHN-SUDB(R7)  On the last one?     RS0904
         JZ    USERS57                      Yes, Leave           RS0904
*                                                                RS0904
         ICM   R1,B'1111',SUDBLCB-SUDB(R7)  LCB pointer          RS0904
         JZ    USERS56                      None, skip this entryRS0904
         ICM   R2,B'1111',SUDBASCB-SUDB(R7) ASCB pointer         RS0904
         L     R2,ASCBASSB-ASCB(,R2)        -> ASSB              RS0904
         L     R2,ASSBJSAB-ASSB(,R2)        -> JSAB              RS0904
         MVC   WKCELL3(8),JSABJBNM-JSAB(R2)                      RS0904
         MVC   WKCELL3+8(8),LCBAPPLD53-LCB(R1)                   RS0904
         CLI   SCTEVER#,SCTEVER3            CICS 6.2/CTS 2.2?    RS0904
         JE    USERS55                      YES                  RS0904
         CLI   SCTEVER#,SCTEVER2            CICS 5.1/CTS 1.1?    RS0904
         JE    USERS55                      YES                  RS0904
         MVC   WKCELL3+8(8),LCBAPPLD41-LCB(R1) CICS 4.1          RS0904
USERS55  DS    0H                                                RS0904
         STRING64 2X,(WKCELL3,8),1X,(WKCELL3+8,8),' SUDB=',((R7),,X),  X
               INTO=LINE                                         RS0904
         BRASL R14,SPACE1                                        RS0904
         LA    R3,1(R3)                     Bump by one          RS0904
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?          RS0904
         JNO   USERS56                 no, exit                  RS0904
         AIF   ('&VERBOSE_CICS' EQ 'N').NOUSER56
         ST    R3,WKCELL1              save register 3           RS0904
         ST    R7,WKCELL1+4            save register 7           RS0904
         L     R2,SUDBASCB-SUDB(R7)    ASCB from the SUDB cblock RS0904
         USING ASCB,R2                                           RS0904
         TM    ASCBFLG1,ASCBLSAS       Swapped out ?             RS0907
         JO    USERS56                 yes, leave                RS0907
*                                                                RS0904
*        Print DFHRPL                                            RS0904
*                                                                RS0904
         L     R3,ASCBASSB-ASCB(R2)    ASSB address              RS0904
         USING ASSB,R3                                           RS0904
         ALESERV ADD,                                                  X
               STOKEN=ASSBSTKN,        CICS region                     X
               ALET=ALET1,             return ALET                     X
               CHKEAX=NO,                                              X
               MF=(E,ALESERV2)                                   RS0904
         LAM   R5,R5,ALET1             Point to CICS region      RS0904
         CPYA  R6,R5                   Point to CICS region      RS0904
         CPYA  R7,R5                   Point to CICS region      RS0904
         SAC   512                     AR mode                   RS0904
         L     R5,ASCBXTCB             current JS TCB            RS0904
         L     R5,TCBJSCB-TCB(,R5)     current JSCB              RS0904
         USING IEZJSCB,R5                                        RS0904
         L     R5,JSCDSABQ             DSAB QDB                  RS0904
         USING DSABQDB,R5                                        RS0904
         CLC   =C'DSAB',DSQDBID        am I lost?
         JE    USERS55_0               no continue               RS0210
         CLC   =C'QDB ',DSQDBID        am I lost?                RS0210
         JE    USERS55_0               no continue               RS0210
         J     USERS55_9               yes, quit                 RS0210
USERS55_0 EQU  *                                                 RS0210
         AIF   (NOT D'CVTH7760).USERS55_A z/OS R11               RS0510
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010111').USERS55_A    RS0510
         TM    HBB7760,L'HBB7760       running on z/OS R11       RS0510
         JZ    USERS55_A                no, leave                RS0510
         USING QDB,R5                                            RS0510
         L     R5,QDBFELMA             FIRST DSAB ON CHAIN       RS0510
         J     USERS55_B               jump around old code      RS0510
.USERS55_A  ANOP                                                 RS0510
USERS55_A DS   0H                                                RS0510
         AIF   (D'CVTH7760).USERS55_B  z/OS R11                  RS0510
         L     R5,DSQFRSTP             FIRST DSAB ON CHAIN       RS0904
.USERS55_B  ANOP                                                 RS0510
USERS55_B DS  0H                                                 RS0510
         USING DSAB,R5                                           RS0904
         MVI   WKCELL2,C'N'            Steplib or DFHRPL concat? RS1104
*loop                                                            RS0904
USERS55_1 DS    0H                                               RS0904
         L     R6,DSABSIOT             get SIOT address          RS0904
         USING INDMSIOT,R6                                       RS0904
         L     R7,SJFCBPTR             GET JFCB ADDRESS FROM SIOTRS0904
         USING INFMJFCB,R7                                       RS0904
         CLC   =C'STEPLIB',SCTDDNAM    DD-Name Steplib ?         RS0904
         JE    USERS55_2                 yes process             RS0904
         CLC   =C'DFHRPL ',SCTDDNAM    DD-Name DFHRPL  ?         RS0904
         JE    USERS55_2                 yes process             RS0904
         CLC   SCTDDNAM,BLANKS         DD-Name present?          RS0904
         JNE   USERS55_5                 no ok assume concact    RS0309
         CLI   WKCELL2,C'Y'            Steplib or DFHRPL concat? RS1004
         JE    USERS55_2                 ok report concatination RS1004
         J     USERS55_5               all other ignored         RS0309
USERS55_2 DS    0H                                               RS0904
         MVI   WKCELL2,C'Y'            Steplib or DFHRPL         RS1004
         STRING64 '    ',SCTDDNAM,' DD DSN=',(JFCBDSNM,,T),INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0904
USERS55_4 DS    0H                                               RS0904
         ICM   R5,B'1111',DSABFCHN     next DSAB                 RS0904
         JNZ   USERS55_1               Not finished yet, keep on going
*endloop                                                         RS0904
USERS55_5 DS    0H                                               RS0309
         MVI   WKCELL2,C'N'            No Steplib or DFHRPL      RS0309
         ICM   R5,B'1111',DSABFCHN     next DSAB                 RS0309
         JNZ   USERS55_1               Not finished yet, keep on going
*endloop                                                         RS0309
USERS55_9 DS    0H                                               RS0904
         BRASL R14,BLANK1              Blank line                RS0904
         SAC   0                       AR mode OFF               RS0904
         LAM   R5,R5,=F'0'             Set AR5 to zero           RS0506
         CPYA  R6,R5                   Set AR6 to zero           RS0506
         CPYA  R7,R5                   Set AR7 to zero           RS0506
         ALESERV DELETE,ALET=ALET1,MF=(E,ALESERV2)               RS0904
         XC    ALET1,ALET1             zero ALET for RCVY rtne   RS0904
         DROP  R2,R3,R5,R6,R7          drop using                RS0904
         L     R3,WKCELL1              restore R3                RS0904
         L     R7,WKCELL1+4            restore R7                RS0904
*                                                                RS0904
** Bump to next SUDB                                             RS0904
*                                                                RS0904
.NOUSER56  ANOP
USERS56  DS    0H                                                RS0904
         ICM   R7,B'1111',SUDBCHN-SUDB(R7)                       RS0904
         JNZ   USERS54                                           RS0904
*endloop                                                         RS0904
USERS57  DS    0H                                                RS0904
         AIF   ('&VERBOSE_CICS' EQ 'Y').NOUSER57Y
         STRING64 '    Output limited because VERBOSE was set to N',   X
               INTO=LINE
         BRASL R14,SPACE1
.NOUSER57Y  ANOP
         DROP  R4                                                RS0904
USERS58  DS    0H                                                RS0904
         BRASL R14,BLANK1                                        RS0904
         STRING64 '# of CICS regions: ',((R3),,L),INTO=LINE      RS0904
         BRASL R14,SPACE2              Double Space              RS0904
         STRING64 '&TITLEPFX.TCP/IP users:',INTO=LINE            RS0904
         BRASL R14,SPACE2              Double Space              RS0904
         SLR   R2,R2                   first time switch         RS0904
         LA    R4,1                    first ASID                RS0904
         L     R5,CVTASVT              point to ASVT             RS0904
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID                  RS0904
         SLR   R6,R6                   init counter              RS0904
*loop                                                            RS0904
USERS61  LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB  RS0904
         LTR   R15,R1                  VALID ASID?               RS0904
         JNP   USERS68                 NO, JUMP                  RS0904
         USING ASCB,R1                                           RS0904
USERS65  DS    0H                                                RS0904
         ICM   R7,B'1111',ASCBASSB-ASCB(R15) ASSB ?              RS0904
         JZ    USERS68                   no, zero                RS0904
         ICM   R0,B'1111',ASSBTASB-ASSB(R7) TCP/IP ?             RS0904
         JZ    USERS68                   no, zero                RS0904
         STRING64 'ASID',(ASCBASID,H,R4B),INTO=WKCELL3           RS0904
         ICM   R7,B'1111',ASSBJSAB-ASSB(R7)                      RS0904
         JZ    USERS67                                           RS0904
         MVC   WKCELL3(8),JSABJBNM-JSAB(R7) move jobname         RS0904
USERS67  DS    0H                                                RS0904
         BRASL R14,EOL                 check for end-of-line     RS0904
         LA    R6,1(,R6)               increase counter          RS0904
         MVC   0(8,R2),WKCELL3                                   RS0904
USERS68  DS    0H                                                RS0904
         LA    R4,1(,R4)               bump ASID                 RS0904
         JCT   R5,USERS61              next address space        RS0904
*endloop                                                         RS0904
         DROP  R1                                                RS0904
         LTR   R6,R6                   Any entries ??            RS0904
         JZ    USERS68N                   No                     RS0806
         BRASL R14,SPACE2              Double Space              RS0904
USERS68N DS    0H                                                RS0806
         STRING64 '# of TCP/IP users: ',((R6),,L),INTO=LINE      RS0904
         BRASL R14,SPACE2              Double Space              RS0904
         STRING64 '&TITLEPFX.APPC users:',INTO=LINE              RS0207
         BRASL R14,SPACE2              Double Space              RS0207
         SLR   R2,R2                   first time switch         RS0207
         LA    R4,1                    first ASID                RS0207
         L     R5,CVTASVT              point to ASVT             RS0207
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID                  RS0207
         SLR   R6,R6                   init counter              RS0207
*loop                                                            RS0207
USERS71  LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB  RS0207
         LTR   R15,R1                  VALID ASID?               RS0207
         JNP   USERS78                 NO, JUMP                  RS0207
         USING ASCB,R1                                           RS0207
USERS75  DS    0H                                                RS0207
         ICM   R7,B'1111',ASCBASSB-ASCB(R15) ASSB ?              RS0207
         JZ    USERS78                   no, zero                RS0207
         ICM   R0,B'1111',ASSBSCH-ASSB(R7) APPC ?                RS0207
         JZ    USERS78                   no, zero                RS0207
         STRING64 'ASID',(ASCBASID,H,R4B),INTO=WKCELL3           RS0207
         ICM   R7,B'1111',ASSBJSAB-ASSB(R7)                      RS0207
         JZ    USERS77                                           RS0207
         MVC   WKCELL3(8),JSABJBNM-JSAB(R7) move jobname         RS0207
USERS77  DS    0H                                                RS0207
         BRASL R14,EOL                 check for end-of-line     RS0207
         LA    R6,1(,R6)               increase counter          RS0207
         MVC   0(8,R2),WKCELL3                                   RS0207
USERS78  DS    0H                                                RS0207
         LA    R4,1(,R4)               bump ASID                 RS0207
         JCT   R5,USERS71              next address space        RS0207
*endloop                                                         RS0207
         DROP  R1                                                RS0207
         LTR   R6,R6                   Any entries ??            RS0207
         JZ    USERS78N                   No                     RS0207
         BRASL R14,SPACE2              Double Space              RS0207
USERS78N DS    0H                                                RS0207
         STRING64 '# of APPC users: ',((R6),,L),INTO=LINE        RS0207
         BRASL R14,SPACE2              Double Space              RS0207
         AIF   (NOT D'CVTH7740).USERS90   z/OS R9?               RS0209
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS0209
         JZ    USERS90                 no, jump and display      RS0209
         STRING64 '&TITLEPFX.Crypto users:',INTO=LINE            RS0908
         BRASL R14,SPACE2              Double Space              RS0908
         SLR   R2,R2                   first time switch         RS0908
         LA    R4,1                    first ASID                RS0908
         L     R5,CVTASVT              point to ASVT             RS0908
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID                  RS0908
         SLR   R6,R6                   init counter              RS0908
*loop                                                            RS0908
USERS81  LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB  RS0908
         LTR   R15,R1                  VALID ASID?               RS0908
         JNP   USERS88                 NO, JUMP                  RS0908
         USING ASCB,R1                                           RS0908
USERS85  DS    0H                                                RS0908
         ICM   R7,B'1111',ASCBASSB-ASCB(R15) ASSB ?              RS0908
         JZ    USERS88                   no, zero                RS0908
         USING ASSB,R7                                           RS0908
         TM    ASSBCRYP,ASSBSODS       Crypto ?
         JZ    USERS88
         STRING64 'ASID',(ASCBASID,H,R4B),INTO=WKCELL3           RS0908
         ICM   R7,B'1111',ASSBJSAB-ASSB(R7)                      RS0908
         JZ    USERS87                                           RS0908
         MVC   WKCELL3(8),JSABJBNM-JSAB(R7) move jobname         RS0908
USERS87  DS    0H                                                RS0908
         BRASL R14,EOL                 check for end-of-line     RS0908
         LA    R6,1(,R6)               increase counter          RS0908
         MVC   0(8,R2),WKCELL3                                   RS0908
USERS88  DS    0H                                                RS0908
         LA    R4,1(,R4)               bump ASID                 RS0908
         JCT   R5,USERS81              next address space        RS0908
*endloop                                                         RS0908
         DROP  R1                                                RS0908
         LTR   R6,R6                   Any entries ??            RS0908
         JZ    USERS88N                   No                     RS0908
         BRASL R14,SPACE2              Double Space              RS0908
USERS88N DS    0H                                                RS0908
         STRING64 '# of Crypto users: ',((R6),,L),INTO=LINE      RS0908
         BRASL R14,SPACE2              Double Space              RS0908
.USERS90 ANOP                                                    RS0209
USERS90  DS    0H                                                RS0209
         J     USERS99
*
*        Sub-routine
*
EOL      LTR   R2,R2                   first time?
         JZ    EOL12                   yes, jump
         LA    R2,10(,R2)            BUMP TO 10 BYTES PAST WHERE WE ARE
         LA    R0,LINE                 first position
         AL    R0,ZSCREENW             last position in visible line
         SLR   R0,R2                   bytes left
         CHI   R0,8
         BNLR  R14                     no, exit
         BRASL R14,SPACE1          <== yes, next line
*ORG *-4            <==  R14 can't be disturbed
*LA R10,LINE+L'LINE <==  R14 can't be disturbed
 ORG *-6            <==  R14 can't be disturbed
 LA R10,LINE+L'LINE <==  R14 can't be disturbed
         DC    X'0700'   <== FILLER
EOL12    MVC   LINE,BLANKS             CLEAR OUT MSG AREA
         LA    R2,LINE+2               GET BEGINNING ADDR OF THE LINE
         BR    R14                     exit
USERS99  END_PROC
         TITLE 'SHOWMVS &REL - JES2 Initiators'
*---------------------------------------------------------------------*
*                                                                     *
*JES2 Initiators                                                      *
*                                                                     *
*  ID Status   Classes  Jobname  Stepname Procstep JobID    C UserID  *
*                                                                     *
*   1 Drained  BA                                                     *
*   2 Active   CA       IBMUSERI STEP1000 STEP0140 JOB07618 A IBMUSER *
*   3 Inactive CA                                                     *
*                                                                     *
*        This display tries to shield itself from instability in the  *
*        JES2 control block structure;  it relies on the IPCS mappings*
*        from SYS1.MIGLIB (or SYS1.SHASMIG) to obtain the offset and  *
*        length of HCCT, SJB and PIT fields.  This supposes that these*
*        mappings are at the same level as the primary JES.           *
*                                                                     *
*        If this display doesn't work, locate the SCANMODL CSECT      *
*        at the end of the SHOWMVS source and read the comments.      *
*                                                                     *
*---------------------------------------------------------------------*
JES2INIT BEGIN_PROC KW=INITIATORS                                RS0402
         TM    SHASMIG,L'SHASMIG       SHASMIG available ?
         JZ    JES2I99                 NO, EXIT
         CLC   PRISUBTY,=C'JES2'       JES2-TYPE PRIMARY SUB-SYSTEM ?
         JNE   JES2I99                 NO, EXIT
         L     R5,CVTJESCT             JES COMM TABLE
         USING JESCT,R5
         ICM   R5,B'1111',PRISUBCT     JSCVT for primary sub-system
         JNP   JES2I99                 zero, exit
         USING SSCT,R5
         CLI   SSCTSSID,SSCTJES2       TYPE=JES2?
         JNE   JES2I99                 NO, EXIT
         L     R6,SSCTSUS2             A(HCCT)
         USING HCCT,R6
         STRING64 '&TITLEPFX.',PRISUBNM,' Initiators',INTO=LINE  RS0905
         BRASL R14,SPACE2              Double Space              RS0905
         LA    R0,=CL8'HASMHCCT'       MODEL NAME ($HCCT)
         LA    R1,=CL8'CCTPIT  '       FIELD NAME
         BRASL R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         JNZ   JES2I98                 NO, EXIT                  RS0905
         LH    R7,0(,R1)               get offset into R7
         L     R7,HCCT(R7)             HCCTPIT
         USING PIT,R7
         VALIDATE PIT,ERRET=JES2I99
         LA    R0,=CL8'HASMSJB '       MODEL NAME ($SJB)
         LA    R1,=CL8'SJBCSCB '       FIELD NAME
         BRASL R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         JNZ   JES2I99                 NO, EXIT
         MVC   $SJBCSCB,0(R1)          save CSCB offset
         LA    R0,=CL8'HASMSJB '       MODEL NAME ($SJB)
         LA    R1,=CL8'SJBJCLAS'       FIELD NAME
         AIF   (NOT D'CVTH7790).JH0112C  z/OS V2R1 ? No          JH1303
         TM    HBB7790,L'HBB7790       running on z/OS V2R1 ?    JH1303
         JNO   JES2I05             ...jif not                    JH1303
         LA    R1,=CL8'SJBJOBCL'       Field name (>HJE7780)     JH1303
JES2I05  DS    0H                                                JH1303
.JH0112C ANOP                                                    JH1303
         BRASL R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         JNZ   JES2I99                 NO, EXIT
         MVC   $SJBJCLAS,0(R1)         save Job Class offset
         LA    R0,=CL8'HASMPIT '       MODEL NAME ($PIT)
         LA    R1,=CL8'PITPATID'       FIELD NAME
         BRASL R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         JNZ   JES2I99                 NO, EXIT
         MVC   $PITPATID(4),0(R1)      save partition ID offset & len
         LA    R0,=CL8'HASMPIT '       MODEL NAME ($PIT)
         LA    R1,=CL8'PITCLASS'       FIELD NAME
         BRASL R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         JNZ   JES2I99                 NO, EXIT
         MVC   $PITCLASS(4),0(R1)      save classes offset & len
* Obtain offset for PITSTAT for use in JES2I200 routine          JH1303
         LA    R0,=CL8'HASMPIT '       MODEL NAME ($PIT)         JH1303
         LA    R1,=CL8'PITSTAT '       FIELD NAME                JH1303
         BRASL R14,SCANMODL            get field offset          JH1303
         LTR   R15,R15                 offset returned?          JH1303
         JNZ   JES2I99                 NO, EXIT                  JH1303
         MVC   $PITSTATO(4),0(R1)      save PITSTAT offset       JH1303
* Obtain offset for PITFLAGS for use in JES2I200 routine         JH1303
         LA    R0,=CL8'HASMPIT '       MODEL NAME ($PIT)         JH1303
         LA    R1,=CL8'PITFLAGS'       FIELD NAME                JH1303
         BRASL R14,SCANMODL            get field offset          JH1303
         LTR   R15,R15                 offset returned?          JH1303
         JNZ   JES2I99                 NO, EXIT                  JH1303
         MVC   $PITFLAGSO(4),0(R1)     save PITFLAGS offset      JH1303
         STRING64 '  ID   Status   Classes  Jobname  Stepname Procstep -
               JobID    C UserID   ASID ASIDx SYSName',INTO=LINE
         BRASL R14,SPACE2              Double Space
*loop
JES2I31  VALIDATE PIT,ERRET=JES2I99
         STRING64 '.PIT=',((R7),,R10Z),INTO=LINE
         BRASL R14,SPACE1              Single Space
         ICM   R7,B'1111',PITNEXT      next PIT
         JNZ   JES2I31                 loop
*endloop
         BRASL R14,BLANK1              BLANK LINE
         J     JES2I99                                           RS0905
JES2I98  EQU *                                                   RS0905
         STRING64 '  Problems during load of model HASMHCCT',          X
               INTO=LINE                                         RS0905
         BRASL R14,SPACE1                                        RS0905
         STRING64 '  Verify if SHASMIG is authorized',                 X
               INTO=LINE                                         RS0905
         BRASL R14,SPACE2                                        RS0905
JES2I99  END_PROC
         TITLE 'SHOWMVS &REL - JES2 Dynamic Proclib List (PAD)'  CR0605
*---------------------------------------------------------------------*
*                                                                     *
*Dynamic Proclib Table    (PAD)   (requires authorization)            *
*                                                                     *
*Coded and tested on z/OS & JES2 1.4                                  *
*                                                                     *
*Code is reliant on JES2 dsects PAD & PADE, SHASMAC($PAD)             *
*                                                                     *
*SHASMIG is used to work offsets for fields in HCCT & HCT             *
*                                                                     *
*Output: -                                                            *
*                                                                     *
*JES2 Dynamic proclib List (PAD)                                      *
*                                                                     *
* DDNAME(PROC00)   DD(1)=(DSNAME=(SYS1.PROCLIB)                       *
*                  DD(2)=(DSNAME=(SYS2.PROCLIB)                       *
* DDNAME(PROC01)   DD(1)=(DSNAME=(SYS1.SMPE.PROCLIB)                  *
*                                                                     *
*---------------------------------------------------------------------*
JES2PAD  BEGIN_PROC KW=JES2PAD,AUTH=YES
         TM    SHASMIG,L'SHASMIG       SHASMIG available ?
         JZ    JES2PAD_END             NO, EXIT
         CLC   PRISUBTY,=C'JES2'       JES2-TYPE PRIMARY SUB-SYSTEM ?
         JNE   JES2PAD_END             NO, EXIT
         L     R5,CVTJESCT             JES COMM TABLE
         USING JESCT,R5
         ICM   R5,B'1111',PRISUBCT     JSCVT for primary sub-system
         JNP   JES2PAD_END             zero, exit
         USING SSCT,R5
         CLI   SSCTSSID,SSCTJES2       TYPE=JES2?
         JNE   JES2PAD_END             NO, EXIT
         L     R6,SSCTSUS2             A(HCCT)
         ST    R6,PADHCCT              Save A(HCCT) for later    JH1303
         USING HCCT,R6
*                                                                JH1303
* Find CCTPLVL field for JES2 level check                        JH1303
*                                                                JH1303
         LA    R0,=CL8'HASMHCCT'       MODEL NAME ($HCCT)        JH1303
         LA    R1,=CL8'CCTPLVL'        FIELD NAME                JH1303
         BRASL R14,SCANMODL            get field offset          JH1303
         LTR   R15,R15                 offset returned?          JH1303
         JNZ   JES2PAD_SCANMODL        NO, EXIT                  JH1303
         LH    R7,0(,R1)               get offset into R7        JH1303
         LA    R7,HCCT(R7)             Resolve field address     JH1303
         MVC   J2PLVL,0(R7)            Capture CCTPLVL byte      JH1303
         STRING64 '&TITLEPFX.JES2 Dynamic Proclib List (PAD)',INTO=LINE
         BRASL R14,SPACE2                                        RS0905
         SR    R1,R1                                             JH1303
         IC    R1,J2PLVL               Install J2PLVL            JH1303
         CHI   R1,42                   HJE7780 or below ?        JH1303
         JH    JES2PAD10               ...jif HJE7790 or above   JH1303
*
* Once JES2 subsystem is found we address the HCCT
* we now get the HCT and ASCB. the ASCB provides us the ASID we need
* for going cross memory
*
         LA    R0,=CL8'HASMHCCT'       MODEL NAME ($HCCT)
         LA    R1,=CL8'CCTPOSTE'       FIELD NAME
         BRASL R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         JNZ   JES2PAD_SCANMODL        NO, EXIT
         LH    R7,0(,R1)               get offset into R7
         LA    R7,4(,R7)               get offset of CCTASCB
         L     R1,HCCT(R7)             ASCB
         USING ASCB,R1
         LH    R4,ASCBASID             save address space id
         AIF   (NOT D'CVTALR).JES2PAD1 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    JES2PAD1                   no use old             RS0309
         L     R1,ASCBASSB-ASCB(R1)    ASSB                      RS0309
         USING ASSB,R1                                           RS0309
         LMH   R4,R4,ASSBISQN             Sequence               RS0309
         DROP  R1
.JES2PAD1 ANOP                                                   RS0309
JES2PAD1 DS    0H                                                RS0309
*
         LA    R0,=CL8'HASMHCCT'       MODEL NAME ($HCCT)
         LA    R1,=CL8'CCTHCT'         FIELD NAME
         BRASL R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         JNZ   JES2PAD_SCANMODL        NO, EXIT
         LH    R7,0(,R1)               get offset into R7
         L     R6,HCCT(R7)             HCT
         DROP  R6                                                JH1303
*
* now get offset and then ptr to PAD control block
*
         LA    R0,=CL8'HASMHCT'        MODEL NAME ($HCT)
         LA    R1,=CL8'$PAD'           FIELD NAME
         BRASL R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         JNZ   JES2PAD_NOT_USING_DYNAMIC NO, EXIT
         LH    R7,0(,R1)               get offset into R7
         LA    R3,0(R7,R6)             PAD
*
*
* as pad and pades are in jes2 private storage we need to switch
* over to jes2. to do this we need to be in authorised state
* to make the switch we use the asid retrieved earlier
*
JES2PAD_SWITCH_ADDRESSING EQU *
         XC    WKCELL1,WKCELL1
         MODESET EXTKEY=ZERO
         AIF   (NOT D'CVTALR).JES2PAD3 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    JES2PAD3                   no use old             RS0309
         ESAIR R2                      Get current sec. asid     RS0309
         STG   R2,WKCELL1              Save current sec. asid    RS0309
         J     JES2PAD3_1              Jump around               RS0309
.JES2PAD3 ANOP                                                   RS0309
JES2PAD3 DS    0H                                                RS0309
         ESAR  R2                      Get current sec. asid
         STH   R2,WKCELL1              Save current sec. asid
JES2PAD3_1 DS  0H                                                RS0309
         AXSET AX==H'1'            set auth
         AIF   (NOT D'CVTALR).JES2PAD5 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    JES2PAD5                   no use old             RS0309
         SSAIR R4                      Set JES2 as secondary     RS0309
         J     JES2PAD5_1              Jump around               RS0309
.JES2PAD5 ANOP                                                   RS0309
JES2PAD5 DS    0H                                                RS0309
         SSAR  R4                  set secondary asn
JES2PAD5_1 DS  0H                                                RS0309
         SAC   256                 secondary addressing mode
*
* address pad & pade
* if ptr to PAD is zeroes then dynamic proclib support not being used
*
         USING PAD,R3
         USING PADE,R4
         ICM   R3,B'1111',0(R3)
         JZ    JES2PAD_NOT_USING_DYNAMIC
*
JES2PAD_READ_PROCDD EQU   *
         TM    PADFLAG1,PAD1DEL         exclude deleted datasets
         JO    JES2PAD_READ_PROCDD_NEXT
         LA    R2,8                     KEY OF SOURCE
         L     R5,PADDSNCT              dataset count
         L     R6,PADDSNCT              dataset count (save)
         LA    R4,PADDSET               address pade                     1030002
         LA    R7,8                     DDNAME LENGTH                    1080002
         LA    R1,PDATA_DDN             address output line
         MVCP  0(R7,R1),PADNAME,R2      SAVE DDNAME                      1090002
*loop                                                                    1060002
JES2PAD_READ_DATASET EQU *
         LA    R7,44                    DATASET NAME LENGTH              1080002
         LA    R1,PDATA_DSN             address output line
         MVCP  0(R7,R1),PADEDSN,R2     SAVE DATASET NAME                 1090002
*
* format & write output
*
* need to return to primary addressing to format & write STRING64
* output
*
         SAC   0                        need to restore primary
*
         MVC   LINE,BLANKS
         LA    R7,1(,R6)
         SR    R7,R5
         C     R7,=F'1'
         JNE   JES2PAD_OUTPUT_DSNAME
*
JES2PAD_OUTPUT_DDNAME EQU *
         STRING64 2X,'PROCLIB(',(PDATA_DDN,,T),')',INTO=LINE
*
JES2PAD_OUTPUT_DSNAME EQU *
         STRING64 'DD(',((R7),,L),')=(',                               X
               'DSNAME=',(PDATA_DSN,,T),')',INTO=LINE+20
*
JES2PAD_WRITE_OUTPUT EQU *
         BRASL R14,SPACE1
*
         SAC   256                      back to secondary
*
* end format & write output
*
         LA    R4,PADELEN(,R4)          point to next dataset entry      1110002
         LA    R9,8                     DDNAME LENGTH                    1080002
         LA    R1,LINE                  address output line
         JCT   R5,JES2PAD_READ_DATASET  process next dataset             1120002
*endloop                                                                 1130002
JES2PAD_READ_PROCDD_NEXT EQU *                                           1140002
         ICM   R3,15,PADPAD             next pad?                        1150002
         JNZ   JES2PAD_READ_PROCDD      yes, go process                  1160002
         SAC   0
         MVC   LINE,BLANKS
         BRASL R14,SPACE2               put some spaces in
         J     JES2PAD_SWITCH_BACK_ADDRESSING  end pad processing        1170002
JES2PAD_NOT_USING_DYNAMIC EQU *
         SAC   0               SET PRIMARY ADDRESSING MODE
         STRING64 '  Dynamic Proclib Support not being used',          X
               INTO=LINE
         BRASL R14,SPACE2
*                                                                        1180002
*                                                                        1210002
JES2PAD_SWITCH_BACK_ADDRESSING EQU *                                     1220000
         SAC   0               SET PRIMARY ADDRESSING MODE               1230001
         AIF   (NOT D'CVTALR).JES2PAD9 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    JES2PAD9                   no use old             RS0309
         LG    R2,WKCELL1                                        RS0309
         SSAIR R2                      Should be same as primary RS0309
         J     JES2PAD9_1              Jump around               RS0309
.JES2PAD9 ANOP                                                   RS0309
JES2PAD9 DS    0H                                                RS0309
         LH    R2,WKCELL1
         SSAR  R2                      Should be same as primary
JES2PAD9_1 DS  0H                                                RS0309
         AXSET AX==H'0'        RESET AX                                  1290000
         MODESET KEYADDR=PROTKEY,WORKREG=14                              1300001
*
* clear out working storage
*
         XC    WKCELL1,WKCELL1
         XC    PDATA_DDN(8),PDATA_DDN
         XC    PDATA_DSN(44),PDATA_DSN
         J     JES2PAD_END                                       RS0905
JES2PAD_SCANMODL EQU *                                           RS0905  1190002
         STRING64 '  Problems during load of model HASMHCCT',          X
               INTO=LINE                                         RS0905
         BRASL R14,SPACE1                                        RS0905
         STRING64 '  Verify if SHASMIG is authorized',                 X
               INTO=LINE                                         RS0905
         BRASL R14,SPACE2                                        RS0905
         J     JES2PAD_END                                       JH1303
*                                                                JH1303
* For JES2 levels at HJE7790 and above the $PAD/PADE             JH1303
* structures have been moved from the JES2 address space         JH1303
* private area to the JES2AUX owned dataspace named JES2PSO.     JH1303
*                                                                JH1303
JES2PAD10 DS   0H                                                JH1303
         L     R6,PADHCCT              Restore HCCT address      JH1303
         USING HCCT,R6                                           JH1303
         LA    R0,=CL8'HASMHCCT'       MODEL NAME ($HCCT)        JH1303
         LA    R1,=CL8'CCTPAD '        FIELD NAME                JH1303
         BRASL R14,SCANMODL            get field offset          JH1303
         LTR   R15,R15                 offset returned?          JH1303
         JNZ   JES2PAD_SCANMODL        NO, EXIT                  JH1303
         LH    R7,0(,R1)               get offset into R7        JH1303
         LA    R7,HCCT(R7)             Capture CCTPAD address    JH1303
         MVC   PADADDR,0(R7)           "ditto"                   JH1303
* PADDSET has no support in HASMPAD (fix up by adding 8 below)   JH1303
         LA    R0,=CL8'HASMHCCT'       MODEL NAME ($HCCT)        JH1303
         LA    R1,=CL8'CCTXASCB'       FIELD NAME                JH1303
         BRASL R14,SCANMODL            get field offset          JH1303
         LTR   R15,R15                 offset returned?          JH1303
         JNZ   JES2PAD_SCANMODL        NO, EXIT                  JH1303
         LH    R7,0(,R1)               get offset into R7        JH1303
         LA    R7,HCCT(R7)                                       JH1303
         MVC   PADXASCB,0(R7)         Capture CCTXASCB address   JH1303
         L     R7,0(,R7)               R7 -> JES2AUX ASCB        JH1303
         LH    R1,ASCBASID-ASCB(,R7)   Put JES2AUX ASID in R1    JH1303
         XC    TENWORDS(8),TENWORDS  undocumented DSPLIST call   JH1303
*                                                                JH1303
         DROP  R6                                                JH1303
*                                                                JH1303
         STH   R1,TENWORDS+2           PARM1 = Asid              JH1303
*        AGO   .JRH0313A                                         JH1303
         MODESET EXTKEY=ZERO                                     JH1303
         LA    R1,TENWORDS                                       JH1303
*                                                                JH1303
* We really would like to avoid the use of this undocumented     JH1303
* service (DSPLIST) here if at all possible (%FDIR).             JH1303
*                                                                JH1303
         L     R14,CVTPTR(,0)          @ of CVT                  JH1303
         L     R14,CVTPVTP-CVTMAP(,R14) @ of Page Vector Table   JH1303
         L     R15,PVTCCDSL-PVT(,R14)  @ of DSPLIST routine      JH1303
         BASR  R14,R15                 Invoke the service        JH1303
         LTR   R15,R15                 Return code ?             JH1303
         JZ    JESPAD10_A             ...jif not                 JH1303
         LR    R3,R15                  Preserve DSPLIST RC       JH1303
         MODESET KEYADDR=PROTKEY,WORKREG=14 Go back to Key4/8    JH1303
         LR    R15,R3                  Restore DSPLIST RC        JH1303
         STRING64 '  JES2PAD DSPLIST failed R15=',((R15),,X),    JH1303X
               INTO=LINE                                         JH1303
         BRASL R14,SPACE1                                        JH1303
         J     JES2PAD_END                                       JH1303
* Key 0/Sup to be here                                           JH1303
JESPAD10_A DS  0H                                                JH1303
         L     R2,TENWORDS+4           Dataspace entries         JH1303
         USING DSD,R2                  Addressability            JH1303
         ICM   R3,B'1111',DSDNO        Dataspace count           JH1303
JESPAD10_B DS  0H                                                JH1303
         CLC   DSDNAME,=CL8'JES2PSO'   PSO data space?           JH1303
         JE    JESPAD10_C              ...jif so                 JH1303
         AHI   R2,DSDENTRY_LENGTH      Next entry                JH1303
         JCT   R3,JESPAD10_B           Keep looping              JH1303
         MODESET KEYADDR=PROTKEY,WORKREG=14 Go back to Key4/8    JH1303
         STRING64 '  JES2PAD JES2PSO- DS not found ',            JH1303X
               INTO=LINE                                         JH1303
         BRASL R14,SPACE1                                        JH1303
         J     JES2PAD_END                                       JH1303
*                                                                JH1303
JESPAD10_C DS  0H                                                JH1303
         MVC   PSOSTOKN,DSDSTKN        Copy stoken               JH1303
         DROP  R2                                                JH1303
* Next 2 lines (ALESERV) added by JRHMAR13 change                JH1303
         ALESERV ADD,                                            JH1303X
               STOKEN=PSOSTOKN,                                  JH1303X
               ALET=PSOALET,                                     JH1303X
               AL=WORKUNIT,            DU-AL                     JH1303X
               MF=(E,ALESERV2)    Add DSP entry to access list   JH1303
         LR    R3,R15                  Hold RC                   JH1303
         LTR   R3,R3                   Did it work?              JH1303
         JZ    JESPAD10_D              ...jif so                 JH1303
         MODESET KEYADDR=PROTKEY,WORKREG=14 Go back to Key4/8    JH1303
* Following line added by JRHMAR13 changes                       JH1303
         LR    R15,R3                  Restore ALESERV RC        JH1303
         STRING64 '  ALESERV for JES2PSO-DS failed R15=',((R15),,X),   X
               INTO=LINE                                         JH1303
         BRASL R14,SPACE1                                        JH1303
         J     JES2PAD_END                                       JH1303
* Key 0/Sup to be here and ALET has been added to the PASN-L     JH1303
JESPAD10_D DS  0H                                                JH1303
         LAM   R4,R4,PSOALET           Load ALET for JES2PSO     JH1303
         CPYA  R3,R4                   Copy ALET to AR3          JH1303
         L     R3,PADADDR              Load address of $PAD      JH1303
         L     R4,PADADDR              Load address of $PAD      JH1303
         SAC   512                     Set AR mode               JH1303
*                                                                JH1303
* Address PAD & PADE                                             JH1303
*                                                                JH1303
* If ptr to PAD is zeroes then dynamic proclib support is not    JH1303
*  being used                                                    JH1303
*                                                                JH1303
         USING PAD,R3                                            JH1303
         USING PADE,R4                                           JH1303
*        ICM   R3,B'1111',0(R3)                                  JH1303
         LTR   R3,R3                   $PAD present              JH1303
         JZ    JES2PAD10_K_NOT_USING_DYNAMIC ...jif not          JH1303
*                                                                JH1303
JES2PAD10_E_READ_PROCDD DS 0H                                    JH1303
         TM    PADFLAG1,PAD1DEL         Exclude deleted libs     JH1303
         JO    JES2PAD_READ_PROCDD_NEXT                          JH1303
         L     R5,PADDSNCT             Dataset count             JH1303
         L     R6,PADDSNCT             Dataset count (save)      JH1303
         LA    R4,PADDSET              Address PADE              JH1303
         IC    R1,J2PLVL               Install J2PLVL            JH1303
         CHI   R1,42                   HJE7780 or below ?        JH1303
         JNH   JES2PAD10_E_skip     ...jif so, skip adjustment   JH1303
         LA    R4,8(,R4)             Adjust for HJE7790 change   JH1303
JES2PAD10_E_skip DS 0H                                           JH1303
         LA    R1,PDATA_DDN             Address output line      JH1303
         MVC   0(8,R1),PADNAME          Save DDname              JH1303
*loop                                                            JH1303
JES2PAD10_F_READ_DATASET DS 0H                                   JH1303
         LA    R7,44                    Dataset name length      JH1303
         LA    R1,PDATA_DSN             Address output line      JH1303
         MVC   0(44,R1),PADEDSN         Save dataset name        JH1303
*                                                                JH1303
* Format & write output                                          JH1303
*                                                                JH1303
* Need to return to primary addressing to format & write         JH1303
*  STRING64 output                                               JH1303
*                                                                JH1303
         SAC   0                        Need to restore primary  JH1303
*                                                                JH1303
         MVC   LINE,BLANKS                                       JH1303
         LA    R7,1(,R6)                                         JH1303
         SR    R7,R5                                             JH1303
         C     R7,=F'1'                                          JH1303
         JNE   JES2PAD10_H_OUTPUT_DSNAME                         JH1303
*                                                                JH1303
JES2PAD10_G_OUTPUT_DDNAME DS 0H                                  JH1303
         STRING64 2X,'PROCLIB(',(PDATA_DDN,,T),')',INTO=LINE     JH1303
*                                                                JH1303
JES2PAD10_H_OUTPUT_DSNAME DS 0H                                  JH1303
         STRING64 'DD(',((R7),,L),')=(',                         JH1303X
               'DSNAME=',(PDATA_DSN,,T),')',INTO=LINE+20         JH1303
*                                                                JH1303
JES2PAD10_I_WRITE_OUTPUT DS 0H                                   JH1303
         BRASL R14,SPACE1                                        JH1303
         SAC   512                     Back to AR mode           JH1303
*                                                                JH1303
* End format & write output                                      JH1303
*                                                                JH1303
         LA    R4,PADELEN(,R4)         Point to next DSN entry   JH1303
         LA    R1,LINE                 Address output line       JH1303
         JCT   R5,JES2PAD10_F_READ_DATASET Process next DSN      JH1303
*endloop                                                         JH1303
JES2PAD10_J_READ_PROCDD_NEXT DS 0H                               JH1303
         ICM   R3,B'1111',PADPAD       Next PAD ?                JH1303
         JNZ   JES2PAD10_E_READ_PROCDD ...jif so, go process     JH1303
*                                                                JH1303
         SAC   0                       Back to primary mode      JH1303
         MVC   LINE,BLANKS             Set line to blanks        JH1303
         BRASL R14,SPACE2               put some spaces in       JH1303
      J JES2PAD10_L_SWITCH_BACK_ADDRESSING  end pad processing   JH1303
JES2PAD10_K_NOT_USING_DYNAMIC DS 0H                              JH1303
         SAC   0               Set back to Primary mode          JH1303
         STRING64 '  Dynamic Proclib Support not being used',    JH1303X
               INTO=LINE                                         JH1303
         BRASL R14,SPACE2                                        JH1303
JES2PAD10_L_SWITCH_BACK_ADDRESSING DS 0H                         JH1303
         SAC   0               Set back to Primary mode          JH1303
         MODESET KEYADDR=PROTKEY,WORKREG=14                      JH1303
         ICM   R1,B'1111',PSOALET      Load ALET address         JH1303
         JZ    JES2PAD10_M               Skip if zero            JH1303
         ALESERV DELETE,ALET=PSOALET,                            JH1303X
               MF=(E,ALESERV2)         Remove DS from AL         JH1303
*                                                                JH1303
* Clear out working storage                                      JH1303
*                                                                JH1303
JES2PAD10_M DS 0H                                                JH1303
         XC    WKCELL1,WKCELL1                                   JH1303
         XC    PDATA_DDN(8),PDATA_DDN                            JH1303
         XC    PDATA_DSN(44),PDATA_DSN                           JH1303
         J     JES2PAD_END                                       JH1303
.JRH0313A ANOP                                                   JH1303
       STRING64 '  Dynamic PROCLIB at HJE7790 level coming  ',   JH1303X
               INTO=LINE                                         JH1303
         BRASL R14,SPACE1                                        JH1303
         J     JES2PAD_END                                       JH1303
*
JES2PAD_END  END_PROC
*
         TITLE 'SHOWMVS &REL - JES Job Information Service INFO' DA0805
***********************************************************************
*
* Get JES JOB Information Service information from all Job Entry
* Subsystems.
*
* >JES Job Information Services
*
*    JES Monitor Info for JES2
*
*      Task     Status       Alerts
*      MAINTASK ACTIVE
*      SAMPLER  ACTIVE
*      COMMANDS ACTIVE
*      PROBE    ACTIVE
*
*    JES Monitor Data for JES2
*
*      Resource  Limit  Inuse Warn%
*      BERT       4100    150    80
*      BSCB        100      2    80
*      BUFX         80      0    80
*      CKVR         17      0    80
*      CMBS        514      0    80
*      CMDS        500      0    80
*      ICES         14      0    80
*      JNUM      65534    145    80
*      JOES       3000    148    80
*      JQES       2000    145    80
*      LBUF        400      0    80
*      NHBS        204      0    80
*      SMFB        102      0    80
*      TBUF        106      0     0
*      TGS         625    360    75
*      TTAB          3      0    80
*      VTMB         20      0    80
*
*
*   JES2 Job Class information:
*
*     STC Jobclass=0 TSU Jobclass=T
*
*     Job Class=9       Default: TIME=(001439,00) REGION=0006M
*     Job Class=8       Default: TIME=(001439,00) REGION=0006M
*     Job Class=7       Default: TIME=(001439,00) REGION=0006M
*     Job Class=6       Default: TIME=(001439,00) REGION=0006M
*     Job Class=5       Default: TIME=(001439,00) REGION=0006M
*     Job Class=4       Default: TIME=(001439,00) REGION=0006M
*     Job Class=3       Default: TIME=(001439,00) REGION=0006M
*     Job Class=2       Default: TIME=(001439,00) REGION=0006M
*     Job Class=1       Default: TIME=(001439,00) REGION=0006M
*     Job Class=0       Default: TIME=(001439,00) REGION=0006M
*     Job Class=Z       Default: TIME=(000000,01) REGION=0006M
*     Job Class=Y       Default: TIME=(000000,01) REGION=0006M
*     Job Class=X       Default: TIME=(001439,00) REGION=0006M
*     Job Class=W       Default: TIME=(000000,01) REGION=0006M
*     Job Class=V       Default: TIME=(000000,01) REGION=0006M
*     Job Class=U       Default: TIME=(001440,00) REGION=0006M
*     Job Class=TSU     Default: TIME=(000120,00) REGION=0006M
*     Job Class=T       Default: TIME=(000120,00) REGION=0006M
*     Job Class=STC     Default: TIME=(001439,00) REGION=0000K
*     Job Class=S       Default: TIME=(000030,00) REGION=0006M
*     Job Class=R       Default: TIME=(000030,00) REGION=0006M
*
***********************************************************************
JES00    BEGIN_PROC KW=JES,AUTH=YES  JES Job Information Srcs    DA0805
         STRING64 '&TITLEPFX.JES Job Information Services',      DA0805X
               INTO=LINE                                         DA0805
         BRASL R14,SPACE2                                        DA0805
         BRASL R14,WORKADDR           Locate work area           DA0805
         LR    R11,R1                 Set work area to good reg  DA0805
         USING JJISWA,R11                                        DA0805
         MVC   JJISWA_ID,=CL8'JJISWA' Eyecatcher for dumps       DA0805
*                                                                DA0805
* Loop through subsystems looking for JESes.                     DA0805
*                                                                DA0805
         L     R3,CVTJESCT            -> JESCT                   DA0805
         L     R3,JESSSCT-JESCT(R3)   -> First SSCT              DA0805
         USING SSCT,R3                                           DA0805
*loop
JES10    DS    0H                                                DA0805
         CLI   SSCTSSID,SSCTJES2      JES2 subsystem?            RS0207
         JE    JES11                                             RS0207
         CLI   SSCTSSID,SSCTJES3      JES3 Subsystem?            RS0207
         JNE   JES12                                             RS0207
*                                                                DA0805
* We found a Job Entry SubSystem, retreive information from each DA0805
* Job Entry Subsystem                                            DA0805
*                                                                DA0805
JES11    DS    0H                                                DA0805
         BRASL R14,JES30              Get Monitor Information    DA0805
         BRASL R14,JES60              Get Job Class              DA0805
*                                                                DA0805
* Locate next subsystem until end of subsystem chain             DA0805
*                                                                DA0805
JES12    DS    0H                                                DA0805
         ICM   R3,B'1111',SSCTSCTA    Get next subsystem         DA0805
         JNZ   JES10                                             DA0805
*endloop
         J     JES99                                             DA0805
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  DA0805
* Initialize Common control blocks needed for each type          DA0805
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  DA0805
JES20    DS    0H                                                DA0805
         XC    JJISWA_SSOB(L'JJISWA_SSOB),JJISWA_SSOB            DA0805
         XC    JJISWA_SSIB(L'JJISWA_SSIB),JJISWA_SSIB            DA0805
         XC    JJISWA_SSJI(L'JJISWA_SSJI),JJISWA_SSJI            DA0805
*                                                                DA0805
JJIS_SSOB USING SSOB,JJISWA_SSOB                                 DA0805
         MVC   JJIS_SSOB.SSOBID,=C'SSOB' Insert SSOB eyecatcher  DA0805
         LA    R0,SSOBHSIZ                                       DA0805
         STH   R0,JJIS_SSOB.SSOBLEN   Set length of SSOB         DA0805
         LA    R0,SSOBSSJI            Function: JES info (71)    DA0805
         STH   R0,JJIS_SSOB.SSOBFUNC  Set function to do         DA0805
         LA    R1,JJISWA_SSIB         Locate SSIB                DA0805
         ST    R1,JJIS_SSOB.SSOBSSIB  Save it                    DA0805
         LA    R1,JJISWA_SSJI         Locate SSJI                DA0805
         ST    R1,JJIS_SSOB.SSOBINDV  Function dependent Area    DA0805
*                                                                DA0805
JJIS_SSIB USING SSIB,JJISWA_SSIB                                 DA0805
         MVC   JJIS_SSIB.SSIBID,=CL4'SSIB'                       DA0805
         LA    R0,SSIBSIZE                                       DA0805
         STH   R0,JJIS_SSIB.SSIBLEN                              DA0805
         MVC   JJIS_SSIB.SSIBSSNM,SSCTSNAM                       DA0805
*                                                                DA0805
JJIS_SSJI USING SSJIBGN,JJISWA_SSJI                              DA0805
         MVC   JJIS_SSJI.SSJIID,=C'SSJI'                         DA0805
         LA    R0,SSJISIZE                                       DA0805
         STH   R0,JJIS_SSJI.SSJILEN                              DA0805
         LA    R0,SSJISVR#                                       DA0805
         STH   R0,JJIS_SSJI.SSJISVRN                             DA0805
         BSM   0,R14                                             DA0805
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  DA0805
* Display Monitor Data from JES                                  DA0805
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  DA0805
JES30    DS    0H                                                DA0805
         AIF   (NOT D'CVTH7720).JES50     z/OS R7?               RS0905
         AIF   (T'&SYSSTATE_OSREL EQ 'O').JES50                  RS0806
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010107').JES50        RS0806
         ST    R14,JJISWA_SUB              Save return address   DA0805
         TM    HBB7720,L'HBB7720       running on z/OS R7        RS0905
         JZ    JES41                   no, jump and display      RS0905
*                                                                DA0805
* Format control blocks for MNOD call                            DA0805
*                                                                DA0805
         BRASL R14,JES20                   Init control blks     DA0805
         MVI   JJIS_SSJI.SSJIFREQ,SSJIMNOD OBTAIN MONITOR DATA   DA0805
         LA    R1,JJISWA_MOND                                    DA0805
         ST    R1,JJIS_SSJI.SSJIUSER                             DA0805
         XC    JJISWA_MOND(L'JJISWA_MOND),JJISWA_MOND            DA0805
JJIS_MOND USING MOND,JJISWA_MOND                                 DA0805
         MVC   JJIS_MOND.MONDSSID,=C'MOND'                       DA0805
         LA    R0,MONDSZE                                        DA0805
         STH   R0,JJIS_MOND.MONDLEN                              DA0805
         MVI   JJIS_MOND.MONDVERL,MONDCVRL MOND VERSION LEVEL    DA0805
*        AIF   (NOT D'CVTH7740).JJIS_M10  z/OS R9                RS1007
*        AIF   (T'&SYSSTATE_OSREL EQ 'O').JJIS_M10               RS1007
*        AIF   ('&SYSSTATE_OSREL'(1,6) LT '010109').JJIS_M10     RS1007
*        TM    HBB7740,L'HBB7740       running on z/OS R9        RS1007
*        JZ    JJIS_M10                no, jump and display      RS1007
         AIF   (D'CVTH7740).JJIS_M10  z/OS R9 Yes                RS1007
         AIF   (T'&SYSSTATE_OSREL EQ 'O').JJIS_M10               RS1007
         AIF   ('&SYSSTATE_OSREL'(1,6) GT '010108').JJIS_M10     RS1007
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS1007
         JNZ   JJIS_M10                no, jump and display      RS1007
         LA    R0,MONDSZE1             Version 1                 RS1007
         STH   R0,JJIS_MOND.MONDLEN                              RS1007
         MVI   JJIS_MOND.MONDVERL,X'01' Version 1                RS1007
.JJIS_M10 ANOP ,                                                 RS1007
JJIS_M10 DS    0H                                                RS1007
         MVI   JJIS_MOND.MONDVERM,MONDCVRM MOND VERSION MOD      DA0805
         MVI   JJIS_MOND.MONDSEL1,MONDSRES RESOURCE USAGE STATS  DA0805
         MVI   JJIS_MOND.MONDSEL2,MONDSMNS MONITOR STATUS        DA0805
         MVC   JJIS_MOND.MONDHSTC(2),=AL2(MONDHALL)              DA0805
         MVC   JJIS_MOND.MONDRSNM,BLANKS                         DA0805
*                                                                DA0805
* Issue SSI call to Obtain JES monitor Data                      DA0805
*                                                                DA0805
         LA    R1,WKCELL1         SSOB pointer                   DA0508
         LA    R14,JJISWA_SSOB                                   DA0508
         ST    R14,WKCELL1                                       DA0508
         OI    0(R1),X'80'        Turn on high order bit         DA0805
         IEFSSREQ ,               SSI call 71                    DA0805
*                                                                DA0805
         ICM   R0,B'1111',JJIS_SSOB.SSOBRETN                     DA0805
         JNZ   JES31                                             DA0805
         ICM   R0,B'1111',JJIS_SSJI.SSJIRETN                     DA0805
         JZ    JES32                                             DA0805
JES31    DS    0H                                                DA0805
         STRING64 '  JES Monitor ','SSI call to subsystem ',     DA0805X
               SSCTSNAM,' +',INTO=LINE                           DA0805
         BRASL R14,SPACE1                                        DA0805
         STRING64 'SSOBFUNC=SSJI',                               DA0805X
               ' SSOBRETN=',(JJIS_SSOB.SSOBRETN,F,L),            DA0805X
               ' SSJIFREQ=MNOD',                                 DA0805X
               ' SSJIRETN=',(JJIS_SSJI.SSJIRETN,F,L),            DA0805X
               INTO=LINE                                         DA0805
         BRASL R14,SPACE2              Double Space              DA0805
         J     JES41                                             DA0805
JES32    DS    0H                                                DA0805
*                                                                DA0805
* Report on the Monitor Status.  JES2 displays it like this:     DA0805
*                                                                DA0805
*  $HASP9100 D MONITOR                                           DA0805
*  NAME     STATUS       ALERTS                                  DA0805
*  -------- ------------ ------------------------                DA0805
*  MAINTASK ACTIVE                                               DA0805
*  SAMPLER  ACTIVE                                               DA0805
*  COMMANDS ACTIVE                                               DA0805
*  PROBE    ACTIVE                                               DA0805
JES33    DS    0H                                                DA0805
         ICM   R4,B'1111',JJIS_MOND.MONDMONI                     DA0805
         JZ    JES35                                             DA0805
         STRING64 '  JES Monitor Info for ',SSCTSNAM,INTO=LINE   DA0805
         BRASL R14,SPACE2              Double Space              DA0805
*                    tttttttt ssssssssssss                       DA0805
         STRING64 '    Task     Status       Alerts',INTO=LINE   DA0805
         BRASL R14,SPACE1                                        DA0805
         USING MDMIDATA,R4                                       DA0805
         LA    R5,MDMIBASL(R4)     Locate to first entry         DA0805
         USING MDMINTRY,R5                                       DA0805
         LH    R6,MDMICNT                                        DA0805
*loop
JES34    DS    0H
         STRING64 4X,MDMINAME,1X,MDMISTAT,1X,MDMIINFO,           DA0805X
               INTO=LINE                                         DA0805
         BRASL R14,SPACE1                                        DA0805
         AH    R5,MDMIENTL         Locate next subtask           DA0805
         JCT   R6,JES34                                          DA0805
*endloop
         BRASL R14,BLANK1                                        RS0406
JES35    DS    0H
         DROP  R4,R5                                             DA0805
*                                                                DA0805
* Report on the System resources returned to us                  DA0805
*                                                                DA0805
JES36    DS    0H
         ICM   R4,B'1111',JJIS_MOND.MONDRESQ                     DA0805
         JZ    JES38                                             DA0805
         STRING64 '  JES Monitor Data for ',SSCTSNAM,INTO=LINE   DA0805
         BRASL R14,SPACE2              Double Space              DA0805
*                    xxxxxxxx xxxxxx xxxxxx                      DA0805
         STRING64 '    Resource  Limit  Inuse Warn%',INTO=LINE   DA0805
         BRASL R14,SPACE1                                        DA0805
         USING MDRSDATA,R4                                       DA0805
*loop
JES37    DS    0H
         LA    R5,MDRSBASL(R4)     Locate to entry               DA0805
         USING MDRSNTRY,R5                                       DA0805
         STRING64 4X,MDRSNAME,                                   DA0805X
               1X,(MDRSLIMT,F,R6B),                              DA0805X
               1X,(MDRSINUS,F,R6B),                              DA0805X
               1X,(MDRSWARN,H,R5B),                              DA0805X
               INTO=LINE                                         DA0805
         BRASL R14,SPACE1                                        DA0805
         ICM   R4,B'1111',MDRSNEXT Locate next resource          DA0805
         JNZ   JES37                                             DA0805
*endloop
***                                                              DA0805
* I don't like the values that are being displayed for these     DA0805
* fields so we'll skip displaying bad information for now        DA0805
 AGO .JES37X                                                     DA0805
               ' IntAvg IntHigh IntLow',INTO=LINE                DA0805
*                xxxxxx xxxxxxx xxxxxx                           DA0805
               1X,(MDRSAVRG,F,R6B),                              DA0805
               1X,(MDRSHIGH,F,R6B),                              DA0805
               1X,(MDRSLOW,F,R6B),                               DA0805
.JES37X    ANOP ,                                                DA0805
***                                                              DA0805
JES38    DS    0H
         DROP  R4,R5                                             DA0805
*                                                                DA0805
* Issue SSI call to Release JES monitor Data                     DA0805
*                                                                DA0805
         MVI   JJIS_SSJI.SSJIFREQ,SSJIMNRS RELEASE MONITOR DATA  DA0805
         LA    R1,WKCELL1         SSOB pointer                   DA0508
         LA    R14,JJISWA_SSOB                                   DA0508
         ST    R14,WKCELL1                                       DA0508
         OI    0(R1),X'80'        Turn on high order bit         DA0805
         IEFSSREQ ,               SSI call 71                    DA0805
*                                                                DA0805
         ICM   R0,B'1111',JJIS_SSOB.SSOBRETN                     DA0805
         JNZ   JES39                                             DA0805
         ICM   R15,B'1111',JJIS_SSJI.SSJIRETN                    DA0805
         JZ    JES40                                             DA0805
JES39    DS    0H
         STRING64 '  JES Monitor ','SSI call to subsystem ',     DA0805X
               SSCTSNAM,' +',INTO=LINE                           DA0805
         BRASL R14,SPACE1                                        DA0805
         STRING64 'SSOBFUNC=SSJI',                               DA0805X
               ' SSOBRETN=',(JJIS_SSOB.SSOBRETN,F,L),            DA0805X
               ' SSJIFREQ=MNRS',                                 DA0805X
               ' SSJIRETN=',(JJIS_SSJI.SSJIRETN,F,L),            DA0805X
               INTO=LINE                                         DA0805
         BRASL R14,SPACE2              Double Space              DA0805
JES40    DS    0H
         BRASL R14,BLANK1         Print a blank line             DA0805
*                                                                DA0805
* End of Monitor Information processing                          DA0805
*                                                                DA0805
JES41    DS    0H
         L     R14,JJISWA_SUB     Get return address             DA0805
         DROP  JJIS_MOND                                         DA0805
.JES50   ANOP  ,                                                 DA0805
         BSM   0,R14                                             DA0805
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  DA0805
* Display JES2 job class information                             DA0805
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  DA0805
JES60    DS    0H
         ST    R14,JJISWA_SUB              Save return address   DA0805
         CLI   SSCTSSID,SSCTJES2  JES2 subsystem?                RS0207
         JNE   JES67              No, skip this                  RS0207
*                                                                DA0805
* Format control blocks for FJCO call                            DA0805
*                                                                DA0805
         BRASL R14,JES20                   Init control blks     DA0805
         MVI   JJIS_SSJI.SSJIFREQ,SSJIFJCO OBTAIN JOB CLASS      DA0805
         LA    R1,JJISWA_JBCLD                                   DA0805
         ST    R1,JJIS_SSJI.SSJIUSER                             DA0805
         XC    JJISWA_JBCLD(L'JJISWA_JBCLD),JJISWA_JBCLD         DA0805
JJIS_JBCLD USING JBCLD,JJISWA_JBCLD                              DA0805
         MVC   JJIS_JBCLD.JBCLSSID,=C'JBCL'                      DA0805
         LA    R0,JBCLSZE                                        DA0805
         STH   R0,JJIS_JBCLD.JBCLLEN                             DA0805
         LA    R0,JBCLSVR#                                       DA0805
         STH   R0,JJIS_JBCLD.JBCLSVRN                            DA0805
*                                                                DA0805
* Issue SSI call to Obtain JES2 job class information            DA0805
*                                                                DA0805
         LA    R1,WKCELL1         SSOB pointer                   DA0508
         LA    R14,JJISWA_SSOB                                   DA0508
         ST    R14,WKCELL1                                       DA0508
         OI    0(R1),X'80'        Turn on high order bit         DA0805
         IEFSSREQ ,               SSI call 71                    DA0805
*        #SNAP ADDR=(R11),LENGTH=512  Debug code
*                                                                DA0805
         ICM   R0,B'1111',JJIS_SSOB.SSOBRETN                     DA0805
         JNZ   JES61                                             DA0805
         ICM   R0,B'1111',JJIS_SSJI.SSJIRETN                     DA0805
         JZ    JES62                                             DA0805
JES61    DS    0H
         STRING64 '  JES2 Job Class ','SSI call to subsystem ',  DA0805X
               SSCTSNAM,' +',INTO=LINE                           DA0805
         BRASL R14,SPACE1                                        DA0805
         STRING64 'SSOBFUNC=SSJI',                               DA0805X
               ' SSOBRETN=',(JJIS_SSOB.SSOBRETN,F,L),            DA0805X
               ' SSJIFREQ=FJCO',                                 DA0805X
               ' SSJIRETN=',(JJIS_SSJI.SSJIRETN,F,L),            DA0805X
               INTO=LINE                                         DA0805
         BRASL R14,SPACE2              Double Space              DA0805
         J     JES67                                             DA0805
JES62    DS    0H
*                                                                DA0805
* Print general information                                      DA0805
*                                                                DA0805
         STRING64 '  JES2 Job Class information:',INTO=LINE      DA0805
         BRASL R14,SPACE2              Double Space              DA0805
         STRING64 4X,'STC Jobclass=',jjis_JBCLD.JBCLSMCL,        DA0805X
               ' TSU Jobclass=',jjis_JBCLD.JBCLTMCL,             DA0805X
               INTO=LINE                                         DA0805
         BRASL R14,SPACE2                                        DA0805
*                                                                DA0805
* Process all job classes returned                               DA0805
*                                                                DA0805
         ICM   R5,B'1111',JJIS_JBCLD.JBCLDPTR                    DA0805
         USING JBCLDHDR,R5                                       DA0805
         ICM   R6,B'1111',JJIS_JBCLD.JBCLNJC                     DA0805
         JZ    JES64                                             DA0805
*loop
JES63    DS    0H
         LR    R7,R5                                             DA0805
         AH    R7,JBCTOHDR                                       DA0805
         USING JBCTPREF,R7                                       DA0805
         LA    R4,JBCTHDSZ(R7)                                   DA0805
         USING JBCLDCAT,R4                                       DA0805
         STRING64 4X,'Job Class=',JBCCLASS,'Default:',           DA0805X
               ' TIME=(',JBCCMNTE,',',JBCCSECS,')',              DA0805X
               ' REGION=',JBCCRGN,JBCCRGA,                       DA0805X
               INTO=LINE                                         DA0805
         BRASL R14,SPACE1                                        DA0805
         ICM   R5,B'1111',JBCTNEXT                               DA0805
         JZ    JES64                                             DA0805
         JCT   R6,JES63                                          DA0805
*endloop
JES64    DS    0H
         DROP  R4,R5,R7                                          DA0805
*                                                                DA0805
* Issue SSI call to Release JES2 Job class data                  DA0805
*                                                                DA0805
         MVI   JJIS_SSJI.SSJIFREQ,SSJIFJCR RELEASE JOB CLASS     DA0805
         LA    R1,WKCELL1         SSOB pointer                   DA0508
         LA    R14,JJISWA_SSOB                                   DA0508
         ST    R14,WKCELL1                                       DA0508
         OI    0(R1),X'80'        Turn on high order bit         DA0805
         IEFSSREQ ,               SSI call 71                    DA0805
*                                                                DA0805
         ICM   R0,B'1111',JJIS_SSOB.SSOBRETN                     DA0805
         JNZ   JES65                                             DA0805
         ICM   R0,B'1111',JJIS_SSJI.SSJIRETN                     DA0805
         JZ    JES66                                             DA0805
JES65    DS    0H
         STRING64 '  JES Job Class ','SSI call to subsystem ',   DA0805X
               SSCTSNAM,' +',INTO=LINE                           DA0805
         BRASL R14,SPACE1                                        DA0805
         STRING64 'SSOBFUNC=SSJI',                               DA0805X
               ' SSOBRETN=',(JJIS_SSOB.SSOBRETN,F,L),            DA0805X
               ' SSJIFREQ=FJCR',                                 DA0805X
               ' SSJIRETN=',(JJIS_SSJI.SSJIRETN,F,L),            DA0805X
               INTO=LINE                                         DA0805
         BRASL R14,SPACE2              Double Space              DA0805
JES66    DS    0H
         BRASL R14,BLANK1         Print a blank line             DA0805
*                                                                DA0805
* End of Job Class processing                                    DA0805
*                                                                DA0805
JES67    DS    0H
         L     R14,JJISWA_SUB     Get return address             DA0805
.JES70   ANOP  ,                                                 DA0805
         BSM   0,R14                                             DA0805
         DROP  JJIS_JBCLD                                        DA0805
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  DA0805
* End of JES_Job_Information_Services processing                 DA0805
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  DA0805
         DROP  JJIS_SSOB                                         DA0805
         DROP  JJIS_SSIB                                         DA0805
         DROP  JJIS_SSJI                                         DA0805
         DROP  R11                    work                       DA0805
JES99    DS    0H                                                DA0805
         END_PROC ,                                              DA0805
         TITLE 'SHOWMVS &REL - Link-List'
*---------------------------------------------------------------------*
*                                                                     *
*Link-list:      45 Entries     LNKAUTH=LNKLST    73 extents open     *
*                                                                     *
*  SYS1.LINKLIB                                   SYSRES  930610  LNK *
*  SYS1.MIGLIB                                    SYSRES  930610  LNK *
*                                                                     *
*---------------------------------------------------------------------*
LNKLST00 BEGIN_PROC KW=LINKLIST                                  RS0302
         L     R3,CVTECVT              -> ECVT
         USING ECVT,R3
         L     R5,ECVTCSVT             CSVT                      RS1007
         USING CSVT,R5                                           RS1007
         ICM   R3,B'1111',ECVTDLCB     -> DLCB Current LNKLST set
         JZ    LNKLST99                NO
         DROP  R3                                                RS1007
         USING DLCB,R3
         L     R4,DLCBDCB@             SYS1.LINKLIB DCB
         ICM   R4,B'0111',DCBDEBA-IHADCB(R4) DEB ADDRESS
         USING DEBBASIC,R4
         LA    R1,=C'LNKLSTAPFTAB'     LNKLST/APFTAB             RS0402
         TM    DEBFLGS1,DEBAPFIN       AUTH=LNKLST?
         JO    *+8                     YES, JUMP
         LA    R1,6(,R1)               NO, AUTH=APFTAB
         L     R7,DLCBLLT@             Link List Table
         USING LLT,R7
         STRING64 '&TITLEPFX.Link-list:',INTO=LINE               RS1007
         BRASL R14,SPACE2              Double Space              RS1007
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS1007
         JZ    LNKLST05                  no, jump                RS1007
         LTR   R5,R5                   Check CSVT                RS1007
         JZ    LNKLST05                  leave if zero           RS1007
         STRING64 '  SETPROG ','NO','REFRPROT',INTO=LINE         RS1007
         TM    CSVTFLAG,CSVTRFRP                                 RS1007
         JZ    LNKLST02                                          RS1007
         STRING64 '  SETPROG ','REFRPROT',INTO=LINE              RS1007
LNKLST02 DS    0H                                                RS1007
         BRASL R14,SPACE2              Double Space              RS1007
         DROP  R5                                                RS1007
LNKLST05 DS    0H                                                RS1007
         STRING64 '  Set Name: ',                                RS1007X
               (DLCBLNKLSTSETNAME,,L),                                 X
               (LLTCOUNT,F,R7B),' Entries     LNKAUTH=',((R1),6),      X
               (DEBNMEXT,FL1,R6B),' extents open',INTO=LINE
         DROP  R3,R4
         J     LNKLST20
LNKLST20 DS    0H
         ST    R10,LINKXTNT            save line address for sub-task
         BRASL R14,SPACE2              Double Space
         STRING64 '  DS-Name',40X,'Volser',2X,'Create',4X,             X
               '(LNK/LPA/APF)',1X,'Extent',4X,                   RS1099X
               'Typ',2X,'StorClas',1X,'MgmtClas',1X,                   X
               'DataClas',INTO=LINE                                 +RS
         BRASL R14,SPACE1          <== next line                    +RS
         L     R3,LLTCOUNT             # OF ENTRIES
         LA    R4,LLTENTRY             LINK LIST TABLE ENTRY
         USING LLTENTRY,R4
         ST    R10,LNKTABLE            SAVE ADDR OF 1ST LINE
*LOOP
LNKLST41 MVC   LINE,BLANKS
         MVC   DSNAME,LLTDSN           MOVE DSNAME
         MVI   VOLSER,C'?'             $LOCATE REQUIRED
         MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVI   LINE_APF,C'?'           LNK/LPA/APF STATUS
         MVI   LINE_SMS_ATTR,C'?'       SMS-Attributes           RS1099
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         BRASL R14,SPACE1          <== next line
         LA    R4,LLTNEXT              NEXT ENTRY
         JCT   R3,LNKLST41
*ENDLOOP
         LA    R0,L'LINE               LONGUEUR D'UN POSTE
         LR    R1,R10                  A(NEXTLINE)
         SLR   R1,R0                   DERNIER POSTE DE LA TABLE
         STM   R0,R1,LNKTABLE+4        LONGUEUR, DERNIER POSTE
         BRASL R14,BLANK1              BLANK LINE
*---------------------------------------------------------------------*
*                                                                     *
*        Dynamic Link-list                                            *
*                                                                     *
*---------------------------------------------------------------------*
         BRASL R14,WORKADDR            get a temporary work area
         ST    R0,WKCELL1              Save length of work area
         LR    R2,R1
         USING DLAAHDR,R2
         CSVDYNL REQUEST=LIST,                                         X
               ANSAREA=DLAAHDR,                                        X
               ANSLEN=WKCELL1,                                         X
               USERINFO=YES,                                           X
               MF=(E,CSVDYNL)
         ICM   R15,15,DLAAH#REM        entries that were not returned?
         JNZ   LNKLST48                y¬s
         STRING64 '&TITLEPFX.LNKLST set information -',                X
               ' Number of sets defined: ',                            X
               (DLAAH#LS,F,L),INTO=LINE
         BRASL R14,SPACE2              Double Space
         ICM   R3,15,DLAAH#LS          Number of DLAALS entries
         JZ    LNKLST99                none
         L     R4,CVTASVT
         USING ASVT,R4
         L     R1,ASVTMAXI             maxuser
         SL    R1,ASVTAAV              available
         DROP  R4
         STH   R1,WKCELL1              save in use count
         L     R4,DLAAHFIRSTLSADDR     Address of first DLAALS
         USING DLAALS,R4
*loop
LNKLST43 DS    0H
         LA    R1,=C'No '
         TM    DLAALSFLAGS,DLAALSINUSEBYLLA monitored by LLA?
         JZ    *+8
         LA    R1,=C'Yes'
         LA    R5,=C'Defined '
         TM    DLAALSFLAGS,DLAALSCURRENT Current LNKLST?
         JZ    *+8
         LA    R5,=C'Current '
         TM    DLAALSFLAGS,DLAALSWASCURRENT Previous LNKLST?
         JZ    *+8
         LA    R5,=C'Previous'
         STRING64 '   LNKLST Set Name: ',(DLAALSNAME,,L),              X
               '  Seq#: ',(DLAALSLNKLSTSEQ#,F,L),                      X
               '  Monitored by LLA: ',((R1),3),                        X
               '  LNKLST status: ',((R5),8),                           X
               INTO=LINE
         BRASL R14,SPACE1              <== next line
         STRING64 5X,'In use by ',(DLAALS#U,H,L),' address spaces',    X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         CLC   DLAALS#U,WKCELL1        are all using this LNKLST set
         JE    LNKLST47                yes
         ICM   R5,15,DLAALSFIRSTUADDR  first DLAAU for this DLAALS
         JZ    LNKLST47                zero, at end
         STRING64 5X,'Jobname/Asids using this LNKLST set ',           X
               (DLAALSNAME,,L),INTO=LINE
         BRASL R14,SPACE1              <== next line
         USING DLAAU,R5
         LH    R6,DLAALS#U             number of DLAARU entries
*-loop
LNKLST44 DS    0H
         MVC   LINE,BLANKS             init the line
         LA    R1,(&LINESIZE-4)/16     max entries per line
*--loop
LNKLST45 DS    0H
         STRING64 (LINE,,L),4X,DLAAUJOBNAME,(DLAAUASID,H,R5B),         X
               INTO=LINE
         BCTR  R6,0                    number of DLAARU entries - 1
         LTR   R6,R6                   at end of DLAARUs
         JZ    LNKLST46                yes
         L     R5,DLAAUNEXTADDR        next DLAAU entry
         JCT   R1,LNKLST45             entries per line - 1
*--endloop
         BRASL R14,SPACE1              next line
         J     LNKLST44                repeat for next entry
*-endloop
LNKLST46 DS    0H
         BRASL R14,SPACE2              Double space
LNKLST47 DS    0H
         L     R4,DLAALSNEXTADDR       next DLAALS
         LTR   R4,R4                   another DLAALS
         JZ    LNKLST99                no
         JCT   R3,LNKLST43
*endloop
         J     LNKLST99
LNKLST48 DS    0H
         STRING64 ' LNKLST answer area is too small',INTO=LINE
         BRASL R14,SPACE1              next line
LNKLST99 DS    0H
.LNKLST99 ANOP
         END_PROC
         TITLE 'SHOWMVS &REL - LPA-List'
*---------------------------------------------------------------------*
*                                                                     *
*LPA list: 01D78000       10 Entries.                                 *
*                                                                     *
*  SYS1.LPALIB                                    ESA323  910610      *
*  ISF.V1R3M1.ISFLPA                              ESA323  910521  LPA *
*                                                                     *
*---------------------------------------------------------------------*
LPALST00 BEGIN_PROC KW=LPALIST                                   RS0302
         TM    CVTDCB,CVTMVSE          XA/ESA?
         JZ    LPALST99                NO, JUMP
         L     R1,CVTSMEXT             STORAGE MAP EXTENSION
         L     R7,CVTEPLPS-CVTVSTGX(,R1)  LPA TABLE
         USING LLT,R7
         STRING64 '&TITLEPFX.LPA list: ',((R7),,X),                    X
               (LLTCOUNT,F,R9B),' Entries.',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 2X,'DS-Name',40X,'Volser',2X,'Create',4X,            X
               '(LNK/LPA/APF)',11X,                              RS1199X
               'Typ',2X,'StorClas',1X,'MgmtClas',1X,                   X
               'DataClas',INTO=LINE                                 +RS
         BRASL R14,SPACE1              Single line                  +RS
         L     R3,LLTCOUNT             # OF ENTRIES
         LA    R4,LLTENTRY             FIRST LPA LIST TABLE ENTRY
         USING LLTENTRY,R4
         ST    R10,LPATABLE            SAVE ADDR OF 1ST LINE
*LOOP
LPALST42 MVC   LINE,BLANKS
         MVC   DSNAME,LLTDSN           MOVE DSNAME TO UNPROTECTED STRGE
         MVI   VOLSER,C'?'             $LOCATE REQUIRED
         MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVI   LINE_APF,C'?'           LNK/LPA/APF STATUS
         MVI   LINE_SMS_ATTR,C'?'      SMS Attributes            RS1199
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         BRASL R14,SPACE1          <== next line
         LA    R4,LLTNEXT              NEXT ENTRY
         JCT   R3,LPALST42
*ENDLOOP
         LA    R0,L'LINE               LONGUEUR D'UN POSTE
         LR    R1,R10                  A(NEXTLINE)
         SLR   R1,R0                   DERNIER POSTE DE LA TABLE
         STM   R0,R1,LPATABLE+4        LONGUEUR, DERNIER POSTE
         BRASL R14,BLANK1              BLANK LINE
LPALST99 END_PROC
         TITLE 'SHOWMVS &REL - APF-List'
*---------------------------------------------------------------------*
*                                                                     *
*APF List:  Format(Static)  Entries(129)                              *
*                                                                     *
*  CICS210.LOADLIB1                              CICS21          UNCAT*
*  DSN220.DSNEXIT                                DB2SYS  900924       *
*  SYS1.LINKLIB                                  ESA430  930610  LNK  *
*                                                                     *
*---------------------------------------------------------------------*
APFLIST  BEGIN_PROC KW=APFLIST              Getmain require      RS0302
*
         CSVAPF REQUEST=QUERYFORMAT,   get dynamic/static format       X
               FORMAT=WKCELL1          answer addr
         MVC   WKCELL2,=C'Dynamic '    APF list is static
         CLI   WKCELL1,CSVAPFFORMATDYNAMIC
         JE    APFL25                  no, jump
         MVC   WKCELL2,=C'Static  '    APF list is static
*
APFL25   BRASL R14,WORKADDR            get storage for answer area
         STM   R0,R1,TENWORDS          save length, address
         LR    R2,R1                   pass addr
         USING APFHDR,R2
         CSVAPF REQUEST=LIST,          list auth libraries             X
               ANSAREA=(R2),           answer addr                     X
               ANSLEN=TENWORDS+0,      answer length                   X
               MF=(E,CSVAPF1)
         MVI   TENWORDS,X'FF'          no GETMAIN yet
         LTR   R1,R15                  OK?
         JZ    APFL30                  yes, jump
         CH    R15,=Y(CSVAPFRC_WARN)   warning?
         JNE   APFL54                  no, quit
         N     R0,=A(CSVAPFRSNCODEMASK)  clean up reason code
         CH    R0,=Y(CSVAPFRSNNOTALLDATARETURNED)
         JNE   APFL54                  no, quit
*
*        Allocate a larger work area
*
         L     R0,APFHTLEN             get required length
         GETMAIN RU,LV=(0),LOC=ANY
         STM   R0,R1,TENWORDS          save length, address
         LR    R2,R1                   pass addr
         CSVAPF REQUEST=LIST,          list auth libraries             X
               ANSAREA=(R2),           answer addr                     X
               ANSLEN=TENWORDS+0,      answer length                   X
               MF=(E,CSVAPF1)
         LTR   R1,R15                  OK?
         JNZ   APFL54                  no, quit
*
*        Print header
*
APFL30   L     R3,APFH#REC             number of APFE entries
         STRING64 '&TITLEPFX.APF list:   Format(',(WKCELL2,,T),')',    X
               '     Entries(',((R3),,L0),')',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  DS-Name',40X,'Volser',2X,'Create',4X,             X
               '(LNK/LPA/APF)',2X,'Ref-Date',1X,                       X
               'Typ',2X,'StorClas',1X,'MgmtClas',1X,                   X
               'DataClas',INTO=LINE
         BRASL R14,SPACE1              Single line
         ST    R10,APFTABLE            SAVE ADDR OF 1ST LINE
         L     R7,APFHOFF              offset to first APFE
         LA    R7,APFHDR(R7)           change offset to addr
         USING APFE,R7
*loop
APFL33   MVC   LINE,BLANKS
         MVC   DSNAME,APFEDSNAME       MOVE DSNAME
         MVC   VOLSER,APFEVOLUME       MOVE VOLSER
         CLI   VOLSER,C'*'             *SMS* or *MCAT* ?
         JNE   APFL35                  no, jump
         MVI   VOLSER,C'?'             yes, request $LOCATE
APFL35   MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVI   CATUNCAT,C'?'           $LOCATE REQUIRED
         MVI   LINE_APF,C'?'           LNK/LPA/APF STATUS
         MVI   LINE_SMS_ATTR,C'?'      SMS Attributes            RS1199
         MVI   LINE_REFD,C'?'          DS1REFD (last-referenced date)
         MVC   LINE_APFVOL,APFEVOLUME  MOVE VOLSER
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         BRASL R14,SPACE1          <== next line
         AH    R7,APFELEN              next APFE
         JCT   R3,APFL33               next APFE
*endloop
APFL50   LA    R2,APFTABLE             APFTABLE DESCRIPTOR
         MVI   WKCELL1,C'D'            Sort DSNNAME
         BRASL R14,TRIZO               SORT APFTABLE
         BRASL R14,BLANK1              BLANK LINE
         J     APFL55                  exit
*
APFL54   EQU   *
         STRING64 '  Error from dynamic APF:   Retcode(',((R1),,L),')',X
               '  Rsncode(X''',((R0),,X),''')',                        X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
*
APFL55   CLI   TENWORDS,X'FF'          any GETMAIN done?
         JE    APFL99                  no, exit
         LM    R0,R1,TENWORDS          get length, address
         FREEMAIN RU,LV=(0),A=(1)      free work area
         DROP  R2,R7                   APFHDR,APFE
APFL99   END_PROC
         TITLE 'SHOWMVS &REL - Display Dynamic EXITs       '
*-----------------------------------------------------------------@522*
*                                                                     *
*Dynamic EXIT information                                             *
*                                                                     *
*  Exit name: SYS.IEFACTRT       AMODE:  31   Module entries:  1      *
*       Module name: ALVACTRT  Status: Active                         *
*                                                                     *
*---------------------------------------------------------------------*
DYNXIT   BEGIN_PROC KW=DYNEXIT,AUTH=YES                          RS0302
         STRING64 '&TITLEPFX.Dynamic EXIT information',INTO=LINE
         BRASL R14,SPACE2              BLANK LINE
         BRASL R14,WORKADDR            LOCATE WORK AREA
         ST    R0,ANSLEN               Save length of answer area
         ST    R1,ANSAREA              Save address of answer area
*
DYNXIT10 DS    0H
         L     R4,ANSAREA              Address of answer area
*        Issue the CSVDYNEX LIST request
         CSVDYNEX REQUEST=LIST,ANSAREA=(R4),ANSLEN=ANSLEN,             $
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,CSVDYNEXL)
         CLC   LRETCODE,=A(CSVDYNEXRC_OK) Success?
         JNE   DYNXIT33                No, error
*        Process information in answer area when RC=0
         USING EXAAHDR,R4              EXAAHDR DSECT
         L     R5,EXAAH#REC            Find how many EXAAE entries
         LTR   R5,R5                   Are there any entries
         JZ    DYNXIT99                No, quit
         L     R4,EXAAHFIRST@          Get first entry
         USING EXAAE,R4                EXAAE DSECT
*LOOP
DYNXIT15 DS    0H                      EXAAE loop
*        Process information contained in EXAAE
         LA    R1,=C'n/a'                                        RS1202
         CLI   EXAAEAMODE,EXAAEAMODE_31 AMODE 31?
         JNE   TAMODE24                No,
         LA    R1,=C' 31'                                        RS1202
         J     AMODEOK
TAMODE24 CLI   EXAAEAMODE,EXAAEAMODE_24 AMODE 24?
         JNE   TAMODEDF                No,
         LA    R1,=C' 31'                                        RS1202
         J     AMODEOK
TAMODEDF CLI   EXAAEAMODE,EXAAEAMODE_DEFINED AMODE defined
         JNE   AMODEOK                 No,
         LA    R1,=C'DEF'                                        RS1202
AMODEOK  DS    0H                                                JH1110
         CLC   EXAAENAME(11),=C'EDG_EXIT100' <debug>             JH1110
         JNE   AMODEOKN                ...jif not targe <debug>  JH1110
         #SNAP ADDR=(R4),LENGTH=39     debugcode                 JH1110
AMODEOKN DS    0H                                                JH1110
         TM    EXAAEFLAGS,EXAAEABENDCONSEC ABENDNUM in effect ?  JH1110
         JNO   DYNXIT15A           ...jif not                    JH1110
         STRING64 '  Exit name: ',EXAAENAME,'  AMODE: ',         JH1110X
               ((R1),3),'  Module entries: ',(EXAAE#ENT,FL2),    JH1110X
               '  ABENDNUM: ',(EXAAEABENDNUM,F),                 JH1110X
               INTO=LINE                                         JH1110
         J     DYNXIT15B           ...jump to write line         JH1110
DYNXIT15A DS   0H                                                JH1110
         STRING64 '  Exit name: ',EXAAENAME,'  AMODE: ',         JH1110X
               ((R1),3),'  Module entries: ',(EXAAE#ENT,FL2),    JH1110X
               '  ABENDNUM:     n/a',                            JH1110X
               INTO=LINE                                         JH1110
         AGO   .JRHDX01                                          JH1110
AMODEOK  STRING64 '  Exit name: ',EXAAENAME,'  AMODE: ',((R1),3),      X
               '  Module entries: ',(EXAAE#ENT,FL2),INTO=LINE
.JRHDX01 ANOP                                                    JH1110
DYNXIT15B DS   0H                                                JH1110
         BRASL R14,SPACE1              Next Line
         LH    R7,EXAAE#ENT            Get number of EXAAM entries
         LTR   R7,R7                   Are there any routines ?
         JZ    DYNXIT17                No, move to end of EXAAE loop
         L     R6,EXAAEFIRSTENT@       Get first EXAAM
*--LOOP
DYNXIT16 DS    0H                      EXAAM loop
         USING EXAAM,R6                EXAAM DSECT
*        Process information contained in EXAAM
         LA    R1,=C'Active  '                                   JM1202
         TM    EXAAMFLAGS,EXAAMACTIVE  Is it really active?
         JO    STATOK                  Yes
         LA    R1,=C'Inactive'                                   JM1202
STATOK   STRING64 '       Module name: ',EXAAMNAME,'  Status: ',       $
               ((R1),8),INTO=LINE                                JM1202
         BRASL R14,SPACE1              Next Line
         L     R6,EXAAMNEXT@           Get next EXAAM
         DROP  R6                      EXAAM DSECT
         JCT   R7,DYNXIT16             Continue while there are more
*--ENDLOOP
DYNXIT17 DS    0H                      Bottom of EXAAE loop
         L     R4,EXAAENEXT@           Get next EXAAE
         JCT   R5,DYNXIT15             Continue while there are more
*ENDLOOP
         BRASL R14,BLANK1              BLANK LINE
         J     DYNXIT99                Skip error case
DYNXIT33 DS    0H                      Error return
         STRING64 'DYNXIT: CSVDYNEX macro failed Retcode=',            X
               (LRETCODE,,X),' Reason=',(LRSNCODE,,X),                 X
               INTO=LINE
         BRASL R14,SPACE2              Double space
.DYNXIT9 ANOP
DYNXIT99 END_PROC
*
         TITLE 'SHOWMVS &REL - System static symbols       '
*-----------------------------------------------------------------@522*
*                                                                     *
*System static symbols:                                               *
*                                                                     *
*  &SYSCLONE. = A0                                                    *
*  &SYSNAME.  = ALA0                                                  *
*  &SYSPLEX.  = DEALEI00                                              *
*                                                                     *
*---------------------------------------------------------------------*
SYMBOLS  BEGIN_PROC KW=SYMBOLS                                   RS0302
         STRING64 '&TITLEPFX.System static symbols:',INTO=LINE
         BRASL R14,SPACE2              BLANK LINE
         L     R3,CVTECVT              Load addr of ECVT
         USING ECVT,R3                  and establish addressability
         L     R3,ECVTSYMT         Load addr of the system symbol table
         USING SYMBT,R3                 and establish addressability
*--------------system-static-symbol-table-----------------------------*
* +0  ¦xxxx0003¦                     - number of symbols              *
*---------------------------------------------------------------------*
* +4  ¦00000030¦0000000A¦ &SYSCLONE. - offset/len of 1st symbol name  *
*---------------------------------------------------------------------*
* +C  ¦00000058¦00000002¦ A0         - offset/len of 1st symbol value *
*---------------------------------------------------------------------*
* +14 ¦0000003A¦00000009¦ &SYSNAME.  - offset/len of 2nd symbol name  *
*---------------------------------------------------------------------*
* +1C ¦0000004C¦00000004¦ ALA0       - offset/len of 2nd symbol value *
*---------------------------------------------------------------------*
* +24 ¦00000043¦00000009¦ &SYSPLEX.  - offset/len of 3rd symbol name  *
*---------------------------------------------------------------------*
* +2C ¦00000050¦00000008¦ DEALEI00   - offset/len of 3rd symbol value *
*---------------------------------------------------------------------*
* ==> offsets to symbols from start of symbol area <==                *
*---------------------------------------------------------------------*
         LH    R0,SYMBTNUMBEROFSYMBOLS Load number of symbols
         LTR   R0,R0                   Are there any symbols?
         JZ    SYMBOL90                No, ...
         LA    R1,SYMBTTABLEENTRIES    Load addr of symbol table entry
         USING SYMBTE,R1                and establish addressability
*Loop
SYMBOL10 DS    0H
         LM    R4,R7,SYMBTETABLEENTRIES offset,length,offset,length
         LA    R4,SYMBTTABLEENTRIES(R4) change offset to address
         LA    R6,SYMBTTABLEENTRIES(R6) change offset to address
         STRING64 2X,((R4),(R5)),' = ',((R6),(R7)),INTO=LINE
         BRASL R14,SPACE1          <== next line
         LA    R1,SYMBTE+SYMBTE_LEN    bump pointer
         JCT   R0,SYMBOL10
*ENDLOOP
         J     SYMBOL98
SYMBOL90 DS    0H
         STRING64 '  No symbols found',INTO=LINE
SYMBOL98 DS    0H
         BRASL R14,BLANK1          <== blank line
.SYM99   ANOP
SYMBOL99 END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*LLA Parameters                                                       *
*                                                                     *
*  Job name: LLA       Member: CSVLLA00    CSVLLIX1 called: NO        *
*                                                                     *
*  SYS1.CMDLIB                               SYSRES  Linklist  Freeze *
*                                                                     *
*---------------------------------------------------------------------*
LLALIST  BEGIN_PROC KW=LLALIST                                   RS0302
         ICM   R4,B'1111',CVTLLCB      LLA Control Block
         JZ    LLAL999                 not active, exit
         USING LLCB,R4
         STRING64 '&TITLEPFX.LLA Parameters',INTO=LINE
         BRASL R14,SPACE2              double space
         LA    R1,=C'n/a'              for z/OS R12 n/a
         AIF   (D'CVTZOS_V1R12).LLAL005                          RS1209
         TM    HBB7770,L'HBB7770       running on z/OS R12       RS1209
         JNZ   LLAL005                  yes, leave               RS1209
         LA    R1,=C'No '
         TM    LLCBFLGS,LLCBX1OK       exit 1 called?
         JNO   *+8                     no, jump
         LA    R1,=C'Yes'
.LLAL005 ANOP                                                    RS1209
LLAL005  DS    0H                                                RS1209
         MVC   WKCELL2,BLANKS                                    RS1199
         MVC   WKCELL2(3),=C'n/a'                                RS1199
         CLI   LLCBPARM,0              Low-value?                RS1199
         JE    *+4+6+6                  no CSVLLA-mem present
         MVC   WKCELL2(6),=C'CSVLLA'                             RS1199
         MVC   WKCELL2+6(2),LLCBPARM   CSVLLA-suffix             RS1199
         STRING64 '  Job name: ',LLCBNAME,                             X
               '  Member: ',(WKCELL2,8,T),6X,                    RS1199X
               '  CSVLLIX1 called: ',((R1),3),                         X
               INTO=LINE
         BRASL R14,SPACE1              single space
*
*        retrieve LLDR and LLDS from SP 239 which is fetch-protected
*
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         JNO   LLAL995                 no, exit
         L     R5,LLCBLLDR             get LLDR address
         USING LLDR,R5
         MODESET EXTKEY=ZERO           switch to KEY=ZERO
         CLC   =C'LLDR',LLDR           am I lost?
         JNE   LLAL990                 yes, exit
         L     R6,LLDRLLDS             get LLDS address
         USING LLDS,R6                 IHALLDS
         CLC   =C'LLDS',LLDS           am I lost?
         JNE   LLAL990                 yes, exit
         L     R7,LLDSNUM              number of LLDS entries
         LA    R1,=C'No '
         TM    LLDSFLG1+1,X'80'        LNKLST a single entitiy ?
         JNO   *+8                     no, jump
         LA    R1,=C'Yes'
         MODESET KEYADDR=PROTKEY,WORKREG=2
         STRING64 '  LNKLST treated as a single entity: ',((R1),3),    X
               INTO=LINE
         BRASL R14,SPACE1              single space
LLAL032  EQU   *
         BRASL R14,BLANK1              blank line
         DROP  R5                      LLDR
LLAL034  EQU   *
*
*        Retrieve data set information from LLA address space
*
         LTR   R7,R7                   number of LLDS entries
         JNP   LLAL990                 zero, exit
         L     R2,LLCBASCB             Load addr. of LLA's ASCB
         USING ASCB,R2
         L     R2,ASCBASSB             get LLA's ASSB address
         USING ASSB,R2
         ALESERV ADD,                                                  X
               STOKEN=ASSBSTKN,        LLA address space               X
               ALET=ALET1,             return ALET                     X
               CHKEAX=NO,                                              X
               MF=(E,ALESERV2)
*loop
LLAL040  DS    0H
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS0308
         JZ    LLAL042                   no, jump                RS0308
         USING LLD9,R6                 IHALLDS                   RS0308
         BRASL R14,EXECKEY0            execute next instr in key=0S0308
         ICM   R3,B'1111',LLD9LLLS     addr of LLLS for R9       RS0308
         JZ    LLAL069                 zero, ignore              RS0308
         J     LLAL044                                           RS0308
LLAL042  DS    0H
         USING LLDS,R6                 IHALLDS
         BRASL R14,EXECKEY0            execute next instr in key=0
         ICM   R3,B'1111',LLDSLLLS     addr of LLLS
         JZ    LLAL069                 zero, ignore
LLAL044  DS    0H
         LAM   R3,R3,ALET1            POINT TO LLA ADDRESS SPACE JH0111
         LAM   R10,R10,=F'0'           Set AR10 to Primary       JH0111
         LAM   R13,R13,=F'0'           Set AR13 to Primary       JH0111
         SAC   512                     AR mode on
         USING LLLS,R3
         MVC   LINE,BLANKS             blank out current line
         MVC   DSNAME,LLLSDSN          move data set name
         MVC   VOLSER,LLLSVOL          move volume serial
         MVC   WKCELL1,LLLSTOD         TOD clock
         DROP  R3                      LLLS
         SAC   0                       AR mode off
         LAM   R3,R3,=F'0'             Set AR3 to zero           RS0506
         SLR   R0,R0                   key=0
         LA    R1,LLDSFLG4+1-LLDSFLG1  length
         TM    HBB7740,L'HBB7740       running on z/OS R9        RS0308
         JZ    LLAL060                   no, jump                RS0308
         USING LLD9,R6                 IHALLDS                   RS0308
         LA    R1,LLD9FLG4+1-LLD9FLG1  length                    RS0308
LLAL050  DS    0H                                                RS0308
         MVCK  WORK256(R1),LLD9FLG1,R0 flags                     RS0308
         LA    R2,WORK256              copy of the flags         RS0308
         USING LLD9FLG1,R2                                       RS0308
         MVC   DEVTYPE,=C'Linklist'    linklist/private          RS0308
         TM    LLD9FLG3,LLD9LNK        linklist?                 RS0308
         JO    *+10                    yes, jump                 RS0308
         MVC   DEVTYPE,=C'Private '    linklist/private          RS0308
         MVC   CATUNCAT(8),=C'Nofreeze' Freeze/nofreeze          RS0308
         TM    LLD9FLG4,LLD9FREZ       freeze?                   RS0308
         JZ    *+10                    no, jump                  RS0308
         MVC   CATUNCAT(8),=C'Freeze  ' Freeze/nofreeze          RS0308
         STRING64 (LLD9FLG1,,X),1X,(LLD9FLG2,,X),1X,(LLD9FLG3,,X),1X,  X
               (LLD9FLG4,,X),INTO=(CATUNCAT+10,11)               RS0308
         BRASL R14,SPACE1              bump line pointer         RS0308
         J     LLAL069                 next enty                 RS0308
         DROP  R2                      Copy of LLDSFLG1 in WORK256S0308
LLAL060  DS    0H                                                RS0308
         USING LLDS,R6                 IHALLDS
         MVCK  WORK256(R1),LLDSFLG1,R0 flags
         LA    R2,WORK256              copy of the flags
         USING LLDSFLG1,R2
         MVC   DEVTYPE,=C'Linklist'    linklist/private
         TM    LLDSFLG3,LLDSLNK        linklist?
         JO    *+10                    yes, jump
         MVC   DEVTYPE,=C'Private '    linklist/private
         MVC   CATUNCAT(8),=C'Nofreeze' Freeze/nofreeze
         TM    LLDSFLG4,LLDSFREZ       freeze?
         JZ    *+10                    no, jump
         MVC   CATUNCAT(8),=C'Freeze  ' Freeze/nofreeze
         STRING64 (LLDSFLG1,,X),1X,(LLDSFLG2,,X),1X,(LLDSFLG3,,X),1X,  X
               (LLDSFLG4,,X),INTO=(CATUNCAT+10,11)
         BRASL R14,SPACE1              bump line pointer
         DROP  R2                      Copy of LLDSFLG1 in WORK256
LLAL069  LA    R6,LLDSELEN(R6)         length of an LLDS entry
         JCT   R7,LLAL040              next LLDS entry
*endloop
         ALESERV DELETE,ALET=ALET1,MF=(E,ALESERV2)
         XC    ALET1,ALET1             zero ALET for RCVY rtne
.LLAL039 ANOP
LLAL990  MODESET KEYADDR=PROTKEY,WORKREG=2
LLAL995  BRASL R14,BLANK1              blank line
.LLAL999 ANOP
LLAL999  END_PROC
         TITLE 'SHOWMVS &REL - ATTACH The sub-task'
*---------------------------------------------------------------------*
*                                                                     *
*        ATTACH THE LOCATE/OBTAIN SUB-TASK                            *
*                                                                     *
*---------------------------------------------------------------------*
ATTACH   BEGIN_PROC                    STATUS require            RS0302
         BRAS  R6,ATTACH01
         DC    A(ATTACH01)
ATTACH01 DS    0H
         L     R6,0(R6,0)
         USING ATTACH01,R6
         TM    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         JZ    ATTACH99                no, exit
         TM    SUB_TASK_ATTACHED,L'SUB_TASK_ATTACHED
         JO    ATTACH99                already attached
         TM    AUTHORIZED,L'AUTHORIZED authorized?
         JO    ATTACH4                 yes, jump
         LA    R1,DYNAM                PARM for sub task
         LNR   R1,R1                   make it negative
         LARL  R2,ETXR00
         ATTACHX EPLOC=OWN_NAME,       my own name                     +
               ETXR=(2),               end of task exit routine        +
               SF=(E,ATTACHL)                                    RS1002
         ST    R1,SUB_ECB1+4           save TCB addr for DETACH
         J     ATTACH90
*
*        Attach sub-task with MODE=SUP if I'm authorized
*
ATTACH4  MODESET EXTKEY=ZERO           KEY=ZERO,MODE=SUP for SM=SUPV
         L     R9,PSATOLD-PSA(,0)      own TCB
         MVZ   TCBPKF,PROTKEY          KEY=4 is AUTH=ESR to ensure     +
                                       ETXR can POST ECB1.
         LA    R1,DYNAM                PARM for sub task
         LNR   R1,R1                   make it negative
         LARL  R2,ETXR00
         ATTACHX EPLOC=OWN_NAME,        my own name                    X
               ETXR=(2),               end of task exit routine        X
               SM=SUPV,                MODE=SUP                        X
               DISP=NO,                do not dispatch                 X
               SF=(E,ATTACHL)                                    RS1002
         ST    R1,SUB_ECB1+4           save TCB addr for DETACH
         MVZ   TCBPKF,OLDPKF           reset key in OWN TCB
         LR    R9,R1                   pass TCB addr
         MVZ   TCBPKF,OLDPKF           KEY=8 in SUB-TASK TCB
         LA    R1,DYNAM                PARM for sub task
         ST    R1,TCBUSER              store into TCBUSER
         STATUS RESET,ND,(R9),(12),E   make task dispatchable
         MODESET KEYADDR=PROTKEY,WORKREG=2
         J     ATTACH90
*
*        End of task exit routine;
*        Invoked via an IRB under the main task's TCB.
*
         PUSH  USING
         DROP
ETXR00   LR    R2,R15                  local base reg
         USING TCB,R1
         USING ETXR00,R2
         ICM   R3,B'1111',TCBUSER      authorized?
         JNZ   ETXR20                  yes, jump
         L     R3,TCBFSA               point to subtask's FSA
         L     R3,0(,R3)               A(DYNAM)
ETXR20   EQU   *
         USING DYNAM,R3
         DETACH SUB_ECB1+4             detach sub-task
         POST  SUB_ECB1,0              post main task
         BR    R14                     exit
         POP   USING
*
ATTACH90 OI    SUB_TASK_ATTACHED,L'SUB_TASK_ATTACHED
ATTACH99 END_PROC
         TITLE 'SHOWMVS &REL - Active LPA Queue (MLPA/FLPA)'
*---------------------------------------------------------------------*
*                                                                     *
*Active LPA Queue:                                                    *
*                                                                     *
* Name     EntPt    AM Attrb SPN At At2 At3 Use  Length Load-Pnt PLPA *
*                                                                     *
* IGDERRC2 86C87618 31  50       B5  03  04      IGDOPST1             *
* IGDDCFSR 86D0AB58 31  50     0 B1  23  04 0001 1BFCD8 06B9A000      *
*                                                                     *
*---------------------------------------------------------------------*
LPAQ     BEGIN_PROC KW=LPAQ                                      RS0302
         ICM   R5,B'1111',ALPACDE1     First CDE on ALPAQ or DLPAQ
         JZ    LPAQ99                  Queue is empty, quit
         USING CDENTRY,R5
         STRING64 '&TITLEPFX.Active LPA Queue:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '   Name     EntPt    AM Attrb SPN At At2 At3 Use ', X
               ' Length Load-Pnt',                                     X
               ' PLPA CDE    XTLST',                                   X
               INTO=LINE                                         RS0302
         BRASL R14,SPACE2              Double Space
*LOOP
LPAQ21   ST    R5,WKCELL1              CDE addr
         CLI   CDATTR,0                last CDE on DLPAQ?
         JE    LPAQ29                  yes, ignore it
         L     R6,CDXLMJP              POINT TO XL (OR MAJOR CDE)
         TM    CDATTR,CDMIN            CHECK ATTRIBUTES
         JO    LPAQ25                  JUMP IF THIS IS A MINOR CDE
         TM    CDATTR2,CDXLE           Do we have an extent list?
         JO    LPAQ23                  yes, jump
         LA    R6,NEXTLINE             no, point to dummy
         XC    NEXTLINE,NEXTLINE       all zeroes
         USING XTLST,R6
*
*        search the PLPA directory to detect those MLPA
*        modules that make PLPA modules unaccessible.
*
LPAQ23   STRING64 ' PLPA',INTO=WKCELL3 prime work area
         STM   R14,R12,12(R13)         save registers
         LM    R0,R1,CDNAME            EP NAME
         LA    R3,CVTMAP               required by LPDSR
         L     R15,CVTLPDSR            LPA SEARCH ROUTINE
         BALR  R14,R15                 USES R6-R9
         J     LPAQ23X             +0  Found, jump
         MVC   WKCELL3,BLANKS      +4  Not found, reset PLPA indicator
LPAQ23X  LM    R14,R12,12(R13)         restore registers
*
LPAQ24   DS    0H                                                RS0302
         STRING64 3X,CDNAME,1X,(CDENTPT,,X),INTO=LINE            RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
         MVC   0(2,R4),=C'24'          default AMODE 24          RS0302
        #STATUS CDENTPT,CDEMODE,'31'   Amode 31 ?                RS0302
        #STATUS CDENTPT3,CDEMOD64,'64' Amode 64 ?                RS0302
         STRING64 (LINE,,T),2X,(CDATTRB,,X),                           X
               3X,(CDSP,FL1,R3B),1X,(CDATTR,,X),2X,(CDATTR2,,X),       x
               2X,(CDATTR3,1,X),1X,(CDUSE,,X),                         x
               1X,(XTLMSBLN,,X),1X,(XTLMSBAD,,X),                      X
               (WKCELL3,6),(WKCELL1+1,3,X),1X,(CDXLMJP+1,3,X),         X
               INTO=LINE                                         RS0302
         J     LPAQ28
LPAQ25   DS    0H                                                RS0302
         STRING64 3X,CDNAME,1X,(CDENTPT,,X),INTO=LINE            RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
         MVC   0(2,R4),=C'24'          default AMODE 24          RS0302
        #STATUS CDENTPT,CDEMODE,'31'   Amode 31 ?                RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
        #STATUS CDENTPT3,CDEMOD64,'64' Amode 64 ?                RS0302
         STRING64 (LINE,,T),2X,(CDATTRB,,X),                           X
               7X,(CDATTR,,X),2X,(CDATTR2,,X),2X,(CDATTR3,1,X),        X
               6X,CDNAME-CDENTRY(R6),13X,(WKCELL1+1,3,X),    CDE addr  X
               INTO=LINE
*
LPAQ28   BRASL R14,SPACE1          <== next line
LPAQ29   ICM   R5,B'1111',CDCHAIN      NEXT CDE ADDR
         JNZ   LPAQ21                  NO FINISHED YET, LOOP FURTHER
*ENDLOOP
LPAQ99   BRASL R14,BLANK1              BLANK LINE
         END_PROC
         TITLE 'SHOWMVS &REL - SVC table'
*---------------------------------------------------------------------*
*                                                                     *
*SVC Table:                                                           *
*                                                                     *
*  No.  EntryP   L EP-Name   Description   Type/Locks  AR UpdCnt Previ*
*                                                                     *
*    0  00FF7A50 N IECVEXCP  EXCP          T1-8000      N      0 00000*
*    1  80FDFFDA N IEAVEWAT  WAIT          T1-8000      N      0 00000*
*    2  80FEFF80 N IEAVEPST  POST          T1-8000      N      0 00000*
*    3  810E5ED8 N IGC003    EXIT          T1-8000      Y      0 00000*
*    4  814CCF5A N IGVVSM24  GETMAIN       T1-8000      N      0 00000*
*    5  814CCF5A N IGVVSM24  FREEMAIN      T1-8000      N      0 00000*
*    6  81268428 N CSVLINK   LINK          T2-8000      N      0 00000*
*    7  8126E798 N CSVXCTL   XCTL          T2-8000      N      0 00000*
*    8  81268648 N CSVLOAD   LOAD          T2-8000      N      0 00000*
*    9  81268140 N CSVDELET  DELETE        T2-8000      N      0 00000*
*   10  814CDEEE N IGVVSM24  GETMAIN/FREE  T1-8000      N      0 00000*
*   11  85746C70 P IGC0001A  TIME          T3           N      1 00033*
*---------------------------------------------------------------------*
SVCTABLE BEGIN_PROC KW=SVCTABLE                                  RS0302
         STRING64 '&TITLEPFX.SVC Table:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R5,CVTABEND             SECONDARY CVT
         USING SCVTSECT,R5
         NUCLKUP BYNAME,NAME='IGCERROR',ADDR=(0)
         ST    R0,IGCERROR             save addr of IGCERROR
         LA    R3,256                  number of lines           RS1299
         SLR   R4,R4                   SVC no
         STRING64 '  No.  EntryP   L EP-Name   Description   Type/Loc',X
               'ks AR UpdCnt Previous EP',INTO=LINE
         BRASL R14,SPACE2              Double Space              RS1299
         L     R6,SCVTSVCR             START OF SVC Update Table RS1299
         USING SVCURT,R6                                         RS1299
SVCTAB1  DS    0H                                                RS0500
.SVCTAB1  ANOP
         L     R5,SCVTSVCT             START OF SVC TABLE
         USING SVCENTRY,R5
*LOOP
SVCTAB3  L     R1,SVCEP                SVC EP ADDR
         BRASL R14,CSVQUERY            GET EP NAME
         BRASL R7,SVCTYPE              DECODE TYPE
         LR    R0,R4                   SVC no
         BRASL R14,SCANTBL             find SVC name
         STRING64 (2(R1),(R2)),INTO=(WORK256+20,12)
         STRING64 ((R4),,R5B),         122                             X
               2X,(SVCEP,,X),          82345678                        X
               1X,EP10,                A IGC0012B                      X
               2X,(WORK256+20,12),     SVC122                          X
               2X,(WORK256,12),        T3-0000                         X
               1X,(WORK256+40,1),4X,   AR-Mode                   RS1299X
               (SVCURCNT,H,R3B),       000 Svc-Update-Count      RS1299X
               1X,(SVCUROLD,4,X),      82345678 prev entry       RS1299X
               INTO=LINE
         BRASL R14,SPACE1          <== next line
         LA    R4,1(,R4)               bump SVC no
         LA    R5,8(,R5)               NEXT SVC (EVEN)
         LA    R6,24(,R6)              NEXT SVCUR                RS1299
         JCT   R3,SVCTAB3
*ENDLOOP
         BRASL R14,BLANK1              BLANK LINE
         STRING64 '   LOCKS: 80-LOCAL 40-CMS 20-OPT 10-SALLOC 08-DISP',X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
*
*        TYPE-X ESR ENTRIES
*
SVCESR1  BRASL R3,SVCESR2              BRANCH AROUND TABLE
         DC    AL2(116),C'1'           T1-ESR
         DC    AL2(122),C'2'           T2-ESR
         DC    AL2(109),C'3'           T3-ESR
         DC    AL2(137),C'6'           T6-ESR
*LOOP
SVCESR2  L     R1,CVTABEND             SECONDARY CVT
         L     R5,SCVTSVCT-SCVTSECT(,R1)  START OF SVC TABLE
         LH    R1,0(,R3)               GET SVC NUMBER
         SLL   R1,3                    MULT BY 8
         L     R5,0(R1,R5)             ADDR OF T3-ESR TABLE
         L     R0,SVCESRMX             GET MAX NUMBER OF ENTRIES
         ST    R0,WKCELL1              KEEP IT
         STRING64 '&TITLEPFX.Type-',(2(R3),1),                         X
               ' ESR  (SVC ',(0(R3),H,R3Z),                            X
               ' - Maximum ',(SVCESRMX,F,L),' Entries)',INTO=LINE
         BRASL R14,SPACE2              Double Space
         SLR   R4,R4                   SVC no
         LA    R5,8(,R5)               SKIP HEADER
*--LOOP
SVCESR3  LR    R1,R5                   CURRENT ENTRY
         AHI   R1,-16
         CLC   0(16,R1),0(R5)          SAME UNUSED ENTRIES?
         JE    SVCESR3P                YES, SKIP THEM
         L     R1,SVCEP                SVC EP ADDR
         BRASL R14,CSVQUERY            GET EP NAME
         BRASL R7,SVCTYPE              DECODE TYPE
         STRING64 ((R4),,R5B),2X,(SVCEP,,X),1X,EP10,2X,(WORK256,12),   X
               INTO=LINE
         LA    R4,1(,R4)               bump SVC no
         LA    R5,8(,R5)               NEXT SVC (ODD NUMBER)
         CL    R4,WKCELL1              LAST NUMBER REACHED?
         JH    SVCESR3N                YES, EXIT LOOP
         L     R1,SVCEP                SVC EP ADDR
         BRASL R14,CSVQUERY            GET EP NAME
         BRASL R7,SVCTYPE              DECODE TYPE
         STRING64 ((R4),,R5B),2X,(SVCEP,,X),1X,EP10,2X,(WORK256,12),   X
               INTO=(LINE+40,NEXTLINE)
SVCESR3N BRASL R14,SPACE1          <== next line
         J     SVCESR3Q
SVCESR3P LA    R4,1(,R4)               bump SVC no
         LA    R5,8(,R5)               NEXT SVC (EVEN)
SVCESR3Q LA    R4,1(,R4)               bump SVC no
         LA    R5,8(,R5)               NEXT SVC (EVEN)
         CL    R4,WKCELL1              LAST NUMBER REACHED?
         JNH   SVCESR3                 NO, KEEP LOOPING
*--ENDLOOP
         BRASL R14,BLANK1              BLANK LINE
         LA    R3,3(,R3)               NEXT ESR-TYPE TABLE ENTRY
         CLI   0(R3),0                 END OF TABLE?
         JE    SVCESR2                 NOT YET, DO IT AGAIN
*ENDLOOP
         J     SVCT99
*
*        Sub-routine: decode SVC type flags
*
SVCTYPE  MVC   WORK256(12),BLANKS      FORMAT OUTPUT FIELD
         MVC   WORK256(2),=C'T3'       FORMAT OUTPUT FIELD
         TM    SVCTP,SVCTP34           TYPE 3 (OR 4)
         JO    SVCTYPE2                YES, JUMP
         MVI   WORK256+1,C'2'          CHANGE TO T2
         TM    SVCTP,SVCTP2            TYPE 2?
         JO    SVCTYPE2                YES, JUMP
         MVI   WORK256+1,C'6'          CHANGE TO T6
         TM    SVCTP,SVCTP6            TYPE 6?
         JO    SVCTYPE2                YES, JUMP
         MVI   WORK256+1,C'1'          CHANGE TO T1
SVCTYPE2 TM    SVCTP,SVCAPF            APF REQUIRED?
         JNO   SVCTYPE3                NO, JUMP
         MVC   WORK256+2(4),=C'-APF'   YES, SHOW APF
SVCTYPE3 TM    SVCTP,SVCESR            ESR?
         JNO   SVCTYPE6                NO, JUMP
         MVC   WORK256+2(4),=C'-ESR'   YES, SHOW ESR
SVCTYPE6 CLI   SVCLOCKS,0              ANY LOCK REQUIRED?
         JE    SVCTYPE9                NO, JUMP
         STRING64 (WORK256,12,T),'-',(SVCLOCKS,,X),INTO=(WORK256,12)
SVCTYPE9 DS    0H                                                RS0500
         MVI   WORK256+40,C'?'         Default n/a               RS0500
         MVI   WORK256+40,C'N'         Default NO                RS1299
         TM    SVCATTR3,SVCAR          AccessRegister?           RS1299
         JNO   SVCTYPEA                                          RS1299
         MVI   WORK256+40,C'Y'                                   RS1299
SVCTYPEA BR    R7                                                RS1299
*
*----------------------------------------------------------------------
*        SCAN SVC/PCK TABLES
*----------------------------------------------------------------------
*
SCANTBL  LARL  R1,SVCNAMES             SVC name table
         SLR   R2,R2
*LOOP
SCANTBL2 IC    R2,1(,R1)               PICK UP ENTRY LENGTH
         CLM   R0,B'0001',0(R1)        COMPARE SVC NUMBER WITH INTCODE
         BER   R14                     EQUAL, QUIT LOOP
         LA    R1,2(R2,R1)             BUMP TO NEXT ENTRY IN SVC TABLE
         CLI   0(R1),FF                END OF TABLE?
         JNE   SCANTBL2                NO, TRY NEXT ENTRY
*ENDLOOP
         LA    R1,BLANKS               unknown SVC
         LA    R2,1                    length=1
         BR    R14
*
SVCNAMES TABLE 0,EXCP,WAIT,POST,EXIT,GETMAIN,FREEMAIN,LINK,XCTL,       X
               LOAD,DELETE,GETMAIN/FREEMAIN,TIME,SYNCH,ABEND,SPIE,     X
               ERREXCP,PURGE,RESTORE,BLDL/FIND,OPEN,CLOSE,STOW,        X
               'OPEN TYPE=J','CLOSE TYPE=T',DEVTYPE,TRKBAL,            X
               LOCATE/CATALOG,OBTAIN,CVOL,SCRATCH,RENAME,FEOV,REALLOC, X
               IOHALT,MGCR/QEDIT,WTO/WTOL,WTL,SEGLD/SEGWT,,LABEL,      X
               EXTRACT,IDENTIFY,ATTACH,CIRB,CHAP,OVLYBRCH,TTIMER,      X
               STIMER,DEQ,,,SNAP/SDUMP,RESTART,RELEX,DISABLE,EOV,      X
               ENQ/RESERVE,FREEDBUF,RELBUF/REQBUF,OLTEP,STAE/ESTAE,    X
               IKJEGS6A,DETACH,CHKPT,RDJFCB,,BTAMTEST,,                X
               SYNADAF/SYNADRLS,BSP,GSERV
         TABLE 79,STATUS,,SETPRT,,SMFWTM,GRAPHICS,DDRSWAP,ATLAS,DOM
         TABLE 91,VOLSTAT,TCBEXCP,TGET/TPUT,STCC,SYSEVENT,STAX,        X
               'TSO TEST',PROTECT,DYNALLOC,IKJEFFIB,,,XLATE,,IMGLIB,,  X
               MODESET,,'TYPE 3 ESR',DSTATUS,HASPSSSM,PGRLSE,PGFIX,    X
               EXCPVR,,'TYPE 1 ESR',DEBCHK,,TESTAUTH,                  X
               GETMAIN/FREEMAIN,VSAM,'TYPE 2 ESR',PURGEDEQ,,EVENTS
         TABLE 130,RACHECK,RACINIT,RACLIST,RACDEF
         TABLE 138,PGSER,CVAF,,,,CIPHER,OMVSPTRACE               RS1299
         DC    X'FF',0D'0'             END OF TABLE
PCKTABLE TABLE 1,OPERATION,'PRIVILEGED OPERATION',EXECUTE,             X
               PROTECTION,ADDRESSING,SPECIFICATION,DATA,               X
               'FIXED-PT OVERFLOW','FIXED-PT DIVIDE',                  X
               'DECIMAL OVERFLOW','DECIMAL DIVIDE',                    X
               'EXPONENT OVERFLOW','EXPONENT UNDERFLOW',               X
               SIGNIFICANCE,'FLOATING-PT DIVIDE',                      X
               'SEGMENT TRANSLATION','PAGE TRANSLATION',               X
               'TRANSLATION SPECIFICATION','SPECIAL OPERATION'
         DC    X'FF',0D'0'             END OF TABLE
SVCT99   END_PROC
         TITLE 'SHOWMVS &REL - Linkage Index Info'             JWMJUN96
*---------------------------------------------------------------------*
*                                                                     *
* Linkage Index (LX) information:                                     *
*                                                                     *
*   LX number   Owned by ASID   Inuse Count   System LX   Dormant     *
*       0       0002 PCAUTH         FFFF           Yes        No      *
*                                                                     *
* Linkage Index (LX) entries - Max : 96   Free : 34                   *
* Free LX count - System : 5  Non-System : 4                          *
*                                                                     *
*---------------------------------------------------------------------*
LXINFO   BEGIN_PROC KW=LXINFO,AUTH=YES
         STRING64 '&TITLEPFX.Linkage Index (LX) information:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  LX number',2X,                                    X
               'Owned by ASID',5X,                                     X
               'Inuse Count',3X,                                       X
               'Sys-LX',                                               X
               ' Dormant',                                             X
               ' Flags',                                               X
               ' SeqNo',                                               X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R3,CVTSVT               Get address of PSASVT
         USING SVT,R3
         L     R3,SVTXMD               Cross Memory Directory          X
                                         in PC/AUTH address space
         DROP  R3
*        R3 --> XMD in pcauth address space
         AIF   (NOT D'CVTALR).LXINFO03 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    LXINFO03                   no use old             RS0309
         ESAIR R2                      Get current sec. asid     RS0309
         STG   R2,WKCELL1              Save current sec. asid    RS0309
         J     LXINFO03_1              Jump around               RS0309
.LXINFO03 ANOP                                                   RS0309
LXINFO03 DS    0H                                                RS0309
         ESAR  R2                      Get current sec. asid
         STH   R2,WKCELL1              Save current sec. asid
LXINFO03_1 DS  0H                                                RS0309
         AXSET AX==H'1'                Set auth
         LA    R2,2                    Set 'pcauth' asid
         AIF   (NOT D'CVTALR).LXINFO04 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    LXINFO04                   no use old             RS0309
         LOCASCB ASID=(R2)             GET ADDR OF OWNER'S ASCB  RS0309
         LTR   R15,R1                  VALID ASID?               RS0309
         JNP   LXINFO_END              NO, JUMP                  RS0309
         USING ASCB,R15                                          RS0309
         L     R1,ASCBASSB-ASCB(R15)   ASSB                      RS0309
         USING ASSB,R1                                           RS0309
         LMH   R2,R2,ASSBISQN             Sequence               RS0309
         DROP  R1                                                RS0309
         SSAIR R2                      Set PCAUTH as secondary   RS0309
         J     LXINFO04_1              Jump around               RS0309
.LXINFO04 ANOP                                                   RS0309
LXINFO04 DS    0H                                                RS0309
         SSAR  R2                      Set PCAUTH as secondary
LXINFO04_1 DS  0H                                                RS0309
* FIND XMD
         LA    R14,XMDLNTH             Set lenth of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
         LA    R4,WORK256
         USING XMD,R4
* FIND LXAT
         L     R3,XMDLXAT              Address of LXAT
         DROP  R4
         LA    R14,L'LXATHDR           Set length of receiving field
*        LHI   R14,256                 debugcode                 RS1104
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from secondary  RS1104
         LA    R5,WORK256
         USING LXATHDR,R5
*
         XC    WKCELL3,WKCELL3         Clear out free system LX counter
         SR    R2,R2                   Clear LX counter
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS1104
         JZ    LXINFO10                  no, header now          RS1104
         AHI   R3,16                     32 bytes instead of 8   RS1104
*loop
LXINFO10 DS    0H
*        #SNAP ADDR=(R5),LENGTH=128    debugcode                 RS1104
         LA    R3,8(,R3)               Bump index up 8 bytes
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS1104
         JZ    LXINFO12                  no, leave               RS1104
         LA    R3,8(,R3)               Bump index up 8 bytes     RS1104
LXINFO12 DS    0H                                                RS1104
         LA    R14,8                   Set length of receiving field
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS1104
         JZ    LXINFO13                  no, header now          RS1104
         LA    R14,L'LXATINDX          Set length of receiving field
LXINFO13 DS    0H                                                RS1104
         SR    R15,R15                 'from' key
         MVCP  WORK256+32(R14),0(R3),R15  Copy data from sec.    RS1104
         LA    R4,WORK256+32                                     RS1104
         USING LXATINDX,R4
         ST    R2,WORK256+252                                    RS0409
         TM    LXATFLGS,LXATOWND       Is this LX owned
         JZ    LXINFO40                No
         LOCASCB ASID=LXATASID         Get addr of ASCB
         LTR   R15,R1                  Valid ASID?
         JNP   LXINFO20                No, jump
         ICM   R6,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   LXINFO30                Yes - continue
         ICM   R6,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         JNZ   LXINFO30                No - continue
LXINFO20 DS    0H
         LA    R6,BLANKS
LXINFO30 DS    0H
         MVC   WKCELL4(3),=C'No '
         TM    LXATFLGS,LXATSYS        Is this a SYSTEM LX ?
         JZ    *+10                    No
         MVC   WKCELL4(3),=C'Yes'
         MVC   WKCELL4+4(3),=C'No '
         TM    LXATFLGS,LXATDORM       Is this a dormant LX ?
         JZ    *+10                    No
         MVC   WKCELL4+4(3),=C'Yes'
         STRING64 3X,((R2),,R4B),1X,(WORK256+254,2,X),4X,              X
               (LXATASID,,X),' ',      xASID                     RS1006X
               (LXATASID,H,R4B),' ',((R6),8),7X, ASID            RS1006X
               (LXATBIND,,X),4X,                                       X
               (WKCELL4,3),4X,                                         X
               (WKCELL4+4,3),5X,                                       X
               (LXATFLGS,,X),4X,                                       X
               'n/a',                                            RS1008X
               INTO=LINE
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS1008
         JZ    LXINFO32                  no, leave               RS1008
         LR    R1,R2                get 31 bits (only 24 counts) RS0409
         ST    R2,WKCELL2
         TM    WKCELL2+2,X'08'      is this a large LX ?         RS0409
         JZ    LXINFO31               no, leave                  RS0409
         SLDL  R0,21                the bits to be shifted to R0 RS0409
         SRL   R1,1                 left part is now ready       RS0409
         SRDL  R0,20                back to right pos            RS0409
         STCM  R1,B'1111',WKCELL2                                RS0409
         OI    WKCELL2+2,X'08'      mark as large LX             RS0409
LXINFO31 DS    0H                                                RS0409
         STRING64 3X,(WKCELL2+1,3,X),4X,                         RS0409X
               (LXATASID,,X),' ',      xASID                     RS1008X
               (LXATASID,H,R4B),' ',((R6),8),7X, ASID            RS1008X
               (LXATBIND,,X),4X,                                 RS1008X
               (WKCELL4,3),4X,                                   RS1008X
               (WKCELL4+4,3),5X,                                 RS1008X
               (LXATFLGS,,X),4X,                                 RS1008X
               (LXATSEQNUM,F,R5B),                               RS1008X
               INTO=LINE                                         RS1008
LXINFO32 DS    0H                                                RS1008
         BRASL R14,SPACE1              Single Space
         J     LXINFO80
LXINFO40 DS    0H
         TM    LXATFLGS,LXATSYS        Is this a SYSTEM LX ?
         JZ    LXINFO50                No
         LH    R1,WKCELL3              Reload reg
         LA    R1,1(,R1)               Free system LX count +1
         STH   R1,WKCELL3              Save for later
         J     LXINFO80
LXINFO50 DS    0H
         LH    R1,WKCELL3+2            Reload reg
         LA    R1,1(,R1)               Free non-system LX count +1
         STH   R1,WKCELL3+2            Save for later
LXINFO80 DS    0H
         LA    R2,1(,R2)               System LX count +1
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS1104
         JZ    LXINFO81                  no, leave               RS1104
         C     R2,LXATHISLTBLXI        Below max                 RS1104
         JNH   LXINFO10                Yes                       RS1104
*endloop
         J     LXINFO82                                          RS1104
LXINFO81 DS    0H
         CH    R2,LXATHILX             Below max
         JNH   LXINFO10                Yes
LXINFO82 DS    0H
*endloop
         AIF   (NOT D'CVTALR).LXINFO85 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    LXINFO85                   no use old             RS0309
         LG    R2,WKCELL1                                        RS0309
         SSAIR R2                      Should be same as primary RS0309
         J     LXINFO85_1              Jump around               RS0309
.LXINFO85 ANOP                                                   RS0309
LXINFO85 DS    0H                                                RS0309
         LH    R2,WKCELL1
         SSAR  R2                      Should be same as primary
LXINFO85_1 DS  0H                                                RS0309
         AXSET AX==H'0'                Reset auth
         BRASL R14,BLANK1              blank line
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS1104
         JZ    LXINFO90                  no, header now          RS1104
         STRING64 '  Highest     LX : ',(LXATHILX,H,R5B),        RS1008X
               '   Max system     LX : ',(LXATMSLX,H,R5B),       RS1008X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 '  Highest big LX : ',(LXATHISLTBLXI,F,R5B),   RS1008X
               '   Max system big LX : ',(LXATMSBLXI,F,R5B),     RS1008X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 '  Used LX        : ',(LXATHILXI_USED,F,R5B),  RS1008X
               '   Used big LX       : ',(LXATHIBLXI_USED,F,R5B),      X
               INTO=LINE                                         RS1008
         BRASL R14,SPACE1              Single Space              RS1104
         LH    R2,WKCELL3              Free System LX count      RS1104
         LH    R3,WKCELL3+2            Free Non-System LX count  RS1104
         STRING64 '  Free LX System : ',(WKCELL3,H,R5B),         RS1008X
               '   Non-System        : ',(WKCELL3+2,H,R5B),      RS1008X
               INTO=LINE                                         RS1104
         BRASL R14,SPACE1              Single Space              RS1008
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010111').LXINFO99     RS0510
         SR    R0,R0                   clear R0                  RS0510
         TM    HBB7760,L'HBB7760       running on z/OS R11       RS0510
         JZ    LXINFO99                  no, leave               RS0510
         BRASL R14,BLANK1              Space                     RS0510
         STRING64 '  LX-Usage from IHASVTX',INTO=LINE            RS0510
         BRASL R14,SPACE1              Single Space              RS0510
         MODESET EXTKEY=ZERO        <- switch to KEY=0           RS0510
         L     R3,PSASVTX-PSA(,0)      the SVTX                  RS0510
         USING SVTX,R3                                           RS0510
         STRING64 '  # def. Syst-LX : ',(SVTXLXSYSDEFINED,H,R5B),      X
               '   # in use  Syst-LX : ',(SVTXLXSYSINUSE,H,R5B),       X
               INTO=LINE                                         RS0510
         BRASL R14,SPACE1              Single Space              RS0510
         STRING64 '  # def.      LX : ',(SVTXLXNSYSDEFINED,H,R5B),     X
               '   # in use       LX : ',(SVTXLXNSYSINUSE,H,R5B),      X
               INTO=LINE                                         RS0510
         BRASL R14,SPACE1              Single Space              RS0510
         STRING64 '  # def. big Syst-LX : ',(SVTXBLXSYSDEFINED,F,R9B), X
               '   # in use big Syst-LX : ',(SVTXBLXSYSINUSE,F,R9B),   X
               INTO=LINE                                         RS0510
         BRASL R14,SPACE1              Single Space              RS0510
         STRING64 '  # def. big LX      : ',(SVTXBLXNSYSDEFINED,F,R9B),X
               '   # in use big LX      : ',(SVTXBLXNSYSINUSE,F,R9B),  X
               INTO=LINE                                         RS0510
         BRASL R14,SPACE2              double Space              RS0510
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
         J     LXINFO99                                          RS1104
LXINFO90 DS    0H                                                RS1104
         STRING64 '  Highest LX : ',(LXATHILX,H,L),                    X
               '   Max system LX : ',(LXATMSLX,H,L),                   X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         LH    R2,WKCELL3              Free System LX count
         LH    R3,WKCELL3+2            Free Non-System LX count
         STRING64 '  Free LX count - System : ',(WKCELL3,H,R5B),       X
               '  Non-System : ',(WKCELL3+2,H,R5B),                    X
               INTO=LINE
         BRASL R14,SPACE1              Single Space              RS1008
.LXINFO99 ANOP                                                   RS0510
LXINFO99 DS    0H
         STRING64 '  Flags: 80-Reserve in process 40-Owned ',          X
               '20-System 10-Dormant 08-Reuseable 04-Assigned',        X
               INTO=LINE                                         RS1008
         BRASL R14,SPACE2              Double Space              RS1008
LXINFO_END DS  0H
         END_PROC
         TITLE 'SHOWMVS &REL - Auth Index Info'                  RS0700
*---------------------------------------------------------------------*
*                                                                     *
*  Auth Index (AX) information:                                       *
*                                                                     *
*    AX number   Stoken           Owned by ASID   EAX   EAX Count     *
*                                                                     *
*        0       0000000800000001 PCAUTH          No                  *
*        1       0000000800000001 PCAUTH          No                  *
*        2       0000007000000002 JES2            No                  *
*                                                                     *
*---------------------------------------------------------------------*
AXINFO   BEGIN_PROC KW=AXINFO,AUTH=YES                           RS0302
         STRING64 '&TITLEPFX.Auth Index (AX) information:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  AX number',3X,                                    X
               'Stoken',11X,                                           X
               'Owned by ASID',3X,                                     X
               'EAX',3X,                                               X
               'EAX Count',                                            X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R3,CVTSVT               Get address of PSASVT
         USING SVT,R3
         L     R3,SVTXMD               Cross Memory Directory          X
                                         in PC/AUTH address space
         DROP  R3
*        R3 --> XMD in pcauth address space
         AIF   (NOT D'CVTALR).AXINFO03 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    AXINFO03                   no use old             RS0309
         ESAIR R2                      Get current sec. asid     RS0309
         STG   R2,WKCELL1              Save current sec. asid    RS0309
         J     AXINFO03_1              Jump around               RS0309
.AXINFO03 ANOP                                                   RS0309
AXINFO03 DS    0H                                                RS0309
         ESAR  R2                      Get current sec. asid
         STH   R2,WKCELL1              Save current sec. asid
AXINFO03_1 DS  0H                                                RS0309
         AXSET AX==H'1'                Set auth
         LA    R2,2                    Get 'pcauth' asid
         AIF   (NOT D'CVTALR).AXINFO04 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    AXINFO04                   no use old             RS0309
         LOCASCB ASID=(R2)             GET ADDR OF OWNER'S ASCB  RS0309
         LTR   R15,R1                  VALID ASID?               RS0309
         JNP   AXINFO99                NO, JUMP                  RS0309
         USING ASCB,R15                                          RS0309
         L     R1,ASCBASSB-ASCB(R15)   ASSB                      RS0309
         USING ASSB,R1                                           RS0309
         LMH   R2,R2,ASSBISQN             Sequence               RS0309
         DROP  R1                                                RS0309
         SSAIR R2                      Set PCAUTH as secondary   RS0309
         J     AXINFO04_1              Jump around               RS0309
.AXINFO04 ANOP                                                   RS0309
AXINFO04 DS    0H                                                RS0309
         SSAR  R2                      Set PCAUTH as secondary
AXINFO04_1 DS  0H                                                RS0309
* FIND XMD
         LA    R14,XMDLNTH             Set lenth of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
         LA    R4,WORK256
         USING XMD,R4
* FIND AXAT
         L     R3,XMDAXAT              Address of AXAT
         LA    R14,L'AXATHDR           Set lenthg of receiving field
         SR    R15,R15                 'from' key
         MVCP  WKCELL2(R14),0(R3),R15  Copy data from sec. asid
         LA    R5,WKCELL2
         USING AXATHDR,R5
         LA    R3,16(,R3)              Bump around header
*
         SR    R2,R2                   Clear LX counter
*LOOP
AXINFO10 DS    0H
         LA    R14,L'AXATENT           Set length of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
         DROP  R4
         USING AXATENT,R4
         CLC   AXATSTKN,=D'0'          See if it is free
         JE    AXINFO80                Yes
         LOCASCB STOKEN=AXATSTKN       Get addr of ASCB
         LTR   R15,R1                  Valid ASID?
         JNP   AXINFO20                No, jump
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   AXINFO30                Yes - continue
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         JNZ   AXINFO30                No - continue
AXINFO20 DS    0H
         LA    R1,BLANKS
AXINFO30 DS    0H
         LA    R6,=C'No '              Default No
         TM    AXATFLG1,AXATEAXC       Is this in use?
         JZ    *+8                     No
         LA    R6,=C'Yes'              Yes
         STRING64 3X,((R2),,R4B),7X,                                   X
               (AXATSTKN,,X),' ',                                      X
               ((R1),8),8X,                                            X
               ((R6),3),8X,                                            X
               (AXATETC,,R4B),                                         X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1              Single Space
         J     AXINFO80
AXINFO80 DS    0H
         LA    R3,12(,R3)              Bump index up 16 bytes
         LA    R2,1(,R2)               AX count +1
         C     R2,AXATAVAL             max reached ?
         JNH   AXINFO10                  No next one
*endloop
*
         AIF   (NOT D'CVTALR).AXINFO90 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    AXINFO90                   no use old             RS0309
         LG    R2,WKCELL1                                        RS0309
         SSAIR R2                      Should be same as primary RS0309
         J     AXINFO90_1              Jump around               RS0309
.AXINFO90 ANOP                                                   RS0309
AXINFO90 DS    0H                                                RS0309
         LH    R2,WKCELL1
         SSAR  R2                      Should be same as primary
AXINFO90_1 DS  0H                                                RS0309
         AXSET AX==H'0'                Reset auth
         BRASL R14,BLANK1              blank line
AXINFO99 DS    0H
         END_PROC
         TITLE 'SHOWMVS &REL - XMS-Connection'                   RS0700
*---------------------------------------------------------------------*
*                                                                     *
*  Cross Memory Connection (XMS):
*
*    Jobname       ASID SToken           SETC-Ptr Flag  LX   To   From
*
*    TCPIP           62 000000F800000001 7FFD1168   90  Yes   0      0
*    NFSC            45 000000B400000001 7FFD1340   10  No    0      1
*      <- OMVS       14 0000003800000001 7FFD7C50
*    SDSF            43 000000AC00000001 7FFD1518   90  Yes   0      0
*    APPC            39 0000009C00000001 7FFD16F0   98  Yes   0      0
*    VMCF            44 000000B000000001 7FFD18C8   90  Yes   0      0
*    DFSCM           20 0000005000000002 7FFD1AA0   10  No    0      1
*      <- OMVS       14 0000003800000001 7FFD7C50
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
XMSINFO  BEGIN_PROC KW=XMSINFO,AUTH=YES                          RS0302
         STRING64 '&TITLEPFX.Cross Memory Connection (XMS):',INTO=LINE
         BRASL R14,SPACE2
         STRING64 '  Jobname',7X,                                      X
               'ASID ',                                                X
               'SToken',11X,                                           X
               'SETC-Ptr ',                                            X
               'Flag  ',                                               X
               'LX',3X,                                                X
               'To',3X,                                                X
               'From',                                                 X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R3,CVTSVT               Get address of PSASVT
         USING SVT,R3
         L     R3,SVTXMD               Cross Memory Directory          X
                                         in PC/AUTH address space
         DROP  R3
*        R3 --> XMD in pcauth address space
         AIF   (NOT D'CVTALR).XMSINF03 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    XMSINF03                   no use old             RS0309
         ESAIR R2                      Get current sec. asid     RS0309
         STG   R2,WKCELL1              Save current sec. asid    RS0309
         J     XMSINF03_1              Jump around               RS0309
.XMSINF03 ANOP                                                   RS0309
XMSINF03 DS    0H                                                RS0309
         ESAR  R2                      Get current sec. asid
         STH   R2,WKCELL1              Save current sec. asid
XMSINF03_1 DS  0H                                                RS0309
         AXSET AX==H'1'                Set auth
         LA    R2,2                    Get 'pcauth' asid
         AIF   (NOT D'CVTALR).XMSINF04 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    XMSINF04                   no use old             RS0309
         LOCASCB ASID=(R2)             GET ADDR OF OWNER'S ASCB  RS0309
         LTR   R15,R1                  VALID ASID?               RS0309
         JNP   XMSINF99                NO, JUMP                  RS0309
         USING ASCB,R15                                          RS0309
         L     R1,ASCBASSB-ASCB(R15)   ASSB                      RS0309
         USING ASSB,R1                                           RS0309
         LMH   R2,R2,ASSBISQN             Sequence               RS0309
         DROP  R1                                                RS0309
         SSAIR R2                      Set PCAUTH as secondary   RS0309
         J     XMSINF04_1              Jump around               RS0309
.XMSINF04 ANOP                                                   RS0309
XMSINF04 DS    0H                                                RS0309
         SSAR  R2                      Set PCAUTH as secondary
XMSINF04_1 DS  0H                                                RS0309
* FIND XMD
         LA    R14,XMDLNTH             Set lenth of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
         LA    R4,WORK256
         USING XMD,R4
* FIND XMSE
         L     R3,XMDXMSE              Address of XMSE
*loop
XMSINF10 DS   0H
         LA    R14,XMSE_LENGTH       Set lenthg of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
         LA    R4,WORK256
         USING XMSE,R4
* find SETC at first just the length
         L     R3,XMSESETC             Address of SETC
         LA    R14,L'SETCHDR           Set Header length, the header
*                                      include the current length
         SR    R15,R15                 'from' key
         MVCP  WORK256+120(R14),0(R3),R15 Copy data from sec. asid
         LA    R5,WORK256+120          point to the header
         USING SETC,R5                 tell assembly
         BRASL R14,WORKADDR
         LH    R14,SETCLENG            Now using the current length
         LR    R5,R1
         SR    R15,R15                 'from' key
         LA    R6,256                  max length of MVCP        RS0900
XMSINF70 MVCP  0(R14,R5),0(R3),R15     Copy data from sec. asid
         BRC   8,XMSINF73              do we get all data?       RS0900
         AR    R5,R6                    no, setup for the next   RS0900
         AR    R3,R6                        move                 RS0900
         SR    R14,R6                                            RS0900
         J     XMSINF70                     get the next 256     RS0900
XMSINF73 DS 0H                         We got it all             RS0900
         LR    R5,R1                   point to the start SETC   RS0900
         LA    R6,=C'No '              Default No
         TM    SETCFLG1,SETCLXUS       Is this in use?
         JZ    *+8                     No
         LA    R6,=C'Yes'              Yes
XMSINF77 DS 0H
*        #SNAP ADDR=(R5),LENGTH=(R14)  The output can be very big !!
         STRING64 2X,(XMSEJOBN),6X,    Jobname                         X
               (XMSEASID,H,R4B),1X,    Asid                            X
               (XMSESTKN,8,X),1X,      SToken                          X
               (XMSESETC,,X),3X,       SETC-Pointer                    X
               (SETCFLG1,,X),2X,       Flag                            X
               ((R6),3),1X,            LX Yes/No                       X
               (SETCTONO,H,R3B),4X,    To counter                      X
               (SETCFRNO,H,R3B),1X,    From counter                    X
               INTO=LINE
         BRASL R14,SPACE1
         TM    SETCFLG1,SETCLXUS     Dont examine the connection JM1000
         JO    XMSINF85                pointer                   JM1000
         LH    R6,SETCFRNO             Count number of TO        RS0800
         AH    R6,SETCTONO             + FROM-connections        RS0800
         LTR   R6,R6                   Check if there is any
         JZ    XMSINF85                  no, NO XMS
*  loop
XMSINF80 DS 0H
         L     R3,SETCENTP             Connection entry
         TM    SETCENTP+3,SETCNOUS     Entry in used X'01' bit 0
         JNZ   XMSINF83_1                no, no need to display
         MVC   WORK256+40(2),=C'->'    To
         TM    SETCENTP,X'80'          Is this a to-XMS?
         JO    XMSINF82                  ok, report
         MVC   WORK256+40(2),=C'<-'    From
XMSINF82 DS 0H
         LA    R14,XMSE_LENGTH         length of XMSE
         SR    R15,R15                 'from' key
         MVCP  WORK256+50(R14),0(R3),R15 Copy data from sec. asid
         STRING64 4X,                                                  X
               (WORK256+40,2),1X,      Indicator To/From               X
               (WORK256+78,8),1X,      Jobname                         X
               (WORK256+86,H,R4B),1X,  Asid                            X
               (WORK256+58,8,X),1X,    Stoken                          X
               (SETCENTP,,X),1X,       SETC-Pointer                    X
               INTO=LINE
         BRASL R14,SPACE1
XMSINF83 DS 0H
         LA    R5,4(,R5)               point to next connection entry
*                                      R5 is destroyed !!
         JCT   R6,XMSINF80             Do until number of entries
         J     XMSINF85
XMSINF83_1 DS 0H
         LA    R5,4(,R5)               point to next connection
         J     XMSINF80
XMSINF85 DS 0H
         ICM   R3,B'1111',XMSENXTP     next XMSE > 0
         JNZ   XMSINF10                 yes, proceeed
*endloop
         AIF   (NOT D'CVTALR).XMSINF90 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    XMSINF90                   no use old             RS0309
         LG    R2,WKCELL1                                        RS0309
         SSAIR R2                      Should be same as primary RS0309
         J     XMSINF90_1              Jump around               RS0309
.XMSINF90 ANOP                                                   RS0309
XMSINF90 DS    0H                                                RS0309
         LH    R2,WKCELL1
         SSAR  R2                      Should be same as primary
XMSINF90_1 DS  0H                                                RS0309
         AXSET AX==H'0'                Reset auth
         BRASL R14,BLANK1              blank line
.XMSINF99 ANOP
XMSINF99 DS    0H
         END_PROC
         TITLE 'SHOWMVS &REL - MDQ'                              RS0601
*---------------------------------------------------------------------*
*                                                                     *
*  Memory Delete Queue (MDQ):
*
*    Jobname       ASID SToken           SETC-Ptr Flag  LX   To   From
*
*    TCPIP           62 000000F800000001 7FFD1168   90  Yes   0      0
*    NFSC            45 000000B400000001 7FFD1340   10  No    0      1
*      <- OMVS       14 0000003800000001 7FFD7C50
*    SDSF            43 000000AC00000001 7FFD1518   90  Yes   0      0
*    APPC            39 0000009C00000001 7FFD16F0   98  Yes   0      0
*    VMCF            44 000000B000000001 7FFD18C8   90  Yes   0      0
*    DFSCM           20 0000005000000002 7FFD1AA0   10  No    0      1
*      <- OMVS       14 0000003800000001 7FFD7C50
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
MDQINFO  BEGIN_PROC KW=MDQINFO,AUTH=YES                          RS0302
         STRING64 '&TITLEPFX.Memory Delete Queue (MDQ):',INTO=LINE
         BRASL R14,SPACE2
         STRING64 '  Jobname',7X,                                      X
               'ASID ',                                                X
               'SToken',11X,                                           X
               'SETC-Ptr ',                                            X
               'Flag  ',                                               X
               'LX',3X,                                                X
               'To',3X,                                                X
               'From',                                                 X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R3,CVTSVT               Get address of PSASVT
         USING SVT,R3
         ICM   R3,B'1111',SVTMDLQ      Memory Delete Queue       RS0302
         JNZ   MDQINF05                  is empty                RS0302
         STRING64 '  No entries in old queue',INTO=LINE          RS0803
         BRASL R14,SPACE2              Double Space              RS0302
         J     MDQINF99                leave                     RS0302
MDQINF05 DS   0H                                                 RS0302
         USING ASSB,R3                 It's a dummy ASSB         RS0309
         AIF   (NOT D'CVTALR).MDQINF06 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    MDQINF06                   no use old             RS0309
         ESAIR R2                      Get current sec. asid     RS0309
         STG   R2,WKCELL1              Save current sec. asid    RS0309
         J     MDQINF06_1              Jump around               RS0309
.MDQINF06 ANOP                                                   RS0309
MDQINF06 DS    0H                                                RS0309
         ESAR  R2                      Get current sec. asid
         STH   R2,WKCELL1              Save current sec. asid
MDQINF06_1 DS  0H                                                RS0309
         AXSET AX==H'1'                Set auth
         LA    R2,2                    Get 'pcauth' asid
         AIF   (NOT D'CVTALR).MDQINF07 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    MDQINF07                   no use old             RS0309
         LOCASCB ASID=(R2)             GET ADDR OF OWNER'S ASCB  RS0309
         LTR   R15,R1                  VALID ASID?               RS0309
         JNP   MDQZOS99                NO, JUMP                  RS0309
         USING ASCB,R15                                          RS0309
         L     R1,ASCBASSB-ASCB(R15)   ASSB                      RS0309
         DROP  R3                                                RS0309
         USING ASSB,R1                                           RS0309
         LMH   R2,R2,ASSBISQN             Sequence               RS0309
         SSAIR R2                      Set PCAUTH as secondary   RS0309
         J     MDQINF07_1              Jump around               RS0309
.MDQINF07 ANOP                                                   RS0309
MDQINF07 DS    0H                                                RS0309
         SSAR  R2                      Set PCAUTH as secondary
MDQINF07_1 DS  0H                                                RS0309
*loop
MDQINF10 DS   0H
         USING ASSB,R3                 It's a dummy ASSB         RS0309
         ICM   R4,B'1111',ASSBXMSE     Address of XMSE           RS0504
         JZ    MDQINF85                Leave if zero             RS0504
*        Find XMSE                                               RS1002
*        #SNAP ADDR=(R3),LENGTH=100    Debug
         USING XMSE,R4
         LA    R14,XMSE_LENGTH         Set lenthg of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R4),R15  Copy data from sec. asid
*        #SNAP ADDR=WORK256,LENGTH=(R14)  Debug-Code             RS1002
         LA    R4,WORK256
         USING XMSE,R4
* find SETC at first just the length
         L     R5,XMSESETC             Address of SETC
         LA    R14,L'SETCHDR           Set Header length, the header
*                                      include the current length
         SR    R15,R15                 'from' key
         MVCP  WORK256+120(R14),0(R5),R15 Copy data from sec. asid
*        #SNAP ADDR=WORK256+120,LENGTH=(R14)   Debug             RS1002
         LA    R6,WORK256+120          point to the header
         USING SETC,R6                 tell assembly
         BRASL R14,WORKADDR
         LH    R14,SETCLENG            Now using the current length
*                                      (use R6 for SETC)         RS1002
         LR    R6,R1
         SR    R15,R15                 'from' key
         LA    R7,256
MDQINF70 MVCP  0(R14,R6),0(R5),R15     Copy data from sec. asid
         BRC   8,MDQINF73              do we get all data?
         AR    R6,R7                    no, setup for the next
         AR    R5,R7                        move
         SR    R14,R7
         J     MDQINF70                     get the next 256
MDQINF73 DS 0H                         We got it all
         LR    R6,R1                   point to the start SETC
         LA    R1,=C'No '              Default No
         TM    SETCFLG1,SETCLXUS       Is this in use?
         JZ    *+8                     No
         LA    R1,=C'Yes'              Yes
MDQINF77 DS 0H
         LH    R14,SETCLENG
*        #SNAP ADDR=(R6),LENGTH=(R14)  The output can be very big !!
         STRING64 2X,(XMSEJOBN),6X,    Jobname                         X
               (XMSEASID,H,R4B),1X,    Asid                            X
               (XMSESTKN,8,X),1X,      SToken                          X
               (XMSESETC,,X),3X,       SETC-Pointer                    X
               (SETCFLG1,,X),2X,       Flag                            X
               ((R1),3),1X,            LX Yes/No                       X
               (SETCTONO,H,R3B),4X,    To counter                      X
               (SETCFRNO,H,R3B),1X,    From counter                    X
               INTO=LINE
         BRASL R14,SPACE1
         TM    SETCFLG1,SETCLXUS     Dont examine the connection
         JO    MDQINF85                pointer
         LH    R7,SETCFRNO             Count number of TO
         AH    R7,SETCTONO             + FROM-connections
         LTR   R7,R7                   Check if there is any
         JZ    MDQINF85                  no, NO XMS
*  loop
MDQINF80 DS 0H
         DROP  R4
         L     R4,SETCENTP             Connection entry
         TM    SETCENTP+3,SETCNOUS     Entry in used X'01' bit 0
         JNZ   MDQINF83_1                no, no need to display
         LA    R1,=C'->'    To                                   RS1002
         TM    SETCENTP,X'80'          Is this a to-XMS?
         JO    MDQINF82                  ok, report
         LA    R1,=C'<-'    From                                 RS1002
MDQINF82 DS 0H
         LA    R14,XMSE_LENGTH         length of XMSE
         SR    R15,R15                 'from' key
         MVCP  WORK256+50(R14),0(R4),R15 Copy data from sec. asid
         STRING64 4X,                                                  X
               ((R1),2),1X,            Indicator To/From         RS1002X
               (WORK256+78,8),1X,      Jobname                         X
               (WORK256+86,H,R4B),1X,  Asid                            X
               (WORK256+58,8,X),1X,    Stoken                          X
               (SETCENTP,,X),1X,       SETC-Pointer                    X
               INTO=LINE
         BRASL R14,SPACE1
MDQINF83 DS 0H
         LA    R6,4(,R6)               point to next connection entry
*                                      R5 is destroyed !!
         JCT   R7,MDQINF80             Do until number of entries
         J     MDQINF85
MDQINF83_1 DS 0H
         LA    R6,4(,R6)               point to next connection
         J     MDQINF80
MDQINF85 DS 0H                                                   RS0900
         ICM   R3,B'1111',ASSBASRF     Address of next ASSB
         JNZ   MDQINF10
*endloop
MDQINF90 DS 0H                                                   RS0900
         AIF   (NOT D'CVTALR).MDQINF91 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    MDQINF91                   no use old             RS0309
         LG    R2,WKCELL1                                        RS0309
         SSAIR R2                      Should be same as primary RS0309
         J     MDQINF91_1              Jump around               RS0309
.MDQINF91 ANOP                                                   RS0309
MDQINF91 DS    0H                                                RS0309
         LH    R2,WKCELL1
         SSAR  R2                      Should be same as primary
MDQINF91_1 DS  0H                                                RS0309
         AXSET AX==H'0'                Reset auth
         XC    WKCELL1,WKCELL1
         BRASL R14,BLANK1              blank line
.MDQINF99 ANOP
MDQINF99 DS    0H
         L     R3,CVTSVT               Get address of PSASVT     RS0902
         USING SVT,R3                                            RS0902
         AIF   (NOT D'CVTALR).MDQZOS06 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    MDQZOS06                   no use old             RS0309
         ESAIR R2                      Get current sec. asid     RS0309
         STG   R2,WKCELL1              Save current sec. asid    RS0309
         J     MDQZOS06_1              Jump around               RS0309
.MDQZOS06 ANOP                                                   RS0309
MDQZOS06 DS    0H                                                RS0309
         ESAR  R2                      Get current sec. asid
         STH   R2,WKCELL1              Save current sec. asid
MDQZOS06_1 DS  0H                                                RS0309
         AXSET AX==H'1'                Set auth                  RS0902
         LA    R2,2                    Get 'pcauth' asid         RS0902
         AIF   (NOT D'CVTALR).MDQZOS07 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    MDQZOS07                   no use old             RS0309
         LOCASCB ASID=(R2)             GET ADDR OF OWNER'S ASCB  RS0309
         LTR   R15,R1                  VALID ASID?               RS0309
         JNP   MDQZOS99                NO, JUMP                  RS0309
         USING ASCB,R15                                          RS0309
         L     R1,ASCBASSB-ASCB(R15)   ASSB                      RS0309
         USING ASSB,R1                                           RS0309
         LMH   R2,R2,ASSBISQN             Sequence               RS0309
         SSAIR R2                      Set PCAUTH as secondary   RS0309
         J     MDQZOS07_1              Jump around               RS0309
.MDQZOS07 ANOP                                                   RS0309
MDQZOS07 DS    0H                                                RS0309
         SSAR  R2                      Set PCAUTH as secondary
MDQZOS07_1 DS  0H                                                RS0309
         L     R3,SVTXMD               Cross Memory Directory    RS0902
*        R3 --> XMD in pcauth address space                      RS0902
*        get XMD                                                 RS0902
         LA    R14,XMDLNTH             Set length of receiving field
         SR    R15,R15                 'from' key                RS0902
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
         LA    R3,WORK256                                        RS0902
         USING XMD,R3                                            RS0902
*        #SNAP ADDR=(R3),LENGTH=(R14)  DEBUG                     RS0902
*        Find XMSE                                               RS0902
         ICM   R3,B'1111',XMDR034 (XMDXMSER)   Address of first XMSE
         JZ    MDQZOS90                                          RS0902
         USING XMSE,R3                                           RS0902
*loop                                                            RS0902
MDQZOS10 DS    0H                                                RS0902
         LA    R14,XMSE_LENGTH_ZOS3    Set length of receiving field
         SR    R15,R15                 'from' key                RS0902
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
*        #SNAP ADDR=WORK256,LENGTH=(R14) Debug-Code              RS0902
         LA    R3,WORK256                                        RS0902
         USING XMSE,R3                                           RS0902
*        Find SETC at first just the length                      RS0902
         L     R5,XMSESETC             Address of SETC           RS0902
         LA    R14,L'SETCHDR           Set Header length, the header
*                                      include the current lengthRS0902
         SR    R15,R15                 'from' key                RS0902
         MVCP  WORK256+120(R14),0(R5),R15 Copy data from sec. asid
*        #SNAP ADDR=WORK256+120,LENGTH=(R14)   Debug             RS0902
         LA    R6,WORK256+120          point to the header       RS0902
         USING SETC,R6                 tell assembly             RS0902
         BRASL R14,WORKADDR            get temp storage          RS0902
         LH    R14,SETCLENG            Now using the current length
*                                      (use R6 for SETC)         RS0902
         LR    R6,R1                   Workaddr from R1          RS0902
         SR    R15,R15                 'from' key                RS0902
         LA    R7,256                  length of a single MVCP   RS0902
MDQZOS70 MVCP  0(R14,R6),0(R5),R15     Copy data from sec. asid  RS0902
         BRC   8,MDQZOS73              do we get all data?       RS0902
         AR    R6,R7                    no, setup for the next   RS0902
         AR    R5,R7                        move                 RS0902
         SR    R14,R7                                            RS0902
         J     MDQZOS70                     get the next 256     RS0902
MDQZOS73 DS 0H                         We got it all             RS0902
         LR    R6,R1                   point to the start SETC   RS0902
         LA    R1,=C'No '              Default No                RS0902
         TM    SETCFLG1,SETCLXUS       Is this in use?           RS0902
         JZ    *+8                     No                        RS0902
         LA    R1,=C'Yes'              Yes                       RS0902
MDQZOS77 DS 0H                                                   RS0902
         LH    R14,SETCLENG
*        #SNAP ADDR=(R6),LENGTH=(R14)  The output can be very big !!
         STRING64 2X,(XMSEJOBN),6X,    Jobname                         X
               (XMSEASID,H,R4B),1X,    Asid                            X
               (XMSESTKN,8,X),1X,      SToken                          X
               (XMSESETC,,X),3X,       SETC-Pointer                    X
               (SETCFLG1,,X),2X,       Flag                            X
               ((R1),3),1X,            LX Yes/No                       X
               (SETCTONO,H,R3B),4X,    To counter                      X
               (SETCFRNO,H,R3B),1X,    From counter                    X
               INTO=LINE                                         RS0902
         BRASL R14,SPACE1                                        RS0902
         TM    SETCFLG1,SETCLXUS     Dont examine the connection RS0902
         JO    MDQZOS85                pointer                   RS0902
         LH    R7,SETCFRNO             Count number of TO        RS0902
         AH    R7,SETCTONO             + FROM-connections        RS0902
         LTR   R7,R7                   Check if there is any     RS0902
         JZ    MDQZOS85                  no, NO XMS              RS0902
*  loop                                                          RS0902
MDQZOS80 DS 0H                                                   RS0902
         L     R4,SETCENTP             Connection entry          RS0902
         TM    SETCENTP+3,SETCNOUS     Entry in used X'01' bit 0 RS0902
         JNZ   MDQZOS83_1                no, no need to display  RS0902
         LA    R1,=C'->'    To                                   RS0902
         TM    SETCENTP,X'80'          Is this a to-XMS?         RS0902
         JO    MDQZOS82                  ok, report              RS0902
         LA    R1,=C'<-'    From                                 RS0902
MDQZOS82 DS 0H                                                   RS0902
         LA    R14,XMSE_LENGTH_ZOS3    length of XMSE            RS0902
         SR    R15,R15                 'from' key                RS0902
         MVCP  WORK256+50(R14),0(R4),R15 Copy data from sec. asid
*        #SNAP ADDR=WORK256+50,LENGTH=(R14)
         STRING64 4X,                                                  X
               ((R1),2),1X,            Indicator To/From               X
               (WORK256+78,8),1X,      Jobname                         X
               (WORK256+86,H,R4B),1X,  Asid                            X
               (WORK256+58,8,X),1X,    Stoken                          X
               (SETCENTP,,X),1X,       SETC-Pointer                    X
               INTO=LINE                                         RS0902
         BRASL R14,SPACE1                                        RS0902
MDQZOS83 DS 0H                                                   RS0902
         LA    R6,4(,R6)               point to next connection entry
*                                      R5 is destroyed !!        RS0902
         JCT   R7,MDQZOS80             Do until number of entriesRS0902
         J     MDQZOS85                                          RS1102
MDQZOS83_1 DS 0H                                                 RS0902
         LA    R6,4(,R6)               point to next connection  RS0902
         J     MDQZOS80                                          RS0902
MDQZOS85 DS 0H                                                   RS0902
*        #SNAP ADDR=(R3),LENGTH=50
         ICM   R3,B'1111',XMSEFORW     Next ??                   RS0902
         JNZ   MDQZOS10                                          RS0902
*endloop                                                         RS0902
MDQZOS90 DS 0H                                                   RS0902
         AIF   (NOT D'CVTALR).MDQZOS91 z/OS 1.6                  RS0309
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS0309
         JZ    MDQZOS91                   no use old             RS0309
         LG    R2,WKCELL1                                        RS0309
         SSAIR R2                      Should be same as primary RS0309
         J     MDQZOS91_1              Jump around               RS0309
.MDQZOS91 ANOP                                                   RS0309
MDQZOS91 DS    0H                                                RS0309
         LH    R2,WKCELL1
         SSAR  R2                      Should be same as primary
MDQZOS91_1 DS  0H                                                RS0309
         AXSET AX==H'0'                Reset auth                RS0902
         XC    WKCELL1,WKCELL1                                   RS0902
         BRASL R14,BLANK1              blank line                RS0902
MDQZOS99 DS    0H                                                RS0902
         END_PROC
         TITLE 'SHOWMVS &REL - ETEINFO'                          RS0601
*---------------------------------------------------------------------*
*                                                                     *
*PC usage:                                                            *
*  PC-NO  AKM  ASID Jobname  Entry    Name     Latent-Parms      EKM  *
*  000000 FF00 0002 PCAUTH   8C702DA0          00000000 00000000 8000 *
*  000001 FF00 0002 PCAUTH   8C703730          00000000 00000000 8000 *
*  000002 FF00 0002 PCAUTH   8C704440          00000000 00000000 8000 *
*  000003 FF00 0002 PCAUTH   8C7059B0          00000000 00000000 8000 *
*  000004 FF00 0002 PCAUTH   8C706270          00000000 00000000 8000 *
*  000005 FF00 0002 PCAUTH   8C707858          00000000 00000000 8000 *
*  000006 FF00 0002 PCAUTH   8C708830          00000000 00000000 8000 *
*  000007 FF00 0002 PCAUTH   8C70883A          00000000 00000000 8000 *
*  000008 FF00 0002 PCAUTH   8C708844          00000000 00000000 8000 *
*  000009 FF00 0002 PCAUTH   8C709670          00000000 00000000 8000 *
*  00000A FF00 0002 PCAUTH   8C70967A          00000000 00000000 8000 *
*  00000B FF00 0002 PCAUTH   8C70A180          00000000 00000000 8000 *
*  00000C 8000 0002 PCAUTH   8C70F9B8          00000000 00000000 8000 *
*  00000D FFFF 0002 PCAUTH   813D06B0          00000000 00000000 8000 *
*  00000E FFFF 0002 PCAUTH   813D2EC8          00000000 00000000 8000 *
*  00000F FFFF 0002 PCAUTH   813D3AF8          00000000 00000000 8000 *
*  000010 FFFF 0002 PCAUTH   813D4108          00000000 00000000 8000 *
*  000011 FF00 0002 PCAUTH   813CF6D0          00000000 00000000 8000 *
*  000012 FFFF 0000          813CF698          n/a      n/a      0000 *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
ETEINFO  BEGIN_PROC KW=ETEINFO,AUTH=YES
         AIF    (NOT D'CVTALR).ETEINFO                           RS1104
         TM    CVTFLAG2,CVTALR          ASN/LX Reuse Facility    RS1104
         JO    ETEINF99                 yes, leave               RS1104
.ETEINFO ANOP                           see PCINFO               RS1104
         STRING64 '&TITLEPFX.PC usage:',INTO=LINE
         BRASL R14,SPACE2              single line
         L     R1,CVTPTR(,0)           point at CVT
         USING CVTMAP,R1
         L     R3,CVTSVT               Get address of PSASVT
         USING SVT,R3
         L     R3,SVTXMD               Cross Memory Directory          X
                                         in PC/AUTH address space
         DROP  R3
*        R3 --> XMD in pcauth address space
         ESAR  R2                      Get current sec. asid
         STH   R2,WKCELL1              Save current sec. asid
         AXSET AX==H'1'                Set auth
         LA    R2,2                    Get 'pcauth' asid
         SSAR  R2                      Set pcauth as secondary
* FIND XMD
         LA    R14,XMDLNTH             Set lenth of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
         LA    R4,WORK256              assign R4
         USING XMD,R4                  tell assembly
*        #SNAP ADDR=(R4),LENGTH=XMDLNTH
         MVC   WKCELL1+4(4),XMDSLT     remember SLT address
* FIND LXAT (header)
         L     R3,XMDLXAT              Address of LXAT
         LA    R14,L'LXATHDR           Set lenthg of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  copy data from sec. asid
         LA    R4,WORK256              assign R4
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS1104
         JZ    ETEINF_10                 no, header now          RS1104
         AHI   R3,16                     32 bytes instead of 8   RS1104
ETEINF_10 DS   0H                                                RS1104
*        #SNAP ADDR=(R4),LENGTH=64
         USING LXATHDR,R4              tell assembly
         MVC   WKCELL1+2(2),LXATHILX   remember highest LX
         STRING64 '  PC-NO',2X,'AKM',2X,'ASID',1X,'Jobname',2X,        *
               'Entry',4X,'Name',5X,'Latent-Parms',6X,'EKM',1X,        *
               'Opt',1X,'Key',1X,'EAX',2X,'ASTE',5X,'ARR',             *
               INTO=LINE
         BRASL R14,SPACE1              single line
         SR    R2,R2                   clear loop register
*loop
ETEINF_20 DS   0H
         LH    R1,WKCELL1+2            load highest LX
         CR    R2,R1                   Compare
         JH    ETEINF90                higher ok leave loop
* get LXAT-Entry
         LA    R3,8(,R3)               Bump index up 8 bytes
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS1104
         JZ    ETEINF_22                 no, header now          RS1104
         LA    R3,8(,R3)               Bump index up 8 bytes     RS1104
ETEINF_22 DS   0H                                                RS1104
         LA    R14,8                   Set length of receiving   RS1104
         TM    HBB7709,L'HBB7709       running on z/OS R6        RS1104
         JZ    ETEINF_23                 no, header now          RS1104
         LA    R14,L'LXATINDX          Set length of receiving field
ETEINF_23 DS   0H                                                RS1104
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
         DROP  R4
         LA    R4,WORK256              assign R4
*        #SNAP ADDR=(R4),LENGTH=64
         USING LXATINDX,R4             tell assembly
         TM    LXATFLGS,LXATOWND       Is this LX owned
         JZ    ETEINF_XX               No
         TM    LXATFLGS,LXATSYS        Is this a SYSTEM LX ?
         JZ    ETEINF_XX               No
         LR    R1,R2                   work register
         SLL   R1,2                    *4 length of an entry
         A     R1,WKCELL1+4            + base XMDSTL
         LA    R14,4
         SR    R15,R15                 'from' key
         MVCP  WKCELL2(R14),0(R1),R15  get REAL ETE address
*        #SNAP ADDR=WKCELL1,LENGTH=16  debugcode
         TM    WKCELL2,X'80'           is this active
         JO    ETEINF_XX               no, leave
         MVC   WKCELL2+4(4),WKCELL2    move real ETE to work
         NI    WKCELL2+7,X'C0'         forget the counter (6bits)
         IARR2V RSA=WKCELL2+4,VSA=(R4) convert the real to virt
         L     R6,WKCELL2              the number of ETE's
         SLL   R6,26                   is in the last 6bits
         SRL   R6,26
         LA    R6,1(,R6)               +1
         SLL   R6,2                    multiply by 4
         XC    WKCELL3+4,WKCELL3+4
*  loop
ETEINF_30 DS  0H
         LA    R14,ETE1LEN             length of a single ETE-entry
         SR    R15,R15                 'from' key
         MVCP  WORK256+L'LXATINDX(R14),0(R4),R15 copy data from asid
         LA    R5,WORK256+L'LXATINDX   point to the header
         USING ETE1,R5                                           RS0302
*        #SNAP ADDR=(R5),LENGTH=(R14)  debug code                RS0302
         MVC   WKCELL4,BLANKS          get EP-Name if possible   RS0302
         CSVQUERY SEARCH=LPA,          search LPA                      X
               INADDR=ETE1EPA,            EntryPoint                   X
               OUTEPNM=WKCELL4,        return EP Name                  X
               MF=(E,CSVQRYWK)         work area                 RS0302
         LOCASCB ASID=ETE1ASID         Get addr of ASCB          RS0302
         LTR   R15,R1                  Valid ASID?               RS0302
         JNP   ETEINFO_61              No, jump                  RS0302
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME             RS0302
         JNZ   ETEINFO_62              Yes - continue            RS0302
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON   RS0302
         JNZ   ETEINFO_62              No - continue             RS0302
ETEINFO_61 DS  0H                                                RS0302
         LA    R1,BLANKS               ok no jobname             RS0302
ETEINFO_62 DS  0H                                                RS0302
         ST    R2,WKCELL3              for display               RS0302
         STRING64 2X,(WKCELL3+2,2,X),(WKCELL3+7,1,X),1X,(ETE1AKM,,X),  X
               1X,(ETE1ASID,,X),1X,((R1),8),1X,(ETE1EPA,4,X),          X
               1X,(WKCELL4,8),1X,                                      X
               (ETE1PARMH,,X),1X,(ETE1PARML,,X),1X,(ETE1EKM,,X),1X,    X
               (ETE1OPTB1,,X),2X,(ETE1EK,,X),1X,(ETE1EAX,,X),1X,       X
               (ETE1ASTE,,X),INTO=LINE                           RS0302
         LA    R15,LINE+2(R15)                                   RS0302
         MVI   0(R15),C'S'             Supervior mode (default)  RS0302
         TM    ETE1PBYTE,ETE1PS        Check mode                RS0302
         JNO   *+4+4                     no, setting             RS0302
         MVI   0(R15),C'P'             private mode              RS0302
         TR    LINE,TRTPRINT           get rid of garbage        RS0302
         BRASL R14,SPACE1              single space              RS0302
ETEINFO_70 DS  0H                                                RS0302
         L     R14,WKCELL3+4
         AHI   R14,1
         ST    R14,WKCELL3+4           next PC-NO
         LA    R4,32(,R4)              next ETE
         JCT   R6,ETEINF_30            do until R6 = 0
         BRASL R14,BLANK1              empty line
*  endloop
ETEINF_XX DS   0H
         LA    R2,1(R2)                next LX
         J     ETEINF_20               loop
*endloop
ETEINF90 DS 0H
         LH    R2,WKCELL1              primary
         SSAR  R2                      Should be same as primary
         AXSET AX==H'0'                Reset auth
         XC    WKCELL1,WKCELL1         clear
         BRASL R14,BLANK1              blank line
.ETEINF99 ANOP
ETEINF99 DS    0H
         END_PROC
         TITLE 'SHOWMVS &REL - PCINFO'                           RS0406
*---------------------------------------------------------------------*
*                                                                     *
*PC usage:                                                            *
*  PC-NO  AKM  ASID Jobname  Entry    Name     Latent-Parms      EKM  *
*  000000 FF00 0002 PCAUTH   8C702DA0          00000000 00000000 8000 *
*  000001 FF00 0002 PCAUTH   8C703730          00000000 00000000 8000 *
*  000002 FF00 0002 PCAUTH   8C704440          00000000 00000000 8000 *
*  000003 FF00 0002 PCAUTH   8C7059B0          00000000 00000000 8000 *
*  000004 FF00 0002 PCAUTH   8C706270          00000000 00000000 8000 *
*  000005 FF00 0002 PCAUTH   8C707858          00000000 00000000 8000 *
*  000006 FF00 0002 PCAUTH   8C708830          00000000 00000000 8000 *
*  000007 FF00 0002 PCAUTH   8C70883A          00000000 00000000 8000 *
*  000008 FF00 0002 PCAUTH   8C708844          00000000 00000000 8000 *
*  000009 FF00 0002 PCAUTH   8C709670          00000000 00000000 8000 *
*  00000A FF00 0002 PCAUTH   8C70967A          00000000 00000000 8000 *
*  00000B FF00 0002 PCAUTH   8C70A180          00000000 00000000 8000 *
*  00000C 8000 0002 PCAUTH   8C70F9B8          00000000 00000000 8000 *
*  00000D FFFF 0002 PCAUTH   813D06B0          00000000 00000000 8000 *
*  00000E FFFF 0002 PCAUTH   813D2EC8          00000000 00000000 8000 *
*  00000F FFFF 0002 PCAUTH   813D3AF8          00000000 00000000 8000 *
*  000010 FFFF 0002 PCAUTH   813D4108          00000000 00000000 8000 *
*  000011 FF00 0002 PCAUTH   813CF6D0          00000000 00000000 8000 *
*  000012 FFFF 0000          813CF698          n/a      n/a      0000 *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
PCINFO   BEGIN_PROC KW=PCINFO,AUTH=YES
         AIF    (NOT D'CVTALR).PCINFO99
         TM    CVTFLAG2,CVTALR          ASN/LX Reuse Facility
         JNO   PCINFO99                 no, leave
         STRING64 '&TITLEPFX.PC usage (ASN-LX reusage):',INTO=LINE
         BRASL R14,SPACE2              single line
         L     R1,CVTPTR(,0)           point at CVT
         USING CVTMAP,R1
         L     R3,CVTSVT               Get address of PSASVT
         USING SVT,R3
         L     R3,SVTXMD               Cross Memory Directory          X
                                         in PC/AUTH address space
         DROP  R3
*        R3 --> XMD in pcauth address space
         ESAIR R2                      Get current sec. asid     RS0309
         STG   R2,WKCELL1              Save current sec. asid    RS0309
         AXSET AX==H'1'                Set auth
         LA    R2,2                    Get 'pcauth' asid
         LOCASCB ASID=(R2)             GET ADDR OF OWNER'S ASCB  RS0309
         LTR   R15,R1                  VALID ASID?               RS0309
         JNP   PCINFO99                NO, JUMP                  RS0309
         USING ASCB,R15                                          RS0309
         L     R1,ASCBASSB-ASCB(R15)   ASSB                      RS0309
         USING ASSB,R1                                           RS0309
         LMH   R2,R2,ASSBISQN             Sequence               RS0309
         SSAIR R2                      Set PCAUTH as secondary   RS0309
* FIND XMD
         LA    R14,XMDLNTH             Set lenth of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
         LA    R4,WORK256              assign R4
         USING XMD,R4                  tell assembly
*        #SNAP ADDR=(R4),LENGTH=XMDLNTH
* The virtual address is in XMDSLT
         MVC   WKCELL2+4(4),XMDSLTD    remember real SLT address
*        FIND LXAT (header)
         L     R3,XMDLXAT              Address of LXAT
         LA    R14,L'LXATHDR           Set lenthg of receiving field
         LA    R14,64                  Set lenthg of receiving field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  copy data from sec. asid
         LA    R4,WORK256              assign R4
         AHI   R3,16                     32 bytes instead of 8
PCINFO10 DS    0H
*        #SNAP ADDR=(R4),LENGTH=64
         USING LXATHDR,R4              tell assembly
         MVC   WKCELL2(4),LXATHISLTBLXI remember highest LX      RS0409
         STRING64 '  PC-NO',4X,'AKM',2X,'ASID',1X,'Jobname',2X,        *
               'Entry',4X,'Name',5X,'Latent-Parms',6X,'EKM',1X,        *
               'Opt',1X,'Key',1X,'EAX',2X,'ASTE',5X,'ARR',             *
               INTO=LINE
         BRASL R14,SPACE1              single line
         SR    R2,R2                   clear loop register
*                             WKCELL1      = Current home ASID
*                             WKCELL2+2(2) = highest LX
*                             WKCELL2+4(4) = real SLT address
*                             WKCELL3(4)   = LSX
*                             WKCELL3+4(4) = LFX
*loop
PCINFO20 DS    0H
*        LH    R1,WKCELL2+2            load highest LX
         L     R1,WKCELL2              load highest LX
         CR    R2,R1                   Compare
         JH    PCINFO90                higher ok leave loop
*        get LXAT-Entry
         LA    R3,16(,R3)              Bump index up 16 bytes
PCINFO22 DS    0H
         LA    R14,L'LXATINDX          Set length of receiving field
PCINFO23 DS    0H
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from sec. asid
         DROP  R4
         LA    R4,WORK256              assign R4
*        #SNAP ADDR=(R4),LENGTH=8      Debug code
         USING LXATINDX,R4             tell assembly
         TM    LXATFLGS,LXATOWND       Is this LX owned
         JZ    PCINFO80                No
         TM    LXATFLGS,LXATSYS        Is this a SYSTEM LX ?
         JZ    PCINFO80                No
         CLC   LXATETCT,=H'-1'         Is this a SYSTEM LX ?     RS0706
         JNE   PCINFO80                No                        RS0706
         LR    R1,R2                   Current LX number
         SLL   R1,27                   LSX always last 5 bits
         SRL   R1,27
         ST    R1,WKCELL3              Remember LSX
         LR    R1,R2                   work register
         SRL   R1,5                    remove LSX
         ST    R1,WKCELL3+4            Remember LFX
*        #SNAP ADDR=WKCELL3,LENGTH=8   Debugcode
*        TM    WKCELL3+7,X'40'
*        JNO   PCINFO25
*        BRASL R14,SPACE1              single line
PCINFO25 DS    0H
         L     R7,WKCELL2+4            XMDSLTD
         N     R7,=X'7FFFFFC0'
         IARR2V RSA=(R7)               convert the real to virt
         LTR   R15,R15                 good ??
         JNZ   PCINFO80                No
         L     R5,WKCELL3+4            get first index
         SLL   R5,2                    x4
         ALR   R1,R5                   add to addres
*        L     R5,0(,R1)               PCAUTH asid ||| so we have
         LA    R14,4                   to do a bit more then just the
         SR    R15,R15                 Load
         MVCP  WKCELL4(R14),0(R1),R15
         L     R5,WKCELL4
*
         N     R5,=X'7FFFFFC0'
         IARR2V RSA=(R5)               convert the real to virt
         LTR   R15,R15                 good ??
         JNZ   PCINFO80                No
         L     R5,WKCELL3              get second LSX
         SLL   R5,3                    x8 (length of LSTE)
         ALR   R1,R5
*        L     R0,0(R1)                Calc # of ETEs PCAUTH asid |||
         LA    R14,4 PCAUTH asid ||| so we have
         SR    R15,R15 to do a bit more then just the
         MVCP  WKCELL4(R14),0(R1),R15 Load
         L     R6,WKCELL4              ETE Start address
*
         SLL   R6,26                   Get last 6 bits
         SRL   R6,26                   Get last 6 bits
         LA    R6,1(,R6)               +1
         SLL   R6,2                    multiply by 4
*        L     R0,0(R1)                Calc # of ETEs PCAUTH asid |||
         L     R7,WKCELL4              ETE Start address
         SRL   R7,6                    loose last 6 bits
         SLL   R7,6                    = real Address
         N     R7,=X'7FFFFFC0'
         IARR2V RSA=(R7)               convert the real to virt
         LTR   R15,R15                 good ??
         JNZ   PCINFO80                No
         LR    R4,R1                   laod virtual
         XC    WKCELL3,WKCELL3
*        #SNAP ADDR=WKCELL4,LENGTH=16     debug code
*  loop
PCINFO30 DS   0H
         LA    R14,ETE1LEN             length of a single ETE-entry
         SR    R15,R15                 'from' key
         MVCP  WORK256+L'LXATINDX(R14),0(R4),R15 copy data from asid
         LA    R5,WORK256+L'LXATINDX   point to the header
         USING ETE1,R5
*        #SNAP ADDR=(R5),LENGTH=32     debug code
         MVC   WKCELL4,BLANKS          get EP-Name if possible
         CSVQUERY SEARCH=LPA,          search LPA                      X
               INADDR=ETE1EPA,            EntryPoint                   X
               OUTEPNM=WKCELL4,        return EP Name                  X
               MF=(E,CSVQRYWK)         work area
         LOCASCB ASID=ETE1ASID         Get addr of ASCB
         LTR   R15,R1                  Valid ASID?
         JNP   PCINFO61                No, jump
         ICM   R7,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   PCINFO62                Yes - continue
         ICM   R7,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         JNZ   PCINFO62                No - continue
PCINFO61 DS    0H
         LA    R7,BLANKS               ok no jobname
PCINFO62 DS    0H
         LR    R1,R2                get 31 bits (only 24 counts) RS0409
         ST    R2,WKCELL3                                        RS0409
*        #SNAP ADDR=WKCELL3,LENGTH=8      debug code
         TM    WKCELL3+2,X'08'      is this a large LX ?         RS0409
         JZ    PCINFO64               no, leave                  RS0409
         SLDL  R0,21                the bits to be shifted to R0 RS0409
         SRL   R1,1                 left part is now ready       RS0409
         SRDL  R0,20                back to right pos            RS0409
         STCM  R1,B'1111',WKCELL3                                RS0409
         OI    WKCELL3+2,X'08'      mark as large LX             RS0409
         L     R1,WKCELL3                                        RS0409
PCINFO64 DS    0H
*        #SNAP ADDR=WKCELL3,LENGTH=8      debug code
*        STRING64 2X,(WKCELL3+2,3,X),(WKCELL3+7,1,X),1X,(ETE1AKM,,X),  X
               1X,(ETE1ASID,,X),1X,((R1),8),1X,(ETE1EPA,4,X),          X
               1X,(WKCELL4,8),1X,                                      X
               (ETE1PARMH,,X),1X,(ETE1PARML,,X),1X,(ETE1EKM,,X),1X,    X
               (ETE1OPTB1,,X),2X,(ETE1EK,,X),1X,(ETE1EAX,,X),1X,       X
               (ETE1ASTE,,X),INTO=LINE
         STRING64 2X,(WKCELL3+1,3,X),(WKCELL3+7,1,X),1X,(ETE1AKM,,X),  X
               1X,(ETE1ASID,,X),1X,((R7),8),1X,(ETE1EPA,4,X),          X
               1X,(WKCELL4,8),1X,                                      X
               (ETE1PARMH,,X),1X,(ETE1PARML,,X),1X,(ETE1EKM,,X),1X,    X
               (ETE1OPTB1,,X),2X,(ETE1EK,,X),1X,(ETE1EAX,,X),1X,       X
               (ETE1ASTE,,X),INTO=LINE
         LA    R15,LINE+2(R15)
         MVI   0(R15),C'S'             Supervior mode (default)
         TM    ETE1PBYTE,ETE1PS        Check mode
         JNO   *+4+4                     no, setting
         MVI   0(R15),C'P'             private mode
         TR    LINE,TRTPRINT           get rid of garbage
         BRASL R14,SPACE1              single space
PCINFO70 DS    0H
         L     R14,WKCELL3+4
         AHI   R14,1
         ST    R14,WKCELL3+4           next PC-NO
         LA    R4,32(,R4)              next ETE
         JCT   R6,PCINFO30             do until R6 = 0
         BRASL R14,BLANK1              empty line
*  endloop
PCINFO80 DS    0H
         LA    R2,1(R2)                next LX
         J     PCINFO20                loop
*endloop
PCINFO90 DS 0H
         LG    R2,WKCELL1                                        RS0309
         SSAIR R2                      Should be same as primary RS0309
         AXSET AX==H'0'                Reset auth
         XC    WKCELL1,WKCELL1         clear
         BRASL R14,BLANK1              blank line
.PCINFO99 ANOP
PCINFO99 DS    0H
         END_PROC
         TITLE 'SHOWMVS &REL - ENF Listener'
*---------------------------------------------------------------------*
*                                                                     *
*ENF Listener                                                         *
*                                                                     *
* ENFC  Type                     Entry    Name     Established by     *
*                                                                     *
* 1 01  Vary Device online       85627810 IGWLHHLS 85628F5A           *
*                                                                     *
* 2 02  Vary Device offline      00BDA098 ICVCMM01 50050CD8           *
*                                                                     *
* 3 03  Volume unload            813D6028          40050DC6           *
*                                813B2C88          8E8079B6           *
*                                81399F8A          8E807A36           *
*                                8142B868          8E807AB6           *
*                                                                     *
* 4 04  Free SQA                                                      *
* 5 05  Commtask/TOD compl.      84FF4EE8 IFAENFL  80011BE2           *
*                                864F5036 ERBMFEAR 8002D526           *
*                                864F5030 ERBMFEAR 8002D526           *
*                                                                     *
*---------------------------------------------------------------------*
ENF00    BEGIN_PROC KW=ENF00,AUTH=YES
         MODESET EXTKEY=ZERO        <- switch to KEY=0
         STRING64 '&TITLEPFX.ENF Listener',INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R3,CVTENFCT             IEFENFCT
         USING ENFCT,R3
*        #SNAP ADDR=(R3),LENGTH=88     debug
         L     R6,ENFCMAX              max no of events
         L     R4,ENFCVT
         USING ENFV,R4
*        #SNAP ADDR=(R4),LENGTH=256    debug
         LHI   R7,1
         STRING64 '  ENFC  Type',21X,'Entry    Name',5X,               X
               'Established by',22X,'F1 MskF2 Qual',INTO=LINE
         BRASL R14,SPACE2
*loop
ENF02    DS    0H
*        #SNAP ADDR=(R4),LENGTH=30     debug
         LR    R0,R7                   ENF code
         ST    R7,WKCELL1
         BRASL R14,SCANTBLE            find ENF type
         STRING64 ((R7),,R3B),1X,(WKCELL1+3,1,X),2X,                   X
               (2(R1),(R2)),INTO=(LINE,32)
         ICM   R5,B'1111',ENFVPTR       empty ?
         JZ    ENF08                    yes next
         USING ENFL,R5
*  loop
ENF03    DS    0H
         MVC   WKCELL4,BLANKS          get EP-Name if possible
         CSVQUERY SEARCH=JPALPA,       search LPA                      +
               INADDR=ENFLRTN,            EntryPoint                   +
               OUTEPNM=WKCELL4,        return EP Name                  +
               MF=(E,CSVQRYWK)         work area
         ST    R7,WKCELL1
         STRING64 (LINE,32),1X,(ENFLRTN,4,X),1X,(WKCELL4,8),1X,        X
               (ENFLR14,4,X),1X,ENFLENME,1X,ENFLXNME,1X,ENFLJNME,1X,   X
               (ENFLFLGS,,X),1X,(ENFLQMSK,,X),1X,(ENFLFLG2,,X),1X,     X
               (ENFLQUAL,4,X),INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1
*        #SNAP ADDR=(R5),LENGTH=28
         ICM   R5,B'1111',ENFLNPTR    Next entry?
         JNZ   ENF03                    yes, process
         J     ENF09                    no, leave
*endloop
ENF08    DS    0H
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1
ENF09    DS    0H
         AHI   R7,1
         LA    R4,L'ENFV_ENTRY(R4)
         JCT   R6,ENF02
         BRASL R14,BLANK1
         STRING64 '  F1 : 80-Err 40-Disable 20-EOT 10-EOM',            X
               ' 08-SRBExit/Exit 04-XSYS',INTO=LINE
         BRASL R14,SPACE2
ENF99    DS    0H
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
         END_PROC
*
*----------------------------------------------------------------------
*        SCAN ENF Code Table
*----------------------------------------------------------------------
*
SCANTBLE LARL  R1,ENFCODET             ENF Code
         SLR   R2,R2
*LOOP
SCANTBLE2 DS   0H
         IC    R2,1(,R1)               Pick up entry length
         CLM   R0,B'0001',0(R1)        Compare ENFCode with InzCode
         BER   R14                     Equal, return
         LA    R1,2(R2,R1)             Bump to next entry in the table
         CLI   0(R1),X'FF'             End of Table?
         JNE   SCANTBLE2               No, try next Entry
*ENDLOOP
         LA    R1,BLANKS               Unknown ENFCode
         LA    R2,1                    Length=1
         BR    R14
*
ENFCODET TABLE 1,'Vary Device online','Vary Device offline',           X
               'Volume unload','Free SQA','Commtask/TOD compl.',       X
               'CM Block Change','Reserved',                           X
               'Path State change','Channel Path Change',              X
               'DDR Swap','Failure of CMF','Device Pending offline',   X
               'WTO Buffer Util.','JES3 Buffer Util.',                 X
               'SM Subsys Res. avail.','Volume becoming avail.',       X
               'Console Status Change','Reconf CPU on/off Crypto',     X
               'Signals Crypto avail.','Unsol. Signal Interrupt',      X
               'Change DASD MIH Interval','Signals Crypto offline',    X
               'Vary Device online','Vary Device offline',             X
               'Volume unload','Change Device State','DDR Swap',       X
               'Path State Change','Device Pending offline',           X
               'Volume becoming avail.','Config Change req.',          X
               'Config Change complete','Device State Change',         X
               'Machinechk SCLP Damage','XSYS Lock.Service',           X
               'LOGREC written','SMF Interval Sync Support',           X
               'An ARM Event occurred','Reserved','JES init or term',  X
               'A WLM Event occurred','A SRM Event occurred',          X
               'New samp data avail.','Subch. CRW received',           X
               'SMSVSAM server up','An OMVS event occ.',               X
               'DAE Threshold met','A LOGR Event occ.',                X
               'SETLOGRC issued','PAV Capacity Change',                X
               'A GRS event occ.','LNKLST activation',                 X
               'ETR State Change','A SDUMP Event occ.',                X
               'A SRM Event occ.','WLM Change for JOB',                X
               'WLM Resource Change','JES Sysout Change',              X
               'BOSS','Transaction Trace','Issued by WLM',             X
               'RACF','Issued by IOS','GDPS','AXR',              RS0806X
               'CEA','Healthcheck','BCPii',                      RS0909X
               'DB2 Offload','JES2 Job State change',      RS0210JH1303X
               'RACF','HSM',                                     JH1303X
               'System Symbols updated',                         JH1303X
               'Testing SRBEXIT/EXIT X-sys notification',        JH1303X
               'Same as above but using FLTRBLK exit',           JH1303X
               'Testing SRBEXIT only',                           JH1303X
               'Testing EXIT only',                              JH1303X
               'JES2 CEAS notify function',                      JH1303X
               'RACF',                                           JH1303X
               'CommServer rpcbind notification'                 JH1303
         TITLE 'SHOWMVS  - Task Queue Element (only DIE)'        RS0107
*---------------------------------------------------------------------*
*                                                                     *
*ENF Listener                                                         *
*                                                                     *
TQE00    BEGIN_PROC KW=TQE00,AUTH=YES
         MODESET EXTKEY=ZERO        <- switch to KEY=0
         STRING64 '&TITLEPFX.Timer Queue Elements TQE (only DIE)',     X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  Expire Time(CET) Asid xAsid Jobname  Exit     ',  X
               'Program  Flags  Type ',INTO=LINE
         BRASL R14,SPACE1              Double Space
         L     R3,CVTPCCAT             PCCA VECTOR Table
         ICM   R5,B'1111',0(R3)        PCCA
         JZ    TQE97                   Yes CPU active
         USING PCCA,R5
         ICM   R6,B'1111',PCCATQEP     First TQE for this CPU
         JZ    TQE97
         USING TQE,R6
*Loop
TQE02    DS    0H
         CLI   TQEVAL,X'FF'            End of used TQE ?
         JE    TQE97                     yes leave
         TM    TQEFLGS2,TQELM+TQEOPT+TQEMF1+TQEMIDN
         JM    TQE03                   yes mixed (some bits are on)
         TM    TQEFLGS3,TQEDIE         Is it a DIE TQE?
         JZ    TQE10                     no, ignore
         TM    TQEFLGS,TQETYPE         Is it a real
         JO    TQE03                     yes, report
         J     TQE10                   ignore all other TQE
TQE03    DS    0H
*        #SNAP ADDR=(R6),LENGTH=16
         LA    R1,TQEVAL               pass TOD clock value
         BRASL R14,STCKCONV
         CSVQUERY SEARCH=LPA,          search LPA                      X
               INADDR=TQEEXIT,            EntryPoint                   X
               OUTEPNM=WKCELL4,        return EP Name                  X
               MF=(E,CSVQRYWK)         work area
         ICM   R4,B'0011',TQEAID       Asid?
         JZ    TQE04                   no
         LOCASCB ASID=(R4)             Get addr of ASCB
         LTR   R15,R1                  Valid ASID?
         JNP   TQE04                   No, jump
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         JNZ   TQE05                   Yes - continue
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         JNZ   TQE05                   No - continue
TQE04    DS    0H
         LA    R1,BLANKS               no jobname present
TQE05    DS    0H
         STRING64 2X,(STCKTIME,,8),6X,(TQEAID,H,R4B),1X,(TQEAID,2,X),  X
               2X,((R1),8),1X,(TQEEXIT,4,X),1X,(WKCELL4,8),1X,         X
               (TQEFLGS,1,X),(TQEFLGS2,1,X),(TQEFLGS3,1,X),INTO=LINE
         TR    LINE,TRTPRINT
         LA    R4,LINE+1(R15)
        #STATUS TQEFLGS,TQETYPE,'Real'
        #STATUS TQEFLGS2,TQEUSER,'User'
        #STATUS TQEFLGS2,TQELM,'TimeLimit'
        #STATUS TQEFLGS2,TQEOPT,'SRM'
        #STATUS TQEFLGS2,TQEMF1,'RMF'
        #STATUS TQEFLGS2,TQEMIDN,'Midnight'
         BRASL R14,SPACE1              Single Space
TQE10    DS    0H
         ICM   R6,B'1111',TQEFLNK      forword pointer
         JNZ   TQE02                   do until zero
*endloop
TQE97    DS    0H
TQE99    DS    0H
         BRASL R14,BLANK1              Empty line
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
         END_PROC
         TITLE 'SHOWMVS &REL - Program Properties Table (PPT)'
*---------------------------------------------------------------------*
*                                                                     *
*Program Properties Table (PPT)   (requires authorization)            *
*                                                                     *
*  Addr(03DFF738)   Entries used(47)   Entries available(45)          *
*                                                                     *
*    PGMNAME(ISTINM01)    KEY(6) Nocancel Noswap SYST Pass            *
*    PGMNAME(IKTCAS00)    KEY(6) Nocancel Priv SYST                   *
*    PGMNAME(AHLGTF)      KEY(0) Nocancel Noswap SYST                 *
*                                                                     *
*---------------------------------------------------------------------*
PPT00    BEGIN_PROC KW=PPTLIST,AUTH=YES                          RS0302
         STRING64 '&TITLEPFX.Program Properties Table (PPT)',INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R5,CVTJESCT
         USING JESCT,R5
         L     R6,JESPPT               PPT ADDRESS
         USING PPT,R6
*
         MODESET EXTKEY=ZERO        <- switch to KEY=0
         LH    R0,PPTUSED              number of PPT entries used
         LH    R1,PPTENTS              number of PPT entries
         SLR   R1,R0                   number of free PPT entries
         LH    R2,PPTENTS              number of PPT entries
         LH    R3,PPTHDRLN             length of PPT header
         LH    R4,PPTENTLN             length of a PPT entry
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
         DROP  R6                      PPT
         STRING64 '  Address(',(JESPPT,,X),') ',                       X
               '  Entries_used(',((R0),,L),') ',                       X
               '  Entries_available(',((R1),,L),') ',INTO=LINE
         BRASL R14,SPACE2              Double Space
         AL    R3,JESPPT               point to first PPT entry
         USING PPTENTRY,R3
*LOOP
PPT21    SLR   R15,R15                 source key is KEY 0
         MVCK  WORK256(R4),0(R3),R15   Move PPTENTRY
         LA    R5,WORK256              copy of PPTENTRY
         USING PPTENTRY,R5
         CLI   PPTNAME,C' '            available entry?
         JNH   PPT28                   yes, ignore it
         STRING64 '    Pgmname(',(PPTNAME,,T),')',INTO=LINE
         LA    R6,LINE+25              variable data
         TM    PPTBYTE1,PPTSKEY        is PPTKEY valid?
         JZ    PPT24                   no, jump
         SLR   R0,R0
         ICM   R0,B'1000',PPTKEY       KEY=F0000000
         SRL   R0,28                   KEY=0000000F
         STRING64 'KEY(',((R0),,L),')',INTO=((R6),8)
         LA    R6,1(R15,R6)            variable data
PPT24    BRASL R1,PPT242
         DC    AL1(PPTNCNCL),C'Nocancel  '
         DC     AL1(PPTNSWP),C'Noswap    '
         DC     AL1(PPTPRIV),C'Priv      '
         DC    AL1(PPTSYSTK),C'SYST      '
         DC     AL1(PPTNDSI),C'Nodsi     '                     JWMMAY95
         DC    AL1(PPTNOPAS),C'Nopass    '                     JWMMAY95
         AIF   (NOT D'CVTH7750).PPT241   z/OS R10 ? No           RS0908
         DC    AL1(PPTNHUSI),C'NoRegLimit'                       RS0908
.PPT241  ANOP
         DC    X'00',0H'0'             end of table
*PPT241TM TM    PPTBYTE1,*-*            check properties
*--LOOP
PPT242   IC    R15,0(,R1)              pick up TM mask
*        EX    R15,PPT241TM            test UPT switch
         EX    R15,=S(X'100'(R9),8(R5)) TM    PPTBYTE1,*-*
         JZ    PPT246                  jump if off
         STRING64 (1(R1),10,T),INTO=((R6),10)
         LA    R6,1(R15,R6)            bump pointer
PPT246   LA    R1,1+10(,R1)
         CLI   0(R1),0                 end of table?
         JNE   PPT242                  not yet, loop
*--ENDLOOP
PPT25    BRASL R1,PPT252                                       JWMMAY95
         DC    AL1(PPT2LPU),C'Spref '                          JWMMAY95
         DC    AL1(PPT1LPU),C'Lpref '                          JWMMAY95
         DC    AL1(PPTN2LP),C'Nopref'                          JWMMAY95
         DC    X'00',0H'0'             end of table            JWMMAY95
*PPT251TM TM    PPTPUBYT,*-*           check properties        JWMMAY95
*--LOOP
PPT252   IC    R15,0(,R1)              pick up TM mask         JWMMAY95
*        EX    R15,PPT251TM            test UPT switch         JWMMAY95
         EX    R15,=S(X'100'(R9),12(R5)) TM    PPTPUBYT,*-*     CS1105
         JZ    PPT256                  jump if off             JWMMAY95
         STRING64 (1(R1),06,T),INTO=((R6),06)                  JWMMAY95
         LA    R6,1(R15,R6)            bump pointer            JWMMAY95
PPT256   LA    R1,1+06(,R1)                                    JWMMAY95
         CLI   0(R1),0                 end of table?           JWMMAY95
         JNE   PPT252                  not yet, loop
*--ENDLOOP
         TM    PPTORIG,PPTDEFLT        PPT entry, default      JWMMAY95
         JZ    PPT271                  no                      JWMMAY95
         STRING64 '- Default',INTO=((R6),9)                    JWMMAY95
         J     PPT272                                          JWMMAY95
PPT271   STRING64 '- Parmlib',INTO=((R6),9)                    JWMMAY95
PPT272   DS    0H                                              JWMMAY95
         BRASL R14,SPACE1          <== yes, next line
PPT28    ALR   R3,R4                   Add length of a PPT entry
         JCT   R2,PPT21                loop thru table
*ENDLOOP
         BRASL R14,BLANK1              BLANK LINE
PPT99    END_PROC
         TITLE 'SHOWMVS &REL - User I/O Appendages'
*---------------------------------------------------------------------*
*                                                                     *
*I/O Appendages                                                       *
*                                                                     *
*  EOE=(),SIO=(),PCI=(),CHE=(E4),ABE=(E4)                             *
*                                                                     *
*---------------------------------------------------------------------*
APP00    BEGIN_PROC KW=APPENDAGES                                RS0302
         L     R7,CVTAIDVT             Appendage ID Vector Table
         USING APPNMTBL,R7
         STRING64 '&TITLEPFX.I/O Appendages:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         BRASL R4,APP10                branch around table, set R5
         DC    C'EOESIOPCICHEABE',X'FF'
APP10    LA    R5,APPENTRY             first entry
         USING APPENTRY,R5
         MVC   LINE,BLANKS             init line
         MVI   LINE,C','               init line
*loop
APP11    STRING64 (LINE,,T),',',((R4),3),'=(',INTO=LINE
         LH    R2,APPCOUNT             get number of names
         LTR   R2,R2                   do we have any?
         JZ    APP17                   no, do next one
         LA    R3,APPNAMID-APPNMTBL(R7) point to APPNAMID
         AH    R3,APPOFFST             addr of 1st ID
*--loop
APP13    STRING64 (LINE,,T),((R3),2),',',INTO=LINE
         LA    R3,2(,R3)               next ID
         JCT   R2,APP13                process all IDs
*--endloop
         BCTR  R15,0
APP17    LA    R15,LINE(R15)           end of line
*        CLI   0(R15),C','             change last , to )
*        JNE   APP18                   change last , to )
*        BCTR  R15,0
APP18    MVI   0(R15),C')'             change last , to )
         LA    R5,L'APPENTRY(,R5)      next entry
         LA    R4,3(,R4)               next name
         CLI   0(R4),X'FF'             5 names processed?
         JNE   APP11                   no, do next one
*endloop
         MVC   LINE(2),BLANKS          remove ,,
         BRASL R14,SPACE2              Double Space
APP99    END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*Resource Manager List (IEAVTRML)                                     *
*                                                                     *
*---------------------------------------------------------------------*
RML00    BEGIN_PROC KW=RML                                       RS0302
         STRING64 '&TITLEPFX.Resource Manager List (IEAVTRML)',        X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R3,CVTABEND             SECONDARY CVT
         L     R4,SCVTRG2B-SCVTSECT(,R3) 2ND ENTRY POINT IN IEAVTRG2
         L     R5,12(,R4)              IEAVTRML TABLE
         CLI   0(R5),0                 Any entries?
         JE    RML80                   no, exit
*loop
RML11    EQU   *
         STRING64 2X,((R5),8),1X,(8(R5),4,X),INTO=LINE
         BRASL R14,SPACE1              Single Space
         LA    R5,12(,R5)              POINT TO NEXT TABLE ENTRY
         CLI   0(R5),0                 END OF TABLE?
         JNE   RML11                   No, print next entry
*endloop
         J     RML98
*
RML80    STRING64 '  (no entries)',INTO=LINE
         BRASL R14,SPACE1              Single Space
RML98    BRASL R14,BLANK1              BLANK LINE
RML99    END_PROC
         TITLE 'SHOWMVS &REL - Product Enable/Disable'
***********************************************************************
*                                                                     *
*Registered Products                                                  *
*                                                                     *
*  PRODUCT OWNER(IBM CORP)                                            *
*          NAME(OS/390)                                               *
*          ID(5645-001)                                               *
*          VERSION(01) RELEASE(01) MOD(00)                            *
*          FEATURENAME(JES2)                                          *
*          FLAGS(80)                                                  *
*          INSTANCES(1)                                               *
*                                                                     *
***********************************************************************
PRED00   BEGIN_PROC KW=PRED                                      RS0302
         BRASL R14,WORKADDR            GET ADDR OF A 32K WORK AREA
         ST    R0,WKCELL1              SAVE LENGTH
         LR    R4,R1                   SAVE ADDRESS
         USING EDAAHDR,R4
         XCALL IFAEDLIS,                                               X
               (=A(IFAEDLIS_TYPE_REGISTERED+IFAEDLIS_TYPE_STATE),      X
               =CL16'*',               PRODUCT OWNER                   X
               =CL16'*',               PRODUCT NAME                    X
               =CL16'*',               FEATURE NAME                    X
               =CL16'*',               PRODUCT ID                      X
               WKCELL1,                LENGTH OF ANSWER AREA           X
               EDAAHDR,                ANSWER AREA                     X
               WKCELL1+4)              RETURN CODE
         L     R5,EDAAHFIRSTRADDR      FIRST REGISTERED PRODUCT
         STRING64 '&TITLEPFX.Registered Products',INTO=LINE
         BRASL R14,SPACE2              DOUBLE SPACE
         BRASL R7,PRED20               EDIT ENTRIES
         L     R5,EDAAHFIRSTSADDR      FIRST UN-REGISTERED PRODUCT
         STRING64 '&TITLEPFX.Unregistered Products',INTO=LINE
         BRASL R14,SPACE2              DOUBLE SPACE
         BRASL R7,PRED20               EDIT ENTRIES
         J     PRED99                  exit
*---------------------------------------------------------------------*
*        PRINT PRODUCT DESCRIPTIONS                                   *
*---------------------------------------------------------------------*
PRED20   LTR   R5,R5                   ANY ENTRIES?
         BZR   R7                      NO, GOBACK
         USING EDAAE,R5
         STRING64 '  Product Owner    Name             ID       Ver ', X
               'Rel Mod Feature-Name     Flags Instances',INTO=LINE
         BRASL R14,SPACE2              DOUBLE SPACE
*LOOP
PRED21   STRING64 2X,(EDAAEPRODOWNER),1X,                              x
               (EDAAEPRODNAME),1X,                                     x
               (EDAAEPRODID),1X,                                       x
               (EDAAEPRODVERS),2X,                                     x
               (EDAAEPRODREL),2X,                                      x
               (EDAAEPRODMOD),2X,                                      x
               (EDAAEFEATURENAME),1X,                                  x
               (EDAAEFLAGS,,X),4X,                                     x
               (EDAAENUMINSTANCES,F,L),INTO=LINE
         BRASL R14,SPACE1              SINGLE SPACE
         ICM   R5,B'1111',EDAAENEXTADDR MORE PRODUCTS?
         JNZ   PRED21                  YES, LOOP
*ENDLOOP
         BRASL R14,BLANK1              BLANK LINE
         BR    R7                      goback
PRED99   END_PROC
         TITLE 'SHOWMVS &REL - On-line Devices'
*---------------------------------------------------------------------*
*                                                                     *
*Device Class: TAPE                                                   *
*                                                                     *
*  Unit Names:      3490      3480      3400-5    CART      TAPE      *
*                                                                     *
*  UCBs:     32 (defined)      2 (on-line)                            *
*                                                                     *
*   DEVN  UCBTYP    Unitname  Volser Status                           *
*                                                                     *
*    480  78048081  3490             Not-ready K 022917               *
*    391  78008080  3480      123456 Private J=NBQ0001B Not-ready     *
*                                                                     *
*Device Class: DASD                                                   *
*                                                                     *
*  Unit Names:      3390      3380      DISK      SYSDA               *
*                   VIO       SYSALLDA                                *
*                                                                     *
*  UCBs:    416 (defined)     65 (on-line)                            *
*                                                                     *
*   DEVN  UCBTYP    Unitname  Volser  Status                          *
*                                                                     *
*    2C4  3010200E  3380K     STD008 SMS SG=STD3380  Enabled     85%  *
*    265  3010200E  3390      SYS430 Resident Private System          *
*                                                                     *
*---------------------------------------------------------------------*
DEVICES  BEGIN_PROC KW=DEVICES                                   RS0302
         LLGTR R2,R2                   Make valid 31-bit address JH1214
         LLGTR R3,R3                   Make valid 31-bit address JH1214
         LLGTR R4,R4                   Make valid 31-bit address JH1214
         LLGTR R5,R5                   Make valid 31-bit address JH1214
         LLGTR R6,R6                   Make valid 31-bit address JH1214
         LLGTR R7,R7                   Make valid 31-bit address JH1214
         LLGTR R8,R8                   Make valid 31-bit address JH1214
         LLGTR R9,R9                   Make valid 31-bit address JH1214
         LLGTR R10,R10                 Make valid 31-bit address JH1214
         LLGTR R11,R11                 Make valid 31-bit address JH1214
         LLGTR R12,R12                 Make valid 31-bit address JH1214
         L     R3,CVTDCQA              GET DCQ ADDRESS
         L     R3,DCQFIRST-DCQ(,R3)    GET FIRST DCQ ADDRESS
         USING DCQELMNT,R3             DCQ element
*loop
DEV101   DS    0H
DEV101B  MVC   UNITNAME+18(1),DCQDEVCL Device class code
         XCALL IEFEB4UV,                                               X
               (UNITNAME,              IEFEB4UV parm list              X
               =AL1(0,RETNNAME)),      return list of unit-names       X
               ERRET=DEV190            error, try next device class
         L     R4,UNITNAME+4           point to the returned work area
         ICM   R5,B'1111',4(R4)        get the number of unit-names
         JZ    DEV180                  none found, try next class
         STRING64 '&TITLEPFX.Device Class: ',DCQDEVNM,INTO=LINE
         BRASL R14,SPACE2              Double Space
         LA    R6,8(,R4)               first unit name
         STRING64 '  Unit Names:',INTO=LINE
         J     DEV122                  first time, jump
*--loop
DEV121   LA    R1,8                    length of an entry
         LNR   R1,R1                   make it negative
         A     R1,ZSCREENW             add screen width
         LA    R0,LINE(R1)             calculate last position
         CR    R2,R0                   end of line reached yet?
         JL    DEV124                  no, jump
         BRASL R14,SPACE1          <== yes, next line
         MVC   LINE,BLANKS             CLEAR OUT MSG AREA
DEV122   LA    R2,LINE+19              Point to beginning of line
*
DEV124   MVC   0(8,R2),0(R6)           MOVE UNITNAME TO BUFFER
         LA    R6,8(,R6)               GO TO NEXT UNIT NAMES (RETURNED)
         LA    R2,10(,R2)              Bump pointer in print line
         JCT   R5,DEV121               next unit name
*--endloop
         BRASL R14,SPACE2              Double Space
DEV180   L     R0,0(,R4)               get sub-pool and length
         L     R5,4(,R4)               save number of unit-names
         FREEMAIN R,A=(R4),LV=(R0)
         LTR   R5,R5                   any unit-name processed?
         JZ    DEV190                  none, try next class
*
*        Display on-line devices
*
         SLR   R2,R2                   UCB count
         SLR   R7,R7                   first time switch
*--loop
DEV201   BRASL R14,DEV800           <- get a UCB address
         LTR   R7,R7                   EOF?
         JZ    DEV220                  yes, exit
         USING UCBOB,R7
         TM    UCBSTAT,UCBONLI         THIS UNIT ONLINE?
         JNO   DEV201                  NO, IGNORE IT
         LA    R2,1(,R2)               count on-line devices
         J     DEV201                  next UCB
*--endloop
DEV220   STRING64 '  UCBs:',((R4),,R7B),' (defined)',                  X
               ((R2),,R7B),' (on-line)',INTO=LINE
         BRASL R14,SPACE2              Double Space
         LTR   R2,R2                   any on-line devices?
         JZ    DEV190                  no, exit
*
         STRING64 '   DEVN  UCBTYP    Unitname S Volser  Status',      X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         SLR   R7,R7                   first time switch
*--loop
DEV221   BRASL R14,DEV800           <- get a UCB address
         LTR   R7,R7                   EOF?
         JZ    DEV280                  yes, exit
         TM    UCBSTAT,UCBONLI         THIS UNIT ONLINE?
         JNO   DEV228                  NO, IGNORE IT
         BRASL R14,GETUNIT             GET UNITNAME
*
DEV227   UCB_NAME RIGHT                get 4-character device number
         STRING64 3X,UCB_NAME,2X,(UCBTYP,4,X),2X,UNITNAME,INTO=LINE
         TM    UCBTBYT2,UCB2OPT2       SHARED?  X'20'
         JZ    DEV227S                 No, jump
         TM    UCBTBYT3,UCB3DACC       DASD?
         JZ    DEV227S                 No, jump
         LA    R1,LINE(R15)            point at 1st space
         MVI   1(R1),C'S'              flag this device with an S
DEV227S  EQU   *
         LTR   R6,R6                   ULUT available?
         JZ    DEV228S                 no, jump
         CLI   WKCELL4,C'3'            If version3 ULUT          RS0115
         JNE   DEV227S3                ...jif not, treat as V1/V2RS0115
         SAM64                                                   JH1214
DEV227S3 DS    0H                                                JH1214
         TM    ULUEFLGS-ULUENTRY(R6),ULUEDYN  Dynamic UCB?
         SAM31                                                   JH1214
         JZ    DEV228S                 no, jump
         MVI   LINE+3+L'UCB_NAME,C'.'  yes, mark it with a "."
DEV228S  STRING64 '.UCB=',((R7),,R10Z),INTO=LINE_UCB
LINE_UCB EQU   LINE+30,15              ucbaddr in line
         BRASL R14,SPACE1          <== next line
DEV228   J     DEV221                  Next UCB
*--endloop
DEV280   BRASL R14,BLANK1              BLANK LINE
*
DEV190   ICM   R3,B'1111',DCQCHAIN     NEXT DCQ ELEMENT
         JNZ   DEV101                  process it
*endloop
         J     DEV999                  exit
*
*        sub-routine: get address of next UCB
*
DEV800   DS    0H
*                                                                JH1214
*        ULUT processing common to all ULUT versions             JH1214
*         -IOSDIOVT macro changed...IOVT3LUT field added.        JH1214
*
DEV821   LTR   R7,R7                   first time?
         JP    DEV824                  no, jump Version check    RS0505
*                                                                JH1214
*        ULUT processing common to all ULUT versions             JH1214
*                                                                JH1214
         LLGTR R6,R6                   Make acceptable 31-bit §  JH1214
         L     R6,CVTIXAVL             IOCOM                     JH1214
         L     R6,IOCIOVTP-IOCOM(,R6)  IOS Vector Table          JH1214
         L     R5,IOVTULUT-IOVT(,R6)   UCB look-up table
         USING ULUT,R5
         LTR   R5,R5                   ULUT pointer present?     RS0115
         JNZ   DEV821AA                ..jif present ULUT V1/V2  RS0115
         LG    R5,IOVT3LUT-IOVT(,R6)   Pick up ULUT V3 address   RS0115
         SAM64                         Go to 64-bit AMODE        JH1214
         CLI   ULUTVERS,X'03'          Is this Version3 ULUT ?   JH1214
         SAM31                         Return to 31-bit AMODE    JH1214
         JNE   DEV821AC                ...treat as V1 ULUT       JH1214
         MVI   WKCELL4,C'3'            Set V3 ULUT flag          JH1214
         J     DEV821V3                ...and go process         JH1214
DEV821AA DS   0H                                                 JH1214
         MVI   WKCELL4,C'1'            default version1          RS0505
         CLI   ULUTVERS,X'02'          Is this Version1 ULUT ?   RS0405
         JNE   DEV821AB                ...jif not                JH1214
         MVI   WKCELL4,C'2'            Set V2 ULUT flag          JH1214
         J     DEV821V2                Go handle V2 ULUT         JH1214
DEV821AB DS    0H                                                JH1214
DEV821AC DS    0H                                                JH1214
.DEV821AC ANOP                                                   JH1214
         L     R1,ULUTUCBC             # of UCB look-up entries
         SLR   R4,R4                   UCB counter
         L     R6,ULUT1ST              first UCB look-up entry
         USING ULUENTRY,R6
*loop
DEV822   L     R7,ULUEUCBP             get ucb address
         CLC   DCQDEVCL,UCBTBYT3       right device class?
         JNE   DEV823                  no, ignore it
         LA    R4,1(,R4)               count UCB's in this class
DEV823   LA    R6,ULUENTRY+ULUELEN     next look-up entry
         JCT   R1,DEV822               count UCBs
*endloop
         L     R6,ULUT1ST              first UCB look-up entry
         J     DEV826
DEV824   DS    0H                      Check version of ULUT     RS0505
         CLI   WKCELL4,C'2'            If version2               RS0505
         JE    DEV825V2                   goto Version2
         CLI   WKCELL4,C'3'            If version3               JH1214
         JNE   DEV825                  ...jif not, treat as V1   JH1214
         SAM64                                                   JH1214
         LLGTR R1,R1                   Make valid 31-bit address JH1214
         J     DEV825V3                Go handle V3 ULUT         JH1214
*loop
DEV825   LA    R6,ULUENTRY+ULUELEN     next look-up entry
         L     R1,ULUTUCBC             # of UCB look-up entries
         MH    R1,=Y(ULUELEN)          size of ULUT
         AL    R1,ULUT1ST              change offset to address
         CLR   R1,R6                   EOF?
         JH    DEV826                  no, jump
         SLR   R7,R7                   yes, zero UCB reg
         BR    R14                     and goback
DEV826   L     R7,ULUEUCBP             get ucb address
         CLC   DCQDEVCL,UCBTBYT3       right device class?
         JNE   DEV825                  no, ignore it
*endloop
         BR    R14                     yes, return it
*
DEV821V2 DS    0H                      Version2 ULUT z/OS R7     RS0405
         MVI   WKCELL4,C'2'            Remember version2 ULUT    RS0505
         DROP  R5                                                RS0405
         USING ULU2,R5                                           RS0405
         L     R1,ULU2UCBC             # of UCB look-up entries  RS0405
         SLR   R4,R4                   UCB counter               RS0405
         L     R6,ULU21ST              first UCB look-up entry   RS0405
         USING UL2ENTRY,R6                                       RS0405
*loop                                                            RS0405
DEV822V2 L     R7,UL2EUCBP             get ucb address           RS0405
         CLC   DCQDEVCL,UCBTBYT3       right device class?       RS0405
         JNE   DEV823V2                no, ignore it             RS0405
         LA    R4,1(,R4)               count UCB's in this class RS0405
DEV823V2 LA    R6,UL2ENTRY+UL2ELEN     next look-up entry        RS0405
         JCT   R1,DEV822V2             count UCBs                RS0405
*endloop                                                         RS0405
         L     R6,ULU21ST              first UCB look-up entry   RS0405
         J     DEV826V2                                          RS0405
*loop                                                            RS0405
DEV825V2 LA    R6,UL2ENTRY+UL2ELEN     next look-up entry        RS0405
         L     R1,ULU2UCBC             # of UCB look-up entries  RS0405
         MH    R1,=Y(UL2ELEN)          size of ULUT              RS0405
         AL    R1,ULU21ST              change offset to address  RS0405
         CLR   R1,R6                   EOF?                      RS0405
         JH    DEV826V2                no, jump                  RS0405
         SLR   R7,R7                   yes, zero UCB reg         RS0405
         BR    R14                     and goback                RS0405
DEV826V2 L     R7,UL2EUCBP             get ucb address           RS0405
         CLC   DCQDEVCL,UCBTBYT3       right device class?       RS0405
         JNE   DEV825V2                no, ignore it             RS0405
*endloop                                                         RS0405
         BR    R14                     yes, return it            RS0405
*
* New code starts here                                           JH1214
DEV821V3 DS    0H                      Version3 ULUT z/OS V2R2   JH1214
         MVI   WKCELL4,C'3'            Remember version3 ULUT    JH1214
         DROP  R5                                                JH1214
         USING ULU3,R5                                           JH1214
         SAM64                                                   JH1214
         L     R1,ULU3UCBC             # of UCB look-up entries  JH1214
         SLR   R4,R4                   UCB counter               JH1214
         LG    R6,ULU31ST              first UCB look-up entry   JH1214
         USING UL3ENTRY,R6                                       JH1214
*loop                                                            JH1214
DEV822V3 L     R7,UL3EUCBP             get ucb address           JH1214
         CLC   DCQDEVCL,UCBTBYT3       right device class?       JH1214
         JNE   DEV823V3                no, ignore it             JH1214
         LA    R4,1(,R4)               count UCB's in this class JH1214
DEV823V3 LA    R6,UL3ENTRY+UL3ELEN     next look-up entry        JH1214
         JCT   R1,DEV822V3             count UCBs                JH1214
*endloop                                                         JH1214
         LG    R6,ULU31ST              first UCB look-up entry   JH1214
         J     DEV826V3                                          JH1214
*loop                                                            JH1214
DEV825V3 LA    R6,UL3ENTRY+UL3ELEN     next look-up entry        JH1214
         L     R1,ULU3UCBC             # of UCB look-up entries  JH1214
         MH    R1,=Y(UL3ELEN)          size of ULUT              JH1214
         ALG   R1,ULU31ST              change offset to address  JH1214
         CLGR  R1,R6                   EOF?                      JH1214
         JH    DEV826V3                no, jump                  JH1214
         SLR   R7,R7                   yes, zero UCB reg         JH1214
         SAM31                                                   JH1214
         BR    R14                     and goback                JH1214
DEV826V3 L     R7,UL3EUCBP             get ucb address           JH1214
         CLC   DCQDEVCL,UCBTBYT3       right device class?       JH1214
         JNE   DEV825V3                no, ignore it             JH1214
*endloop                                                         JH1214
         SAM31                                                   JH1214
         BR    R14                     yes, return it            JH1214
*                                                                JH1214
* New code ends here                                             JH1214
.DEV999  ANOP
DEV999   END_PROC
         TITLE 'SHOWMVS &REL - Special devices alternate subch'  RS1108
*---------------------------------------------------------------------*
*                                                                     *
*Device Class: Special (alternate subchannel set)                     *
*                                                                     *
*   DEVN  UCBTYP    Unitname  Volser  Status                          *
*                                                                     *
*    2C4  3010200E  3380K     STD008 SMS SG=STD3380  Enabled     85%  *
*    265  3010200E  3390      SYS430 Resident Private System          *
*                                                                     *
*---------------------------------------------------------------------*
DEVSP00  BEGIN_PROC KW=DEVSP,AUTH=YES
         AIF   (NOT D'CVTH7750).DEVSP90  z/OS R10?
         TM    HBB7750,L'HBB7750       running on z/OS R10
         JZ    DEVSP90                  no, jump
         STRING64 '&TITLEPFX.Device Class: ','Special (alternate',     X
               ' subchannel set)',INTO=LINE
         BRASL R14,SPACE2              Double Space
         XC    WORK256,WORK256         clear work area
         STRING64 '   DEVN  UCBTYP    Unitname S Volser  Status',      X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         MVI   WKCELL2,C'1'            Status
*loop
DEVSP10  DS    0H
         UCBSCAN ADDRESS,                                              X
               DEVCLASS=ALL,           device class                    X
               DYNAMIC=YES,            dynamic=no & dynamic=yes        X
               RANGE=ALL,              3-digit & 4-digit               X
               LOC=ANY,                Get Above/below 16MB UCBs       X
               WORKAREA=WORK256,       100-byte work area              X
               UCBPTR=WKCELL1,         UCB ptr                         X
               SPECIAL=ONLY,           Special dev only                X
               SUBCHANNELSET=ALL,      All subchannel                  X
               NOPIN,                                                  X
               MF=(E,UCBSCANL,COMPLETE)
*        #SNAP ADDR=WKCELL1,LENGTH=4
         LR    R1,R15                  Save UCBSCAN rc
         CHI   R1,4                    end-of-ucb
         JE    DEVSP90                 yes
         JH    DEVSP70                 no (error)
         MVI   WKCELL2,C'2'            Status
         L     R7,WKCELL1
         USING UCBOB,R7
*??      TM    UCBSTAT,UCBONLI         THIS UNIT ONLINE?
*??      JNO   DEVSP8                  NO, IGNORE IT
         BRASL R14,GETUNIT             GET UNITNAME
*
DEVSP20  UCB_NAME RIGHT                get 4-character device number
         STRING64 3X,UCB_NAME,2X,(UCBTYP,4,X),2X,UNITNAME,INTO=LINE
         TM    UCBTBYT2,UCB2OPT2       SHARED?  X'20'
         JZ    DEVSP70                 No, jump
         TM    UCBTBYT3,UCB3DACC       DASD?
         JZ    DEVSP70                 No, jump
         LA    R1,LINE(R15)            point at 1st space
         MVI   1(R1),C'S'              flag this device with an S
DEVSP30  STRING64 '.UCB=',((R7),,R10Z),INTO=LINE_UCB
         BRASL R14,SPACE1          <== next line
DEVSP40  J     DEVSP10                 Next UCB
*endloop
DEVSP70  DS    0H
         STRING64 '  UCBSCAN FAILED - R0=',((R0),,X),' R15=',((R1),,X),X
               INTO=LINE
         BRASL R14,SPACE2              Single Space
DEVSP90  DS    0H
         CLI   WKCELL2,C'1'
         JNE   DEVSP92
         STRING64 '   No special devices on alternate subchannel set', X
               INTO=LINE
         BRASL R14,SPACE2              Single Space
DEVSP92  DS    0H
         BRASL R14,BLANK1              Single Space
.DEVSP90 ANOP
         XC    WKCELL1,WKCELL1         clear
         END_PROC
         TITLE 'SHOWMVS &REL - Channel Measurement Block'        RS0105
*---------------------------------------------------------------------*
*                                                                     *
*Device - ECMB Information                                            *
*                                                                     *
* DEVN VOLSER UCB           No of    No of  Connect  Pending SubCh Dis*
*                       SSCH/RSCH   Sample     time     time       tim*
* 1850        00EF2A40     116968   116968   481726   411700      3451*
* 1860        00EF2C20      72231    72231   296724   468984      1834*
* 1870        00EF2E00      14669    14669    60220    59485       348*
* 1931        00EF35D0     292620   292620   410452   220615      4674*
* 2050        00EF40C0      11797    11797    49460    44487       543*
* 2060        00EF42A0      28406    28406   119863   104273       674*
* 2070        00EF4480     101852   101852   427422   386655      2291*
* 2131        00EF4C50      59962    59962    89126    50578       942*
* A000 SRV203 00EF5778      10382    10382   270264    15405      2803*
* A001 NSMS91 00EF5800       4904     4904     6183     7046      1615*
* A002 SRV102 00EF5888       5061     5061     6416     7417      1669*
* A003 ALE235 00EF5910       5055     5055     6365     7269      1569*
* A004 ALIP01 00EF5998       5073     5073     6405     7583      1908*
* A005 SRV101 00EF5A20       5055     5055     6341     7204      1641*
* A006 INST05 00EF5AA8      17729    17729    99679    19630      5760*
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
ECMB00   BEGIN_PROC KW=ECMB,AUTH=YES
         AIF   (NOT D'CVTH7709).ECMB090  z/OS R6?
         TM    HBB7709,L'HBB7709       running on z/OS R6
         JZ    ECMB090                  no, jump
         STRING64 '&TITLEPFX.Device - ECMB Information',INTO=LINE
         BRASL R14,SPACE2              Double Space
         XC    WORK256,WORK256         clear work area
         STRING64 '  DEVN VOLSER UCB           No of     No of',       X
               '   Connect   Pending SubCh Disc  CU Queue   Dev act',  X
               '  Dev Busy  Init CMD',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '                        SSCH/RSCH    Sample',       X
               '      time      time       time      time      time',  X
               '      time      time',INTO=LINE
         BRASL R14,SPACE1
*loop
ECMB010  DS    0H
         UCBSCAN ADDRESS,                                              X
               DEVCLASS=ALL,           device class                    X
               DYNAMIC=YES,            dynamic=no & dynamic=yes        X
               RANGE=ALL,              3-digit & 4-digit               X
               LOC=ANY,                Get Above/below 16MB UCBs JH0405X
               WORKAREA=WORK256,       100-byte work area              X
               UCBPTR=WKCELL1,         UCB ptr                         X
               NOPIN,                                                  X
               MF=(E,UCBSCANL,COMPLETE)
*        #SNAP ADDR=WKCELL1,LENGTH=4
         LR    R1,R15                  Save UCBSCAN rc
         CHI   R1,4                    end-of-ucb
         JE    ECMB090                 yes
         JH    ECMB070                 no (error)
         L     R7,WKCELL1
         USING UCBOB,R7
         LA    R2,WORK256+100
         ST    R2,WKCELL2
         IOSCMB GET,                                                   X
               UCBPTR=WKCELL1,         contains the UCB pointer        X
               CMBAREA=WKCELL2,        pointer to the CMBAREA          X
               CMBLEN=64,                                              X
               RETCODE=LRETCODE,                                       X
               RSNCODE=LRSNCODE,                                       X
               MF=(E,IOSCMBL,COMPLETE)
         LTR   R15,R15                 Success?
         JNZ   ECMB010                 No, next UCB
         CLC   WORK256+100(4),=F'0'    some data present ?
         JE    ECMB010                 No, next UCB
*        #SNAP ADDR=WKCELL1,LENGTH=4   UCB
*        #SNAP ADDR=WORK256+100,LENGTH=64   ECMB
         LA    R4,WORK256+100
         USING ECMB,R4
         USING UCBOB,R7
         STRING64 2X,(UCBCHAN,2,X),1X,UCBVOLI,1X,(WKCELL1,4,X),2X,     X
               (ECMBSSCHRSCHCOUNT,F,R9B),1X,                           X
               (ECMBSAMPLECOUNT,F,R9B),1X,                             X
               (ECMBCONNECTTIME,F,R9B),1X,                             X
               (ECMBPENDINGTIME,F,R9B),2X,                             X
               (ECMBDISCONNECTTIME,F,R9B),1X,                          X
               (ECMBCUQUEUEINGTIME,F,R9B),1X,                          X
               (ECMBDEVICEACTIVEONLYTIME,F,R9B),1X,                    X
               (ECMBDEVICEBUSYTIME,F,R9B),1X,                          X
               (ECMBINITIALCMDRESPTIME,F,R9B),                         X
               INTO=LINE
         TR    LINE,TRTPRINT           get rid of garbage
         BRASL R14,SPACE1              Single Space
         J     ECMB010                 Loop
*endloop
ECMB070  DS    0H
         STRING64 '  UCBSCAN FAILED - R0=',((R0),,X),' R15=',((R1),,X),X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
ECMB090  DS    0H
         BRASL R14,BLANK1              Single Space
.ECMB090 ANOP
         END_PROC
         TITLE 'SHOWMVS &REL - Config Data Record'               RS0705
*---------------------------------------------------------------------*
*                                                                     *
*>Device - CDR Information                                            *
*                                                                     *
*  DEVN Path Type Manufactor  TypeN  Mod Sequence     Tag  Class      *
*  1850 36   01   IBM 83      002084 CTC 2058A00ECDBD 3610 09 CTC Adap*
*            01   IBM 83      002084 A08 0000000ECDBD 0036 09 CTC Adap*
*  1851 36   01   IBM 83      002084 CTC 2058A00ECDBD 3611 09 CTC Adap*
*            01   IBM 83      002084 A08 0000000ECDBD 0036 09 CTC Adap*
*  1852 36   01   IBM 83      002084 CTC 2058A00ECDBD 3612 09 CTC Adap*
*            01   IBM 83      002084 A08 0000000ECDBD 0036 09 CTC Adap*
*                                                                     *
* Type: 01-I/O Device,02-Control unit                                 *
*
*---------------------------------------------------------------------*
CDR00    BEGIN_PROC KW=CDR,AUTH=YES
         AIF   ('&IOSCDR' EQ 'N').CDR090                         RS0806
         STRING64 '&TITLEPFX.Device - CDR Information',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  Capturing the data for this display is slow.',    X
               ' Please set the IOSCDR switch Y/N to your needs.',     X
               INTO=LINE                                         RS1006
         BRASL R14,SPACE2                                        RS1006
         XC    WORK256,WORK256         clear work area
         STRING64 '  DEVN Path Type Manufactor  TypeN  Mod Sequence',  X
               '     Tag  Class ',INTO=LINE
         BRASL R14,SPACE1
*loop
CDR010   DS    0H
         UCBSCAN ADDRESS,                                              X
               DEVCLASS=ALL,           device class                    X
               DYNAMIC=YES,            dynamic=no & dynamic=yes        X
               RANGE=ALL,              3-digit & 4-digit               X
               LOC=ANY,                Get Above/below 16MB UCBs       X
               WORKAREA=WORK256,       100-byte work area              X
               UCBPTR=WKCELL1,         UCB ptr                         X
               NOPIN,                                                  X
               MF=(E,UCBSCANL,COMPLETE)
         LR    R1,R15                  Save UCBSCAN rc
         CHI   R1,4                    end-of-ucb
         JE    CDR090                  yes
         JH    CDR070                  no (error)
         L     R3,WKCELL1
         USING UCBOB,R3
         TM    UCBSTAT,UCBONLI         Test if volume is online
         JZ    CDR010                    No next
*        #SNAP ADDR=(R3),LENGTH=256
*        Since the device is online and online path is certain
*        to be found so no loop counter is used
         UCBINFO PATHINFO,                                             X
               DEVN=UCBCHAN,                                           X
               PATHAREA=WORK256+256,                                   X
               MF=(E,UCBSCANL,COMPLETE)
         LTR   R1,R15                  Test for 0 return code    RS1105
         JNZ   CDR080                  Exit if bad RC
         LA    R4,WORK256+256          Address of PATHINFO data
         USING PATH,R4                 Set up addressability to
*                                      path information.
         MVI   WKCELL3+1,X'00'         Clear CHPID
*        #SNAP ADDR=(R4),LENGTH=256
         SR    R5,R5                   CHPID array index register
*  loop
CDR015   DS  0H
         IC    R2,PATHBITS(R5)         Get flags from array entry
         STC   R2,WKCELL3              Save entry
         TM    WKCELL3,X'04'           Test if the path is online
         JO    CDR020                  If so, exit the loop
*        #SNAP ADDR=(WKCELL3),LENGTH=1
         LA    R5,L'PATHCHPIDARRAY(R5) Increment array ind       RS0905
         J     CDR015
*  endloop
CDR020   DS  0H
         LH    R2,PATHCHPID(R5)        Get the ID for the online
*                                      channel path.
         STC   R2,WKCELL3+1            Save the ID for the online
*                                      channel path.
         CLI   WKCELL3+1,X'00'         Channel found?
         JE    CDR010                     No channel ||
         BRASL R14,WORKADDR            GET ADDR OF A 32K WORK AREA
         LR    R5,R1
         SYSSTATE ARCHLVL=1
*        #SNAP ADDR=UCBCHAN,LENGTH=4
*        #SNAP ADDR=WKCELL3+1,LENGTH=1
         IOSCDR DEVN=UCBCHAN,                                          X
               CHPID=WKCELL3+1,                                        X
               READ=NOIO,                                              X
               CDRAREA=(R5),                                           X
               CDRLEN==F'4096',                                        X
               CDRSIZE=ANSLEN,                                         X
               RETCODE=LRETCODE,                                       X
               RSNCODE=LRSNCODE,                                       X
               MF=(E,UCBSCANL,COMPLETE)
         SYSSTATE ARCHLVL=2
         LR    R1,R15                  Save IOSCDR RC            RS1105
         CHI   R1,4                    RC=4 is ok                RS1105
         JE    CDR040                    Equal=CDR n/a           RS1105
         JH    CDR085                    higher=(error)          RS1105
*        #SNAP ADDR=(R5),LENGTH=256
         USING NED,R5
         SR    R6,R6                   Clear index register
*  loop
CDR030   DS    0H
         TM    NEDFLAGS,CDRFNED        Is this a NED
         JNO   CDR033                    no next if any
         TM    NEDTYPE,NEDTCU          Is this control unit
         JO    CDR035                    no next if any
         TM    NEDTYPE,NEDTIODV        Is this IO device
         JO    CDR035                    no next if any
CDR033   DS    0H
         LA    R6,NED_LEN(R6)          Increment index register
         LA    R5,NED_LEN(R5)          Increment to next record in CDR.
         CL    R6,ANSLEN               More entries ?
         JL    CDR030                    ok process them
*  endloop
*endloop
         J     CDR010
CDR035   DS    0H
         STRING64 2X,(UCBCHAN,2,X),1X,(WKCELL3+1,1,X),3X,(NEDTYPE,1,X),X
               3X,NEDMANUF,1X,NEDPMANU,6X,NEDTYPEN,1X,NEDMODN,1X,      X
               NEDSEQN,1X,(NEDTAG,2,X),1X,(NEDCLASS,1,X),INTO=LINE
         CLC   UCBCHAN,WKCELL3+4       Same channel ?
         JE    CDR036                    yes
         MVC   WKCELL3+4(2),UCBCHAN    Remember channel
         J     CDR037
CDR036   DS    0H
         MVC   LINE(10),BLANKS          Clear Channel/Path
CDR037   DS    0H
         CLI   NEDCLASS,NEDCUNSP       Unspecified
         JNE   *+10                    no, jump
         MVC   LINE+61(11),=C'Unspecified'
         CLI   NEDCLASS,NEDCDASD       DASD
         JNE   *+10                    no, jump
         MVC   LINE+61(4),=C'Dasd'
         CLI   NEDCLASS,NEDCTAPE       Tape
         JNE   *+10                    no, jump
         MVC   LINE+61(4),=C'Tape'
         CLI   NEDCLASS,NEDCURIN       Unit recrod (input)
         JNE   *+10                    no, jump
         MVC   LINE+61(16),=C'Unit rec (Input)'
         CLI   NEDCLASS,NEDCUROT       Unit record (output)
         JNE   *+10                    no, jump
         MVC   LINE+61(17),=C'Unit rec (Output)'
         CLI   NEDCLASS,NEDCPRT        Printer
         JNE   *+10                    no, jump
         MVC   LINE+61(7),=C'Printer'
         CLI   NEDCLASS,NEDCCOMM       Comm Controller
         JNE   *+10                    no, jump
         MVC   LINE+61(15),=C'Comm Controller'
         CLI   NEDCLASS,NEDCFST        Full screen Term
         JNE   *+10                    no, jump
         MVC   LINE+61(16),=C'Full screen Term'
         CLI   NEDCLASS,NEDCLMT        Line mode Term
         JNE   *+10                    no, jump
         MVC   LINE+61(14),=C'Line mode Term'
         CLI   NEDCLASS,NEDCCTCA       CTC adapter
         JNE   *+10                    no, jump
         MVC   LINE+61(11),=C'CTC Adapter'
         CLI   NEDCLASS,NEDCSWIT       Switch
         JNE   CDR039A                 no, jump
         MVC   LINE+61(6),=C'Switch'
         AIF   (NOT D'CVTH7760).CDR039A  z/OS R11 ? No           RS0110
         CLI   NEDCLASS,NEDCCTRL       Controller                RS0110
         JNE   CDR039A                 no, jump                  RS0110
         MVC   LINE+61(6),=C'Controller'                         RS0110
.CDR039A ANOP                                                    RS0110
CDR039A  DS    0H                                                RS0110
         BRASL R14,SPACE1              Single Space
         J     CDR033                  Process next if any
*  endloop
CDR040   DS    0H                                                RS1105
         STRING64 2X,(UCBCHAN,2,X),1X,(WKCELL3+1,1,X),'   CDR n/a',1X, X
               'R0=',((R0),,X),' R15=',((R1),,X),INTO=LINE       RS1105
         BRASL R14,SPACE1              Single Space              RS1105
         J     CDR010                  next device               RS1105
CDR070   DS    0H
         STRING64 '  UCBSCAN FAILED - R0=',((R0),,X),' R15=',((R1),,X),X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         J     CDR090
CDR080   DS    0H
         STRING64 '  UCBINFO FAILED - R0=',((R0),,X),' R15=',((R1),,X),X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         J     CDR090
CDR085   DS    0H
         STRING64 '  IOSCDR FAILED - R0=',((R0),,X),' R15=',((R1),,X), X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
CDR090   DS    0H
         BRASL R14,BLANK1              Single Space
         STRING64 '  Type: 01-I/O Device,02-Control unit',INTO=LINE
         BRASL R14,SPACE2
.CDR090  ANOP
         END_PROC
         TITLE 'SHOWMVS &REL - PAV Info'                         RS1105
*---------------------------------------------------------------------*
*                                                                     *
*>Device - PAV Information                                            *
*                                                                     *
*  DEVN UA Type      SSID Flag Attributes                             *
*  A000 00 Non-PAV   A300   0A CMB, Dev busy pres                     *
*  A001 01 Non-PAV   A300   0A CMB, Dev busy pres                     *
*  A002 02 Non-PAV   A300   0A CMB, Dev busy pres                     *
*  A003 03 Non-PAV   A300   0A CMB, Dev busy pres                     *
*  A004 04 Non-PAV   A300   0A CMB, Dev busy pres                     *
*  4001 01 Base      A200   DA PAV Base Cap, WLM, CMB, Dev busy pres  *
*  40FA FA Alias     A200   2A CMB, Dev busy pres                     *
*  40FB FB Alias     A200   2A CMB, Dev busy pres                     *
*  40FC FC Alias     A200   2A CMB, Dev busy pres                     *
*                                                                     *
*---------------------------------------------------------------------*
PAV00    BEGIN_PROC KW=PAV,AUTH=YES                              RS1105
         STRING64 '&TITLEPFX.Device - PAV Information',INTO=LINE
         BRASL R14,SPACE2              Double Space
         XC    WORK256,WORK256         clear work area
         STRING64 '  DEVN UA Type       SSID Flag Attributes',INTO=LINE
         BRASL R14,SPACE1
*loop
PAV010   DS    0H
         UCBSCAN ADDRESS,                                              X
               DEVCLASS=DASD,          device class only DASDY         X
               DYNAMIC=YES,            dynamic=no & dynamic=yes        X
               RANGE=ALL,              3-digit & 4-digit               X
               LOC=ANY,                Get Above/below 16MB UCBs       X
               WORKAREA=WORK256,       100-byte work area              X
               UCBPTR=WKCELL1,         UCB ptr                         X
               NOPIN,                                                  X
               MF=(E,UCBSCANL,COMPLETE)
         LR    R1,R15                  Save UCBSCAN rc
         CHI   R1,4                    end-of-ucb
         JE    PAV090                  yes
         JH    PAV070                  no (error)
         L     R7,WKCELL1
*        #SNAP ADDR=(R7),LENGTH=256    Debug code
         USING UCBOB,R7
         TM    UCBSTAT,UCBONLI         Test if volume is online
         JZ    PAV010                    No next
*..................................................................
*
*    Issue the UCBINFO macro to obtain PAVINFO,
*    UCBINFO returns this information in a field called PATHSTOR,
*    mapped by IOSDPATH.
*
*..................................................................
         MVC   WKCELL2,=F'4096'
         BRASL R14,WORKADDR            32K work area
         LR    R3,R1                   where did we find it?
PAV020   DS    0H
*        STRING64 ' Before UCBINFO PAVLEN=',(WKCELL2,8,X),INTO=LINE Deb
*        BRASL R14,SPACE1              Single Space Debug
         UCBINFO PAVINFO,                                              X
               DEVN=UCBCHAN,                                           X
               PAVAREA=(R3),                                           X
               PAVLEN=WKCELL2,                                         X
               MF=(E,UCBSCANL,COMPLETE)
         USING PAVA,R3                 IOSDPAVA macro
         LTR   R1,R15                  Test for 0 return code
         JNZ   PAV080                    Exit if bad RC
*        #SNAP ADDR=(R3),LENGTH=20     Debug code
         LH    R4,PAVARCNT             Number of entries returned
         LA    R5,PAVARRAY
         USING PAVARRAY,R5             Tell assembly
*  loop
PAV065   DS    0H
         LA    R6,WORK256+256
         XC    WORK256+256(256),WORK256+256 Clear
         USING SSGARGL,R6
         XC    TENWORDS(12),TENWORDS
         LA    R1,UCBVOLI               point to Volser
         ST    R1,SSGAVOL
         LA    R1,128                   length of WorkArea
         ST    R1,SSGOLN
         LA    R1,WORK256+384           point to WorkArea
         ST    R1,SSGOADR
         ST    R6,WKCELL3               POINT TO IOB
         LA    R1,WKCELL3               GET ADDRESS AND START
         ST    R1,TENWORDS+4            BUILDING PARAMETER LIST
         LA    R1,LRETCODE              POINT TO RETURN CODE PLACE
         ST    R1,TENWORDS+8            SAVE IT IN THE LIST
         MVC   SSGUNIT(4),UCBTYP        UNIT TYPE
         MVI   SSGOPT,SSGRSS            REQ SUBSYS STATUS
         LA    R1,TENWORDS
         TM    AUTH_ESR,L'AUTH_ESR      Key4?
         JO    PAV068                   yes, don't call
         SYSSTATE ARCHLVL=1             IDCSS01 fails with LINKX
*                                       on pre z/OS R6
         LINK  EP=IDCSS01               call subroutine
         SYSSTATE ARCHLVL=2
*
         L     R6,SSGOADR
*XX      L     R6,SSGOADR
*        #SNAP ADDR=(R6),LENGTH=100     Debug
         USING SSGARGR,R6
         LA    R6,SSGDADA
*XX      LA    R6,SSGDADA
         USING SSSTAT,R6
*        #SNAP ADDR=(R6),LENGTH=100     Debug
PAV068   DS    0H
         LA    R1,=C'Base    '
         TM    PAVAFLG1,PAVAPAVB
         JO    PAV069
         LA    R1,=C'Alias   '
         TM    PAVAFLG1,PAVAPAVA
         JO    PAV069
         LA    R1,=C'Non-PAV '
         AIF   (NOT D'CVTH7730).PAV069    z/OS R8?               RS0909
         TM    HBB7730,L'HBB7730       running on z/OS R8        RS0909
         JZ    PAV069                  no, jump and display      RS0909
         LA    R1,=C'HyperPAV'                                   RS0909
         TM    PAVAFLG1,PAVAPAVH                                 RS0909
         JO    PAV069                                            RS0909
         LA    R1,=C'Non-PAV '                                   RS0909
.PAV069  ANOP                                                    RS0909
PAV069   DS    0H
         STRING64 2X,(PAVADEVN,2,X),1X,(PAVADEVN+1,1,X),1X,            X
               ((R1),8),3X,(SSID,2,X),1X,(PAVAFLG1,1,X),               X
               INTO=LINE
         CLC   SSID,=X'0000'            SSID present?            RS0307
         JNE   PAV069_1                                          RS0307
         STRING64 2X,(PAVADEVN,2,X),1X,(PAVADEVN+1,1,X),1X,            X
               ((R1),8),3X,'n/a  ',(PAVAFLG1,1,X),                     X
               INTO=LINE
PAV069_1 DS    0H                                                RS0307
         ST    R4,WKCELL3             Save R4
         LA    R4,LINE+3(R15)
        #STATUS PAVAFLG1,PAVAPAVC,'PAV Base Cap,'
        #STATUS PAVAFLG1,PAVAPAVW,'WLM,'
        #STATUS PAVAFLG1,PAVAMCMB,'CMB,'
        #STATUS PAVAFLG1,PAVASTSC,'STSCH,'
        #STATUS PAVAFLG1,PAVADBTS,'Dev busy pres,'
        #STATUS PAVAFLG1,PAVAPAVH,'HyperPAV'
         BRASL R14,SPACE1
         L     R4,WKCELL3             Reload R4
         LA    R5,L'PAVARRAY(,R5)     next PAV-ARRAY
         JCT   R4,PAV065
*  endloop
         J     PAV010
*endloop
PAV070   DS    0H
         STRING64 '  UCBSCAN FAILED - R0=',((R0),,X),' R15=',((R1),,X),X
               INTO=LINE
         BRASL R14,SPACE1             Single Space
         J     PAV090
PAV080   DS    0H
         CLM   R0,B'0001',=X'03'      PAVLEN to small ?
         JNE   PAV081                   no report RC and RSN
         LHI   R4,L'PAVARRAY          Calculate the PAVLEN
         MH    R4,PAVATCNT            Entry * number of entries
         LA    R4,L'PAVAHEAD(R4)      plus header                RS0108
         ST    R4,WKCELL2             Store the result
*        #SNAP ADDR=(R3),LENGTH=20                               DEBUG
*        STRING64 ' PAVLEN=',(WKCELL2,8,X),INTO=LINE             DEBUG
*        BRASL R14,SPACE1              Single Space              DEBUG
         DROP  R3,R5,R7               PAVA header no longer needed
         J     PAV020                 reinvoke the UCBINFO PAVINFO
PAV081   DS    0H
         STRING64 '  UCBINFO FAILED - R0=',((R0),,X),' R15=',((R1),,X),X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
PAV090   DS    0H
         BRASL R14,BLANK1              Single Space
.PAV090  ANOP
         END_PROC
         TITLE 'SHOWMVS &REL - CHPID and PATH information'       JM0799
*---------------------------------------------------------------------*
*                                                                     *
*Device - CHPID information                                           *
*                                                                     *
*  Device : 0009       Paths Installed: A1                            *
*                      Paths Inuse    : A1                            *
*  Device : 0014       Paths Installed: A1                            *
*                      Paths Inuse    : A1                            *
*  Device : 0211-021F  Paths are offline                              *
*  Device : 02E0-02FF  Paths Installed: 04 84                         *
*                      Paths Inuse    : 04 84                         *
*  Device : CCC8-CCCF  Paths Installed: 83                            *
*                      Paths Inuse    : 83                            *
*                                                                     *
*  CHPID      Type  / Description                       Device Count  *
*     01      CNC_S   ESCON SWITCHED POINT TO POINT                3  *
*     02      CNC_?   ESCON SWITCH OR POINT TO POINT              32  *
*     03      CNC_S   ESCON SWITCHED POINT TO POINT               16  *
*                                                                     *
*---------------------------------------------------------------------*
CHPID00  BEGIN_PROC KW=CHIPDS                                    RS0302
         L     R4,=A(INFOL)            Size of storage required
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    CHPID010                yes, jump
         GETMAIN RU,LV=(R4),BNDRY=PAGE,LOC=ANY allocate work area
         J     CHPID020
CHPID010 DS    0H
         LR    R0,R4                   Length of storage
         LA    R1,1                    LOC=ANY
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES             RS1002
CHPID020 DS    0H
         LR    R6,R1                   where did we find it
         USING INFO,R6
         LR    R14,R1                  Addr of "to" area
         LR    R15,R4                  length
         STM   R14,R15,GETMAIN_LEN_ADDR save addr and length
         SR    R0,R0                   clear from
         SR    R1,R1                   clear length
         MVCL  R14,R0                  clear it
         STRING64 '&TITLEPFX.Device - CHPID information',INTO=LINE
         BRASL R14,SPACE2              Double Space
         MVI   PREV_UCBCHAN,C'*'       Indicate first time
         XC    WORK256,WORK256         clear work area
*loop
CHPID030 DS    0H
         LA    R7,WORK256+100          Load address of UCB
         USING UCBOB,R7
         LA    R3,WORK256+148
         USING UCBRSTEM,R3
         UCBSCAN COPY,                                                 X
               DEVCLASS=ALL,           device class                    X
               DYNAMIC=YES,            dynamic=no & dynamic=yes        X
               RANGE=ALL,              3-digit & 4-digit               X
               WORKAREA=WORK256,       100-byte work area              X
               UCBPAREA=(R3),          UCB prefix area                 X
               UCBAREA=(R7),           UCB area                        X
               MF=(E,UCBSCANL,COMPLETE)
         LR    R1,R15                  Save UCBSCAN rc
         CHI   R1,4                    end-of-ucb
         JE    CHPID040                yes
         JH    CHPID190                no
         J     CHPID050
CHPID040 DS    0H
         XC    WORK256,WORK256         Clear work area
         MVI   CHPIDEND,C'#'           IIndicate end of UCBSCAN
         J     CHPID060                Skip the checks
CHPID050 DS    0H
         MVI   PREV_PATH_VAL,C'Y'      Set it
         TM    UCBIOSF1,UCBVALPH       Paths validated?
         JZ    *+8                     Yes
         MVI   PREV_PATH_VAL,C'N'      Set it
         CLI   PREV_UCBCHAN,C'*'       First time
         JE    CHPID140                yes
*        is current CHPID info same as last CHPID info
         CLC   PREV_UCBPIM,UCBPIM      Same CHPID mask?
         JNE   CHPID060                No
         CLC   PREV_UCBCHPS,UCBCHPS    Same CHPID info?
         JNE   CHPID060                No
         CLC   PREV_PATH_VAL,SAVE_PATH_VAL All paths validated?
         JNE   CHPID060                No
*        Is the previous and current UCB consecutive
         SR    R1,R1                   clear work reg
         ICM   R1,B'0011',UCBCHAN      load current UCB number
         SR    R2,R2                   clear work reg
         ICM   R2,B'0011',SAVE_UCBCHAN load "previous" UCB number
         AL    R2,=F'1'                increment
         CR    R1,R2                   same?
         JE    CHPID150                yes
CHPID060 DS    0H
         STRING64 '  Device : ',(PREV_UCBCHAN,,X),INTO=LINE
         MVC   WKCELL4,=F'1'         Init device count
         CLC   SAVE_UCBCHAN,PREV_UCBCHAN  Is it a UCB range
         JE    CHPID070                No
         STRING64 '-',(SAVE_UCBCHAN,,X),INTO=(LINE+15,5)
         XR    R1,R1                   Clear a work reg
         ICM   R1,B'0011',PREV_UCBCHAN Load low device address
         XR    R2,R2                   Clear a work reg
         ICM   R2,B'0011',SAVE_UCBCHAN Load high device address
         SR    R2,R1                   Get device count
         LA    R2,1(,R2)               Plus one
         ST    R2,WKCELL4              Save for later
CHPID070 DS    0H
         CLC   PREV_UCBCHPS,=XL8'00'   Any paths
         JE    CHPID120                No
         STRING64 'Paths Installed: ',INTO=(LINE+22,20)
         LA    R4,X'80'                Load mask
         LA    R5,PREV_UCBCHPS         Start of CHPIDs
         USING UCBCHPID,R5
*-loop
CHPID080 DS    0H
*CHPIDPIM TM    PREV_UCBPIM,*-*         Physical installed CHPID
*        EX    R4,CHPIDPIM             Is this CHPID installed
         EX    R4,=S(X'100'(R9),4(R6)) Test the bit using TM 4(R6),*-*
         JZ    CHPID090                No
         XR    R1,R1                   Clear for CHPID number
         IC    R1,UCBCHPID             Load CHPID number
         XR    R14,R14
         LA    R15,PATHTBLL            get length of one entry
         MR    R14,R1                  Times the CHPID path number
         LA    R14,PATHAREA
         ALR   R15,R14                 get the offset
         USING PATHTBL,R15
         STH   R1,PATHID               Save CHPID
         L     R1,WKCELL4              Load current count
         AL    R1,PATHCNT              Add any previous count
         ST    R1,PATHCNT              Show we found one
         DROP  R15
         STRING64 (LINE,,T),1X,(UCBCHPID,1,X),INTO=LINE
CHPID090 DS    0H
         LA    R5,L'UCBCHPID(,R5)      Skip this path
         SRL   R4,1                    Move mask over 1 bit
         LTR   R4,R4                   Any more
         JNZ   CHPID080
*-endloop
         BRASL R14,SPACE1              Single Space
         STRING64 22X,'Paths Inuse    : ',INTO=LINE
         LA    R4,X'80'                Load mask
         LA    R5,PREV_UCBCHPS         Start of CHPIDs
         USING UCBCHPID,R5
*-loop
CHPID100 DS    0H
*CHPIDLPM TM    PREV_UCBLPM,*-*         Logical path mask
*        EX    R4,CHPIDLPM             Is this CHPID inuse
         EX    R4,=S(X'100'(R9),5(R6)) Test the bit using TM 4(R6),*-*
         JZ    CHPID110                No
         STRING64 (LINE,,T),1X,(UCBCHPID,1,X),INTO=LINE
CHPID110 DS    0H
         LA    R5,L'UCBCHPID(,R5)      Skip this path
         SRL   R4,1                    Move mask over 1 bit
         LTR   R4,R4                   Any more
         JNZ   CHPID100
         DROP  R5
         CLI   SAVE_PATH_VAL,C'Y'      Have paths been validated?
         JE    CHPID130                Yes
         BRASL R14,SPACE1              Single Space
         STRING64 22X,'Paths not validated',INTO=LINE
         J     CHPID130
*-endloop
CHPID120 DS    0H
         STRING64 'Paths are offline',INTO=(LINE+22,18)
CHPID130 DS    0H
         BRASL R14,SPACE1              Single Space
CHPID140 DS    0H
         MVC   PREV_UCBCHAN,UCBCHAN    save current UCB number
CHPID150 DS    0H
         MVC   SAVE_PATH_VAL,PREV_PATH_VAL All paths validated
         MVC   SAVE_UCBCHAN,UCBCHAN    save current UCB number
         MVC   PREV_UCBPIM,UCBPIM      Save CHPID path mask
         MVC   PREV_UCBLPM,UCBLPM      Save CHPID path mask
         MVC   PREV_UCBCHPS,UCBCHPS    Save path info
         CLI   CHPIDEND,C'#'           End of UCBSCAN
         JNE   CHPID030                No, go get next UCB
*endloop
         DROP  R3,R7
         BRASL R14,BLANK1              Double space
*
* Display the 256 CHPIDs
*
         STRING64 '  CHPID PCHID Type    Description',21X,             X
               '  Device Count',                                       X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         LA    R7,256                  Max number of paths
         LA    R2,PATHAREA             Saved path information
         USING PATHTBL,R2
*loop
CHPID160 DS    0H
         CLC   PATHCNT,=F'0'           valid path
         JE    CHPID180                No
         AIF   (NOT D'CVTH7708).CHPID165  z/OS R5?               RS1107
         TM    HBB7708,L'HBB7708       running on z/OS R5?       RS1107
         JZ    CHPID165                no                        RS1107
         IOSCHPD CHPID=PATHID,                                         X
               ACRONYM=PATHACM,                                        X
               DESC=PATHDESC,                                          X
               ATTR=PATHATTR,                                          X
               MF=(E,IOSCHPDL,COMPLETE)                          RS0604
         LTR   R1,R15                  Description returned?     RS0604
         JNZ   CHPID200                 no, error                RS0604
         LA    R4,PATHATTR                                       RS0604
         USING CHPDATTR,R4             Map data IOSDCHPD         RS0604
         TM    CHPDAFLG,CHPDA_CHID_Valid   Check first           RS0604
         JNO   CHPID163                                          RS0604
         TM    CHPDAFLG,CHPDA_CHID_External PCHID present?       RS0604
         JNO   CHPID163                                          RS0604
         STRING64 5X,(PATHID+1,1,X),2X,(CHPDA_CHID,2,X),1X,            X
               PATHACM,3X,PATHDESC,7X,                                 X
               (PATHCNT,F,R),                                    RS0604X
               INTO=LINE                                         RS0604
         BRASL R14,SPACE1              Single Space              RS0604
         J     CHPID180                                          RS0604
CHPID163 DS    0H                                                RS0604
         STRING64 5X,(PATHID+1,1,X),'   n/a ',                         X
               PATHACM,3X,PATHDESC,7X,                                 X
               (PATHCNT,F,R),                                    RS0604X
               INTO=LINE                                         RS0604
         BRASL R14,SPACE1              Single Space              RS0604
         J     CHPID180                                          RS0604
         DROP  R4                                                RS0604
.CHPID165 ANOP                                                   RS0604
CHPID165 DS    0H                                                RS0604
*        The macro IOSCHPD will not work if the IEANUC01 module
*        IOSVCHPI is at UW34283
         IOSCHPD CHPID=PATHID,                                         X
               ACRONYM=PATHACM,                                        X
               DESC=PATHDESC,                                          X
               MF=(E,IOSCHPDL,COMPLETE)
         LTR   R1,R15                  Description returned?
         JNZ   CHPID200                 no, error
CHPID170 DS    0H
         STRING64 5X,(PATHID+1,1,X),6X,                                X
               PATHACM,3X,PATHDESC,7X,                                 X
               (PATHCNT,F,R),                                          X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
CHPID180 DS    0H
         LA    R2,PATHTBLL(,R2)        skip this entry
         DROP  R2
         JCT   R7,CHPID160             loop to next path entry
         BRASL R14,BLANK1              Double Space
*endloop
.CHPID97 ANOP
         J     CHPID210                get out of here
*
CHPID190 DS    0H
         STRING64 '  UCBSCAN FAILED - R0=',((R0),,X),' R15=',((R1),,X),X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         J     CHPID210
*
CHPID200 DS    0H
         STRING64 '  IOSCHPD FAILED - R0=',((R0),,X),' R15=',((R1),,X),X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
         J     CHPID210
*
.CHPID98 ANOP
CHPID210 DS    0H
         LM    R1,R2,GETMAIN_LEN_ADDR  load addr and length
         LTR   R1,R1                   did we do a getmain
         JZ    CHPID99                 no
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    CHPID220                yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free work area
         J     CHPID99
CHPID220 DS    0H
         LR    R0,R2                   length for FREEMAIN
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES             RS1002
         J     CHPID99
.CHPID99 ANOP
CHPID99  END_PROC
         TITLE 'SHOWMVS &REL - Channel Path Measurememt Fac.'    RS0803
*---------------------------------------------------------------------*
*                                                                     *
*Channel Path Measurement Facility (CPMF)                             *
*                                                                     *
*  Active and times of restart: 0                                     *
*                                                                     *
*  IEAOPT mode :                                                      *
*  Current mode: Extend                                               *
*                                                                     *
*  CHPID Type  Shr Grp Description                                    *
*  00    CFS   Y   01  COUPLING FACILITY SENDER                       *
*  01    CFS   Y   01  COUPLING FACILITY SENDER                       *
*  02    CFS   Y   01  COUPLING FACILITY SENDER                       *
*  03    CFS   Y   01  COUPLING FACILITY SENDER                       *
*  04    CFS   Y   01  COUPLING FACILITY SENDER                       *
*  05    CFS   Y   01  COUPLING FACILITY SENDER                       *
*  10    OSD   Y   02  OSA DIRECT EXPRESS                             *
*                      MaxBsyCyles         :      16274 ChWorkUn      *
*                      MaxWriteDataUnits   :      81920 MaxReadD      *
*                      DataUnitSize        :       1024               *
*                      TotalBsyCycleCount  : 1000232226               *
*                      TotalChWorkUnitCount:   20772036 LparChWo      *
*                      TotalWriteDataUnits :          0 LparWrit      *
*                      TotalReadDataUnits  :         77 LparRead      *
*  11    OSD   Y   02  OSA DIRECT EXPRESS                             *
*                      MaxBsyCyles         :      16274 ChWorkUn      *
*                      MaxWriteDataUnits   :      81920 MaxReadD      *
*                      DataUnitSize        :       1024               *
*                      TotalBsyCycleCount  : 1000232426               *
*                      TotalChWorkUnitCount:   36357282 LparChWo      *
*                      TotalWriteDataUnits :          0 LparWrit      *
*                      TotalReadDataUnits  :          4 LparRead      *
*  12    OSD   Y   02  OSA DIRECT EXPRESS                             *
*                      MaxBsyCyles         :      16274 ChWorkUn      *
*                      MaxWriteDataUnits   :      81920 MaxReadD      *
*                      DataUnitSize        :       1024               *
*                      TotalBsyCycleCount  : 1000342277               *
*                      TotalChWorkUnitCount:   20771364 LparChWo      *
*                      TotalWriteDataUnits :          0 LparWrit      *
*                      TotalReadDataUnits  :         78 LparRead      *
*  13    OSD   Y   02  OSA DIRECT EXPRESS                             *
*                      MaxBsyCyles         :      16274 ChWorkUn      *
*                                                                     *
*  and so on                                                          *
*                                                                     *
*---------------------------------------------------------------------*
CPMF00   BEGIN_PROC KW=CPMF
         STRING64 '&TITLEPFX.Channel Path Measurement Facility (CPMF)',X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         L     R14,CVTOPCTP            Resource Manager Control Table
         L     R3,RMCTCMCT-RMCT(,R14)  CMCT (Channel Measurement)
         USING CMCT,R3                 tell assembly
*        #SNAP ADDR=(R3),LENGTH=CMCTLEN  debug code
         TM    CMCTFLG1,CMCTCPOK       CPMF active?
         JNZ   CPMF01                     yes, go ahead
         STRING64 '  Not active',INTO=LINE
         BRASL R14,SPACE2              Double Space
         J     CPMF99                  leave
CPMF01   DS  0H
         STRING64 '  Active and times of restart: ',(CMCTCRCT,F,L9B),  X
               INTO=LINE
         BRASL R14,SPACE1              Double Space
         STRING64 '  IEAOPT mode :',INTO=LINE
         LA    R4,LINE+1(R15)
        #STATUS CMCTOPTXXMODE,CMCT_OPT_NA,'No'
        #STATUS CMCTOPTXXMODE,CMCT_OPT_COMPAT,'Compat'
        #STATUS CMCTOPTXXMODE,CMCT_OPT_EXTEND,'Extend'
         BRASL R14,SPACE1              Double Space
         STRING64 '  Current mode:',INTO=LINE
         LA    R4,LINE+1(R15)
        #STATUS CMCTCPMFMODE,CMCT_CPMF_NA,'No'
        #STATUS CMCTCPMFMODE,CMCT_CPMF_COMPAT,'Compat'
        #STATUS CMCTCPMFMODE,CMCT_CPMF_EXTEND,'Extend'
         BRASL R14,SPACE2              Double Space
         ICM   R4,B'1111',CMCTCMC2      CPCB
         JNZ   CPMF02
         STRING64 '  No more info as CMCTCMC2 is zero',INTO=LINE
         BRASL R14,SPACE2              Double Space
         J     CPMF99                  leave
CPMF02   DS     0H
         STRING64 '  CHPID PCHID Type  SHR zHPF Grp Description',      X
               INTO=LINE                                         RS1108
         BRASL R14,SPACE1               Single Space
         USING CMC2,R4                  Tell assembly
         L     R5,CMCTCPM2              CPMB
         USING CPM2,R5                  Tell assembly
         LHI   R7,256                   256 channels
*loop
CPMF03   DS     0H
         TM    CMC2FLAGS,CMC2NOTVALID   Path valid?
         JO    CPMF06                     no, ignore
         IC    R0,CMC2CHPID
         STH   R0,WKCELL1               convert to halfword
         AIF   (NOT D'CVTH7708).CPMF03J   z/OS R5?               RS1107
         TM    HBB7708,L'HBB7708       running on z/OS R5?       RS1107
         JZ    CPMF03J                 no                        RS1107
         IOSCHPD CHPID=WKCELL1,                                        X
               ACRONYM=WKCELL3,                                        X
               DESC=WORK256,                                           X
               ATTR=WORK256+50,                                        X
               MF=(E,WORK256+100,COMPLETE)                       RS0604
         MVI   WKCELL2,C'Y'             Default shared
         TM    CMC2FLAGS,CMC2SHAREDCHPID  Is this path shared?
         JO    *+4+4                    Yes, leave default
         MVI   WKCELL2,C'N'
         LA    R6,WORK256+50                                     RS0604
         USING CHPDATTR,R6              Map data IOSDCHPD        RS0604
         MVI   WKCELL2+1,C'Y'           zHPF (default yes)       RS1108
*        TM    CHPDAFLG,CHPDA_FCX       zHPF on ?                RS1108
         TM    CHPDAFLG,BIT5            zHPF on ?                RS1108
         JO    *+4+4                    Yes, leave default       RS1108
         MVI   WKCELL2+1,C'N'                                    RS1108
         TM    CHPDAFLG,CHPDA_CHID_Valid   Check first           RS0604
         JNO   CPMF03A                                           RS0604
         TM    CHPDAFLG,CHPDA_CHID_External PCHID present?       RS0604
         JNO   CPMF03A                                           RS0604
         STRING64 2X,(CMC2CHPID,1,X),4X,(CHPDA_CHID,2,X),2X,           X
               (WKCELL3,5),1X,                                         X
               (WKCELL2,1),3X,(WKCELL2+1,1),4X,                  RS1108X
               (CMC2CMG,1,X),2X,(WORK256,32),INTO=LINE
         BRASL R14,SPACE1               Single Space
         J     CPMF03Z
CPMF03A  DS     0H
         STRING64 2X,(CMC2CHPID,1,X),'    n/a   ',                     X
               (WKCELL3,5),1X,                                         X
               (WKCELL2,1),3X,(WKCELL2+1,1),4X,                  RS1108X
               (CMC2CMG,1,X),2X,(WORK256,32),INTO=LINE
         BRASL R14,SPACE1               Single Space
         J     CPMF03Z
         DROP  R6
.CPMF03J ANOP                                                    RS0604
CPMF03J  DS    0H                                                RS0604
         IOSCHPD CHPID=WKCELL1,         Get type and desc of this      X
               ACRONYM=WKCELL3,         Chpid                          X
               DESC=WORK256,                                           X
               MF=(E,WORK256+100,COMPLETE)
         MVI   WKCELL2,C'Y'             Default shared
         TM    CMC2FLAGS,CMC2SHAREDCHPID  Is this path shared?
         JO    *+4+4                    Yes, leave default
         MVI   WKCELL2,C'N'
         STRING64 2X,(CMC2CHPID,1,X),8X,(WKCELL3,5),1X,(WKCELL2,1),8X, X
               (CMC2CMG,1,X),2X,(WORK256,32),INTO=LINE
         BRASL R14,SPACE1               Single Space
*        #SNAP ADDR=(R4),LENGTH=32      debug code
CPMF03Z  DS     0H
         CLI   CMC2CMG,CMCCMG1          Group 1 ?
         JNE   CPMF04                     no, check Group 2
*        Interpreting Group 1 data makes no sense on my system
         USING CPM2CMG1,R6
         J     CPMF05
CPMF04   DS     0H
         CLI   CMC2CMG,CMCCMG2          Group 2 ?
         JNE   CPMF05                     no, check Group 3
         LA    R6,CMC2DATA              Channel characteristics
         USING CMC2CMG2,R6
         STRING64 33X,'MaxBsyCyles         : ',                        X
               (CMC2MAXBUSCYCLES,F,R10B),1X,                           X
               'ChWorkUnits        : ',                                X
               (CMC2MAXCHANNELWORKUNITS,F,R10B),INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 33X,'MaxWriteDataUnits   : ',                        X
               (CMC2MAXWRITEDATAUNITS,F,R10B),1X,                      X
               'MaxReadDataUnits   : ',                                X
               (CMC2MAXREADDATAUNITS,F,R10B),INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 33X,'DataUnitSize        : ',                        X
               (CMC2DATAUNITSIZE,F,R10B),INTO=LINE
         BRASL R14,SPACE1              Single Space
         DROP  R6
         LA    R6,CPM2DATA
         USING CPM2CMG2,R6
         STRING64 33X,'TotalBsyCycleCount  : ',                        X
               (CMG2TOTALBUSCYCLECOUNT,F,R10B),INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 33X,'TotalChWorkUnitCount: ',                        X
               (CMG2TOTALCHANNELWORKUNITCOUNT,F,R10B),1X,              X
               'LparChWorkUnitCount: ',                                X
               (CMG2LPARCHANNELWORKUNITCOUNT,F,R10B),INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 33X,'TotalWriteDataUnits : ',                        X
               (CMG2TOTALWRITEDATAUNITS,F,R10B),1X,                    X
               'LparWriteDataUnits : ',                                X
               (CMG2LPARWRITEDATAUNITS,F,R10B),INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 33X,'TotalReadDataUnits  : ',                        X
               (CMG2TOTALREADDATAUNITS,F,R10B),1X,                     X
               'LparReadDataUnits  : ',                                X
               (CMG2LPARREADDATAUNITS,F,R10B),INTO=LINE
         BRASL R14,SPACE1              Single Space
         J     CPMF05
CPMF05   DS     0H
         CLI   CMC2CMG,CMCCMG3          Group 3 ?
         JNE   CPMF06                     no, invalid group
*        Interpreting Group 3 I don't have any group 3 on my system
         LA    R6,CMC2DATA
         USING CMC2CMG3,R6
         STRING64 33X,'DataUnitSize        : ',                        X
               (CMC3DATAUNITSIZE,F,R10B),1X,                           X
               'DataUnitSizeCPC    : ',                                X
               (CMC3DATAUNITSIZECPC,F,R10B),INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 33X,'MessageUnitSize     : ',                        X
               (CMC3MESSAGEUNITSIZE,F,R10B),1X,                        X
               'MessageUnitSizeCPC : ',                                X
               (CMC3MESSAGEUNITSIZECPC,F,R10B),INTO=LINE
         BRASL R14,SPACE1              Single Space
         DROP  R6
         LA    R6,CPM2DATA
         USING CPM2CMG3,R6
         STRING64 33X,'MessageUnitsSent    : ',                        X
               (CMG3MESSAGEUNITSSENT,F,R10B),1X,                       X
               'MessageUnitsSentCPC: ',                                X
               (CMG3MESSAGEUNITSSENTCPC,F,R10B),INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 33X,'UnsuccAttemptsToSend: ',                        X
               (CMG3UNSUCCATTEMPTSTOSEND,F,R10B),1X,INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 33X,'UnavailRecvBuffer   : ',                        X
               (CMG3UNAVAILRECEIVEBUFFERS,F,R10B),1X,                  X
               'UnavailRecvBuffCPC : ',                                X
               (CMG3UNAVAILRECEIVEBUFFERSCPC,F,R10B),INTO=LINE
         BRASL R14,SPACE1              Single Space
         STRING64 33X,'DataUnitsSend       : ',                        X
               (CMG3DATAUNITSSENT,F,R10B),1X,                          X
               'DataUnitsSendCPC   : ',                                X
               (CMG3DATAUNITSSENTCPC,F,R10B),1X,INTO=LINE
         BRASL R14,SPACE1              Single Space
CPMF06   DS     0H
         LA    R4,L'CMC2CHANMEASUREMENTCHARBLOCK(,R4) next CMC2
         LA    R5,L'CPM2CHANNELUTILIZATIONENTRY(,R5)  next CPM2
         JCT   R7,CPMF03
         BRASL R14,BLANK1
*endloop
.CPMF99  ANOP
CPMF99   END_PROC
         TITLE 'SHOWMVS &REL - Master Trace (SYSLOG)'
*---------------------------------------------------------------------*
*                                                                     *
*Master Trace Table                                                   *
*                                                                     *
* N 0008000 ALF0     05005 19:37:43.43 JOB07660 00000290  ALVACTR     *
*                                                         CHL         *
* N 0008000 ALF0     05005 19:37:43.13 JOB07660 00000290  ALVACTR     *
*                                                         CHL         *
*                                                                     *
*---------------------------------------------------------------------*
MTT00    BEGIN_PROC KW=MTT,AUTH=YES                              RS0105
         AIF   ('&MTTDATA' EQ 'N').MTT99                         RS0305
         STRING64 '&TITLEPFX.Master Trace Table',INTO=LINE
         BRASL R14,SPACE2              Double Space
         LAE   R3,0                    Clear AR
         L     R3,CVTMSER              IEEBASEA
         USING BASE,R3
*        #SNAP ADDR=(R3),LENGTH=256    debug code                RS0905
         MODESET EXTKEY=ZERO        <- switch to KEY=0
MTT01    DS    0H
         LA    R1,1                    asid of *MASTER* ASCB
         LOCASCB ASID=(1)              Get Addr of *MASTER* ASCB
         LTR   R4,R1                   valid ASID?
         JNP   MTT90                     no, jump
*
*        Master Trace reside in *MASTER* asid
*
         L     R4,ASCBASSB-ASCB(,R4)   ASSB address
         USING ASSB,R4
         ALESERV ADD,                                                  X
               STOKEN=ASSBSTKN,        MSTR address space              X
               ALET=ALET1,             return ALET                     X
               CHKEAX=NO,                                              X
               MF=(E,ALESERV2)
         DROP  R4
         LAM   R5,R5,ALET1             Point to MSTR Address Space
         CPYA  R6,R5                   Point to MSTR Address Space
         LAM   R13,R13,=F'0'           Set SR13 to Primary       JH0111
         SAC   512                     AR mode
         L     R5,BAMTTBL              Address of Master Trace Table
         LAE   R7,0                    Clear AR
         ICM   R7,B'0111',BAMTLEN      Length of MTT
         JZ    MTT80
         USING MTTABLE,R5              IEEZB806
         MVC   WORK256,0(R5)                Debug code          RS0905
*        #SNAP ADDR=WORK256,LENGTH=MTTHDRLN Debug code          RS0905
         ICM   R6,B'1111',MTTCURPT     Current present
         JZ    MTT80                     no leave
         CPYA  R6,R5                   Point to MSTR Address Space
         USING MTENTRY,R6              tell assembly
         SRA   R7,8                    divide by 256
         JNP   MTT80                         rations
*loop
MTT10    DS    0H
*        #SNAP ADDR=WKCELL1,LENGTH=4   Debug code               RS0905
         CLC   MTENTLEN,=H'256'        entry length > 256
         JH    MTT80                     yes leave (end)
         LH    R1,MTENTLEN             Length of entry
         STRING64 2X,(MTENTDAT,(R1)),INTO=LINE First part of trace
         BRASL R14,SPACE1              Double Space
         LH    R1,MTENTLEN             Length of entry
         AHI   R1,-&LINESIZE+2         minus length first part
         LTR   R1,R1                   Still some bytes left?
         JM    MTT12                     no suppress 2. part
         JZ    MTT12                     no suppress 2. part
         STRING64 (MTENTDAT+&LINESIZE-2,(R1),T),INTO=LINE+58 2. part
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1              Double Space
MTT12    DS    0H
         AH    R6,MTENTLEN             jump after length
         LA    R6,L'MTENTHDR(R6)       jump around header
         JCT   R7,MTT10
*endloop
MTT80    DS    0H                                               RS0905
         BRASL R14,BLANK1
         SAC   0                       AR mode off
         LAM   R5,R5,=F'0'             Set AR5 to zero
         CPYA  R6,R5                   Set AR6 to zero
         ALESERV DELETE,ALET=ALET1,MF=(E,ALESERV2)
         XC    ALET1,ALET1             zero ALET for RCVY rtne
         LAE   R5,0                    Clear AR
         LAE   R6,0                    Clear AR
MTT90    DS    0H
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
.MTT99   ANOP
MTT99    END_PROC
         TITLE 'SHOWMVS &REL - System Consoles (MCS)'
*---------------------------------------------------------------------*
*                                                                     *
*Consoles:                                                            *
*                                                                     *
*  LOG Class: U        LOG Limit  : 99999    CSCBLOC   : Above        *
*  RMAX     : 300      CONSOL0Z  PFKTAB00  MMSLST00  LOGON: Optional  *
*  SMCS-Appl: SMCSMVSV SMCS in use: SMCSMVSV Generic ID: SCSMCS$$     *
*                                                                     *
*    ID   Name      Device   Status    Route Codes                    *
*    1    SYS1MAST  0040     Active    1,2,3,4,5,6,7,8,9,10,12,13,14  *
*    2    SYS2ALT   0041     Inactive                                 *
*    3    03        JES      Inactive                                 *
*    4    SYS2MAST  Sysplex  Inactive                                 *
*    4    XXXXXXXX  SMCS     Inactive                                 *
*                                                                     *
* Message Processing Facility (MPF) entries                           *
*                                                                     *
*   Message id  MPF  Suppress  Retain  Auto  Token    Exit            *
*   .NO_ENTRY   00   No        Yes     No                             *
*   $ACF07902I  00   Yes       No      No                             *
*   IEF176I     00   No        No      No             WTOE176I        *
*   WER*        00   Yes       No      No                             *
*                                                                     *
* General wto user exit (IEAVMXIT) - active                           *
*                                                                     *
* Color Parameters and Attributes                                     *
*                                                                     *
*   Msg Type  MPF  Color   Hilight  Intensity                         *
*   URGATTN   DFL  RED     NONE     HIGH                              *
*   IMEDACTN  DFL  WHITE   NONE     HIGH                              *
*   OOLDATA   DFL  GREEN   NONE     NORM                              *
*                                                                     *
* EMCS-Consoles:                                                      *
*                                                                     *
*   Console  St Key      System   RT Dom Level Auth Term     JobName  *
*   SYSCON05 80 SYSCONS  AL20     00 80  FC    F0   AL20              *
*   SYSIPLI  00 NONE              02 40  FC    00   SYSIPLI           *
*   SYSCON03 80 SYSCONS  AL10     00 80  FC    F0   AL10              *
*   G07BAL10 00 NONE              C0 20  FC    00   TMONMQ            *
*   SYSCON06 80 SYSCONS  ALB0     00 80  FC    F0   ALB0              *
*   AFB00002 80 AFB0     ALB0     02 20  FC    F0   AFB00002          *
*   SYSCON07 80 SYSCONS  ALA0     00 80  FC    F0   ALA0              *
*   UC4CN003 80 NONE     AL10     40 40  FC    00   UC4TR003          *
*   SYSCON08 80 SYSCONS  ALF0     00 80  FC    F0   ALF0              *
*   AFF00002 80 AFF0     ALF0     02 20  FC    F0   AFF00002          *
*   SYSCON02 80 SYSCONS  AL30     00 80  FC    F0   AL30              *
*   SYSMTIP  00 NONE              20 20  FC    F0   TMONTCP           *
*   $STCMVS  00 NONE              02 40  FC    00   SYSDOWOM          *
*                                                                     *
* CMDS Command:                                                       *
*                                                                     *
* Matching Commands Executing : 2                                     *
* Matching Commands Waiting   : 0                                     *
*                                                                     *
* Command  Command ID Class  Date/Time issued (UTC) Jobname  Flag     *
*     SET           3 M1     2005-07-12 18.01.00.42 *MASTER* 80  Execu*
*     SET SLIP=00                                                     *
*     SET        1459 M1     2005-07-25 07.05.30.72 AL13783  80  Execu*
*     SET MPF=00                                                      *
*                                                                     *
*---------------------------------------------------------------------*
CONSOLES BEGIN_PROC KW=CONSOLES                                  RS0302
         STRING64 '&TITLEPFX.Consoles:',INTO=LINE
         BRASL R14,SPACE2              Double Space
*
*        LOG Class: L    LOG Limit: 999999     CSCB=ABOVE
*
CONSOL10 L     R4,CVTMSER              Master Sched Res Data Area
         USING BASE,R4                 IEEBASEA
         STRING64 '  LOG Class: ',MSLOGCLS,8X,                         X
               'LOG Limit  : ',(MSLOGLMT,FL3,L9),INTO=LINE
         LA    R2,LINE(R15)            end of text
         STRING64 'CSCBLOC   : ','Below',INTO=((R2),30)         RS0207
         TM    BACHFLGS,BACSCBA        CSCB=ABOVE?
         JZ    CONSOL15                no, jump
         STRING64 'CSCBLOC   : ','Above',INTO=((R2),30)         RS0207
CONSOL15 BRASL R14,SPACE1              Single Space
*
         L    R4,CVTCUCB               Unit Control Module (UCM)
         USING UCM,R4
*
         L     R5,UCMBFEXT                                     JWMJUN95
         USING UCMFEXTA,R5                                     JWMJUN95
         LA    R1,=C'Optional'                                 JWMNOV96
         TM    UCMFMISC,UCMFLOGR+UCMFLOGA Logon Optional       JWMNOV96
         JZ    *+20                    Yes                     JWMNOV96
         LA    R1,=C'Required'         Default required        JWMNOV96
         TM    UCMFMISC,UCMFLOGR       Logon Required          JWMNOV96
         JO    *+8                     Yes                     JWMNOV96
         LA    R1,=C'Auto    '         Logon Auto              JWMNOV96
         L     R5,UCMFPPTR                                     JWMJUN95
         USING UCMPEXTA,R5                                     JWMJUN95
         STRING64 '  RMAX     : ',(UCMRMAX,F,L0),                RS0207X
               '   CONSOL',UCMPCNXX,                           JWMJUN95X
               '  PFKTAB',UCMPPFKM,                            JWMNOV96X
               '  MMSLST',UCMPMMSM,                              RS0207X
               '  LOGON: ',((R1),8),                           JWMNOV96X
               INTO=LINE                                       JWMJUN95
         BRASL R14,SPACE1                                        RS0207
         AIF   (NOT D'CVTH7790).CONS15A   z/OS V2R1 ? No         JH0112
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010201').CONS15A      RS0112
         TM    HBB7790,L'HBB7790       running on z/OS V2R1 ?    JH0112
         JNO   CONSOL15A           ...jif not                    JH0112
* CMSTRNM structure name moved to UPEA area at CVTH7790          JH0112
* The following is temporary since we do not yet know the        JH0112
* structure of the UPEA area pointed to by UCMUPEA               JH0112
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?          RS1114
         JZ    CONSOL15A                 no leave                RS1114
         MODESET EXTKEY=ZERO           switch to KEY=0           RS1114
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS1114
         JZ    CONS151                    no use old             RS1114
         ESAIR R2                      Get current sec. asid     RS1114
         STG   R2,WKCELL1              Save current sec. asid    RS1114
         J     CONS151_1               Jump around               RS1114
CONS151  DS    0H                                                RS1114
         ESAR  R2                      Get current sec. asid     RS1114
         STH   R2,WKCELL1              Save current sec. asid    RS1114
CONS151_1 DS    0H                                               RS1114
         AXSET AX==H'1'                Set auth                  RS1114
         L     R15,UCMASCB             Console-ASCB              RS1114
         LH    R2,ASCBASID-ASCB(,R15)  Get ASID                  RS1114
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS1114
         JZ    CONS152                    no use old             RS1114
         L     R1,ASCBASSB-ASCB(R15)   Console-ASSB              RS1114
         USING ASSB,R1                                           RS1114
         LMH   R2,R2,ASSBISQN             Sequence               RS1114
         DROP  R1                                                RS1114
         SSAIR R2                      Set CONSOLE as secondary  RS1114
         J     CONS152_1               Jump around               RS1114
CONS152  DS    0H                                                RS1114
         SSAR  R2                      Set CONSOLE as secondary  RS1114
CONS152_1 DS    0H                                               RS1114
         L     R6,UCMUPEA          R6 -> UPEA area               RS1114
         LHI   R14,16                   Set lenght of receiving field
         SR    R15,R15                 'from' key                RS1114
         MVCP  WORK256(R14),0(R6),R15  Copy data from sec. asid  RS1114
         TM    CVTFLAG2,CVTALR         ASN/LX Reuse Facility     RS1114
         JZ    CONS153                    no use old             RS1114
         LG    R2,WKCELL1                                        RS1114
         SSAIR R2                      Should be same as primary RS1114
         J     CONS153_1               Jump around               RS1114
CONS153  DS    0H                                                RS1114
         LH    R2,WKCELL1                                        RS1114
         SSAR  R2                      Should be same as primary RS1114
CONS153_1 DS    0H                                               RS1114
         AXSET AX==H'0'                Set auth                  RS1114
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
         STRING64 '  OpLog-Str: ',(WORK256,16),INTO=LINE         RS1114
*        STRING64 '  OpLog-Str: ',(0(R6),16),INTO=LINE           JH0112
         AGO   .CONS15B                                          JH0112
.CONS15A ANOP                                                    JH0112
         STRING64 '  OpLog-Str: ',UCMSTRNM,INTO=LINE             RS0207
.CONS15B ANOP                                                    JH0112
CONSOL15A DS   0H                                                GF0414
         BRASL R14,SPACE1                                        RS0207
         STRING64 '  SMCS-Appl: ',UCMPS_APPLID,                  RS0207X
               ' SMCS in use: ',UCMPS_APPLID_INUSEBY_SYSTEM,     RS0207X
               ' Generic ID: ',UCMPS_GENERIC_INUSEBY_SYSTEM,     RS0207X
               ' Status: ',(UCMPS_STATUS,1,X),                   RS0207X
               INTO=LINE                                         RS0207
         BRASL R14,SPACE2                                      JWMJUN95
         L     R5,UCMVDATA             1st UCME
         USING UCMLIST,R5              Individual device entry
*                    1234 12345678  1234567  12345678  123456789012345
         STRING64 '    ID   Name      Device   Status    Route Codes', X
               INTO=LINE
         BRASL R14,SPACE1
*loop
CONS210  STRING64 (UCMID,FL1,L),INTO=WKCELL1 console ID
         L     R6,UCMFEXTP             addr of fixed extension
         USING UCMEFEXT,R6
         MVC   WKCELL2,BLANKS          NO NAME
         MVC   WKCELL2,UCMEFCNM        name=IPO1MAST
         MVC   WKCELL3,=C'Sysplex '    device=sysplex
         MVC   WKCELL4,=C'Inactive'    status=inact
         ICM   R7,B'1111',UCMUCB       associated UCB
         JZ    CONS220                 no UCB, must be SYSPLEX
         USING UCBOB,R7
         UCB_NAME LEFT,JES=YES         get 4-character device number
         STRING64 UCB_NAME,INTO=WKCELL3 device=041
CONS220  DS    0H
         TM    UCMES_FLAGS,UCMES_SMCS                            RS0207
         JZ    CONS221                 no SMSC                   RS0207
         MVC   WKCELL3,=C'SMCS    '    SMCS console              RS0207
CONS221  DS    0H                                                RS0207
         MVC   NEXTLINE,BLANKS         clear route codes
         TM    UCMATR,UCMUF            This console active?
         JZ    CONS270                 no, jump
         STRING64 'Active',INTO=WKCELL4 status=active
         CLI   UCMEFRC,X'FF'           Routcde=ALL ?
         JNE   CONS240                 no, jump
         CLC   UCMEFRC+1(L'UCMEFRC-1),UCMEFRC
         JNE   CONS240                 no, jump
         STRING64 'All',INTO=NEXTLINE  Routcde=all
         J     CONS270                 next UCM
CONS240  EQU   *
         LA    R0,L'UCMEFRC            BYTE LOOP
         LA    R1,1                    Route code (1-255)
         LA    R2,UCMEFRC              Routcde bit STRING64
         BRASL R14,BITSTR              edit bit STRING64
*
CONS270  STRING64 4X,(WKCELL1,5),      console id                      X
               WKCELL2,2X,             name                            X
               WKCELL3,1X,             device                          X
               WKCELL4,2X,             status                          X
               NEXTLINE,               route-codes                     X
               INTO=LINE
CONS280  BRASL R14,SPACE1          <== next line
         LM    R14,R15,UCMVDATA+4      length(UCME) Last(UCME)
         BRXLE R5,R14,CONS210
*endloop
         BRASL R14,BLANK1              BLANK LINE
*                                                                DA1104
* Show the status of the Console Availiblity Feature. See APAR   DA1104
* II13752.                                                       DA1104
*                                                                DA1104
         TM    HBB7707,L'HBB7707       running on z/OS R4        RS1104
         JZ    CONS400                 no, jump and display      RS1104
*        L     R4,CVTCUCB              Unit Control Module (UCM) DA1104
*        USING UCM,R4                                            DA1104
         LA    R1,=C'on    '           Default is on             DA1104
         CLI   UCMVRSN,10              At JBB7727 or higher?     DA1104
         JNL   CONS301                 Yes, continue             DA1104
         LA    R1,=C'not on'           No, set text              DA1104
CONS301  DS    0H                                                DA1104
         STRING64 '  Console Availability Feature is ',          DA1104@
               ((R1),6),INTO=LINE                                DA1104
         BRASL R14,SPACE2                                        DA1104
*-Here we could display "D OPDATA,TR" info                       DA1104
*
*        MPF Table (ESA 4.1 and above)
*
.CONS400 ANOP
CONS400  L     R7,UCMBFEXT             Addr of Fixed Extension Base
         USING UCMFEXTA,R7
         ICM   R7,B'1111',UCMFMPFP     Addr of MPF Table
         JZ    CONS450                 Zero, No MPF table
         USING MPFT,R7
         SR    R1,R1
         ICM   R1,B'0111',MPFTSIZE     Size of MPF table
         JZ    CONS450                 Zero, no MPF table
         CLI   MPFTVRSN,MPFTS212       version 1 ?
         JE    CONS455                 yes, ignore
         STRING64 '  Message Processing Facility (MPF) entries',       X
               INTO=LINE
         BRASL R14,SPACE2
*        STRING64 '    Message id  MPF  Suppress  Retain  Auto  Token',X
               '    Exit',INTO=LINE
         STRING64 '    Message id  MPF  Suppress  Retain  Auto  Token',X
               '    Exit     Entry   Status',INTO=LINE           JH0606
         BRASL R14,SPACE1
         LA    R6,MPFTSENP             Address of first specific entry
         LH    R0,MPFTNENS             Number of entries
         BRASL R1,CONS440              Format the generic entries
         LA    R6,MPFTGENP             Address of first generic entry
         LH    R0,MPFTNENG             Number of entries
         BRASL R1,CONS440              Format the generic entries
         J     CONS460
*
*        Sub-routine
*
CONS440  DS    0H
         LTR   R0,R0                   Number of entries
         BZR   R1                      Zero, exit
         ICM   R6,B'1111',0(R6)        Address of first entry
         BZR   R1                      Zero, exit
         USING MPFTENTY,R6
*loop
CONS441  DS    0H
*        Suppress message
         LA    R2,=C'Yes'              Suppress(yes)
         TM    MPFTEFLG,MPFSUPMS       Suppress message
         JO    *+8                     Yes, branch
         LA    R2,=C'No '              Suppress(no)
         TM    MPFTEFLG,MPFSUPA        Suppress All message
         JZ    *+8                     No, branch
         LA    R2,=C'All'              Suppress(all)
*        Retain message
         LA    R3,=C'Yes'              Retain(tes)
         TM    MPFTEFLG,MPFRETAN       Retain message
         JO    *+8                     Yes, branch
         LA    R3,=C'No '              Retain(no)
*        Automate message
         LA    R4,=C'Yes'              Auto(yes)
         TM    MPFTEFLG,MPFAUTO        Automation specified
         JO    *+8                     Yes, branch
         LA    R4,=C'No '              Auto(no)
*        format the message id
         MVC   WORK256(L'MPFMSGID),MPFMSGID move msgid to work area
         TM    MPFTEFLG,MPFTPREF          Generic message id
         JZ    CONS444                    No, branch
         LA    R5,WORK256                 Start of work area
         SR    R15,R15                    Clear work reg
         IC    R15,MPFTIDLN               Length of message id
         ALR   R5,R15                     Skip over
         MVI   0(R5),C'*'                 Indicate prefix msg
CONS444  DS    0H
         MVI   WORK256+11,X'40'           Ripple Status area     JH0606
         MVC   WORK256+12(8),WORK256+11   to blanks              JH0606
         CLC   MPFEXNME,BLANKS            any exit here
         JE    CONS446                    no
         TM    MPFTEFLG,MPFXACTV          active
         JO    CONS446                    yes
         STRING64 'abended  ',INTO=WORK256+11                    JH0606
         TM    MPFTEFLG,MPFABEND          abended
         JO    CONS446                    yes
         STRING64 'not found',INTO=WORK256+11                    JH0606
CONS446  DS    0H
         MVI   WORK256+20,X'40'           Ripple entry point areaJH0606
         MVC   WORK256+21(7),WORK256+20   target address to spaceJH0606
         L     R5,MPFEXENT                R5 = entry point       JH0606
         LTR   R5,R5                      Is there an entry?     JH0606
         JZ    CONS447                    ...bif not             JH0606
         STRING64 (MPFEXENT,,X),INTO=(WORK256+20,8)              JH0606
CONS447  DS    0H                                                JH0606
         STRING64 4X,(WORK256,L'MPFMSGID), msgid                       X
               2X,MPFSUFFX,               MPF id                       X
               3X,((R2),3),               Suppress                     X
               7X,((R3),3),               Retain                       X
               5X,((R4),3),               Auto                         X
               3X,MPFAUTOT,               token                        X
               1X,MPFEXNME,               exit name                    X
               1X,(WORK256+20,8),         exit entry point       JH0606X
               1X,(WORK256+11,9),         exit status            JH0606X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BRASL R14,SPACE1              Single space
         AH    R6,MPFTENLN             Skip this entry
         JCT   R0,CONS441              Repeat for next entry
*endloop
         BR    R1                      Return
*
CLRATTRT DS    0CL126                 Attribute table
         DC    CL8'URGATTN '
         DC    AL1(7)
         DC    CL8'IMEDACTN'
         DC    AL1(8)
         DC    CL8'EVETACTN'
         DC    AL1(8)
         DC    CL8'GENMSG  '
         DC    AL1(6)
         DC    CL8'PPMSG   '
         DC    AL1(5)
         DC    CL8'SELPEN  '
         DC    AL1(6)
         DC    CL8'INSTRERR'
         DC    AL1(8)
         DC    CL8'ENTRYARA'
         DC    AL1(8)
         DC    CL8'WARNLGEN'
         DC    AL1(8)
         DC    CL8'WARNRGEN'
         DC    AL1(8)
         DC    CL8'WARNRURG'
         DC    AL1(8)
         DC    CL8'OOLCNTL '
         DC    AL1(7)
         DC    CL8'OOLLABEL'
         DC    AL1(8)
         DC    CL8'OOLDATA '
         DC    AL1(7)
CLRATTR# EQU   (*-CLRATTRT)/9
*
CLRCOLRT DS    0CL49                  Color of message
         DC    CL6'BLUE  '
         DC    X'F1'
         DC    CL6'RED   '
         DC    X'F2'
         DC    CL6'PINK  '
         DC    X'F3'
         DC    CL6'GREEN '
         DC    X'F4'
         DC    CL6'TURQU '
         DC    X'F5'
         DC    CL6'YELLOW'
         DC    X'F6'
         DC    CL6'WHITE '
         DC    X'F7'
CLRCOLR# EQU   (*-CLRCOLRT)/7
*
CLRLITET DS    0CL28                 Highlight Table
         DC    CL6'NONE  '
         DC    X'00'
         DC    CL6'BLINK '
         DC    X'F1'
         DC    CL6'RE-VID'
         DC    X'F2'
         DC    CL6'UNDSCR'
         DC    X'F4'
CLRHIGH# EQU   (*-CLRLITET)/7
*
CLRINTT  DS    0CL10                 Intensity
         DC    CL4'NORM'
         DC    X'E4'
         DC    CL4'HIGH'
         DC    X'E8'
CLRINTT# EQU   (*-CLRINTT)/5
*
CONS450  DS    0H
         STRING64 ' MPF is inactive',INTO=LINE
         BRASL R14,SPACE1
         J     CONS460                 continue
*
CONS455  DS    0H
         STRING64 ' Unsupported MPF Table Format',INTO=LINE
         BRASL R14,SPACE1
*
*        IEAVMXIT Status
*
CONS460  DS    0H
         BRASL R14,BLANK1              Leave a blank line
         STRING64 '  Number of specific entries: ',(MPFTNENS,H,L),     X
               INTO=LINE                                         JM0302
         BRASL R14,SPACE1             Single space               JM0302
         STRING64 '  Number of generic entries: ',(MPFTNENG,H,L),      X
               INTO=LINE                                         JM0302
         BRASL R14,SPACE2             Double space               JM0302
         L     R4,CVTCUCB              Unit Control Module (UCM)
         USING UCM,R4
         L     R7,UCMBFEXT             Addr of Fixed Extension Base
         USING UCMFEXTA,R7
         LA    R1,=C'Inactive'
         ICM   R6,B'1111',UCMGENXP     General wto user exit table
         JZ    CONS462                 No, branch
         USING GENX,R6
         LA    R1,=C'Active  '
         TM    GENXFLGS,GENXACTV      Is it active
         JO    CONS462                Yes, branch
         LA    R1,=C'abended  '
CONS462  STRING64 '  General wto user exit (IEAVMXIT) - ',((R1),8),    X
               INTO=LINE
         BRASL R14,SPACE2             Double space
*
*        Color Parameters and Attributes
*
         L     R6,UCMFCLRA            Load color/highlighting          X
                                      attribute table
         USING CLRATT,R6
         STRING64 '  Color Parameters and Attributes',INTO=LINE
         BRASL R14,SPACE2             Double space
         STRING64 '    Msg Type  MPF  Color   Hilight  Intensity',     X
               INTO=LINE
         BRASL R14,SPACE1
         LA    R1,CLRATTRS            First set of Attributes
         BASR  R2,0                    Next instr.               RS0402
         AHI   R2,CLRATTRT-*                                     RS0402
         LA    R0,CLRATTR#            number of entries
*loop
CONS470  DS    0H
         BASR  R3,0                    Next instr.               RS0402
         AHI   R3,CLRCOLRT-*                                     RS0402
         LA    R7,CLRCOLR#            number of entries
*-loop
CONS472  CLC   0(1,R1),6(R3)          Is this the color
         JE    CONS474                yes
         LA    R3,7(,R3)              skip the entry
         JCT   R7,CONS472             repeat for next color
         LA    R3,=C'********'        oops
*-endloop
CONS474  BASR  R4,0                    Next instr.               RS0402
         AHI   R4,CLRLITET-*                                     RS0402
         LA    R7,CLRHIGH#            number of entries
*-loop
CONS476  CLC   1(1,R1),6(R4)          Is this the highlight
         JE    CONS478                yes
         LA    R4,7(,R4)              skip the entry
         JCT   R7,CONS476             repeat to next highlight
         LA    R4,=C'********'        oops
*-endloop
CONS478  BASR  R5,0                    Next instr.               RS0402
         AHI   R5,CLRINTT-*                                      RS0402
         LA    R7,CLRINTT#            number of entries
*-loop
CONS480  CLC   2(1,R1),4(R5)          Is this the intensity
         JE    CONS482                yes
         LA    R5,5(,R5)              skip the entry
         JCT   R7,CONS480             repeat to next intensity
         LA    R5,=C'********'        oops
*-endloop
CONS482  STRING64 4X,                                                  X
               ((R2),8),2X,           type                             X
               (3(R1),3),2X,          mpf member                       X
               ((R3),6),2X,           color                            X
               ((R4),6),3X,           hilight                          X
               ((R5),4),              intersity                        X
               INTO=LINE
         BRASL R14,SPACE1
         LA    R2,9(,R2)              Next attribute
         LA    R1,6(,R1)              Next set of attributes
         JCT   R0,CONS470
*endloop
         BRASL R14,BLANK1              BLANK LINE
*
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?          RS0301
         JNO   CONSO999                no, jump                  RS0301
         STRING64 '  EMCS-','Consoles:',INTO=LINE                RS0301
         BRASL R14,SPACE2                                        RS0301
         BRASL R14,WORKADDR            32K work area
         LR    R3,R1                   length is zero, for now     +RS
         LHI   R2,2048                 allocate a page           RS0301
         ST    R2,WKCELL1+4            save length               RS0301
         ST    R3,WKCELL1              save Buffer-Pointer       RS0301
         XC    WKCELL2,WKCELL2         clear                     RS0301
         LA    R0,WKCELL2              Rec-Size                  RS0301
         ST    R0,WKCELL2+4            Save Rec-Size-Pointer     RS0301
         XC    WKCELL3,WKCELL3         clear token               RS0301
         LA    R0,WKCELL3              Token                     RS0301
         ST    R0,WKCELL4              Save Token-Pointer        RS0301
         STRING64 '    Console  St Key      System   RT Dom Level ',   X
               'Auth Term     JobName   Routing',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0301
*Loop                                                            RS0301
CONS500  DS  0H                                                  RS0301
         MODESET EXTKEY=ZERO        <- switch to KEY=0           RS0301
         IEEQEMCS REQUEST=INFO,STATUS=ALL,BUFPTR=WKCELL1,              X
               BUFSIZE=WKCELL1+4,RECSIZE=WKCELL2+4,TOKEN=WKCELL4,      X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,WORK256)  RS0301
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
         USING ECDM_HDR,R3             The header Csect          RS0301
         LH    R7,ECDM_NENT           number of EMCS consoles    RS0301
         LTR   R7,R7                 Is it zero ?                RS0301
         JZ    CONS998                   yes, leave              RS0301
         LA    R4,ECDM_HDR_LEN(R3)     point to ECDM_SUMM        RS0301
         USING ECDM_SUMM,R4                                      RS0301
         LA    R5,ECDM_SUMM_LEN(R4)    point to ECDM_INFO        RS0301
         USING ECDM_INFO,R5                                      RS0301
*#SNAP ADDR=(R3),LENGTH=1024                             RS0301
*  loop                                                          RS0301
CONS520   DS 0H                                                  RS0301
*        #SNAP ADDR=(R4),LENGTH=24                               RS0301
*        #SNAP ADDR=(R5),LENGTH=104                              RS0301
         STRING64 4X,ECDM_SUMM_NAME,1X,(ECDM_INFO_STFLG,,X),1X,        X
               ECDM_INFO_KEY,1X,ECDM_INFO_SYSNM,1X,                    X
               (ECDM_INFO_RTFLG,,X),1X,(ECDM_INFO_DOM,,X),2X,          X
               (ECDM_INFO_MLVL,,X),4X,                                 X
               (ECDM_INFO_AUTH,,X),3X,ECDM_INFO_TERM,1X,               X
               ECDM_INFO_JOBNM,INTO=LINE                         RS0301
         CLI   ECDM_INFO_ROUT,X'FF'    Routcode=ALL ?            RS0301
         JNE   CONS525                 no, jump                  RS0301
         CLC   ECDM_INFO_ROUT+1(L'ECDM_INFO_ROUT-1),ECDM_INFO_ROUT
         JNE   CONS525                 no, jump                  RS0301
         STRING64 'All',INTO=NEXTLINE  Routcode=All              RS0301
         J     CONS527                                           RS0301
CONS525  EQU   *                                                 RS0301
         CLI   ECDM_INFO_ROUT,X'00'    Routcode=NONE ?           RS0301
         JNE   CONS526                 no, jump                  RS0301
         CLC   ECDM_INFO_ROUT+1(L'ECDM_INFO_ROUT-1),ECDM_INFO_ROUT
         JNE   CONS526                 no, jump
         STRING64 'None',INTO=NEXTLINE  Routcode=None            RS0301
         J     CONS527                                           RS0301
CONS526  EQU   *                                                 RS0301
         LA    R0,L'ECDM_INFO_ROUT     BYTE LOOP                 RS0301
         LA    R1,1                    Route code (1-255)        RS0301
         LA    R2,ECDM_INFO_ROUT       Routcde bit STRING        RS0301
         BRASL R14,BITSTR              edit bit STRING           RS0301
*                                                                RS0301
CONS527  STRING64 (LINE,71),(NEXTLINE,,T),INTO=LINE              RS0301
         TR    LINE,TRTPRINT           X'00' -> X'40'            RS0301
         BRASL R14,SPACE1              Single Space              RS0301
         ICM   R6,B'1111',ECDM_SUMM_CONS_SIZE returned length    RS0301
         AR    R4,R6                   point to next EMCS-entry  RS0301
         AR    R5,R6                   point to next EMCS-entry  RS0301
         JCT   R7,CONS520              do until                  RS0301
*  endloop                                                       RS0301
         LA    R14,IEEQE_RC_OK         Check RetCode 0           RS0301
         C     R14,LRETCODE                                      RS0301
         JE    CONS580                  Yes, leave               RS0301
         LA    R14,IEEQE_RC_NOSTOR     Check RetCode 4           RS0301
         C     R14,LRETCODE                                      RS0301
         JNE   CONS540                  not 4, report bad RC/RSN RS0301
         LA    R14,IEEQE_RS_TOKSZCONS  Check RsnCode 4           RS0301
         C     R14,LRSNCODE              yes, repeat the call to RS0301
         JE    CONS500                   get next entries        RS0301
*endloop                                                         RS0301
CONS540  DS   0H                                                 RS0301
         STRING64 '    EMCS',9X,'RC: ',(LRETCODE,,X),                  X
               ' RSN: ',(LRSNCODE,,X),INTO=LINE                  RS0301
         BRASL R14,SPACE1              Single Space              RS0301
         J     CONS998                                           RS0301
CONS580  DS   0H                                                 RS0301
         BRASL R14,BLANK1              Empty Line                RS0301
         STRING64 '    St  : 00-Inactive 40-Pending 80-Active',        X
               INTO=LINE
         BRASL R14,SPACE1              Single Space              RS0301
         STRING64 '    Rt  : 01-NoMscope 02-MScope=*ALL 04-MonSess',   X
               INTO=LINE                                         RS0301
         BRASL R14,SPACE1              Single Space              RS0301
         STRING64 '          08-MonStatus 10-MonJobName 20-Auto 40-HC',X
               ' 80-UD',INTO=LINE                                RS0301
         BRASL R14,SPACE1              Single Space              RS0301
         STRING64 '    Dom : 20-None 40-Normal 80-All',INTO=LINE RS0301
         BRASL R14,SPACE1              Single Space              RS0301
         STRING64 '    Lvl : 04-Broadcast 08-Info 10-Eventual 20-Crit',X
               'ical 40-Immediate 80-WTOR',INTO=LINE             RS0301
         BRASL R14,SPACE1              Single Space              RS0301
         STRING64 '    Auth: 10-Master 20-Cons 40-IO 80-Sys',          X
               INTO=LINE                                         RS0301
         BRASL R14,SPACE2              Double Space              RS0301
         DROP  R3,R4,R5
CONS600  DS  0H                                                  RS0705
         BRASL R14,WORKADDR            GET ADDR OF A 32K WORK ARERS0705
         ST    R0,ANSLEN               SAVE LENGTH               RS0705
         LR    R3,R1                   WHERE DID WE FIND IT      RS0705
         IEECMDS REQUEST=INFO,BUFFER=(R3),BUFSIZE=ANSLEN,              X
               COUNT=WKCELL1,RETCODE=LRETCODE,RSNCODE=LRSNCODE,        X
               MF=(E,WORK256)                                    RS0705
*        #SNAP ADDR=ANSLEN,LENGTH=4    Debug code                RS0705
*        #SNAP ADDR=WKCELL1,LENGTH=4   Debug code                RS0705
*        #SNAP ADDR=(R3),LENGTH=1024   Debug code                RS0705
         LTR   R15,R15                                           RS0705
         JNZ   CONS690                                           RS0705
         USING CMDS_HDR,R3                                       RS0705
         STRING64 '  CMDS Command:',INTO=LINE                    RS0705
         BRASL R14,SPACE2              Single Space              RS0705
         STRING64 '  Matching Commands Executing : ',                  X
               (CMDS_NUM_MTCHE,F,L9B),INTO=LINE                  RS0705
         BRASL R14,SPACE1              Single Space              RS0705
         STRING64 '  Matching Commands Waiting   : ',                  X
               (CMDS_NUM_MTCHW,F,L9B),INTO=LINE                  RS0705
         BRASL R14,SPACE2              Double Space              RS0705
         ICM   R7,B'1111',CMDS_NUMENT                            RS0705
         JZ    CONS998                                           RS0705
         LA    R5,CMDS_HDR_LEN(,R3)    jump around header        RS0705
         USING CMDS_ENTRY,R5                                     RS0705
         STRING64 '  Command  Command ID Class  Date/Time issued ',    X
               '(UTC) Jobname  Flag',INTO=LINE
         BRASL R14,SPACE1              Double Space              RS0705
*loop                                                            RS0705
CONS620  DS   0H                                                 RS0705
         LA    R1,CMDS_ENTRY_TIME      pass TOD clock value      RS0705
         BRASL R14,STCKCONV                                      RS0705
         STRING64 6X,CMDS_ENTRY_NAME,3X,CMDS_ENTRY_ID,1X,              X
               CMDS_ENTRY_CLASS,3X,(STCKDATE,,10),1X,(STCKTIME,,8),    X
               1X,CMDS_ENTRY_JOB,1X,(CMDS_ENTRY_FLG1,1,X),INTO=LINE
         LA    R4,LINE+2(R15)                                    RS0705
        #STATUS CMDS_ENTRY_FLG1,CMDS_ENTRY_EXECUTING,'Executing' RS0705
        #STATUS CMDS_ENTRY_FLG1,CMDS_ENTRY_WAITING,'Waiting'     RS0705
        #STATUS CMDS_ENTRY_FLG1,CMDS_ENTRY_REMOVED,'Removed'     RS0705
         BRASL R14,SPACE1              Single line               RS0705
         STRING64 6X,(CMDS_ENTRY_TEXT,80),INTO=LINE
         BRASL R14,SPACE1              Single line               RS0705
         LA    R5,CMDS_ENTRY_LENGTH(,R5)   next entry
         JCT   R7,CONS620              Do until                  RS0705
*endloop                                                         RS0705
         BRASL R14,BLANK1              Single Space              RS0705
         J     CONS998                                           RS0705
CONS690  STRING64 '  IEECMDS FAILED - ',                               X
               ' Returncode=',(LRETCODE,,X),                           X
               ' Reasoncode=',(LRSNCODE,,X),                           X
               ' Size=',(ANSLEN,F,L),                                  X
               INTO=LINE                                         RS07S5
         BRASL R14,SPACE1              Single line               RS0705
CONS998  DS   0H                                                 RS0301
.CONSO999 ANOP                                                   RS0301
CONSO999 END_PROC
         TITLE 'SHOWMVS &REL - Console Query'                    RS0506
*----------------------------------------------------------------------
*
*Console Query:
*
* AMRF-Status:  n/a Validity: WTOR AMRF
*
* WTOR Queue :
* Empty
*
* AMRF Immediate Action Queue :
* *IEA480E 3270,DASD,MODERATE ALERT,MT=33909,SER=0503-60179,REFCODE=E47
* *IEA480E 3136,DASD,MODERATE ALERT,MT=33909,SER=0503-60179,REFCODE=E47
*
* AMRF Evaluate Action Queue  :
* Empty
*
* AMRF Critical Action Queue  :
* Empty
*
*----------------------------------------------------------------------
CNZ00    BEGIN_PROC KW=CNZ,AUTH=YES
         AIF   (NOT D'CVTH7720).CNZ99  z/OS R7? No
         AIF   (T'&SYSSTATE_OSREL EQ 'O').CNZ99                  RS0806
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010107').CNZ99        RS0806
         TM    HBB7720,L'HBB7720       running on z/OS R7
         JZ    CNZ99                     no, leave
         STRING64 '&TITLEPFX.Console Query:',INTO=LINE
         BRASL R14,SPACE2
         LAM   R1,R1,=F'0'             Set AR1 to Primary        JH0111
         LAM   R4,R4,=F'0'             Set AR4 to Primary        JH0911
         LAM   R12,R12,=F'0'           Set AR12 to Primary       JH0111
         LAM   R13,R13,=F'0'           Set AR13 to Primary       JH0111
         SAC   512                     AR Mode on
         SYSSTATE ASCENV=AR
         DSPSERV CREATE,                                               X
               NAME==CL8'CNZQUERY',    C'CNZQUERY'                     X
               BLOCKS==A(524288),      size in Pages                   X
               STOKEN=WKCELL1,                                         X
               MF=(E,WORK256)
         ALESERV ADD,STOKEN=WKCELL1,ALET=WKCELL2,MF=(E,WORK256)
         CNZQUERY WTOR=YES,AMRF=YES,  Get Console Query                X
               ANSAREAALET=WKCELL2,   ..Answer return area             X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,                      X
               MF=(E,WORK256)
         CLC   LRETCODE,=F'0'          Check RC
         JNE   CNZ80                   not zero leave
         LAM   R5,R5,WKCELL2           Point to the dataspace
         LHI   R5,CNZMYQUAHDR_ADDR     Start at
         USING CNZMYQUAHDR,R5
*                                      Examine the WTOR queue
         CPYA  R6,R5                   Copy AR5 to AR6
         STRING64 '  AMRF-Status: ',INTO=LINE
         LA    R4,LINE(R15)
         MVC   0(4,R4),=C' n/a'             Default
        #STATUS Cnzmyquah_AMRF_Status_Byte0,Cnzmyquah_AMRF_Active,     X
               'Active'
         STRING64 (LINE,,L),' Validity: ',INTO=LINE
         LA    R4,LINE(R15)
        #STATUS Cnzmyquah_Validity,Cnzmyquah_Valid_WTOR_INFO,'WTOR'
        #STATUS Cnzmyquah_Validity,Cnzmyquah_Valid_AMRF_INFO,'AMRF'
         BRASL R14,SPACE2
         STRING64 '  WTOR Queue : ',INTO=LINE
         BRASL R14,SPACE1
         ICM   R6,B'1111',CNZMYQUAH_FIRST_ORE_ADDR
         JNZ   CNZ09                   OREs found
         STRING64 '  Empty',INTO=LINE
         BRASL R14,SPACE2
         J     CNZ20
CNZ09    DS       0H
         USING OREF,R6                 IHAORE
         CPYA  R7,R5                   Copy AR5 to AR7
*loop
CNZ10    DS       0H
         L     R7,ORERWQE              WQE Element
         USING WQE,R7                  IHAWQE
* Process WQE
         STRING64 2X,(WQETXT,80),INTO=LINE
         BRASL R14,SPACE1
         ICM   R6,B'1111',ORELKP       next ORE ?
         JNZ   CNZ10                     process until zero
*endloop
         BRASL R14,BLANK1
         LAM   R7,R7,=F'0'             clear AR6
         DROP  R6,R7
CNZ20    DS       0H
* Examine the AMRF Immediate Action queue
         STRING64 '  AMRF Immediate Action Queue :',INTO=LINE
         BRASL R14,SPACE1
         CPYA  R6,R5                   Copy AR5 to AR6
         ICM   R6,B'1111',CNZMYQUAH_FIRST_IA_WQE_ADDR
         JNZ   CNZ30                   WQEs found
         STRING64 '  Empty',INTO=LINE
         BRASL R14,SPACE2
         J     CNZ40
         USING WQE,R6                  IHAWQE
*loop
CNZ30    DS       0H
* Process WQE
         STRING64 2X,(WQETXT,80),INTO=LINE
         BRASL R14,SPACE1
         C     R6,WQELKP               Next = Current?
         JE    CNZ40                     ok leave
         ICM   R6,B'1111',WQELKP       next WQE ?
         JNZ   CNZ30                     process until zero
*endloop
         BRASL R14,BLANK1
CNZ40    DS       0H
* Examine the AMRF Evaluate Action queue
         STRING64 '  AMRF Evaluate Action Queue  :',INTO=LINE
         BRASL R14,SPACE1
         ICM   R6,B'1111',CNZMYQUAH_FIRST_EA_WQE_ADDR
         JNZ   CNZ50                   WQEs found
         STRING64 '  Empty',INTO=LINE
         BRASL R14,SPACE2
         J     CNZ60
*loop
CNZ50    DS       0H
* Process WQE
         STRING64 2X,(WQETXT,80),INTO=LINE
         BRASL R14,SPACE1
         C     R6,WQELKP               Next = Current?
         JE    CNZ60                     ok leave
         ICM   R6,B'1111',WQELKP       next WQE ?
         JNZ   CNZ50                     process until zero
*endloop
         BRASL R14,BLANK1
CNZ60    DS       0H
* Examine the AMRF Critical Action queue
         STRING64 '  AMRF Critical Action Queue  :',INTO=LINE
         BRASL R14,SPACE1
         ICM   R6,B'1111',CNZMYQUAH_FIRST_CEA_WQE_ADDR
         JNZ   CNZ70                   WQEs found
         STRING64 '  Empty',INTO=LINE
         BRASL R14,SPACE2
         J     CNZ90
*loop
CNZ70    DS       0H
* Process WQE
         STRING64 2X,(WQETXT,80),INTO=LINE
         BRASL R14,SPACE1
         C     R6,WQELKP               Next = Current?
         JE    CNZ90                     ok leave
         ICM   R6,B'1111',WQELKP       next WQE ?
         JNZ   CNZ70                     process until zero
         BRASL R14,BLANK1
         J     CNZ90
*endloop
         DROP  R6
CNZ80    DS       0H
         STRING64 '  CNZQUERY RC: ',(LRETCODE,,X),' RSN: ',            X
               (LRSNCODE,,X),INTO=LINE
         BRASL R14,SPACE1
CNZ90    DS      0H
         ALESERV DELETE,ALET=WKCELL1,MF=(E,WORK256)
         DSPSERV DELETE,STOKEN=WKCELL1,MF=(E,WORK256)
         SAC   0                       AR mode OFF
         SYSSTATE ASCENV=P
         LAM   R5,R5,=F'0'             Clear AR5
         LAM   R6,R6,=F'0'             Clear AR6
         BRASL R14,BLANK1
.CNZ99   ANOP
CNZ99    END_PROC
         TITLE 'SHOWMVS &REL - Command Prefix Table (CPF)'         RS
*----------------------------------------------------------------------
*                                                                  @RS
*Command Prefix Table:                                             @RS
*                                                                  @RS
*  Prefix   Owner    System   Scope   Remove  Faildisp             @RS
*                                                                  @RS
*  $        JES2     AL10     System  NO      PURGE                @RS
*  RACF     RACF     AL10     Sysplex YES     SYSPRUGE             @RS
*                                                                  @RS
*----------------------------------------------------------------------
CPFTAB00 BEGIN_PROC KW=CPF                                       RS0302
         STRING64 '&TITLEPFX.Command Prefix Table:',INTO=LINE      @RS
         BRASL R14,SPACE2              BLANK LINE                  @RS
*                                                                  @RS
*                Prefix   Owner    System  Scope   Remove Faildisp @RS
*                                                                  @RS
         STRING64 '  Prefix   Owner    System  Scope   Remove',        X
               ' Faildisp',INTO=LINE
         BRASL R14,SPACE2              BLANK LINE                  @RS
         L     R4,CVTCUCB              Unit Control Module (UCM)   @RS
         USING UCM,R4                                              @RS
         L     R5,UCMBFEXT             UCM fixed extension         @RS
         USING UCMFEXTA,R5             tell assembly               @RS
         L     R6,UCMCPFTA             CPF-Table                   @RS
         USING CPFT,R6                 tell assembly               @RS
         L     R7,CPFTNUME             number of entries           @RS
         LTR   R7,R7                   counter = 0                 @RS
         JZ    CPFTAB99                yes, no entries  jump       @RS
         A     R6,CPFT1ST              point to first entry        @RS
         USING CPFT_ENTRY,R6           tell assembly               @RS
*loop                                                              @RS
CPFTAB20 DS    0H                                                  @RS
         STRING64 2X,CPFTPRFX,1X,CPFTOWNR,1X,CPFTSYS,                  X
               INTO=LINE                                           @RS
         LA    R4,LINE+28              Scope                       @RS
         MVC   0(6,R4),=C'System  '    Default                     @RS
        #STATUS CPFTFLGS,CPFTSCOP,'Sysplex'                        @RS
         LA    R4,LINE+36              Scope                       @RS
         MVC   0(3,R4),=C'No '         Default                     @RS
        #STATUS CPFTFLGS,CPFTREMV,'Yes'                            @RS
         LA    R4,LINE+43              Scope                       @RS
         MVC   0(5,R4),=C'Purge'       Default                     @RS
        #STATUS CPFTFLGS,CPFTFDP1,'Syspurge'                       @RS
         BRASL R14,SPACE1              print                       @RS
         LA    R6,CPFT_ENTRY_LENGTH(R6)  next entry                @RS
         JCT   R7,CPFTAB20             do until count = 0          @RS
*endloop                                                           @RS
         BRASL R14,BLANK1              blank line                  @RS
.CPFTAB99 ANOP                                                     @RS
CPFTAB99 END_PROC                                                  @RS
         TITLE 'SHOWMVS &REL - Name/Token (NTT)          '         $RS
*----------------------------------------------------------------------
*                                                                  $RS
*  Name/Token Table:                                               $RS
*                                                                  $RS
*    Name            Token (char)      Token (hex)                 $RS
*    DSNLOGREC           &             020D5650 02000048 00000000  $RS
*     Logrec dataset: SYS1.ALS3.LOGREC or                          $DL
*     Logstream name: SYSPLEX.LOGREC.ALLRECS                       $DL
*    DSNDB2P                Q           0E038ED8 40404040 40404040 $DL
*     Subsystem name: DB2P                                         $DL
*     Member(s)     : DP01 DP02                                    $DL
*    IBMJESXCFAS                       0A206578 00000000 00000000  $RS
*    BBM6CSCAMVCT      d               09843F80 00000000 00000000  $RS
*    TCPIPAOE 6                        099B2040 00000000 00000000  $RS
*----------------------------------------------------------------------
NTTAB00  BEGIN_PROC KW=NTT                                       RS0302
         L     R3,CVTECVT              Load addr of ECVT           $RS
         ICM   R4,B'1111',ECVTNTTP-ECVT(R3)   Name/Token
         JZ    NTTAB49                 yes, no entries  jump       $RS
         USING NTTH,R4                                             $RS
         STRING64 '&TITLEPFX.Name/Token Table ','(SYSTEM)',INTO=LINE
         BRASL R14,SPACE2                                          $RS
         STRING64 '  Name',13X,'Token (char)     Token (hex)',         X
               23X,'ASID',INTO=LINE                                $RS
         BRASL R14,SPACE1                                          $RS
         ICM   R5,B'1111',NTTHNTTF     First NTTE                  $RS
         JZ    NTTAB49                 yes, no entries  jump       $RS
         USING NTTE,R5                                             $RS
*loop                                                              $RS
NTTAB20  DS    0H                                                  $RS
         STRING64 2X,NTTENAME,         name (char)               RS0904X
               1X,NTTETOKN,            token (char)                    X
               1X,(NTTETOKN,8,X),      token (hex)                     X
               1X,(NTTETOKN+8,8,X),    token (hex)                     X
               1X,(NTTEASID,,X),       xASID                     RS1006X
               1X,(NTTEASID,H,R4B),    ASID                      RS1006X
               INTO=LINE                                           $RS
         TR    LINE,TRTDOTS            convert non-printable to dots
         BRASL R14,SPACE1              single line                 $RS
         ICM   R2,B'1111',NTTETOKN     load pointer to data area   $DL
         JZ    NTTAB40                 no, jump                  RS0500
         CLC   =C'DSNLOGREC',NTTENAME                              $DL
         JNE   NTTAB30                 no, skip
         USING IFBNT_LOGREC,R2         SET ADDRESSABILITY          $DL
         CLI   IFBNT_LOGREC_CURRENT,IFBNT_USE_DATASET dataset?     $DL
         JNE   NTTAB22                 no, skip
         STRING64 5X,'Logrec dataset: ',IFBNT_LOGREC_NAME,         $DL X
               INTO=LINE                                           $DL
         BRASL R14,SPACE1              BLANK LINE                  $DL
         J     NTTAB40                                             $DL
NTTAB22  DS    0H                                                  $DL
         CLI   IFBNT_LOGREC_CURRENT,IFBNT_USE_LOGSTREAM logstream? $DL
         JNE   NTTAB23                 no, skip
         STRING64 5X,'Logstream name: ',IFBNT_LOGREC_LOGSTREAM,    $DL X
               INTO=LINE                                           $DL
         BRASL R14,SPACE1              BLANK LINE                  $DL
         J     NTTAB40                                             $DL
NTTAB23  DS    0H                                                  $DL
         CLI   IFBNT_LOGREC_CURRENT,IFBNT_IGNORE_RECORDS ?         $DL
         JNE   NTTAB40                 no, skip
         STRING64 5X,'LogRec recording is ignored',INTO=LINE       $DL
         BRASL R14,SPACE1              BLANK LINE                  $DL
         J     NTTAB40                                             $DL
.NTTAB30 ANOP                                                     +GSF
NTTAB30  DS    0H                                                  $DL
         CLC   =C'DSNDB2',NTTENAME     DB2 name/token?             $DL
         JNE   NTTAB40                 no, skip
         USING DB2NTOKN,R2             Set addressability          $DL
         STRING64 5X,'Subsystem name: ',DB2SSN,INTO=LINE           $DL
         BRASL R14,SPACE1              blank line                  $DL
         LA    R6,DB2MBENT             Load member names addr      $DL
         STRING64 5X,'Member(s)     : ',(0(R6),4),1X,(8(R6),4),1X, $DL X
               (16(R6),4),1X,(24(R6),4),1X,(32(R6),4),1X,          $DL X
               (40(R6),4),1X,(48(R6),4),1X,(56(R6),4),1X,          $DL X
               (64(R6),4),1X,(72(R6),4),1X,(80(R6),4),1X,          $DL X
               (88(R6),4),1X,(96(R6),4),1X,(104(R6),4),1X,         $DL X
               (112(R6),4),1X,(120(R6),4),                         $DL X
               INTO=LINE                                           $DL
         BRASL R14,SPACE1              blank line                  $RS
NTTAB40  DS    0H                                                  $RS
         DROP  R2
         ICM   R5,B'1111',NTTENEXT     next entry                  $RS
         JNZ   NTTAB20                 jump if not zero            $RS
*endloop                                                           $RS
         BRASL R14,BLANK1              blank line                  $RS
.NTTAB49 ANOP                                                      $RS
NTTAB49  END_PROC                                                  $RS
         TITLE 'SHOWMVS &REL - Device Allocation Defaults (ALLOCxx)'
*---------------------------------------------------------------------*
*                                                                     *
*Allocation Defaults                                                  *
*                                                                     *
*  SPACE PRIMARY(4) SECONDARY(24) DIRECTORY(0)                        *
*        MEASURE(AVEBLK) RLSE PRIM_ORG(CONTIG)                        *
*        BLKLNGTH(8192) ROUND                                         *
*                                                                     *
*  UNIT NAME(SYSALLDA) UNITAFF(SYSALLDA) REDIRECTED_TAPE(TAPE)        *
*                                                                     *
*  TIOT SIZE(64)                                                      *
*                                                                     *
*  SDSN_WAIT WAITALLOC(NO)                                            *
*                                                                     *
*  VOLUME_ENQ POLICY(WAIT)                                            *
*                                                                     *
*  VOLUME_MNT POLICY(WTOR)                                            *
*                                                                     *
*  SPEC_WAIT POLICY(WAITNOH)                                          *
*            MAXNWAIT(5) POLICYNW(CANCEL)                             *
*                                                                     *
*  ALLC_OFFLN POLICY(WAITNOH)                                         *
*             MAXNWAIT(5) POLICYNW(WTOR)                              *
*                                                                     *
*  CATLG_ERR FAILJOB(YES) ERRORMSG(YES)                         JM0900*
*                                                                     *
*---------------------------------------------------------------------*
ALLOC00  BEGIN_PROC KW=ALLOC                                     RS0302
         STRING64 '&TITLEPFX.Allocation Defaults',INTO=LINE
         BRASL R14,SPACE2              double space
         L     R1,CVTJESCT             JES COMM TABLE
         L     R1,JESCTEXT-JESCT(,R1)  JESCT Extension
         L     R4,JESAB445-JESPEXT(,R1) V(IEFAB445)
         USING IEFAB445,R4
         STRING64 '  SPACE ',                                          X
               'PRIMARY(',(DEFPQTY,FL3,L),') ',     primary qty        X
               'SECONDARY(',(DEFSQTY,FL3,L),') ',   secondary qty      X
               'DIRECTORY(',(DEFDQTY,FL3,L),') ',   dir blks           X
               INTO=LINE
         BRASL R14,SPACE1              single space
         MVC   NEXTLINE,BLANKS
         MVC   WORK256(L'BLANKS),BLANKS
         TM    DEFFLG1,DEFTRK          track alloc?
         JZ    *+10                    no, jump
         MVC   WORK256(3),=C'TRK'
         TM    DEFFLG1,DEFCYL          cylinder alloc?
         JZ    *+10                    no, jump
         MVC   WORK256(3),=C'CYL'
         TM    DEFFLG1,DEFBLKLN        average block length
         JZ    *+10                    no, jump
         MVC   WORK256(6),=C'AVEBLK'   average blksize
         MVC   WORK256+10(4),=C'RLSE'
         TM    DEFFLG1,DEFRLSE         release unused space?
         JO    *+10                    yes, jump
         MVC   WORK256+10(6),=C'NORLSE'
         TM    DEFFLG1,DEFCONTG        contig
         JZ    *+10                    no, jump
         MVC   WORK256+20(6),=C'CONTIG'
         TM    DEFFLG1,DEFMIXG         mixg
         JZ    *+10                    no, jump
         MVC   WORK256+20(4),=C'MIXG'
         TM    DEFFLG1,DEFALX          alx
         JZ    *+10                    no, jump
         MVC   WORK256+20(3),=C'ALX'
         STRING64 8X,                                                  X
               'MEASURE(',(WORK256,6,T),') ',      trk/cyl/aveblk      X
               (WORK256+10,6,T),                   rlse/norlse         X
               ' PRIM_ORG(',(WORK256+20,6,T),')',                      X
               INTO=LINE
         TM    DEFFLG1,DEFBLKLN        average block length
         JZ    ALLOC10                 no, jump
         BRASL R14,SPACE1              single space
         MVC   WORK256(L'BLANKS),BLANKS
         STRING64 'ROUND',INTO=WORK256                           RS1002
         TM    DEFFLG1,DEFROUND        round?
         JO    ALLOC01                   Yes, jump               RS0606
         STRING64 'NOROUND',INTO=WORK256                         RS1002
ALLOC01  DS    0H                                                RS0606
         STRING64 8X,                                                  X
               'BLKLNGTH(',(DEFDRLH,FL3,L),') ',   blklngth            X
               (WORK256,7,T),                      round/noround       X
               INTO=LINE
ALLOC10  DS    0H                                                RS0606
         BRASL R14,SPACE2              double space
         STRING64 '  UNIT NAME(',(DEFUNIT,,T),')',                     X
               INTO=LINE
         LA    R2,=C'TAPE'                                          +JM
         TM    DEFFLG2,DEFREDTP        redirected_tape(DISK)        +JM
         JZ    *+8                     no                           +JM
         LA    R2,=C'DISK'             yes                          +JM
         STRING64 (LINE,,T),' REDIRECTED_TAPE(',((R2),4,T),')',        X
               INTO=LINE                                            +JM
         BRASL R14,SPACE2              double space
         STRING64 '  TIOT SIZE(',(DEFTIOTS,FL1,L),')',INTO=LINE
         BRASL R14,SPACE2              double space
         AIF   (NOT D'CVTH7760).ALLOC12  z/OS R11 ? No           RS0909
         TM    HBB7760,L'HBB7760       running on z/OS R11       RS0909
         JZ    ALLOC12                  no, leave                RS0909
         STRING64 '       SIZE(',(DEFTSIZE,F,L),') ',                  X
               'MAXDDS(',(DEFMAXDD,F,L),')',INTO=LINE            RS0909
         BRASL R14,SPACE2              double space              RS0909
.ALLOC12 ANOP                                                    RS0909
ALLOC12  DS    0H                                                RS0909
         LA    R2,=C'No '
         TM    DEFFLG2,DEFSDSWT        sdsn_wait waitalloc((no)
         JZ    *+8                     no
         LA    R2,=C'Yes'              yes
         STRING64 '  SDSN_WAIT WAITALLOC(',((R2),3,T),')',INTO=LINE
         BRASL R14,SPACE2              double space
         TM    DEFVOLS,DEFVOLUM        volume_enq policy(wtor)
         JZ    *+8                     no
         LA    R2,=C'WTOR  '
         TM    DEFVOLS,DEFVOLUW        volume_enq policy(wait)
         JZ    *+8                     no
         LA    R2,=C'WAIT  '
         TM    DEFVOLS,DEFVOLUC        volume_enq policy(cancel)
         JZ    *+8                     no
         LA    R2,=C'CANCEL'
         STRING64 '  VOLUME_ENQ POLICY(',((R2),6,T),')',INTO=LINE
         BRASL R14,SPACE2              double space
         TM    DEFMNTS,DEFMOUNC        volume_mnt policy(cancel)
         JZ    *+8                     no
         LA    R2,=C'CANCEL'
         TM    DEFMNTS,DEFMOUNT        volume_mnt policy(wtor)
         JZ    *+8                     no
         LA    R2,=C'WTOR  '
         STRING64 '  VOLUME_MNT POLICY(',((R2),6,T),')',INTO=LINE
         BRASL R14,SPACE2              double space
         MVC   WORK256(L'BLANKS),BLANKS
         TM    DEFSPCS,DEFSPCWS        spec_wait policy(wtor)
         JZ    *+10                    no
         MVC   WORK256(4),=C'WTOR  '
         TM    DEFSPCS,DEFSPCWC        spec_wait policy(cancel)
         JZ    *+10                    no
         MVC   WORK256(6),=C'CANCEL'
         TM    DEFSPCS,DEFSPCWW        spec_wait policy(waitnoh)
         JZ    *+10                    no
         MVC   WORK256(7),=C'WAITNOH'
         TM    DEFSPCS,DEFSPCWH        spec_wait policy(waithold)
         JZ    *+10                    No
         MVC   WORK256(8),=C'WAITHOLD'
         STRING64 '  SPEC_WAIT POLICY(',                               X
               (WORK256,8,T),')',   WTOR/CANCEL/WAITNOH/WAITHOLD       X
               INTO=LINE
         TM    DEFSPCS,DEFSPCWW+DEFSPCWH was it waitnoh or waithold
         JZ    ALLOC20                 No
         BRASL R14,SPACE1              single space
         MVC   WORK256(L'BLANKS),BLANKS
         TM    DEFSNWAI,DEFSNWC        policynw(cancel)
         JZ    *+10                    no
         MVC   WORK256(6),=C'CANCEL'
         TM    DEFSNWAI,DEFSNW         policynw(wtor)
         JZ    *+10                    no
         MVC   WORK256(4),=C'WTOR  '   yes
         STRING64 12X,                                                 X
               'MAXNWAIT(',(DEFSPMAX,FL1,L),') ',                      X
               'POLICYNW(',(WORK256,6,T),')',                          X
               INTO=LINE
ALLOC20  DS    0H
         BRASL R14,SPACE2              double space
         MVC   WORK256(L'BLANKS),BLANKS
         TM    DEFOFFS,DEFOFFLN        allc_offln policy(wtor)
         JZ    *+10                    no
         MVC   WORK256(4),=C'WTOR  '
         TM    DEFOFFS,DEFOFFLC        allc_offln policy(cancel)
         JZ    *+10                    no
         MVC   WORK256(6),=C'CANCEL'
         TM    DEFOFFS,DEFOFFLW        allc_offln policy(waitnoh)
         JZ    *+10                    no
         MVC   WORK256(7),=C'WAITNOH'
         TM    DEFOFFS,DEFOFFLH        allc_offln policy(waithold)
         JZ    *+10                    no
         MVC   WORK256(8),=C'WAITHOLD'
         STRING64 '  ALLC_OFFLN POLICY(',                              X
               (WORK256,8,T),')',                                      X
               INTO=LINE
         TM    DEFOFFS,DEFOFFLH+DEFOFFLW was it WAITNOH or WAITHOLD
         JZ    ALLOC30
         BRASL R14,SPACE1              single space
         MVC   WORK256(L'BLANKS),BLANKS
         TM    DEFNWAIT,DEFNWC         policynw(cancel)
         JZ    *+10                    no
         MVC   WORK256(6),=C'CANCEL'
         TM    DEFNWAIT,DEFNW          policynw(wtor)
         JZ    *+10                    no
         MVC   WORK256(4),=C'WTOR  '
         STRING64 13X,                                                 X
               'MAXNWAIT(',(DEFAOMAX,FL1,L),') ',                      X
               'POLICYNW(',(WORK256,6,T),')',                          X
               INTO=LINE
ALLOC30  DS    0H
         BRASL R14,SPACE2              double space
         LA    R2,=C'Yes'
         TM    DEFFLG2,DEFTERMJ        catlg_err failjob(yes)    JM0900
         JO    *+8                     yes
         LA    R2,=C'No '              no
         LA    R3,=C'Yes'
         TM    DEFFLG2,DEFWTOCF        catlg_err errormsg(yes)
         JO    *+8                     yes
         LA    R3,=C'No '              no
         STRING64 '  CATLG_ERR FAILJOB(',((R2),3,T),             JM0900X
               ') ERRORMSG(',((R3),3,T),')',                           X
               INTO=LINE
         BRASL R14,SPACE2              single space
         AIF   (NOT D'CVTH7760).ALLOC99  z/OS R11 ? No           RS0909
         TM    HBB7760,L'HBB7760       running on z/OS R11       RS0909
         JZ    ALLOC99                  no, leave                RS0909
         LA    R2,=C'Legacy  '                                   RS0909
         TM    DEFBR14,DEFBR14N        IEFBR14_DELMIGDS(NORECALL)RS0909
         JO    *+8                     yes                       RS0909
         LA    R2,=C'Norecall'         no                        RS0909
         STRING64 '  SYSTEM IEFBR14_DELMIGDS(',((R2),8,T),')',   RS0909X
               INTO=LINE                                         RS0909
         BRASL R14,SPACE1              single space              RS0909
         LA    R2,=C'Equal   '                                   RS0909
         TM    DEFTPLB,DEFTPLBE        TAPELIB_PREF(EQUAL)       RS0909
         JO    *+8                     yes                       RS0909
         LA    R2,=C'ByDevice'         no                        RS0909
         STRING64 '         TAPELIB_PREF(',((R2),8,T),')',       RS0909X
               INTO=LINE                                         RS0909
         BRASL R14,SPACE1              single space              RS0909
         STRING64 '         REMIND_INTV(',(DEFRINTV,H,L2B),')',  RS0909X
               INTO=LINE                                         RS0909
         BRASL R14,SPACE1              single space              RS0909
         LA    R2,=C'Fail    '                                   RS0310
         TM    DEFVUFL,DEFVRUNC        VERIFY_UNCAT(FAIL)        RS0310
         JO    ALLOC40                 yes                       RS0310
         LA    R2,=C'Track   '                                   RS0310
         TM    DEFVUFL,DEFVUTRK        VERIFY_UNCAT(TRACK)       RS0310
         JO    ALLOC40                 yes                       RS0310
         LA    R2,=C'MsgTrack'         VERIFY_UNCAT(MSGTRACK)    RS0310
ALLOC40  DS    0H                                                RS0310
         STRING64 '         VERIFY_UNCAT(',((R2),8,T),')',       RS0310X
               INTO=LINE                                         RS0909
         BRASL R14,SPACE1              single space              RS0909
         BRASL R14,BLANK1                                        JH1303
         LA    R2,=C'IncLabel'                                   RS0414
         TM    DEFTDSF,DEFTDSFI                                  RS0414
         JO    ALLOC42                 yes                       RS0414
         LA    R2,=C'Unique  '                                   RS0414
ALLOC42  DS    0H                                                RS0414
         STRING64 '         TEMPDSFORMAT(',((R2),8,T),')',       RS0414X
               INTO=LINE                                         RS0414
         BRASL R14,SPACE1              single space              RS0414
         LA    R2,=C'Disable '                                   RS0414
         TM    DEFMDSEM,DEFDSEMD                                 RS0414
         JO    ALLOC44                 yes                       RS0414
         LA    R2,=C'Enable  '                                   RS0414
ALLOC44  DS    0H                                                RS0414
         STRING64 '         MEMDSENQMGMT(',((R2),8,T),')',       RS0414X
               INTO=LINE                                         RS0414
         BRASL R14,SPACE1              single space              RS0414
         LA    R2,=C'Explicit'                                   RS0414
         TM    DEFOPTCD,DEFOPEXP                                 RS0414
         JO    ALLOC46                 yes                       RS0414
         LA    R2,=C'Catalog '                                   RS0414
ALLOC46  DS    0H                                                RS0414
         STRING64 '         OPTCDB_SPLIT(',((R2),8,T),')',       RS0414X
               INTO=LINE                                         RS0414
         BRASL R14,SPACE1              single space              RS0414
         BRASL R14,SPACE2              single space              RS0909
.ALLOC99 ANOP                                                    RS0909
ALLOC99  END_PROC                                                RS0909
*
*        From that point on, drop R8 in END_PROC
*
         MACRO                                                    MACRO
&NAME    DROPTEMP ,                                               MACRO
         USING PSA,R0,R1,R2,R3,R4,R5,R6,R7,R8,R14,R15
         DROP  R1,R2,R3,R4,R5,R6,R7,R8,R14,R15 RELSE TEMP BASE REGS
         MEND                                                     MACRO
         TITLE 'SHOWMVS &REL - Selected Global Control Blocks'   RS1002
*---------------------------------------------------------------------*
*                                                                     *
*Addresses of selected global control-blocks                          *
*                                                                     *
*   CVT 00FD3E88  EXT1 00FD43D8  EXT2 00FD43E8  SCVT 00FD30B0         *
* JESCT 00FD46B0   EXT 00C29028  DACA 044F40C8  PCDP 044FF720         *
* ASMVT 00FDB330  PART 01C65070                                       *
*  SMCA 80FB3E68  FRDS 00FA3E10  SSTP 00FB1D78                        *
* AMCBS 00FC3700   CAX 00BC4388   DFA 00FD2F94   GDA 00FD2F94         *
*  RMCT 01304020   CCT 01304150  DMDT 01CE1830  WMST 01CE1468         *
*   LLT 00FB02C0   LPA 01E1E000   APF 00FB0ED8                        *
*  ALPA 00F971C8  PLPD 00C3B000  SVCT 011751A8                        *
*  RCVT 00FBF0A8  DSDT 06108728 ACCVT 00000000                        *
*                                                                     *
*---------------------------------------------------------------------*
ADDR100  BEGIN_PROC KW=GLOBALADDRESSES                           RS0302
         STRING64 '&TITLEPFX.Addresses of selected global ',           X
               'control-blocks',INTO=LINE
         BRASL R14,SPACE2              double space
         STRING64 '   CVT ',(CVTPTR,4,X),                              X
               '  EXT1 ',(CVTEXT1,,X), CVTXTNT1                        X
               '  EXT2 ',(CVTEXT2,,X), CVTXTNT2                        X
               '  SCVT ',(CVTABEND,,X),                                X
               '  ECVT ',(ECVT@,,X),                           HBB4410 X
               INTO=LINE
         BRASL R14,SPACE1              single space
         L     R7,CVTJESCT             JES control Table
         USING JESCT,R7
         STRING64 ' JESCT ',(CVTJESCT,,X),                             X
               '   EXT ',(JESCTEXT,,X),                                X
               '  DACA ',(JESDACA,,X),                                 X
               '  PCDP ',(JESPCDP,,X),                                 X
               '   PPT ',(JESPPT,,X),                                  X
               ' SSIVT ',(IGDSSIVT,,X),                                X
               INTO=LINE
         BRASL R14,SPACE1              single space
         L     R7,CVTASMVT             ASM VT
         USING ASMVT,R7
         STRING64 ' ASMVT ',(CVTASMVT,,X),                             X
               '  PART ',(ASMPART,,X),                                 X
               INTO=LINE
         BRASL R14,SPACE1              single space
         L     R5,CVTECVT              ECVT                      RS0410
         USING ECVT,R5                 IHAECVT                   RS0410
         STRING64 '  MSER ',(CVTMSER,,X),                              X
               '  SCCB-IPL ',(CVTSCPIN,,X),                            X
               INTO=LINE
         AIF   (NOT D'CVTZOS_V1R10).ADDR010                      RS0410
         TM    HBB7750,L'HBB7750       running on z/OS R10       RS0410
         JZ    ADDR010                  yes, leave               RS0410
         STRING64 '  MSER ',(CVTMSER,,X),                              X
               '  SCCB-IPL ',(CVTSCPIN,,X),                            X
               '  SCCB-Act ',(ECVTSCPIN,,X),                     RS0410X
               INTO=LINE
.ADDR010 ANOP                                                    RS0410
ADDR010  DS    0H                                                RS0410
         BRASL R14,SPACE1              single space
         L     R7,CVTSMCA              SMF SMCA
         USING SMCABASE,R7
         STRING64 '  SMCA ',(CVTSMCA,,X),                              X
               '  FRDS ',(SMCAFRDS,,X),                                X
               '  SSTP ',(SMCASSTP,,X),                                X
               INTO=LINE
         BRASL R14,SPACE1              single space
         L     R7,CVTCBSP              AMCBS
         USING AMCBS,R7
         STRING64 ' AMCBS ',(CVTCBSP,,X),                              X
               '   CAX ',(CBSCAXCN,,X),                                X
               '   DFA ',(CVTDFA,,X),                                  X
               '   GDA ',(CVTGDA,,X),                            RS0101X
               '  STGX ',(CVTSMEXT,,X),                                X
               '   SVT ',(CVTSVT,,X),                                  X
               INTO=LINE
         BRASL R14,SPACE1              single space
         L     R7,CVTOPCTP             RESOURCE MANAGER CONTROL TABLE
         USING RMCT,R7
         STRING64 '  RMCT ',(CVTOPCTP,,X),                             X
               '   CCT ',(RMCTCCT,,X),                                 X
               '  DMDT ',(RMCTDMDT,,X),                                X
               '  WMST ',(RMCTWMST,,X),                                X
               '  ICST ',(RMCTICST,,X),                                X
               INTO=LINE
         BRASL R14,SPACE1              single space
         L     R7,CVTSMEXT             STORAGE MAP EXTENSION
         USING CVTVSTGX,R7
         STRING64 '   LLT ',(CVTLLTA,,X),                              X
               '   LPA ',(CVTEPLPS,,X),                                X
               '   APF ',(CVTAUTHL,,X),                                X
               '  CSVT ',(CSVT@,,X),                                   X
               INTO=LINE
         BRASL R14,SPACE1              single space
         L     R7,CVTABEND
         USING SCVTSECT,R7
         STRING64 '  ALPA ',(ALPACDE1,,X), ALPAQ or DLPAQ              X
               '  PLPD ',(CVTLPDIA,,X),                                X
               '  SVCT ',(SCVTSVCT,,X),                                X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 '  VTAM ',(PSAATCVT-PSA,,X),                         X
               '  TCAS ',(CVTTCASP,,X),                                X
               '  TCAM ',(CVTAQAVT,,X),                                X
               INTO=LINE
         BRASL R14,SPACE1              single space
         L     R2,CVTTVT
         USING TSVT,R2
         L     R3,TSVTTPVT             TSO/PARMLIB vector table
         USING TPVT,R3
         STRING64 '  TSVT ',(CVTTVT,,X),                               X
               '  TPVT ',(TSVTTPVT,,X),                                X
               '  CTLT ',(TPVTCTLT,,X),                                X
               '  XPRM ',(TPVTXPRMD,,X),                               X
               INTO=LINE
         BRASL R14,SPACE1              single space
         L     R7,CVTRAC               RACF VECTOR TABLE
         USING RCVT,R7
         STRING64 '  RCVT ',(CVTRAC,,X),                               X
               '  DSDT ',(RCVTDSDT,,X),                                X
               ' ACCVT ',(ACF2CVT,,X),                                 X
               INTO=LINE
         BRASL R14,SPACE2              single space
ADDR199  END_PROC
         TITLE 'SHOWMVS &REL - Current JOB/Step Data'
*---------------------------------------------------------------------*
*                                                                     *
*Current Job Step:                                                    *
*                                                                     *
*  //GILBERT  JOB (ACCT#),CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),          *
*  // TIME=(0,20),REGION=6144K,PERFORM=1,USER=IBMUSER,GROUP=SYSG2     *
*                                                                     *
*    Sub-System(JES2) JOB-Id(JOB03158) SWA(Above) BLP(No) Journal(No) *
*    Address-space type: Batch or STC (non-TSO)                       *
*    Job Start Date: 93/04/09  Time: 15H02M08                         *
*                                                                     *
*    CPU time used: 000H00M06S54                                      *
*                                                                     *
*  //LOADGO EXEC PGM=LOADER,TIME=(0,3),                               *
*  // PARM='NOPRINT'                                                  *
*                                                                     *
*    PERFORM(1)   DPRTY(X'10')                                        *
*    Step Start Date: 93/04/09  Time: 15H02M20                        *
*                                                                     *
*      CPU time  EXCP  Connect  TGET  TPUT   Service  Frames  Paging  *
*     0S789.416    32      658     0     0     43272     259      19  *
*                                                                     *
*  Virtual Storage Usage:                                             *
*                            Limit   In Use  Available  High-watermark*
*                                                                     *
*    User SPLS (Below)       4160K    1180K      2980K        1616K   *
*    Auth SPLS (Below)       6060K     580K      5480K         804K   *
*    User SPLS (Above)      32768K    4388K     28380K        4392K   *
*    Auth SPLS (Above)    1998848K   11448K   1987400K       12720K   *
*                                                                     *
*  Virtual Storage Effects:                                           *
*                                                                     *
*    Getmain with little      some       bad effects:                 *
*    Central :     33980    363244    363244                          *
*    Expanded:      8966    138612    138612                          *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
JOBSTEP  BEGIN_PROC KW=JOBJCL                                    RS0302
         STRING64 '&TITLEPFX.Current Job Step:',INTO=LINE
         BRASL R14,SPACE2              Double Space
*
         L     R9,PSATOLD              own TCB
         L     R4,TCBJSCB              job step control block
         USING IEZJSCB,R4
         L     R5,JSCBJCT              Job Control Table
         USING JCT,R5
         SLR   R7,R7
         ICM   R7,B'0111',JCTACTAD     SVA OF ACT
         USING IEFAACTB-16,R7
*
         STRING64 '  //',(JCTJNAME,,T),' JOB ',INTO=LINE
         MVI   WKCELL3,C' '            no comma
         MVI   WKCELL3+1,C'('          begin sub-list
         SLR   R3,R3
         ICM   R3,B'0001',ACTJNFLD     # OF ACCT FIELDS
         JZ    JOBS120                 no account information
         LA    R1,ACTJNFLD+1           first sub-parm
         SLR   R2,R2
*loop
JOBS114  ICM   R2,B'0001',0(R1)        size of sub-parm
         STRING64 (1(R1),(R2)),INTO=WORK256
         BRASL R14,JOBS155             append new text to current line
         LA    R1,1(R2,R1)             skip current sub-field
         JCT   R3,JOBS114              next sub-field
*endloop
         LA    R15,LINE(R15)           last pos in line
         MVI   0(R15),C')'             close sub-list
         J     JOBS121
*
JOBS120  MVI   WKCELL3+1,C','          ACCT field missing
*
JOBS121  CLC   ACTPRGNM,BLANKS         do we have a PROGRAMMER'S NAME ?
         JE    JOBS122                 no, jump
         STRING64 (ACTPRGNM,,T),INTO=WORK256
         BRASL R14,JOBS155             append new text to current line
*
JOBS122  CLI   JCTJCSMF,X'E0'          TSO user?
         JE    JOBS125                 yes, jump
         CLI   PRISUBTY+3,C'3'         JES3?                      DGA
         JE    JOBS125                 yes, jump
         STRING64 'CLASS=',JCTJCSMF,INTO=WORK256
         BRASL R14,JOBS155             append new text to current line
*
JOBS125  STRING64 'MSGCLASS=',JCTJMGPO,INTO=WORK256
         BRASL R14,JOBS155             append new text to current line
*
JOBS130  STRING64 'MSGLEVEL=(1,1)',INTO=WORK256
         TM    JCTJMGLV,INCMMGL1       MSGLEVEL=1 ?
         JO    JOBS133                 yes, jump
         MVI   WORK256+10,C'2'         MSGLEVEL=(2,1)
         TM    JCTJMGLV,INCMMGL2       MSGLEVEL=2 ?
         JO    JOBS133                 yes, jump
         MVI   WORK256+10,C'0'         MSGLEVEL=(0,1)
JOBS133  TM    JCTJMGLV,INCMALL        MSGLEVEL=(,1) ?
         JO    JOBS134                 yes, jump
         MVI   WORK256+12,C'0'         MSGLEVEL=(,0)
JOBS134  BRASL R14,JOBS155             append new text to current line
*
JOBS136  SLR   R6,R6
         ICM   R6,B'0111',JCTJCTX      SVA OF JCTX
         USING JCTX,R6
         L     R1,JCTXJTL              JOB TIME limit (HBB4410)
JOBS136T LTR   R1,R1                   TIME=0 (TSO) ?
         JZ    JOBS137                 yes, exit                 RS1002
         SLR   R0,R0
         D     R0,=F'100'              get time in seconds
         SLR   R0,R0
         D     R0,=F'60'               get time in minutes
         STRING64 'TIME=(',((R1),,L),',',((R0),,L),')',INTO=WORK256
         BRASL R14,JOBS155             append new text to current line
*
JOBS137  DS    0H                                                RS1002
         TM    ARCHLVL2,L'ARCHLVL2     running ALS-2 ?           RS1002
         JZ    JOBS140                  No, leave                RS1002
         STRING64 'MEMLIMIT=',(JCTXMLSZ,FD,L),'M',INTO=WORK256   RS1002
         BRASL R14,JOBS155             append new text to current line
*                                                                RS1002
JOBS140  L     R6,JSCSCT               Current step's SCT
         USING SCT,R6
         LH    R2,JCTEQREG             region parm from job card
         CHI   R2,16383                region > 16M ?
         JE    JOBS146                 yes, jump
         CLM   R2,B'0111',SCTRGSZ      same as REGION on EXEC card ?
         JNE   JOBS147                 no, exit
JOBS146  ICM   R2,B'0111',SCTRGSZ      yes, use value from EXEC card
         STRING64 'REGION=',((R2),,L),'K',INTO=WORK256
         BRASL R14,JOBS155             append new text to current line
         BSM   R5,0                    make R5 negative
*
JOBS147  TM    JCTSTAT2,JCTPERFM       PERFORM specified on EXEC?
         JZ    JOBS149                 no, jump
         STRING64 'PERFORM=',(SCTPRFMF,H,L),INTO=WORK256
         BRASL R14,JOBS155             append new text to current line
         BSM   R6,0                    make R6 negative
*
JOBS149  L     R2,PSAAOLD-PSA(,0)      MY ASCB
         USING ASCB,R2
         L     R3,ASCBASXB             MY ASXB
         USING ASXB,R3
         STRING64 'USER=',(ASXBUSER,,T),INTO=WORK256
         BRASL R14,JOBS155             append new text to current line
         ICM   R3,B'1111',ASXBSENV     MY ACEE
         JNP   JOBS149Z                no RACF, exit
         USING ACEE,R3
         STRING64 'GROUP=',(ACEEGRPN,,T),INTO=WORK256
         BRASL R14,JOBS155             append new text to current line
JOBS149Z BRASL R14,SPACE1          <== Single Space
*
*        //*MAIN CLASS=ABCDEF
*
         CLI   PRISUBTY+3,C'3'         JES3?                      DGA
         JNE   JOBS$J3X                No, continue
         L     R1,TCBTCT               -> TCT                     DGA
         L     R3,TCTLCTAD-SMFTCT(,R1) -> LCT                     DGA
         USING LCT,R3                                             DGA
         STRING64 '  //*MAIN CLASS=',LCTCLASS,INTO=LINE           DGA
         BRASL R14,SPACE1          <== Single space               DGA
JOBS$J3X EQU   *                                                  DGA
         BRASL R14,BLANK1          <== Double space after jobcard DGA
         J     JOBS162
*
*        append WORK256 to LINE
*
JOBS155  ST    R14,WKCELL3+4           save return address
         LTR   R0,R15                  save length
         JZ    JOBS155C                zero length, jump
         LA    R14,WORK256             FIRST POS
JOBS155L CLI   0(R14),C' '             imbedded space?
         JE    JOBS155Q                YES, EXIT
**MSGL   CLI   0(R14),C','             imbedded comma?
**MSGL   JE    JOBS155Q                YES, EXIT
         LA    R14,1(,R14)             BUMP POINTER
         JCT   R15,JOBS155L            SCAN AREA
         J     JOBS155C                YES, EXIT
JOBS155Q MVC   NEXTLINE,WORK256        move to work area
         STRING64 '''',(NEXTLINE,(R0)),'''',INTO=WORK256
         LR    R0,R15                  save length
JOBS155C STRING64 (LINE,,T),(WKCELL3,2,T),(WORK256,(R0)),',',          X
               INTO=NEXTLINE
         CL    R15,ZSCREENW            overflow?
         JH    JOBS155O                yes, jump
         STRING64 (LINE,,T),(WKCELL3,2,T),(WORK256,(R0)),INTO=LINE
         J     JOBS155X
JOBS155O STRING64 (LINE,,T),',',INTO=LINE
         BRASL R14,SPACE1          <== Single space
         STRING64 '  // ',(WORK256,(R0)),INTO=LINE
JOBS155X MVI   WKCELL3,C','            next parm needs a comma
         MVI   WKCELL3+1,C' '          next parm needs no space
         L     R14,WKCELL3+4           return address
         BR    R14
*
JOBS162  MVC   WKCELL1(5),=C'Below'    default placement for SWA
         TM    JCTSTAT2,JCTSWAUP       SWA above?
         JZ    JOBS163                 no, jump
         MVC   WKCELL1(5),=C'Above'    yes, remember it
JOBS163  MVC   WKCELL2(3),=C'No '      default
         TM    JCTSTAT2,JCTBLP         BLP authorized?
         JZ    JOBS164                 no, jump
         MVC   WKCELL2(3),=C'Yes'      yes, remember it
JOBS164  MVC   WKCELL3(3),=C'No '      default
         TM    JSCBJJSB,JSCBJNLF       Job Journaling active?
         JO    JOBS168                 no, jump
         MVC   WKCELL3(3),=C'Yes'      yes, remember it
JOBS168  L     R3,JSCBSSIB             point to the SSIB
         USING SSIB,R3
         STRING64 '    Sub-System(',SSIBSSNM,')',                      X
               '  JOB-Id(',SSIBJBID,')',                               X
               '  SWA(',(WKCELL1,5),')',     SWA(below/above)          X
               '  BLP(',(WKCELL2,3,T),')',     BLP(yes/no)             X
               '  Journal(',(WKCELL3,3,T),')', Job Journal (yes/no)    X
               '  ASID(X''',(ASCBASID,,X),''')',                       X
               INTO=LINE
         BRASL R14,SPACE1          <== Single space
*
*        Address-space type: Batch/TSO-batch/TSO-on-line
*
         TM    TSO_ON_LINE,L'TSO_ON_LINE
         JO    JOBS169T                yes, jump
         TM    TSO_BATCH,L'TSO_BATCH
         JO    JOBS169B                yes, jump
JOBS169N STRING64 '    Address-space type: ','Batch or STC (non-TSO)', X
               INTO=LINE
         J     JOBS169
JOBS169T STRING64 '    Address-space type: ','TSO (on-line)',          X
               INTO=LINE
         J     JOBS169
JOBS169B STRING64 '    Address-space type: ','TSO (Batch)',            X
               INTO=LINE
JOBS169  BRASL R14,SPACE1          <== Single space
*
JOBS170  SLR   R1,R1
         ICM   R1,B'0111',JCTJMRJT     job start time (binary)
         BRASL R14,BINTIME             convert time to HH MM SS
         SLR   R14,R14
         ICM   R14,B'0111',JCTJCTX     SVA OF JCTX
         ZAP   WKCELL1,JCTXJMRD-JCTX(,R14) 0cyydddF (HBB6603 and up)
         ZAP   WKCELL2,JCTXSSD-JCTX(,R14) 0cyydddF (HBB6603 and up)
         STRING64 '    Job Start Date: ',(WKCELL1,P,YYYY-MM-DD),       X
               '  Time: ',((R3),,R2Z),'.',((R2),,R2Z),'.',((R1),,R2Z), X
               INTO=LINE
         BRASL R14,SPACE2          <== Double space
*
*        CPU time used (JOB)
*
JOBS180  TM    TSO_ON_LINE,L'TSO_ON_LINE on-line TSO user?
         JO    JOBS200                 YES, EXIT
         L     R1,ACTJTIME             Accumulated TCB time
         A     R1,JCTSRBT              Accumulated SRB time
         JZ    JOBS200                 zero, quit
         BRASL R14,BINTIME             convert time to HH MM SS
         STRING64 '    CPU time used: ',((R3),,R3Z),'H',((R2),,R2Z),   X
               'M',((R1),,R2Z),'S',((R0),,R2Z),                        X
               INTO=LINE
**           1X,(ACTJTIME,,X),1X,(JCTSRBT,,X),                       X
         BRASL R14,SPACE2          <== Double Space
*
*        //stepname EXEC PGM=program,REGION=1234K,TIME=(30,0)
*
JOBS200  SLR   R7,R7                   SCTX address
         ICM   R7,B'0111',SCTXBTTR     address of SCTX (SCT extension)
         USING SCTX,R7
         SLR   R0,R0
         ICM   R1,B'1111',SCTXSTL      step time limit (HBB4410)
         D     R0,=F'100'              get it in seconds
         SLR   R0,R0
         D     R0,=F'60'               get it in minutes
         STRING64 '  //',(SCTSNAME,,T),' EXEC PGM=',(SCTPGMNM,,T),     X
               ',TIME=(',((R1),,L),',',((R0),,L),')',                  X
               INTO=LINE
*
         LTR   R5,R5                   REGION specified on JOB card?
         JM    JOBS230                 yes, jump
         STRING64 (LINE,,T),',REGION=',(SCTRGSZ,FL3,L),'K',INTO=LINE
JOBS230  LH    R2,SCTNIUSL             max number of DD stmts
         SH    R2,SCTLALOC             minus # of godd DDs
         JZ    JOBS240                 zero, jump
         STRING64 (LINE,,T),',DYNAMNBR=',((R2),,L),INTO=LINE
JOBS240  EQU   *
         LTR   R6,R6                   PERFORM specified on JOB?
         JO    JOBS250                 yes, jump (JOB overrides EXEC)
         TM    SCTSDP,SCTEPRFM         PERFORM specified on EXEC?
         JZ    JOBS250                 no, jump
         STRING64 (LINE,,T),',PERFORM=',(SCTPRFMF,H,L),INTO=LINE
JOBS250  EQU   *
         SLR   R2,R2
         ICM   R2,B'0011',SCTSEXEC     PARM length
         JZ    JOBS270                 no PARM, jump
         STRING64 (LINE,,T),',',INTO=LINE
         BRASL R14,SPACE1          <== next line
         STRING64 '  // PARM=''',(SCTXPARM,(R2)),'''',                 X
               INTO=LINE
JOBS270  BRASL R14,SPACE2          <== Double Space
*
JOBS300  L     R6,PSAAOLD-PSA(,0)      ASCB
         USING ASCB,R6
         L     R7,ASCBOUCB             MY OUCB
         USING OUCB,R7
         STRING64 '    PERFORM(',(OUCBSPG,H,L),')',                    X
               '   DPRTY(X''',(ASCBDP,,X),''')',  dispatching priority X
               INTO=LINE
         BRASL R14,SPACE1          <== Single space
*
JOBS410  SLR   R1,R1
         ICM   R1,B'0111',JCTJMRSS     Step start time (binary)
         BRASL R14,BINTIME             convert time to HH MM SS
         STRING64 '    Step Start Date: ',(WKCELL2,P,YYYY-MM-DD),      X
               '  Time: ',((R3),,R2Z),'.',((R2),,R2Z),'.',((R1),,R2Z), X
               INTO=LINE
         BRASL R14,SPACE1          <== Single space
*
*        CPU TIME (STEP)
*
JOBS420  EQU   *
         BRASL R14,BLANK1              Blank Line
&STR     SETC  'CPU time     EXCP   Connect   TGET   TPUT    Service'
&STR     SETC  '&STR   Frames    Paging   EXCP>2GB'              RS0506
         STRING64 11X,'&STR',INTO=LINE
         BRASL R14,SPACE1          <== Single space
         STRING64 '.CPUTIME',INTO=LINE updated by RDRTNE
JOBS429X BRASL R14,SPACE2          <== Double Space
*
*        Storage Allocation Table
*
JOBS600  STRING64 '  Virtual Storage Usage:',INTO=LINE
         BRASL R14,SPACE2          <== Double Space
         STRING64 30X,'Limit      In Use    Available    ',            X
               'High-watermark',INTO=LINE
         BRASL R14,SPACE2          <== Double Space
         STRING64 '.SPL00',INTO=LINE   Place-holder for RDRTNE
         BRASL R14,SPACE1          <== Single Space
         STRING64 '.SPL04',INTO=LINE   Place-holder for RDRTNE
         BRASL R14,SPACE1          <== Single Space
         STRING64 '.SPL08',INTO=LINE   Place-holder for RDRTNE
         BRASL R14,SPACE1          <== Single Space
         STRING64 '.SPL12',INTO=LINE   Place-holder for RDRTNE
         BRASL R14,SPACE2              Double Space
*                                                                RS1002
*        SYSEVENT STGTEST                                        RS1002
*        Provide information how additional virtual storage will RS1002
*        effect the system performance                           RS1002
*                                                                RS1002
JOBS700  STRING64 '  Virtual Storage Effects:',                  RS1002X
               INTO=LINE                                         RS1002
         BRASL R14,SPACE2          <== Double Space              RS1002
         STRING64 4X,'Getmain with ','little  ','    some',            X
               '       bad',' effects:',INTO=LINE
         BRASL R14,SPACE1              Single Space              RS1002
         STRING64 '.STG1',INTO=LINE    Place-holder for RDRTNE   RS1002
         BRASL R14,SPACE1              Single Space              RS1002
         TM    ARCHLVL2,L'ARCHLVL2     running ALS-2 ?           RS1002
         JNZ   JOBSTP90                 Yes, leave               RS1002
         STRING64 '.STG2',INTO=LINE    Place-holder for RDRTNE   RS1002
         BRASL R14,SPACE1              Single Space              RS1002
JOBSTP90 BRASL R14,BLANK1
JOBSTP99 END_PROC
         TITLE 'SHOWMVS &REL - Current RACF Profile'
*---------------------------------------------------------------------*
*                                                                     *
*RACF Profile:                                                        *
*                                                                     *
*  User: IBMUSER   Group: SYSTEM    Terminal: L3270X21    Flags: 01 01*
*  UACC: None      Attributes: (none)                                 *
*  Name: John Doe                                                     *
*                                                                     *
*---------------------------------------------------------------------*
RACF00   BEGIN_PROC KW=JOBDATA                                   RS0302
         L     R3,PSAAOLD-PSA(,0)      POINT TO MY ASCB.
         L     R3,ASCBASXB-ASCB(,R3)   POINT TO MY ASXB.
         L     R3,ASXBSENV-ASXB(,R3)   POINT TO MY ACEE.
         USING ACEE,R3
         TM    ACEEFLG1,ACEERACF       this user defined to RACF?
         JZ    RACF99                  no, quit
         STRING64 '&TITLEPFX.RACF Profile:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  User: ',ACEEUSRI, RACF user                       X
               '  Group: ',ACEEGRPN,   Connect Group name              X
               '  Terminal: ',ACEETRID, terminal ID                    X
               '    Flags: ',(ACEEFLG1,,X),1X,(ACEEFLG2,,X),1X,        X
               (ACEEFLG3,,X),1X,(ACEEFLG4,,X),1X,                      X
               INTO=LINE
         BRASL R14,SPACE1          <== next line
         BRASL R1,RACF36               BRANCH AROUND TABLE
         DC    AL1(ACEEALTR),C'Alter  '
         DC    AL1(ACEECNTL),C'Control'
         DC    AL1(ACEEUPDT),C'Update '
         DC    AL1(ACEEREAD),C'Read   '
         DC    AL1(ACEENONE),C'None   '
         DC    AL1(00),0H'0'
RACF36   BRASL R14,SCAN_TM             SCAN TABLE
         DC    Y(1+7)                  SIZE OF A TABLE ENTRY
         TM    ACEEFLG2,*-*            Test RACF flag
         JO    RACF38                  NOT FOUND, JUMP AROUND "MVC"
         LA    R1,BLANKS               UACC is undetermined
RACF38   STRING64 '  UACC: ',(1(R1),7),'   Attributes:',               X
               INTO=LINE
         LA    R4,LINE+1(R15)          authority level
        #STATUS ACEEFLG1,ACEESPEC,'Special'
        #STATUS ACEEFLG1,ACEEADSP,'ADSP'
        #STATUS ACEEFLG1,ACEEOPER,'Operations'
        #STATUS ACEEFLG1,ACEEAUDT,'Auditor'
        #STATUS ACEEFLG1,ACEELOGU,'Logged'
        #STATUS ACEEFLG1,ACEEPRIV,'Privileged'
      TM ACEEFLG1,ACEESPEC+ACEEADSP+ACEEOPER+ACEEAUDT+ACEELOGU+ACEEPRIV
         JNZ   RACF47                  at least one attribute, jump
         MVC   0(6,R4),=C'(none)'      show it
*             '  Application: ',ACEEAPLN,                             X
*             '  Surrogate UID: ',ACEESUID,                           X
RACF47   BRASL R14,SPACE1              Single Space
*
*        User name
*
         ICM   R1,B'1111',ACEEUNAM     addr of user name
         JZ    RACF50                  no name, exit
         SLR   R0,R0
         IC    R0,0(,R1)               pick up length+1
         BCTR  R0,0                    get name length
         STRING64 '  Name: ',(1(R1),(R0)),INTO=LINE
         BRASL R14,SPACE1              Single Space
*
*        Other Groups user can connect to
*
RACF50   ICM   R3,B'1111',ACEEFCGP     CGRP address
         JZ    RACF90                  zero, exit
         USING CGRP,R3
         SLR   R4,R4
         LH    R5,CGRPCORE+2           get length of CGRP table
         SH    R5,=AL2(CGRPENT-CGRP)   subtract prefix length
         D     R4,=A(L'CGRPENT)        calculate number of entries
         CHI   R5,1                    more than 1 entry?
         JNH   RACF90                  no, exit
         ST    R8,WKCELL1              save CVT address          RS1002
         LR    R8,R5                                             RS1002
         STRING64 '  Groups Available:',INTO=LINE
         BRASL R14,SPACE1              Single Space
         LA    R4,CGRPENT              first entry
         USING CGRPENTD,R4
         MVC   LINE(2),BLANKS          blank out next line       RS1002
         LA    R5,LINE+2               first entry               RS1002
         LA    R6,10                   length of each display entry
         LA    R7,LINE+82              end of line               RS1002
*loop
RACF51   DS    0H                                                RS1002
         STRING64 CGRPNAME,' ',INTO=((R5),(R6))                  RS1002
         BRXLE R5,R6,RACF52            this line full?           RS1002
         TR    LINE,TRTPRINT           get rid of garbage        RS1002
         BRASL R14,SPACE1              Single space              RS1002
         MVC   LINE(4),BLANKS          blank out next line       RS1002
         LA    R5,LINE+2               first entry               RS1002
         LA    R7,LINE+82              end of line               RS1002
RACF52   DS    0H                                                RS1002
         LA    R4,CGRPENTD+L'CGRPENT   next entry
         JCT   R8,RACF51                                         RS1002
         L     R8,WKCELL1              restore CVT address       RS1002
*endloop
         TR    LINE,TRTPRINT           get rid of garbage        RS0803
         BRASL R14,SPACE1              Single Space
*
RACF90   BRASL R14,BLANK1              Blank line
RACF99   END_PROC
*
         TITLE 'SHOWMVS &REL - Current TSO Profile'
*---------------------------------------------------------------------*
*                                                                     *
*TSO Profile:                                                         *
*                                                                     *
*  Attributes: OPER ACCT SUBMIT                                       *
*  Unit: SYSALLDA   Dest: Local                                       *
*  Submit Hold Class: X  Submit Class: A  Msgclass: X  Sysout Class: Z*
*  Prompt Intercom Pause Msgid Nomode WTPMSG Norecover Prefix(IBMUSER)*
*  Command: EXEC (PDF41)                                              *
*                                                                     *
*---------------------------------------------------------------------*
PROF00   BEGIN_PROC KW=TSOPROFILE                                RS0302
         L     R5,TCBJSCB              point at JSCB
         USING IEZJSCB,R5
         ICM   R6,B'1111',JSCBPSCB     point at PSCB
         JZ    PROF99                  not a TSU, exit
         USING PSCB,R6
         STRING64 '&TITLEPFX.TSO Profile:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  Attributes:',INTO=LINE
         LA    R4,LINE+1(R15)          start of attribute list
        #STATUS PSCBATR1,PSCBCTRL,'Oper'
        #STATUS PSCBATR1,PSCBACCT,'Acct'
        #STATUS PSCBATR1,PSCBJCL,'Submit'
        #STATUS PSCBATR1,PSCBVMNT,'Mount'
        #STATUS PSCBATR1,PSCBCNAU,'Console'
         TM    PSCBATR1,PSCBCTRL+PSCBACCT+PSCBJCL+PSCBVMNT+PSCBCNAU
         JNZ   PROF12                  at least one attribute, jump
         MVC   0(6,R4),=C'(none)'      show it
*
PROF12   BRASL R14,SPACE1          <== next line
         MVC   WKCELL1,=C'Local   '    default destination
         CLI   PSCBDEST,0              any special dest?
         JE    PROF15                  no, jump
         MVC   WKCELL1,PSCBDEST        yes, use it
PROF15   STRING64 '  Unit: ',PSCBGPNM,'   Dest: ',WKCELL1,             X
               INTO=LINE
         BRASL R14,SPACE1          <== next line
         STRING64 '  Submit Hold Class: ',PSCBSUBH,                    X
               '   Submit Class: ',PSCBSUBC,                           X
               '   Msgclass: ',PSCBSUBM,                               X
               '   Sysout Class: ',PSCBSOUT,                           X
               INTO=LINE
         TR    LINE,TRTPRINT           get rid of X'00' fields
         BRASL R14,SPACE1          <== next line
*
*        Display Profile options and DSN prefix from UPT
*
PROF31   L     R7,PSCBUPT              User profile table
         USING UPT,R7
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JNO   PROF31B                 no, jump
         LA    R14,UPT_LENGTH          length
         IC    R15,OLDPKF              source key
         MVCK  WORK256(R14),UPT,R15    Move line to buffer
         LA    R7,WORK256              copy of the UPT
PROF31B  EQU   *
         MVC   LINE,BLANKS             blank line
         LA    R4,LINE+2               start of options
         BRASL R1,PROF32
         DC    AL1(UPTNPRM),C'Noprompt  '
         DC    AL1(UPTNCOM),C'Nointercom'
         DC    AL1(UPTPAUS),C'Pause     '
         DC     AL1(UPTMID),C'Msgid     '
         DC    AL1(UPTMODE),C'Mode      '
         DC     AL1(UPTWTP),C'WTPMSG    '
         DC    AL1(UPTRCVR),C'Recover   '
         DC    X'00',0H'0'             end of table
*PROF31TM TM    UPTSWS,*-*              check UPT switch
*loop
PROF32   IC    R15,0(,R1)              pick up TM mask
*        EX    R15,PROF31TM            test UPT switch
         EX    R4,=S(X'100'(R9),12(R7)) Test bit using TM 12(R7),*-*
         JO    PROF34                  jump if one
         CLI   1(R1),C'N'              NO-something?
         JE    PROF33                  yes, jump
         STRING64 'No',(1(R1),10),INTO=((R4),10)
         TM    3(R4),X'40'             2nd letter (T in WTPMSG)
         JO    PROF36                  uppercase, leave it
         NI    2(R4),255-X'40'         lowercase
         J     PROF36
PROF33   STRING64 (1+2(R1),10-2,T),INTO=((R4),10)
         OI    0(R4),X'40'             uppercase
         J     PROF36
PROF34   STRING64 (1(R1),10,T),INTO=((R4),10)
*
PROF36   LA    R4,1(R15,R4)            bump pointer
         LA    R1,1+10(,R1)
         CLI   0(R1),0                 end of table?
         JNE   PROF32                  not yet, loop
*endloop
         SLR   R1,R1
         IC    R1,UPTPREFL             Prefix length
         STRING64 'Prefix(',(UPTPREFX,(R1)),')',INTO=((R4),NEXTLINE)
         BRASL R14,SPACE1          <== next line
*
*        TSO command from TSO/E LOGON menu
*
         TM    TSO_ON_LINE,L'TSO_ON_LINE on-line TSO user?
         JNO   PROF98                  NO, EXIT
         L     R1,PSAAOLD-PSA(,0)      MY ASCB
         L     R1,ASCBASXB-ASCB(,R1)   MY ASXB
         ICM   R1,B'1111',ASXBLWA-ASXB(R1) LOGON WORK AREA
         JZ    PROF42                  not TSO, jump
         USING LWA,R1
         STRING64 '  Command: ',LWALGCMD,INTO=LINE
         BRASL R14,SPACE1          <== next line
PROF42   EQU   *
*
         TM    AUTHORIZED,L'AUTHORIZED Authorized?
         JNO   PROF98                  no, exit
         ICM   R4,B'1111',TSB@         addr of the TSB
         JZ    PROF98                  zero, exit
         USING TSB,R4
         BRASL R14,EXECKEY0            execute next instr in key=0
         ICM   R5,B'1111',TSBEXTNT     addr of the TSBX
         JZ    PROF98                  zero, exit
         USING TSBX,R5
         LA    R14,X'60'               VTAM key
         LA    R15,L'WKCELL1           length
         MVCK  WKCELL1(R15),TSBXLMOD,R14
         LA    R15,L'TSBXBIND          length
         MVCK  WORK256(R15),TSBXBIND,R14
         LA    R15,L'TSBXIPAD          length                    RS0504
         MVCK  WKCELL2(R15),TSBXIPAD,R14 Ip-Adresse              RS0504
         LA    R15,L'TSBXPORT          length                    RS0504
         MVCK  WKCELL2+4(R15),TSBXPORT,R14 Ip-Port               RS0504
         LA    R15,L'TSBXTRMR          length                    RS0504
         MVCK  WKCELL3(R15),TSBXTRMR,R14 Terminal                RS0504
         LA    R15,L'TSBXNET           length                    RS0504
         MVCK  WKCELL4(R15),TSBXNET,R14 Netid                    RS0504
PROF50   EQU   *                                                 RS0504
.PROF50  ANOP                                                    RS0504
         STRING64 '  Logmode: ',WKCELL1,INTO=LINE
         BRASL R14,SPACE1          <== next line
         STRING64 '  BIND_Data: ',                                     X
               (WORK256+00,4,X),1X,                                    X
               (WORK256+04,4,X),1X,                                    X
               (WORK256+08,4,X),1X,                                    X
               (WORK256+12,4,X),1X,                                    X
               (WORK256+16,4,X),1X,                                    X
               (WORK256+20,4,X),1X,                                    X
               (WORK256+24,4,X),1X,                                    X
               (WORK256+28,4,X),1X,                                    X
               (WORK256+32,4,X),1X,                                    X
               INTO=LINE
         BRASL R14,SPACE1          <== next line
         STRING64 '  Term   : ',(WKCELL3,8),INTO=LINE            RS0504
         BRASL R14,SPACE1          <== next line                 RS0504
         STRING64 '  Net-ID : ',(WKCELL4,8),INTO=LINE            RS0504
         BRASL R14,SPACE1          <== next line                 RS0504
         STRING64 '  Ip-Adr : ',(WKCELL2,FL1,L),'.',(WKCELL2+1,FL1,L), X
               '.',(WKCELL2+2,FL1,L),'.',(WKCELL2+3,FL1,L),':',        X
               (WKCELL2+4,H,R5Z),INTO=LINE                       RS0504
         BRASL R14,SPACE1          <== next line                 RS0504
.PROF98  ANOP                                                    RS0504
PROF98   EQU   *                                                 RS0504
         BRASL R14,BLANK1              Double space
PROF99   END_PROC
         TITLE 'SHOWMVS &REL - ISPF Environment'
*---------------------------------------------------------------------*
*                                                                     *
*ISPF Environment:                                                    *
*                                                                     *
* ISPTCM  Changed: 11/16/04 Number of user flags:   0                 *
* Entry   Flag Clear  Attributes based on Flag                        *
*           61    3   Pool Auth BLDL                                  *
* ACCOUNT   02    3   CMD                                             *
* ALLOC     02    3   CMD                                             *
* ALLOCATE  02    3   CMD                                             *
* ALTER     22    3   Auth CMD                                        *
*                                                                     *
*---------------------------------------------------------------------*
ISPF00   BEGIN_PROC KW=ISPF                                      RS0105
         STRING64 '&TITLEPFX.ISPF Environment:',INTO=LINE
         BRASL R14,SPACE2
*        Invoke SISPEXEC(ISPCCONF) with option DEBUG to understand
*        the layout of ISPCFIGU/ISPCFIG
*        Invoke TSO ISPVCALL to compare the output
         LOAD  EP=ISPCFIGU,ERRET=ISPF_10
         J     ISPF_11
ISPF_10  DS    0H
         LOAD  EP=ISPCFIG,ERRET=ISPF_50
ISPF_11  DS    0H
         LR    R3,R0
         USING ISPCFG_D,R3
         STRING64 '  Configuration Table',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Table Id            : ',CFG_TABLEID,            X
               '      Table Level Id    : ',CFG_LEVEL,                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Compile Date      : ',CFG_DAT,                X
               INTO=LINE
         CLI   CFG_KWSOURCE,X'40'      Source present ?
         JNH   ISPF_13                   No leave
         STRING64 '    Keyword Source      : ',CFG_KWSOURCE,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Compile Date      : ',CFG_DAT,6X,             X
               'Compile time      : ',CFG_COMPTIME,                    X
               INTO=LINE
ISPF_13  DS    0H
         BRASL R14,SPACE1
         STRING64 '    Exits               : ',INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Allocation pgm    : ',CFG_ALLOCPGM,           X
               '      Print pgm         : ',CFG_PRTPGM,                X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Compress pgm      : ',CFG_CMPPGM,             X
               '      Print Clist       : ',CFG_PRTCLIST,              X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Compress Clist    : ',CFG_CMPCLIST,           X
               '      Dslist pgm        : ',CFG_DSLSTPGM,              X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Memlist filter    : ',CFG_MLFPGM,             X
               '      Dataset name chg  : ',CFG_NMCHGPGM,              X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Installation acct : ',CFG_INSTACCT,           X
               '      Dslist line cmd   : ',CFG_DSLLCPGM,              X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 40X,'Builtin func pgm  : ',CFG_MEMCPEXT,             X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 40X,'Builtin func Clist: ',CFG_MEMCCEXT,             X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Edit Backup         : ',                        X
               12X,'Outlist             : ',                           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Block Size        : ',(CFG_EBLKSIZE,F,R9B),   X
               '     Block Size        : ',(CFG_OBLKSIZE,F,R9B),       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Primary blocks    : ',(CFG_EPRIMQTY,F,R9B),   X
               '     Primary tracks    : ',(CFG_OPRIMQTY,F,R9B),       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Secondary blocks  : ',(CFG_ESECQTY,F,R9B),    X
               '     Secondary tracks  : ',(CFG_OSECQTY,F,R9B),        X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 40X,'Record length     : ',(CFG_OLRECL,F,R9B),       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    SuperC              : ',                        X
               14X,'Pgm interface     : ',CFG_SUPCPGM,                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      OUTDD Block Size  : ',CFG_SUPCLBLK,9X,        X
               'Profile Blk Size  : ',CFG_SUPCPBLK,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      DELDD Block Size  : ',CFG_SUPCUBLK,9X,        X
               'Stmts Blk Size    : ',CFG_SUPCSBLK,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      List Primary      : ',CFG_SUPCLSPR,9X,        X
               'Update Primary    : ',CFG_SUPCUPPR,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      List Secondary    : ',CFG_SUPCLSSC,9X,        X
               'Update Secondary  : ',CFG_SUPCUPSC,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Unit name           : ',CFG_PDFUNIT,4X,         X
               'ICF printer support : ',CFG_ICFPRT,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Use unit for TMP ds : ',CFG_ZTMPUNIT,9X,        X
               'PCF being used      : ',CFG_PCFALLOC,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Use UADS only       : ',CFG_UNITAUTH,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Max. split screens  : ',(CFG_SCRMAX,F,R9B),3X,  X
               'Check exp. dates    : ',CFG_CHECKEXP,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Use Accounting exit : ',CFG_ACEXEDMA,9X,        X
               'SCLM Co-wareness    : ',CFG_SCLMCHK,                   X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    TSO option 6 panel  : ',CFG_TSOPANEL,9X,        X
               'Migrate Volume      : ',CFG_DELVOL,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Migrate Command     : ',CFG_DELCMD,4X,          X
               'Undo chain size(KB) : ',(CFG_UNDOSIZE,F,R9B),          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Color allowed       : ',CFG_ANYCOLOR,9X,        X
               '# of edit profiles  : ',(CFG_EDTPROFT,F,R9B),          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Color default       : ',(CFG_DFLTCOLR,FL1,R9B), X
               '   Text flow stop chars: ',CFG_TFLOW,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Allow Browse submit : ',CFG_BRSUBMIT,9X,        X
               'Allow asm rev-video : ',CFG_ASMVIDEO,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Allow View submit   : ',CFG_VWSUBMIT,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Year 2000 cutoff    : ',(CFG_YEAR2000,F,R9B),   X
               '   Site cmd location   : ',CFG_SCTSRCH,                X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    User command table1 : ',CFG_USERCMDS,8X,        X
               'Site command table1 : ',CFG_SITECMDS,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    User command table2 : ',CFG_USR2CMDS,8X,        X
               'Site command table2 : ',CFG_SIT2CMDS,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    User command table3 : ',CFG_USR3CMDS,8X,        X
               'Site command table3 : ',CFG_SIT3CMDS,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Enhanced mem list   : ',CFG_DSLMEML,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Local Print Params  : ',CFG_LOCALPR1,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Max IEBCOPY retcode : ',(CFG_COPYRC,F,R9B),3X,  X
               'Edit VB trunc warn  : ',CFG_TRUNCWRN,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    IEBCOPY copy opt    : ',(CFG_COPYOPT,F,R9B),3X, X
               'Fail on LMF LOCK    : ',CFG_ZLMFLOCK,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    IEBCOPY PDS use     : ',(CFG_IEBCOPT,F,R9B),3X, X
               'Warn on GDG rename  : ',CFG_RENAMGDG,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Show ENQ Displays   : ',CFG_ZSHOWENQ,9X,        X
               'Alloc target (opt33): ',CFG_UMCALLOC,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 38X,'Alloc target (edit) : ',CFG_ECRALLOC,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Edit defaults       : ',                        X
               12X,'Site initial macro  : ',CFG_PDFCEIMACRO,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Member statistics : ',CFG_EDITSTAT,9X,        X
               'Force stat setting  : ',CFG_EDITSTATF,                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Edit Recovery     : ',CFG_EDITREC,9X,         X
               'Force Edit Recovery : ',CFG_EDITRECF,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Recovery Warn msg : ',CFG_EDITRECW,6X,        X
               'Force rec warn msg  : ',CFG_EDITRECWF,                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      SETUNDO available : ',CFG_EDITSETU,9X,        X
               'Force setundo       : ',CFG_EDITSETUF,                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Enable PACK option: ',CFG_EDITPACK,9X,        X
               'Force pack option   : ',CFG_EDITPACKF,                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Initial macro     : ',CFG_EDITUSERMAC,4X,     X
               'Force initial macro : ',CFG_EDITUSERMACF,              X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Preserve VB reclen: ',CFG_PDFEVBRL,9X,        X
               'Force preserve VB rl: ',CFG_PDFFVBRL,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 38X,'Force rchange cmd   : ',CFG_RFNDCHG,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      CAPS              : ',CFG_EDITCAPS,9X,        X
               'Color program       : ',CFG_EDITCOLOR,                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      HEX display       : ',CFG_EDITHEX,10X,        X
               'Do logic coloring : ',CFG_EDITDOLOGIC,                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Nulls processing  : ',CFG_EDITNULL,11X,       X
               'If logic coloring : ',CFG_EDITIFLOGIC,                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Display seq numb  : ',CFG_EDITNUMS,11X,       X
               'Paren coloring    : ',CFG_EDITPAREN,                   X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Number cobol      : ',CFG_EDITNUMC,11X,       X
               'Find coloring     : ',CFG_EDITFIND,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Number standard   : ',CFG_EDITNUMS,11X,       X
               'Cursor coloring   : ',CFG_EDITCURSOR,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Auto renumber     : ',CFG_EDITAUTON,11X,      X
               'Language          : ',(CFG_EDITHILANG,F,R3B),          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      AUTOLIST          : ',CFG_EDITPRT,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Autosave          : ',CFG_EDITASAVE,9X,       X
               'PROFILE LOCK        : ',CFG_EDITLOCK,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Autosave prompt   : ',CFG_EDITASAVP,4X,       X
               'Show model notes    : ',CFG_EDITNOTE,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Max stg size (KB) : ',(CFG_EDITSTOR,F,R9B),   X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Edit Clipboards     : ',12X,                    X
               'Edit CUT/PASTE      : ',                               X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Maximum clipboards: ',(CFG_CLIPNUM,H,R3B),11X,X
               'Cut Default       : ',CFG_EDITCUT,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Maximum size/4Kb  : ',(CFG_CLIPSIZE,H,R3B),   X
               11X,'PASTE Default     : ',CFG_EDITPAST,                X
               INTO=LINE
         BRASL R14,SPACE2
         STRING64 '    Ver/Rel/Mod         : ',CFG_ZVERMOD,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Tab to point+shoot  : ',CFG_ZTPS,9X,            X
               'Reset tab to pt + sh: ',CFG_ZTPSF,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Tabable action bars : ',CFG_ZTA,9X,             X
               'Reset tabable actbar: ',CFG_ZTAF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Session Manager Mode: ',CFG_ZSM,9X,             X
               'Reset Sess Mgr Moder: ',CFG_ZSMF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Jump from ldr dotsde: ',CFG_ZJMP,9X,            X
               'Reset Jump ldr dotsr: ',CFG_ZJMPF,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Show split line     : ',CFG_ZASL,9X,            X
               'Reset show split    : ',CFG_ZASLF,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Long message popup  : ',CFG_ZLMP,9X,            X
               'Reset LMSG popup    : ',CFG_ZLMPF,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Edit PRINTDS cmd    : ',CFG_ZEPDSC,9X,          X
               'Reset edit PRINTDS  : ',CFG_ZEPDSCF,                   X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Restore test/trace  : ',CFG_ZTTR,9X,            X
               'Reset restore tst/tr: ',CFG_ZTTRF,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Panel CUA mode      : ',CFG_ZCUAH,9X,           X
               'Reset CUA mode      : ',CFG_ZCUAHF,                    X
               INTO=LINE
         BRASL R14,SPACE2
         STRING64 '    Action bar sel ch   : ',CFG_ABSC,9X,            X
               'Reset ABSC          : ',CFG_ABSCF,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    AB separator line   : ',CFG_ABSL,9X,            X
               'Reset ABSL          : ',CFG_ABSLF,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    AB unselected choice: ',CFG_ABUC,9X,            X
               'Reset ABUC          : ',CFG_ABUCF,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Action message text : ',CFG_AMT,9X,             X
               'Reset AMT           : ',CFG_AMTF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Caution text        : ',CFG_CT,9X,              X
               'Reset CT            : ',CFG_CTF,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Choice entry field  : ',CFG_CEF,9X,             X
               'Reset CEF           : ',CFG_CEFF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Column heading      : ',CFG_CH,9X,              X
               'Reset CH            : ',CFG_CHF,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Descriptive text    : ',CFG_DT,9X,              X
               'Reset DT            : ',CFG_DTF,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Emphasized text     : ',CFG_ET,9X,              X
               'Reset ET            : ',CFG_ETF,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Error emphasis      : ',CFG_EE,9X,              X
               'Reset EE            : ',CFG_EEF,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Field prompt        : ',CFG_FP,9X,              X
               'Reset FP            : ',CFG_FPF,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Function keys       : ',CFG_FK,9X,              X
               'Reset FK            : ',CFG_FKF,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Information msg.txt : ',CFG_IMT,9X,             X
               'Reset IMT           : ',CFG_IMTF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    List entry field    : ',CFG_LEF,9X,             X
               'Reset LEF           : ',CFG_LEFF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    List item descr     : ',CFG_LID,9X,             X
               'Reset LID           : ',CFG_LIDF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    List item           : ',CFG_LI,9X,              X
               'Reset LI            : ',CFG_LIF,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Normal entry field  : ',CFG_NEF,9X,             X
               'Reset NEF           : ',CFG_NEFF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Normal text         : ',CFG_NT,9X,              X
               'Reset NT            : ',CFG_NTF,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Panel information   : ',CFG_PIN,9X,             X
               'Reset PI            : ',CFG_PINF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Panel title         : ',CFG_PT,9X,              X
               'Reset PT            : ',CFG_PTF,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    PanelId             : ',CFG_PID,9X,             X
               'Reset PanelId       : ',CFG_PIDF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    PD avail choice     : ',CFG_PDAC,9X,            X
               'Reset PDAC          : ',CFG_PDACF,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    PD unavail choice   : ',CFG_PDUAC,9X,           X
               'Reset PDUC          : ',CFG_PDUACF,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Reference phrase    : ',CFG_RP,9X,              X
               'Reset RP            : ',CFG_RPF,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Scroll information  : ',CFG_SI,9X,              X
               'Reset SI            : ',CFG_SIF,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Sel avail choice    : ',CFG_SAC,9X,             X
               'Reset SAC           : ',CFG_SACF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Sel unavail choice  : ',CFG_SUC,9X,             X
               'Reset SUC           : ',CFG_SUCF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Var output info     : ',CFG_VOI,9X,             X
               'Reset VOI           : ',CFG_VOIF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Warning msg text    : ',CFG_WMT,9X,             X
               'Reset WMT           : ',CFG_WMTF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Warning text        : ',CFG_WT,9X,              X
               'Reset WT            : ',CFG_WTF,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Work area sep line  : ',CFG_WASL,9X,            X
               'Reset WASL          : ',CFG_WASLF,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Point-and-shoot     : ',CFG_PS,9X,              X
               'Reset PS            : ',CFG_PSF,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    ZPLACE              : ',CFG_ZPLACE,4X,          X
               'Reset ZPLACE        : ',CFG_ZPLF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    ZKLUSE              : ',CFG_ZKLUSE,11X,         X
               'Reset ZKLUSE        : ',CFG_ZKLF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    ZPFSHOW             : ',CFG_ZPFSHOW,9X,         X
               'Reset ZPFSHOW       : ',CFG_ZPFF,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Status area default : ',CFG_PDFDSTAT,9X,        X
               'Scroll default      : ',CFG_PDFDSCRL,                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Min Scroll amount   : ',(CFG_PDFDSMIN,F,R9B),3X,X
               'Max Scroll amount   : ',(CFG_PDFDSMAX,F,R9B),          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    ISPF Temp ds qual   : ',CFG_ZTMPQUAL,           X
               INTO=LINE
         BRASL R14,SPACE2
         STRING64 '    ISPF Default Lang   : ',CFG_ZDEFLANG,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Log Dataset Defaults: ',12X,                    X
               'List Dataset default: ',                               X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Log dataset blksz : ',(CFG_LOGBLKSZ,F,R9B),5X,X
               'Recs in list blk  : ',(CFG_LSTBLK#,F,R9B),             X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Log file disp     : ',CFG_ZLOGFDSP,13X,       X
               'List file disp    : ',CFG_ZLSTFDSP,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Log file disp flg : ',CFG_ZLOGFDF,11X,        X
               'List file disp flg: ',CFG_ZLSTFDF,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Log lrecl         : ',(CFG_LOGLRECL,F,R9B),   X
               INTO=LINE
         BRASL R14,SPACE2
         TM    HBB7709,L'HBB7709       running on z/OS R6
         JZ    ISPF_15                 no, jump and display
         STRING64 '    Temp ctl0 ds default: ',12X,                    X
               'Temp list ds default: ',                               X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      ISPCTL0 lrecl     : ',(CFG_PDFC0LRC,F,R9B),5X,X
               'ISPLSTx lrecl     : ',(CFG_TLSTLRCL,F,R9B),            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      ISPCTL0 blksz     : ',(CFG_PDFC0BLK,F,R9B),5X,X
               'ISPLSTx blksz     : ',(CFG_TPLBLKSZ,F,R9B),            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      ISPCTL0 primary   : ',(CFG_PDFCT0PQ,F,R9B),5X,X
               'ISPLSTx primary   : ',(CFG_PDFLSXPQ,F,R9B),            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      ISPCTL0 secondary : ',(CFG_PDFCT0SQ,F,R9B),5X,X
               'ISPLSTx secondary : ',(CFG_PDFLSXSQ,F,R9B),            X
               INTO=LINE
         BRASL R14,SPACE2
ISPF_15  DS    0H
         TM    HBB7709,L'HBB7709       running on z/OS R6
         JNZ   ISPF_16                 yes, leave
         STRING64 '    Temp list ds default: ',                        X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      ISPLSTx blksz     : ',(CFG_TPLBLKSZ,F,R9B),5X,X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      ISPCTL0 lrecl     : ',(CFG_TLSTLRCL,F,R9B),   X
               INTO=LINE
         BRASL R14,SPACE1
ISPF_16  DS    0H
         STRING64 '    Temp cntl ds default: ',12X,                    X
               'Temp work ds default: ',                               X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      ISPCTLx lrecl     : ',(CFG_TCNTLRCL,F,R9B),5X,X
               'ISPWRKx lrecl     : ',(CFG_TWRKLRCL,F,R9B),            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      ISPCTLx blksz     : ',(CFG_TPCBLKSZ,F,R9B),5X,X
               'ISPWRKx blksz     : ',(CFG_TWRKBLKS,F,R9B),            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      ISPCTLx primary   : ',(CFG_ZCTLPQTY,F,R9B),5X,X
               'ISPWRKx primary   : ',(CFG_ZWRKPQTY,F,R9B),            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      ISPCTLx secondary : ',(CFG_ZCTLSQTY,F,R9B),5X,X
               'ISPWRKx secondary : ',(CFG_ZWRKSQTY,F,R9B),            X
               INTO=LINE
         BRASL R14,SPACE2
         STRING64 '    Printds option      : ',CFG_PDSOPR,             X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    View supported      : ',CFG_SUPPVIEW,9X,        X
               'Alternate 7.1 panel : ',CFG_PDSYFPALT,                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    No. of TBADD rows   : ',(CFG_TBADDROW,F,R9B),3X,X
               'Retrieve cmd stack  : ',(CFG_RETCMDSZ,F,R9B),          X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    TCPIP_PREFIX value  : ',CFG_TCPPREF,4X,         X
               'ISPF exits enabled  : ',(CFG_ISPFEXIT,1,X),            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    TCPIP_DATA value    : ',CFG_TCPDATA,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Use OE Sockets      : ',(CFG_USEOE,F,R9B),      X
               INTO=LINE
         BRASL R14,SPACE2
         STRING64 '    VSAM Support        :',                         X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Enable VSAM Edit  : ',CFG_VSAMEE,11X,         X
               'Limit VSAM Edit    :',CFG_VSAMEL,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Enable VSAM View  : ',CFG_VSAMVE,11X,         X
               'Limit VSAM View    :',CFG_VSAMVL,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Enable VSAM Browse: ',CFG_VSAMBE,11X,         X
               'Limit VSAM Browse  :',CFG_VSAMBL,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      VSAM commands     : ',                        X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '        Edit  : ',CFG_VSAMEC,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '        View  : ',CFG_VSAMVC,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '        Browse: ',CFG_VSAMBC,                       X
               INTO=LINE
         BRASL R14,SPACE2
         STRING64 '    Log/List defaults   :',                         X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Log/List jobcard1 :',CFG_ZLLGJOB1,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZLLGJOB1+36,                                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Log/List jobcard2 :',CFG_ZLLGJOB2,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZLLGJOB2+36,                                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Log/List jobcard3 :',CFG_ZLLGJOB3,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZLLGJOB3+36,                                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Log/List jobcard4 :',CFG_ZLLGJOB4,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZLLGJOB4+36,                                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Log settings        :',13X,                     X
               'List settings       :',                                X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      DS unique char    : ',CFG_ZLOGCHAR,13X,       X
               'DS unique char    : ',CFG_ZLSTCHAR,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Sysout class      : ',(CFG_ZLOGCLA,12),2X,    X
               'Sysout class      : ',(CFG_ZLSTCLA,12),                X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Reset sysout      : ',CFG_LOGCLAF,11X,        X
               'Reset sysout      : ',CFG_LSTCLAF,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Printer id        : ',(CFG_ZLOGPID2,12),2X,   X
               'Printer id        : ',(CFG_ZLSTPID2,12),               X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Reset printer id  : ',CFG_LOGPID2F,11X,       X
               'Reset printer id  : ',CFG_LSTPID2F,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Lines per page    : ',(CFG_ZLOGLIN,F,R9B),5X, X
               'Lines per page    : ',(CFG_ZLSTLIN,F,R9B),             X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Pages primary     : ',(CFG_ZLOG1PG,F,R9B),5X, X
               'Pages primary     : ',(CFG_ZLST1PG,F,R9B),             X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Pages secondary   : ',(CFG_ZLOG2PG,F,R9B),5X, X
               'Pages secondary   : ',(CFG_ZLST2PG,F,R9B),             X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Display required  : ',CFG_ZLOGIDSP,13X,       X
               'Display required  : ',CFG_ZLSTIDSP,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Keep              : ',CFG_ZLOGKEPT,13X,       X
               'Keep              : ',CFG_ZLSTKEPT,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Log message id    : ',CFG_ZLOGMID,13X,        X
               'List line length  : ',(CFG_ZLSTLLEN,F,R9B),            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 40X,'List record format: ',CFG_ZLSTRCFM,             X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 40X,'List lrecl        : ',(CFG_ZLSTRECL,F,R9B),     X
               INTO=LINE
         BRASL R14,SPACE1
         TM    HBB7740,L'HBB7740       running on z/OS R9        JK0209
         JZ    ISPF_18                 no, jump and display      JK0209
         STRING64 40X,'Reset Lrecl/Recfm : ',CFG_ZLSTRATR,             X
               INTO=LINE                                         JK0209
         BRASL R14,SPACE1
ISPF_18  DS    0H                                                JK0209
         STRING64 '      Unique job char   : ',CFG_ZJCHAR,             X
               INTO=LINE
         BRASL R14,SPACE2
         STRING64 '      Settings defaults :',13X,                     X
               'Retrieve defaults :',                                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Screen format     : ',CFG_ZFMT,13X,           X
               'Retrieve min. len : ',(CFG_ZRETMINL,F,R9B),            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Terminal type     : ',CFG_ZTERM,6X,           X
               'Retrieve csr pos  : ',(CFG_ZRETPOSC,F,R9B),            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Device name       : ',CFG_ZDEVNAM,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Reset device name : ',CFG_DEVNAMF,9X,         X
               'Function keys     : ',                                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Family printer    : ',(CFG_ZFAMPRT,F,R9B),5X, X
               'Pfkey prefix      : ',CFG_ZPPRFX,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Aspect ratio      : ',(CFG_ZASPECT,F,R9B),5X, X
               'Fka setting       : ',CFG_ZFKA,                        X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Pad character     : ',CFG_ZPADC,13X,          X
               'Number of pfkeys  : ',CFG_ZKEYS,                       X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Delimiter         : ',CFG_ZDEL,               X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Enable euro symbol: ',CFG_ZCHAREUR,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Reset enable euro : ',CFG_CHAREURF,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Scroll Member List: ',CFG_PDFDSML,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Reset Scr.Mem.List: ',CFG_PDFDSMLF,           X
               INTO=LINE
         BRASL R14,SPACE2
         STRING64 '    General             :',13X,                     X
               'Environ             :',                                X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Char set load mod : ',CFG_ZCHARLM,6X,         X
               'Termtrac dd name  : ',CFG_ZTERMTDD,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Reset char loadmod: ',CFG_CHARLMF,11X,        X
               'Enable dump       : ',CFG_ZENBLDMP,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Frame color_intens: ',(CFG_ZFRAMIC,1,X),12X,  X
               'Reset termtrac dd : ',CFG_TERMTDDF,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Tput buffersize   : ',(CFG_ZTPUTBSZ,F,R9B),5X,X
               'Termtrac value    : ',CFG_ZTERMTR,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      ZDATEFD date forma: ',CFG_ZDATEFD,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      ZDATEF date format: ',CFG_ZDATEF,             X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Time separator    : ',CFG_ZTSEP,              X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Cont 3270 aft disc: ',CFG_ZGUI3270,           X
               INTO=LINE
         BRASL R14,SPACE2
         STRING64 '    Colors              :',                         X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Global colors     : ',CFG_ZGCOLORS,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui global colors : ',CFG_ZGGCOLRS,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Host colors       : ',CFG_ZGHCOLR,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      PC colors         : ',CFG_ZGPCOLR,            X
               INTO=LINE
         BRASL R14,SPACE2
         STRING64 '    Workstation         :',                         X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui appc address  : ',CFG_ZGUIAPPC,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZGUIAPPC+32,                                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui appc address2 : ',CFG_ZGUIAPP2,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZGUIAPP2+32,                                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui appc address3 : ',CFG_ZGUIAPP3,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZGUIAPP3+32,                                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui appc address4 : ',CFG_ZGUIAPP4,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZGUIAPP4+32,                                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui appc address5 : ',CFG_ZGUIAPP5,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZGUIAPP5+32,                                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui close window  : ',CFG_ZGUICL,13X,         X
               'Gui show enter key: ',CFG_ZGUIEN,                      X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui window frame  : ',CFG_ZGUIFR,13X,         X
               'Gui network       : ',CFG_ZGUINET,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui switch        : ',CFG_ZGUION,13X,         X
               'Save gui values   : ',CFG_ZGUISAVE,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui tcp address   : ',CFG_ZGUITCP,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZGUITCP+32,                                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui tcp address2  : ',CFG_ZGUITCP2,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZGUITCP2+32,                                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui tcp address3  : ',CFG_ZGUITCP3,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZGUITCP3+32,                                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui tcp address4  : ',CFG_ZGUITCP4,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZGUITCP4+32,                                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui tcp address5  : ',CFG_ZGUITCP5,           X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZGUITCP5+32,                                 X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui title         : ',CFG_ZGUITIT,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZGUITIT+32,                                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Host code page    : ',(CFG_ZGUICDPG,2,X),10X, X
               'Host character set: ',(CFG_ZGUICHST,2,X),              X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Reset code page   : ',CFG_GUICDPGF,11X,       X
               'Reset char. set   : ',CFG_GUICHSTF,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui accelerator   : ',CFG_ZGUIACCL,13X,       X
               'Gui bckgrnd color : ',CFG_ZGUIDBC,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Gui download image: ',CFG_ZGUIDOWN,13X,       X
               'Gui makepath image: ',CFG_ZGUIMPTH,                    X
               INTO=LINE
         BRASL R14,SPACE2
         STRING64 '    Identifier          :',                         X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Default message id: ',CFG_ZSETMDS,13X,        X
               'Default panel id  : ',CFG_ZSETPDS,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Default screen nam: ',CFG_ZSETSDS,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Workstation         :',                         X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Download option   : ',CFG_ZDTVOPT,13X,        X
               'Dt level warning  : ',(CFG_ZDTWARN,F,R9B),             X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Browse ftp errors : ',CFG_ZWSDBRO,13X,        X
               'Create directory  : ',CFG_ZWSDCRE,                     X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Download method   : ',CFG_ZWSDMTHD,13X,       X
               'Download platform : ',CFG_ZWSDPLAT,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Download ftp user : ',CFG_ZWSDUSR,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Download ftp addr : ',CFG_ZWSDADD,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZWSDADD+32,                                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Download directory: ',CFG_ZWSDDIR,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 25X,CFG_ZWSDDIR+30,                                  X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Download data set : ',CFG_ZWSDPDS,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '      Reset download ds : ',CFG_WSDPDSF,            X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Lcl Sysout Class    : ',(CFG_ZLOGCLAL,14),      X
               'Force lcl class   : ',CFG_LOGCLALF,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    List Sysout Class   : ',(CFG_ZLSTCLAL,14),      X
               'Force list class  : ',CFG_LSTCLALF,                    X
               INTO=LINE
         BRASL R14,SPACE1
         STRING64 '    Disallow opt34 HLQ  : ',CFG_OPT34HLQ,11X,       X
               'ISPSTART dflt pane: ',CFG_ZDEFPPAN,                    X
               INTO=LINE
         BRASL R14,SPACE1
         TM    HBB7740,L'HBB7740       running on z/OS R9        JK0209
         JZ    ISPF_50                 no, jump and display      JK0209
         STRING64 '    Default LIBDEF Opt  : ',CFG_PDFDLIBD,6X,        X
               'Pathname Sub Char : ',CFG_PDFPTHNS,                    X
               INTO=LINE                                         JK0209
         BRASL R14,SPACE1
         STRING64 '    Dslist RMM Support  : ',                        X
               INTO=LINE                                         JK0209
         BRASL R14,SPACE1
         STRING64 '      Tape/RM Command   : ',CFG_PDFDRMCC,           X
               INTO=LINE                                         JK0209
         BRASL R14,SPACE1
         STRING64 '      Tape/RM Applid    : ',CFG_PDFDRMID,           X
               INTO=LINE                                         JK0209
         BRASL R14,SPACE1
         STRING64 '      Enable RM Support : ',CFG_PDFDRMEE,           X
               INTO=LINE                                         JK0209
         BRASL R14,SPACE1
         STRING64 '    Multi-Logon Prof SHR: ',                        X
               INTO=LINE                                         JK0209
         BRASL R14,SPACE1
         STRING64 '      M-L Support       : ',CFG_PDFTMLS,13X,        X
               'Conflict Processing:',                                 X
               INTO=LINE                                         JK0209
         BRASL R14,SPACE1
         STRING64 '      ENQ Lockout prompt: ',CFG_PDFTNQP,13X,        X
               '  ISPSPROF        : ',CFG_PDFTUCS,                     X
               INTO=LINE                                         JK0209
         BRASL R14,SPACE1
         STRING64 '      ENQ Lock wait(ms) : ',(CFG_PDFTNQW,H,R9B),5X, X
               '  ISPF Profile    : ',CFG_PDFTUCI,                     X
               INTO=LINE                                         JK0209
         BRASL R14,SPACE1
         STRING64 '      ENQ Lock retries  : ',(CFG_PDFTNQK,H,R9B),5X, X
               '  APPLID profiles : ',CFG_PDFTUCP,                     X
               INTO=LINE                                         JK0209
         BRASL R14,SPACE1
         STRING64 '      Reset Settings    : ',CFG_PDFTMLR,13X,        X
               '  Reference lists : ',CFG_PDFTUCR,                     X
               INTO=LINE                                         JK0209
         BRASL R14,SPACE1
         STRING64 40X,'  EDIT profiles   : ',CFG_PDFTUCE,              X
               INTO=LINE                                         JK0209
         BRASL R14,SPACE1
         STRING64 40X,'  BATCH           : ',CFG_PDFTUCB,              X
               INTO=LINE                                         JK0209
         BRASL R14,SPACE1
         STRING64 40X,'  Other profiles  : ',CFG_PDFTUCO,              X
               INTO=LINE                                         JK0209
         BRASL R14,SPACE2
         BRASL R14,BLANK1              Single Space
ISPF_50  DS    0H
         LOAD  EP=ISPTCM,ERRET=ISPF90
         LR    R3,R0
         USING ISPTCM_D,R3
         STRING64 '  ISPTCM  Changed: ',TCMDATE,                       X
               ' Number of user flags: ',(TCMUF,FL1,R3B),INTO=LINE
         BRASL R14,SPACE2
         LH    R6,TCMCT                Number of entries
         SR    R5,R5                   clear R5
         ICM   R5,B'0001',TCMLN        Length of an entry
         ICM   R3,B'1111',TCMCMTP      Start of entries
         USING TCMENTRY,R3
         STRING64 '    Entry   Flag Clear  Attributes based on Flag',  X
               INTO=LINE
         BRASL R14,SPACE2              Single line
*loop
ISPF10   DS    0H
*        #SNAP ADDR=(R3),LENGTH=10
         STRING64 4X,TCMNAME,2X,(TCMDEFF,,X),2X,(TCMDEFL,FL1,R3B),     X
               INTO=LINE
         LA    R4,LINE+3(R15)
        #STATUS TCMDEFF,TCMDEFF_RSV,'Reserved'
        #STATUS TCMDEFF,TCMDEFF_POOL,'Pool'
        #STATUS TCMDEFF,TCMDEFF_AUTH,'Auth'
        #STATUS TCMDEFF,TCMDEFF_NOLOG,'NoLog'
        #STATUS TCMDEFF,TCMDEFF_INVALID,'Invalid'
        #STATUS TCMDEFF,TCMDEFF_CLIST,'CLIST'
        #STATUS TCMDEFF,TCMDEFF_CMD,'CMD'
        #STATUS TCMDEFF,TCMDEFF_BLDL,'BLDL'
         BRASL R14,SPACE1              Single line
         AR    R3,R5                   Next entry
         JCT   R6,ISPF10               Do until
*endloop
         DELETE EP=ISPTCM              Delete ISPTCM
         BRASL R14,BLANK1              Single Space
         J     ISPF99
ISPF90   DS    0H
         STRING64 '  Load of ISPTCM failed',INTO=LINE
         BRASL R14,SPACE1              Single Space
ISPF99   END_PROC
         TITLE 'SHOWMVS &REL - Current REXX Environment'
*---------------------------------------------------------------------*
*                                                                     *
*REXX Environment:                                                    *
*                                                                     *
*  Environment(TSO/E)  Lang(ENU)  ENVBLOCK(03005C90)  TCB(9FC0D8)     *
*                                                                     *
*    Host Command Table (3 entries)                                   *
*                                                                     *
*        1   MVS       IRXSTAM                                        *
*        2   LINK      IRXSTAM                                        *
*        3   ATTACH    IRXSTAM                                        *
*                                                                     *
*    Function Package Directories                                     *
*                                                                     *
*      Type(System)  Name(IRXEFMVS)  Addr(04009000)  Entries(7)       *
*                                                                     *
*        1   SYSVAR    04027BC0  00000000                             *
*        2   SYSDSN    04027908  00000000                             *
*        3   LISTDSI   040270E8  00000000                             *
*        4   OUTTRAP   040261F0  00000000                             *
*        5   PROMPT    04025310  00000000                             *
*        6   MSG       04024BC0  00000000                             *
*        7   GETMSG    04020E50  00000000                             *
*                                                                     *
*---------------------------------------------------------------------*
REXX00   BEGIN_PROC KW=REXX                                      RS0302
         STRING64 '&TITLEPFX.REXX Environment:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         LA    R1,=C'IRXANCHR'         REXX Environment Block
         BRASL R14,JPASEARCH           find it in my JPAQ
         LTR   R15,R15                 found?
         JNZ   REXX98                  no, exit
         LR    R3,R0                   A(IRXANCHR)
         USING ENVTABLE_HEADER,R3
         LA    R4,ENVTABLE_FIRST       first entry
         USING ENVTABLE_ENTRY,R4
         BRASL R14,EXECKEY0            execute next instr in key=0
         L     R5,ENVTABLE_USED        number of entries used
*loop
REXX21   BRASL R14,EXECKEY0            execute next instr in key=0
         ICM   R6,B'1111',ENVTABLE_ENTRY+00    A(ENVBLOCK)
         JNP   REXX28                  not used, jump
         USING ENVBLOCK,R6
         BRASL R14,EXECKEY0            execute next instr in key=0
         L     R7,ENVBLOCK_PARMBLOCK   addr of the PARMBLOCK
         USING PARMBLOCK,R7
         IC    R0,OLDPKF               source key
         LA    R1,L'PARMBLOCK_ADDRSPN
         MVCK  WKCELL1(R1),PARMBLOCK_ADDRSPN,R0
         LA    R1,L'PARMBLOCK_LANGUAGE
         MVCK  WKCELL2(R1),PARMBLOCK_LANGUAGE,R0
         LA    R1,3
         MVCK  WKCELL3(R1),ENVTABLE_ENTRY+29,R0
         STRING64 '  Environment(',(WKCELL1,L'PARMBLOCK_ADDRSPN,T),    X
               ')  Lang(',(WKCELL2,L'PARMBLOCK_LANGUAGE,T),            X
               ')  ENVBLOCK(',((R6),,X),                               X
               ')  PARMBLOCK(',((R7),,X),                              X
               ')  TCB(',(WKCELL3,3,X),')',                            X
               INTO=LINE
**        '  ENVBLOCK=',((R6),,X),' PARMBLOCK=',((R7),,X),        X
         BRASL R14,SPACE2              Double Space
*
*        Display Host Command Table
*
REXX30   BRASL R14,EXECKEY0            execute next instr in key=0
         L     R1,PARMBLOCK_SUBCOMTB   addr of the SUBCOMTB header
         USING SUBCOMTB_HEADER,R1
         BRASL R14,EXECKEY0            execute next instr in key=0
         L     R2,SUBCOMTB_USED        SUBCOMTB entries used
         LA    R0,1                    counter
         BRASL R14,EXECKEY0            execute next instr in key=0
         L     R1,SUBCOMTB_FIRST       first SUBCOMTB entry
         USING SUBCOMTB_ENTRY,R1
         STRING64 4X,'Host Command Table (',((R2),,L),' entries)',     X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         LTR   R2,R2                   any entry to print?
         JNP   REXX28                  none, jump
*--loop
REXX31   IC    R14,OLDPKF              source key
         LA    R15,8+8+16              length
         MVCK  WORK256(R15),0(R1),R14
         STRING64 ((R0),,R9B),3X,      seq#                            X
               (WORK256,8),2X,         sub-command name                X
               (WORK256+8,8),2X,       module                          X
               (WORK256+16,16),        ?                               X
               INTO=LINE
         BRASL R14,SPACE1          <== next line
         AHI   R0,1
         LA    R1,32(,R1)              next function
         JCT   R2,REXX31
*--endloop
         BRASL R14,BLANK1              Double space
*
         STRING64 4X,'Function Package Directories',                   X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         BRASL R14,EXECKEY0            execute next instr in key=0
         L     R1,PARMBLOCK_PACKTB     addr of the PACKTB header
         USING PACKTB_HEADER,R1
         LA    R1,PACKTB_USER_FIRST    First USER PACKTB entry
         MVC   WKCELL1,=C'User    '    function type
         BRASL R14,REXX61          <== function package directory
         BRASL R14,EXECKEY0            execute next instr in key=0
         L     R1,PARMBLOCK_PACKTB     addr of the PACKTB header
         LA    R1,PACKTB_LOCAL_FIRST   First LOCAL PACKTB entry
         MVC   WKCELL1,=C'Local   '    function type
         BRASL R14,REXX61          <== function package directory
         BRASL R14,EXECKEY0            execute next instr in key=0
         L     R1,PARMBLOCK_PACKTB     addr of the PACKTB header
         LA    R1,PACKTB_SYSTEM_FIRST  First SYSTEM PACKTB entry
         MVC   WKCELL1,=C'System  '    function type
         BRASL R14,REXX61          <== function package directory
REXX28   LA    R4,ENVTABLE_NEXT        next ENVTABLE_ENTRY
         JCT   R5,REXX21               process it
*endloop
         BRASL R14,BLANK1              BLANK LINE
         J     REXX99
*
*        Display Functions
*
REXX61   STM   R14,R4,TENWORDS         save registers
         BRASL R14,EXECKEY0            execute next instr in key=0
         L     R0,ENVTABLE_ENTRY+28    point at TCB
         LR    R15,R0                  pass TCB address
         L     R0,TCBLLS-TCB(,R15)     first LLE
         STM   R15,R4,TENWORDS+4       save registers
         BRASL R14,EXECKEY0            execute next instr in key=0
         L     R3,0(,R1)               addr of 1st PACKTB entry
         USING PACKTB_ENTRY,R3
         BRASL R14,EXECKEY0            execute next instr in key=0
         L     R4,8(,R1)               number of PACKTB entries used
*loop
REXX62   IC    R0,OLDPKF               source key
         LA    R1,L'PACKTB_NAME        length
         MVCK  WKCELL2(R1),PACKTB_NAME,R0
         L     R1,TENWORDS+8           first LLE
         USING LLE,R1
*--loop
REXX63   L     R2,LLECDPT              point at CDE
         USING CDENTRY,R2
         CLC   CDNAME,WKCELL2          compare PACKTB_NAME
         JE    REXX64                  yes, exit loop
         ICM   R1,B'1111',LLECHN       next LLE
         JP    REXX63                  next LLE
*--endloop
         SLR   R1,R1                   not loaded under TCB
         SLR   R2,R2                   not loaded under TCB
         MVI   WKCELL3,255             no dsn available
         J     REXX64B
*
*        CDE/LPDE found for package
*
REXX64   L     R0,CDENTPT              R0=EP ADDR
         BRASL R14,CSVDSN              get dsname
         MVI   WKCELL3,255             no dsn available
         LTR   R15,R15                 dsname located?
         JNZ   *+8                     no, jump
         ST    R1,WKCELL3              yes, save dsname address
         L     R1,CDENTPT              entry point
         DROP  R1,R2                   LLE,CDENTRY
         LA    R1,0(,R1)               AMODE31 bit off
         BRASL R14,EXECKEY0            execute next instr in key=0
         L     R2,12(,R1)              number of entries
REXX64B  EQU   *
         STRING64 6X,'Type(',(WKCELL1,,T),      USER/LOCAL/SYSTEM      X
               ')  Name(',(WKCELL2,,T),         name of load-module    X
               ')  Addr(',((R1),,X),            address of load module X
               ')  Entries(',((R2),,L),')',     number of entries      X
               INTO=LINE
         ICM   R0,B'1111',WKCELL3      get/test dsname address
         JNP   REXX64T                 no dsname, jump
         STRING64 (LINE,,T),'  DSN(',((R0),44,T),')',INTO=LINE
REXX64T  EQU   *
         BRASL R14,SPACE2              Double Space
         LA    R0,1                    counter
         LA    R1,24(,R1)              first entry
         LTR   R2,R2                   any entry to print?
         JNP   REXX68                  none, jump
*--loop
*TM AUTH_ESR,L'AUTH_ESR <<<<<<<<<<
*JO REXX99
REXX65   IC    R14,OLDPKF              source key
         LA    R15,8+4+4+16            length
         MVCK  WORK256(R15),0(R1),R14
         STRING64 ((R0),,R9B),3X,      seq#                            X
               (WORK256,8),2X,         function name                   X
               (WORK256+8,4,X),2X,     function address                X
               (WORK256+16,8),         EP name                         X
               (WORK256+24,8),         DD name                         X
               INTO=LINE
         TR    LINE,TRTPRINT           clean up non-printable
         BRASL R14,SPACE1          <== next line
         AHI   R0,1                    counter
         LA    R1,32(,R1)              next function
         JCT   R2,REXX65
*--endloop
         BRASL R14,BLANK1              BLANK LINE
REXX68   LA    R3,PACKTB_NEXT          next entry
         JCT   R4,REXX62
*endloop
REXX69   LM    R14,R4,TENWORDS         restore registers
         BR    R14
*
REXX98   STRING64 '  REXX is not active in this address space.',       X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
*
REXX99   END_PROC
         TITLE 'SHOWMVS &REL - Data Set Allocations (Current Step)'
*---------------------------------------------------------------------*
*                                                                     *
*TIOT:                                                                *
*                                                                     *
*  DDname  Disp Volser   EXCP Data Set Name                           *
*                                                                     *
*  ISPPROF  OLD TSO143    226 IBMUSER.ISPF.ISPPROF                    *
*  ISPCTL0  OLD VIO       640 SYS93351.T142134.RA000.IBMUSER.R0000026 *
*  SYSEXEC  SHR TSO202      4 IBMUSER.EXEC                            *
*                                                                     *
*---------------------------------------------------------------------*
TIOT00   BEGIN_PROC KW=TIOT                                      RS0302
         STRING64 '&TITLEPFX.TIOT:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  DDname  Disp Volser   EXCP Data Set Name',32X,    X
               'Device   DEVN Miscellaneous',INTO=LINE
LINE_VOL2 EQU  LINE+15,6               VOLSER   (TIOT DISPLAY)
LINE_DSN2 EQU  LINE+29,44              DSNAME   (TIOT DISPLAY)
         BRASL R14,SPACE2              Double Space
         L     R5,TCBTIO               TIOT
         USING TIOT1,R5
         ST    R10,TIOTLINES+0         First TIOT line
*LOOP
TIOT_GET CLI   TIOEDDNM,C' '           FREED DD?
         JL    TIOT_NXT                YES, JUMP
         LA    R6,TENWORDS+4           WORK AREA
         ST    R6,TENWORDS             WORK AREA
         USING ZB505,R6
         XC    SWAEPAX,SWAEPAX         CLEAR WORK AREA
         MVC   SWVA,TIOEJFCB           SVA OF THE JFCB
         SWAREQ FCODE=RL,EPA=TENWORDS,MF=(E,SWAREQL1),UNAUTH=YES
         L     R6,SWBLKPTR             31-BIT ADDRESS OF JFCB
         USING INFMJFCB,R6
         MVC   WKCELL1,BLANKS          CLEAR WORK AREA
         MVC   WKCELL2,BLANKS          CLEAR WORK AREA
         MVC   STATUS,BLANKS           CLEAR WORK AREA
         MVC   UNITNAME,BLANKS         CLEAR WORK AREA
         MVC   UCB_NAME,BLANKS         CLEAR WORK AREA
         MVC   VOLSER,=C'JES     '     SYSIN/SYSOUT
         SLR   R1,R1                   EXCP=0
         SLR   R7,R7                   NO UCB
         TM    TIOELINK,TIOESSDS       IS THIS A JES DATA SET?
         JO    TIOT61                  YES, JUMP
         MVC   VOLSER,=C'DUMMY   '     DUMMY DATA SET
         ICM   R7,B'0111',TIOEFSRT     UCB ADDRESS
         JZ    TIOT64                  NO UCB, SKIP TCT SCAN
         USING UCBOB,R7
         BRASL R14,GETUNIT         <== GET UNITNAME
         MVC   VOLSER,=C'VIO     '     UNIT=VIO
         TM    UCBOB,UCBVRDEV          IS THIS A VIO DATA SET?
         JO    TIOT41                  YES, JUMP
         MVC   VOLSER,JFCBVOLS         NO, MOVE FIRST VOLSER
*
TIOT41   BRASL R1,TIOT41B
         DC    AL1(JFCNEW),C'NEW'
         DC    AL1(JFCMOD),C'MOD'
         DC    AL1(JFCOLD+JFCSHARE),C'SHR'
         DC    AL1(JFCOLD),C'OLD'
         DC    X'00',0H'0'
TIOT41B  BRASL R14,SCAN_TM             CALL SCAN RTNE
         DC    Y(1+3)               0  LENGTH OF A TABLE ENTRY
         TM    JFCBIND2,*-*         2  TEST DATA SET STATUS
         MVC   STATUS,1(R1)         6  DISP
*
         TM    UCBFL5,UCBSMS           SMS VOL?     X'20'
         JZ    TIOT46                  NO, JUMP
         MVC   WKCELL1(3),=C'SMS'      SMS-MANAGED
*
TIOT46   CLI   UCBTBYT3,UCB3TAPE       TAPE DEVICE?
         JNE   TIOT61                  NO, JUMP
         BRASL R1,TIOT46B
         DC    AL1(JFCBLTM),C'LTM'
         DC    AL1(JFCBLP),C'BLP'
         DC    AL1(JFCSUL),C'SUL'
         DC    AL1(JFCSUL+JFCBAL),C'AUL'
         DC    AL1(JFCBAL),C'AL '
         DC    AL1(JFCNSL),C'NSL'
         DC    AL1(JFCSL),C'SL '
         DC    AL1(JFCNL),C'NL '
         DC    X'00',0H'0'
TIOT46B  BRASL R14,SCAN_TM             CALL SCAN RTNE
         DC    Y(1+3)               0  LENGTH OF A TABLE ENTRY
         TM    JFCBLTYP,*-*         2  TEST LABEL TYPE FLAGS
*
         LH    R0,JFCBFLSQ             PICK UP FILE SEQUENCE NUMBER
         LTR   R0,R0                   LABEL=0?
         JNZ   TIOT46Y                 NO, JUMP
         LA    R0,0001                 YES, CHANGE TO LABEL=1
TIOT46Y  STRING64 ((R0),,L),',',(1(R1),3),INTO=WKCELL1
*
TIOT61   LA    R0,TIOENTRY             POINT TO CURRENT TIOT ENTRY
         SL    R0,TCBTIO               CHANGE ADDRESS TO OFFSET
         BRASL R14,EXCP00          <== GET EXCP COUNT IN R1
         STRING64 ((R1),,R6B),INTO=WKCELL2
         CL    R1,=F'100000'           OVER 100K?
         JL    TIOT64                  NO, JUMP
         SLR   R0,R0                   YES, DIVIDE BY 1000
         LA    R1,500(,R1)             YES, DIVIDE BY 1000
         D     R0,=F'1000'             YES, DIVIDE BY 1000
         STRING64 ((R1),,R4B),'K',INTO=WKCELL2
*
TIOT64   LTR   R7,R7                   do we have a UCB?
         JZ    TIOT_PRT                no, jump
         UCB_NAME RIGHT                get 4-character device number
TIOT_PRT DS    0H                                                 ?RS
         STRING64 2X,TIOEDDNM,1X,STATUS,1X,VOLSER,1X,(WKCELL2,7),      X
               JFCBDSNM,1X,UNITNAME,1X,UCB_NAME,1X,WKCELL1,            X
               INTO=LINE
         BRASL R14,SPACE1          <== next line
         CLC   JFCBDSNM(8),=CL8'...PATH='  USS Path?             RS0302
         JNE   TIOT_NXT                 no next
         L     R3,JSTCB                own Job-step TCB           ?RS
         L     R3,TCBJSCB-TCB(,R3)     current JSCB               ?RS
         USING IEZJSCB,R3                                         ?RS
         L     R3,JSCDSABQ             DSAB QDB                   ?RS
         USING DSABQDB,R3                                         ?RS
         L     R4,DSQFRSTP             FIRST DSAB ON CHAIN        ?RS
         USING DSAB,R4                                            ?RS
*loop                                                             ?RS
TIOT_PR1 DS    0H                                                 ?RS
         L     R3,DSABSIOT             get SIOT address           ?RS
         USING INDMSIOT,R3                                        ?RS
         CLC   TIOEDDNM,SCTDDNAM       is it my ddname?           ?RS
         JE    TIOT_PR2
         ICM   R4,B'1111',DSABFCHA     NEXT DSAB (above/below)   RS0802
         JNZ   TIOT_PR1                Not finished yet, keep on RS0802
         J     TIOT_PR2                jump over                 RS0802
*endloop                                                          ?RS
TIOT_PR2 DS    0H                                                 ?RS
         L     R3,SIOTDDIB             DDIB OCO :-))              ?RS
         LH    R0,10(,R3)              length of pathname !!      ?RS
TIOT_PR3 DS    0H                                                 ?RS
         CHI   R0,44
         JL    TIOT_PR4                                           ?RS
         STRING64 29X,(12(R3),44,T),INTO=LINE                     ?RS
         BRASL R14,SPACE1          <== next line                  ?RS
         AHI   R0,-44
         LTR   R0,R0                                              ?RS
         JZ    TIOT_NXT                                           ?RS
         JM    TIOT_NXT                                           ?RS
         LA    R3,44(R3)                                          ?RS
         J     TIOT_PR3                                           ?RS
TIOT_PR4 DS    0H                                                 ?RS
         STRING64 29X,(12(R3),(R0),T),INTO=LINE                   ?RS
         BRASL R14,SPACE1          <== next line                  ?RS
*
TIOT_NXT SLR   R0,R0                   PREPARE IC
         IC    R0,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY
         ALR   R5,R0                   BUMP UP TO NEXT ENTRY
         CLI   TIOELNGH,0              IS THIS THE END?
         JNZ   TIOT_GET                NOT YET, LOOP THROUGH TIOT
*ENDLOOP
         ST    R10,TIOTLINES+4         Last TIOT line
         BRASL R14,BLANK1              BLANK LINE
TIOT99   END_PROC                                                RS0302
         TITLE 'SHOWMVS &REL - TCB Tree and RB Chains (Current Step)'
*---------------------------------------------------------------------*
*                                                                     *
*TCB Tree and RB Chains:                                              *
*                                                                     *
*  TCB Address                    Program    IC  STAB  FLAGS1 CDFLGS  *
*                                                                     *
*  9FE240                         IEAVAR00   01  0083    42     00    *
*   9FDE88                        IEESB605   06  0082    02     00    *
*                                 IEFSD060   01  0003    42     00    *
*    9FD140            (JSTCB)    IKJEFT01   01  0083    42     00    *
*     9E9BE0                      IKJEFT02   01  0083    46     00    *
*      9E9790                     IKJEFT09   01  0083    42     00    *
*       9E95F8                    PDF        06  0082    00     00    *
*                                 ISPMAIN    01  0003    42     00    *
*        9C7718                   ISPTASK    06  0082    00     00    *
*                                 SHOWMVS    0C  0002    02     00    *
*        9E9280                   ISPTASK    06  0082    00     00    *
*                                 ISREDIT    01  0002    40     00    *
*   9FF1D8                        IEAVTSDT   78  0083    46     00    *
*                                                                     *
*---------------------------------------------------------------------*
TREE     BEGIN_PROC KW=TCBTREE                                   RS0302
         L     R1,PSAAOLD-PSA(,0)      my ASCB
         L     R1,ASCBASXB-ASCB(,R1)   my ASXB
         L     R9,ASXBFTCB-ASXB(,R1)   First TCB (RCT)
         STRING64 '&TITLEPFX.TCB Tree and PRB Chains:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '  TCB Address',18X,INTO=LINE,                       X
               'Program    IC  STAB  FLG1/CDFLGS DDname       Data',   X
               '  Programs'                                      RS0506
LINE_TCB_TREE  EQU LINE+28,&LINESIZE-28                          RS0506
LINE_TCB_TREE2 EQU LINE+80,&LINESIZE-80
         BRASL R14,SPACE2              Double Space
         SLR   R3,R3                   INDENTATION INDEX
*LOOP
TREE100  STCM  R9,B'0111',WKCELL1      STORE TCB ADDR
         STRING64 (BLANKS,2(R3)),(WKCELL1,3,X),INTO=LINE         RS0506
         TM    TCBFLGS5,TCBFC          task ended already?
         JO    TREE288                 yes, next TCB
         SLR   R6,R6                   first time switch (NEXTRB)
         CL    R9,JSTCB                my job-step TCB?
         JNE   TREE200                 no, jump
         MVC   LINE_TCB_TREE-8(7),=C'(JSTCB)'  signal current JSTCB
*
*        PROCESS RB CHAIN
*--LOOP
TREE200  BRASL R14,NEXTRB              GET RB ADDRESS
         LTR   R6,R6                   eof?
         JZ    TREE290                 yes, exit
         USING RBPREFIX,R6
         CLI   RBSTAB1,RBFTPRB         IS THIS A PRB?
         JNE   TREE280                 NO, IGNORE IT
         TM    RBCDFLGS,RBCDSYNC       CHECK FLAGS
         JO    TREE260                 JUMP IF IT IS A SYNCH PRB
         BRASL R14,JLBDDN           <- retrieve tasklib ddname
TREE250  DS    0H
         SLR   R0,R0                   STORAGE ALLOCATED (DATA)
         SLR   R1,R1                   STORAGE ALLOCATED (PROGRAMS)
         ICM   R2,B'1111',TCBMSS       FIRST SUB-POOL FOR THIS TCB
         JZ    TREE250_SWA             no sub-pools, quit try TCBSWA
         BRASL R14,TALLY            <- tally allocated storage
TREE250_SWA  DS    0H
         ICM   R2,B'1111',TCBSWA       FIRST SUB-POOL FOR THIS TCBSWA
         JZ    TREE250_UKYSP           no sub-pools, quit try TCBUKYSP
         BRASL R14,TALLY            <- tally allocated storage
TREE250_UKYSP DS    0H
         ICM   R2,B'1111',TCBUKYSP     FIRST SUB-POOL FOR THIS TCBUKYSP
         JZ    TREE251                 no sub-pools, quit try TCBUKYSP
         BRASL R14,TALLY            <- tally allocated storage
TREE251  DS    0H
         SRL   R0,10                   data bytes, in K
         SRL   R1,10                   program bytes, in K
         STM   R0,R1,WKCELL3           data, programs
         ICM   R1,B'1111',RBCDE        POINT TO CDE/LPDE
         JNZ   TREE253                 there is a CDE, jump
         LA    R1,BLANKS               fake CDE
TREE253  STRING64 3X,                                                  X
               CDNAME-CDENTRY(R1),3X,  PGM NAME                        X
               (RBWLIC+3,1,X),2X,       IC                             X
               (RBSTAB,2,X),2X,        STATUS BYTE               RS0506X
               (RBFLAGS1,,X),1X,       Flags                     RS0506X
               (RBCDFLGS,,X),1X,       CDFLGS                    RS0506X
               (RBFLAGS2,,X),1X,       FLAGS                     RS0506X
               (RBFLAGS3,,X),1X,       FLAGS                     RS0506X
               PDATA_DDN,              DDNAME OF TASKLIB               X
               (WKCELL3,F,R8B),'K',    storage (data)                  X
               (WKCELL3+4,F,R9B),'K',  storage (programs)              X
               INTO=LINE_TCB_TREE
         CLC   LINE(LINE_TCB_TREE-LINE),BLANKS 1st line for this TCB?
         JNE   TREE258                 yes, jump
         MVC   LINE_TCB_TREE2,BLANKS   no, clear storage tallies
TREE258  CL    R9,PSATOLD-PSA(,0)      is this my TCB?
         JNE   TREE270                 no, jump
         LA    R0,RBBASIC              point to basic section
         CL    R0,TCBRBP               is this my PRB?
         JNE   TREE270                 no, jump
         MVI   LINE+28+1,C'*'          yes, flag it              RS0506
         J     TREE270
TREE260  MVC   WKCELL1,RBGRS15         PICK UP ENTRY POINT ADDRESS
         NI    WKCELL1+3,X'FE'         SET BIT 31 TO ZERO
         STRING64 3X,                                                  X
               (WKCELL1,4,X),3X,       EP ADDRESS                      X
               (RBWLIC+3,1,X),2X,                                RS0506X
               (RBSTAB,2,X),2X,        Flags                     RS0506X
               (RBFLAGS1,,X),1X,       Flags                     RS0506X
               (RBCDFLGS,,X),1X,       CDFLGS                    RS0506X
               (RBFLAGS2,,X),1X,       FLAGS                     RS0506X
               (RBFLAGS3,,X),1X,       FLAGS                     RS0506X
               INTO=LINE_TCB_TREE
*
TREE270  BRASL R14,SPACE1          <== NEXT LINE
         MVC   LINE,BLANKS             blank it out
TREE280  J     TREE200                 LOOP THROUGH RB TABLE
*--ENDLOOP
TREE288  STRING64 '   Task Terminated',INTO=LINE_TCB_TREE
         BRASL R14,SPACE1          <== NEXT LINE
*
TREE290  BRASL R14,SCANTCB             GET NEXT TCB
         JNZ   TREE100                 PROCESS NEXT TCB
*ENDLOOP
         BRASL R14,BLANK1              BLANK LINE
         STRING64 '   STAB1: 00-PRB C0-SVRB 40-IRB 60-TIRB ',          X
               '08-WAITP 02-ATNXIT 01-PMSVRB',INTO=LINE
         BRASL R14,SPACE1          <== NEXT LINE
         STRING64 '   STAB2: 80-TCBNXT 40-FACTV 20-ATTN 10-ETXR ',     X
               '0C-IQETP 02-FDYN 01-ECBWT',INTO=LINE
         BRASL R14,SPACE1          <== NEXT LINE
         STRING64 '    FLG1: 80-SLOCK 40-XWAIT 20-ABEND 10-XWPRM ',    X
               '08-ASIR 04-LONGWT 02-SCB 01-SSSYN',INTO=LINE
         BRASL R14,SPACE1          <== NEXT LINE
         STRING64 '  CDFLGS: 80-NOCELL 20-CDATCH 10-CDSAVE ',          X
               '08-CDNODE 04-CDSYNC 02-CDXCTL 01-CDLOAD',INTO=LINE
         BRASL R14,SPACE1          <== NEXT LINE
         STRING64 '  CDFLGS: 80-AMODE31-Waiter',INTO=LINE        RS0506
         BRASL R14,SPACE1          <== NEXT LINE                 RS0506
         STRING64 '  CDFLGS: 80-WAIT with ECB',INTO=LINE         RS0506
         BRASL R14,SPACE2          <== DoubleISpace              RS0506
         END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*        Tally storage allocated to current TCB                       *
*        R2 can be TCBMSS, TCBSWA or TCBUKYSP                         *
*---------------------------------------------------------------------*
TALLY    BEGIN_PROC SAVE=NO                                      RS0703
         USING SPQE,R2
         STM   R14,R6,TENWORDS         save registers            RS0703
*LOOP
TALLY21  CL    R9,TCBJSTCB             Am I the JS TCB?
         JE    TALLY21L                yes, then I ass ownership
         CL    R9,SPQETCB              Do I own this subpool?
         JNE   TALLY29                 no, ignore it
TALLY21L L     R4,SPQESPQA             chain descriptors
         USING SPQA,R4
         LA    R5,3                    3 ENTRIES IN SPQA
*--LOOP
TALLY22  CL    R4,0(,R4)               EMPTY ENTRY?
         JE    TALLY25                 YES, EXIT
         L     R6,0(,R4)               FIRST/LAST DQE
         USING DQE,R6
*----LOOP
TALLY23  CLI   SPQEID,251              PROGRAM SUB-POOL?
         JE    TALLY23P                YES, JUMP
         CLI   SPQEID,252              PROGRAM SUB-POOL?
         JE    TALLY23P                YES, JUMP
         AL    R0,DQESIZE              ADD SIZE (DATA)
         J     TALLY23Q
TALLY23P AL    R1,DQESIZE              ADD SIZE (PROGRAMS)
TALLY23Q CL    R6,4(,R4)               LAST DQE ON THIS CHAIN?
         L     R6,DQENEXT
         JNE   TALLY23                 NO, PROCESS NEXT ONE
*----ENDLOOP
TALLY25  LA    R4,8(,R4)               NEXT ENTRY IN SPQA
         JCT   R5,TALLY22
*--ENDLOOP
TALLY26L L     R4,SPQESPQX             SPQX chain descriptors    RS0703
         USING SPQX,R4                 SPQX                      RS0703
         LA    R5,2                    2 entries in SPQX         RS0703
*--LOOP                                                          RS0703
TALLY27  CL    R4,0(,R4)               EMPTY ENTRY?              RS0703
         JE    TALLY28Z                YES, EXIT                 RS0703
         L     R6,0(,R4)               FIRST/LAST DQE            RS0703
         USING DQE,R6                                            RS0703
*----LOOP                                                        RS0703
TALLY28  CLI   SPQEID,251              PROGRAM SUB-POOL?         RS0703
         JE    TALLY28P                YES, JUMP                 RS0703
         CLI   SPQEID,252              PROGRAM SUB-POOL?         RS0703
         JE    TALLY28P                YES, JUMP                 RS0703
         AL    R0,DQESIZE              ADD SIZE (DATA)           RS0703
         J     TALLY28Q                                          RS0703
TALLY28P AL    R1,DQESIZE              ADD SIZE (PROGRAMS)       RS0703
TALLY28Q CL    R6,4(,R4)               LAST DQE ON THIS CHAIN?   RS0703
         L     R6,DQENEXT                                        RS0703
         JNE   TALLY28                 NO, PROCESS NEXT ONE      RS0703
*----ENDLOOP                                                     RS0703
TALLY28Z LA    R4,8(,R4)               NEXT ENTRY IN SPQX        RS0703
         JCT   R5,TALLY27                                        RS0703
*--ENDLOOP                                                       RS0703
.TALLY29 ANOP                                                    RS0703
TALLY29  ICM   R2,B'1111',SPQENEXT     NEXT SUBPOOL
         JNZ   TALLY21
*ENDLOOP
TALLY90  L     R14,TENWORDS                                      RS0703
         LM    R2,R6,TENWORDS+16                                 RS0703
         BR    R14                                               RS0703
         DROP  R2,R4,R6             SPQE,SPQA/SPQX,DQE           RS0703
         TITLE 'SHOWMVS &REL - Attention exits'
*---------------------------------------------------------------------*
*                                                                     *
*Attention Exits                                                      *
*                                                                     *
*  Address     Module    Stat  Stat2                                  *
*                                                                     *
*  84560EE8    ISPMAIN    C3    C0                                    *
*  829FCCC8    IKJEFT03   03    C0                                    *
*  829ED40C    IKJEFT01   80    00                                    *
*                                                                     *
*---------------------------------------------------------------------*
ATTNX00  BEGIN_PROC KW=ATTENTIONEXITS                            RS0302
         L     R4,PSAAOLD-PSA(,0)      my ASCB
         USING ASCB,R4
         L     R4,ASCBASXB             my ASXB
         USING ASXB,R4
         ICM   R5,B'1111',ASXBRCTD     RCT DATA AREA
         JZ    ATTNX99                 ZERO, EXIT
         USING RCTD,R5
         ICM   R6,B'1111',RCTDTAXE     FIRST TAXE
         JZ    ATTNX99                 ZERO, EXIT
         USING TAXE,R6
         STRING64 '&TITLEPFX.Attention Exits',INTO=LINE
         BRASL R14,SPACE2              double space
         STRING64 '   Address     Module    Stat  Stat2   TCB      ',  X
               'Parm',INTO=LINE
         BRASL R14,SPACE2              double space
*loop
ATTNX21  L     R1,TAXEEXIT             EXIT ADDRESS
         BRASL R14,CSVQUERY            GET MODULE NAME
         MVI   EP10,C' '               CLEAR ORIGIN
         STRING64 3X,(TAXEEXIT,,X),    EXIT ADDRESS                    X
               2X,EP10,                MODULE NAME                     X
               3X,(TAXESTAT,,X),       STATUS 1                        X
               4X,(TAXEST2,,X),        STATUS 2                        X
               4X,(TAXETCB+1,3,X),     TCB                             X
               4X,(TAXEPARM,,X),       Parm for exit rtne              X
               INTO=LINE
         BRASL R14,SPACE1
         ICM   R6,B'0111',TAXELNK      NEXT TAXE
         JNZ   ATTNX21                 NOT FINISHED YET
*endloop
         BRASL R14,BLANK1              BLANK LINE
ATTNX99  END_PROC
         TITLE 'SHOWMVS &REL - Job Pack Area Queue (JPAQ)'
*---------------------------------------------------------------------*
*                                                                     *
*JPAQ:                                                          RS0302*
*                                                                     *
*   Name     EntPt    AM Attrb SPN At At2 At3 Use  Length Load-Pnt Dat*
*   IRXANCHR 8DD03908 31  10   251 13  22  40 0001 0006F8 0DD03908 SYS*
*   IRXFUSER 8DD03800 31  12   251 13  22  40 0001 000108 0DD03800 SYS*
*   IRXFLOC  8DD036F8 31  12   251 13  22  40 0001 000108 0DD036F8 SYS*
*   IRXEFPCK 8DD09E48 31  10       15  02  40 IRXEFMVS             SYS*
*---------------------------------------------------------------------*
JPAQ     BEGIN_PROC KW=JPAQ                                      RS0302
         L     R8,CVTPTR(,0)           CVT ADDRESS
         SH    R8,=Y(CVTMAP-CVTFIX)    SUBTRACT PREFIX LENGTH
         USING CVTFIX,R8               PERMANENT ASSIGNMENT
         L     R9,JSTCB                THE JOB STEP TCB
         STRING64 '&TITLEPFX.JPAQ:',INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '   Name     EntPt    AM Attrb SPN At At2 At3 Use ', X
               ' Length Load-Pnt',' Data Set Name',                    X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         SLR   R5,R5                   first-time switch
*LOOP
JPAQ21   BRASL R14,NEXTCDE          <- get next CDE
         LTR   R5,R5                   end of JPAQ?
         JZ    JPAQ31                  yes, exit
         USING CDENTRY,R5
         L     R0,CDENTPT              R0=EP addr
         BRASL R14,CSVDSN           <- look for a CDEX
*
JPAQ22   L     R6,CDXLMJP              POINT TO XL (OR MAJOR CDE)
         STRING64 3X,CDNAME,1X,(CDENTPT,,X),INTO=LINE            RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
         MVC   0(2,R4),=C'24'          default AMODE 24          RS0302
        #STATUS CDENTPT,CDEMODE,'31'   Amode 31 ?                RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
        #STATUS CDENTPT3,CDEMOD64,'64' Amode 64 ?                RS0302
         TM    CDATTR,CDMIN            CHECK ATTRIBUTES
         JO    JPAQ25                  JUMP IF THIS IS A MINOR CDE
         USING XTLST,R6
         STRING64 (LINE,,T),2X,(CDATTRB,,X),                           X
               3X,(CDSP,FL1,R3B),1X,(CDATTR,,X),2X,(CDATTR2,,X),       X
               2X,(CDATTR3,1,X),1X,(CDUSE,,X),                         X
               1X,(XTLMSBLN,,X),1X,(XTLMSBAD,,X),1X,((R1),44),         X
               INTO=LINE                                         RS0302
         J     JPAQ29
JPAQ25   STRING64 (LINE,,T),2X,(CDATTRB,,X),                           X
               7X,(CDATTR,,X),2X,(CDATTR2,,X),2X,(CDATTR3,1,X),        X
               1X,CDNAME-CDENTRY(R6),13X,((R1),44),                    X
               INTO=LINE                                         RS0302
JPAQ29   BRASL R14,SPACE1          <== NEXT LINE
         J     JPAQ21                  LOOP THROUGH RB TABLE
*ENDLOOP
JPAQ31   BRASL R14,BLANK1              BLANK LINE
         STRING64 '   ATTRB: 80-EOM 40-IDENTY 20-DIRTY 10-CDEX ',      X
               '08-LPDE 04-GLOBAL 02-CONTAMINATION 01-RACF',           X
               INTO=LINE
         BRASL R14,SPACE1          <== NEXT LINE
         STRING64 '      AT: 80-NIP/MLPA 40-NIC 20-RENT 10-REUS ',     X
               '08-NREUS 04-MINOR 02-JPAQ 01-NOT_OL',                  X
               INTO=LINE                                         RS0302
         BRASL R14,SPACE1          <== NEXT LINE
         STRING64 '     AT2: 80-SP0 40-REL 20-XLE 10-RLC ',            X
               '08-AMODE_ANY 04-OVLY 02-APFLIB 01-AC=1',               X
               INTO=LINE                                         RS0302
         BRASL R14,SPACE1          <== NEXT LINE
         STRING64 '     AT3: 80-OpMvsPath 40-PML 20-SplitRmode ',      X
               '10-HFSshared 08-RTLS 04-DynLPA 02-ProtPage',     RS0207X
               INTO=LINE                                         RS0302
         BRASL R14,SPACE2              Double Space
         END_PROC
         TITLE 'SHOWMVS &REL - Load Lists'
*---------------------------------------------------------------------*
*                                                                     *
*Load list:                                                           *
*  TCB: 8F1118   Program: IKJEFT01                                    *
*   Name     EntPt    AM Attrb SPN At At2 At3 Use  SysCt Length Load-P*
*   IRXANCHR 8DD03908 31  10   251 13  22  40 0001 0000  0006F8 0DD039*
*   IRXSTAM  872B5F10 31  18     0 B1  22  00 0001 0000  0035A8 072B40*
*                                                                     *
*---------------------------------------------------------------------*
LOADLIST BEGIN_PROC KW=LOADLIST                                  RS0302
         L     R9,JSTCB                THE JOB STEP TCB
         STRING64 '&TITLEPFX.Load list:',INTO=LINE
         BRASL R14,SPACE1          <== next line
         SLR   R3,R3                   INDENTATION INDEX
*LOOP
LOADL11  ICM   R0,B'1111',TCBLLS       load-list empty?
         JZ    LOADL80                 yes, skip this TCB
         BRASL R14,BLANK1
         LA    R5,BLANKS               dummy CDE
         TM    TCBFLGS5,TCBFC          task ended already?
         JO    LOADL41                 yes, skip CDE search
*
*        get name of current program
*
         L     R5,TCBRBP               TOP RB
         USING RBBASIC,R5
LOADL36  TM    RBCDFLGS,RBCDSYNC       THIS RB CREATED BY SYNCH?
         JO    LOADL36I                YES, JUMP
         TM    RBSTAB1,RBFTSVRB        IS THIS AN SVRB?
         JNO   LOADL37                 NO, JUMP
LOADL36I ICM   R5,B'0111',RBLINK+1     POINT TO PREVIOUS RB
         J     LOADL36                 TEST SYNCH FLAG AGAIN
LOADL37  L     R5,RBCDE                POINT TO CDE/LPDE
         USING CDENTRY,R5
*
LOADL41  STCM  R9,B'0111',WKCELL1      STORE TCB ADDR
*
         STRING64 '  TCB: ',(WKCELL1,3,X),'   Program: ',CDNAME,       X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
         STRING64 '   Name     EntPt    AM Attrb SPN At At2 At3 Use ', X
               ' SysCt',' Length Load-Pnt',                      RS0302X
               INTO=LINE
         BRASL R14,SPACE1              Single Space
*
*        display load-list
*
         SLR   R7,R7                   first time switch
*--LOOP
LOADL70  BRASL R14,NEXTLLE             FIND NEXT LLE
         LTR   R7,R7                   end of chain?
         JZ    LOADL80                 yes, exit
         USING LLE,R7
         STCM  R7,B'0111',WKCELL1      STORE LLE ADDR
         L     R5,LLECDPT              CDE PTR
         TM    CDATTR,CDMIN            CHECK ATTRIBUTES
         JNO   LOADL72                 JUMP IF THIS IS A MAJOR CDE
         L     R5,CDXLMJP              POINT TO MAJOR CDE
LOADL72  L     R6,CDXLMJP              POINT TO XL
         USING XTLST,R6
         TM    CDATTRB,CDELPDE         CHECK ATTRIBUTES
         JO    LOADL75                 JUMP IF THIS IS A LPA MODULE
         STRING64 3X,CDNAME,1X,(CDENTPT,,X),INTO=LINE            RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
         MVC   0(2,R4),=C'24'          default AMODE 24          RS0302
        #STATUS CDENTPT,CDEMODE,'31'   Amode 31 ?                RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
        #STATUS CDENTPT3,CDEMOD64,'64' Amode 64 ?                RS0302
         STRING64 (LINE,,T),2X,(CDATTRB,,X),                           X
               3X,(CDSP,FL1,R3B),1X,(CDATTR,,X),2X,(CDATTR2,,X),       X
               2X,(CDATTR3,1,X),1X,(LLECOUNT,,X),1X,(LLESYSCT,,X),2X,  X
               (XTLMSBLN,,X),1X,(XTLMSBAD,,X),INTO=LINE          RS0302
         J     LOADL79
         USING LPDE,R5
LOADL75  DS    0H                                                RS0302
         STRING64 3X,LPDENAME,1X,(LPDENTP,,X),INTO=LINE          RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
         MVC   0(2,R4),=C'24'          default AMODE 24          RS0302
        #STATUS LPDENTP,LPDEMODE,'31' Amode 31 ?                 RS0302
         LA    R4,LINE+1(R15)          start of AMODE            RS0302
        #STATUS LPDEEPB3,LPDEAM64,'64' Amode 64 ?                RS0302
         STRING64 (LINE,,T),2X,(LPDEATTB,,X),                          X
               3X,(LPDESP,FL1,R3B),1X,(LPDEATTR,,X),2X,(LPDEATT2,,X),  X
               2X,(LPDEATT3,1,X),1X,(LLECOUNT,,X),1X,(LLESYSCT,,X),2X, X
               (LPDEXTLN+1,3,X),1X,(LPDEXTAD,,X),INTO=LINE       RS0302
LOADL79  BRASL R14,SPACE1          <== next line
         J     LOADL70                 LOOP THROUGH LOAD LIST
*--ENDLOOP
LOADL80  BRASL R14,SCANTCB             NEXT TCB IN TREE
         JNZ   LOADL11
*ENDLOOP
         BRASL R14,BLANK1              blank line
         END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*Local Cellpools:                                                     *
*                                                                     *
*  PoolId   Ext  C-Size  P-Num  S-Num SPN Key TCB    Header           *
*  009C3000   1      80    101    102 237   0 9DEA98 CPOOL CELL POOL  *
*  7F732F00   2     208     60    118 237   0 9DEA98 SWA BLOCK POOL   *
*                                                                     *
*---------------------------------------------------------------------*
CELLPLOC BEGIN_PROC KW=TIMERS                                    RS0302
         STRING64 '&TITLEPFX.Local Cellpools:',INTO=LINE           $RS
         BRASL R14,SPACE2              Double Space                $RS
         L     R5,PSAAOLD-PSA(,0)      ASCB                        $RS
         L     R5,ASCBLDA-ASCB(,R5)    Local Data Area             $RS
         USING LDA,R5                                              $RS
         L     R4,LDAPPD               LDA PPD queue               $RS
         STRING64 '   PoolId  Ext  C-Size   P-Num   S-Num SPN Key TCB  X
                 Header',INTO=LINE                                 $RS
         BRASL R14,SPACE1              NEXT LINE                   $RS
         BRASL R7,CELLP100             display cell-pools          $RS
         BRASL R14,BLANK1              BLANK LINE                  $RS
         END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*Recovery and Timers                                                  *
*                                                                     *
*  TCB: 9FC0D0   Program: ISPTASK                                     *
*                                                                     *
*   SCB(9FF4E0) TCB(9B3E88) Exit(82A3502C) PGM(IKJEFT0D) Key(80)      *
*               Parm(009E7AB8) Flgs1(96) Flgs2(80) Flgs3(00)          *
*   SCB(9FF510) RB(9AEF98) Exit(8224E9B0) PGM(IKJCMDRC) Key(80)       *
*               Parm(0000ABC4) Flgs1(16) Flgs2(80) Flgs3(01)          *
*   TQE(AD811D) Exit(00034788) PGM(FASTPATH) Date(19960821) Time(1855 *
*               Parm(00000000) Flgs(07) Flgs2(40) Flgs3(40) ID(000507 *
*   RPP(9F0680) RB(9B3B00) Exit(80034DE8) PGM(PROG24)                 *
*               Parm(00034DEC) Flag1(80) Mask(040000) PICA(00033010)  *
*                                                                     *
*---------------------------------------------------------------------*
TIMERS   BEGIN_PROC KW=TIMERS                                    RS0302
         L     R9,JSTCB                THE JOB STEP TCB
         STRING64 '&TITLEPFX.Recovery and Timers',INTO=LINE
         BRASL R14,SPACE1          <== next line
         SLR   R3,R3                   INDENTATION INDEX
*LOOP
TIMER11  TM    TCBFLGS5,TCBFC          task ended already?
         JO    TIMER80                 yes, skip this TCB
         L     R0,TCBSTAB              First SCB
         O     R0,TCBPIE               First SCA
         O     R0,TCBTME               First TQE
         JZ    TIMER80                 no, skip this TCB
         BRASL R14,BLANK1
*
*        get name of current program
*
         L     R5,TCBRBP               TOP RB
         USING RBBASIC,R5
TIMER16  TM    RBCDFLGS,RBCDSYNC       THIS RB CREATED BY SYNCH?
         JO    TIMER16I                YES, JUMP
         TM    RBSTAB1,RBFTSVRB        IS THIS AN SVRB?
         JNO   TIMER17                 NO, JUMP
*#SNAP ADDR=RBBASIC,LENGTH=44                                     -DEL-
TIMER16I ICM   R5,B'0111',RBLINK+1     POINT TO PREVIOUS RB
*#SNAP ADDR=RBBASIC,LENGTH=44                                     -DEL-
         J     TIMER16                 TEST SYNCH FLAG AGAIN
TIMER17  L     R5,RBCDE                POINT TO CDE/LPDE
         USING CDENTRY,R5
         STCM  R9,B'0111',WKCELL1      STORE TCB ADDR
         STRING64 '  TCB: ',(WKCELL1,3,X),'   Program: ',CDNAME,       X
               INTO=LINE
         BRASL R14,SPACE2              Double Space
*
*        STAE/ESTAE
*
         ICM   R5,B'1111',TCBSTAB      First SCB
         JZ    TIMER49                 no SCB, jump
         USING SCB,R5
*--loop
TIMER41  L     R6,SCBXPTR              SCB EXTENSION
         USING SCBX,R6
         STCM  R5,B'0111',WKCELL1      STORE SCB ADDR
         L     R1,SCBEXIT              EXIT ADDRESS
         BRASL R14,CSVQUERY            GET MODULE NAME
         TM    SCBFLGS1,SCBSTAI        STAI/ESTAI ?
         JO    TIMER44                 yes, jump
         STRING64 '    SCB(',(WKCELL1,3,X),                            X
               ') RB(',(SCBOWNRA,,X),  STAE/ESTAE                      X
               ') Exit(',(SCBEXIT,,X),                                 X
               ') PGM(',(EP10+2,L'EP10-2,T),                           X
               ') Key(',(SCBPKEY,,X),                                  X
               ')',INTO=LINE
         J     TIMER45
TIMER44  STRING64 '    SCB(',(WKCELL1,3,X),                            X
               ') TCB(',(SCBOWNRA,,X), STAI/ESTAI                      X
               ') Exit(',(SCBEXIT,,X),                                 X
               ') PGM(',(EP10+2,L'EP10-2,T),                           X
               ') Key(',(SCBPKEY,,X),                                  X
               ')',INTO=LINE
TIMER45  BRASL R14,SPACE1          <== next line
         STRING64 16X,                                                 X
               'Parm(',(SCBXPARM,,X),                                  X
               ') Flgs1(',(SCBFLGS1,,X),                               X
               ') Flgs2(',(SCBFLGS2,,X),                               X
               ') Flgs3(',(SCBFLGS3,,X),                               X
               ')',INTO=LINE
         BRASL R14,SPACE1          <== next line
TIMER48  ICM   R5,B'1111',SCBCHAIN     next SCB
         JNZ   TIMER41                 loop through SCB chain
*--endloop
TIMER49  DS    0H
*
*        SPIE/ESPIE
*
         L     R5,TCBPIE               SCA or just to test       RS0704
*        TCBPIE is 31-bit since OS/390 R8                        RS0704
*        ICM   R5,B'1000',CVTPTR       no, use 24-bit addr (TCBPIEA)
*                                      clear first byte !!
         LTR   R5,R5                   any SPIE/ESPIE here?     GSF0300
         JZ    TIMER59                 no, jump                 GSF0300
         AIF   (NOT D'CVTH7708).TIMER50 z/OS R5? No              RS0704
         TM    HBB7708,L'HBB7708       running on z/OS R5        RS0704
         JZ    TIMER59                 no, leave                 RS1104
         L     R5,TCBSTCB              STCB                      RS0704
         USING STCB,R5                                           RS0704
         L     R6,STCBRPP              Recovery PIE PICA         RS0704
         USING RPP,R6                                            SJG704
         AGO   .TIMER51                                          RS1104
.TIMER50 ANOP                                                    RS0704
TIMER50  DS    0H                                                RS0704
         AIF   (D'CVTH7708).TIMER51    z/OS R5? Yes              RS0704
         TM    HBB7708,L'HBB7708       running on z/OS R5        RS0704
         JNZ   TIMER51                 yes, leave                RS0704
         L     R5,TCBPIE               SCA                       RS0704
         USING SCA,R5
         L     R6,SCARPPTR             Recovery PIE PICA
         USING RPP,R6
*loop
.TIMER51 ANOP
TIMER51  STCM  R6,B'0111',WKCELL1      STORE RPP ADDR
         TM    RPPFLAG1,RPPTYPE        ESPIE?
         JNO   TIMER54                 no, jump
         L     R1,RPPEXITA             EXIT ADDRESS
         BRASL R14,CSVQUERY            GET MODULE NAME
         STRING64 '    RPP(',(WKCELL1,3,X),                            X
               ') RB(',(RPPPRB+1,3,X),                                 X
               ') Exit(',(RPPEXITA,,X),                                X
               ') PGM(',(EP10+2,L'EP10-2,T),                           X
               ')',INTO=LINE
         BRASL R14,SPACE1          <== next line
         STRING64 16X,                                                 X
               'Parm(',(RPPPARMA,,X),                                  X
               ') Flag1(',(RPPFLAG1,,X),                               X
               ') Mask(',(RPPITMK,3,X),                                X
               ') PICA(',(RPPPICA,,X),                                 X
               ') Token(',(RPPTOKEN,,X),                               X
               ')',INTO=LINE
         J     TIMER57
TIMER54  L     R5,RPPPICA              caller's PICA
         USING PICA,R5
         BRASL R14,EXECKEY0            execute next instr in key=0
         LM    R0,R1,PICA              load KEY8 PICA
         STM   R0,R1,WKCELL2           store PICA into work area
         LA    R5,WKCELL2              make PICA addressable
         TM    PICITMK1,PICAEXT        EXTENDED-FORMAT PICA?
         JO    *+8                     yes, jump
         MVI   PICITMK3,0              no, zero 3rd mask byte
         SLR   R1,R1
         ICM   R1,B'0111',PICEXITA     EXIT ADDRESS
         BRASL R14,CSVQUERY            GET MODULE NAME
         STRING64 '    RPP(',(WKCELL1,3,X),                            X
               ') RB(',(RPPPRB+1,3,X),                                 X
               ') Exit(',(PICEXITA,,X),                                X
               ') PGM(',(EP10+2,L'EP10-2,T),                           X
               ') Mask(',(PICAITMK,3,X),                               X
               ') PICA(',(RPPPICA+1,3,X),                              X
               ') Token(',(RPPTOKEN,,X),                               X
               ')',INTO=LINE
TIMER57  BRASL R14,SPACE1          <== next line
TIMER58  ICM   R6,B'1111',RPPNPTR      next RPIEPICA
         JNZ   TIMER51                 loop through RPP chain
*endloop
TIMER59  DS    0H
*
*        Timers
*
         ICM   R5,B'1111',TCBTME       any timer here?
         JZ    TIMER69                 no, jump
         USING TQE,R5
*loop
TIMER61  STCM  R5,B'0111',WKCELL1      STORE TQE ADDR
         L     R1,TQEEXIT              EXIT ADDRESS
         BRASL R14,CSVQUERY            GET MODULE NAME
         MVI   EP10,C' '               CLEAR ORIGIN
         STRING64 'Val(',(TQEVAL,8,X), expiration time                 X
               INTO=NEXTLINE
         LA    R1,TQEVAL               pass TOD clock value
         BRASL R14,STCKCONV            convert TOD clock to decimal
         STRING64 'Date(',STCKDATE,                                    X
               ') Time(',(STCKTIME,8),                                 X
               INTO=NEXTLINE
TIMER64  EQU   *
         STRING64 '    TQE(',(WKCELL1,3,X),                            X
               ') Exit(',(TQEEXIT,,X),                                 X
               ') PGM(',(EP10+2,L'EP10-2,T),                           X
               ') ',(NEXTLINE,,T),     expiration date and time        X
               ')',INTO=LINE
         BRASL R14,SPACE1          <== next line
         STRING64 16X,                                                 X
               'Parm(',(TQEPARAM,,X),                                  X
               ') Flgs(',(TQEFLGS,,X),                                 X
               ') Flgs2(',(TQEFLGS2,,X),                               X
               ') Flgs3(',(TQEFLGS3,,X),                               X
               ') ID(',(TQEID,,X),                                     X
               ')',INTO=LINE
         BRASL R14,SPACE1          <== next line
         ICM   R5,B'1111',TQELINK      end of chain?
         JNZ   TIMER61                 no, loop
*endloop
TIMER69  EQU   *
TIMER80  BRASL R14,SCANTCB             NEXT TCB IN TREE
         JNZ   TIMER11
*ENDLOOP
         BRASL R14,BLANK1              blank line
TIMER99  END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*  Name/Token Table:                                                  *
*                                                                     *
*    Name            Token (char)      Token (hex)                    *
*    DSNLOGREC           &             020D5650 02000048 00000000     *
*    IBMJESXCFAS                       0A206578 00000000 00000000     *
*    BBM6CSCAMVCT      d               09843F80 00000000 00000000     *
*    TCPIPAOE 6                        099B2040 00000000 00000000     *
*---------------------------------------------------------------------*
NTTAB50  BEGIN_PROC                                              RS0302
         L     R3,PSAAOLD-PSA(,0)      point at ASCB               $RS
         USING ASCB,R3                                             $RS
         L     R3,ASCBASSB             ASSB                        $RS
         USING ASSB,R3                                             $RS
         ICM   R4,B'1111',ASSBNTTP     Name/Token                  $RS
         JZ    NTTAB99                   no entries  jump          $RS
         USING NTTH,R4                                             $RS
         STRING64 '&TITLEPFX.Name/Token Table ','(LOCAL)',INTO=LINE
         BRASL R14,SPACE2              BLANK LINE                  $RS
         ICM   R5,B'1111',NTTHNTTF     First NTTE                  $RS
         JZ    NTTAB90                 yes, no entries  jump       $RS
         USING NTTE,R5                                             $RS
         STRING64 '  Name',13X,'Token (char)     Token (hex)',         X
               INTO=LINE
         BRASL R14,SPACE1              BLANK LINE                  $RS
*loop                                                              $RS
NTTAB70  DS    0H                                                  $RS
         STRING64 2X,NTTENAME,         name (char)               RS0904X
               1X,NTTETOKN,            token (char)                    X
               1X,(NTTETOKN,8,X),      token (hex)                     X
               1X,(NTTETOKN+8,8,X),    token (hex)                     X
               INTO=LINE                                           $RS
         TR    LINE,TRTDOTS            convert non-printable to dots
         BRASL R14,SPACE1              single line                 $RS
         ICM   R5,B'1111',NTTENEXT     next entry                  $RS
         JNZ   NTTAB70                 jump if not zero            $RS
*endloop                                                           $RS
         BRASL R14,BLANK1              blank line                  $RS
         J     NTTAB99                   no entries  jump          $RS
NTTAB90  STRING64 '  (none)',INTO=LINE
         BRASL R14,SPACE2              BLANK LINE                  $RS
.NTTAB99 ANOP                                                      $RS
NTTAB99  END_PROC                                                  $RS
*---------------------------------------------------------------------*
*                                                                     *
*Addresses of selected local control-blocks                           *
*                                                                     *
*  ASCB 00FA0280  ASSB 019EBA80  CSCB 044B1D90  ASXB 009FE038         *
*  OUCB 019EB8F8  OUXB 019B4A10  SSIB 009F1F00  JSAB 019AE5D8         *
*  JSCB 009FFBDC   JCT 009DB0E8  JCTX 009DB1A8   SCT 009DB328         *
*                                                                     *
*---------------------------------------------------------------------*
ADDR200  BEGIN_PROC KW=LOCALADDRESSES                            RS0302
         L     R9,PSATOLD-PSA(,0)      TCB
         L     R8,PSAAOLD-PSA(,0)      ASCB
         USING ASCB,R8
         STRING64 '&TITLEPFX.Addresses of selected local control-blocksX
               ',INTO=LINE
         BRASL R14,SPACE2              double space
         L     R7,ASCBASXB             ASXB
         USING ASXB,R7
         STRING64 '  ASCB ',(PSAAOLD-PSA,,X),                          X
               '  ASSB ',(ASCBASSB,,X),                                X
               '  CSCB ',(ASCBCSCB,,X),                                X
               '  ASXB ',(ASCBASXB,,X),                                X
               '  ACEE ',(ASXBSENV,,X),                                X
               INTO=LINE
         BRASL R14,SPACE1              single space
ADDR210  EQU   *
         L     R6,TCBJSCB              JSCB
         USING IEZJSCB,R6
         L     R5,ASCBASSB             ASSB
         USING ASSB,R5
         L     R4,ASSBJSAB             yes, JSAB exists
         L     R3,JSCBSSIB             SSIB
         USING SSIB,R3
         STRING64 '  OUCB ',(ASCBOUCB,,X),                             X
               '  OUXB ',(ASCBOUXB,,X),                                X
               '  SSIB ',(JSCBSSIB,,X),                                X
               '  JSAB ',((R4),,X),                                    X
               '   TCT ',(TCBTCT,,X),                                  X
               '  $SJB ',(SSIBSUSE,,X), JES2 SJB                       X
               INTO=LINE
         BRASL R14,SPACE1              single space
ADDR220  EQU   *
         L     R5,PSCB@                Protected Step Control Block
         USING PSCB,R5
         STRING64 '   LWA ',(LWA@,,X),                                 X
               '   TSB ',(ASCBTSB,,X),                                 X
               '  PSCB ',(PSCB@,,X),                                   X
               '   UPT ',(UPT@,,X),                                    X
               '   ECT ',(ECT@,,X),                                    X
               '  RLGB ',(PSCBRLGB,,X),   RE-LOGON Buffer              X
               INTO=LINE
         BRASL R14,SPACE1              single space
ADDR230  EQU   *
         L     R8,TCBJSCB              JSCB
         USING IEZJSCB,R8
         L     R7,JSCBJCT              JCT prefix
         LA    R7,16(,R7)              skip prefix
         USING INJMJCT,R7
         L     R6,JSCSCT               SCT prefix
         LA    R6,16(,R6)              skip prefix
         USING INSMSCT,R6
         SLR   R5,R5
         ICM   R5,B'0111',JCTJCTX      JCT Extension
         LA    R5,16(,R5)              skip prefix
         SLR   R4,R4
         ICM   R4,B'0111',SCTXBTTR     SCT Extension
         LA    R4,16(,R4)              skip prefix
         STRING64 '  JSCB ',(TCBJSCB,,X),                              X
               '   JCT ',((R7),,X),                                    X
               '  JCTX ',((R5),,X),                                    X
               '   SCT ',((R6),,X),                                    X
               '  SCTX ',((R4),,X),                                    X
               INTO=LINE
         BRASL R14,SPACE1              single space
         STRING64 ' LINES ',(LINE1PTR,,X),                             X
               '   R13 ',((R13),,X),                                   X
               INTO=LINE
         BRASL R14,SPACE2              double space
ADDR240  EQU   *
ADDR299  END_PROC
         TITLE 'SHOWMVS &REL - LAPF'
***********************************************************************
*                                                                     *
*>Local TSO Authorization Tables for this Userid IBMUSER              *
*                                                                     *
*    Please refer to:  TSO Tables Local to Userid (above).            *
*                                                                     *
*  IKJEFTE2   From User's LWA.   Address: 0000C000                    *
*    $$        $HOWMVS   $MDSMAIN  ABUDSN    AD        ADB2UTIL       *
*    ADDFILE   ADDGROUP  ADDSD     ADDUSER   ADIR      ADNR           *
*    AF        AG        AHOWMVS   ALD       ALF       ALG            *
*    ALTDSD    ALTER     ALTFILE   ALTGROUP  ALTUSER   ALU            *
*    APCANB    APCARB    APCAUB    APFCMD    ASUB      AU             *
*    BCMDEL    BCMDEL1   BCMNAUTH  BCMNUPD   BDATA     BDMNUPD        *
*                                                                     *
***********************************************************************
LAPFT00  BEGIN_PROC KW=LAPF                                      SG1209
         L     R4,LWA@                 LWA address               SG1209
         LTR   R4,R4                   Is there any?             SG1209
         JZ    LAPFT90                 No. Skip this routine.    SG1209
         LA    R4,X'49'(,R4)           Point to LWA Userid       SG1209
         STRING64 '&TITLEPFX.Local TSO Authorization Tables for this UsX
               erid ',                                                 X
               ((R4),7),               plug in userid                  X
               INTO=LINE
         BRASL R14,SPACE2              single space              SG1209
         STRING64 '    Please refer to:  TSO Tables Local to Userid (abX
               ove).',                                                 X
               INTO=LINE
         BRASL R14,SPACE2              double space              SG1209
         L     R4,LWA@                 reload LWA address        SG1209
         USING LWA,R4                                            SG1209
*  -----  E2 here - below                                        SG1209
         L     R5,LWATE2               Userid's IKJEFTE2 address SG1209
         TM    LWAPRMLB,LWATE2ST                                 SG1209
         JO    LAPFT04A                                          SG1209
         LA    R3,=C'Copied from Parmlib.'                       SG1209
         J     LAPFT04B                                          SG1209
LAPFT04A EQU   *                                                 SG1209
         LA    R3,=C'Copied from Steplib.'                       SG1209
LAPFT04B EQU   *                                                 SG1209
         STRING64 2X,((R5),8),2X,                                      X
               ' From User''s LWA.  ',                                 X
               ' Address: ',(LWATE2,,X),'   ',                         X
               ((R3),20),                                              X
               INTO=LINE                                         SG1209
         BRASL R14,SPACE1              single space              SG1209
         LA    R5,16(,R5)              bump past table header    SG1209
         LA    R7,7                    Initial load of JCT loop  SG1209
         MVC   LINE,BLANKS             Blank output area         SG1209
         LA    R3,LINE+4               Initial program name area SG1209
*                                                                SG1209
         LH    R6,LWATE2LN             JCT quantity              SG1209
         LTR   R6,R6                   Is there a length?        SG1209
         JZ    LAPFT08                 No. Keep R6 at zero.      SG1209
         AR    R6,R5                   Yes. Get table end.       SG1209
         S     R6,=F'16'               Compensate for header.    SG1209
*loop                                                            SG1209
LAPFT08  EQU *                                                   SG1209
         LTR   R6,R6                   Was there a length?       SG1209
         JZ    LAPFT10                 No. Test for blank only.  SG1209
         CR    R6,R5                   Are we there yet?         SG1209
         JNH   LAPFT13                 No. Keep looping.         SG1209
LAPFT10  EQU *                                                   SG1209
         CLC   0(8,R5),BLANKS          Is table entry a blank?   SG1209
         JE    LAPFT13                 Yes. end.                 SG1209
         MVC   0(8,R3),0(R5)           Move pgm name into output SG1209
         LA    R5,8(,R5)               Jump to next entry.       SG1209
         LA    R3,10(,R3)              Jump up in output line.   SG1209
         JCT   R7,LAPFT08              And check and display it. SG1209
LAPFT12  EQU *                                                   SG1209
         BRASL R14,SPACE1              print line                SG1209
         MVC   LINE,BLANKS                                       SG1209
         LA    R3,LINE+4                                         SG1209
         LA    R7,7                                              SG1209
         J     LAPFT08                                           SG1209
LAPFT13  EQU *                         exit and print last line  SG1209
         BRASL R14,SPACE2              print line                SG1209
*RS      MVC   LINE,BLANKS                                       SG1209
LAPFT15  EQU *                                                   SG1209
*end loop                                                        SG1209
*  -----  E2 here - above                                        SG1209
*  -----  E8 here - below                                        SG1209
         L     R4,LWA@                 reload LWA address        SG1209
         L     R5,LWATE8               Userid's IKJEFTE8 address SG1209
         TM    LWAPRMLB,LWATE8ST                                 SG1209
         JO    LAPFT14A                                          SG1209
         LA    R3,=C'Copied from Parmlib.'                       SG1209
         J     LAPFT14B                                          SG1209
LAPFT14A EQU   *                                                 SG1209
         LA    R3,=C'Copied from Steplib.'                       SG1209
LAPFT14B EQU   *                                                 SG1209
         STRING64 2X,((R5),8),2X,                                      X
               ' From User''s LWA.  ',                                 X
               ' Address: ',(LWATE8,,X),'   ',                         X
               ((R3),20),                                              X
               INTO=LINE                                         SG1209
         BRASL R14,SPACE1              single space              SG1209
         LA    R5,16(,R5)              bump past table header    SG1209
         LA    R7,7                    Initial load of JCT loop  SG1209
         MVC   LINE,BLANKS             Blank output area         SG1209
         LA    R3,LINE+4               Initial program name area SG1209
*                                                                SG1209
         LH    R6,LWATE8LN             JCT quantity              SG1209
         LTR   R6,R6                   Is there a length?        SG1209
         JZ    LAPFT18                 No. Keep R6 at zero.      SG1209
         AR    R6,R5                   Yes. Get table end.       SG1209
         S     R6,=F'16'               Compensate for header.    SG1209
*loop                                                            SG1209
LAPFT18  EQU *                                                   SG1209
         LTR   R6,R6                   Was there a length?       SG1209
         JZ    LAPFT20                 No. Test for blank only.  SG1209
         CR    R6,R5                   Are we there yet?         SG1209
         JNH   LAPFT23                 No. Keep looping.         SG1209
LAPFT20  EQU *                                                   SG1209
         CLC   0(8,R5),BLANKS          Is table entry a blank?   SG1209
         JE    LAPFT23                 Yes. end.                 SG1209
         MVC   0(8,R3),0(R5)           Move pgm name into output SG1209
         LA    R5,8(,R5)               Jump to next entry.       SG1209
         LA    R3,10(,R3)              Jump up in output line.   SG1209
         JCT   R7,LAPFT18              And check and display it. SG1209
LAPFT22  EQU *                                                   SG1209
         BRASL R14,SPACE1              print line                SG1209
         MVC   LINE,BLANKS                                       SG1209
         LA    R3,LINE+4                                         SG1209
         LA    R7,7                                              SG1209
         J     LAPFT18                                           SG1209
LAPFT23  EQU *                         exit and print last line  SG1209
         BRASL R14,SPACE2              print line                SG1209
         MVC   LINE,BLANKS                                       SG1209
LAPFT25  EQU *                                                   SG1209
*end loop                                                        SG1209
*  -----  E8 here - above                                        SG1209
*  -----  AP here - below                                        SG1209
         L     R4,LWA@                 reload LWA address        SG1209
         L     R5,LWATAP               Userid's IKJEFTAP address SG1209
         TM    LWAPRMLB,LWATAPST                                 SG1209
         JO    LAPFT24A                                          SG1209
         LA    R3,=C'Copied from Parmlib.'                       SG1209
         J     LAPFT24B                                          SG1209
LAPFT24A EQU   *                                                 SG1209
         LA    R3,=C'Copied from Steplib.'                       SG1209
LAPFT24B EQU   *                                                 SG1209
         STRING64 2X,((R5),8),2X,                                      X
               ' From User''s LWA.  ',                                 X
               ' Address: ',(LWATAP,,X),'   ',                         X
               ((R3),20),                                              X
               INTO=LINE                                         SG1209
         BRASL R14,SPACE1              single space              SG1209
         LA    R5,16(,R5)              bump past table header    SG1209
         LA    R7,7                    Initial load of JCT loop  SG1209
         MVC   LINE,BLANKS             Blank output area         SG1209
         LA    R3,LINE+4               Initial program name area SG1209
*                                                                SG1209
         LH    R6,LWATAPLN             JCT quantity              SG1209
         LTR   R6,R6                   Is there a length?        SG1209
         JZ    LAPFT28                 No. Keep R6 at zero.      SG1209
         AR    R6,R5                   Yes. Get table end.       SG1209
         S     R6,=F'16'               Compensate for header.    SG1209
*loop                                                            SG1209
LAPFT28  EQU *                                                   SG1209
         LTR   R6,R6                   Was there a length?       SG1209
         JZ    LAPFT30                 No. Test for blank only.  SG1209
         CR    R6,R5                   Are we there yet?         SG1209
         JNH   LAPFT33                 No. Keep looping.         SG1209
LAPFT30  EQU *                                                   SG1209
         CLC   0(8,R5),BLANKS          Is table entry a blank?   SG1209
         JE    LAPFT33                 Yes. end.                 SG1209
         MVC   0(8,R3),0(R5)           Move pgm name into output SG1209
         LA    R5,8(,R5)               Jump to next entry.       SG1209
         LA    R3,10(,R3)              Jump up in output line.   SG1209
         JCT   R7,LAPFT28              And check and display it. SG1209
LAPFT32  EQU *                                                   SG1209
         BRASL R14,SPACE1              print line                SG1209
         MVC   LINE,BLANKS                                       SG1209
         LA    R3,LINE+4                                         SG1209
         LA    R7,7                                              SG1209
         J     LAPFT28                                           SG1209
LAPFT33  EQU *                         exit and print last line  SG1209
         BRASL R14,SPACE2              print line                SG1209
         MVC   LINE,BLANKS                                       SG1209
LAPFT35  EQU *                                                   SG1209
*end loop                                                        SG1209
*  -----  AP here - above                                        SG1209
*  -----  NS here - below                                        SG1209
         L     R4,LWA@                 reload LWA address        SG1209
         L     R5,LWATNS               Userid's IKJEFTNS address SG1209
         TM    LWAPRMLB,LWATNSST                                 SG1209
         JO    LAPFT34A                                          SG1209
         LA    R3,=C'Copied from Parmlib.'                       SG1209
         J     LAPFT34B                                          SG1209
LAPFT34A EQU   *                                                 SG1209
         LA    R3,=C'Copied from Steplib.'                       SG1209
LAPFT34B EQU   *                                                 SG1209
         STRING64 2X,((R5),8),2X,                                      X
               ' From User''s LWA.  ',                                 X
               ' Address: ',(LWATNS,,X),'   ',                         X
               ((R3),20),                                              X
               INTO=LINE                                         SG1209
         BRASL R14,SPACE1              single space              SG1209
         LA    R5,16(,R5)              bump past table header    SG1209
         LA    R7,7                    Initial load of JCT loop  SG1209
         MVC   LINE,BLANKS             Blank output area         SG1209
         LA    R3,LINE+4               Initial program name area SG1209
*                                                                SG1209
         LH    R6,LWATNSLN             JCT quantity              SG1209
         LTR   R6,R6                   Is there a length?        SG1209
         JZ    LAPFT38                 No. Keep R6 at zero.      SG1209
         AR    R6,R5                   Yes. Get table end.       SG1209
         S     R6,=F'16'               Compensate for header.    SG1209
*loop                                                            SG1209
LAPFT38  EQU *                                                   SG1209
         LTR   R6,R6                   Was there a length?       SG1209
         JZ    LAPFT40                 No. Test for blank only.  SG1209
         CR    R6,R5                   Are we there yet?         SG1209
         JNH   LAPFT43                 No. Keep looping.         SG1209
LAPFT40  EQU *                                                   SG1209
         CLC   2(8,R5),BLANKS          Is table entry a blank?   SG1209
         JE    LAPFT43                 Yes. end.                 SG1209
         MVC   0(8,R3),2(R5)           Move pgm name into output SG1209
         LA    R5,10(,R5)              Jump to next entry.       SG1209
         LA    R3,10(,R3)              Jump up in output line.   SG1209
         JCT   R7,LAPFT38              And check and display it. SG1209
LAPFT42  EQU *                                                   SG1209
         BRASL R14,SPACE1              print line                SG1209
         MVC   LINE,BLANKS                                       SG1209
         LA    R3,LINE+4                                         SG1209
         LA    R7,7                                              SG1209
         J     LAPFT38                                           SG1209
LAPFT43  EQU *                         exit and print last line  SG1209
         BRASL R14,SPACE2              print line                SG1209
         MVC   LINE,BLANKS                                       SG1209
LAPFT45  EQU *                                                   SG1209
*end loop                                                        SG1209
*  -----  NS here - above                                        SG1209
LAPFT90  EQU *                                                   SG1209
         DROP  R4                                                SG1209
LAPFT99  END_PROC                                                SG1209
         TITLE 'SHOWMVS &REL - BRIF Invocation Routine'
***********************************************************************
*                                                                     *
*        INVOKE ISPF/PDF "BRIF" SERVICE                               *
*                                                                     *
*          1. ATTACH the LOCATE/OBTAIN sub-task                       *
*                                                                     *
*          2. Invoke BRIF                       (ISPF mode only)      *
*                                                                     *
*          or                                                         *
*                                                                     *
*          2. Write out lines to //SHOWMVS DD   (Hard-copy mode only) *
*                                                                     *
***********************************************************************
BRIF     BEGIN_PROC                                              RS0302
         CNOP  0,4                     boundary
         BRAS  R6,BRIF01
         DC    A(BRIF01)
BRIF01   DS    0H
         L     R6,0(R6,0)
         USING BRIF01,R6
*
*        Calculate number of lines written to buffer
*
         LTR   R10,R10                 Debug code
         JNZ   BRIF02                  Debug code
         DC    H'0'                    Force dump
BRIF02   DS    0H
         LR    R1,R10                  LAST LINE
         SL    R1,LINE1PTR             SIZE
         SR    R0,R0
         D     R0,=A(L'LINE)           NUMBER OF LINES
         ST    R1,NUMLINES             FOR BRIF
*
*        free the unused part of the working-storage area.
*
         LA    R1,4095                 start of free space
         LA    R2,NEXTLINE(R1)         start of free space
         N     R2,=F'-4096'            round up to a page boundary
         LM    R3,R4,LINE1PTR          addr/length of lines buffer
         ALR   R3,R4                   END OF BUFFER
         SR    R3,R2                   LENGTH OF UNUSED STORAGE
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JO    BRIF211                 yes, jump
         FREEMAIN RU,A=(R2),LV=(R3)    FREE UNUSED STORAGE
         J     BRIF215                 yes, jump
BRIF211  LR    R0,R3                   length for FREEMAIN
         LR    R1,R2                   address for FREEMAIN
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES             RS1002
         LR    R2,R1
*
BRIF215  EQU   *
         SL    R2,LINE1PTR             LENGTH OF STORAGE USED
         ST    R2,LINE1PTR+4           STORE IT FOR LAST FREEMAIN
*
         TM    BRIF_MODE,L'BRIF_MODE   PARM=BROWSE ?
         JO    BRIF240                 yes, jump
         BRASL R14,WAIT_FOR_SUB_TASK   wait until subtask completes
BRIF240  EQU   *
         LARL  R2,BRIF300
         SYNCHX (2),RESTORE=YES
*
*        Force the sub-task to terminate by freeing up the storage.
*        (the sub-task stops when it reaches an X'00' byte).
*
BRIF250  EQU   *
         TM    BRIF_MODE,L'BRIF_MODE   PARM=BROWSE ?
         JZ    BRIF255                 no, jump
         LM    R1,R2,LINE1PTR          addr/length
         ALR   R2,R1                   end addr + 1
         BCTR  R2,0                    last byte of dynamic strge area
         PGSER R,RELEASE,              RELEASE MEMORY                  X
               A=(R1),                 FROM                            X
               EA=(R2)                 TO
         BRASL R14,WAIT_FOR_SUB_TASK   wait until subtask completes
BRIF255  EQU   *
*
         LM    R1,R2,SMS_SSOB          Addr & len of SMS work area
         LTR   R1,R1                   SMS work area allocated?
         JZ    BRIF999                 no, exit
*****    LA    R1,0(,R1)               yes, get rid of VL bit
         FREEMAIN RU,LV=(R2),A=(R1)    FREE SMS WORK AREA
         J     BRIF999                 exit
*---------------------------------------------------------------------*
*
*        This code always executes KEY=TCB
*
*---------------------------------------------------------------------*
BRIF300  EQU   *
*
*        When AUTH=ESR, copy the protected Dynamic Storage Area to
*        the unprotected area.
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         JNO   BRIF310                 NO, JUMP
         LM    R14,R15,UNPROTWK
         LR    R0,R13
         LR    R1,R15
         MVCL  R14,R0
         L     R13,UNPROTWK            Point at unprotected area
BRIF310  EQU   *
         LA    R0,RCVYSAVE             DIALOG DATA PTR
         ST    R0,RCVYSAVE             DIALOG DATA PTR
*
         TM    TCP_MODE,L'TCP_MODE     TCPIP ?                   RS0302
         JO    BRIF900                 YES, JUMP                 RS0302
*
         TM    SMF_MODE,L'SMF_MODE     SMF ?                     RS0904
         JO    BRIF950                 YES, JUMP                 RS0904
*
         TM    HARDCOPY,L'HARDCOPY     Is this a hardcopy run?
         JO    BRIF800                 YES, JUMP
*
         TM    EDIF_MODE,L'EDIF_MODE   MODE=EDIT ?
         JO    BRIF400                 yes, jump
*
         TM    PUTLINE,L'PUTLINE       MODE=PUTLINE?
         JO    BRIF500                 yes, jump
*
         MVC   WKCELL1,=C'ISRBROBA'    ISPF V4
         XCALL ISPLINK,(=C'BRIF',      ISPF FUNCTION                   X
               TITLE,                  dsname                          X
               =C'F ',                 RECFM                           X
               =A(L'LINE),             LRECL                           X
               =A(RDRTNE),             READ ROUTINE                    X
               0,                      Command rtne addr               X
               RCVYSAVE,               PARM FOR READ ROUTINE           X
               WKCELL1)                PANEL (ISRBROBF/ISRBROBA)
         EXIT                          EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        EDIT mode: invoke EDIF                                       *
*                                                                     *
*---------------------------------------------------------------------*
BRIF400  EQU   *
         XCALL ISPLINK,(=C'EDIF',      ISPF FUNCTION                   X
               TITLE,                  DATA SET NAME                   X
               =C'TEXT    ',           PROFILE NAME                    X
               =C'F ',                 RECFM                           X
               =A(L'LINE),             LRECL                           X
               =A(RDRTNE),             READ ROUTINE                    X
               =A(WRITERTN),           WRITE ROUTINE                   X
               0,                      COMMAND EXIT                    X
               RCVYSAVE)               PARM FOR READ ROUTINE
         EXIT                          EXIT
*---------------------------------------------------------------------*
*        Dummy write routine for EDIF                                 *
*---------------------------------------------------------------------*
WRITERTN SAVE  (14,12)
         RETURN (14,12),RC=16          I/O error
*---------------------------------------------------------------------*
*                                                                     *
*        PUTLINE Mode: Issue PUTLINE                                  *
*                                                                     *
*---------------------------------------------------------------------*
BRIF500  EQU   *
         MVI   SUB_ECB1,0
         STAX  STAX00,REPLACE=NO,USADDR=(R13),MF=(E,WASTAX)
         MVI   WASTAX,C'N'             stop flag
*
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         JNO   BRIF510                 no ISPF, jump
         TM    SHORT_PUTLINE,L'SHORT_PUTLINE SHORT_PUTLINE mode ?
         JO    BRIF510                 yes, jump
         XCALL ISPLINK,                ISPF interface                  X
               (=C'CONTROL',           ISPF FUNCTION                   X
               =C'DISPLAY',            Key-word                        X
               =C'LINE',               Key-word                        X
               =F'1')                  Key-word
*LOOP
BRIF510  EQU   *
         XCALL =A(RDRTNE),             READ ROUTINE                    X
               (WKCELL1,               addr of record                  X
               =A(L'LINE),             LRECL                           X
               WKCELL2,                no RRN                          X
               RCVYSAVE),              DDATA                           X
               ERRET=BRIF590           end-of-data
         L     R10,WKCELL1             A(LINE)
*        XC    IECSDSL1(140),IECSDSL1
         STRING64 ((R10),L'LINE,T),INTO=(IECSDSL1+4,L'LINE)
         LTR   R15,R15                 BLANK LINE?
         JNZ   BRIF517                 NO, JUMP
         TM    SHORT_PUTLINE,L'SHORT_PUTLINE SHORT_PUTLINE mode ?
         JZ    BRIF519                 no, skip blank lines
         LA    R15,1(,R15)             length=1
BRIF517  EQU   *
         LA    R4,4(,R15)              length+4
         SLL   R4,16                   R4=llll0000
         STCM  R4,B'1111',IECSDSL1     format header
         TR    IECSDSL1+4(L'LINE),TRTPRINT
*
         XC    PUTLINEL(12),PUTLINEL                             RS0503
         L     R2,UPT@                 UPT ADDRESS
         L     R3,ECT@                 ECT ADDRESS
         LA    R1,IECSDSL1             debug
         PUTLINE PARM=PUTLINEL,                                        X
               UPT=(R2),ECT=(R3),ECB=SUB_ECB1,                         X
               OUTPUT=(IECSDSL1,TERM,SINGLE,DATA),                     X
               MF=(E,TENWORDS)
BRIF519  CLI   WASTAX,C'Y'             ATTN received?
         JNE   BRIF510                 no, keep on PUTLINEing
*ENDLOOP
BRIF590  EQU   *
         STAX  ,                       cancel previous STAX
         EXIT                          EXIT
*
STAX00   L     R13,8(,R1)              ADDRESS OF WORK AREA
         MVI   WASTAX,C'Y'             stop flag
         BR    R14                     AND RETURN
*---------------------------------------------------------------------*
*                                                                     *
*        Hard-copy mode: write lines to //SHOWMVS DD                  *
*                                                                     *
*---------------------------------------------------------------------*
BRIF800  EQU   *
         GETMAIN R,LV=CODE24L          GET 24-BIT WORK AREA
         MVC   0(CODE24L,R1),CODE24    MOVE 24-BIT CODE MODEL
         LR    R7,R1
         USING CODE24,R7
         OPEN  DCB24,MF=(E,OPEN24)
         LA    R3,1                    LINE COUNT (for page eject)
*LOOP
BRIF810  EQU   *
         XCALL =A(RDRTNE),             BRIF READ ROUTINE               X
               (WKCELL1,               addr of record                  X
               =A(L'LINE),             LRECL                           X
               WKCELL2,                no RRN                          X
               RCVYSAVE),              DDATA                           X
               ERRET=BRIF890           end-of-data
         L     R1,WKCELL1              A(LINE)
         MVC   WORK256(L'LINE),0(R1)   move to un-protected storage
         TR    WORK256(L'LINE),TRTPRINT Get rid of garbage
         BASSM R2,R7                   EXECUTE 24-BIT CODE
         LR    R2,R1                   save record address
         LH    R1,DCBLRECL-IHADCB+DCB24   pick up LRECL
         STRING64 1X,(WORK256,L'LINE),INTO=((R2),(R1))
         CLI   WORK256,C' '            IS THIS A NEW SECTION?
         JE    BRIF813                 NO, JUMP
         CHI   R3,6                    AT LEAST 6 LINES LEFT?
         JNH   BRIF814                 NO, NEW PAGE
BRIF813  JCT   R3,BRIF815              DECREMENT LINE COUNT
         AIF   ('&PRINT_CC' EQ 'N').NOBRIFCC                     RS1206
BRIF814  MVI   0(R2),C'1'              CTLASA
         AGO   .NOBRIFEND                                        RS1206
.NOBRIFCC  ANOP                                                  RS1206
BRIF814  MVI   0(R2),C' '              NO CTLASA                 RS1206
.NOBRIFEND ANOP                                                  RS1206
         LA    R3,&LINESPPG            MAX LINES PER PAGE        DL1199
BRIF815  J     BRIF810                 NEXT LINE
*ENDLOOP
BRIF890  CLOSE MF=(E,OPEN24)
         FREEPOOL DCB24
         FREEMAIN R,LV=CODE24L,A=(R7) FREE 24-BIT WORK AREA
         DROP  R7                      CODE24
         EXIT                          EXIT
*---------------------------------------------------------------------*
*        RMODE24 PUT Routine (hard-copy mode)                         *
*              Moved to RMODE24 work-area                             *
*              Invoked via BASSM R2,R7                                *
*---------------------------------------------------------------------*
         USING CODE24,R7
         CNOP  0,4
CODE24   LR    R14,R13                 31-BIT SAVE AREA
         LA    R13,SAVE24              24-BIT SAVE AREA
         ST    R14,4(,R13)             31-BIT SAVE AREA
         PUT   DCB24                   PUT LOCATE
         L     R13,4(,R13)             31-BIT SAVE AREA
         BSM   0,R2                    GOBACK WITH AMODE31
OPEN24   OPEN  (DCB24-DCB24,OUTPUT),MF=L
DCB24    DCB   DSORG=PS,MACRF=PL,DDNAME=SHOWMVS,                       X
               RECFM=FBA,LRECL=&LINESIZE                           JM
SAVE24   DS    18F                     24-bit Save area
CODE24L  EQU   *-CODE24                LENGTH OF DYNAMIC STORAGE AREA
         ORG   SAVE24                  save some space
         DROP  R7                      CODE24
*---------------------------------------------------------------------*
*                                                               RS0302*
*        TCP/IP client mode; write lines to a socket            RS0302*
*                                                               RS0302*
*---------------------------------------------------------------------*
BRIF900  EQU   *                                                 RS0302
         LA    R2,&LINESIZE            Length of area            RS0904
         GETMAIN RU,LV=(R2)            Allocate SMF area         RS0904
         LR    R4,R1                   Point to getmained area   RS0904
         USING TCPDATA,R4                                        RS0904
*LOOP                                                            RS0302
BRIF910  EQU   *
         XCALL =A(RDRTNE),             BRIF READ ROUTINE               X
               (WKCELL1,               addr of record                  X
               =A(L'LINE),             LRECL                           X
               WKCELL2,                no RRN                          X
               RCVYSAVE),              DDATA                           X
               ERRET=BRIF920           end-of-data               RS0302
         L     R1,WKCELL1              A(LINE)                   RS0302
         MVC   TCPDAT(L'LINE),0(R1)   move to un-protected storage
         TR    TCPDAT(L'LINE),TRTPRINT Get rid of garbage        RS0904
         MVI   TCPDAT+L'LINE,X'FF'    mark end of line!!!        RS0904
         MVC   WKCELL1(4),=F'&LINESIZE'       length             RS0302
         EZASMI TYPE=WRITE,       Issue Macro                          X
               S=SOC_DESC,        STREAM SOCKET                        X
               NBYTE=WKCELL1,     SIZE OF BUFFER                       X
               BUF=TCPDAT,        BUFFER                               X
               ERRNO=LRSNCODE,    (Specify ERRNO field)                X
               RETCODE=LRETCODE   (Specify RETCODE field)        RS0302
BRIF913  JCT   R3,BRIF910              DECREMENT LINE COUNT      RS0302
*ENDLOOP                                                         RS0302
BRIF920  DS    0H                                                RS0302
         MVC   WKCELL1(4),=F'1'                                  RS0302
         EZASMI TYPE=SHUTDOWN,    Issue Macro                          X
               S=SOC_DESC,        STREAM                               X
               HOW=WKCELL1,       End communication in both directions X
               ERRNO=LRSNCODE,    (Specify ERRNO field)                X
               RETCODE=LRETCODE    (Specify RETCODE field)       RS0302
         MVC   WKCELL1(4),=F'&LINESIZE'       length             RS0302
         EZASMI TYPE=READ,        Issue Macro                          X
               S=SOC_DESC,        STREAM SOCKET                        X
               NBYTE=WKCELL1,     SIZE OF BUFFER                       X
               BUF=TCPDAT,        (BUFFER)                             X
               ERRNO=LRSNCODE,    (Specify ERRNO field)                X
               RETCODE=LRETCODE   (Specify RETCODE field)        RS0302
         MVC   WKCELL1(4),=F'1'                                  RS0302
         EZASMI TYPE=SHUTDOWN,    Issue Macro                          X
               S=SOC_DESC,        STREAM                               X
               HOW=WKCELL1,       End communication in both directions X
               ERRNO=LRSNCODE,    (Specify ERRNO field)                X
               RETCODE=LRETCODE    (Specify RETCODE field)       RS0302
         EZASMI TYPE=TERMAPI      Issue Macro                    RS0302
         LA    R2,&LINESIZE       Length of area                 RS0904
         FREEMAIN RU,LV=(R2),A=(R4)    free getmained work area  RS0904
         EXIT                          EXIT                      RS0302
*---------------------------------------------------------------------*
*                                                               RS0904*
*        SMF MODE Write data to SMF                             RS0904*
*                                                               RS0904*
*---------------------------------------------------------------------*
BRIF950  EQU   *
         LA    R2,18+1+4+&LINESIZE     Length of area
         GETMAIN RU,LV=(R2)            Allocate SMF area
         LR    R4,R1                   Point to getmained area
         USING SMFRCD2,R4
         LA    R0,18+1+4+&LINESIZE     Length of SMF record
         STH   R0,SMF2LEN              RDW
         XC    SMF2SEG,SMF2SEG         Clear
         MVI   SMF2FLG,B'00011110'     MVS/SP VERSION 4
         MVC   SMF2RTY,SMF_TYPE        Record Type PARM SMF=
         TIME  BIN,TMEDTE,LINKAGE=SYSTEM,MF=(E,WKCELL1)
         MVI   DTE+4,X'C0'
         LM    R0,R3,TMEDTE        TTTTTTTT,00000000,0YYYYDDD,C0000000
         STCM  R0,B'1111',SMF2TME      TIME
         SLDL  R2,4                    YYYYDDDC
         STCM  R2,B'1111',SMF2DTE      DATE
         SP    SMF2DTE,=P'1900000' 0ZYYDDDC (Z=0: 19.. , Z=1: 20..)
         OI    SMF2DTE+3,X'0F'         0ZYYDDDF
         L     R1,CVTPTR               ADDR OF CVT
         USING CVTMAP,R1
         L     R1,CVTSMCA              ADDR OF SMCA
         USING SMCABASE,R1
         MVC   SMF2SID,SMCASID         SYS ID TO SMF RECORD
         LA    R0,&LINESIZE+6          Length of user data
         STC   R0,SMFUDATL
         DROP  R1
         LOAD  EP=BPX1SMF              USS  callable service
         ST    R0,BPX_MOD              SAVE EP ADDRESS
         LA    R5,1                    R5=1
*LOOP
BRIF951  EQU   *
         XCALL =A(RDRTNE),             BRIF READ ROUTINE               X
               (WKCELL1,               addr of record                  X
               =A(L'LINE),             LRECL                           X
               WKCELL2,                no RRN                          X
               RCVYSAVE),              DDATA                           X
               ERRET=BRIF960           end-of-data
         L     R1,WKCELL1              A(LINE)
*        STRING64 ((R5),,R6Z),INTO=SMFUDATA
         ST    R5,SMFUDATA             Line number
         MVC   SMFUDATA+4(&LINESIZE),0(R1)   move to un-protected stor.
*        SMFEWTM (R4),BRANCH=NO        WRITE SMF RECORD
*        LTR   R15,R15
*        JZ    BRIF952
         ST    R4,WKCELL3
         L     R15,BPX_MOD
         CALL (15),                  smf_record                        X
               (SMF_TYPE_1,          SMF record type                   X
               SMF_SUBTYPE,          SMF record subtype                X
               =A(18+1+4+&LINESIZE), SMF record length                 X
               WKCELL3,              SMF record address                X
               WKCELL1,              Return value: 0 or -1             X
               LRETCODE,             Return code                       X
               LRSNCODE),            Reason code                       X
               VL,MF=(E,WORK256+100) ------------------------------
         ICM   R15,B'1111',WKCELL1     Test return value
         JM    BRIF953                 error
BRIF952  DS    0H
         LA    R5,1(,R5)               +1
         JCT   R3,BRIF951              Decrement line count
BRIF953  DS    0H
         DELETE EP=BPX1SMF
         LA    R2,18+1+4+&LINESIZE     Length of area
         FREEMAIN RU,LV=(R2),A=(R4)    free getmained work area
*ENDLOOP
BRIF960  DS    0H
         EXIT                          EXIT
*---------------------------------------------------------------------*
WAIT_FOR_SUB_TASK EQU *
         TM    SUB_TASK_ATTACHED,L'SUB_TASK_ATTACHED
         BNOR  R14                     NO, GOBACK
         WAIT  1,ECB=SUB_ECB1          wait until subtask completes
         BR    R14
BRIF999  END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*        Allocate/Free dynamic storage in SP=230,KEY=4,TCB=myTCB      *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
STORAGE_SP230 BEGIN_PROC SAVE=NO
         SYSSTATE ARCHLVL=0            avoid literals            RS1002
         LR    R2,R0                   LENGTH
         LA    R3,0(,R1)               ADDR/LOC
         L     R4,PSATOLD-PSA(,0)      current TCB
         BASR  R6,0
         USING *,R6
         L     R7,PSAAOLD-PSA(,0)      MY ASCB
         MODESET EXTKEY=ZERO
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=ESRAUTH
         LA    R1,1                    literals not allowed here
         CLR   R3,R1                   check loc/addr
         JL    STOR230B                GETMAIN LOC=BELOW (R1=0)
         JE    STOR230A                GETMAIN LOC=ANY (R1=1)
STOR230F FREEMAIN RU,                  REGISTER, UNCOND                -
               LV=(R2),                LENGTH                          -
               A=(R3),                 LENGTH                          -
               SP=230,                 PRIVATE, HIGH, NOT FETCH PRTCTD -
               KEY=KEY4,               KEY=4                           -
               BRANCH=YES
         J     STOR230X                exit
STOR230A GETMAIN RU,                   REGISTER, UNCOND                -
               LV=(R2),                LENGTH                          -
               SP=230,                 PRIVATE, HIGH, NOT FETCH PRTCTD -
               KEY=KEY4,               KEY=4                           -
               LOC=ANY,                RMODE=31                        -
               BNDRY=PAGE,             page-aligned                    -
               BRANCH=YES
         J     STOR230X                exit
STOR230B GETMAIN RU,                   REGISTER, UNCOND                -
               LV=(R2),                LENGTH                          -
               SP=230,                 PRIVATE, HIGH, NOT FETCH PRTCTD -
               KEY=KEY4,               KEY=4                           -
               LOC=BELOW,              RMODE=24                        -
               BNDRY=PAGE,             page-aligned                    -
               BRANCH=YES
STOR230X LR    R3,R1                   save addr accross SETLOCK
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=ESRAUTH
         LR    R1,R3                   return address
         EXIT
         SYSSTATE ARCHLVL=2            set back ARCHLVL=2        RS1002
         POP   USING
*---------------------------------------------------------------------*
*                                                                     *
*        Get Sub-system Version Information                           *
*                                                                     *
*---------------------------------------------------------------------*
GET_SSVI BEGIN_PROC SAVE=NO
         BAKR  R14,0
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR ?
         JNO   GETSSVI2                no, jump
         MODESET KEYADDR=OLDPKF,WORKREG=2 switch to KEY=8
         L     R13,UNPROTWK            addr of unprotected work area
         OI    AUTH_ESR,L'AUTH_ESR     AUTH=ESR
GETSSVI2 EQU   *
*----
         LA    R2,WORK256
         XC    0(256,R2),0(R2)         clear work area
         USING SSOB,R2
         ST    R2,SSOB+252             SSOB_PTR
         OI    SSOB+252,X'80'
         MVI   SSOBLEN+1,SSOBHSIZ      SSOB length
         MVC   SSOBID,=C'SSOB'         SSOB
         MVI   SSOBFUNC+1,SSOBSSVI     FUNCTION
*
         LA    R3,SSOB+SSOBHSIZ        SSIB
         ST    R3,SSOBSSIB             store SSIB addr into SSOB
         USING SSIB,R3
         MVC   SSIBID,=C'SSIB'         SSIB
         MVI   SSIBLEN+1,SSIBSIZE      SSIB length
         EREG  R1,R1                   reload Reg 1
         MVC   SSIBSSNM,0(R1)          SUB-SYSTEM NAME
*
         LA    R3,SSIB+SSIBSIZE        SSVI WORK AREA
         ST    R3,SSOBINDV             FUNCTION-DEPENDENT AREA
         USING SSVI,R3
*        MVI   SSVILEN,2               LENGTH=512                JS0507
         MVC   SSVILEN,=H'712'         LENGTH=712                JS0507
         MVI   SSVIVER,SSVICVER        VERSION
         MVC   SSVIID,=C'SSVI'         SSVI
         MVI   SSVIFLEN+1,SSVIFSIZ     LENGTH OF HEADER
         LA    R1,SSOB+252             SSOB_PTR
         IEFSSREQ
         LTR   R15,R15                 OK?
         JNZ   GETSSVI9                bad, exit
         LA    R1,SSVI                 return addr of SSVI
*---
         SLR   R3,R2                   offset to SSVI in work area
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR ?
         JNO   GETSSVI9                no, exit
         L     R13,PSATOLD-PSA(,0)     my TCB
         L     R13,TCBUSER-TCB(,R13)   protected work area
         MODESET EXTKEY=KEY4           switch to KEY=4
         LA    R4,L'WORK256            length
         IC    R5,OLDPKF               source key
         MVCK  WORK256(R4),0(R2),R5    Move line to buffer
         LA    R3,WORK256(R3)          change offset to address
         LA    R1,SSVI                 return addr of SSVI
GETSSVI9 PR
         DROP  R2,R3                   SSOB,SSVI
.GETSSVI9 ANOP
         TITLE 'SHOWMVS &REL - General-purpose Sub-Routines'
***********************************************************************
*                                                                     *
*        SUB-ROUTINES                                                 *
*                                                                     *
***********************************************************************
*---------------------------------------------------------------------*
*                                                                     *
*        LPAQ/PLPA search routine                                     *
*                                                                     *
*        On entry:   R1 points to an 8-byte EP name                   *
*                                                                     *
*        On exit:    R0 contains the entry-point address (CDENTPT)    *
*                    R1 points to the CDE/LPDE (zero if not found)    *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
LPASEARCH BEGIN_PROC SAVE=STDSAVE
         L     R3,CVTPTR(,0)           point to CVT
         USING CVTMAP,R3
*
*        search the ACTIVE LPA Q
*
         LA    R8,ALPACDE1             START OF ALPAQ or DLPAQ
         LR    R9,R1                   Module name
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE
         BALR  R14,R15                 USES R0, R1, R8, R9, R11
         J     LPASCH9             +0  FOUND, QUIT
*
*        search the PLPA directory
*
         LM    R0,R1,0(R9)             EP NAME
         L     R15,CVTLPDSR            LPA SEARCH ROUTINE
         BALR  R14,R15                 USES R6-R9
         J     LPASCH8             +0  FOUND, QUIT
         SLR   R11,R11                 Not found
         SLR   R15,R15                 Not found
         J     LPASCH95                exit
*
LPASCH8  LR    R11,R8                  Pass LPDE address
*
LPASCH9  L     R15,CDENTPT-CDENTRY(,R11) entry point address
*
LPASCH95 L     R14,12(,R13)            Restore return address
         LR    R0,R15                  R0 = EP_address
         LR    R1,R11                  R1 = CDE_address
         LM    R2,R12,28(R13)          restore registers
         BR    R14                     goback
         POP   USING
*---------------------------------------------------------------------*
*                                                                     *
*        JPAQ search routine                                          *
*                                                                     *
*        On entry:   R1 points to an 8-byte EP name                   *
*                                                                     *
*        On exit:    R15 contains the return code (OK=0, not_found=4) *
*                    R0 contains the entry-point address (CDENTPT)    *
*                    R1 points to the CDE                             *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
JPASEARCH BEGIN_PROC SAVE=STDSAVE
         DROP
         L     R3,CVTPTR(,0)           point to CVT
         USING CVTMAP,R3
         L     R4,PSATOLD-PSA(,0)      point to TCB
         USING TCB,R4
         L     R4,TCBJSTCB             point to JS TCB
         LA    R8,TCBJPQ               START OF CDE CHAIN
         LR    R9,R1                   Module name
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE
         BALR  R14,R15                 USES R0, R1, R8, R9, R11
         J     JPASCH9             +0  FOUND, QUIT
*
*        Module not found in JPAQ
*
         LM    R14,R12,12(R13)         restore registers
         LA    R15,4                   R15=4 (not found)
         SLR   R0,R0                   zero EP_address
         SLR   R1,R1                   zero CDE_address
         BR    R14                     goback
*
*        Return CDE addr in R1 and EP addr in R0
*
JPASCH9  L     R14,12(,R13)            Restore return address
         SLR   R15,R15                 RC=00
         L     R0,CDENTPT-CDENTRY(,R11) entry point address
         LR    R1,R11                  R1 = CDE_address
         LM    R2,R12,28(R13)          restore registers
         BR    R14                     goback
         POP   USING
*---------------------------------------------------------------------*
*                                                                     *
*        Search a module in MLPA, PLPA, link-list and STEPLIB and     *
*        retrieve the dsname of the PDS from which it was loaded.     *
*                                                                     *
*          Input:  R0 points to EP name                               *
*                                                                     *
*          Output: PDS2NAME contains EP name                          *
*                  PDATA_DDN contains ddname                          *
*                  PDATA_DSN contains dsname                          *
*                                                                     *
*---------------------------------------------------------------------*
DOBLDL1  LR    R14,R0                  module name
         LA    R14,8(,R14)             return address
*
DOBLDL2  EQU   *
         L     R1,CVTPTR(,0)           LINKLIST DCB
         L     R1,CVTLINK-CVTMAP(,R1)  LINKLIST DCB
         J     DOBLDL10
*
DOBLDL3  SLR   R1,R1                   DCB=0 (search tasklibs)
         J     DOBLDL10
*MLPADDN  DC    CL8'-MLPA-'
*PLPADDN  DC    CL8'-PLPA-'
*LINKDDN  DC    CL8'-LNKLST-'
*
DOBLDL10 BEGIN_PROC SAVE=NO
         STM   R14,R12,12(R13)         save regs
         L     R3,CVTPTR(,0)           point to CVT
         USING CVTMAP,R3
         LR    R4,R0                   module name
         LR    R5,R1                   DCB address
         MVC   PDATA_DSN,BLANKS        clear dsname
*
*        search the ACTIVE LPA Q
*
         MVC   PDATA_DDN,MLPADDN       DDN=-MLPA-
         PUSH  USING
         LA    R8,ALPACDE1             START OF ALPAQ or DLPAQ
         LR    R9,R4                   Module name
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE
         BALR  R14,R15                 USES R0, R1, R8, R9, R11
         J     DOBLDL90            +0  FOUND, QUIT
         L     R11,64(,R13)        +4  reload main base reg
         POP   USING
*
*        Search the PLPA directory
*
         MVC   PDATA_DDN,PLPADDN       DDN=-PLPA-
         LM    R0,R1,0(R4)             EP NAME
         L     R15,CVTLPDSR            LPA SEARCH ROUTINE
         BALR  R14,R15                 USES R6-R9
         J     DOBLDL90            +0  FOUND, QUIT
*
*        Search the tasklib directories (R5=0)
*        Search the linklist directory (R5=CVTLINK)
*
         MVC   PDATA_DDN,BLANKS        DDN=' '
         LARL  R2,SAFEBLDL
         SYNCHX (2),RESTORE=YES
         LTR   R15,R15                 OK?
         JNZ   DOBLDL99                no, exit
         STCM  R0,B'0011',PDS2CNCT     PDS2CNCT,PDS2LIBF
*
         MVC   PDATA_DDN,LINKDDN       module found in link-list
         LTR   R5,R5                   DCB=0 ?
         JNZ   DOBLDL80                no, found in linklist
         CLI   PDS2LIBF,PDS2LLNK       found in link-list?
         JE    DOBLDL80                yes, jump
*
*        found in tasklib - retrieve ddname
*
         SLR   R6,R6
         IC    R6,PDS2LIBF             TCB count
         BCTR  R6,0                    minus 1
         L     R9,PSATOLD-PSA(,0)      own TCB
*loop
DOBLDL47 BRASL R14,JLBDDN           <- retrieve tasklib ddname
         L     R9,TCBOTC-TCB(,R9)      previous TCB
         JCT   R6,DOBLDL47             get tasklib TCB
*endloop
*
*        retrieve dsname from JFCB<-SIOT<-DSAB
*
DOBLDL50 L     R9,JSTCB                own Job-step TCB
         L     R2,TCBJSCB-TCB(,R9)     current JSCB
         USING IEZJSCB,R2
         L     R2,JSCDSABQ             DSAB QDB
         USING DSABQDB,R2
         L     R2,DSQFRSTP             FIRST DSAB ON CHAIN
         USING DSAB,R2
*loop
DOBLDL56 L     R5,DSABSIOT             get SIOT address
         USING INDMSIOT,R5
         CLC   PDATA_DDN,SCTDDNAM      is it my ddname?
         JNE   DOBLDL59                No, try next DSAB
         SLR   R3,R3
         IC    R3,PDS2CNCT             pick-up concat#
*--loop
DOBLDL57 L     R5,DSABSIOT             get SIOT address
         L     R7,SJFCBPTR             GET JFCB ADDRESS FROM SIOT
         LTR   R3,R3                   concat # = zero ?
         JZ    DOBLDL88                yes, dsname found
         BCTR  R3,0                    decrement concat #
         ICM   R2,B'1111',DSABFCHN     NEXT DSAB
         JNZ   DOBLDL57                Not finished yet, keep on going
*--endloop
DOBLDL59 ICM   R2,B'1111',DSABFCHN     NEXT DSAB
         JNZ   DOBLDL56                Not finished yet, keep on going
*endloop
         J     DOBLDL90               The dsname could not be retrieved
*
*        find link-list dsname from LLT
*
DOBLDL80 SLR   R3,R3
         IC    R3,PDS2CNCT             pick-up concat#
         MH    R3,=Y(LLTNEXT-LLTENTRY) make it an offset into the LLT
         L     R14,CVTPTR(,0)          CVT address
         L     R15,CVTLLTA-CVTMAP(,R14) link-list table
         L     R14,PSAAOLD-PSA(,0)     A(ASCB)                  GSF0300
         L     R14,ASCBASSB-ASCB(,R14) A(ASSB)                  GSF0300
         L     R14,ASSBDLCB-ASSB(,R14) A(DLCB)                  GSF0300
         L     R15,DLCBLLT@-DLCB(,R14) A(LLT)                   GSF0300
.DOBLDL85 ANOP                                                  GSF0300
DOBLDL85 DS    0H                                               GSF0300
         LA    R7,LLTDSN-LLT(R3,R15)   change offset to address
*
DOBLDL88 MVC   PDATA_DSN,0(R7)         move dsname
*
DOBLDL90 SLR   R15,R15                 rc=0
         MVC   PDS2NAME,0(R4)          EPNAME for SAFELOAD
*
DOBLDL99 L     R14,12(,R13)            restore caller's regs
         LM    R2,R12,28(R13)          restore caller's regs
         BR    R14
*
*        Issue BLDL in TCB key to prevent S112-01 abend
*
SAFEBLDL L     R13,UNPROTWK            unprotected work-area
         MVC   CSVDWORK(2+2),=AL2(1,L'CSVDWORK)
         MVC   PDS2NAME,0(R4)          EPNAME
         BLDL  (R5),CSVDWORK           ISSUE BLDL
         ICM   R0,B'0011',PDS2CNCT     PDS2CNCT,PDS2LIBF
         EXIT
         DROPTEMP
*---------------------------------------------------------------------*
*                                                                     *
*        Load a module from a system or private library.              *
*                                                                     *
*        If the module is loaded from the link-list or from a         *
*        job/step/tasklib, then the first 512 bytes (from             *
*        load-point) are copied to WORK512.  This prevents S0C4-04    *
*        when the module is loaded into SP 251 and SHOWMVS running    *
*        key=4 is trying to access it.                                *
*                                                                     *
*          Input:  PDS2NAME contains module name                      *
*                  PDATA_DDN contains ddname                          *
*                                                                     *
*          Output: R1 points to first 512 bytes of module             *
*                  PDATA_DDN contains ddname                          *
*                                                                     *
*---------------------------------------------------------------------*
SAFELOAD BEGIN_PROC SAVE=STDSAVE
         SLR   R1,R1                   DCB=0
         CLI   PDATA_DDN,C'-'          system library ?
         JNE   SAFEL200                no, jump
         L     R1,CVTPTR(,0)           CVT
         L     R1,CVTLINK-CVTMAP(,R1)  DCB for SYS1.LINKLIB
SAFEL200 LARL  R2,SAFELOAD_LOAD
         SYNCHX (2),RESTORE=YES issue load
         LR    R2,R0                   save EP address
*
*        retrieve true name of the module if it was an alias
*
         L     R4,TCBLLS               POINT TO LAST LLE IN CHAIN
         USING LLE,R4
*LOOP
SAFEL221 L     R6,LLECDPT              CDE PTR
         USING CDENTRY,R6
         CLC   PDS2NAME,CDNAME         IS IT MY LLE?
         JE    SAFEL233                YES, JUMP
         ICM   R4,B'1111',LLECHN       CHECK FOR END OF CHAIN
         JNZ   SAFEL221                LOOP THROUGH LOAD LIST
*ENDLOOP
         J     SAFEL236                SOMETHING'S WRONG HERE
SAFEL233 TM    CDATTR,CDMIN            IS THIS A MINOR CDE?
         JNO   *+8                     NO, JUMP
         L     R6,CDXLMJP              YES, POINT TO MAJOR CDE/LPDE
SAFEL236 MVC   PDS2NAME,CDNAME         move name from CDE/LPDE
*
         CLC   PDATA_DDN,MLPADDN       -MLPA- ?
         JE    SAFEL900                yes, exit
         CLC   PDATA_DDN,PLPADDN       -PLPA- ?
         JE    SAFEL900                yes, exit
*
SAFEL300 CHI   R1,512                  max size
         JNH   *+8                     max size
         LA    R1,512                  max size
         IC    R15,OLDPKF              source key
         MVCK  WORK512(R1),0(R2),R15   move module to work area
         LA    R2,WORK512              return addr of work area
*
SAFEL900 LARL  R3,SAFELOAD_DELETE      delete the module         RS1002
         SYNCHX (3)                    delete the module         RS1002
*
SAFEL999 L     R14,12(,R13)            restore caller's regs
         LR    R0,R7                   dsname
         LR    R1,R2                   EP address
         LM    R2,R12,28(R13)          restore caller's regs
         BR    R14
*
*        Issue LOAD macro in TCB key to avoid S306-0C
*
SAFELOAD_LOAD EQU *
         LA    R3,PDS2NAME             point at program name
         LR    R4,R1                   pass DCB address
         L     R13,UNPROTWK            point at unprotected work area
         XC    WORK256,WORK256         clear work area
         LOAD  EPLOC=(R3),             load the program                X
               DCB=(R4),               DCB address                     X
               LOADPT=WKCELL1,         return load-point address       X
               SF=(E,WORK256)
         CLC   =CL8'SORT',0(R3)        IS THIS SORT?
         JNE   *+8                     NO, USE ENTRY POINT
         L     R0,WKCELL1              USE LOAD-POINT FOR SORT
*
         SLL   R1,8                    clear AC(1) bit
         SRL   R1,5                    size in bytes
         ALR   R1,R0                   subtract load-point offset
         SL    R1,WKCELL1              subtract load-point offset
         LA    R1,0(,R1)               AMODE bit off
         BR    R14
SAFELOAD_DELETE EQU *
         DELETE EPLOC=PDS2NAME         delete the program
         BR    R14
         DROPTEMP
*---------------------------------------------------------------------*
*                                                                     *
*        Retrieve dsname that corresponds to a CDE (ESA 4.3)          *
*              On entry, R0 contains a 31-bit address                 *
*              On exit, R1 points to a dsname (if R15=0)              *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
CSVDSN   BEGIN_PROC SAVE=NO
*        USING *,R15 ROLANDSCHIRADIN
CSVD10   BAKR  R14,0                   save regs
         ST    R0,CSVDWORK             entry-point address
*
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     +
               INADDR=CSVDWORK,        ADDRESS                         +
               OUTEPNM=EP10+2,         RETURN EP NAME                  +
               OUTPDATA=PDATA,         PROVIDER DATA                   +
               OUTPID=PID,             PROVIDER ID                     +
               OUTEPTKN=MODTOKEN,      RETURN TOKEN                    +
               MF=(E,CSVQRYWK)         WORK AREA
         LTR   R2,R15                  pass return code
         JZ    CSVD17                  OK, continue
         STRING64 'CSVQUERY Failed, R15=',((R2),,L),INTO=CSVDWORK
         LA    R1,CSVDWORK             message
         J     CSVD99                  EXIT WITH R15>0
*
CSVD17   CLC   =C'PGMF',PID            LOADED FROM JOBLIB/STEPLIB?
         JNE   CSVD31                  no, jump
         OC    PDATA,PDATA             Any provider data returned?
         JZ    CSVD51                  no, quit
         LA    R2,X'000000FF'          mask for NR
         N     R2,PDATA_TTRN           load TTRN from Provider Data
         CLI   PDATA+1,X'01'           LOADED FROM -LNKLST- ?
         JE    CSVD44                  yes, jump
         J     CSVD61                  JOBLIB/STEPLIB/TASKLIB
*
*        get module's TTRN in linklist (PID=LLAF)
*
CSVD31   CLC   =C'LLAF',PID            LOADED FROM LINK-LIST?
         JNE   CSVD51                  NO, EXIT
         MVC   CSVDWORK,=AL2(1,L'CSVDWORK)
         MVC   PDS2NAME,EP10+2         EPNAME
         L     R1,CVTPTR(,0)           CVT address
         L     R1,CVTLINK-CVTMAP(,R1)  link-list DCB
         BLDL  (1),CSVDWORK            ISSUE BLDL (to LLA)
         LTR   R15,R15
         LA    R1,BLANKS               dsname=''
         JNZ   CSVD99                  NOT FOUND, QUIT
         IC    R2,PDS2CNCT             pick-up concat#
         MVC   PDATA_DDN,LINKDDN       move ddname
*
*        find link-list dsname from LLT
*
CSVD44   MH    R2,=Y(LLTNEXT-LLTENTRY) make it an offset into the LLT
         L     R3,CVTPTR(,0)           CVT address
         L     R3,CVTLLTA-CVTMAP(,R3)  link-list table
         L     R14,PSAAOLD-PSA(,0)     MY ASCB                   RS0100
         L     R14,ASCBASSB-ASCB(,R14) ASSB                      RS0100
         L     R14,ASSBDLCB-ASSB(,R14) CSVDLCB                   RS0100
         L     R3,DLCBLLT@-DLCB(,R14)  LLT                       RS0100
         LA    R1,LLTDSN-LLT(R2,R3)    change offset to address
         J     CSVD98                  exit
*
CSVD51   STRING64 'PID(',(PID,,T),')',INTO=WORK44
         LA    R1,WORK44               message
         LA    R15,4                   RC=4
         J     CSVD99                  exit
*
*        Loaded from JOBLIB/STEPLIB/TASKLIB
*
CSVD61   TM    PDATA,X'80'             loaded from a PDSE?
         JZ    CSVD61L                 no, jump
         L     R3,PDATA_DDN+4          yes, get LFMD address
         MVC   PDATA_DDN,044(R3)       move true ddname
CSVD61L  L     R3,PSATOLD-PSA(,0)      TCB
         L     R3,TCBTIO-TCB(,R3)      TIOT
         USING TIOT1,R3
         SLR   R0,R0                   PREPARE IC
*LOOP
CSVD62   CLC   PDATA_DDN,TIOEDDNM      is this my ddname ?
         JE    CSVD65                  yes, exit loop
         IC    R0,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY
         ALR   R3,R0                   BUMP UP TO NEXT ENTRY
         CLI   TIOELNGH,0              IS THIS THE END?
         JNZ   CSVD62                  NOT YET, LOOP THROUGH TIOT
*ENDLOOP
*        DDname has been freed (not found in TIOT)
*
         STRING64 (PDATA_DDN,,T),'+',((R2),,L),INTO=CSVDWORK
         LA    R1,CSVDWORK             message
         J     CSVD98                  exit
*
*        DDname found - Retrieve dsname from JFCB
*
CSVD65   LTR   R2,R2                   first data set in concat?
         JZ    CSVD66                  yes, exit
*loop
CSVD65L  IC    R0,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY
         ALR   R3,R0                   BUMP UP TO NEXT ENTRY
         JCT   R2,CSVD65L              next concat#
*endloop
CSVD66   LA    R2,CSVDWORK+4           WORK AREA
         ST    R2,CSVDWORK             WORK AREA
         USING ZB505,R2
         XC    SWAEPAX,SWAEPAX         CLEAR WORK AREA
         MVC   SWVA,TIOEJFCB           SVA OF THE JFCB
         SWAREQ FCODE=RL,EPA=CSVDWORK,MF=(E,SWAREQL1),UNAUTH=YES
         L     R1,SWBLKPTR             31-BIT ADDRESS OF JFCB
CSVD98   SLR   R15,R15                 RC=0
.CSVD99  ANOP
CSVD99   PR
         POP   USING
*---------------------------------------------------------------------*
*        Sort table                                                   *
*        WKCELL1(1) = 'A' Sort by Asid                          RS0502*
*        WKCELL1(1) = 'D' Sort by DSNAME                        RS0502*
*        WKCELL1(1) = 'T' Sort by Total ascending               RS0704*
*---------------------------------------------------------------------*
TRIZO    BEGIN_PROC SAVE=STDSAVE                                RS0502
         LA    R0,L'LINE               LONGUEUR D'UN POSTE
         LR    R1,R10                  A(NEXTLINE)
         SLR   R1,R0                   DERNIER POSTE DE LA TABLE
         CL    R1,0(,R2)               un seul poste?
         BER   R14                     oui, fini
         STM   R0,R1,4(R2)             LONGUEUR, DERNIER POSTE
*LOOP
TRIZO1   MVI   0(R13),0                ETAT INITIAL DE L'INDICATEUR
         L     R10,0(,R2)              DEBUT DE LA TABLE  N=1
         SLR   R1,R0                   LE DERNIER POSTE EST TRIE
*--LOOP
TRIZOC   CLI   WKCELL1,C'A'            Sort by ASID ?           RS0502
         JE    TRIZOC_A                                         RS0502
         CLI   WKCELL1,C'T'            Sort by Total ?          RS0704
         JE    TRIZOC_T                                         RS0704
         CLC   DSNAME,DSNAME+L'LINE    (POSTE N) GT (POSTE N+1) ?
         JNH   TRIZOH                  SI NON, BRANCH
         J     TRIZOC_C                jump around ASID stuff   RS0502
TRIZOC_A CLC   ASID,ASID+L'LINE                                 RS0502
         JNH   TRIZOH                  SI NON, BRANCH           RS0502
         J     TRIZOC_C                jump around TOTAL stuff  RS0704
TRIZOC_T CLC   TOTAL,TOTAL+L'LINE                               RS0704
         JNL   TRIZOH                  SI NON, BRANCH           RS0704
TRIZOC_C DS    0H                                               RS0502
         XC    LINE,NEXTLINE           SI (POSTE N+1) LT (POSTE N)
         XC    NEXTLINE,LINE            INVERSER LES
         XC    LINE,NEXTLINE             DEUX POSTES.
         MVI   0(R13),8                NOTER LE DECLASSEMENT
TRIZOH   BRXLE R10,R0,TRIZOC           FAIRE N=N+1
*--ENDLOOP
TRIZON   CLI   0(R13),0                Y-A-T-IL EU UN DECLASSEMENT ?
         JNE   TRIZO1                  SI OUI,REFAIRE UN PASSAGE
*ENDLOOP
         LM    R14,R12,12(R13)
         BR    R14                     GOBACK
*---------------------------------------------------------------------*
*        Sort USERID and JOBname tables                               *
*                                                                     *
*              WKCELL1+00: First entry                                *
*              WKCELL1+04: Last entry                                 *
*---------------------------------------------------------------------*
SORT8    BEGIN_PROC SAVE=STDSAVE                                RS0402
         LA    R0,8                    length of an entry
         L     R1,WKCELL1+4            A(last_entry)
         CL    R1,WKCELL1              only one entry?
         BER   R14                     yes, goback
*LOOP
SORT8B   MVI   0(R13),0                ETAT INITIAL DE L'INDICATEUR
         L     R2,WKCELL1              DEBUT DE LA TABLE  N=1
         SLR   R1,R0                   LE DERNIER POSTE EST TRIE
*--LOOP
SORT8C   CLC   0(8,R2),8(R2)           (POSTE N) GT (POSTE N+1) ?
         JNH   SORT8H                  SI NON, BRANCH
         XC    0(8,R2),8(R2)           SI (POSTE N+1) LT (POSTE N)
         XC    8(8,R2),0(R2)            INVERSER LES
         XC    0(8,R2),8(R2)             DEUX POSTES.
         MVI   0(R13),8                NOTER LE DECLASSEMENT
SORT8H   BRXLE R2,R0,SORT8C            FAIRE N=N+1
*--ENDLOOP
SORT8N   CLI   0(R13),0                Y-A-T-IL EU UN DECLASSEMENT ?
         JNE   SORT8B                  SI OUI,REFAIRE UN PASSAGE
*ENDLOOP
         LM    R14,R12,12(R13)
         L     R1,WKCELL1              Point R1 to first entry
         BR    R14                     GOBACK
*---------------------------------------------------------------------*
*                                                                     *
*        Subpool usage display sub-routine                            *
*                                                                     *
*---------------------------------------------------------------------*
VSMP100  BEGIN_PROC SAVE=NO
         STM   R14,R12,WORK256+32      Save register
         XC    LRETCODE,LRETCODE       clear
         XC    LRSNCODE,LRSNCODE       clear
*loop
VSMP10   DS    0H
         CLI   WKCELL3,C'1'            CSA?
         JNE   VSMP11                    no
         VSMLIST SP=CSA,SPACE=FREE,WKAREA=(0(R3),4096)           RS1104
         STRING64 'CSA',INTO=LRETCODE                            RS1104
         J     VSMP15                  process returned data
VSMP11   DS    0H
         CLI   WKCELL3,C'2'            SQA?
         JNE   VSMP12                    no
         VSMLIST SP=SQA,SPACE=FREE,WKAREA=(0(R3),4096)           RS1104
         STRING64 'SQA',INTO=LRETCODE                            RS1104
         J     VSMP15                  process returned data
VSMP12   DS    0H
         VSMLIST SP=LSQA,SPACE=FREE,WKAREA=(0(R3),4096)          RS1104
         STRING64 'LSQA',INTO=LRETCODE                           RS1104
VSMP15   DS    0H                      process data
         CLC   0(4,R3),=F'4'       Returncode 4 (more data)
         JH    VSMP60                   Higher leave
         L     R3,4(,R3)               returned data
         L     R7,0(,R3)               # of subpool descriptors
         L     R5,LRSNCODE             number of current entries R4
         LA    R3,4(,R3)               point VSMD
         USING VSMD,R3                 tell assembly
         LTR   R5,R5                   already some blocks in?
         JZ    VSMP18                    no it's like not found
* loop
VSMP16   DS    0H
         CLC   0(2,R4),VSMDID          ID and KEY found ?
         JE    VSMP19                    Yes
         LA    R4,32(,R4)              next entry
         JCT   R5,VSMP16               loop until not found
* endloop
VSMP17   DS    0H                      not found table not empty
         L     R6,LRSNCODE             # of blocks
         AHI   R6,1                    +1
         ST    R6,LRSNCODE             save for later
         J     VSMP20
VSMP18   DS    0H                      not found table empty
         L     R4,ANSAREA              restore R4
         SR    R6,R6                   clear R6
         AHI   R6,1                    +1
         ST    R6,LRSNCODE             save for later
VSMP19   DS    0H                      entry found
*loop subpool descriptors
VSMP20   DS    0H
         MVC   0(1,R4),VSMDID          Subpool
         MVC   1(1,R4),VSMDKEY         Protection Key
         LA    R3,8(,R3)               point to # of block descr.
         MVC   4(R4,4),0(R3)           # of blocks
         L     R5,0(,R3)               # of ALLOc descriptor
         LA    R3,4(,R3)               point VSMD
*  loop
VSMP30   DS    0H
         TM    0(R3),X'7F'             above?
         JZ    VSMP31                    no
         L     R2,12(,R4)
         A     R2,VSMDSIZE             add size
         ST    R2,12(,R4)
         J     VSMP32
VSMP31   DS    0H
         L     R2,16(,R4)
         A     R2,VSMDSIZE             add size
         ST    R2,16(,R4)
VSMP32   DS    0H
         LA    R3,8(,R3)               next VSMD
         L     R6,0(,R3)               # of free descriptor
         L     R2,8(,R4)               summary
         AR    R2,R6
         ST    R2,8(,R4)
         LA    R3,4(,R3)
         LTR   R6,R6
         JZ    VSMP45
*    loop
VSMP40   DS    0H
         TM    0(R3),X'7F'             above?
         JZ    VSMP41                    no
         L     R2,20(,R4)
         A     R2,VSMDSIZE             add size
         ST    R2,20(,R4)
         J     VSMP42
VSMP41   DS    0H
         L     R2,24(,R4)
         A     R2,VSMDSIZE             add size
         ST    R2,24(,R4)
VSMP42   DS    0H
         LA    R3,8(,R3)               next VSMD
         JCT   R6,VSMP40               loop
*    endloop
VSMP45   DS    0H
         JCT   R5,VSMP30               loop
*  endloop
         CHI   R7,1                    last entry ?
         JE    VSM46                     stay on R4, ANSLEN
         LA    R4,32(,R4)              next entry
         L     R6,LRSNCODE             restore
         AHI   R6,1                    +1
         ST    R6,LRSNCODE             save for later
VSM46    DS    0H
         JCT   R7,VSMP20               loop
*endloop
         L     R3,WKCELL1              save
         CLC   0(4,R3),=F'4'       Returncode 4 (more data)
         JL    VSMP90                   rc = zero leave
         JE    VSMP10                   rc = 4, retry VSMLIST
*                                       error
*endloop
VSMP60   DS    0H
         STRING64 ' VSMLIST - RC: ',(0(R3),4,X),INTO=LINE
         J     VSMP99
VSMP90   DS    0H
         DROP  R3
         L     R3,ANSAREA
*        #SNAP ADDR=(R3),LENGTH=1024
         STRING64 '  Loc: ',LRETCODE,' No: ',(LRSNCODE,F,L9B),INTO=LINE
         BRASL R14,SPACE1
         STRING64 '  SP-Key     Alloc      Free    AAlloc    BAlloc',  X
               '     AFree     BFree',INTO=LINE
         BRASL R14,SPACE1
         L     R4,LRSNCODE             no of entries
         XC    WKCELL2,WKCELL2         clear
         XC    WKCELL3,WKCELL3         clear
*loop
VSMP91   DS    0H
         MVC   WKCELL1+4(1),1(R3)      save storage key
         NI    WKCELL1+4,X'F0'         only bit 0-3 (key)
         STRING64 (WKCELL1+4,1,X),INTO=(WKCELL1+5,1)
         STRING64 2X,(0(R3),FL1,R3B),'-',(WKCELL1+5,1,T),2X,           X
               (4(R3),F,R9B),1X,(8(R3),F,R9B),1X,                      X
               (12(R3),F,R9B),1X,(16(R3),F,R9B),1X,(20(R3),F,R9B),     X
               1X,(24(R3),F,R9B),INTO=LINE
         BRASL R14,SPACE1
         L     R2,12(,R3)               Alloc above
         L     R5,WKCELL2
         AR    R2,R5
         ST    R2,WKCELL2
         L     R2,16(,R3)               Alloc below
         L     R5,WKCELL2+4
         AR    R2,R5
         ST    R2,WKCELL2+4
         L     R2,20(,R3)               Free above
         L     R5,WKCELL3
         AR    R2,R5
         ST    R2,WKCELL3
         L     R2,24(,R3)               Free below
         L     R5,WKCELL3+4
         AR    R2,R5
         ST    R2,WKCELL3+4
         LA    R3,32(,R3)              next entry
         JCT   R4,VSMP91
*endloop
         STRING64 '  Total ',21X,                                      X
               (WKCELL2,F,R9B),1X,(WKCELL2+4,F,R9B),1X,                X
               (WKCELL3,F,R9B),1X,(WKCELL3+4,F,R9B),INTO=LINE
VSMP99   BRASL R14,SPACE2
         LM    R14,R9,WORK256+32       rest. register but not R10-R13
         BR    R14                     GOBACK
*---------------------------------------------------------------------*
*                                                                     *
*        Cell-pool display sub-routine                                *
*                                                                     *
*---------------------------------------------------------------------*
CELLP100 BEGIN_PROC SAVE=NO                                     RS0402
         LTR   R4,R4                   PPD=0?                      $RS
         BZR   R7                      yes, goback                 $RS
         USING PPD,R4                                              $RS
*loop                                                              $RS
CELLP111 EQU   *                                                   $RS
*        #SNAP ADDR=(R4),LENGTH=48     Debug
         ICM   R5,B'1111',PPDCPID      point to Cellpool-ID        $RS
         JZ    CELLP118                zero, ignore                $RS
         USING PPDIDENT,R5                                         $RS
         STRING64 '*Fetch protected*',INTO=WORK44
         VALIDATE PPDIDENT,ERRET=CELLP113 PPDIDENT maybe protected
CELLP112 EQU   *                                                   $RS
         BRASL R14,EXECK0SS            execute MVC in key-zero     $RS
         MVC   WORK44(L'PPDIDEYE),PPDIDEYE maybe protected
CELLP113 EQU   *                                                   $RS
         TR    WORK44,TRTDOTS      convert non-printable to dots RS1199
         LA    R0,1
         AL    R0,PPDINDX              Extents = PPDINDX+1         @RS
         ST    R0,TENWORDS
         STRING64 2X,(PPDCPID,4,X),    CP ID                           X
               1X,(TENWORDS,F,R3B),    Extents                         X
               1X,(PPDCSIZE,F,R7B),    size                            X
               1X,(PPDPCNT,F,R7B),        count                        X
               1X,(PPDSCNT,F,R7B),     secondary cell count            X
               1X,(PPDSP,FL1,R3B),     sub-pool                        X
               1X,(PPDKEY,FL1,R3B),    prot key                        X
               1X,(PPDTCB+1,3,X),      TCB                             X
               1X,(WORK44,L'PPDIDEYE), cell-pool ID                    X
               INTO=LINE                                           $RS
         BRASL R14,SPACE1              Single Space                $RS
CELLP118 EQU   *                                                   $RS
         ICM   R4,B'1111',PPDNEXT      another PPD?                $RS
         JNZ   CELLP111                yes, display it             $RS
*endloop                                                           $RS
         BR    R7                      goback
*---------------------------------------------------------------------*
*                                                                     *
*        LE Option display sub-routine                                *
*                                                                     *
*---------------------------------------------------------------------*
LESERV00 BEGIN_PROC SAVE=NO                                      RS0506
         AIF   (NOT D'CVTH7709).LESERV99 z/OS R6?                RS0506
         USING CEEOCB,R3
*        #SNAP ADDR=(R3),LENGTH=512
         CLC   =C'CEEOCB',CEEOCB_EYEC   Eyecatcher
         JNE   LESERV98
         CLC   CEEOCB_VER,=H'16'        Version 16 ? z/OS R5
         JE    LESERV01
         CLC   CEEOCB_VER,=H'17'        Version 17 ? z/OS R8     RS0806
         JE    LESERV01                                          RS0806
         CLC   CEEOCB_VER,=H'18'        Version 18 ? z/OS R9     RS0907
         JE    LESERV01                                          RS0907
         CLC   CEEOCB_VER,=H'19'        Version 19 ? z/OS R10    JH0508
         JE    LESERV01                                          JH0508
         CLC   CEEOCB_VER,=H'20'        Version 20 ? z/OS R11    RS0310
         JE    LESERV01                                          RS3010
         CLC   CEEOCB_VER,=H'21'        Version 21 ? z/OS R12    RS0511
         JE    LESERV01                                          RS0511
         CLC   CEEOCB_VER,=H'22'        Version 22 ? z/OS R13    JH1303
         JE    LESERV01                                          JH1303
         CLC   CEEOCB_VER,=H'23'        Version 23 ? z/OS V2R1   JH1303
         JE    LESERV01                                          JH1303
         J     LESERV97                 version not supported
LESERV01 DS    0H
         LR    R4,R3
         CLC   OPTION_ABPE_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_ABPERCX               no leave             RS0407
         A     R4,OPTION_ABPE_SUB
         USING SUBOPT_ABPE,R4
         STRING64 '      ABPERC(NONE)',INTO=LINE
         TM    SUBOPT_ABPE_US,X'80'     None
         JO    LESERV_ABPERC9
         STRING64 '      ABPERC(',INTO=LINE
         TM    SUBOPT_ABPE_US,X'40'     User abendcode
         JNO   LESERV_ABPERC1
         STRING64 (LINE,,T),'U',(SUBOPT_ABPE_CODE,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         J     LESERV_ABPERC9
LESERV_ABPERC1 DS  0H
         TM    SUBOPT_ABPE_US,X'20'     System abendcode
         JNO   LESERV_ABPERC2
         STRING64 (LINE,,T),'S',(SUBOPT_ABPE_CODE,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         J     LESERV_ABPERC9
LESERV_ABPERC2 DS  0H                   Other Abcode
         STRING64 (LINE,,T),SUBOPT_ABPE_ABC,INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
LESERV_ABPERC9 DS  0H
         BRASL R14,SPACE1
LESERV_ABPERCX DS  0H                                            RS0407
         DROP  R4
         CLC   OPTION_ABTE_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_ABTERMENCX            no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_ABTE_SUB
         USING SUBOPT_ABTE,R4
         STRING64 '      ABTERMENC(RETCODE)',INTO=LINE
         CLC   SUBOPT_ABTE_OPT,=F'1'
         JE    LESERV_ABTERMENC
         STRING64 '      ABTERMENC(ABEND)',INTO=LINE
LESERV_ABTERMENC  DS  0H
         BRASL R14,SPACE1
LESERV_ABTERMENCX DS 0H                                          RS0407
         DROP  R4
         CLC   OPTION_AIXB_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_AIXBX                 no leave             RS0407
         STRING64 '      AIXBLD',INTO=LINE
         TM    OPTION_AIXB_FLAG,X'80'
         JO    LESERV_05
         STRING64 '    NOAIXBLD',INTO=LINE
LESERV_05      DS  0H
         BRASL R14,SPACE1
LESERV_AIXBX   DS 0H                                             RS0407
         CLC   OPTION_ALL3_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_ALL3X                 no leave             RS0407
         STRING64 '      ALL31(ON)',INTO=LINE
         TM    OPTION_ALL3_FLAG,X'80'
         JO    LESERV_ALL31
         STRING64 '      ALL31(OFF)',INTO=LINE
LESERV_ALL31   DS  0H
         BRASL R14,SPACE1
LESERV_ALL3X   DS 0H                                             RS0407
         CLC   OPTION_ANYH_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_ANYHX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_ANYH_SUB
         USING SUBOPT_ANYH,R4
         STRING64 '      ANYHEAP(',INTO=LINE
         STRING64 (LINE,,T),(SUBOPT_ANYH_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_ANYH_INC,F,L9B),INTO=LINE
         TM    SUBOPT_ANYH_ALLOC,X'80'  Below
         JO    LESERV_ANYHEAP1
         STRING64 (LINE,,T),',ANYWHERE',INTO=LINE
         J     LESERV_ANYHEAP2
LESERV_ANYHEAP1        DS  0H
         STRING64 (LINE,,T),',BELOW',INTO=LINE
LESERV_ANYHEAP2        DS  0H
         TM    SUBOPT_ANYH_ALLOC,X'40'  Free
         JO    LESERV_ANYHEAP3
         STRING64 (LINE,,T),',KEEP)',INTO=LINE
         J     LESERV_ANYHEAP4
LESERV_ANYHEAP3        DS  0H
         STRING64 (LINE,,T),',FREE)',INTO=LINE
LESERV_ANYHEAP4        DS  0H
         BRASL R14,SPACE1
LESERV_ANYHX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_AUTO_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_AUTOX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_AUTO_SUB
         USING SUBOPT_AUTO,R4
         STRING64 '      AUTOTASK(',SUBOPT_AUTO_LMOD,',',              X
               (SUBOPT_AUTO_NO,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         TM    OPTION_AUTO_FLAG,X'80'
         JO    LESERV_AUTOTASK
         STRING64 '    NOAUTOTASK',INTO=LINE
LESERV_AUTOTASK DS  0H
         BRASL R14,SPACE1
LESERV_AUTOX   DS 0H                                             RS0407
         CLC   OPTION_BELH_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_BELHX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_BELH_SUB
         USING SUBOPT_BELH,R4
         STRING64 '      BELOWHEAP(',INTO=LINE
         STRING64 (LINE,,T),(SUBOPT_BELH_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_BELH_INC,F,L9B),INTO=LINE
         TM    SUBOPT_BELH_ALLOC,X'40'  Free?
         JO    LESERV_BELOWHEAP1
         STRING64 (LINE,,T),')',INTO=LINE
         J     LESERV_BELOWHEAP
LESERV_BELOWHEAP1   DS  0H
         STRING64 (LINE,,T),',FREE)',INTO=LINE
LESERV_BELOWHEAP    DS  0H
         BRASL R14,SPACE1
LESERV_BELHX   DS 0H                                             RS0407
         CLC   OPTION_CBLO_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_CBLOX                 no leave             RS0407
         DROP  R4
         STRING64 '      CBLOPTS(ON)',INTO=LINE
         TM    OPTION_CBLO_FLAG,X'80'
         JO    LESERV_CBLOPTS
         STRING64 '      CBLOPTS(OFF)',INTO=LINE
LESERV_CBLOPTS DS  0H
         BRASL R14,SPACE1
LESERV_CBLOX   DS 0H                                             RS0407
         CLC   OPTION_CBLP_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_CBLPX                 no leave             RS0407
         STRING64 '      CBLPSHPOP(ON)',INTO=LINE
         TM    OPTION_CBLP_FLAG,X'80'
         JO    LESERV_CBLPSHPOP
         STRING64 '      CBLPSHPOP(OFF)',INTO=LINE
LESERV_CBLPSHPOP DS  0H
         BRASL R14,SPACE1
LESERV_CBLPX   DS  0H                                            RS0407
         CLC   OPTION_CBLQ_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_CBLQX                 no leave             RS0407
         STRING64 '      CBLQDA(ON)',INTO=LINE
         TM    OPTION_CBLQ_FLAG,X'80'
         JO    LESERV_CBLQDA
         STRING64 '      CBLQDA(OFF)',INTO=LINE
LESERV_CBLQDA    DS  0H
         BRASL R14,SPACE1
LESERV_CBLQX   DS 0H                                             RS0407
         CLC   CEEOCB_VER,=H'18'        Version 18 ? z/OS R9     RS1007
         JL    LESERV_CEEDMPX                                    RS1007
         CLC   OPTION_CEEDMP_WHSET,=H'800'  CEEPRMxx specified ? RS1007
         JNH   LESERV_CEEDMPX               no leave             RS1007
         LR    R4,R3                                             RS1007
         A     R4,OPTION_CEEDMP_SUB                              RS1007
         USING SUBOPT_CEEDMP,R4                                  RS1007
         STRING64 '      CEEDUMP(',(SUBOPT_CEEDMP_PAGL,F,L3B),   RS1007X
               INTO=LINE                                         RS1007
         STRING64 (LINE,,T),',SYSOUT=(',SUBOPT_CEEDMP_SYSC,      RS1007X
               ',',SUBOPT_CEEDMP_SYSO,'),',INTO=LINE
         TM    SUBOPT_CEEDMP_FREE,X'00'  Free=end of close       RS1007
         JNZ   LESERV_CEEDMP2                                    RS1007
         STRING64 (LINE,,T),'FREE=END,',INTO=LINE                RS1007
         J     LESERV_CEEDMP3                                    RS1007
LESERV_CEEDMP2      DS  0H                                       RS1007
         STRING64 (LINE,,T),'FREE=CLOSE',INTO=LINE               RS1007
LESERV_CEEDMP3      DS  0H                                       RS1007
         TM    SUBOPT_CEEDMP_SPIN,X'00'  SPIN=Unalloc or NO      RS1007
         JNZ   LESERV_CEEDMP4                                    RS1007
         STRING64 (LINE,,T),'SPIN=UNALLOC)',INTO=LINE            RS1007
         J     LESERV_CEEDMP5                                    RS1007
LESERV_CEEDMP4      DS  0H                                       RS1007
         STRING64 (LINE,,T),'SPIN=NO)',INTO=LINE                 RS1007
LESERV_CEEDMP5      DS  0H                                       RS1007
         BRASL R14,SPACE1                                        RS1007
LESERV_CEEDMPX DS 0H                                             RS1007
         CLC   OPTION_CHEC_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_CHECX                 no leave             RS0407
         STRING64 '      CHECK(ON)',INTO=LINE
         TM    OPTION_CHEC_FLAG,X'80'
         JO    LESERV_CHECK
         STRING64 '      CHECK(OFF)',INTO=LINE
LESERV_CHECK   DS  0H
         BRASL R14,SPACE1
LESERV_CHECX   DS 0H                                             RS0407
         CLC   OPTION_COUN_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_COUNX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_COUN_SUB
         USING SUBOPT_COUN,R4
         STRING64 '      COUNTRY(',SUBOPT_COUN_ID,')',INTO=LINE
         BRASL R14,SPACE1
LESERV_COUNX   DS 0H                                             RS0407
         CLC   OPTION_DEBU_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_DEBUX                 no leave             RS0407
         STRING64 '      DEBUG',INTO=LINE
         TM    OPTION_DEBU_FLAG,X'80'
         JO    LESERV_DEBUG
         STRING64 '    NODEBUG',INTO=LINE
LESERV_DEBUG     DS  0H
         BRASL R14,SPACE1
LESERV_DEBUX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_DEPT_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_DEPTX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_DEPT_SUB
         USING SUBOPT_DEPT,R4
         STRING64 '      DEPTHCONDLMT(',(SUBOPT_DEPT_COUNT,F,L9B),     X
               INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_DEPTX   DS 0H                                             RS0407
         DROP  R4
         CLC   CEEOCB_VER,=H'17'        Version 17 ? z/OS R8     RS0806
         JL    LESERV_NODYNDUMP                                  RS0806
         CLC   OPTION_DYNDMP_WHSET,=H'800'  CEEPRMxx specified ? RS0407
         JNH   LESERV_DYNDMPX               no leave             RS0407
         LR    R4,R3                                             RS0806
         A     R4,OPTION_DYNDMP_SUB                              RS0806
         USING SUBOPT_DYNDMP,R4                                  RS0806
         LR    R6,R3                                             RS0806
         A     R6,SUBOPT_DYNDMP_HLQP                             RS0806
         USING SUBOPT_DYNDMP_HLQO,R6                             RS0806
         LH    R0,SUBOPT_DYNDMP_HLQL  length                     RS0806
         STRING64 '      DYNDUMP("',(SUBOPT_DYNDMP_HLQS,(R0)),   RS0806X
               INTO=LINE                                         RS0806
         TM    SUBOPT_DYNDMP_FLG1,X'80'  Dynamic                 RS0806
         JZ    LESERV_DYNDMP1                                    RS0806
         STRING64 (LINE,,T),',DYNAMIC',INTO=LINE                 RS0806
         J     LESERV_DYNDMP4                                    RS0806
LESERV_DYNDMP1      DS  0H                                       RS0806
         TM    SUBOPT_DYNDMP_FLG1,X'40'  Nodynamic               RS0806
         JZ    LESERV_DYNDMP2                                    RS0806
         STRING64 (LINE,,T),',NODYNAMIC',INTO=LINE               RS0806
         J     LESERV_DYNDMP4                                    RS0806
LESERV_DYNDMP2      DS  0H                                       RS0806
         TM    SUBOPT_DYNDMP_FLG1,X'20'  Force                   RS0806
         JZ    LESERV_DYNDMP3                                    RS0806
         STRING64 (LINE,,T),',FORCE',INTO=LINE                   RS0806
         J     LESERV_DYNDMP4                                    RS0806
LESERV_DYNDMP3      DS  0H                                       RS0806
         TM    SUBOPT_DYNDMP_FLG1,X'10'  Both                    RS0806
         JZ    LESERV_DYNDMP4                                    RS0806
         STRING64 (LINE,,T),',BOTH',INTO=LINE                    RS0806
LESERV_DYNDMP4      DS  0H                                       RS0806
         TM    SUBOPT_DYNDMP_FLG2,X'80'  TDUMP                   RS0806
         JZ    LESERV_DYNDMP5                                    RS0806
         STRING64 (LINE,,T),',TDUMP")',INTO=LINE                 RS0806
         BRASL R14,SPACE1                                        RS0806
         J     LESERV_NODYNDUMP                                  RS0806
LESERV_DYNDMP5      DS  0H                                       RS0806
         TM    SUBOPT_DYNDMP_FLG2,X'40'  NOTDUMP                 RS0806
         JZ    LESERV_NODYNDUMP                                  RS0806
         STRING64 (LINE,,T),',NOTDUMP")',INTO=LINE               RS0806
         BRASL R14,SPACE1                                        RS0806
         DROP  R4,R5                                             RS0806
LESERV_NODYNDUMP  DS  0H                                         RS0806
LESERV_DYNDMPX DS 0H                                             RS0407
         CLC   OPTION_ENVA_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_ENVAX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_ENVA_SUB
         USING SUBOPT_ENVA,R4
         STRING64 '      ENVAR("")',INTO=LINE
         CLC   SUBOPT_ENVA_LEN,=H'0'
         JE    LESERV_ENVAR
         STRING64 '      ENVAR("',(SUBOPT_ENVA_STR,60),'")',INTO=LINE
LESERV_ENVAR     DS  0H
         BRASL R14,SPACE1
LESERV_ENVAX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_ERRC_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_ERRCX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_ERRC_SUB
         USING SUBOPT_ERRC,R4
         STRING64 '      ERRCOUNT(',(SUBOPT_ERRC_COUNT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_ERRCX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_ERRU_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_ERRUX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_ERRU_SUB
         USING SUBOPT_ERRU,R4
         STRING64 '      ERRUNIT(',(SUBOPT_ERRU_COUNT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_ERRUX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_FILE_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_FILEX                 no leave             RS0407
         STRING64 '      FILEHIST',INTO=LINE
         TM    OPTION_FILE_FLAG,X'80'
         JO    LESERV_FILEHIST
         STRING64 '    NOFILEHIST',INTO=LINE
LESERV_FILEHIST  DS  0H
         BRASL R14,SPACE1
LESERV_FILEX   DS 0H                                             RS0407
         CLC   OPTION_FILT_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_FILTX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_FILT_SUB
         USING SUBOPT_FILT,R4
         STRING64 '      FILETAG(AUTOCVT,',INTO=LINE
         TM    SUBOPT_FILT_FLG,X'80'
         JO    LESERV_FILETAG1
         STRING64 '      FILETAG(NOAUTOCVT,',INTO=LINE
LESERV_FILETAG1  DS  0H
         TM    SUBOPT_FILT_FLG,X'40'
         JO    LESERV_FILETAG2
         STRING64 (LINE,,T),'NOAUTOTAG)',INTO=LINE
         J     LESERV_FILETAG3
LESERV_FILETAG2  DS  0H
         STRING64 (LINE,,T),'AUTOTAG)',INTO=LINE
LESERV_FILETAG3  DS  0H
         BRASL R14,SPACE1
LESERV_FILTX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_FLOW_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_FLOWX                 no leave             RS0407
         STRING64 '      FLOW',INTO=LINE
         TM    OPTION_FLOW_FLAG,X'80'
         JO    LESERV_FLOW
         STRING64 '    NOFLOW',INTO=LINE
LESERV_FLOW      DS  0H
         BRASL R14,SPACE1
LESERV_FLOWX   DS 0H                                             RS0407
         CLC   OPTION_HEAP_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_HEAPX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_HEAP_SUB
         USING SUBOPT_HEAP,R4
         STRING64 '      HEAP(',INTO=LINE
         STRING64 (LINE,,T),(SUBOPT_HEAP_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEAP_INC,F,L9B),INTO=LINE
         TM    SUBOPT_HEAP_ALLOC,X'80'  Below
         JO    LESERV_HEAP1
         STRING64 (LINE,,T),',ANYWHERE',INTO=LINE
         J     LESERV_HEAP2
LESERV_HEAP1        DS  0H
         STRING64 (LINE,,T),',BELOW',INTO=LINE
LESERV_HEAP2        DS  0H
         TM    SUBOPT_HEAP_ALLOC,X'40'  Free
         JO    LESERV_HEAP3
         STRING64 (LINE,,T),',KEEP,',INTO=LINE
         J     LESERV_HEAP4
LESERV_HEAP3        DS  0H
         STRING64 (LINE,,T),',FREE,',INTO=LINE
LESERV_HEAP4        DS  0H
         STRING64 (LINE,,T),(SUBOPT_HEAP24_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEAP24_INC,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_HEAPX   DS 0H                                             RS0407
         DROP  R4
         CLI   WKCELL1,C'1'            64bit LE-Option           RS0606
         JNE   LESERV_NOHEAP64           no leave                RS0606
         CLC   OPTION_HE64_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_HE64X                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_HE64_SUB
         USING SUBOPT_HE64,R4
         STRING64 '      HEAP64(',INTO=LINE
         STRING64 (LINE,,T),(SUBOPT_HE64_INIT,FD,L16B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HE64_INC,FD,L16B),INTO=LINE
         TM    SUBOPT_HE64_ALLOC,X'40'  Free
         JO    LESERV_HEAP64_1
         STRING64 (LINE,,T),',KEEP,',INTO=LINE
         J     LESERV_HEAP64_2
LESERV_HEAP64_1     DS  0H
         STRING64 (LINE,,T),',FREE,',INTO=LINE
LESERV_HEAP64_2     DS  0H
         STRING64 (LINE,,T),(SUBOPT_HE6431_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HE6431_INC,F,L9B),INTO=LINE
         TM    SUBOPT_HE6431_ALLOC,X'40'  Free
         JO    LESERV_HEAP64_3
         STRING64 (LINE,,T),',KEEP,',INTO=LINE
         J     LESERV_HEAP64_4
LESERV_HEAP64_3     DS  0H
         STRING64 (LINE,,T),',FREE,',INTO=LINE
LESERV_HEAP64_4     DS  0H
         STRING64 (LINE,,T),(SUBOPT_HE6424_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HE6424_INC,F,L9B),INTO=LINE
         TM    SUBOPT_HE6424_ALLOC,X'40'  Free
         JO    LESERV_HEAP64_5
         STRING64 (LINE,,T),',KEEP)',INTO=LINE
         J     LESERV_HEAP64_6
LESERV_HEAP64_5     DS  0H
         STRING64 (LINE,,T),',FREE)',INTO=LINE
LESERV_HEAP64_6     DS  0H
         BRASL R14,SPACE1
LESERV_HE64X   DS 0H                                             RS0407
         DROP  R4
LESERV_NOHEAP64     DS  0H
         CLC   OPTION_HCHK_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_HCHKX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_HCHK_SUB
         USING SUBOPT_HCHK,R4
         STRING64 '      HEAPCHK(ON,',INTO=LINE
         TM    OPTION_HCHK_FLAG,X'80'
         JO    LESERV_HEAPCHECK
         STRING64 '      HEAPCHK(OFF,',INTO=LINE
LESERV_HEAPCHECK  DS 0H
         STRING64 (LINE,,T),(SUBOPT_HCHK_FREQ,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HCHK_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HCHK_CLVL,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HCHK_PLVL,F,L9B),INTO=LINE
         CLC   CEEOCB_VER,=H'20'        Version 20 ? z/OS R11    RS0310
         JL    LESERV_HCHKW                                      RS0310
         STRING64 (LINE,,T),',',(SUBOPT_HCHK_PENT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HCHK_PNUM,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HCHK_PENT31,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HCHK_PNUM31,F,L9B),INTO=LINE
LESERV_HCHKW   DS 0H                                             RS0310
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_HCHKX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_HEPP_WHSET,=H'800'  CEEPRMxx specified ?   RS0407
         JNH   LESERV_HEPPX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_HEPP_SUB
         USING SUBOPT_HEPP,R4
         STRING64 '      HEAPPOOLS(ON,',INTO=LINE
         TM    OPTION_HEPP_FLAG,X'80'
         JO    LESERV_HEAPPOOLS
         STRING64 '      HEAPPOOLS(OFF,',INTO=LINE
LESERV_HEAPPOOLS  DS 0H
         STRING64 (LINE,,T),(SUBOPT_HEPP_CP1S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP1P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP2S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP2P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP3S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP3P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP4S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP4P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP5S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP5P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP6S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP6P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP7S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP7P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP8S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP8P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP9S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP9P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP10S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP10P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP11S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP11P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP12S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP12P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_HEPPX   DS 0H                                             RS0407
         DROP  R4
         CLI   WKCELL1,C'1'            64bit LE-Option           RS0606
         JNE   LESERV_NOHEAPP64          no leave                RS0606
         CLC   OPTION_HEPP64_WHSET,=H'800'  CEEPRMxx specified ? RS0407
         JNH   LESERV_HEPP64X               no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_HEPP64_SUB
         USING SUBOPT_HEPP64,R4
         STRING64 '      HEAPPOOLS64(ON,',INTO=LINE
         TM    OPTION_HEPP64_FLAG,X'80'
         JO    LESERV_HEAPP64
         STRING64 '      HEAPPOOLS64(OFF,',INTO=LINE
LESERV_HEAPP64    DS 0H
         STRING64 (LINE,,T),(SUBOPT_HEPP64_CP1S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP1P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP2S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP2P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP3S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP3P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP4S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP4P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP5S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP5P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP6S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP6P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP7S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP7P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP8S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP8P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP9S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP9P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP10S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP10P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP11S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP11P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP12S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP64_CP12P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_HEPP64X DS 0H                                             RS0407
         DROP  R4
LESERV_NOHEAPP64  DS 0H
         CLC   OPTION_INFO_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_INFOX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_INFO_SUB
         USING SUBOPT_INFO,R4
         STRING64 '      INFOMSGFILTER(ON,',SUBOPT_INFO_ID1,INTO=LINE
         STRING64 (LINE,,T),',',SUBOPT_INFO_ID2,INTO=LINE
         STRING64 (LINE,,T),',',SUBOPT_INFO_ID3,INTO=LINE
         STRING64 (LINE,,T),',',SUBOPT_INFO_ID4,INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         TM    OPTION_INFO_FLAG,X'80'
         JO    LESERV_INFOMSGFILTER
         STRING64 '      INFOMSGFILTER(OFF,',SUBOPT_INFO_ID1,          X
               INTO=LINE
         STRING64 (LINE,,T),',',SUBOPT_INFO_ID2,INTO=LINE
         STRING64 (LINE,,T),',',SUBOPT_INFO_ID3,INTO=LINE
         STRING64 (LINE,,T),',',SUBOPT_INFO_ID4,INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
LESERV_INFOMSGFILTER DS 0H
         BRASL R14,SPACE1
LESERV_INFOX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_INQP_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_INQPX                 no leave             RS0407
         STRING64 '      INQPCOPN',INTO=LINE
         TM    OPTION_INQP_FLAG,X'80'
         JO    LESERV_INQPCOPN
         STRING64 '    NOINQPCOPN',INTO=LINE
LESERV_INQPCOPN  DS  0H
         BRASL R14,SPACE1
LESERV_INQPX   DS 0H                                             RS0407
         CLC   OPTION_INTE_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_INTEX                 no leave             RS0407
         STRING64 '      INTERRUPT(ON)',INTO=LINE
         TM    OPTION_INTE_FLAG,X'80'
         JO    LESERV_INTERRUPT
         STRING64 '      INTERRUPT(OFF)',INTO=LINE
LESERV_INTERRUPT DS  0H
         BRASL R14,SPACE1
LESERV_INTEX   DS 0H                                             RS0407
         CLI   WKCELL1,C'1'            64bit LE-Option           RS0606
         JNE   LESERV_NOIOHEAP64         no leave                RS0606
         CLC   OPTION_IOHE64_WHSET,=H'800'  CEEPRMxx specified ? RS0407
         JNH   LESERV_IOHE64X               no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_IOHE64_SUB
         USING SUBOPT_IOHE64,R4
         STRING64 '      IOHEAP64(',INTO=LINE
         STRING64 (LINE,,T),(SUBOPT_IOHE64_INIT,FD,L16B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_IOHE64_INC,FD,L16B),INTO=LINE
         TM    SUBOPT_IOHE64_ALLOC,X'40'  Free
         JO    LESERV_IOHEAP64_1
         STRING64 (LINE,,T),',KEEP,',INTO=LINE
         J     LESERV_IOHEAP64_2
LESERV_IOHEAP64_1     DS  0H
         STRING64 (LINE,,T),',FREE,',INTO=LINE
LESERV_IOHEAP64_2     DS  0H
         STRING64 (LINE,,T),(SUBOPT_IOHE6431_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_IOHE6431_INC,F,L9B),INTO=LINE
         TM    SUBOPT_IOHE6431_ALLOC,X'40'  Free
         JO    LESERV_IOHEAP64_3
         STRING64 (LINE,,T),',KEEP,',INTO=LINE
         J     LESERV_IOHEAP64_4
LESERV_IOHEAP64_3     DS  0H
         STRING64 (LINE,,T),',FREE,',INTO=LINE
LESERV_IOHEAP64_4     DS  0H
         STRING64 (LINE,,T),(SUBOPT_IOHE6424_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_IOHE6424_INC,F,L9B),INTO=LINE
         TM    SUBOPT_IOHE6424_ALLOC,X'40'  Free
         JO    LESERV_IOHEAP64_5
         STRING64 (LINE,,T),',KEEP)',INTO=LINE
         J     LESERV_IOHEAP64_6
LESERV_IOHEAP64_5     DS  0H
         STRING64 (LINE,,T),',FREE)',INTO=LINE
LESERV_IOHEAP64_6     DS  0H
         BRASL R14,SPACE1
LESERV_IOHE64X DS 0H                                             RS0407
         DROP  R4
LESERV_NOIOHEAP64     DS  0H
         CLI   WKCELL1,C'1'            64bit LE-Option           RS0606
         JNE   LESERV_NOLIBHEAP64        no leave                RS0606
         CLC   OPTION_LIHE64_WHSET,=H'800'  CEEPRMxx specified ? RS0407
         JNH   LESERV_LIHE64X               no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_LIHE64_SUB
         USING SUBOPT_LIHE64,R4
         STRING64 '      LIBHEAP64(',INTO=LINE
         STRING64 (LINE,,T),(SUBOPT_LIHE64_INIT,FD,L16B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_LIHE64_INC,FD,L16B),INTO=LINE
         TM    SUBOPT_LIHE64_ALLOC,X'40'  Free
         JO    LESERV_LIBHEAP64_1
         STRING64 (LINE,,T),',KEEP,',INTO=LINE
         J     LESERV_LIBHEAP64_2
LESERV_LIBHEAP64_1     DS  0H
         STRING64 (LINE,,T),',FREE,',INTO=LINE
LESERV_LIBHEAP64_2     DS  0H
         STRING64 (LINE,,T),(SUBOPT_LIHE6431_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_LIHE6431_INC,F,L9B),INTO=LINE
         TM    SUBOPT_LIHE6431_ALLOC,X'40'  Free
         JO    LESERV_LIBHEAP64_3
         STRING64 (LINE,,T),',KEEP,',INTO=LINE
         J     LESERV_LIBHEAP64_4
LESERV_LIBHEAP64_3     DS  0H
         STRING64 (LINE,,T),',FREE,',INTO=LINE
LESERV_LIBHEAP64_4     DS  0H
         STRING64 (LINE,,T),(SUBOPT_LIHE6424_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_LIHE6424_INC,F,L9B),INTO=LINE
         TM    SUBOPT_LIHE6424_ALLOC,X'40'  Free
         JO    LESERV_LIBHEAP64_5
         STRING64 (LINE,,T),',KEEP)',INTO=LINE
         J     LESERV_LIBHEAP64_6
LESERV_LIBHEAP64_5     DS  0H
         STRING64 (LINE,,T),',FREE)',INTO=LINE
LESERV_LIBHEAP64_6     DS  0H
         BRASL R14,SPACE1
LESERV_LIHE64X DS 0H                                             RS0407
         DROP  R4
LESERV_NOLIBHEAP64     DS  0H
         CLC   OPTION_LIBS_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_LIBSX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_LIBS_SUB
         USING SUBOPT_LIBS,R4
         STRING64 '      LIBSTACK(',(SUBOPT_LIBS_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_LIBS_INC,F,L9B),INTO=LINE
         TM    SUBOPT_LIBS_ALLOC,X'40'  Free?
         JO    LESERV_LIBSTACK1
         STRING64 (LINE,,T),',KEEP)',INTO=LINE
         J     LESERV_LIBSTACK2
LESERV_LIBSTACK1    DS  0H
         STRING64 (LINE,,T),',FREE)',INTO=LINE
LESERV_LIBSTACK2    DS  0H
         BRASL R14,SPACE1
LESERV_LIBSX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_MSGF_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_MSGFX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_MSGF_SUB
         USING SUBOPT_MSGF,R4
         STRING64 '      MSGFILE(',SUBOPT_MSGF_DD,INTO=LINE
         STRING64 (LINE,,T),',',SUBOPT_MSGF_RFM,INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_MSGF_RECL,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_MSGF_BLKS,F,L9B),INTO=LINE
         CLC   SUBOPT_MSGF_ENQ,BLANKS
         JE    LESERV_MSGFILE1
         STRING64 (LINE,,T),',ENQ)',INTO=LINE
         J     LESERV_MSGFILE2
LESERV_MSGFILE1  DS  0H
         STRING64 (LINE,,T),',NOENQ)',INTO=LINE
LESERV_MSGFILE2  DS  0H
         BRASL R14,SPACE1
LESERV_MSGFX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_MSGQ_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_MSGQX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_MSGQ_SUB
         USING SUBOPT_MSGQ,R4
         STRING64 '      MSGQ(',(SUBOPT_MSGQ_COUNT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_MSGQX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_NATL_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_NATLX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_NATL_SUB
         USING SUBOPT_NATL,R4
         STRING64 '      NATLANG(',SUBOPT_NATL_ID,')',INTO=LINE
         BRASL R14,SPACE1
LESERV_NATLX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_OCST_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_OCSTX                 no leave             RS0407
         STRING64 '      OCSTATUS',INTO=LINE
         TM    OPTION_OCST_FLAG,X'80'
         JO    LESERV_OCSTATUS
         STRING64 '    NOOCSTATUS',INTO=LINE
LESERV_OCSTATUS  DS  0H
         BRASL R14,SPACE1
LESERV_OCSTX   DS 0H                                             RS0407
         CLC   CEEOCB_VER,=H'22'        Version 22 ? z/OS R13    RS0113
         JL    LESERV_PGFRSX                                     RS0113
         CLC   OPTION_PAGEFRSIZE_WHSET,=H'800'                   RS0113
         JNH   LESERV_PGFRSX                no leave             RS0113
         LR    R4,R3                                             RS0113
         A     R4,OPTION_PAGEFRSIZE_SUB                          RS0113
         USING SUBOPT_PAGEFRSIZE,R4                              RS0113
         MVC   WKCELL1(2),=C'4K'
         CLC   SUBOPT_PAGEFRSIZE_HEAP,=H'1'
         JE    LESERV_PGFRS1                no leave             RS0113
         MVC   WKCELL1(2),=C'1M'
LESERV_PGFRS1  DS 0H                                             RS0407
         MVC   WKCELL1+2(2),=C'4K'
         CLC   SUBOPT_PAGEFRSIZE_ANYHEAP,=H'1'
         JE    LESERV_PGFRS2                no leave             RS0113
         MVC   WKCELL1+2(2),=C'1M'
LESERV_PGFRS2  DS 0H                                             RS0407
         MVC   WKCELL1+4(2),=C'4K'
         CLC   SUBOPT_PAGEFRSIZE_STACK,=H'1'
         JE    LESERV_PGFRS3                no leave             RS0113
         MVC   WKCELL1+4(2),=C'1M'
LESERV_PGFRS3  DS 0H                                             RS0407
         STRING64 '      PAGEFRAMSIZE(',(WKCELL1,2),                   X
               ',',(WKCELL1+2,2),',',                                  X
               (WKCELL1+4,2),')',                                      X
               INTO=LINE                                         RS0113
         BRASL R14,SPACE1                                        RS0113
LESERV_PGFRSX  DS 0H                                             RS0407
         CLC   OPTION_PC_WHSET,=H'800'      CEEPRMxx specified ? RS0407
         JNH   LESERV_PCX                   no leave             RS0407
         STRING64 '      PC',INTO=LINE
         TM    OPTION_PC_FLAG,X'80'
         JO    LESERV_PC
         STRING64 '    NOPC',INTO=LINE
LESERV_PC        DS  0H
         BRASL R14,SPACE1
LESERV_PCX     DS 0H                                             RS0407
         CLC   OPTION_PLIT_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_PLITX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_PLIT_SUB
         USING SUBOPT_PLIT,R4
         STRING64 '      PLITASKCOUNT(',(SUBOPT_PLIT_COUNT,F,L9B),     X
               INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_PLITX   DS 0H                                             RS0407
         CLC   OPTION_POSI_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_POSIX                 no leave             RS0407
         DROP  R4
         STRING64 '      POSIX(ON)',INTO=LINE
         TM    OPTION_POSI_FLAG,X'80'
         JO    LESERV_POSIX1
         STRING64 '      POSIX(OFF)',INTO=LINE
LESERV_POSIX1    DS  0H
         BRASL R14,SPACE1
LESERV_POSIX   DS 0H                                             RS0407
         CLC   OPTION_PROF_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_PROFX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_PROF_SUB
         USING SUBOPT_PROF,R4
         STRING64 '      PROFILE(ON',INTO=LINE
         TM    OPTION_PROF_FLAG,X'80'
         JO    LESERV_PROFILE
         STRING64 '      PROFILE(OFF',INTO=LINE
LESERV_PROFILE   DS  0H
         CLC   SUBOPT_PROF_STRL,=H'0'
         JE    LESERV_PROFILE1
         STRING64 (LINE,,T),',"',(SUBOPT_PROF_STR,60),'")',INTO=LINE
         J     LESERV_PROFILE9
LESERV_PROFILE1  DS  0H
         STRING64 (LINE,,T),',"")',INTO=LINE
LESERV_PROFILE9  DS  0H
         BRASL R14,SPACE1
LESERV_PROFX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_PRTU_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_PRTUX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_PRTU_SUB
         USING SUBOPT_PRTU,R4
         STRING64 '      PRTUNIT(',(SUBOPT_PRTU_COUNT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_PRTUX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_PUNU_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_PUNUX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_PUNU_SUB
         USING SUBOPT_PUNU,R4
         STRING64 '      PUNUNIT(',(SUBOPT_PUNU_COUNT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_PUNUX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_RDRU_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_RDRUX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_RDRU_SUB
         USING SUBOPT_RDRU,R4
         STRING64 '      RDRUNIT(',(SUBOPT_RDRU_COUNT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_RDRUX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_RECP_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_RECPX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_RECP_SUB
         USING SUBOPT_RECP,R4
         STRING64 '      RECPAD(OFF)',INTO=LINE
         CLC   SUBOPT_RECP_FLG,=F'4'
         JE    LESERV_RECPAD
         STRING64 '      RECPAD(ON)',INTO=LINE
         CLC   SUBOPT_RECP_FLG,=F'2'
         JE    LESERV_RECPAD
         STRING64 '      RECPAD(VAR)',INTO=LINE
LESERV_RECPAD    DS  0H
         BRASL R14,SPACE1
LESERV_RECPX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_RPTO_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_RPTOX                 no leave             RS0407
         STRING64 '      RPTOPTS(ON)',INTO=LINE
         TM    OPTION_RPTO_FLAG,X'80'
         JO    LESERV_RPTOPTS
         STRING64 '      RPTOPTS(OFF)',INTO=LINE
LESERV_RPTOPTS   DS  0H
         BRASL R14,SPACE1
LESERV_RPTOX   DS 0H                                             RS0407
         CLC   OPTION_RPTS_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_RPTSX                 no leave             RS0407
         STRING64 '      RPTSTG(ON)',INTO=LINE
         TM    OPTION_RPTS_FLAG,X'80'
         JO    LESERV_RPTSTG
         STRING64 '      RPTSTG(OFF)',INTO=LINE
LESERV_RPTSTG    DS  0H
         BRASL R14,SPACE1
LESERV_RPTSX   DS 0H                                             RS0407
         CLC   OPTION_RTER_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_RTERX                 no leave             RS0407
         STRING64 '      RTEREUS',INTO=LINE
         TM    OPTION_RTER_FLAG,X'80'
         JO    LESERV_RTEREUS
         STRING64 '    NORTEREUS',INTO=LINE
LESERV_RTEREUS   DS  0H
         BRASL R14,SPACE1
LESERV_RTERX   DS 0H                                             RS0407
         CLC   OPTION_SIMV_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_SIMVX                 no leave             RS0407
         STRING64 '      SIMVRD',INTO=LINE
         TM    OPTION_SIMV_FLAG,X'80'
         JO    LESERV_SIMVRD
         STRING64 '    NOSIMVRD',INTO=LINE
LESERV_SIMVRD    DS  0H
         BRASL R14,SPACE1
LESERV_SIMVX   DS 0H                                             RS0407
         CLC   OPTION_STAC_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_STACX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_STAC_SUB
         USING SUBOPT_STAC,R4
         STRING64 '      STACK(',INTO=LINE
         STRING64 (LINE,,T),(SUBOPT_STAC_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_STAC_INC,F,L9B),INTO=LINE
         TM    SUBOPT_STAC_ALLOC,X'80'  Below
         JO    LESERV_STACK1
         STRING64 (LINE,,T),',ANYWHERE',INTO=LINE
         J     LESERV_STACK2
LESERV_STACK1       DS  0H
         STRING64 (LINE,,T),',BELOW',INTO=LINE
LESERV_STACK2       DS  0H
         TM    SUBOPT_STAC_ALLOC,X'40'  Free
         JO    LESERV_STACK3
         STRING64 (LINE,,T),',KEEP,',INTO=LINE
         J     LESERV_STACK4
LESERV_STACK3       DS  0H
         STRING64 (LINE,,T),',FREE,',INTO=LINE
LESERV_STACK4       DS  0H
         STRING64 (LINE,,T),(SUBOPT_STAC_DINIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_STAC_DINC,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_STACX   DS 0H                                             RS0407
         CLI   WKCELL1,C'1'            64bit LE-Option           RS0606
         JNE   LESERV_NOSTACK64          no leave                RS0606
         CLC   OPTION_STAC64_WHSET,=H'800'  CEEPRMxx specified ? RS0407
         JNH   LESERV_STAC64X               no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_STAC64_SUB
         USING SUBOPT_STAC64,R4
         STRING64 '      STACK64(',INTO=LINE
         STRING64 (LINE,,T),(SUBOPT_STAC64_INIT,FD,L9B),INTO=LINE
         STRING64 (LINE,,T),'M,',(SUBOPT_STAC64_INC,FD,L9B),INTO=LINE
         STRING64 (LINE,,T),'M,',(SUBOPT_STAC64_MAX,FD,L9B),INTO=LINE
         STRING64 (LINE,,T),'M)',INTO=LINE
         BRASL R14,SPACE1
LESERV_STAC64X DS 0H                                             RS0407
         DROP  R4
LESERV_NOSTACK64    DS  0H
         CLC   OPTION_STOR_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_STORX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_STOR_SUB
         USING SUBOPT_STOR,R4
         STRING64 '      STORAGE(',INTO=LINE
         TM    SUBOPT_STOR_CSF,X'80'                             RS0407
         JO    LESERV_STORAGE1                                   RS0407
         STRING64 (LINE,,T),'NONE,',INTO=LINE
         JNE   LESERV_STORAGE2
LESERV_STORAGE1        DS  0H
         STRING64 (LINE,,T),(SUBOPT_STOR_AHSC,1,X),',',INTO=LINE
LESERV_STORAGE2        DS  0H
         TM    SUBOPT_STOR_CSF,X'40'                             RS0407
         JO    LESERV_STORAGE3                                   RS0407
         STRING64 (LINE,,T),'NONE,',INTO=LINE
         JNE   LESERV_STORAGE4
LESERV_STORAGE3        DS  0H
         STRING64 (LINE,,T),(SUBOPT_STOR_FHSC,1,X),',',INTO=LINE
LESERV_STORAGE4        DS  0H
         TM    SUBOPT_STOR_CSF,X'20'                             RS0407
         JO    LESERV_STORAGE5                                   RS0407
         STRING64 (LINE,,T),'NONE,',INTO=LINE
         JNE   LESERV_STORAGE6
LESERV_STORAGE5        DS  0H
         STRING64 (LINE,,T),(SUBOPT_STOR_ADSC,1,X),',',INTO=LINE
LESERV_STORAGE6        DS  0H
         STRING64 (LINE,,T),(SUBOPT_STOR_SOSSZ,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_STORX   DS 0H                                             RS0407
         CLC   OPTION_TERM_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_TERMX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_TERM_SUB
         USING SUBOPT_TERM,R4
         STRING64 '      TERMTHDACT(QUIET,',INTO=LINE            RS0307
         CLC   SUBOPT_TERM_FLG,=F'8'
         JE    LESERV_TERMTHDACT1
         STRING64 '      TERMTHDACT(MSG,',INTO=LINE              RS0307
         CLC   SUBOPT_TERM_FLG,=F'4'
         JE    LESERV_TERMTHDACT1
         STRING64 '      TERMTHDACT(TRACE,',INTO=LINE            RS0307
         CLC   SUBOPT_TERM_FLG,=F'2'
         JE    LESERV_TERMTHDACT1
         STRING64 '      TERMTHDACT(DUMP,',INTO=LINE
LESERV_TERMTHDACT1     DS  0H                                    RS0307
         TM    SUBOPT_TERM_CESE,X'80'     CESE                   RS0307
         JNO   LESERV_TERMTHDACT2                                RS0307
         STRING64 (LINE,,T),'CESE',INTO=LINE                     RS0307
         J     LESERV_TERMTHDACT3                                RS0307
LESERV_TERMTHDACT2     DS  0H                                    RS0307
         TM    SUBOPT_TERM_CESE,X'40'     CICSDDS                RS0307
         JNO   LESERV_TERMTHDACT3                                RS0307
         STRING64 (LINE,,T),'CICSDDS',INTO=LINE                  RS0307
LESERV_TERMTHDACT3     DS  0H                                    RS0307
         STRING64 (LINE,,T),',',(SUBOPT_TERM_STOR,H,L3B),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_TERMX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_TEST_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_TESTX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_TEST_SUB
         USING SUBOPT_TEST,R4
         STRING64 '      TEST(',INTO=LINE
         TM    OPTION_TEST_FLAG,X'80'
         JO    LESERV_TEST
         STRING64 '    NOTEST(',INTO=LINE
LESERV_TEST      DS  0H
         CLC   SUBOPT_TEST_OPT,=F'4'
         JNE   LESERV_TEST1
         STRING64 (LINE,,T),'ALL,',INTO=LINE
         J     LESERV_TEST3
LESERV_TEST1     DS  0H
         CLC   SUBOPT_TEST_OPT,=F'2'
         JNE   LESERV_TEST3
         STRING64 (LINE,,T),'ERROR,',INTO=LINE
         BRASL R14,SPACE1
         J     LESERV_TEST3
LESERV_TEST2     DS  0H
         STRING64 (LINE,,T),'NONE,',INTO=LINE
LESERV_TEST3     DS  0H
         STRING64 (LINE,,T),SUBOPT_TEST_CF,INTO=LINE
         STRING64 (LINE,,T),',',SUBOPT_TEST_CL,INTO=LINE
         STRING64 (LINE,,T),',',SUBOPT_TEST_PF,INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_TESTX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_THRH_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_THRHX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_THRH_SUB
         USING SUBOPT_THRH,R4
         STRING64 '      THREADHEAP(',INTO=LINE
         STRING64 (LINE,,T),(SUBOPT_THRH_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_THRH_INC,F,L9B),INTO=LINE
         TM    SUBOPT_THRH_ALLOC,X'80'  Below
         JO    LESERV_THREADHEAP1
         STRING64 (LINE,,T),',ANYWHERE',INTO=LINE
         J     LESERV_THREADHEAP2
LESERV_THREADHEAP1     DS  0H
         STRING64 (LINE,,T),',BELOW',INTO=LINE
LESERV_THREADHEAP2     DS  0H
         TM    SUBOPT_THRH_ALLOC,X'40'  Free
         JO    LESERV_THREADHEAP3
         STRING64 (LINE,,T),',KEEP)',INTO=LINE
         J     LESERV_THREADHEAP4
LESERV_THREADHEAP3     DS  0H
         STRING64 (LINE,,T),',FREE)',INTO=LINE
LESERV_THREADHEAP4     DS  0H
         BRASL R14,SPACE1
LESERV_THRHX   DS 0H                                             RS0407
         CLC   OPTION_THRS_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_THRSX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_THRS_SUB
         USING SUBOPT_THRS,R4
         STRING64 '      THREADSTACK(',INTO=LINE
         STRING64 (LINE,,T),(SUBOPT_THRS_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_THRS_INC,F,L9B),INTO=LINE
         TM    SUBOPT_THRS_ALLOC,X'80'  Below
         JO    LESERV_THREADSTACK1
         STRING64 (LINE,,T),',ANYWHERE',INTO=LINE
         J     LESERV_THREADSTACK2
LESERV_THREADSTACK1     DS  0H
         STRING64 (LINE,,T),',BELOW',INTO=LINE
LESERV_THREADSTACK2     DS  0H
         TM    SUBOPT_THRS_ALLOC,X'40'  Free
         JO    LESERV_THREADSTACK3
         STRING64 (LINE,,T),',KEEP)',INTO=LINE
         J     LESERV_THREADSTACK4
LESERV_THREADSTACK3     DS  0H
         STRING64 (LINE,,T),',FREE)',INTO=LINE
LESERV_THREADSTACK4     DS  0H
         BRASL R14,SPACE1
LESERV_THRSX   DS 0H                                             RS0407
         DROP  R4
         LR    R4,R3
         CLI   WKCELL1,C'1'            64bit LE-Option           RS0606
         JNE   LESERV_NOTHRS64           no leave                RS0606
         CLC   OPTION_THRS64_WHSET,=H'800'  CEEPRMxx specified ? RS0407
         JNH   LESERV_THRS64X               no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_THRS64_SUB
         USING SUBOPT_THRS64,R4
         STRING64 '      THREADSTACK64(',INTO=LINE
         STRING64 (LINE,,T),(SUBOPT_THRS64_INIT,FD,L9B),INTO=LINE
         STRING64 (LINE,,T),'M,',(SUBOPT_THRS64_INC,FD,L9B),INTO=LINE
         STRING64 (LINE,,T),'M,',(SUBOPT_THRS64_MAX,FD,L9B),INTO=LINE
         STRING64 (LINE,,T),'M)',INTO=LINE
         BRASL R14,SPACE1
LESERV_THRS64X DS 0H                                             RS0407
LESERV_NOTHRS64        DS  0H
         CLC   OPTION_TRAC_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_TRACX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_TRAC_SUB
         USING SUBOPT_TRAC,R4
         STRING64 '      TRACE(ON,',INTO=LINE
         TM    OPTION_TRAP_FLAG,X'80'
         JO    LESERV_TRACE
         STRING64 '      TRACE(OFF,',INTO=LINE
LESERV_TRACE           DS  0H
         STRING64 (LINE,,T),(SUBOPT_TRAC_SIZE,F,L9B),INTO=LINE
         TM    SUBOPT_TRAC_FLG1,X'80'       DUMP
         JO    LESERV_TRACE1
         STRING64 (LINE,,T),',NODUMP,',INTO=LINE
         JO    LESERV_TRACE2
LESERV_TRACE1          DS  0H
         STRING64 (LINE,,T),',DUMP,',INTO=LINE
LESERV_TRACE2          DS  0H
         STRING64 (LINE,,T),'LE=',(SUBOPT_TRAC_GFLG,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_TRACX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_TRAP_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_TRAPX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_TRAP_SUB
         USING SUBOPT_TRAP,R4
         STRING64 '      TRAP(ON,',INTO=LINE
         TM    OPTION_TRAP_FLAG,X'80'
         JO    LESERV_TRAP1
         STRING64 '      TRAP(OFF,',INTO=LINE
LESERV_TRAP1           DS  0H
         TM    SUBOPT_TRAP_FLG,X'80'   SPIE ?
         JO    LESERV_TRAP2
         STRING64 (LINE,,T),'NOSPIE)',INTO=LINE
         J     LESERV_TRAP3
LESERV_TRAP2           DS  0H
         STRING64 (LINE,,T),'SPIE)',INTO=LINE
LESERV_TRAP3           DS  0H
         BRASL R14,SPACE1
LESERV_TRAPX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_UPSI_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_UPSIX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_UPSI_SUB
         USING SUBOPT_UPSI,R4
         STRING64 '      UPSI(',SUBOPT_UPSI_SW,')',INTO=LINE
         BRASL R14,SPACE1
LESERV_UPSIX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_USRH_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_USRHX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_USRH_SUB
         USING SUBOPT_USRH,R4
         STRING64 '      USRHDLR(',SUBOPT_USRH_UN1,INTO=LINE
         TM    OPTION_USRH_FLAG,X'80'
         JO    LESERV_USRHDLR
         STRING64 '    NOUSRHDLR(',SUBOPT_USRH_UN1,INTO=LINE
LESERV_USRHDLR         DS  0H
         STRING64 (LINE,,T),',',SUBOPT_USRH_UN2,INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_USRHX   DS 0H                                             RS0407
         DROP  R4
         CLC   OPTION_VCTR_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_VCTRX                 no leave             RS0407
         STRING64 '      VCTRSAVE(ON)',INTO=LINE
         TM    OPTION_VCTR_FLAG,X'80'
         JO    LESERV_VCTRSAVE
         STRING64 '      VCTRSAVE(OFF)',INTO=LINE
LESERV_VCTRSAVE  DS  0H
         BRASL R14,SPACE1
LESERV_VCTRX   DS 0H                                             RS0407
         CLC   OPTION_XPLI_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_XPLIX                 no leave             RS0407
         STRING64 '      XPLINK(ON)',INTO=LINE
         TM    OPTION_XPLI_FLAG,X'80'
         JO    LESERV_XPLINK
         STRING64 '      XPLINK(OFF)',INTO=LINE
LESERV_XPLINK    DS  0H
         BRASL R14,SPACE1
LESERV_XPLIX   DS 0H                                             RS0407
         CLC   OPTION_XUFL_WHSET,=H'800'    CEEPRMxx specified ? RS0407
         JNH   LESERV_XUFLX                 no leave             RS0407
         LR    R4,R3
         A     R4,OPTION_XUFL_SUB
         USING SUBOPT_XUFL,R4
         STRING64 '      XUFLOW(OFF)',INTO=LINE
         CLC   OPTION_XUFL_FLAG,=F'4'
         JE    LESERV_XUFLOW
         STRING64 '      XUFLOW(ON)',INTO=LINE
         CLC   OPTION_XUFL_FLAG,=F'2'
         JE    LESERV_XUFLOW
         STRING64 '      XUFLOW(AUTO)',INTO=LINE
LESERV_XUFLOW    DS  0H
         BRASL R14,SPACE1
LESERV_XUFLX   DS 0H                                             RS0407
         DROP  R4
         J     LESERV99                end
LESERV97 DS    0H
         STRING64 '    CEEOCB Version not valid: ',(8(R3),2,X),        X
               INTO=LINE
         BRASL R14,SPACE1
         J     LESERV99
LESERV98 DS    0H
         STRING64 '    Eyecatcher CEEOCB not valid: ',(0(R3),8),       X
               INTO=LINE
         BRASL R14,SPACE1
.LESERV99 ANOP
LESERV99 DS 0H
         BR    R7                      goback
*---------------------------------------------------------------------*
*                                                                     *
*        Check if a dataspace has SCOPE=COMMON                        *
*                                                                     *
*---------------------------------------------------------------------*
DSPCADS  BEGIN_PROC SAVE=NO                                      RS0902
         USING DSD,R2
         MVC   WORK256+8(6),BLANKS     Clear scope
         LAM   R2,R2,=F'0'             Clear AR2 for DSDSTKN use JH0405
         LAM   R12,R12,=F'0'           Set AR12 to Primary       JH0111
         LAM   R13,R13,=F'0'           Set AR13 to Primary       JH0111
         SAC   512                     Switch into AR mode
         SYSSTATE ASCENV=AR            Set Global bit for AR mode
         MVC   WKCELL1(4),=F'-1'       Start ALET search at top
         ALESERV SEARCH,               Search for the ALET             X
               ALET=WKCELL1,           Place ALET here                 X
               STOKEN=DSDSTKN,         Using dataspace STOKEN          X
               AL=PASN,                                                X
               MF=(E,ALESERV2)
         LTR   R15,R15                 Check RC
         JNZ   NOTCADS                 Not SCOPE=COMMON
         LAM   R1,R1,WKCELL1           Load the ALET found
         XR    R0,R0                   Set EAX
         TESTART ALET=(R1),EAX=(R0),CADS=YES
         C     R15,=X'00000018'        SCOPE=COMMON dataspace
         JNE   NOTCADS                 No
ISCADS   DS    0H
* Dataspace is SCOPE=COMMON
         LH    R15,WKCELL2                                       RS0203
         AHI   R15,1                   count no of common dsp    RS0203
         STH   R15,WKCELL2                                       RS0203
         STRING64 'Common',INTO=WORK256+8
NOTCADS  DS    0H
* Dataspace is NOT SCOPE=COMMON
         LAM   R1,R1,=F'0'
         LAM   R2,R2,=F'0'             Set AR2 to zero
         SYSSTATE ASCENV=P             Reset AR mode
         SAC   0
*endloop                                                           $RS
         BR    R7                      goback
*---------------------------------------------------------------------*
*                                                                     *
*        BITSTR routine: edit bit string as 1,2-4,5,7,9-14            *
*                                                                     *
*          LA   R0,8                    number of bytes               *
*          LA   R1,1                    First bit is bit 1            *
*          LA   R2,=X'EA00EA00EA00EA03' bit string                    *
*          BRASL R14,BITSTR             edit bit string               *
*                                                                     *
*---------------------------------------------------------------------*
BITSTR   BEGIN_PROC SAVE=NO                                      RS0402
         STM   R14,R12,WORK256+32      SAVE WORK REGS
         MVC   NEXTLINE,BLANKS         CLEAR OUTPUT AREA
         BASR  R3,0                    FIRST TIME SWITCH
*--LOOP
BITSTR1  LA    R4,8                    BIT LOOP
         LA    R5,X'80'                BIT MASK
*----LOOP
BITSTR2  DS    0H
*BITSTR9  TM    0(R2),*-*               CHECK FOR RECORDING OFF
*        EX    R5,BITSTR9
         EX    R5,=S(X'100'(R9),0(R2)) Test bit using TM 0(R2),*-*
         JZ    BITSTR4                 THIS BIT OFF, JUMP
         LTR   R3,R3                   START OF A NEW RANGE?
         JNM   BITSTR7                 NO, IGNORE
         LR    R3,R1                   1ST BIT IN RANGE
         CLI   NEXTLINE,C' '           FIRST RANGE?
         JE    BITSTR3                 YES, JUMP
         STRING64 (NEXTLINE,6*L'NEXTLINE,L),',',((R3),,L),             X
               INTO=(NEXTLINE,6*L'NEXTLINE)                      JM0200
         J     BITSTR7
BITSTR3  EQU   *                       FIRST RANGE
         STRING64 ((R3),,L),INTO=(NEXTLINE,6*L'NEXTLINE)            +JM
         J     BITSTR7
BITSTR4  EQU   *                       END OF RANGE
         LTR   R3,R3                   PREV BIT ON?
         JM    BITSTR7                 NO, IGNORE
         BCTR  R1,0                    PREVIOUS BIT (END OF RANGE)
         CLR   R3,R1                   SINGLE-BIT RANGE?
         JE    BITSTR6                 YES, JUMP
         STRING64 (NEXTLINE,6*L'NEXTLINE,L),'-',((R1),,L),             X
               INTO=(NEXTLINE,6*L'NEXTLINE)                      JM0200
BITSTR6  EQU   *
         LA    R1,1(,R1)               UNDO PREVIOUS "BCTR R1,0"
         BASR  R3,0                    PREV BIT WAS OFF
BITSTR7  EQU   *
         LA    R1,1(,R1)               BUMP CURRENT BIT NUMBER
         SRL   R5,1                    OFFSET MASK
         JCT   R4,BITSTR2
*----ENDLOOP
         LA    R2,1(,R2)               BUMP BYTE ADDRESS
         JCT   R0,BITSTR1              PROCESS NEXT 8 BITS
*--ENDLOOP
         LTR   R3,R3                   PREV BIT ON?
         JM    BITSTR9                 NO, EXIT
         BCTR  R1,0                    PREVIOUS BIT (END OF RANGE)
         CLR   R3,R1                   SINGLE-BIT RANGE?
         JE    BITSTR9                 YES, JUMP
         STRING64 (NEXTLINE,6*L'NEXTLINE,L),'-',((R1),,L),             X
               INTO=(NEXTLINE,6*L'NEXTLINE)                      JM0200
*BITSTR9  TM    0(R2),*-*               CHECK FOR RECORDING OFF
BITSTR9  DS    0H
         LM    R14,R12,WORK256+32      RESTORE WORK REGS
         BR    R14
*---------------------------------------------------------------------*
*        SNAP ROUTINE    R0=LENGTH,R1=ADDRESS                         *
*---------------------------------------------------------------------*
SNAP00   BEGIN_PROC SAVE=NO
         SLR   R15,R15                 offset=0000
         STM   R14,R15,SNAPREGS+24     return address
         STRING64 '0-3 ',(SNAPREGS+08,4,X),1X,(SNAPREGS+12,4,X),       X
               1X,(SNAPREGS+16,4,X),1X,(SNAPREGS+20,4,X),              X
               '  4-7 ',((R4),,X),1X,((R5),,X),                        X
               1X,((R6),,X),1X,((R7),,X),INTO=LINE
         BRASL R14,SPACE1          <== next line
         STRING64 '8-B ',((R8),,X),1X,((R9),,X),1X,((R10),,X),         X
               1X,((R11),,X),'  C-F ',((R12),,X),1X,((R13),,X),        X
               1X,(SNAPREGS+00,4,X),1X,(SNAPREGS+04,4,X),INTO=LINE
         BRASL R14,SPACE1           <== next line
*LOOP
SNAP11   L     R14,SNAPREGS+24         return address
         LTR   R0,R0                   # OF REMAINING BYTES
         BNPR  R14                     FINISHED, QUIT
         STRING64 '  +',(SNAPREGS+30,2,X),1X,((R1),,X),3X,36X,'   *',  X
               16X,'*',INTO=LINE
         LA    R14,16                  # of bytes on a line
         AL    R14,SNAPREGS+28         increment offset
         ST    R14,SNAPREGS+28         increment offset
*
         LA    R14,16                  # of chars on a line
         CLR   R14,R0                  is this a short line?
         JL    *+6                     no, jump
         LR    R14,R0                  truncate last line
         BCTR  R14,0                   FOR EX
         EX    R14,=S(X'200'(R13),59(R10),0(R1)) Excecute MOVE FIELD
*        MVC   LINE+59(*-*),0(R1)      MOVE FIELD
         TR    LINE+59(16),TRTPRINT
*
         LA    R2,LINE+19              start of hex data
         BRASL R14,SNAP33              edit 4 bytes
         BRASL R14,SNAP33              edit 4 bytes
         LA    R2,1(,R2)               2-byte margin
         BRASL R14,SNAP33              edit 4 bytes
         BRASL R14,SNAP33              edit 4 bytes
         BRASL R14,SPACE1          <== next line
         J     SNAP11                  snap next line
*ENDLOOP
*
SNAP33   LTR   R0,R0                   # OF REMAINING BYTES
         BNPR  R14                     FINISHED, QUIT
         UNPK  0(9,R2),0(5,R1)         translate to hex
         L     R15,=A(@STRHEXT-240)    (from STRING64 macro)
         TR    0(8,R2),0(R15)          translate to hex
         AHI   R0,-4
         LA    R1,4(,R1)               ptr in input area
         MVI   8(R2),C' '
         LA    R2,9(,R2)               ptr in output line
         BR    R14
*---------------------------------------------------------------------*
*                                                                     *
*        LOCATE EPNAME FOR ADDR IN (R1)                               *
*                                                                     *
*        Entry:  R1 contains an address                               *
*                                                                     *
*        Exit:   EP10 contains the location and name of               *
*                the corresponding module.                            *
*                                                                     *
*---------------------------------------------------------------------*
CSVQUERY BEGIN_PROC SAVE=NO
         LA    R1,0(,R1)               CLEAN-UP AMODE BIT
         STM   R14,R3,TENWORDS         save registers
         MVC   EP10,BLANKS             clear work area
         CL    R1,IGCERROR             THIS SVC USED?
         JE    CSVQRY98                NO, GOBACK
         L     R8,CVTPTR(,0)           CVT ADDRESS               RS1002
         SH    R8,=Y(CVTMAP-CVTFIX)    SUBTRACT PREFIX LENGTH    RS1002
         USING CVTFIX,R8               PERMANENT ASSIGNMENT
*
*        SCAN JPAQ
*
         L     R2,PSATOLD-PSA(,0)      MY TCB
         L     R2,TCBJSTCB-TCB(,R2)    JOB STEP TCB
         ICM   R2,B'1111',TCBJPQ-TCB(R2)  FIRST CDE ON JPA QUEUE
         JZ    CSVQRY20                EMPTY QUEUE, SKIP SEARCH
         USING CDENTRY,R2
         MVI   EP10,C'J'               Job Pack Area
*LOOP
CSVQRY11 TM    CDATTR2,CDXLE           IS THERE AN EXTENT LIST?
         JNO   CSVQRY12                NO, JUMP
         TM    CDATTR,CDNIC            this module being loaded?
         JO    CSVQRY12                yes, jump
         L     R14,CDXLMJP             EXTENT LIST
         USING XTLST,R14
         C     R1,XTLMSBAD             WITHIN BOUNDARIES?
         JL    CSVQRY12                NO, IGNORE
         L     R15,XTLMSBLA            LENGTH OF LOAD MOD
         LA    R15,0(,R15)             CLEAR HI-ORDER BIT
         A     R15,XTLMSBAD            ADD LOAD POINT ADDRESS
         CR    R1,R15                  WITHIN BOUNDARIES?
         JL    CSVQRY82                YES, PROCESS
CSVQRY12 ICM   R2,B'1111',CDCHAIN      NEXT CDE IN QUEUE
         JNZ   CSVQRY11                GOOD ADDR, PROCESS
*ENDLOOP
*
*        SCAN ACTIVE LPA QUEUE (MLPA/FLPA)
*
CSVQRY20 EQU   *
         ICM   R2,B'1111',ALPACDE1     First CDE on ALPAQ or DLPAQ
         JZ    CSVQRY40                EMPTY QUEUE, SKIP SEARCH
         USING CDENTRY,R2
         MVI   EP10,C'A'               ACTIVE LPA Q
*LOOP
CSVQRY21 L     R15,CDENTPT             ENTRY POINT
         LA    R15,0(,R15)             CLEAN UP AMODE BIT
         CR    R1,R15                  IS THIS MY ENTRY POINT?
         JE    CSVQRY82                MODULE FOUND, JUMP
         ICM   R2,B'1111',CDCHAIN      NEXT LPDE ADDR
         JNZ   CSVQRY21                NO FINISHED YET, LOOP FURTHER
*ENDLOOP
*        SCAN PAGEABLE LPA QUEUE (PLPA)
*
CSVQRY40 L     R2,CVTLPDIA             FIRST LPDE
         USING LPDE,R2
         MVI   EP10,C'P'               PAGEABLE LPA Q
*LOOP
CSVQRY41 L     R15,LPDENTP             ENTRY POINT
         LA    R15,0(,R15)             CLEAN UP AMODE BIT
         CR    R1,R15                  IS THIS MY ENTRY POINT?
         JE    CSVQRY82                MODULE FOUND, JUMP
         TM    LPDEATTR,LPDEMIN        MINOR LPDE?
         JO    CSVQRY42                YES, IGNORE
         LM    R15,R0,LPDEXTLN         LENGTH/LOAD ADDR
         CR    R0,R1
         JH    CSVQRY42                OUTSIDE BOUNDARIES, JUMP
         AR    R0,R15
         CR    R0,R1
         JH    CSVQRY82                MODULE FOUND, JUMP
CSVQRY42 LA    R2,LPDEXTAD+4           BUMP LPDE ADDR
         CLI   LPDENAME,X'FF'          END OF LPA DIRECTORY?
         JNE   CSVQRY41                NO, LOOP FURTHER
*ENDLOOP
*        Search Nucleus Map
*
         MVI   EP10,C'N'               NUCLEUS
         LA    R0,0(,R1)               pass address
         NUCLKUP BYADDR,ADDR=(0),NAME=EP10+2
         LTR   R15,R15                 FOUND?
         JNZ   CSVQRY60                no, jump
         CLC   =C'IEAVESVC',EP10+2     THIS SVC USED?              @407
         JE    CSVQRY98                NO, quit
         J     CSVQRY99                YES, exit                   @407
*
CSVQRY60 LM    R14,R1,TENWORDS         restore reg1
         L     R2,CVTSMEXT             STORAGE MAP EXTENSION
         USING CVTVSTGX,R2
*
CSVQRY61 MVC   EP10+2(8),=C'*FLPA   '  EP FOUND IN FIXED LPA
         MVI   EP10,C'F'               FIXED LPAQ
         CL    R1,CVTFLPAS             FLPA (BELOW)
         JL    CSVQRY62                NO, JUMP
         CL    R1,CVTFLPAE             END OF FLPA (BELOW)
         JL    CSVQRY99                YES, GOBACK
CSVQRY62 CL    R1,CVTEFLPS             FLPA (ABOVE)
         JL    CSVQRY63                NO, JUMP
         CL    R1,CVTEFLPE             END OF FLPA (ABOVE)
         JL    CSVQRY99                YES, GOBACK
*
CSVQRY63 MVC   EP10+2(5),=C'*MLPA'     EP FOUND IN FIXED LPA
         MVI   EP10,C'F'               MODIFIED LPAQ
         CL    R1,CVTMLPAS             MLPA (BELOW)
         JL    CSVQRY64                NO, JUMP
         CL    R1,CVTMLPAE             END OF MLPA (BELOW)
         JL    CSVQRY99                YES, GOBACK
CSVQRY64 CL    R1,CVTEMLPS             MLPA (ABOVE)
         JL    CSVQRY71                NO, JUMP
         CL    R1,CVTEMLPE             END OF MLPA (ABOVE)
         JL    CSVQRY99                YES, GOBACK
*
CSVQRY71 L     R2,CVTGDA               POINT TO GDA
         USING GDA,R2
         MVC   EP10+2(5),=C'*CSA '     EP FOUND IN CSA
         MVI   EP10,C'C'               CSA
         L     R0,GDACSA               CSA (BELOW)
         CLR   R1,R0                   WITHIN CSA?
         JL    CSVQRY72                NO, JUMP
         AL    R0,GDACSASZ             END OF CSA (BELOW)
         CLR   R1,R0                   WITHIN CSA?
         JL    CSVQRY99                YES, GOBACK
CSVQRY72 L     R0,GDAECSA              CSA (ABOVE)
         CLR   R1,R0                   WITHIN CSA?
         JL    CSVQRY73                NO, JUMP
         AL    R0,GDAECSAS             END OF CSA (ABOVE)
         CLR   R1,R0                   WITHIN CSA?
         JL    CSVQRY99                YES, GOBACK
*
CSVQRY73 MVC   EP10+2(5),=C'*SQA '     EP FOUND IN SQA
         MVI   EP10,C'C'               SQA
         L     R0,GDASQA               SQA (BELOW)
         CLR   R1,R0                   WITHIN SQA?
         JL    CSVQRY74                NO, JUMP
         AL    R0,GDASQASZ             END OF SQA (BELOW)
         CLR   R1,R0                   WITHIN SQA?
         JL    CSVQRY99                YES, GOBACK
CSVQRY74 L     R0,GDAESQA              SQA (ABOVE)
         CLR   R1,R0                   WITHIN SQA?
         JL    CSVQRY75                NO, JUMP
         AL    R0,GDAESQAS             END OF SQA (ABOVE)
         CLR   R1,R0                   WITHIN SQA?
         JL    CSVQRY99                YES, GOBACK
CSVQRY75 MVC   EP10,BLANKS             RETURN BLANK NAME
         J     CSVQRY99
*
         USING LPDE,R2
CSVQRY82 MVC   EP10+2(8),LPDENAME      PASS EP NAME
         J     CSVQRY99
*
CSVQRY98 MVC   EP10,BLANKS             This SVC is not used
         MVI   EP10,C'-'               This SVC is not used
*
CSVQRY99 LM    R14,R3,TENWORDS         restore registers
         BR    R14
         DROP  R2,R8                   LPDE, CVT                 RS1002
*---------------------------------------------------------------------*
*                                                                     *
*        CONVERT UCBTYP TO UNITNAME                                   *
*                                                                     *
*        Entry:  R7 contains the address of the UCB                   *
*                                                                     *
*        Exit:   UNITNAME contains the EBCDIC Unit name (e.g. 3380E)  *
*                                                                     *
*---------------------------------------------------------------------*
GETUNIT  BEGIN_PROC SAVE=NO                                      RS0502
         STM   R14,R2,GETUREGS         SAVE registers
         USING UCBOB,R7
         MVC   UNITNAME+8,UCBTYP       move device type
         XCALL IEFEB4UV,                                               X
               (UNITNAME,              work area                       X
               =AL1(CNVTLUV,0)),       convert dev type to LUV         X
               ERRET=GETUNIT8
         XCALL IEFEB4UV,                                               X
               (UNITNAME,              work area                       X
               =AL1(RETNUNIT,0)),      return unit name                X
               ERRET=GETUNIT8
         CLI   UCBTBYT3,UCB3DACC       DASD?
         JNE   GETUNIT9                NO, exit
*
*        3380/3390 subtype
*
         BRAS  R1,GETUNIT5            BRANCH AROUND TABLE
         DC    X'1E',C'D '             DCEOBRDT      3380/3390
         DC    X'21',C'J '             DCEOBRDT      3380/3390
         DC    X'23',C'K '             DCEOBRDT      3380/3390
         DC    X'2E',C'E '             DCEOBRDT      3380/3390
         DC    X'26',C'-1'             DCEOBRDT      3380/3390
         DC    X'27',C'-2'             DCEOBRDT      3380/3390
         DC    X'24',C'-3'             DCEOBRDT      3380/3390
         DC    X'32',C'-9'             DCEOBRDT      3380/3390
         DC    X'3E',C'-A'             DCEOBRDT      3380/3390   JH0110
         DC    AL1(00),0H'0'
*
GETUNIT5 DS    0H
         LA    R15,UCBOB               pass UCB addr
         BRASL R14,GETCMEXT            get addr of common extension
         LTR   R15,R15                 UCB COMMON EXTENSION
         JZ    GETUNIT9                VIO, exit
         ICM   R15,B'1111',UCBCLEXT-UCBCMEXT(R15) Device class extnsion
         JZ    GETUNIT9                VIO, exit
         USING DCE,R15
         BASR  R14,0                   SCAN TABLE
*--loop
         CLC   DCEOBRDT,0(R1)          TEST 3380/3390 MODEL
         JNE   GETUNIT5A               not equal, skip "MVC"     JH0110
         MVC   UNITNAME+4(2),1(R1)     MOVE 3380 TYPE (D/E/J/K)
         J     GETUNIT5B               leave                     JH0110
GETUNIT5A DS   0H                                                JH0110
         LA    R1,1+2(,R1)             next entry
         CLI   0(R1),0                 end of table?
         BNER  R14
*--endloop
GETUNIT5B DS   0H                                                JH0110
         CLC   DCEUDCYL,=H'10200'      Is this a 3390-27?        RS1004
         JL    GETUNIT9                   no leave               RS1004
         MVC   UNITNAME+4(3),=C'-27'                             RS1004
         CLC   DCEUDCYL,=H'32767'      Is this a 3390-54?        RS1004
         JL    GETUNIT9                   no leave               RS1004
         MVC   UNITNAME+4(3),=C'-54'                             RS1004
         CLI   DCEOBRDT,X'3E'          Is this a 3390-A?         JH0110
         JNE   GETUNIT9                   no leave               JH0110
         MVC   UNITNAME+4(3),=C'-A '                             JH0110
         J     GETUNIT9                exit
         DROP  R15                     DCE
GETUNIT8 MVC   UNITNAME,BLANKS         CONVERSION DID NOT WORK
GETUNIT9 LM    R14,R2,GETUREGS         SAVE registers
         BR    R14
         DROP  R7                                                RS1002
*---------------------------------------------------------------------*
*                                                                     *
*        TCB tree scan routine                                        *
*                                                                     *
*        Entry:  R3 contains the indentation index                    *
*                R9 contains the address of the current TCB           *
*        Exit:   R3 contains the new indentation index                *
*                R9 contains the address of the next TCB              *
*                                                                     *
*---------------------------------------------------------------------*
SCANTCB  BEGIN_PROC SAVE=NO
         LR    R1,R9                   SAVE TCB ADDRESS
         L     R9,TCBLTC-TCB(,R9)      DAUGHTER
         LA    R3,1(,R3)               INDENTATION INDEX
*LOOP
SCANTCB2 LTR   R9,R9                   CHECK FOR END OF CHAIN
         BNZR  R14                     PASS VALID TCB ADDRESS
         L     R9,TCBNTC-TCB(,R1)      SISTER
         L     R1,TCBOTC-TCB(,R1)      MOTHER
         JCT   R3,SCANTCB2             INDENTATION INDEX
*ENDLOOP
         SR    R9,R9                   SET CC=0
         BR    R14                     GOBACK
*---------------------------------------------------------------------*
*                                                                     *
*        SCAN RB chain backwards (from oldest RB)                     *
*              Input:  R6 points to current RBPREFIX                  *
*                      R9 points to the TCB                           *
*              Output: R6 point to next RB                            *
*                                                                     *
*---------------------------------------------------------------------*
         USING RBPREFIX,R6
         USING TCB,R9
NEXTRB   BEGIN_PROC SAVE=NO
         LA    R0,RBBASIC              point to basic section
         SLR   R6,R6                   end of chain
         CL    R0,TCBRBP               end of chain?
         BER   R14                     yes, goback with R6=0
         ICM   R6,B'1111',TCBRBP       Point to top RB (most recent)
         BZR   R14                     no RB for this TCB, goback
*--LOOP
NEXTRB2  SH    R6,=Y(RBBASIC-RBPREFIX) POINT TO RBPREFIX
         CLM   R0,B'0111',RBLINK+1     is this the next RB?
         BER   R14                     yes, goback
         TM    RBSTAB2,RBTCBNXT        oldest RB (end of chain) ?
         BOR   R14                     yes, goback
         ICM   R6,B'0111',RBLINK+1     POINT TO PREVIOUS RB (OR TCB)
         JNZ   NEXTRB2                 next RB in chain
*--ENDLOOP
         SLR   R6,R6                   end of chain
         BR    R14                     yes, goback
         DROP  R6,R9                   RBPREFIX,TCB
*---------------------------------------------------------------------*
*                                                                     *
*        Scan JPAQ backwards (from oldest CDE)                        *
*              Input:  R5 points to current CDENTRY                   *
*              Output: R5 point to next CDE                           *
*                                                                     *
*---------------------------------------------------------------------*
         USING CDENTRY,R5
NEXTCDE  BEGIN_PROC SAVE=NO
         LR    R0,R5                   point to current CDE
         L     R5,PSATOLD-PSA(,0)      my TCB
         L     R5,TCBJSTCB-TCB(,R5)    job-step TCB
         L     R5,TCBJPQ-TCB(,R5)      Top CDE (most recent)
         LTR   R5,R5                   empty JPAQ?
         BZR   R14                     yes, goback with R5=0
*--LOOP
NEXTCDE2 CL    R0,CDCHAIN              is this the next RB?
         BER   R14                     yes, goback
         ICM   R5,B'1111',CDCHAIN      previous CDE
         JNZ   NEXTCDE2                not found yet, loop more
*--ENDLOOP
         BR    R14                     goback with R5=0
         DROP  R5                      CDENTRY
*---------------------------------------------------------------------*
*                                                                     *
*        Scan LOAD-LIST backwards (from oldest LLE)                   *
*              Input:  R7 points to current LLE                       *
*              Output: R7 point to next LLE                           *
*                                                                     *
*---------------------------------------------------------------------*
NEXTLLE  BEGIN_PROC SAVE=NO
         LR    R0,R7                   point to current LLE
         L     R7,TCBLLS-TCB(,R9)      Top LLE (most recent)
         LTR   R7,R7                   empty load list?
         BZR   R14                     yes, goback with R7=0
         USING LLE,R7
*--LOOP
NEXTLLE2 CL    R0,LLECHN               is this the next RB?
         BER   R14                     yes, goback
         ICM   R7,B'1111',LLECHN       previous LLE
         JNZ   NEXTLLE2                not found yet, loop more
*--ENDLOOP
         BR    R14                     goback with R7=0
         DROP  R7                      LLE                      RS1002
*---------------------------------------------------------------------*
*                                                                     *
*        Retrieve the number of EXCPs for a given DDname              *
*                                                                     *
*        Entry:  R0 contains a TIOT offset                            *
*        Exit:   R1 contains the EXCP count (from the TCTDCTR field)  *
*                                                                     *
*---------------------------------------------------------------------*
EXCP00   BEGIN_PROC SAVE=STDSAVE
         L     R1,PSATOLD-PSA(,0)      MY TCB
         L     R1,TCBTCT-TCB(,R1)      TCBTCT
         L     R1,TCTIOTBL-SMFTCT(,R1) START OF I/O MEASUREMENT TABLE
         LA    R1,TCTIODSP-TCTTIOT(,R1) FIRST DD ENTRY
         USING TCTDCBTD,R1
*LOOP
EXCP11   CL    R0,TCTDCBTD             SAME TIOT OFFSET?
         JE    EXCP21                  YES, EXIT LOOP
*        LA    R1,TCTDCBLE             NEXT LOOKUP TABLE ENTRY   GS1104
         ICM   R15,B'1111',TCTDCBLE    END OF TABLE ?
         LA    R1,TCTDCBLE             NEXT LOOKUP TABLE ENTRY   GS1104
         JNZ   EXCP11                  NOT YET, TRY NEXT DD ENTRY
*ENDLOOP
         SLR   R0,R0                   EXCP COUNT IS ZERO
         J     EXCP99
*
EXCP21   L     R1,TCTIOTSD             OFFSET IN I/O MEASURE. TABLE
         L     R15,PSATOLD-PSA(,0)     MY TCB
         L     R15,TCBTCT-TCB(,R15)    MY TCT
         A     R1,TCTIOTBL-SMFTCT(,R15) START OF I/O MEASUREMENT TABLE
         USING TCTDDENT,R1
         ICM   R0,B'1111',TCTDCTR      EXCP COUNT IN R0
EXCP99   LR    R1,R0                   EXCP COUNT IN R1 TOO
         LM    R2,R12,28(R13)
         BR    R14
         DROP  R1
         DROPTEMP
*---------------------------------------------------------------------*
*        BEGIN_PROC bootstrap                                         *
*        Halfword offset can now have 65535 bytes (unsigned halfword) *
*---------------------------------------------------------------------*
BEGIN_PROC L   R15,0(R15)              address to far routine    RS0205
           BR  R15                     branch to far
*---------------------------------------------------------------------*
*        ISPF Bootstraps                                              *
*---------------------------------------------------------------------*
SYNCH_ISPQRY L R15,ISPQRY@             V(ISPQRY)
         L     R13,UNPROTWK            point R13 at unprotected area
         BR    R15                     go there
SYNCH_ISPLINK L R15,ISPLINK            V(ISPLINK)
         L     R13,UNPROTWK            point R13 at unprotected area
         BR    R15                     go there
*---------------------------------------------------------------------*
*        Bump line pointer                                            *
*---------------------------------------------------------------------*
SPACE2   LA    R10,LINE+L'LINE         Double Space
BLANK1   MVC   LINE,BLANKS             Blank Line
SPACE1   LA    R10,LINE+L'LINE         Next Line
         BR    R14
*---------------------------------------------------------------------*
*        Check if this PROC should be executed                        *
*---------------------------------------------------------------------*
SECTION_SELECTION EQU *
         ICM   R15,B'1111',PARSE_ANSWER A(IKJPARMD)
         BNP   2(,R14)                 NO SELECTION, PROCESS
         AH    R15,0(,R14)             ADD OFFSET TO PCE
         CLI   0(R15),1                THIS SECTION SELECTED?
         BE    2(,R14)                 YES, PROCESS
         LM    R14,R15,END_PROC        RETURN/RETRY ADDRESSES
         BR    R14                     GOBACK
*---------------------------------------------------------------------*
*        Locate a 64K work-area at the end of the dynamic work space  *
*---------------------------------------------------------------------*
WORKADDR L     R0,=F'131070'           length of work area       RS0507
         L     R1,LINE1PTR             addr of lines buffer
         AL    R1,LINE1PTR+4           length of lines buffer
         SLR   R1,R0                   offset to work-area
         XC    0(256,R1),0(R1)         CLEAR IT TO X'00'
         BR    R14
*---------------------------------------------------------------------*
*        Locate the UCB common extension (UCBCMEXT)                   *
*        using IOSCMXA in ESA 5.1 and above.                          *
*---------------------------------------------------------------------*
GETCMEXT LR    R0,R15                  save UCB address
         ICM   R15,B'0111',UCBEXTP-UCBOB(R15) UCB COMMON EXTENSION
         BZR   R14                     VIO, exit with R15=0
         BAKR  R14,0
         ST    R0,IOSCMXA_UCBPTR       save UCB address
         PUSH  USING
         BASR  R3,0                    temp IOSCMXA require
         USING *,R3
         IOSCMXA UCBPTR=IOSCMXA_UCBPTR,                                X
               UCBCXPTR=IOSCMXA_UCBCXPTR,                              X
               MF=(E,IOSCMXA_PARMLIST,COMPLETE)
         POP   USING
         LTR   R15,R15                 ok?
         LA    R15,0                   zero address
         JNZ   GETCMEXT7               bad, exit
         L     R15,IOSCMXA_UCBCXPTR    A(UCBCMEXT)
GETCMEXT7 EQU  *
         EREG  R1,R1                   restore R1
         PR
*---------------------------------------------------------------------*
*        Retrieve the ddname of the tasklib DCB                       *
*---------------------------------------------------------------------*
JLBDDN   MVC   PDATA_DDN,BLANKS        TASKLIB DDNAME
         ICM   R1,B'1111',TCBJLB-TCB(R9) LOAD/TEST DCB ADDRESS
         BZR   R14                     NO TASKLIB, JUMP
         MVC   PDATA_DDN,LINKDDN       -LNKLST-
         L     R2,CVTPTR(,0)           POINT AT CVT
         CL    R1,CVTLINK-CVTMAP(,R2)  SYS1.LINKLIB
         BER   R14                     JUMP IF SYS1.LINKLIB DCB ADDR
         LR    R2,R14                  save return address
         BRASL R14,EXECKEY0            exec next instruction in key0
         LH    R1,DCBTIOT-IHADCB(,R1)  LOAD TIOT OFFSET
         A     R1,TCBTIO-TCB(,R9)      CHANGE OFFSET INTO AN ADDRESS
         MVC   PDATA_DDN,4(R1)         MOVE TASKLIB DDNAME
         BR    R2
*---------------------------------------------------------------------*
*        Execute an instruction in key=zero when AUTH=ESR             *
*---------------------------------------------------------------------*
EXECKEY0 TM    AUTHORIZED,L'AUTHORIZED Authorized?
         BNOR  R14                     no, goback
         MODESET EXTKEY=ZERO
         EX    0,0(,R14)               execute L/ICM instruction
         MODESET KEYADDR=PROTKEY,WORKREG=15 switch back to KEY4
         B     4(,R14)                 skip RX-type instruction
EXECK0SS TM    AUTHORIZED,L'AUTHORIZED Authorized?
         BNOR  R14                     no, goback
         MODESET EXTKEY=ZERO
         EX    0,0(,R14)               execute MVC instruction
         MODESET KEYADDR=PROTKEY,WORKREG=15 switch back to KEY4
         B     6(,R14)                 skip SS-type instruction
*---------------------------------------------------------------------*
*                                                                     *
*        Convert Hex digits to binary                                 *
*                                                                     *
*              R0:  number of EBCDIC bytes (mult of two)              *
*              R1:  addr of first input bytes (EBCDIC)                *
*              R15: addr of output area                               *
*                                                                     *
*---------------------------------------------------------------------*
*LOOP
X2B      SRL   R0,1                    DIVIDE COUNT BY TWO
X2BLOOP1 MVC   08(2,R13),0(R1)         MOVE 2 EBCDIC BYTES
         CLI   0(R1),C'0'              A-F ?
         JNL   X2BLOOP2                NO, JUMP
         NI    08(R13),X'0F'           A -> X'FA'
         TR    08(1,R13),=X'00,0A,0B,0C,0D,0E,0F'
X2BLOOP2 CLI   1(R1),C'0'              A-F ?
         JNL   X2BLOOP3                NO, JUMP
         NI    09(R13),X'0F'           A -> X'FA'
         TR    09(1,R13),=X'00,0A,0B,0C,0D,0E,0F'
X2BLOOP3 LA    R1,2(,R1)               NEXT PAIR OF INPUT BYTES
         MVO   0(1,R15),08(1,R13)      AA <- 0A05
         MVN   0(1,R15),09(R13)        A5 <- 0A05
         LA    R15,1(,R15)             NEXT OUTPUT BYTE
         JCT   R0,X2BLOOP1             NEXT PAIR OF INPUT BYTES
         BR    R14
*---------------------------------------------------------------------*
*                                                                     *
*        Convert binary time to HH MM SS HH                           *
*                                                                     *
*---------------------------------------------------------------------*
BINTIME  SLR   R0,R0
         D     R0,=F'00360000'         GET HOURS
         LR    R3,R1                   HH
         LR    R1,R0                   REMAINDER
         SLR   R0,R0
         D     R0,=F'6000'             GET MINUTES IN R1
         LR    R2,R1                   MM
         LR    R1,R0                   REMAINDER
         SLR   R0,R0
         D     R0,=F'100'              GET SECONDS IN R1
         BR    R14
*---------------------------------------------------------------------*
*                                                                     *
*        Convert EPOCH based on 01.01.1970 to TOD based on            *
*        01.01.1900                                                   *
*                                                                     *
*---------------------------------------------------------------------*
EPOCH2TOD BAKR  R14,0
         LA    R2,TENWORDS        get output area address        RS0504
         M     R0,TODMILL      uS since 1970 in R0 & R1          RS0504
         AL    R1,TODDIFF+4             Add right half of offset RS0504
         BRC   12,NOOFL         Skip if no overflow              RS0504
         AHI   R0,1             Bump up left half (LA would wor  RS0504
NOOFL    AL    R0,TODDIFF               Add left half of offset  RS0504
         SLDL  R0,12           Turn uS into TOD format           RS0504
         STM   R0,R1,0(R2)                                       RS0504
         PR                       Back
*---------------------------------------------------------------------*
*        TABLE SCAN ROUTINE                                           *
*---------------------------------------------------------------------*
*LOOP
SCAN_TM  IC    R15,0(,R1)              PICK UP MASK FOR "TM"
         EX    R15,2(,R14)             EXECUTE TM UNSTRUCTION
         BO    6(,R14)                 FOUND, GOBACK
         AH    R1,0(,R14)              BUMP TABLE PTR
         CLI   0(R1),0                 END OF TABLE?
         JNE   SCAN_TM                 NEXT TABLE ENTRY
*ENDLOOP
         LA    R1,BLANKS               ALL BLANKS
         LTR   R1,R1                   SET CC TO 'Z'
         B     6(,R14)                 NOT FOUND, GOBACK
*---------------------------------------------------------------------*
*        Retrieve field offset from HASMSDB & HASMBUFR (ESA V4)       *
*---------------------------------------------------------------------*
SCANMODL L     R15,=V(SCANMODL)        EXTERNAL ROUTINE
         STM   R0,R1,TENWORDS          PARM LIST
         LA    R1,TENWORDS             PARM LIST
         BR    R15                     go to SCANMODL routine
*---------------------------------------------------------------------*
*                                                                     *
*        Convert TOD clock to local time YYYYMMDD HHMMSSHH            *
*                                                                     *
*---------------------------------------------------------------------*
STCKCONV BAKR  R14,0
         MVC   STCKVAL,0(R1)           move TOD clock value
         STCKCONV STCKVAL=STCKVAL,     INPUT VALUE (STCK)              X
               CONVVAL=TENWORDS+20,    OUTPUT (TIME/DATE)              X
               DATETYPE=YYYYMMDD,      RETURN DATE AS YYYYMMDD         X
               MF=(E,STCKCONVL)
         STRING64                                                      X
               (TENWORDS+20+8,2,X),'-',  YYYY-                         X
               (TENWORDS+20+10,1,X),'-', YYYY-MM-                      X
               (TENWORDS+20+11,1,X),     YYYY-MM-DD                    X
               INTO=STCKDATE
         STRING64 (TENWORDS+20,1,X),'.', YYYY-MM-DD  HH.               X
               (TENWORDS+20+1,1,X),'.',  YYYY-MM-DD  HH.MM.            X
               (TENWORDS+20+2,1,X),'.',  YYYY-MM-DD  HH.MM.SS          X
               (TENWORDS+20+3,1,X),      YYYY-MM-DD  HH.MM.SS.HH       X
               INTO=STCKTIME
.STCKC99 ANOP
         PR
*---------------------------------------------------------------------*
*        move status flags                                            *
*---------------------------------------------------------------------*
$$STATUS LA    R15,0                   do not change CC
         IC    R15,0(,R14)             get length
         JZ    $$STATUS8               flag off, goback
         EX    R15,=S(X'200'(R13),0(R4),1(R14)) MVC 0(*-*,R4),1(R14)
         LA    R4,2(R15,R4)            bump pointer up
$$STATUS8 LA   R14,2(R15,R14)          return address
         CLI   0(R14),0                alignment byte?
         BNER  R14                     no, goback
         B     1(,R14)                 yes, skip it
         TITLE 'SHOWMVS &REL - Read Routine for BRIF and EDIF'
***********************************************************************
*                                                                     *
*        BRIF READ ROUTINE                                            *
*                                                                     *
*        This routine is invoked by BRIF and returns the address      *
*        of a record.  BRIF invokes it each time the line is          *
*        displayed on the screen, i.e when you scroll UP, DOWN,       *
*        LEFT, RIGHT, or simply hit ENTER.                            *
*                                                                     *
*        It also provides real-time status for on-line devices.       *
*                                                                     *
***********************************************************************
RDRTNE   SAVE  (14,12)
         BASR  R11,0
         USING *,R11
         LARL  R12,LTORG_AREA      LTORG and static area         RS0504
         USING (LTORG_AREA,LTORG_AREA_END),R12                   RS0504
         LR    R14,R13                 caller's save area
         L     R13,12(,R1)             PTR TO DIALOG DATA AREA
         L     R13,0(,R13)             A(RCVYSAVE)
         ST    R14,4(,R13)             chain save areas
         ST    R13,8(,R14)             chain save areas
         USING RCVYSAVE,R13
         L     R4,08(,R1)              RELATIVE RECORD NUMBER
         L     R1,0(,R4)               LINE NUMBER REQUESTED BY BRIF
         TM    BRIF_MODE,L'BRIF_MODE   MODE=BROWSE?
         JO    RDRTNE06                YES, JUMP
         LA    R1,1                    NEXT LINE FOR EDIT, HARDCOPY
         AL    R1,CURRECNO             RECORD NUMBER
         ST    R1,CURRECNO             RECORD NUMBER
RDRTNE06 EQU   *
         C     R1,NUMLINES             CHECK FOR END OF DATA
         JH    RDRTNE8                 JUMP IF TOO BIG
         BCTR  R1,0                    DOWN BY 1
         M     R0,=A(L'LINE)           OFFSET TO LAST LINE
         LR    R10,R1                  PASS OFFSET
         AL    R10,LINE1PTR            CHANGE OFFSET TO ADDRESS
         USING LINE,R10
RDRTN10  CLC   =C'.UCB=',LINE_UCB      UCB line?
         JNE   RDRTN12                 no, jump
         BRASL R14,UCB200              yes, refresh
RDRTN12  EQU   *                                                 RS1002
         CLC   =C'.STG',LINE           Virtual Storage effects   RS1002
         JNE   RDRTN13                 no, jump                  RS0507
         BRASL R14,STG200              yes, refresh              RS1002
RDRTN13  EQU   *                                                 RS1002
         CLC   =C'.CPU%',LINE          CPU usage                 RS0507
         JNE   RDRTN14                 no, jump                  RS0507
         BRASL R14,CPU200              yes, refresh              RS0507
RDRTN14  EQU   *                                                 RS0507
         CLC   =C'.GTF',LINE           GTF Status line?
         JNE   RDRTN16                 no, jump
         BRASL R14,GTF200              yes, refresh
         LA    R10,WORK256             new line
RDRTN16  EQU   *
         CLC   =C'.PIT=',LINE          JES2 initiator?
         JNE   RDRTN24                 no, jump
         BRASL R14,JES2I200            yes, refresh
         LA    R10,WORK256             new line
RDRTN24  EQU   *
*
         CLC   =C'.CPUTIME',LINE       STEP CPU TIME?
         JNE   RDRTN34                 no, jump
         BRASL R14,CPUT420             yes, refresh
RDRTN34  EQU   *
         CLC   =C'.SPL',LINE           Storage Usage line?
         JNE   RDRTN35                 no, jump
         BRASL R14,SPL200              yes, refresh
RDRTN35  EQU   *
*
RDRTN70  L     R1,4(,R13)              BRIF save area
         L     R1,24(,R1)              BRIF parm-list
         L     R6,00(,R1)              RECORD DATA READ
         ST    R10,0(,R6)              PASS DATA ADDRESS
         TM    PARMCAPS,L'PARMCAPS     PARM=CAPS?
         JNO   *+10                    no, jump
         TR    LINE,TRTPRINT           yes, convert to uppercase
         L     R13,4(,R13)             BRIF save area
         RETURN (14,12),RC=0           GOBACK TO EDIT
*
*        END OF DATA - RETURN MAX LINE#
*
RDRTNE8  L     R1,4(,R13)              BRIF save area
         L     R1,24(,R1)              BRIF parm-list
         L     R4,08(,R1)              RELATIVE RECORD NUMBER
         L     R6,00(,R1)              RECORD DATA READ
         L     R1,NUMLINES             NUMBER OF LINES
         ST    R1,0(,R4)               PASS IT TO BRIF
         BCTR  R1,0                    DOWN BY 1
         M     R0,=A(L'LINE)           OFFSET TO LAST LINE
         LR    R10,R1                  PASS OFFSET
         AL    R10,LINE1PTR            CHANGE OFFSET TO ADDRESS
         ST    R10,0(,R6)              PASS DATA ADDRESS
         L     R13,4(,R13)             BRIF save area
         RETURN (14,12),RC=8
*
         MACRO                                                    MACRO
&NAME    DROPTEMP ,                                               MACRO
         USING PSA,R0,R1,R2,R3,R4,R5,R6,R7,R14,R15
         DROP  R1,R2,R3,R4,R5,R6,R7,R14,R15 RELEASE TEMP BASE REGS
         MEND                                                     MACRO
         TITLE 'SHOWMVS &REL - Refresh status for on-line devices'
*---------------------------------------------------------------------*
*                                                                     *
*        Refresh status for on-line devices                           *
*                                                                     *
*---------------------------------------------------------------------*
UCB200   ST    R14,RDRTNR14            save return address
         PACK  WKCELL1,LINE_UCB+5(10)  get address
         CVB   R7,WKCELL1              A(UCBOB)
         USING UCBOB,R7
*
         MVC   WORK256(LINE_UCB-LINE),LINE move first half of line
         LA    R10,WORK256             now point to modified line
         LA    R4,LINE_UCB             message area
         MVC   0(LINE+L'LINE-LINE_UCB,R4),BLANKS
*
*        show VOLSER (DASD/TAPE)
*
         CLI   UCBTBYT3,UCB3TAPE       TAPE?
         JE    UCB220                  YES, JUMP
         CLI   UCBTBYT3,UCB3DACC       DASD?
         JE    UCB220                  YES, JUMP
*
*        Check for a system console
*
         LA    R4,8(,R4)               skip volser slot
         CLI   UCBTBYT3,UCB3DISP       Display device (eg 3270) ?
         JNE   UCB250                  no, JUMP
        #STATUS UCBSTAT,UCBSYSR,'Console'
         J     UCB250                  skip TAPE/DASD section
*
*        TAPE/DASD section
*
UCB220   CLI   UCBVOLI,C' '            VALID VOLSER?
         JNH   UCB249                  NO, JUMP
         MVC   0(6,R4),UCBVOLI         VOLSER FOR TAPE/DASD
         LA    R4,8(,R4)               skip volser
         CLI   UCBTBYT3,UCB3DACC       DASD?
         JNE   UCB240                  NO, JUMP
        #STATUS UCBSTAT,UCBSYSR,'System'
*---------------------------------------------------------------------*
*                                                                     *
*        GET SMS status and storage group                             *
*                                                                     *
*        This section is only generated if you assemble the           *
*        program with a DFP V3 MACLIB.                                *
*                                                                     *
*---------------------------------------------------------------------*
         TM    UCBFL5,UCBSMS           SMS-managed volume?
         JZ    UCB240                  no, jump
         ICM   R3,B'1111',SMS_SSOB     point to the work area
         JZ    UCB240                  not allocated, quit
         USING SMS_WORK,R3
         XC    SMS_WORK(256),SMS_WORK  clear 256 bytes
*
         LA    R2,SSOB_WRK             POINT TO WORK AREA
         USING SSOB,R2
         MVI   SSOBLEN+1,SSOBHSIZ      SSOB length
         MVC   SSOBID,=C'SSOB'         SSOB
         MVI   SSOBFUNC+1,SSOBSSMS     FUNCTION
         L     R1,CVTPTR(,0)           CVT
         L     R1,CVTJESCT-CVTMAP(,R1) JES COMM TABLE
         L     R1,JESCTEXT-JESCT(,R1)  JESCT Extension
         MVC   SSOBSSIB,JESSMSIB-JESPEXT(R1) SMS SSIB
*
         LA    R5,SSSA_WRK             SSSA WORK AREA
         ST    R5,SSOBINDV             FUNCTION-DEPENDENT AREA
         USING IEFSSSA,R5
         LA    R0,SSSALN+SSSA1LN       LENGTH
         STH   R0,SSSALEN
         MVC   SSSAID,=C'SSSA'         SSSA
         MVI   SSSAVER+1,SSOBSSVR      VERSION
         MVI   SSSASFN+1,SSSAACTV      SUB-FUNCTION CODE
         MVI   SSSAIFLG,SSSANAUT       NON-AUTHORIZED CALLER
*
         MVI   SSSA1TYP,SSSA1VOL       GIVE VOLSER, GET VLD BACK
         MVI   SSSA1CNT+3,1            ONE CONSTRUCT PASSED
         MVI   SSSA1NML+1,L'UCBVOLI    LENGTH OF NAME
         MVC   SSSA1NAM(L'UCBVOLI),UCBVOLI  MOVE VOLUME SERIAL
*
         LHI   R0,SMS_WORK_LENGTH
         ST    R0,SSSA1LEN             LENGTH OF WORK AREA
         LA    R6,SMS_SUB_FUNCTION_WORK_AREA
         ST    R6,SSSA1PTR             ADDR OF WORK AREA
         USING VLD,R6
*
*        CALL SMS TO GET A VLD (VOLUME RECORD DESCRIPTOR)
*
         LA    R1,SMS_SSOB             SSOB_PTR
         IEFSSREQ                  <== CALL SMS
         LTR   R15,R15                 SSI OK?
         JNZ   UCB240                  NO, jump
         ICM   R15,B'1111',SSOBRETN-SSOB+SSOB_WRK
         JNZ   UCB240                  bad, jump
         DROP  R3,R2,R5                SMS_WORK,SSSA
*
         LH    R1,VLDSGLEN             storage group length
         STRING64 'SMS SG=',(VLDSTGRP,(R1)),INTO=((R4),NEXTLINE)
         LA    R15,1(R15,R4)           point past STRING (actual)
         LA    R4,16(,R4)              point past string (minimum)
         CLR   R4,R15                  SG longer than 8 chars?
         JH    *+6                     no, jump
         LR    R4,R15                  yes, adjust position
*
*        Locate the SMS status byte that corresponds to my own system
*
         LH    R2,OWNSMSSYS            yes, remember it
         LTR   R2,R2                   known?
         JZ    UCB235                  no, use 1st one
         BCTR  R2,0                    make it relative to zero
         SLL   R2,3                    mult by L'VLDSYSDT (*8)   RS0502
UCB235   AR    R2,R6                   + start of VLDEF          RS0502
         A     R2,VLDSYSOF             Offset to VLDSYSDT        RS0502
         AHI   R2,L'VLDP               plus length of VLDP       RS1004
         USING VLDSYSDT,R2                                       RS0502
*
*        SMS volume status
*
         BRASL R1,UCB236               BRANCH AROUND TABLE
         DC    AL1(VLDENBL),C'Enabled     '
         DC    AL1(VLDQUI),C'Quiesced/all'
         DC    AL1(VLDQUIN),C'Quiesced/new'
         DC    AL1(VLDDIS),C'Disabled/all'
         DC    AL1(VLDDISN),C'Disabled/new'
         DC    AL1(00),0H'0'
*--loop
*CB236   CLC   0(L'VLDSMSS,R2),0(R1)   Test SMS status           RS0502
UCB236   CLC   0(L'VLDSTSMS,R2),0(R1)   Test SMS status          RS0502
***????  CLI   VLDSGST,*-*             Test SMS status on this system
         JNE   *+10                    not equal, skip "MVC"
         MVC   0(12,R4),1(R1)          move SMS status
         LA    R1,1+12(,R1)            bump pointer
         CLI   0(R1),0                 end of table?
         JNE   UCB236                  no, try next entry
*--endloop
         LA    R4,13(,R4)              point past status
*
*        display space used & size of largest free extent (LFE)
*
         ICM   R1,B'1111',VLDNTCPY     total capacity
         JZ    UCB260                  prevent S0C9
         S     R1,VLDNFREE             free space
         M     R0,=F'100'              space used * 100
         D     R0,VLDNTCPY             R1 = %USED
*        STRING64 ((R1),,R5B),'% used',                          RS0502
         STRING64 ((R1),,R3B),'% used',                          RS0502X
               ' Largest_Free_Extent(',                          AF0811X
               (VLDNLEXB,F,L),'Mb / ',                           AF0811X
               (VLDNLEXT,F,L),'Mb)',                             AF0811X
               INTO=((R4),NEXTLINE)
         LA    R4,1(R15,R4)            point past STRING
         J     UCB260
         DROP  R6                      VLD
*
*        VOLSER/MOUNT FOR TAPE, DASD
*
UCB240  #STATUS UCBSTAT,UCBPRES,'Resident'
        #STATUS UCBSTAT,UCBRESV,'Reserved'
        #STATUS UCBSTAB,UCBBPRV,'Private'
        #STATUS UCBSTAB,UCBBPUB,'Public'
        #STATUS UCBSTAB,UCBBSTR,'Storage'
*
*       #STATUS of Automatic Cartridge Loader (ACL)
*
         CLI   UCBTBYT3,UCB3TAPE       TAPE?
         JNE   UCB250                  no, JUMP
         TM    UCBTFL1,UCBCSL          ACL?
         JNO   UCB244X                 no, JUMP
         STRING64 'ACL(YES)',INTO=((R4),NEXTLINE)
         TM    UCBTFL1,UCBCSLAC        ACL active?
         JNO   UCB244N                 no, JUMP
         STRING64 'ACL(ACT)',INTO=((R4),NEXTLINE)
UCB244N  LA    R4,1(R15,R4)            point past text
UCB244X  EQU   *
*
*        Label type and position: LABEL=(nnn,SL)
*
         ICM   R0,B'1100',UCBFSEQ      fileseq=0?
         JZ    UCB250                  yes, JUMP
         STRING64 (UCBFSEQ,H,L),',',INTO=((R4),12)
         ALR   R4,R15                  point R4 past string
        #STATUS UCBSTAT,UCBDADI,'SL'
        #STATUS UCBTFL1,UCBNLTP,'NL'
        #STATUS UCBTFL1,UCBNSLTP,'NSL'
        #STATUS UCBTFL1,UCBBLP,'BLP'
        #STATUS UCBSTAB,UCBBSTR,'AL'
         J     UCB250
*
UCB249   LA    R4,8(,R4)               skip volser slot
*
*        SHOW OWNER OF NON-DASD DEVICE
*
UCB250   DS    0H
         TM    UCBSTAT,UCBALOC         device allocated?
         JZ    UCB258                  no, jump                  RS0601
        #STATUS UCBSTAT,UCBALOC,'Allocated'
         LA    R15,UCBOB               pass first 8 bits of address
         BRASL R14,GETCMEXT            get addr of common extension
         LTR   R15,R15                 UCB COMMON EXTENSION
         JZ    UCB260                  zero, ignore
         LH    R1,UCBASID-UCBCMEXT(,R15) GET OWNER'S ASID
         LOCASCB ASID=(1)              GET ADDR OF OWNER'S ASCB
         LTR   R15,R1                  VALID ASID?
         JNP   UCB258                  NO, JUMP                  RS0601
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOB name present?
         JNZ   UCB257                  yes, use it
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) STC/MOUNT/LOGON
UCB257   MVC   0(2,R4),=C'J='          SMS storage group
         MVC   2(8,R4),0(R1)           JOB/STC/TSU name
         LA    R4,11(,R4)              point past STRING
*
UCB258   DS    0H                                                RS0601
         LA    R15,UCBOB               pass first 8 bits of address0601
         BRASL R14,GETCMEXT            get addr of common extension0601
         LTR   R8,R15                  UCB COMMON EXTENSION      RS0601
         JZ    UCB260                  zero, ignore              RS0601
         USING UCBCMEXT,R8             tell assembler            RS0601
        #STATUS UCBFL7,UCBAUTOS,'ATS'  shared tape ?             RS0601
        #STATUS UCBFL7,UCBEIDAW,'IDAW' 64 bit IDAW device?       RS0601
         AIF   (NOT D'CVTH7709).UCB260 z/OS R6? no leave         RS0506
        #STATUS UCBCSFLG,UCBMIDAW,'MIDAW' MIDAW?                 RS0806
*       #STATUS UCBCSFLG,UCBFCX,'zHPF' zHPF?                     RS1108
        #STATUS UCBCSFLG,BIT7,'zHPF'   zHPF?                     RS1108
*       #STATUS UCBFL8,UCBSPECL,'Special' Special device         RS1108
        AIF   (NOT D'CVTH7750).UCB260   z/OS R10?                JK0209
        #STATUS UCBFL8,BIT0,'Special'     Special device         RS1108
*        AIF   (NOT D'UCBFCX).UCB260                             JH1405
*        TM    UCBCSFLG,UCBFCX         zHPF device ?             JH1405
*        JNO   UCB260                  ...jif not                JH1405
*        LA    R6,WORK44                                         JH1405
*        LA    R13,WORK256             Savearea                  JH1405
*        USING ZHPFWORK,R1             <temp work area>          JH1405
*                                                                JH1405
*        Invoke IOSZHPF Service:                                 JH1405
*                                                                JH1405
*        IOSZHPF INFOAREA=WORK44,                                JH1405X
               UCBPTR=(R7),                                      JH1405X
               DEVINFO=YES,                                      JH1405X
               MF=(E,WORK256+200)                                JH1405
*        LTR   R15,R15                 Successful ?              JH1405
*        JZ    UCB259                  ...jif not                JH1405
*        LA    R6,WORK44               R6 -> IOSDZHPF area       JH1405
*        STRING64 ' R15=',((R15),,X),INTO=LINE
*        J     UCB260                  Skip formatting           JH1405
UCB259   DS    0H                                                JH1405
*        LA    R6,WORK44               R6 -> IOSDZHPF area       JH1405
*        USING ZHPF_INFO,R6            addressability            JH1405
*        STRING64 ' (zHPF_DEVCAPABILITIES:',                     JH1405X
               1X,(ZHPF_DEVCAPABILITIES,8,X),                    JH1405X
               ')',                                              JH1405X
               INTO=LINE                                         JH1405
*        DROP  R8                                                RS0302
.UCB260  ANOP
UCB260  #STATUS UCBFLA,UCBNRY,'Not-ready'
        #STATUS UCBFLA,UCBBOX,'Boxed'
        #STATUS UCBFLA,UCBSTRT,'Busy'
****     DEV_STAT FLA,NOPTH,'No Path Available'
        #STATUS UCBFLC,UCBIVRS,'Intervention Required'
*
*        Show info from 3480 message display
*
UCB266   CLI   UCBTBYT3,UCB3TAPE       TAPE?
         JNE   UCB266X                 no, JUMP                  RS0302
         ICM   R8,B'1111',UCBCLEXT-UCBCMEXT(R8)  Device class ex RS0302
         JZ    UCB266X                 zero leave                RS0302
         DROP  R8                                                RS0302
         USING UCBCX,R8                tell assembler            RS0302
        #STATUS UCBCXEPI,VTSB16_EMUL3490,'VTS' VTS?              RS0302
         DROP  R8                                                RS0302
         TM    UCBTFL2,UCBTPSF         3480?
         JNO   UCB266X                 no, jump
         SLR   R2,R2
         ICM   R2,B'0111',UCBXTNB      UCB below the line?
         JNZ   UCB266B                 yes, jump
         LA    R2,UCBXTNB+L'UCBXTNB    no, extension is contiguous
UCB266B  EQU   *
         USING UCBMT,R2
         MVC   WKCELL1(L'UCBSER),UCBSER
         TR    WKCELL1(L'UCBSER),TRTPRINT
         CLC   WKCELL1(L'UCBSER),UCBSER is volser printable?
         JNE   UCB266X                 no, ignore it
         TM    UCBMTFL1,UCBMTDSM+UCBMTKEP+UCBMTRET               RS0302
         JZ    UCB266X                 all zero, jump
        #STATUS UCBMTFL1,UCBMTDSM,'D'  dismount
        #STATUS UCBMTFL1,UCBMTKEP,'K'  keep
        #STATUS UCBMTFL1,UCBMTRET,'R'  retain
         MVC   0(L'UCBSER,R4),UCBSER   previous volser
*
UCB266X  L     R14,RDRTNR14            return address
         BR    R14
         DROPTEMP                      RELEASE TEMP BASE REGS
         TITLE 'SHOWMVS &REL - Refresh Step CPU Time'
*---------------------------------------------------------------------*
*                                                                     *
*        Refresh Step Cpu Time (TSO On-Line Only)                     *
*                                                                     *
*        CPU Time Used: 001H12M07S197.542 (in microseconds)           *
*                                                                     *
*---------------------------------------------------------------------*
CPUT420  ST    R14,RDRTNR14            return address
         LA    R10,WORK256             new line
         L     R8,PSAAOLD-PSA(,0)      my ASCB
         USING ASCB,R8
         LM    R0,R1,ASCBEJST          GET ELAPSED JOB TCB TIME
         SRDL  R0,12                   IN MICRO-SECONDS
         LM    R14,R15,ASCBSRBT        GET ELAPSED SRB TIME
         SRDL  R14,12                  IN MICRO-SECONDS
         ALR   R1,R15                  ADD TCB AND SRB TIME
         JNO   *+8                     BRANCH IF NO OVERFLOW
         AL    R0,=F'1'                HANDLE CARRY
         AR    R0,R14                  add hi-order word
*
         D     R0,=F'1000'             time in thousands of a second
         LR    R4,R0                   save remaining micro-seconds
         SLR   R0,R0
         D     R0,=F'1000'             TIME IN SECOND
         LR    R3,R0                   SAVE REMAINING 1/1000
         SLR   R0,R0
         D     R0,=F'60'               TIME IN MINUTES
         LR    R2,R0                   SAVE REMAINING SECONDS
         SLR   R0,R0
         D     R0,=F'60'               TIME IN HOURS
         LA    R5,WORK256+100          work area
         STRING64 ((R1),,R3Z),'H',((R0),,R2Z),'M',((R2),,R2Z),         X
               'S',((R3),,R3Z),'.',((R4),,R3Z),INTO=((R5),17)
         LR    R0,R15                  length
         LR    R1,R5                   length
CPUT424  CLI   0(R1),C'0'              first significant digit?
         JH    CPUT425                 yes, jump
         LA    R1,1(,R1)               no, bump pointer
         JCT   R0,CPUT424              next character
CPUT425  EQU   *
         STRING64 1X,INTO=((R5),(R1))  blank out zeroes
         L     R6,PSATOLD-PSA(,0)      MY TCB
         L     R6,TCBTCT-TCB(,R6)      SMFTCT
         USING SMFTCT,R6
         LA    R1,WKCELL1              12-byte work area
         SYSEVENT REQSERVC
         L     R3,ASCBOUXB             OUXB ADDRESS
         USING OUXB,R3
         L     R2,OUXBPIN              PAGE-IN COUNT
         A     R2,OUXBPOUT             + PAGE-OUT COUNT
         A     R2,OUXBCAPI             + COMMON PAGE-IN
         L     R3,ASCBRSME             RAX ADDRESS
         L     R3,RAXFMCT-RAX(,R3)     Frame count (ESA)
.RAX1    ANOP
         STRING64 2X,((R5),17),        001H12M07S197.542 (microseconds)X
               (ASCBIOSC,F,R9B),       EXCP                            X
               (ASCBDCTI,F,R10B),      Connect                         X
               (TCTLIN,F,R7B),         TGET                            X
               (TCTLOUT,F,R7B),        TPUT                            X
               (WKCELL1,F,R11B),       Total Service                   X
               ((R3),,R9B),            Frame count                     X
               ((R2),,R10B),           Paging                          X
               8X,'n/a',               not available             RS0506X
               INTO=LINE
         CLC   ASCBIOSX,=FD'0'         OA14340 applied ?         RS0506
         JE    CPUT426                  no leave                 RS0506
         STRING64 2X,((R5),17),        001H12M07S197.542 (microseconds)X
               (ASCBIOSC,F,R9B),       EXCP                            X
               (ASCBDCTI,F,R10B),      Connect                         X
               (TCTLIN,F,R7B),         TGET                            X
               (TCTLOUT,F,R7B),        TPUT                            X
               (WKCELL1,F,R11B),       Total Service                   X
               ((R3),,R9B),            Frame count                     X
               ((R2),,R10B),           Paging                          X
               (ASCBIOSX,FD,R16B),     EXCP for 4GB OA14340      RS0506X
               INTO=LINE                                         RS0506
CPUT426  EQU   *                                                 RS0506
         L     R14,RDRTNR14            return address
         BR    R14
         DROPTEMP                      RELEASE TEMP BASE REGS
         TITLE 'SHOWMVS &REL - Refresh GTF status'
*---------------------------------------------------------------------*
*                                                                     *
*        Refresh GTF status                                           *
*                                                                     *
*---------------------------------------------------------------------*
GTF200   ST    R14,RDRTNR14            return address
         L     R8,CVTPTR(,0)           CVT address
         USING CVTMAP,R8
         STRING64 '  GTF is not active on this system',                X
               INTO=(WORK256,L'LINE)
         TM    CVTGTF,CVTGTFAV         ACTIVE?
         JNO   GTF299                  no, exit
GTF220   MVC   EP10,BLANKS             CLEAR WORK AREA
         TM    CVTGTFST,CVTUSR         TRACE=USR ?
         JNO   GTF221                  No, jump
         STRING64 (EP10,,T),',USR',INTO=EP10
GTF221   TM    CVTGTFST,CVTRNIO        TRACE=RNIO ?
         JNO   GTF222                  No, jump
         STRING64 (EP10,,T),',RNIO',INTO=EP10
GTF222   CLI   EP10,C' '               any trace active?
         JNE   GTF224                  yes, jump
         STRING64 ',none',INTO=EP10
GTF224   EQU   *
         STRING64 '  GTF Active, TRACE=(',(EP10+1,L'EP10-1,T),')',     X
               INTO=(WORK256,L'LINE)
GTF299   L     R14,RDRTNR14            return address
         BR    R14
         DROPTEMP                      RELEASE TEMP BASE REGS
         TITLE 'SHOWMVS &REL - Refresh SubPool status'           RS1002
*---------------------------------------------------------------------*
*                                                                     *
*        Refresh Storage Usage                                        *
*                                                                     *
*    User SPLS (Below)       4160K    1180K      2980K        1616K   *
*    Auth SPLS (Below)       6060K     580K      5480K         804K   *
*    User SPLS (Above)      32768K    4388K     28380K        4392K   *
*    Auth SPLS (Above)    1998848K   11448K   1987400K       12720K   *
*                                                                     *
*---------------------------------------------------------------------*
SPL200   ST    R14,RDRTNR14            return address
         L     R4,PSATOLD-PSA(,0)      TCB
         L     R5,TCBTCT-TCB(,R4)      SMF Timing Control Table
         USING SMFTCT,R5
         L     R6,TCTCRTBL             SMF Storage Control Table
         USING TCTCORE,R6
         L     R7,PSAAOLD-PSA(,0)      ASCB
         L     R7,ASCBLDA-ASCB(,R7)    Local Data Area
         USING LDA,R7
         MVC   WKCELL1(1),LINE+5
         LA    R10,WORK256             work area
         CLI   WKCELL1,C'0'             LINE='.SPL00'
         JE    SPL230                  user below
         CLI   WKCELL1,C'4'             LINE='.SPL04'
         JE    SPL240                  user above
         CLI   WKCELL1,C'8'             LINE='.SPL08'
         JE    SPL250                  auth below
         J     SPL260                  auth above (otherwise)
*
SPL230   L     R0,LDALIMIT             LIMIT
         SRL   R0,10                   BYTES -> KILOS
         L     R1,LDALOAL              user region current value
         SRL   R1,10                   BYTES -> KILOS
         LR    R2,R0                   LIMIT
         SLR   R2,R1                   AVAILABLE
         L     R3,TCTLWM               high-watermark
         SRL   R3,10                   BYTES -> KILOS
         STRING64 '    User SPLS (Below)  ',                           X
               ((R0),,R11B),'K',       Limit                           X
               ((R1),,R11B),'K',       In-use                          X
               ((R2),,R12B),'K',       Available                       X
               ((R3),,R14B),'K',       High-watermark                  X
               INTO=LINE
         J     SPL299
*
SPL240   L     R0,LDASIZA              SIZE OF PRIVATE AREA
         SL    R0,LDALIMIT             LIMIT
         SRL   R0,10                   BYTES -> KILOS
         L     R1,LDAHIAL              auth region current value
         SRL   R1,10                   BYTES -> KILOS
         LTR   R2,R0                   LIMIT
         JZ    *+6                     region>16M, jump
         SLR   R2,R1                   AVAILABLE
         L     R3,TCTHWM               high-watermark
         SRL   R3,10                   BYTES -> KILOS
         STRING64 '    Auth SPLS (Below)  ',                           X
               ((R0),,R11B),'K',       Limit                           X
               ((R1),,R11B),'K',       In-use                          X
               ((R2),,R12B),'K',       Available                       X
               ((R3),,R14B),'K',       High-watermark                  X
               INTO=LINE
         J     SPL299
*
SPL250   L     R0,LDAELIM              LIMIT
         SRL   R0,10                   BYTES -> KILOS
         L     R1,LDAELOAL             user region current value
         SRL   R1,10                   BYTES -> KILOS
         LR    R2,R0                   LIMIT
         SLR   R2,R1                   AVAILABLE
         L     R3,TCTELWM              high-watermark
         SRL   R3,10                   BYTES -> KILOS
         STRING64 '    User SPLS (Above)  ',                           X
               ((R0),,R11B),'K',       Limit                           X
               ((R1),,R11B),'K',       In-use                          X
               ((R2),,R12B),'K',       Available                       X
               ((R3),,R14B),'K',       High-watermark                  X
               INTO=LINE
         J     SPL299
*
SPL260   L     R0,LDAESIZA             SIZE OF PRIVATE AREA
         SL    R0,LDAELIM              LIMIT
         SRL   R0,10                   BYTES -> KILOS
         L     R1,LDAEHIAL             auth region current value
         SRL   R1,10                   BYTES -> KILOS
         LTR   R2,R0                   LIMIT
         JZ    *+6                     region=0M, jump
         SLR   R2,R1                   AVAILABLE
         L     R3,TCTEHWM              high-watermark
         SRL   R3,10                   BYTES -> KILOS
         STRING64 '    Auth SPLS (Above)  ',                           X
               ((R0),,R11B),'K',       Limit                           X
               ((R1),,R11B),'K',       In-use                          X
               ((R2),,R12B),'K',       Available                       X
               ((R3),,R14B),'K',       High-watermark                  X
               INTO=LINE
SPL299   L     R14,RDRTNR14            return address
         BR    R14
         DROPTEMP                      RELEASE TEMP BASE REGS
         TITLE 'SHOWMVS &REL - Refresh Virtual storage effects'  RS1002
*---------------------------------------------------------------------*
*                                                                     *
*   Virtual Storage Effects:                                          *
*                                                                     *
*     Getmain with little      some       bad effects:                *
*     Central :     33980    363244    363244                         *
*     Expanded:      8966    138612    138612                         *
*                                                                     *
*---------------------------------------------------------------------*
STG200   ST    R14,RDRTNR14            return address            RS1002
         CLI   LINE+4,C'2'                                       RS1002
         JE    STG220                                            RS1002
         LA    R10,WORK256             work area                 RS1002
         LA    R1,WORK44                                         RS1002
         SYSEVENT STGTEST,TYPE=BYTE                              RS1002
         STRING64 '    Central : ',(WORK44,F,R9B),1X,            RS1002X
               (WORK44+4,F,R9B),1X,(WORK44+8,F,R9B),INTO=LINE    RS1002
         J     STG999                  leave                     RS1002
STG220   DS    0H                                                RS1002
         LA    R10,WORK256             work area                 RS1002
         LA    R1,WORK44                                         RS1002
         SYSEVENT STGTEST,TYPE=BLOCK                             RS1002
         STRING64 '    Expanded: ',(WORK44,F,R9B),1X,            RS1002X
               (WORK44+4,F,R9B),1X,(WORK44+8,F,R9B),INTO=LINE    RS1002
STG999   L     R14,RDRTNR14            return address            RS1002
         BR    R14                                               RS1002
         DROPTEMP                      RELEASE TEMP BASE REGS    RS1002
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
CPU200   ST    R14,RDRTNR14            return address            RS0507
         L     R8,CVTPTR(,0)           CVT address
         USING CVTMAP,R8
         L     R4,CVTOPCTP             RMCT                      RS0507
         L     R5,RMCTRCT-RMCT(,R4)    RCT                       RS0507
         USING RCT,R5                  IRARCT                    RS0507
         LH    R0,RCVCPUA                                        RS0507
         SRL   R0,4                    Divide by 16              RS0507
         CVD   R0,WKCELL1              to decimal                RS0507
         MVC   WORK44(4),=X'40202021'                            RS0507
         ED    WORK44(4),WKCELL1+6    999                        RS0507
         LA    R10,WORK256             work area                 RS0507
         STRING64 '  CPU%: ',(WORK44+1,3),' AFQ: ',(RCVAFQA,F,R9B),    X
               ' UIC: ',(RCVUICA,H,R5B),' MSU(4H): ',(RCTLACS,F,R9B),  X
               INTO=LINE                                         RS1107
         AIF   (NOT D'CVTH7720).CPU999   z/OS R7?                RS1107
         STRING64 '  CPU%: ',(WORK44+1,3),' AFQ: ',(RCVAFQA,F,R9B),    X
               ' UIC: ',(RCVUICA,H,R5B),' MSU(4H): ',(RCTLACS,F,R9B),  X
               ' FLG: ',(RCTFLAG1,,X),                                 X
               INTO=LINE                                         RS0507
         AIF   (NOT D'CVTH7730).CPU999   z/OS R8?                RS1008
         L     R6,RMCTMCT-RMCT(,R4)    MCT                       RS1008
         USING MCT,R6                  IRAMCT                    RS1008
         STRING64 '  CPU%: ',(WORK44+1,3),' AFQ: ',(RCVAFQA,F,R9B),    X
               ' UIC(Cur/Max/Min): ',(MCTCurSystemUIC,H,R5B),'/',      X
               (MCTMaxSystemUIC,H,R5B),'/',                            X
               (MCTMinSystemUIC,H,R5B),                                X
               ' MSU(4H): ',(RCTLACS,F,R9B),                           X
               ' FLG: ',(RCTFLAG1,,X),                                 X
               INTO=LINE                                         RS1008
.CPU999   ANOP                                                   RS1107
CPU999   L     R14,RDRTNR14            return address            RS1002
         BR    R14                                               RS1002
         DROPTEMP                      RELEASE TEMP BASE REGS    RS1002
         TITLE 'SHOWMVS &REL - Refresh status for JES2 Initiators'
*---------------------------------------------------------------------*
*                                                                     *
*        Refresh status for JES2 Initiators (ESA 4.1 and up)          *
*                                                                     *
*---------------------------------------------------------------------*
JES2I200 BAKR  R14,0
         PACK  WKCELL1,LINE+5(10)      get address
         CVB   R7,WKCELL1              convert to binary
         USING PIT,R7
         LA    R10,WORK256             now point to modified line
         LH    R0,$PITPATID+2          length of PITPATID field
         LH    R1,$PITPATID+0          offset to PITPATID field
         LA    R1,PIT(R1)              addr of PITPATID field
         STRING64 2X,((R1),(R0)),INTO=WKCELL1
         LH    R0,$PITCLASS+2          length of PITCLASS field
         LH    R1,$PITCLASS+0          offset to PITCLASS field
         LA    R1,PIT(R1)              addr of PITCLASS field
         STRING64 ((R1),(R0)),INTO=WKCELL2
         STRING64 (WKCELL1,7),'Drained  ',WKCELL2,INTO=LINE
         L     R8,PITASCB              ASCB
         USING ASCB,R8
         LTR   R8,R8                   init active?
         JZ    JES2I290                no, exit
*
         L     R9,ASCBASSB             ASSB
         USING ASSB,R9
         L     R9,ASSBJSAB             JSAB
         USING JSAB,R9
         L     R2,PITSJB               SJB address
         USING SJB,R2
         LH    R15,$SJBJCLAS           get offset to job class
         LA    R1,SJB(R15)             change offset to address
         LH    R15,$SJBCSCB            get offset to CSCB address
         L     R2,SJB(R15)             get CSCB address
         USING CHAIN,R2
*
         LH    R5,$PITSTATO            Get PITSTAT offset        JH1303
         LA    R6,PIT(R5)              R6 -> PITSTAT             JH1303
         AGO   .JRHMAR13A                                        JH1303
         IC    R5,PITHALT$             halt mask for my JES2
*ES2I234TM TM  PITSTAT,*-*             HAS INIT BEEN HALTED ?
*
         MVC   WKCELL3,=C'Inactive'    INDICATE INITIATOR INACTIVE
*        EX    R5,JES2I234TM           HAS INIT BEEN HALTED ?
         EX    R5,=S(X'100'(R9),11(R7)) TM PITSTAT,*_*
         JZ    *+10                    BRANCH IF NOT
         MVC   WKCELL3,=C'Halted  '    INDICATE INITIATOR HALTED
.JRHMAR13A ANOP                                                  JH1303
         MVC   WKCELL3,=C'Inactive'  Assume inactive initiator   JH1303
         TM    0(R6),X'FF'-(PITINIT+PITIDLE) Is it idle ?        JH1303
         JZ    *+10                    ...jif not                JH1303
         MVC   WKCELL3,=C'Halted  '  Indicate initiator halted   JH1303
         STRING64 (WKCELL1,7),WKCELL3,1X,                              X
               (WKCELL2,8),1X,         classes                         X
               47X,                    filler                          X
               (ASCBASID,H,R4B),1X,    ASID (decimal)                  X
               (ASCBASID,,X),1X,       ASID (hex)                      X
               INTO=LINE
*
         LTR   R2,R2                   Was $SJBCSCB null ?       JH1303
         JZ    JES2I290                ...jif so                 JH1303
         CLC   JSABJBNM,CHKEY          init busy?
         JNE   JES2I290                no, jump
*
JES2I235 MVC   WKCELL3,=C'Active  '    initialize status field
*        EX    R5,JES2I234TM           HAS INIT BEEN HALTED ?
*        EX    R5,=S(X'100'(R9),11(R7)) TM PITSTAT,*_*           JH1303
         TM    0(R6),PITHOLDA+PITHOLD1+PITHALTA+PITHALT1         JH1303
         JZ    JES2I235A                                         JH1303
         TM    0(R6),PITBUSY           Busy ?                    JH1303
         JZ    *+10                    BRANCH IF NOT
         MVC   WKCELL3,=C'Halting '    INDICATE INITIATOR HALTING
*
*        TM  PITSTAT,PITHOLDA+PITHOLD1 HAS INIT BEEN STOPPED ?   JH1303
         TM    0(R6),PITHOLDA+PITHOLD1 HAS INIT BEEN STOPPED ?   JH1303
         JZ    *+10                    BRANCH IF NOT
         MVC   WKCELL3,=C'Draining'    INDICATE INITIATOR DRAINING
*
JES2I235A DS   0H                                                JH1303
         STRING64 (WKCELL1,7),WKCELL3,1X,                              X
               (WKCELL2,8),1X,         classes                         X
               JSABJBNM,1X,            job name                        X
               CHSTEP,1X,              step name                       X
               CHPROCSN,1X,            proc-step name                  X
               JSABJBID,1X,            job ID                          X
               ((R1),1),1X,            job class                       X
               JSABUSID,               User ID                         X
               (ASCBASID,H,R5B),1X,    ASID (decimal)                  X
               (ASCBASID,,X),          ASID (hex)                      X
               INTO=LINE
         STRING64 (LINE,,T),2X,JSABGPNM, XCF Group name                X
               INTO=LINE
JES2I290 TR    LINE,TRTPRINT           clean up non-printable
         DROP  R2,R7,R8,R9             CSCB,PIT,ASCB,JSAB
.JES2I299 ANOP
JES2I299 PR
*@@@     $PIT
*        DROP Roland
***********************************************************************
*                                                                     *
*        RECOVERY ROUTINE                                             *
*                                                                     *
***********************************************************************
RECOVERY LA    R15,0012                R15=12
         CR    R0,R15                  SDWA ALLOCATED?
         BASR  R15,0                   LOCAL BASE
         BNE   RCVY$200-*(,R15)        YES, JUMP
         SR    R15,R15                 SET RC=0 (IF R0=12)
         BR    R14                     RETURN TO EXIT PROLOG
RCVY$200 BASR  R15,0
         SAVE  (14,12),,'Recovery'
         BASR  R11,0
         USING *,R11
         LR    R8,R1
         USING SDWA,R8
         LR    R14,R13
         L     R13,SDWAPARM            =A(DYNAM)
         LA    R13,RCVYSAVE-DYNAM(,R13) =A(RCVYSAVE)
         ST    R14,4(,R13)
         ST    R13,8(,R14)
         USING RCVYSAVE,R13
         CLI   RCVYSAVE,X'C4'          abend in VALIDATE macro?
         JE    RCVY$800                yes, retry at R14 with R1=0
         LARL  R2,$NORETRY
         DEVTYPE (2),RCVYSAVE+16      Check for //$NORETRY DD
         LTR   R15,R15                 //$NORETRY DD present in JCL?
         JZ    RCVY$999                yes, continue with abend
         ICM   R0,B'1111',ALET1        cross-memory active?
         JZ    RCVY$233                no, jump
         ALESERV DELETE,ALET=ALET1,MF=(E,ALESERV2)
         XC    ALET1,ALET1             zero ALET for RCVY rtne
RCVY$233 EQU   *
         ICM   R4,B'1111',RETRY        LOAD/TEST RETRY ADDRESS
         JNP   RCVY$999                NO RETRY, CONTINUE WITH ABEND
         MVI   RETRY,X'FF'             INVALIDATE RETRY ADDRESS
         LA    R0,CVTMAP-CVTFIX        LENGTH OF CVT PREFIX
         L     R1,CVTPTR(,0)           CVT ADDRESS
         SLR   R1,R0                   SUBTRACT PREFIX LENGTH
         ST    R1,SDWASR08             R8=CVTADDR
         MVC   SDWASR09,PSATOLD-PSA    R9=TCBADDR
         MVC   SDWASR11,BASEREG        R11 (BASE REG)
         MVC   SDWASR13,SDWAPARM       R13
         L     R13,4(,R13)             R/TM SAVE AREA
         SETRP WKAREA=(R8),RETADDR=(R4),RC=4,  <== RETRY               X
               FRESDWA=YES,RETREGS=YES,REGS=(14,12)
RCVY$800 MVI   RCVYSAVE,0              reset flag
         L     R4,SDWASR14             return addr is R14
         L     R13,4(,R13)             R/TM SAVE AREA
         SETRP WKAREA=(R8),RETADDR=(R4),RC=4,DUMP=NO,    <== RETRY     X
               FRESDWA=YES,RETREGS=YES,REGS=(14,12)
RCVY$999 L     R13,4(,R13)
         SETRP WKAREA=(R8),REGS=(14,12),RC=00
BASEREG  DC    A(BASEADDR)             BASE REGISTER FOR RECOVERY
$NORETRY DC    C'$NORETRY'             do not retry if ddname in JCL
         TITLE 'SHOWMVS &REL - Sub-task'
***********************************************************************
*                                                                     *
*        Sub-task used for asynchronous access to catalogs and vtocs  *
*                                                                     *
*        This sub-task allows impatient users (like me) to see the    *
*        first screen without any delay while volume and vtoc         *
*        information (which require i/o) is obtained for the          *
*        link-list, lpa-list and apf-list displays.                   *
*                                                                     *
*        When the user scrolls to these screens (which takes a few    *
*        seconds), volume and vtoc information will have been obtained*
*        in the background, without the user having to wait.          *
*                                                                     *
*        If a speedy user chains a "find" command to the invocation   *
*        of this program (by issuing "tso showmvs;f lpa-list" for     *
*        example), then he/she will probably get a bunch of question  *
*        marks instead of volume and vtoc information (surprise,      *
*        surprise !!).  After a few seconds of hesitation, this user  *
*        is likely to hit "enter" or scroll (up or down) to see if    *
*        other bizarre things happen, which leaves enough time to the *
*        subtask to finish obtaining the information and replace the  *
*        question marks with pertinent data.                          *
*                                                                     *
*                                                                     *
***********************************************************************
         DROP  R0,R8,R10,R13           LTORG base
SUB_TASK BEGIN_PROC SAVE=NO                                     RS0502
         L     R4,PSATOLD-PSA(,0)      my TCB
         USING TCB,R4
         USING LINE,R10
         ICM   R6,B'1111',TCBUSER      authorized?
         JNZ   SUBT005                 yes, jump
         LPR   R6,R1                   A(DYNAM)
         ST    R6,0(,R13)              pass addr to ETXR
*        DC    H'0'
         J     SUBT006
         USING DYNAM,R6                main task's DYNAM
SUBT005  EQU   *
         CLC   TCBPKF,PROTKEY          KEY=4 ?
         JE    SUBT006                 no, jump
         MODESET KEYADDR=PROTKEY,WORKREG=2 switch to KEY4 if AUTH=ESR
         L     R0,=A(DYNAML)           LENGTH OF DYNAMIC STORAGE AREA
*        LA    R0,DYNAML               length of work-area
         SLR   R1,R1                   LOC=BELOW
         LARL  R2,STORAGE_SP230
         SYNCHX (2),STATE=SUPV,RESTORE=YES
         J     SUBT007
SUBT006  EQU   *
         L     R0,=A(DYNAML)           LENGTH OF DYNAMIC STORAGE AREA
*        LA    R0,DYNAML               length of work-area
         GETMAIN R,LV=(0)              work-area for sub-task
SUBT007  EQU   *
         DROP  R6                      main task's DYNAM
*
*        Copy the mother-task's work-area to the sub-task's
*
         LR    R13,R1                  Addr of "to" area
         USING DYNAM,R13               sub-task's DYNAM area
         LR    R14,R1                  Addr of "to" area
         L     R15,=A(DYNAML)          LENGTH OF DYNAMIC STORAGE AREA
*        LA    R15,DYNAML              length
         LR    R0,R6                   Addr of "from" area
         L     R1,=A(DYNAML)           LENGTH OF DYNAMIC STORAGE AREA
*        LA    R1,DYNAML               length
         MVCL  R14,R0                  move work-area
*
         L     R8,CVTPTR(,0)           CVT ADDRESS
         SH    R8,=AL2(CVTMAP-CVTFIX)  point at CVT prefix
         USING CVTFIX,R8               PERMANENT ASSIGNMENT
*                                                                RS0505
*        Estimate processor speed with a BCTR loop               RS0505
*                                                                RS0505
         ICM   R10,B'1111',CPUONLINE   processor speed line      RS0505
         JZ    SUBT060                                           RS0505
         BRASL R15,SUBT043                                       RS0505
         MVI   1(R2),X'01'             CHANGE R0,R2 TO R0,R1     RS0505
         BR    R14                                               RS0505

SUBT043  STIMER TASK,(R15),BINTVL==F'10' TEN 1/100TH OF A SECOND RS0505
         SLR   R0,R0                   BCTR COUNT                RS0505
         LA    R2,WKCELL1              WORK AREA                 RS0505
         MVC   WKCELL1(2),=X'0602'     MOVE BCTR R0,R2 Instr.    RS0505
         BALR  R1,R2                   EXECUTE LOOP              RS0505
         LPR   R15,R0                  NUMBER OF ITERATIONS      RS0505
*                                                                RS0505
SUBT045  L     R14,CPUONLINE+4         # of CPUs on-line         RS0505
         MR    R14,R14                 iterations * #CPU         RS0505
         D     R14,=F'100000'          duration was TEN 1/100TH  RS0505
         CVD   R15,WKCELL1             dived by 100000 for Millions0505
         MVC   WORK256(6),=X'402020202120'   in a second         RS0505
         ED    WORK256(6),WKCELL1+5    0999                      RS0505
         STRING64 '  Processor Speed: ',(WORK256+2,4),           RS0505X
               ' Million BCTR Instructions per Second.',         RS0505X
               INTO=LINE                                         RS0505
*              (WKCELL1,8,X),1X,(WORK256,8,X),          DEBUG    RS0505
*
*        LASTCLPA routine
*
SUBT060  L     R2,CVTASMVT             POINT TO ASM VECTOR TABLE
         L     R2,ASMPART-ASMVT(,R2)   POINT TO PAGE ACT REF TABLE
         LA    R3,PARTENTS-PART(,R2)   FIRST PART ENTRY
         USING PARTENT,R3
         L     R4,PAREPATP             ADDRESS OF PAT
         USING PAT,R4
*
*        Read the 1st record on the 1st track of the PLPA data set and
*        translate the "Quick Start" time-stamp at offset 32 (decimal).
*        Starting with z/OS R3 it is the second record           RS0404
*
         ICM   R10,B'1111',CVIOLINE    IPL with CLPA=NO  ?
         JZ    SUBT065                 NO, EXIT
         L     R0,PAREUCBP             UCB address
         LA    R1,PATCCHHB             CCHH of TPARTBLE
         LA    R2,2                    Record-Number 2           RS0404
         LARL  R9,K0EXCP
         SYNCHX (9),STATE=SUPV,KEYADDR=PROTKEY,AMODE=31,RESTORE=YES,   X
               MF=(E,SYNCHL)                                     RS1002
         LTR   R15,R15                 EXCP went OK?
         JNZ   SUBT068                 no, issue error message
         LA    R1,WORK256+32           TPARTIME
         BRASL R14,STCKCONV            convert it to yyyymmddhhmmsshh
         STRING64 '  Last Quick Start (CVIO) Date: ',STCKDATE,         X
               '   Time: ',(STCKTIME,8),                               X
               INTO=LINE
*
*        Read the 1st record on the 2nd track of the PLPA data set and
*        translate the "Cold Start" time-stamp at offset 24 (decimal).
*        Starting with z/OS R3 it is the second record           RS0404
*
*        Note that this routine only works on 3380 and 3390 DASD.
*        On a 3380, it reads the QSR which is record no 11.
*        On a 3390, it reads the EQSR which is record no 14.
*        The QSR and the EQSR have a similar format: both contain
*        the Cold Start time-stamp at offset 24.
*
SUBT065  ICM   R10,B'1111',CLPALINE    Quick Start?
         JZ    SUBT069                 NO, EXIT
         L     R1,PATCCHHB             CCHH of 1st track
         LA    R1,1(,R1)               change HH to HH+1
         ST    R1,WKCELL4              Store CCHH
         L     R0,PAREUCBP             UCB address
         LA    R1,WKCELL4              QSR (3380) or EQSR (3390)
         LA    R2,2                    Record-Number 2           RS0404
         LARL  R9,K0EXCP
         SYNCHX (9),STATE=SUPV,KEYADDR=PROTKEY,AMODE=31,RESTORE=YES,   X
               MF=(E,SYNCHL)                                     RS1002
         LTR   R15,R15                 EXCP went OK?
         JNZ   SUBT068                 no, issue error message
         LA    R1,WORK256+24           QSRSYNCH
         BRASL R14,STCKCONV            convert it to yyyymmddhhmmsshh
         STRING64 '  Last Cold Start (CLPA) Date: ',STCKDATE,          X
               '   Time: ',(STCKTIME,8),                               X
               INTO=LINE
         J     SUBT069
SUBT068  EQU   *
         STRING64 '  ** Error reading PLPA Data Set ** ',              X
               WORK256,INTO=LINE
SUBT069  EQU   *
         DROP  R3,R4                   PARTENT,PAT
*
         L     R10,LINE1PTR            First line
*
*        VOLSER
*LOOP
SUBT111  CLI   VOLSER,C'?'             VOLSER FOUND ALREADY?
         JNE   SUBT121                 YES, JUMP
         MVC   VOLSER,=C'??????'       NOT FOUND
         L     R14,=X'44,00,00,00'     CAMLST FLAGS
         LA    R15,DSNAME              ENTRY NAME
         SLR   R0,R0                   NO CVOL PTR
         LA    R1,WORK256              WORK AREA
         STM   R14,R1,CAMLST1          BUILD CAMLIST
         LOCATE CAMLST1                GET VOLSER FROM CATALOG
         LTR   R15,R15
         JNZ   SUBT121                 NOT FOUND (OR OTHER ERROR)
         MVC   VOLSER,WORK256+6        MOVE VOLSER
         CLI   CATUNCAT,C'?'           cat/uncat status requested?
         JNE   SUBT121                 no, jump
         MVI   CATUNCAT,C' '           CATALOGED=YES
*UNCAT=UNCAT
SUBT121  CLI   CATUNCAT,C'?'           CATALOG STATUS KNOWN ALREADY?
         JNE   SUBT141                 YES, JUMP
         MVC   CATUNCAT,=C'UNCAT'      MOVE STATUS
         L     R14,=X'44,00,00,00'     CAMLST FLAGS
         LA    R15,DSNAME              ENTRY NAME
         SLR   R0,R0                   NO CVOL PTR
         LA    R1,WORK256              WORK AREA
         STM   R14,R1,CAMLST1          BUILD CAMLIST
         LOCATE CAMLST1                GET VOLSER FROM CATALOG
         LTR   R15,R15
         JNZ   SUBT141                 NOT FOUND (OR OTHER ERROR)
         CLC   VOLSER,WORK256+6        SAME VOLSER?
         JNE   SUBT141                 NO, JUMP
         MVC   CATUNCAT,BLANKS         CATALOGED=YES
*
SUBT141  LA    R10,LINE+L'LINE     <== NEXT LINE
         CLI   LINE,00                 LAST LINE?
         JNE   SUBT111                 NO, LOOP MORE
*        DC    H'0'                    Force abend 0C1
*ENDLOOP
*
*        PASS 2: CROSS-REFERENCE LNK/LPA/APF TABLE ENTRIES
*
         L     R10,LINE1PTR            First line
*
*        UNCAT=APF
*LOOP
SUBT201  CLI   LINE_APF,C'?'           LNK/LPA/APF STATUS REQUIRED?
         JNE   SUBT205                 NO, JUMP
         LM    R15,R1,APFTABLE         APF TABLE                 RS1199
         BRASL R14,SUBT820             SCAN APFTABLE
         DC    C'APF '                 LITERAL
         MVC   LINE_APF,0(R1)          LITERAL OR SPACES
         CLI   LINE_LNK,C' '           UNCAT APFLST ENTRY?
         JNE   SUBT205                 YES, JUMP
*
*        LNK=LPA
*
         LM    R15,R1,LPATABLE         LPA TABLE
         BRASL R14,SUBT820             SCAN APFTABLE
         DC    C'LPA '                 LITERAL
         MVC   LINE_LPA,0(R1)          LITERAL OR SPACES
*
*        LPA=LNK
*
         LM    R15,R1,LNKTABLE         LNK TABLE
         BRASL R14,SUBT820             SCAN APFTABLE
         DC    C'LNK '                 LITERAL
         MVC   LINE_LNK,0(R1)          LITERAL OR SPACES
*                                                                RS1199
*        Sorry but I have to move the code to the subtask becauseRS1199
*        of the poor performance for this callable service.      RS1199
SUBT205  DS    0H
         CLI   LINE_SMS_ATTR,C'?'      SMS attributes ?          RS1199
         JNE   SUBT209                  no, jump
         MVC   LINE_SMS_ATTR(7),=CL7'n/a'                        RS1199
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                 RS1199
         JNO   SUBT209                 no, jump            RS1199JH1303
         XCALL IGWASMS,                                                X
               (LRETCODE,              Returcode                       X
               LRSNCODE,               Reasoncode                      X
               WORK256+25,             Problemdata                     X
               =A(44),                 Length DSNAME                   X
               DSNAME,                 Dsname                          X
               WORK256+190,            SMS-DATA                        X
               DSTYPE)                 Type                      RS1199
         LTR   R15,R15                 Test return code          RS1199
         JNZ   SUBT209                 bad rc                    RS1199
         CLC   DSTYPE,=F'0'                                      RS1199
         JNE   *+10
         MVC   LINE_SMS_ATTR(5),=CL5'PO'                         RS1199
         CLC   DSTYPE,=F'1'
         JNE   *+10                                              RS1199
         MVC   LINE_SMS_ATTR(5),=CL5'PDSE'                       RS1199
         CLC   DSTYPE,=F'2'                                      RS1199
         JNE   *+10
         MVC   LINE_SMS_ATTR(5),=CL5'HFS'                        RS1199
         MVC   LINE_SMS_ATTR+5(8),WORK256+190                    RS1199
         MVC   LINE_SMS_ATTR+14(8),WORK256+190+30                RS1199
         MVC   LINE_SMS_ATTR+23(8),WORK256+190+60                RS1199
*                                                                RS1199
.SUBT209  ANOP                                                   RS1199
SUBT209  LA    R10,LINE+L'LINE     <== NEXT LINE
         CLI   LINE,00                 LAST LINE?
         JNE   SUBT201                 NO, LOOP MORE
*ENDLOOP
*
*        PASS 3: DETECT TIOT DATA SETS IN LPALST OR LNKLST
*
         ICM   R10,B'1111',TIOTLINES   First TIOT line
         JZ    SUBT400                 empty, exit
*
*        TIOT=LPA
*LOOP
SUBT301  LM    R15,R1,LPATABLE         LPA TABLE
         BRASL R14,SUBT830             SCAN APFTABLE
         DC    C'LPA '                 LITERAL
         STRING64 (LINE,,T),1X,((R1),4),INTO=LINE append 'LPA' or space
*
*        TIOT=LNK
*
SUBT302  LM    R15,R1,LNKTABLE         LNK TABLE
         BRASL R14,SUBT830             SCAN APFTABLE
         DC    C'LNK '                 LITERAL
         STRING64 (LINE,,T),1X,((R1),4),INTO=LINE append 'LNK' or space
*
SUBT309  LA    R10,LINE+L'LINE     <== NEXT LINE
         CL    R10,TIOTLINES+4         LAST LINE?
         JL    SUBT301                 NO, LOOP MORE
*ENDLOOP
*
*        PASS 4: READ F1-DSCB TO DISPLAY CREATION DATE
*                THIS PASS TAKES THE LONGEST AND IS DONE LAST
*
SUBT400  L     R10,LINE1PTR            First line
         SLR   R6,R6                   extent counter
*LOOP
SUBT401  CLI   YYYYMMDD,C'?'           DATE FOUND ALREADY?
         JNE   SUBT409                 YES, JUMP
         MVC   YYYYMMDD,BLANKS         BLANK OUT DATE FIELD
         CLC   VOLSER,=C'MIGRAT'       Has HSM migrated the data set?
         JE    SUBT408M                Yes, jump
         CLI   VOLSER,C'?'             Got a Volser?
         JE    SUBT408N                no, jump (not found)
         L     R14,=X'C1,00,00,00'     CAMLST FLAGS
         LA    R15,DSNAME              DATA SET NAME
         LA    R0,VOLSER               VOLUME SERIAL
         LA    R1,DS1FMTID             WORK AREA
         STM   R14,R1,CAMLST1          BUILD CAMLIST
         AIF   (NOT D'CVTH7760).SUBT402 z/OS R11?                RS1110
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010111').SUBT402      RS1110
         TM    HBB7760,L'HBB7760       running on z/OS R11       RS1110
         JZ    SUBT402                  no, leave                RS1110
         OBTAIN CAMLST1,EADSCB=OK      READ F1-DSCB              RS1110
         J     SUBT403                                           RS1110
.SUBT402 ANOP                                                    RS1110
SUBT402  DS    0H                                                RS1110
         OBTAIN CAMLST1                READ F1-DSCB              RS1110
SUBT403  DS    0H                                                RS1110
         LTR   R1,R15
         JNZ   SUBT408E                NOT FOUND (OR OTHER ERROR)
         LA    R1,DS1CREDT             creation date: X'50,000B'
         BRASL R14,DSCBDATE            convert to X'00800011F'
         STRING64 (WKCELL1+4,P,YYYYMMDD),INTO=YYYYMMDD CONVERT DATE
         CLI   LINE_REFD,C'?'          last-referenced date needed?
         JNE   SUBT406                 no, jump
         LA    R1,DS1REFD              last-ref date: X'50,000B'
         BRASL R14,DSCBDATE            convert to X'00800011F'
         STRING64 (WKCELL1+4,P,YYYYMMDD),INTO=LINE_REFD CONVERT DATE
*
*        Check if the data set specified in the APF-list
*        with *SMS* is really an SMS-managed volume
*
         CLC   =C'*SMS*',LINE_APFVOL   APF entry for SMS-managed DS ?
         JNE   SUBT406                 no, jump
         XC    VOLSER,LINE_APFVOL      swap *SMS* and actual volser
         XC    LINE_APFVOL,VOLSER      swap *SMS* and actual volser
         XC    VOLSER,LINE_APFVOL      swap *SMS* and actual volser
         XC    WORK256,WORK256         clear work area
         LA    R2,WORK256              100-byte work area for UCBSCAN
         LA    R7,100(,R2)             48-byte UCB area
         UCBSCAN COPY,                                                 X
               VOLSER=LINE_APFVOL,     volser                          X
               DEVCLASS=DASD,          device class                    X
               DYNAMIC=YES,            DYNAMIC=NO & DYNAMIC=YES        X
               RANGE=ALL,              3-digit & 4-digit               X
               WORKAREA=(R2),          100-byte work area              X
               UCBAREA=(R7),           48-byte UCB area                X
               MF=(E,UCBSCANL,COMPLETE)
         LTR   R1,R15                  UCBSCAN OK?
         JNZ   SUBT406                 no, jump
         TM    UCBFL5-UCBOB(R7),UCBSMS SMS-managed volume?
         JO    SUBT406                 yes, jump
         STRING64 'NOSMS',INTO=CATUNCAT volume is not SMS-managed
SUBT406  EQU   *
         CL    R10,LNKTABLE+0          LINK-LIST?
         JL    SUBT407                 NO, JUMP
         CL    R10,LNKTABLE+8          LINK-LIST?
         JH    SUBT407                 NO, JUMP
         STRING64 (DS1NOEPV,FL1,R3B),' Ext',INTO=(LINE+80,7)       %RS
         SLR   R0,R0
         IC    R0,DS1NOEPV
         ALR   R6,R0                   Tally allocated extents
*
SUBT407  CLI   CATUNCAT,C'%'           SYS1.DUMPxx ?
         JNE   SUBT409                 NO, JUMP
         MVC   CATUNCAT(5),=C'Empty'   NO, TELL IT
         ICM   R0,B'0011',DS1LSTAR     DATA SET FULL?
         JZ    SUBT409                 NO, JUMP
         STRING64 'Full ',INTO=CATUNCAT                          RS0902
*
*        Read dump title from sys1.dump data set
*
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         JZ    SUBT409                 NO, JUMP
         CLI   NEXTLINE,C'.'           next line empty ?
         JNE   SUBT409                 NO, JUMP
         STRING64 '    Title=(none)',INTO=NEXTLINE
         UCBLOOK NOPIN,                do not pin the UCB              X
               VOLSER=VOLSER,          volume serial                   X
               UCBPTR=WKCELL2,         UCB addr                        X
               DYNAMIC=YES,            search static and dynamic UCBs  X
               RANGE=ALL,              3 and 4digit devices      RS0201X
               MF=(E,WORK256,COMPLETE)
         LTR   R1,R15                 UCB located?
         JNZ   SUBT408E                no, issue error message
         STRING64 '    Title=n/a ','Compressed',INTO=NEXTLINE    RS0201
         TM    DS1FLAG1,DS1COMPR                                 RS0201
         JNZ   SUBT409                                           RS0201
         STRING64 '    Title=n/a ','PS-E',INTO=NEXTLINE          RS0201
         TM    DS1SMSFG,DS1STRP                                  RS0201
         JNZ   SUBT409                                           RS0201
         STRING64 '    Title=n/a ','EXCP error',INTO=NEXTLINE    RS0201
         L     R0,WKCELL2              addr of the UCB
         LA    R1,DS1EXT1+2            CCHH of first track
         LA    R2,1                    Record-Number 1           RS0404
         LARL  R9,K0EXCP
         SYNCHX (9),STATE=SUPV,KEYADDR=PROTKEY,AMODE=31,RESTORE=YES,   X
               MF=(E,SYNCHL)                                     RS1002
         LTR   R1,R15                 EXCP went OK?
         JNZ   SUBT409                 no, issue error message
*Jm      LA    R1,WORK256+188          time stamp at offset 188
         MVI   NEXTLINE,C'.'           reset for STCKCONV          +JM
         LA    R1,WORK256+72           time stamp at offset 72     +JM
         BRASL R14,STCKCONV            convert it to yyyymmddhhmmsshh
         STRING64 '    Date=',STCKDATE,                                X
               ' Time=',(STCKTIME,8),                                  X
               ' Title=',(WORK256+88,100),                             X
               INTO=NEXTLINE
.SUBT408 ANOP
         J     SUBT409                 next data set
*
SUBT408E DS    0H                      Error |||
         CLI   NEXTLINE,C'.'           next line empty ?
         JNE   SUBT409                 NO, JUMP
         STRING64 '    Title=(R15=',((R1),,X),                         X
               ',R0=',((R0),,X),')',INTO=NEXTLINE
         J     SUBT409                 next data set
SUBT408N DS    0H                      Error |||
         MVC   VOLSER,BLANKS           Move space to Volser
         MVC   CATUNCAT,BLANKS         full/empty status unknown
         CLI   NEXTLINE,C'.'           next line empty ?
         JNE   SUBT409                 NO, JUMP
         STRING64 '    Data set not found (Obtain)',INTO=NEXTLINE
         J     SUBT409                 next data set
*
SUBT408M MVC   CATUNCAT,BLANKS         full/empty status unknown
         CLI   NEXTLINE,C'.'           next line empty ?
         JNE   SUBT409                 NO, JUMP
         STRING64 '    Data set has been migrated',INTO=NEXTLINE
*
SUBT409  DS    0H
         LA    R10,LINE+L'LINE     <== NEXT LINE
         CLI   LINE,00                 LAST LINE?
         JNE   SUBT401                 NO, LOOP MORE
*ENDLOOP
         ICM   R10,B'1111',LINKXTNT    link-list hdr line
         JZ    SUBT799                 zero, jump
         STRING64 (LINE,,T),' (',((R6),,L),' allocated)',INTO=LINE
SUBT799  EXIT                          GOOD BYE
*---------------------------------------------------------------------*
*        Sub-routine: convert DS1CREDT to CVTDATE format              *
*---------------------------------------------------------------------*
DSCBDATE SLR   R0,R0
         ICM   R0,B'0001',0(R1)        CREATION YEAR
         CVD   R0,WKCELL1
         ICM   R0,B'0011',1(R1)        CREATION DAY
         SLR   R1,R1
         ICM   R1,B'0011',WKCELL1+6    ....YYYC
         SRL   R1,4                    ....0YYY
         CVD   R0,WKCELL1              0000DDDC
         STH   R1,WKCELL1+4            0YYYDDDC
         BR    R14
*---------------------------------------------------------------------*
*        Sub-routine: cross-reference LNK/LPA/APF table entries       *
*---------------------------------------------------------------------*
SUBT820  LTR   R15,R15                 TEST
         JZ    SUBT888                 TEST
*--LOOP
SUBT821  CLC   DSNAME,DSNAME-LINE(R15) MY DSNAME?
         JNE   SUBT824                 NO, JUMP
         CLC   VOLSER,VOLSER-LINE(R15) MY VOLSER?
         JE    SUBT888                 YES, QUIT
SUBT824  BRXLE R15,R0,SUBT821          NEXT ENTRY
*--ENDLOOP
         J     SUBT887
*---------------------------------------------------------------------*
*        Sub-routine: show LNK/LPA status for TIOT entries            *
*---------------------------------------------------------------------*
SUBT830  LTR   R15,R15                 TEST
         JZ    SUBT888                 TEST
*--LOOP
SUBT831  CLC   LINE_DSN2,DSNAME-LINE(R15) MY DSNAME?
         JNE   SUBT834                 NO, JUMP
         CLC   LINE_VOL2,VOLSER-LINE(R15) MY VOLSER?
         JE    SUBT888                 YES, QUIT
SUBT834  BRXLE R15,R0,SUBT831          NEXT ENTRY
*--ENDLOOP
SUBT887  LA    R1,BLANKS               APF=NO
         B     4(,R14)
SUBT888  LR    R1,R14                  APF=YES
         B     4(,R14)
*---------------------------------------------------------------------*
*                                                                     *
*        KEY=ZERO EXCP                                                *
*                                                                     *
*        Build DCB, DEB, IOB and channel program to read 256 bytes    *
*        of data using the UCB addr and CCHH passed by caller.        *
*        EXCP is issued in KEY=ZERO which requires no OPEN.           *
*                                                                     *
*        This code is used to read the following data sets:           *
*          1. PLPA paging data set (to get date of last CLPA)         *
*          2. SYS1.DUMPxx (to get dump title)                         *
*                                                                     *
*        R0 = UCB address                                             *
*        R1 = CCHH                                                    *
*        R2 = Record number                                           *
*                                                                     *
*---------------------------------------------------------------------*
K0EXCP   L     R1,0(,R1)               load CCHH
         STM   R0,R1,WKCELL1           save UCB address and CCHH
         LA    R5,DCB_IOB_DEB          work area (DCB)
         USING IHADCB,R5
         MVI   DCBMACF1,X'D0'          MACRF=E
         MVI   DCBMACF2,X'08'          MACRF=E
         MVI   DCBOFLGS,DCBOFOPN       DCB is OPEN
*
         LA    R0,IOBSTDRD             IOB addr
         ST    R0,DCBIOBAD             store IOB addr into DCB
         MVI   IOBFLAG1,IOBCMDCH+IOBUNREL flags
         LA    R0,WKCELL1              I/O ECB
         ST    R0,IOBECBPT             I/O ECB
         ST    R5,IOBDCBPT             STORE DCB ADDR INTO IOB
         STCM  R1,B'1111',IOBSEEK+3    Store CCHH into IOB
         STCM  R2,B'0001',IOBSEEK+7    Store Record-Number       RS0404
*        MVI   IOBSEEK+7,1             R=1                       RS0404
*
         LA    R6,END_OF_IOB           work area (DEB)
         USING DEBAVT,R6
         LA    R14,CVTBRET             dummy appendage routine
         LR    R15,R14                 dummy appendage routine
         LR    R0,R14                  dummy appendage routine
         LR    R1,R14                  dummy appendage routine
         LR    R2,R14                  dummy appendage routine
         STM   R14,R2,DEBAVT           Appendage Vector Table
         MVI   DEBAMLNG,16             length of access method section
         MVI   DEBNMEXT,1              number of extents in DEBDASD
         ST    R5,DEBDCBAD             STORE DCB ADDR INTO DEB
         MVZ   DEBPROTG,PROTKEY        protection key into DEB
         OI    DEBDEBID,X'0F'          DEB identifier
         ST    R6,DEBAPPAD             addr of Appendage Vector Table
         MVI   DEBEXSCL,4              lngth of DASD section (16 bytes)
         LA    R0,DEBBASIC             DEB basic section
         ST    R0,DCBDEBAD             Store DEB addr into DCB
         ST    R9,DEBTCBAD             Store TCB addr into DEB
         LA    R7,DEBBASND             end of basic section
         USING DEBDASD,R7
         CLI   WKCELL1,X'00'           UCB below ?    RS1101
         JE    K0EXCP_10                 ok, continue
         IOSCAPU CAPTUCB,UCBPTR=WKCELL1,CAPTPTR=WKCELL2,               X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,WORK256)  RS1101
         MVC   WKCELL1(4),WKCELL2      move captured UCB         RS1101
         LTR   R15,R15                                           RS1101
         JZ    K0EXCP_10                                         RS1101
         STRING64 'RC=',(LRETCODE,,X), RC                              X
               ' RSN=',(LRSNCODE,,X),  RSN                             X
               INTO=WORK256                                      RS1101
         J     K0EXCP99                                          RS1101
K0EXCP_10 DS    0H                                               RS1101
         LM    R0,R1,WKCELL1           reload UCB address and CCHH
         ST    R0,DEBUCBAD             Store UCB address
         MVI   DEBDVMOD,X'58'          file mask: no write, no seek
         STCM  R1,B'1111',DEBSTRCC     store begin CCHH
         STCM  R1,B'1111',DEBENDCC     store end CCHH
         MVI   DEBNMTRK+1,1            single-track extent
         LA    R0,CCW2                 work area for CCWs
         ST    R0,IOBSTART             start of channel program
         LA    R14,IOBSEEK+3           seek addr
         LA    R15,5                   length of search arg
         LA    R0,CCW2                 search ccw
         LA    R1,1                    non-zero value
         LA    R2,WORK256              work-area
         LA    R3,L'WORK256            data length
         STM   R14,R3,CCW2             build CCW chain
         MVI   CCW2,X'31'              Command: search ID equal
         MVI   CCW2+4,X'40'            flags: CC
         MVI   CCW3,X'08'              Command: TIC
         MVI   CCW4,X'0E'              Command: Read data
         MVI   CCW4+4,X'20'            flags: SLI
         MVI   WKCELL1,0               clear ECB
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0 for EXCP
         EXCP  IOBSTDRD                issue EXCP in key=0
         MODESET KEYREG=(2)            switch back to own key
         WAIT  1,ECB=WKCELL1           wait for completion
         SLR   R15,R15                 RC=0
         CLI   WKCELL1,X'7F'           read OK?
         JE    K0EXCP99                yes, exit
         STRING64 'CC=',(WKCELL1,1,X), ECB CC                          X
               ' CSW=',(IOBCSW,,X),                                    X
               ' UCB=',(DEBUCBAD+1,3,X),                               X
               ' CCHHR=',(IOBSEEK+3,5,X),                              X
               INTO=WORK256
K0EXCP99 EXIT
         DROP
         IKJENDP
*---------------------------------------------------------------------*
*        DESCRIPTION OF A PRINT LINE                                  *
*---------------------------------------------------------------------*
         DSECT
LINE     DS    CL&LINESIZE             CURRENT LINE
DSNAME    EQU  LINE+2,44
ASID      EQU  LINE+2+18,3
TOTAL     EQU  LINE+2+67,8
VOLSER    EQU  LINE+2+44+3,6
DEVTYPE   EQU  LINE+2+44+3+6+3,8
YYYYMMDD  EQU  LINE+2+44+3+6+2,8       YYYYMMDD
CATUNCAT  EQU  LINE+2+44+3+6+2+8+2,5   UNCAT
LINE_LNK  EQU  CATUNCAT+0,3            LNK
LINE_LPA  EQU  LINE_LNK+5,3            LPA
LINE_APF  EQU  LINE_LPA+5,3            APF
LINE_SMS_ATTR  EQU  LINE_APF+14,3       SMS Attributes           RS1199
LINE_REFD EQU  LINE_APF+5,8            DS1REFD
LINE_APFVOL EQU LINE_REFD+10,6         APF Volume or SMS
NEXTLINE DS    CL(L'LINE)              NEXT LINE
*---------------------------------------------------------------------*
*        DYNAMIC STORAGE AREA (RMODE=ANY)
*---------------------------------------------------------------------*
DYNAM    DSECT                         DYNAMIC STORAGE AREA
*        DS    18F                     SAVE AREA FOR MAINLINE
         DS    36F                     SAVE AREA FOR MAINLINE
PARMADDR DS    A                       ADDR OF CALLER'S PARM OR CBUF
UNPROTWK DS    A,F                     addr of unprotected work area
RCVYSAVE DS    36F                     Savearea for Recovery     RS0406
SWITCHES DS    XL8                     various switches and flags
        #SWITCH INIT_DONE              INITIALIZATION DONE
        #SWITCH AUTHORIZED             Running Authorized
        #SWITCH AUTH_ESR               Authorized by IGX00GSF or ISFSVC
        #SWITCH PGM_INVOKED            invoked as a program (PARM)
        #SWITCH CMD_INVOKED            invoked as a TSO command (CPPL)
        #SWITCH NON_TSO                address-space type
        #SWITCH TSO_ON_LINE            address-space type
        #SWITCH TSO_BATCH              address-space type
        #SWITCH ISPF_AVAILABLE         ISPF services are available
        #SWITCH BRIF_MODE              output using BRIF
        #SWITCH EDIF_MODE              output using EDIF
        #SWITCH HARDCOPY               BRIF/HARDCOPY switch
        #SWITCH PUTLINE                PUTLINE
        #SWITCH SHORT_PUTLINE          SHORT_PUTLINE
        #SWITCH PARMCAPS               PARM=CAPS
        #SWITCH SUB_TASK_REQUESTED     ATTACH requested
        #SWITCH SUB_TASK_ATTACHED      ATTACH successful
        #SWITCH MSTJCL_PARMLIB         Master JCL in PARMLIB
        #SWITCH HBB7706                z/OS R3                   RS0102
        #SWITCH HBB7707                z/OS R4                   RS0602
        #SWITCH HBB7708                z/OS R5                   RS1103
        #SWITCH HBB7709                z/OS R6                   RS0704
        #SWITCH HBB7720                z/OS R7                   RS0405
        #SWITCH HBB7730                z/OS R8                   RS0106
        #SWITCH HBB7740                z/OS R9                   RS0907
        #SWITCH HBB7750                z/OS R10                  RS0408
        #SWITCH HBB7760                z/OS R11                  RS0408
        #SWITCH HBB7770                z/OS R12                  RS1209
        #SWITCH HBB7780                z/OS R13                  RS0112
        #SWITCH HBB7790                z/OS V2R1                 JH0112
        #SWITCH HBB77A0                z/OS V2R2                 JH1214
        #SWITCH HDZ11G0                DFSMS z/OS                RS0209
        #SWITCH SHASMIG                SYS1.SHASMIG available
        #SWITCH TCP_MODE               output using TCP/IP       RS0302
        #SWITCH SMF_MODE               output using SMF          RS0904
        #SWITCH ARCHLVL2               64bit mode                RS1002
*
WKCELL1  DS    D                       WORK AREA
WKCELL2  DS    D                       WORK AREA
WKCELL3  DS    D                       WORK AREA
WKCELL4  DS    D                       WORK AREA
TENWORDS DS    10F                     WORK AREA
PARSE_ANSWER DS A                      A(IKJPARMD)
OLDPICA  DS    A                       Old SPIE/ESPIE pointer
JSTCB    DS    A(TCB)                  ADDRESS OF THE JOB-STEP TCB
OWN_CDE  DS    A(CDENTRY)              my own CDE or LPDE
OWN_NAME DS    C'SHOWMVS '             my own name
PRISUBNM DS    C'JES2'                 name of primary sub-system
PRISUBTY DS    C'JES2'                 type of primary sub-system
PRISUBCT DS    A(SSCT)                 SSCT of primary sub-system
JES2ASCB DS    A(ASCB)                 addr of JES2's ASCB
ALPACDE1 DS    A(CDENTRY)              first CDE on ALPAQ or DLPAQ
JCLPARM  DS    CL25                    caller's parm             RS0302
J2PLVL   DS    XL1                     JES2 product # (binary)   JH1303
PADHCCT  DS    F                       HCCT address              JH1303
PADADDR  DS    F                      JES2 PROCLIB PAD address   JH1303
PADXASCB DS    F                       JES2AUX ASCB address      JH1303
PSOSTOKN DS    XL8                     Stoken for dataspace      JH1303
PSOALET  DS    F                       ALET for dataspace        JH1303
$PITSTATO DS   H                       PITSTAT offset in $PIT    JH1303
$PITFLAGSO DS  H                       PITFLAGS offset in $PIT   JH1303
IDENT_IP DS    0CL16                                             RS0302
IP_NAME  DS    CL8                DEFAULT TO FIRST ONE AVAILABLE RS0302
MY_NAME  DS    CL8                MY ADDR SPACE NAME OR JOBNAME  RS0302
IP_NAME_VAR DS    0CL16              SOCKET NAME STRUCTURE       RS0302
IP_FAMILY   DS    AL2                FAMILY                      RS0302
IP_PORT_NO  DS    AL2                PORT                        RS0302
IP_ADDRESS  DS    AL4                ADDRESS                     RS0302
IP_RES      DS    XL8                RESERVED                    RS0302
SMF_TYPE    DS    X                  SMFTYPE                     RS0904
SMF_TYPE_1  DS    F                  SMFTYPE                     RS0904
SMF_SUBTYPE DS    F                  SMFTYPE                     RS0904
TME         DS    F                  TIME BINARY, 1/100 SECONDS  RS0904
            DS    F                  ZERO                        RS0904
DTE         DS    F                  DATE PACKED 0YYYYDDD        RS0904
            DS    F                  ZERO                        RS0904
TMEDTE EQU TME,*-TME                 TIME/DATE GIVEN BY TIME MACROS0904
*
END_PROC DS    2A                      RETURN/RETRY ADDRESS
RETRY    EQU   END_PROC+4,4,C'A'       RETRY ADDRESS
RDRTNR14 DS    A(R14)                  RETURN ADDRESS
NUMLINES DS    F                       NUMBER OF LINES
CURRECNO DS    F                       current record number (EDIF)
IEFEB4UV DS    V(IEFEB4UV)             UNITNAME CONVERSION RTNE
ISPQRY@  DS    V(ISPQRY)               ISPF DIALOG INTERFACE
ISPLINK  DS    V(ISPLINK)              ISPF DIALOG INTERFACE
IGCERROR DS    V(IGCERROR)             Undefined SVC rtne
IGDSSIVT DS    V(IGDSSIVT)             SMS IVT
IFAEDLIS DS    V(IFAEDLIS)             Product Enable/Disable
IGWASMS  DS    V(IGWASMS)              SMS-Callable service         +RS
IGWLSHR  DS    V(IGWLSHR)              SMS-Callable service         +RS
BPX_MOD  DS    V(BPX1GMN)              USS-Callable service      RS1299
ACF2CVT  DS    V(ACCVT)                ACF2 CVT
ECVT@    DS    V(ECVT)                 Addr of Extended CVT
CSVT@    DS    V(CSVT)                 Addr of CSVT
TSB@     DS    V(TSB)                  TSO TSB
ECT@     DS    V(ECT)                  TSO ECT
UPT@     DS    V(UPT)                  TSO UPT
LWA@     DS    V(LWA)                  TSO LWA
PSCB@    DS    V(PSCB)                 TSO PSCB
UNITNAME DS    CL8,XL4,XL4,XL4,XL8     IEFEB4UV
GETUREGS DS    A(R14,R15,R0,R1,R2)     save area
*
ZENVIR   DS    CL32'ISPF 3.2'          ISPF ENVIRONMENT
ZPDFREL  DS    C'PDF V3.2'             ISPF/PDF version
ZAPPLID  DS    C'1234'                 Current APPLID
ZSCREENW DS    F'80'                   current screen width (ISPF)
ISPFVARS EQU   ZENVIR,*-ZENVIR         for MVCK
*
NEWAPPL  DS    C'1234'                 Current APPLID
EP10     DS    CL10                    SVC TABLE
UCB_NAME DS    C'1234'                 4-character device number (ESA5)
STATUS   DS    C'OLD'                  DATA SET STATUS
OWNSMSSYS DS   H                       pos of own system in BCD array
SUBSYSNO DS    H                       number of sub-systems
DB2_REQ  DS    CL12                    Name of CAF service         +RS
IGX00NNN DS    H                       Extended SVC number
$SJBCSCB DS    H                       offset to CSCB addr in SJB
$SJBJCLAS DS   H                       offset to job class in SJB
$PITPATID DS   H,H                     offset/len of partition ID
$PITCLASS DS   H,H                     offset/len of classses
PHYSICAL_LPAD DS H                     addr of first CPU
OWN_LPAR DS    XL1                     LPAR # if running under PR/SM
AUTH_RC  DS    FL1                     R15 from SVC109
FAILCODE DS    FL1                     Failure code
KEY4     EQU   4
PITHALT$ DS    XL(L'PITSTAT)           PITHALTA+PITHALT1
BLDLDCB  DS    X                       LINKLIST/TASKLIB DCB
SWAREQL1 SWAREQ MF=L                   WORK AREA FOR SWAREQ
ATTACHL  ATTACHX SF=L                  WORK AREA FOR ATTACH      RS1002
SYNCHL   SYNCHX MF=L                   WORK AREA FOR SYNCH       RS1002
SNAPREGS DS    AD(14,15,0,1,2,3,14,15)                           RS0207
TRTPRINT DS    XL256                   printable characters
TRTDOTS  DS    XL256                   printable characters
BLANKS   DS    CL(L'LINE)              A BUNCH OF BLANKS
SUB_ECB1 DS    F,A(TCB)                sub-task ECB
SMS_SSOB DS    A,F                     SSOB_WRK (SMS only)
LINE1PTR DS    A(LINES),F              addr/length of lines buffer
PROTKEY  DS    X                       KEY=4 if AUTH=ESR, else KEY=8
OLDPKF   DS    X                       copied from TCBPKF
CPUONLINE DS   A(LINE),F'100'          Number of cpu's on-line
CVIOLINE DS    A(LINE)                 IPL with CVIO=NO
CLPALINE DS    A(LINE)                 IPL with CLPA=NO
LNKTABLE DS    A(LINE,L'LINE,NEXTLINE) LNK-LIST
LPATABLE DS    A(LINE,L'LINE,NEXTLINE) LPA-LIST
APFTABLE DS    A(LINE,L'LINE,NEXTLINE) APF-LIST
LINKXTNT DS    A(LINE)                 link-list header line
TIOTLINES DS   A(LINE,LINE)            TIOT Display lines
*
BLDLWORK DS    0F,AL2(1,L'CSVDWORK)    prefix for BLDL
         IHAPDS DSECT=NO,PDSBLDL=YES   PDS Directory
CSVDWORK EQU   BLDLWORK,*-BLDLWORK     Work area for CSVDSN routine
*
STIDP_WORKAREA DS 0D                   STIPD output area
STIDP_VERSION DS X'D4'                 Version Code
STIDP_SERIAL DS 0X'123456'             Serial number
STIDP_LPARID DS X'01'                  LPAR ID
         DS    XL2                     last 2 bytes of serial number
STIDP_MODEL DS X'3090'                 Same as CVTMDL
         DS    X'0000'                 not used
*
ESTAEL   ESTAEX MF=L
PUTLINEL PUTLINE MF=L
WASTAX   STAX  STAX00,REPLACE=NO,MF=L
STCKDATE DS    C'YYYY-MM-DD'
STCKTIME DS    C'HH.MM.SS.HH'
ALESERV2 ALESERV MF=L
ALET1    DS    1F                      ALET
STCKCONVL STCKCONV MF=L
STCKVAL  DS    D
         IXCQUERY MF=(L,IXCQRYWK)                                  @RS
         CSVAPF MF=(L,CSVAPF1)
         CSVQUERY MF=(L,CSVQRYWK),PLISTVER=MAX
         UCBSCAN MF=(L,UCBSCANL)
         AIF   (NOT D'CVTH7709).NOZOSR6      z/OS R6 ?           RS0105
         IOSCMB MF=(L,IOSCMBL)
.NOZOSR6 ANOP                                                    RS0105
IOSCMXA_UCBPTR DS A(UCBOB)
IOSCMXA_UCBCXPTR DS A(UCBCMEXT)
PGPSA    DS    A(PGPS)                                           RS0500
GETMAIN_LEN_ADDR DS 0F                                           JM0900
ANSAREA  DS    A                       address of IWMPQRY out putJM0900
ANSLEN   DS    F                       length of IWMPQRY out put RS0500
         IOSCMXA MF=(L,IOSCMXA_PARMLIST)
*      Data declarations for List information about all exits in system
MODLEN   EQU   40*EXAAM_LEN            Room for 40 routines' info's
EXLEN    EQU   20*EXAAE_LEN            Room for 20 exits' information
INITEXAA EQU   EXAAHDR_LEN+MODLEN+EXLEN Initial size of answer area
         CSVDYNEX MF=(L,CSVDYNEXL)
         IWMCQRY MF=(L,IWMCQRY)
         IWMPQRY MF=(L,IWMPQRY)
         IXCMG MF=(L,IXCMG)                                        +JWM
         IXLMG MF=(L,IXLMGWK)                                      +DL
QUERYLEN DS    F
         IEFZPMAP DSECT=NO             Dynamic Parmlib
         EZASMI TYPE=GLOBAL,STORAGE=CSECT                          $RS
         EZASMI TYPE=TASK,STORAGE=CSECT                            $RS
         CSVDYNL MF=(L,CSVDYNL)
*
MAXSNO   DS    F                       Assinged socket           RS0302
SOC_DESC DS    H                       Socket descriptor         RS0302
DSTYPE   DS    F                       1 PDSE, 2 HFS, 0 neither+ RS0199
LRETCODE DS    F                       Return code
LRSNCODE DS    F                       Reason code
UNIDSTOK DS    D                       DS-Token for Unicode      RS0705
PDATA    DS    XL16
PDATA_DDN EQU PDATA+8,8,C'C'           DDNAME
PDATA_TTRN EQU PDATA+4,4,C'X'          TTRN
PID      DS    XL4
MODTOKEN DS    XL8
PDATA_DSN DS   CL44
         DS    0D
WORK512  DS    XL1024                  1024-Byte Workarea        RS0507
         ORG   WORK512
WORK256  DS    XL256,2D                265-BYTE WORK AREA

CAMLST1  CAMLST NAME,DSNAME,VOLSER,WORK256 LOCATE/OBTAIN
         IECSDSL1 1                    F1-DSCB
WORK44   DS    XL44                    PADDING FOR OBTAIN
*        ORG   ,                       WORK512
*
DCB_IOB_DEB DS 0D
         DS    XL(END_OF_IOB-IHADCB)   DCB+IOB
         DS    XL(DEBBASND-DEBAVT)     DEB AVT+PREFIX+BASIC
         DS    XL(DEBDASDE-DEBDASD)    DEBDASD+CCW
CCW2     CCW   X'31',IOBSEEK+3,0,0     search CCW
CCW3     CCW   X'08',CCW2,0,1          TIC CCW
CCW4     CCW   X'0E',WORK256,0,256     read CCW
COPYAREA DS    CL(CNSTCBLN)            Area for CNST portion     RS0409
COPYCNSX DS    CL(CNSXCBLN)            Area for CNSX portion     RS0409
COPYLEN  EQU   *-COPYAREA              Length of CDT entry       RS0409
RACFL    RACROUTE REQUEST=STAT,COPY=*-*,COPYLEN=*-*,             RS0409X
               NEXT=*-*,RELEASE=7709,MF=L                        RS0409
RACFL_LENGTH EQU *-RACFL               Length workarea           RS0409
         ORG   ,                       WORK512
DYNAML   EQU   *-DYNAM                 LENGTH OF DYNAMIC STORAGE AREA
*---------------------------------------------------------------------*
LINES    DSECT
         DS    &NUMLINES.CL(L'LINE)    LINES FOR BRIF
         ORG   LINES+((*+4096-1-LINES)/4096)*4096
LINESL   EQU   *-LINES                 LENGTH OF LINES buffer
PRINT    OPSYN ANOP                    SHUT'EM UP
EXTRN    OPSYN WXTRN                   ILRASMVT
         TITLE 'SHOWMVS &REL - Define MVS Control Blocks'
***********************************************************************
*                                                                     *
*                                                                     *
*        DEFINE MVS CONTROL-BLOCKS                                    *
*                                                                     *
*                                                                     *
***********************************************************************
         IHASDWA DSECT=YES,VRAMAP=NO   SDWA DSECT
         IHAPSA DSECT=YES              PREFIXED STORAGE AREA
         IHACSD DSECT=YES              Common System Data Area
         IHAIPA DSECT=YES              Initialization Parameter Area
         IHASCCB                       Service Call Control Block
         IARRCE                        RSM CTL & ENUM AREA
         IARRAX                        RSM addr spc block extension
         IHAGDA                        GLOBAL DATA AREA
IGVCAUB  IGVCAUB                       Common Area User Block    RS0502
IGVVAB   IGVVAB                        VSM Address Space Block   RS0502
         IHASCVT DSECT=YES,LIST=NO     SECONDARY CVT
         IHASVC UPDATE=YES             SVC TABLE ENTRY           RS1299
*-       IHAPCCAT DSECT=YES            PCCA TABLE
         IHAPCCA DSECT=YES             PHYSICAL CONFIG. COMM. AREA
         AIF (D'PCCARCFF).PCCARCFF                               RS0605
PCCARCFF EQU PCCA+379,1,C'X'                                     RS0605
.PCCARCFF ANOP ,                                                 RS0605
APPNMTBL APPNMTBL                      APPENDAGE NAME TABLE
         IHALPDE                       LPA DIRECTORY ENTRY
*
         IEESMCA                       SMF Control Area
         IEESMCX                       SMF Control Area ExtensionRS0105
         IFASLCA                       SMF                       RS0406
         IEEMBACT                      SMF Application Control Table
         IEEMBRDS                      SMF R? Data Sets
         IEEMBSST                      SMF Sub-system Table
*
RTCT     IHARTCT                       RTM CONTROL TABLE
SDDSQ    IHASDDSQ                      SDUMP DATA SET QUEUE
* In OS/390 R6 and R7, IHARTSD gives "continuation error" - see OW36979
* In z/OS R2, IHARTSD gives "continuation error" - see OW51976
RTSD     IHARTSD                       RTCT SDUMP Extension
SDRTX    IHASDRTX                      RTCT SDUMP Extension
DSCA     ADYDSCA                       DAE Com area
DFLM     ADYDFLM                       DAE Default Module (ADYDFLT)
SCE      IHASCE                        Slip data
SHDR     IHASHDR                       Slip data
SCVA     IHASCVA                       Slip data (SCVA)          RS0402
SLTB     IHASLTB                       Slip data (SLTB)          RS0402
*
ASMVT    ILRASMVT DSECT=YES            AUXILIARY STRGE MGR VECTOR TABLE
PART     ILRPART                       PAGING ACTIVITY REFERENCE TABLE
PAT      ILRPAT                        Page Allocation Table
*
         AMCBS                         ACCESS METHOD CB STRUCTURE
IGGCAXWA IGGCAXWA                      Catalog Work Area
*
         ISGGVT                        GRS Vector Table
         AIF (D'GVTGRSQ).OA07975                                 RS0605
GVTGRSQ  EQU GVT+728,4,C'F'                                      RS0605
.OA07975 ANOP ,                                                  RS0605
         AIF   (D'CVTH7740).NOGVTX     z/OS R9?                  RS0907
         ISGGVTX                       GRS Vector Table          RS0605
.NOGVTX  ANOP ,                                                  RS0907
         ISGRPT                        GRS Vector Table          RS0605
         ISGGCC                        GRS Config table
         ISGRNLE                       GRS RNL-Elements         RSAUG99
         IEFJESCT                      JES VECTOR TABLE
         IEFJSCVT                      SUB-SYSTEM COMM. VECTOR TABLE
         IEFJSSVT                      SUB-SYSTEM VECTOR TABLE
IEFAB445 IEFZB445                      Device Allocation Defaults
DSABQDB  IEFZB4D5                      DSAB QUEUE DESCRIPTOR BLOCK
PPT      IEFZB610                      Program Properties Table
         IEFZB505 LOCEPAX=YES          EPA MAPPING FOR SWAREQ
         IEFZB4UV                      Parm mapping for IEFEB4UV
LCT      DSECT                         <--  TCTLCT
         IEFALLCT                      LINKAGE CONTROL TABLE
JCT      DSECT                         <--  JSCBJCT, LCTJCTAD
         DS    F,A,F,C'JCT '           PREFIX
JCTEQREG EQU   *+92,2,C'H'             REGION IN K (MAX VALUE IS 16383)
         IEFAJCTB                      JOB Control Table
JCTX     DSECT                         <--  JCTJCTX
         DS    F,A,F,C'JCTX'           PREFIX
         IEFJCTX                       JCT Extension
         AIF   (D'JCTXJMRD).JCTX3
JCTXSSD  EQU   JCTXIN+X'58',4,C'P'     step start date  (HBB4430)
JCTXJMRD EQU   JCTXIN+X'5C',4,C'P'     job start date  (HBB4430)
.JCTX3   ANOP
SCT      DSECT
         DS    F,A,F,C'SCT '           PREFIX
         IEFASCTB                      Step Control Block
SCTX     DSECT
         DS    F,A,F,C'SCTX'           PREFIX
         IEFSCTX DSECT=NO              Step Control Block Extension
*
         IHAASCB DSECT=YES             ADDRESS SPACE CONTROL BLOCK
         AIF   (D'ASCBIOSX).ASCBIOSX                             RS0506
ASCBIOSX EQU   ASCBR160                EXCP OA14340              RS0506
.ASCBIOSX ANOP                                                   RS0506
         IHAASSB LIST=NO               ADDRESS SPACE SECONDARY BLOCK
         IHAASVT DSECT=YES             ADDRESS SPACE VECTOR TABLE
         IHAASXB DSECT=YES             Address Space Extension Block
         IHALDA                        Local Data Area
         IHAPVT                        RSM PAGE VECTOR TABLE     JH1303
         IHAACEE                       Accessor Environment Element
         IRAOUCB DSECT=YES             SRM PARMS
         IHAOUXB DSECT=YES             SRM PARMS
         IEARCTD DSECT=YES             RCT Data Area
         IKJTCB DSECT=YES,LIST=NO      TASK CONTROL BLOCK
         IHASTCB                       Secondary TCB
         IEFTCT                        SMF TCT
         IEZJSCB                       JOB STEP CONTROL BLOCK
         IEFJSSIB                      Sub-System Identification Block
         IHARD                         REGION DESCRIPTOR
         IHASPQE                       sub-pool queue element
         IHASPQA                       sub-pool queue element anchors
         IHADQE                        descriptor queue element
         IKJRB  DSECT=YES,LIST=NO      REQUEST BLOCK
         IHACDE                        CONTENTS DIRECTORY ENTRY
         IHALLE                        LOAD-LIST ELEMENT
         IHAXTLST                      EXTENT LIST
         IHASCB DSECT=YES              STAE CONTROL BLOCK
         AIF   (D'CVTH7708).SCA        z/OS R5?                  RS0704
*        now a part of IHASTCB
         IHASCA                        SPIE/ESPIE Control Area
.SCA     ANOP                                                    RS0704
*
         IKJPSCB                       PROTECTED STEP CONTROL BLOCK
         IKJTSB LIST=NO,EXT=YES        Terminal Status Block
         IKJCPPL                       Command Processor Parm List
         IKJUPT                        User Profile Table
UPT_LENGTH EQU *-UPT
         IKJTSVT                       TSO VECTOR TABLE
         IKJEFLWA                      LOGON WORK AREA
         IKJTAXE                       TERMINAL ATTN EXIT ELEMENT
EXTAB_VECT IKJEXTAB                    EXIT/TABLE VECTOR
TPVT     IKJTPVT                       TSO PARMLIB vector table
CTLT     IKJCTLT                       TSO/E Control Table
PPVE     IKJEPPVE                      Platform Programs
FCVE     IKJEFCVE                      Platform Commands
XPRM     IKJXPRM                       INMXPARM Control Table
CNPRM    IKJCNPRM                      IKJCNPRM Control Table
HELP     IKJEFHCB                      HELP Control Table
         IKJEESCB                      SEND Parmlib Control Block
TPT      IKJTPT                        TSO/TEST Parameter Table
ALPL     IKJALPL                       ALLOC command defaults
*
         SYSSTATE ARCHLVL=1            IEEBASEA require !!!!     RS0105
         IEEBASEA DSECT                Master Sched Resident Data Area
         SYSSTATE ARCHLVL=2            IEEBASEA require !!!!     RS0105
         IEEZB806                      Master Trace Table        RS0105
         IEFENFCT TYPE=DSECT                                     RS0105
         IEFENFPM                                                RS0105
         IEFENF                        Internal                  RS0105
         ISPTCM                        ISPF TSO Commands         RS0105
         ISPCFG                        ISPCFIG                   RS1006
         IEECUCM DSECT=YES             Unit Control Module
SNPL     IEEZB807                      SCHEDULER NIP PARAMETER LIST
MPFT     IEEZB809                      Message Processing Facility Tbl
GENX     IEEZB816                      GENERAL WTO USER EXIT TABLE
CPFT     IEEZB817                      Command Prefix Table
CLRATT   IEEVC102                      COLOR/HIGHLIGHTING ATTRIBUTE TBL
         IEFUCBOB LIST=NO,PREFIX=YES   UNIT CONTROL BLOCK
UCBLEN   EQU   *-UCBOB                                           JM
         AIF   (D'UCBMIDAW).UCBMIDA    OA10984                   RS1107
UCBMIDAW EQU   X'02'         Indicates that MIDAWs are supported RS1107
.UCBMIDA ANOP                                                    RS1107
         ORG   UCB+X'1D0'
         IOSDUCBP                      UCB Prefix (HBB5510)
         IECDDCE                       DEVICE CLASS EXTENSION
         IECDIOCM                      IOCOM DSECT
IOVT     IOSDIOVT                      IOS Vector Table          ESA41
IOFC     IOSDIOFC                      IOS I-O Facilities        RS1108
CDA      IOSDCDA                       Configuration Data Area
IOSDICI  IOSDICI                       Configuration Data Area   RS1004
ULUT     IOSDULUT                      UCB Look-up Table         ESA41
ULU2     IOSDULU2                      UCB Look-up Table         RS0405
ULU3     IOSDULU3                      UCB Look-up Table         JH1214
UCBX     IECUCBCX                      Tape class ext            RS0302
CSVEXAA  CSVEXAA                       List answer area
CSVEXRET CSVEXRET                      Return code information
         IFBNTASM                                                  $DL
         DB2NTOKN                                                  $DL
         CSVT                                                    RS1007
         IRXENVT                       REXX Environment Tble (IRXANCHR)
         IRXENVB                       REXX Environment Block
EQUX     OPSYN EQU
         MACRO
&N       EQU   &A,&B,&C
         AIF   ('&N' EQ 'SPSHARE').MEND
         AIF   (N'&SYSLIST GT 2).P3
         AIF   (N'&SYSLIST GT 1).P2
&N       EQUX  &A
         MEXIT
.P2      ANOP
&N       EQUX  &A,&B
         MEXIT
.P3      ANOP
&N       EQUX  &A,&B,&C
.MEND    MEND
         IRXPARMB DECLARE=YES          REXX Parameter Block
EQU      OPSYN EQUX
         IRXSUBCT                      REXX sub-command Table
         IRXPACKT                      REXX Function PAckage Table
*                                                                JM0799
INFO     DSECT                                                   JM0799
PREV_UCBCHAN DS XL(L'UCBCHAN)                                    JM0799
SAVE_UCBCHAN DS XL(L'UCBCHAN)                                    JM0799
PREV_UCBPIM DS XL(L'UCBPIM)                                      JM0799
PREV_UCBLPM DS XL(L'UCBLPM)                                      JM0799
PREV_UCBCHPS DS XL(L'UCBCHPS)                                    JM1099
PREV_PATH_VAL DS X                     Path validation flag      JM0100
SAVE_PATH_VAL DS X                     Path validation flag      JM0100
PATHDESC DS    CL32                    Path description          JM0100
PATHACM  DS    CL5                     Path acronym              JM0100
PATHATTR DS    CL32                    Path attributes           RS0604
         IOSCHPD MF=(L,IOSCHPDL)                                 JM0100
PATHAREA DS    0F                                                JM0799
         ORG   PATHAREA+(256*PATHTBLL)                           JM0100
         DS    0D                                                JM0100
CHPIDEND DS    X                       end of UCBSCAN switch     JM0100
INFOL    EQU   *-INFO                                            JM0799
*                                                                JM0799
PATHTBL  DSECT                                                   JM0799
PATHID   DS    H                       Chpid id                  JM0100
PATHCNT  DS    F                       Count of UCBs on this pathJM0100
PATHTBLL EQU   *-PATHTBL                                         JM0799
*                                                                JM0799
.CHPIDAA ANOP                                                    JM0799
         IOSDSHID                      System Host ID Mapping   OW13347
         AIF   (D'CPCID_FLAGS).CPCIDD     OW57714                RS0803
         ORG   SHID_CPCND+L'SHID_CPCND
*        CPCID is Central Processing Complex Identifier
CPCID_FLAGS DS X                       flags
CPCID_MAP   DS X                       CPC id
.CPCIDD  ANOP                                                    RS0803
*
         IKTTCAST DSECT=YES            TCAS (a key 6 area)
         IRARMCT DSECT=YES         RESOURCE MANAGER CONTROL TABLE
         IRASRMST DSECT=YES        SRM Status Sysevent Parameter List
         IRAICT   DSECT=YES        ICT                           RS0906
         IRACCT   DSECT=YES        CCT                           RS0207
         IRAMCT   DSECT=YES        MCT                           RS0207
         IRARCT   DSECT=YES        RCT                           RS0207
         IWMSVDCR
         IWMSVPCD
         IWMSVPOL
         IWMWSYSI SYSI_ENTRY=YES       IWMWSYSQ                  RS0605
         IWMSERVD                                                RS0107
         IWMSVAEA                                                RS0107
         IWMSVDEF                                                RS0107
         IWMSVNPA                                                RS0107
         IWMSVSEA                                                RS0107
         IWMSET                                                  RS0207
         IWMWSYSL                                                RS0207
         IWMWSYSR                                                RS0207
         IWMYCON
         ATRFZQRY                      Resource Recovery Manager   +RS
         AIF (D'ATRFZSIMEMSTATE_ACTIVE).ATRMSX                   DA0505
ATRFZSIMEMSTATE_ACTIVE   EQU  1                                  DA0505
.ATRMSX ANOP ,                                                   DA0505
         IHAETRI                       External Time Reference     +JWM
         IVTSTATA                      CSM-Statistics Data      +RS0200
         IVTDATSP                      CSM-Dataspace Data       +RS0200
         EZAZTSAB                      TCPIP                     RS0601
         EZAZTSEB                      TCPIP                     RS0601
         EZAZTSDB                      TCPIP                     RS0601
         AIF   (D'CVTH7740).CSVRTL     z/OS R9?                  RS0210
         CSVRTAA DSECT=YES             CSVRTAA answer-area         +RS
.CSVRTL ANOP ,                                                   RS0210
         CSFCCVT                       ICSF                      JM0300
         IWMWRQAA                      IWMRQRY answer            RS1202
* In case of assembly error see OW42971
         ANTRQSTL ILK=VERSION1                                   RS0800
         IEEZB887                                                RS0301
         IEEZB888                                                RS0301
         CSRSIIDF DSECT=YES,SIV1V2V3=YES                         RS1000
         IXGCTA                                                  RS1002
         IXGLCB                                                  RS1002
         IXGLSAB                                                 RS1002
         IXGLSMF                                                 RS1002
         IGGCRT                                                  RS0803
         IXCCPLX                                                 RS0504
CMCT     IRACMCT                       CMCT                      RS0803
CPMB     IRACPMB CPMB=NO,CPM2=YES,CMC2=YES                       RS0803
QVS      IRAQVS                        QVS                       RS1002
ETE1     IHAETE1                       ETE1                      RS0302
DGNB     IGVDGNB                       DGNB (IGVDGNXT)           RS0902
DGNX     IGVDGNX                       DGNX (IGVDGNXT)           RS0902
LPDAT    IRALPDAT                      DGNX (IGVDGNXT)           RS0902
         AIF (D'LPDATDEFCAPDATAVALID).LPDAT                      RS0907
LPDATDEFCAPDATAVALID     EQU  X'40'                              RS0907
.LPDAT  ANOP ,                                                   RS0907
         IAZJBCLD ,                       JES2 Job class         DA0508
         AIF   (NOT D'CVTH7707).RMCT51 z/OS R4?                  RS0103
DACC     CSFDACC                       ICSF DACC                 RS0103
         GFUMPCTL
PCTL_BFRLIMITS_TYPE_LENGTH EQU PCTL_BL_END-PCTL_BFRLIMITS_TYPE
PCTL_GLOBALSTATS_TYPE_LENGTH EQU PCTL_GS_END-PCTL_GLOBALSTATS_TYPE
PCTL_FSSTATS_TYPE_LENGTH EQU PCTL_FS_END-PCTL_FSSTATS_TYPE
         IOSDCHPD                                                RS0604
*        AIF   (NOT D'CVTH7720).USEINTM Use internal macro?      RS0405
*        EZBNMRHA DSECT=YES      yes for z/OS R7                 RS0405
*        AGO   .USEINTE         End of use internal macro        RS0405
*USEINTM ANOP                                                    RS0405
*        EZBNMRHA DSECT=YES                                      RS0904
         SHOWMRHA DSECT=YES                                      RS0405
         EZBZMONP                                                RS1108
         BPXYIOCC                                                RS1108
*UNEINTE ANOP                                                    RS0405
.NOTCPIPD ANOP                                                   RS1104
         IRARQSRV                      SYSEVENT REQSVDAT         RS0906
         AIF   (NOT D'CVTH7709).RMCT51 z/OS R6?                  RS0606
         IRAECMB IRAECMB=NO,ECMB=YES                             RS1107
         CEEOCBRS                      CEEOCB internal           RS0506
         AIF   (NOT D'CVTH7720).RMCT51 z/OS R7?                  RS0103
         AIF   (T'&SYSSTATE_OSREL EQ 'O').RMCT51                 RS0806
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010107').RMCT51       RS0806
         IAZMOND ,                        JES Monitor info       DA0508
*                                                                DA0601
* DSECTs needed by Health Checker code                           DA0601
*                                                                DA0601
         HZSQUAA DSECT=YES,LIST=YES,TITLE=NO,                    DA0601X
               HZSQUAAHDR=YES,                                   DA0601X
               HZSQUAAC=YES,                                     DA0601X
               HZSQUAAG=YES                                      DA0601
         HZSZCONS ,                       Equates for HZSQUERY   DA0601
         HZSPQE ,                         Process Queue Element  DA0601
*        HZSZHCKL ,                       Log block              DA0601
         IHAORE                                                  RS0506
         IHAWQE                                                  RS0506
         CNZMYQUA                      CNZQUERY                  RS0506
         AIF   (NOT D'CVTH7730).RMCT51 z/OS R8?                  RS1107
         ISGYQUAA                                                RS1107
         AIF   (NOT D'CVTH7740).RMCT51 z/OS R9?                  RS0508
         IFAQUAAX PREFIX=IFA  SMF Query Answer Area              DA0108
         AXRB                          SystemRexx Area           RS0209
         AIF   (NOT D'CVTH7750).RMCT51 z/OS R10?                 RS0508
         IAXV64WA                      IARV64 LIST               DA0108
*        AIF   (NOT D'CVTH7760).RMCT51 z/OS R11?                 RS0510
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010111').RMCT51 R11   RS0510
         IHAQDB                                                  RS0510
         IHASVTX                                                 RS0510
         AIF   ('&SYSSTATE_OSREL'(1,6) LT '010113').RMCT51 R13   RS0414
         IOSDZHPF                                                RS0414
.RMCT51  ANOP
         IFASMFR 2                                               RS0904
         ORG SMFRCD2+18                                          RS0904
SMFUDATL DS X                          Length of data            RS0904
SMFUDATA DS XL4                        line number               RS0904
         DS CL&LINESIZE                line                      RS0904
         CICS                          CICS stuff                RS0904
RMPT     IRARMPT                       SRM PARAM TABLE
WMST     IRAWMST                       WORKLOAD MGR SPECIFICATIONS TBLE
ICST     IRAICST                       SRM ICS TABLE
DMDT     IRADMDT                       SRM DOMAIN TABLE
RMCA     IRARMCA                       SRM Control Area          RS0904
SWCT     IRASWCT                       SRM Swap Reason           RS0904
*
         DCBD  DSORG=PO,DEVD=DA        IHADCB
         IEZIOB DSECT=NO               I/O BLOCK
END_OF_IOB DS  0D
JFCB     DSECT
         IEFJFCBN LIST=NO              JOB FILE CONTROL BLOCK
SIOT     DSECT
         IEFASIOT                      Step Input Output Table
TIOT     DSECT
         IEFTIOT1                      TASK INPUT-OUTPUT TABLE
         IHADSAB                       DATA SET ASSOCIATION BLOCK
         IEZDEB LIST=NO                DATA EXTENT BLOCK
*---------------------------------------------------------------------*
         IEFJSSOB ,                    SSOB header
         IEFSSSA                       SSOB extension for SMS
         AIF   (D'SSSA1CPL).OA13568    OA13568 Applied?          RS0905
SSSA1CPL EQU 30                                                  RS0905
.OA13568 ANOP                                                    RS0905
SSJI     DSECT
         IAZSSJI                       JES Job Info Service      DA0805
*
*        Work area for SMS inquiries (pointed to by SMS_SSOB)
*
SMS_WORK DSECT
SSOB_WRK DS    XL(SSOBHSIZ)            SSOB
SSSA_WRK DS    XL(SSSALN+SSSA1LN)      SSSA (HDR)
         DS    0D
SMS_SUB_FUNCTION_WORK_AREA EQU *
SSSA_BCD DS    XL(BCD_TOTAL_LENGTH)    PREFIX+DEFINITION
         ORG   SMS_SUB_FUNCTION_WORK_AREA
SSSA_VLD DS    XL(VLD_TOTAL_LENGTH)    PREFIX+DEFINITION
         ORG
SMS_SUB_FUNCTION_WORK_AREA_LENGTH EQU *-SMS_SUB_FUNCTION_WORK_AREA
SMS_WORK_LENGTH EQU *-SMS_WORK
*
         IGDBCD                        Base configuration definition
BCD_TOTAL_LENGTH EQU (BCDEND-IGDBCD)+(BCDEND2-BCDSYSDT)         HDZ11C0
         IGDVLD                        Volume record definition
VLD_TOTAL_LENGTH EQU (VLDEND-VLD)+(VLDEND2-VLDSYSDT)            HDZ11C0
         IGDSCD                        StorClass record definition  +RS
         IGDSGD                        StorGroup record definition  +JM
         IGDAGD                        AggrGroup record definition  +JM
         IGDMCD                        MgmtClass record definition  +RS
         IGDDCD                        DataClass record definition  +RS
         IGDLBD                        Optical lib definition       +RS
         IGDDRD                        Optical drive def         RS1002
         AIF   (NOT D'CVTH7708).NOIGDSGCL z/OS R5                RS0605
         IGDSGCL           OA13568     StorGroup Collection      RS0905
*        For z/OS R8 use original IGDSGCL  ||||                  RS0905
.NOIGDSGCL ANOP                                                  RS0605
         IGDSSIVT                      SMS vector table          RS0100
CSCB     DSECT
         IEECHAIN                      COMMAND SCHEDULING CONTROL BLOCK
         IHAECVT DSECT=YES             Extended CVT
         IAZJSAB DSECT=YES             JOB Scheduler Address Space
         IXCYQUAA                      XCF-Answer Area             @RS
         CSVAPFAA DSECT=YES,LIST=NO    dynamic APF
         IEFSSVI DSECT=YES             sub-sys version information
         BPXZOCVE   ,                  OMVS Vector Entry         RS1299
         AIF   (NOT D'CVTH7707).NOOCVT                           RS0107
         OCVT       ,                  OMVS Vector Table         RS0704
         AGO  .NOBPXZ                                            RS0704
.NOOCVT  ANOP                                                    RS0704
         BPXZOCVT   ,                  OMVS Vector Table         RS1299
.NOBPXZ  ANOP                                                    RS0704
         BPXZOPNT   ,                  OMVS Options              RS1299
         BPXZOPTN   ,                  USS Returning Info        RS0501
         BPXYPGTH   ,                  USS Returning Info        RS0501
         BPXYMNTE MNTE2=YES            USS Returning Info        RS0800
         BPXYPGPS   ,                  USS Returning Info        RS1299
         BPXYCONS   ,                  USS Returning Info        RS1299
BPX1SDD  EQU   300                  /* setdubdefault   */        JH1303
         BPXYGIDN   ,                  USS Returning Info        RS1299
         BPXYIPCQ   ,                                            RS0701
         BPXYIPCP   ,                                            RS0701
         BPXYMODE   ,                                            RS0701
         ASASYMBP DSECT=YES,SYMBP=NO,SYMBT=YES
         IXCYAMDA             XCF Accounting and Measurement Data Area
         IXLYAMDA                      Acct + Measurement Data Area +DL
         IXLYNDE                       Node descriptor              +DL
         IFAEDIDF DSECT=YES            Product Enable/Disable
         CSVDLCB TITLE=NO              dynamic link-list
         CSVDLAA                       dynamic link-list
         YREGS
*
ERLY     DSNDERLY                      DB2
RIB      DSNDRIB                       DB2/MQ                      +RS
*
ERBCOPY1 OPSYN ANOP                    Bypass Copyright Notice
ERBCPUDT ERBCPUDT                      CPU DATA TABLE (RMF)
ERBSTGST ERBSTGST                      GLOBAL SUPERVISOR TABLE (RMF)
         DIAG204                       Data from DIAGNOSE X'204'
*
RCVT     ICHPRCVT                      RACF CVT
DSDT     ICHPDSDT                      RACF Data Set table
RCATABLE ICHPAUTB                      AUTHORIZED RACF SVC CALLERS
         AIF   (D'RCRSV).JRH077
RCRSV    EQU   RCLIST
.JRH077  ANOP
CGRP     ICHPCGRP                      CONNECT GROUP NAME TABLE
CNST     IRRPCNST     ICHPCNST         Class Name and Syntax Tab RS0302
CNSTCBLN EQU CNSTCNSX-CNSTLGT+4
CNSXCBLN EQU *-CNSX
*
LLCB     IHALLCB                       LLA
         IHALLCB3                      LLCB extension for ESA
LLDR     IHALLDR                       LLA
LLDS     IHALLDS                       LLA
LLLS     IHALLLS                       LLA
*
SVT      IHASVT                        SUPERVISOR VECTOR TABLE
XMD      IHAXMD                        PC-AUTH
LXAT     IHALXAT                       Linkage Index Allocation Table
AXAT     IHAAXAT                       Auth Index Allocation Tab RS0700
XMSE     IHAXMSE                       Cross Memory Service EntryRS0700
SETC     IHASETC                       Set Connection            RS0700
ETE      IHAETE                        ETE                       RS0601
LATENT   LATENT                        LATENT                    RS0601
NTTH     IHANTTE                       Name/Token                  $RS
PPD      IGVPPD                        Cellpools                   $RS
LLT      IHALLT DSECT=YES              LNKLST/LPALST tables
RPP      IHARPP                        Recovery PIE PICA
PICA     IHAPICA                       Program Interrupt Control Area
TQE      IHATQE                        TIMER QUEUE ELEMENT
DCQ      IHADCQ                        Device class table
MQCT     ARCQCT                        HSM Control Table
MWE      ARCMWE                        HSM MWE                   RS0400
ATCVT    ISTATCVT                      VTAM
ACCVT    ACCVT DSECT=YES,PREFIX=YES    ACF2 CVT
IPST     IPST                          Ipl Statistic             RS0601
VSMD     IGVVSMD                                                 RS0303
*
         SHOW$PAD                      JES2 PAD DSECTS           CR0605
         SSGARGL                       IDCSS01                   RS1105
CDRAREA  IHACDR DSECT=YES,NED=YES      Config Data Read Interf.  RS0705
PAVAREA  IOSDPAVA                      PAVINFO                   RS1105
         AIF (D'PAVADBTS).PAVDAT                                 RS0907
PAVADBTS EQU   X'02'                                             RS0907
.PAVDAT ANOP ,                                                   RS0907
PATHAREA IOSDPATH                                                RS0705
         CUNUCCH                       Unicode header            RS0705
         CUNUCCE                       Unicode entry             RS0705
         IEEZB889                      IEECMDS                   RS0705
         DFSOPT                        DFSORT Options            RS0107
*
IP_BUFFER   DSECT                                                  &RS
IP_NUM_IMAGES  DS F                                                &RS
IP_STATUS   DS XL2                                                 &RS
IP_VERSION  DS XL2                                                 &RS
IP_TCPIPNAME DS CL8                                                &RS
IP_BUF_ENTRY EQU   *-IP_STATUS                                     &RS
TCPDATA  DSECT
TCPDAT   DS CL256
*
BUFFERFS  DSECT                                                  RS0505
FSPARMS   DS    8F
FSID      DS    0C
FSID_EYE  DS    CL4                    Eyecater 'FSID'
FSID_LEN  DS    X                      Length of FSID
FSID_VER  DS    X                      Version of FSID
FSID_RES1 DS    X
FSID_RES2 DS    X
FSID_ID   DS    FD
FSID_AGGRNAME DS    CL44               Name of Aggregate
          DS    CL1                     null terminator
FSID_NAME DS    CL44                   Name of File-System
          DS    CL1                     null terminator
FSID_MTNAME DS    CL44                 Name of Mountpoint
          DS    CL1                     null terminator
FSID_RES  DS    CL49                    Reserverd
FSIDL     EQU   *-FSID
FSST      DS    0C
FS_EYE    DS    CL4                      Eyecater 'FSST'
FS_LEN    DS    H                        Length of FSST
FS_VER    DS    X                        Version of FSST
FS_RES1   DS    X
FS_ID     DS    FD
FS_CLONETIME  DS 0CL8
FS_CLONETIME_TVSEC DS F
FS_CLONETIME_TVUSEC DS F
FS_CREATETIME  DS 0CL8
FS_CREATETIME_TVSEC DS F
FS_CREATETIME_TVUSEC DS F
FS_UPDATETIME  DS 0CL8
FS_UPDATETIME_TVSEC DS F
FS_UPDATETIME_TVUSEC DS F
FS_ACCESSTIME  DS 0CL8
FS_ACCESSTIME_TVSEC DS F
FS_ACCESSTIME_TVUSEC DS F
FS_ALLOCLIMIT    DS XL4
FS_ALLOCUSAGE    DS XL4
FS_VISQUOTALIMIT DS XL4
FS_VISQUOTAUSAGE DS XL4
FS_A             DS XL4
FS_ACCSTATUS     DS XL4
FS_STATES        DS XL4
FS_NODEMAX       DS XL4
FS_MINQUOTA      DS XL4
FS_TYPE          DS XL4
FS_THRESHOLD     DS FL1
FS_INCREMENT     DS FL1
FS_MOUNTSTATE    DS X
FS_MSGLEN        DS FL1
FS_MSG           DS CL128
FS_AGGRNAME      DS CL44               NAME OF AGGREGATE
                 DS CL1                NULL TERMINATOR
FS_RESERVED      DS CL128
FS_RESERVED2     DS CL3
FSSTL    EQU   *-FSST
BUFFERFSL EQU   *-BUFFERFS
FSOP_GETSTAT_PARMDATA        EQU 142
ZFSCALL_FILESYS              EQU X'40000004'
FSST_VERSION1                EQU 1
FSID_VERSION2                EQU 2
BUFFERA  DSECT
APARMS   DS    8F
CFOP     DS    0C
CFOP_EYE DS    CL4                    Eyecater 'CFOP'
CFOP_LEN DS    H                      Length of CFOP
CFOP_VER DS    X                      Version of CFOP
CFOP_STR DS    CL81
CFOP_RE1 DS    F
CFOP_RE2 DS    CL24
         DS    CL12
CFOPL    EQU   *-CFOP
BUFFERAL EQU   *-BUFFERA
CFOP_VERSION1                EQU 1
AGOP_QUERY_SYSLEVEL          EQU 238
AGOP_SYSPLEX_STATE           EQU 215
AGOP_LOG_CACHE_SIZE          EQU 193
AGOP_META_CACHE_SIZE         EQU 198
AGOP_ADM_THREADS             EQU 180
AGOP_AGGR_FULL               EQU 181
AGOP_AGGR_GROW               EQU 182
AGOP_AUTO_ATTACH             EQU 183
AGOP_GROUP_SET               EQU 214
AGOP_FS_FULL                 EQU 187
AGOP_FS_GROW                 EQU 188
ZFSCALL_CONFIG               EQU X'40000006'
*                                                                DA0508
* Map work area used by this proc (JES00                         DA0508
*                                                                DA0508
JJISWA       DSECT ,                                             DA0508
JJISWA_ID    DS    CL8'JJISWA'                                   DA0508
JJISWA_SUB   DS    F                  Return address for subrout DA0508
JJISWA_SSOB  DS    XL(SSOBHSIZ)       SSOB                       DA0508
             DS    0D                                            DA0508
JJISWA_SSIB  DS    XL(SSIBSIZE)       SSIB                       DA0508
             DS    0D                                            DA0508
JJISWA_SSJI  DS    XL(SSJISIZE)       SSJI                       DA0508
             AIF   (NOT D'CVTH7720).WMONDX                       RS0806
             AIF   (T'&SYSSTATE_OSREL EQ 'O').WMONDX             RS0806
             AIF   ('&SYSSTATE_OSREL'(1,6) LT '010107').WMONDX   RS0806
             DS    0D                                            DA0508
JJISWA_MOND  DS    XL(MONDSZE)        Monitor Data               DA0508
.WMONDX      ANOP  ,                                             DA0508
             DS    0D                                            DA0508
JJISWA_JBCLD DS    XL(JBCLSZE)        Job Class                  DA0508
             DS    0D                                            DA0508
JJISWAL      EQU   *-JJISWA                                      DA0508
*
*
*        HASP Common Storage Communication Table
*
HCCT     DSECT
CCTVR430 EQU   5                   HCCT version equate (430)
CCTVR420 EQU   1                   HCCT version equate (420)
CCTVRSN  DS    AL1(CCTVR430)    00 CONTROL BLOCK VERSION
         DS    XL7              01 RESERVED FOR FUTURE USE
CCTSSSMN DS   0C'HASPSSSM'      08 HASPSSSM LOAD MODULE NAME (420)
CCTOFSTB DS    A                08 Address of offset table (430)
         DS    A                12 Reserved for future use
CCTSMBEG DS   0F                16 HASPSSSM/HASPAM START ADDR (420)
CCTPVRSN DS    C'SP 4.3.0'      16 SP V.R.M, product version (430)
*
CCTSNV   DSECT
CCTSSNM  DS    C'JES2'             NAME OF SUBSYSTEM
CCTSSVS  DS    C'430 '             VERSION, RELEASE, MOD
*
CCTNDE   DSECT
CCTNDENL DS    X'0'                Actual length of node name
CCTNDENM DS    C'POKVSSY2'         NODE NAME
*
IEESUBP  DSECT                                                   JM1101
SUBPNPRM DS    A                       Address of next SUBPARM   JM1101
SUBPNAME DS    CL4                     subsystem name            JM1101
SUBPPARM DS    CL60                    subsystem parms           JM1101
*
*        Data returned by VM Diagnose 0
*
VMDIAG   DSECT
VMPRODNO DS    CL8'VM/ESA'             CP PROD NO
VMENVIR  DS    XL3                     VM Execution Environment
VMCPUVER DS    X'F8'                   Real CPU Version
VMMCEL   DS    XL2                     Machine Check Extended Logout
VMPROC   DS    H                       Processor addr
VMUSERID DS    CL8'MVSTEST'            CMS User
VMBITMAP DS    X'7FE0000000000000'     Feature map
VMTIMEZ  DS    X'FFFFD7C0'             Time zone difference in seconds
VMRELS   DS    FL1'2'                  VM Release
VMMODLVL DS    FL1'1'                  VM Mod level
VMSVCLVL DS    H'9207'                 VM service level
*
DSD      DSECT
         DS     CL8
DSDEYEC  DS     CL4    eyecatcher
         DS     H      ??
         DS     H      ??
DSDLEN   DS     F      length
DSDAID   DS     H      asid
         DS     H      ??
DSDNO    DS     F      Number of entries
DSDENTRY DS     0CL20
DSDNAME  DS     CL8    Dataspacename
DSDSTKN  DS     CL8    DSToken
DSDASTE  DS     CL4    ASTE
DSDENTRY_LENGTH EQU *-DSDENTRY
*
PIT      DSECT                     HASP PARTITION INFORMATION TBL DSECT
PITNEXT  DS    A(PIT)              ADDRESS OF NEXT PIT
PITSJB   DS    V(SJB)              ADDRESS OF SJB FOR EXECUTING JOB
PITASCB  DS    V(ASCB)             Address of initiator's ASCB
PITJQOFF DS    V(JQE)              Offset of initiator's JQE
PITFLAGS DS    B                   PIT FLAG BYTE
PITSTAT  DS    B                   LOGICAL PARTITION STATUS BYTE
PITHOLDA EQU   B'10000000'         PIT is drained ($P I)
PITHOLD1 EQU   B'01000000'         PIT is drained ($P IN)
PITHOLDR EQU   B'00100000'         PIT is stopped              HJE4430
PITBUSY  EQU   B'00010000'         Partition busy indicator    HJE4430
PITHALT42 EQU  B'00011000'         PIT is halted               HJE4420
PITHALTA EQU   B'00001000'         PIT is halted ($Z I)        HJE4430
PITHALT1 EQU   B'00000100'         PIT is halted ($Z IN)       HJE4430
PITINIT  EQU   B'00000010'         OS initiator exists for PIT HJE4430
PITIDLE  EQU   B'00000001'         PIT 'Idle' message sent     HJE4430
*@@@     $SJB
SJB      DSECT
*        STRING64 (GENERATE,AR_MODE)   GENERATE LITERALS & SUB-RTNE
         STRING64 (GENERATE,AR_MODE),PRINT=GEN
STATIC_AREA_END DS 0D
LTORG_AREA      DS 0D
* Fix location for ISF$SHOW. Don't move |||||||
***********************************************************************
*                                                                     *
*        Module Prologue, for the SDSF SVC.                           *
*                                                                     *
***********************************************************************
         CNOP  0,4
ISF$SHOW B     12(,R15)                   SDSF SVC AMODE31 prefix
         DC    A(SHOWMVS+VL)              SDSF SVC AMODE31 prefix
         DC    A(SVC109+2+VL)             SDSF SVC AMODE31 prefix
         L     R15,4(,R15)
         BR    R15
VL       EQU   X'80000000'
FF       EQU   X'FF'
*---------------------------------------------------------------------*
*                                                                     *
*        Pseudo-dsname passed to BRIF as a title.                     *
*                                                                     *
*        Note that BRIF truncates the dsname at the first blank,      *
*        which is why X'00' is used as a delimiter.                   *
*                                                                     *
*---------------------------------------------------------------------*
TITLE    DC    C'GSF',X'00',C'Utilities',X'006000'
         DC    C'SHOWzOS',X'00',C'&REL ',0H'0'
TITLE_L  EQU   *-TITLE
MLPADDN  DC    CL8'-MLPA-'
PLPADDN  DC    CL8'-PLPA-'
LINKDDN  DC    CL8'-LNKLST-'
TODMILL  DC    F'1000000'
TODDIFF  DC    FL8'2208988800000000'
ISVUNK   DC    C'  Unknown ISV'
RACF_FIX RACROUTE REQUEST=STAT,COPY=*-*,COPYLEN=*-*,             RS0409X
               NEXT=*-*,RELEASE=7709,MF=L                        RS0409
RACF_FIX_LENGTH EQU *-RACF_FIX       Length workarea             RS0409
         LTORG
LTORG_AREA_END  DS 0D
         END   ISF$SHOW
*PROCESS BATCH,USING(NOMAP,WARN(8)),FLAG(NOPUSH,NOEXLITW)
         TITLE 'JUL2DAYS - Julian-to-days conversion routine'
***********************************************************************
*                                                                     *
*        Convert a packed julian date obtained from the TIME macro    *
*        to an integer that represents the number of days since       *
*        1900-12-31.                                                  *
*                                                                     *
*        Input: R1=YYYYDDDF    julian date from TIME macro            *
*                                                                     *
*                 The first byte of R1 is 00 for years 1900-1999      *
*                 and 01 for years 2000-2099.                         *
*                                                                     *
*        Output:  R15=day of the week (1=monday, 7=sunday)            *
*                                                                     *
*                 R0=number of days since 1900-12-31                  *
*                                                                     *
*                 R1=pointer to a 9-byte character STRING that        *
*                            represents the day of the week.          *
*                                                                     *
***********************************************************************
JUL2DAYS CSECT
JUL2DAYS RMODE ANY
         SAVE  (14,1)
         MVO   32(8,R13),24(2,R13)     00000YYY?
         OI    32+7(R13),X'0F'         00000YYYF
         CVB   R14,32(,R13)            R14=YEAR
         LA    R0,365                  number of days in a year
         LR    R1,R14                  R1=years since 1900
         MR    R0,R0                   years*365
         BCTR  R14,0                   R14=YEAR-1
         SRL   R14,2                   number of leap years since 1901
         AR    R14,R1                  NUMBER OF DAYS IN PREVIOUS YEARS
         XC    20(6,R13),20(R13)       zero YYYY in 00000000YYYYDDDF
         CVB   R0,20(,R13)             NUMBER OF DAYS THIS YEAR
         AR    R0,R14                  number of days since 1900-12-31
*
*        DETERMINE DAY OF THE WEEK
*
         SLR   R14,R14                 PREPARE DIVISION
         LR    R15,R0                  DAYS SINCE 1900-12-31
         BCTR  R15,0                   DAYS-1
         LA    R1,7                    NUMBER OF DAYS IN WEEK
         DR    R14,R1                  DIVIDE BY NUM OF DAYS IN WEEK
         LA    R15,1(,R14)             Day of the week (1=monday)
         BASR  R1,0                    local base
         USING *,R1
         MH    R14,JUL2D_H9            MULT BY LENGTH OF A TABLE ENTRY
         LA    R1,JUL2D_TD(R14)        POINT TO DAY-OF-THE-WEEK
         RETURN (14)                   goback
         DROP  R1                      Drop R1
*
JUL2D_H9 DC    H'9'                    length of a table entry
JUL2D_TD DC    C'Monday   Tuesday  WednesdayThursday Friday   Saturday X
               Sunday    '
***********************************************************************
*                                                                     *
* MODULE NAME = SCANMODL                                              *
*                                                                     *
* DESCRIPTIVE NAME = RETRIEVE OFFSET & LENGTH OF A JES2 FIELD         *
*                                                                     *
* FUNCTION = THIS MODULE LOADS A MODEL FROM SYS1.MIGLIB AND RETURNS   *
*            THE OFFSET & LENGTH OF A FIELD.  IT IS USED TO WRITE     *
*            PROGRAMS THAT ACCESS JES2 CONTROL BLOCKS WITHOUT USING   *
*            HASPSRC AND CONSEQUENTLY, ARE RELEASE-INDEPENDENT.       *
*                                                                     *
* STATUS = R100                                                       *
*                                                                     *
* AUTHOR = GILBERT SAINT-FLOUR <GSF@POBOX.COM>                        *
*                                                                     *
* INVOCATION = VIA CALL OR LINK                                       *
*                                                                     *
*          LINK EP=SCANMODL,PARAM=(=C'HASMSDB ',=C'SDBRECCT')         *
*          LH   R2,0(,R1)                 OFFSET                      *
*          LH   R3,2(,R1)                 LENGTH                      *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = MVS/ESA V4.1                                      *
*                                                                     *
*    AUTHORIZATION = NONE                                             *
*                                                                     *
* MODULE TYPE = PROCEDURE, (SUB-ROUTINE)                              *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 4K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   *
*                 PROBLEM STATE, TCB KEY                              *
*                                                                     *
* OPERATION = See below                                               *
*                                                                     *
*        If your primary JES2 is not in sync with the HASMxxxx        *
*        modules in SYS1.MIGLIB or SYS1.SHASMIG, this routine         *
*        won't work.  To fix this, you can do the following:          *
*                                                                     *
*        1. Locate the following instruction:                         *
*             LOAD EPLOC=(R8),DCB=(R1),ERRET=RC12                     *
*           change it to:                                             *
*             LOAD EPLOC=(R8),DCB=0,ERRET=RC12                        *
*           then assemble and link SHOWMVS.                           *
*                                                                     *
*        2. Go to the MVS system where JES2 was installed (it should  *
*           have been installed under SMP/E).  Get the HASMHCCT,      *
*           HASMSJB and HASMPIT modules from SYS1.MIGLIB (or          *
*           SYS1.SHASMIG) on that system; they should be in sync with *
*           your primary JES2 (you can check that by BROWSEing them). *
*           Copy these modules to a STEPLIB or ISPLLIB library.       *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*   @100 INITIAL VERSION                                              *
*                                                                     *
***********************************************************************
SCANMODL CSECT
SCANMODL RMODE ANY
         BAKR  R14,0
         LR    R11,R15           No base register needed but     RS0302
         USING SCANMODL,R11      require LOAD from z/OS R4       RS0302
         LM    R8,R9,0(R1)             R8=HASMSDB,R9=SDBRECCT
         L     R1,16(,0)               CVTPTR
         L     R1,8(,R1)               CVTLINK
         LOAD  EPLOC=(R8),DCB=(R1),ERRET=RC12
         LR    R4,R0                   IM$SDB
         USING HEADER,R4
         SLR   R1,R1
         IC    R1,HDROFFSET            OFFSET TO 1ST FIELD DESC
         LA    R5,HEADER(R1)           ADDR OF 1ST FIELD DESC
         USING FLDDESC,R5
*LOOP
LOOP5    CLC   FLDNAME,0(R9)           REQUESTED FIELD?
         JE    LOOP5X                  YES, EXIT
         LA    R5,FLD_NEXT             NEXT FIELD DESCRIPTOR
         CLI   FLDDESC,0               END OF MODEL?
         JNE   LOOP5                   NO, PROCESS NEXT FIELD    RS0302
*ENDLOOP
         LA    R15,8                   RC=8  (FIELD NOT FOUND)
         PR
*
*        RETURN OFFSET AND LENGTH IN SAVEAREA+8
*
LOOP5X   LA    R1,8(,R13)              4-BYTE WORK AREA CALLER'S AMODE
         MVC   0(4,R1),FLDOFFSET       MOVE OFFSET & LENGTH
         SLR   R15,R15                 RC=0
         PR
*
RC12     DS    0H
         LA    R15,12                  RC=12 (LOAD FAILED)
         PR
         DROP  R4,R5                   Drop R4,R5
*@@      BLSQCBM                   CONTROL BLOCK MODEL USED BY BLSQFORM
HEADER   DSECT
HDRACRO  DS    CL8                     EBCDIC CB ACRONYM
HDRUTHDR DS    CL8'$HCCT'              OUTPUT HEADER
HDRMLVL  DS    CL8'HJE4430'            MAINTENANCE LEVEL
HDRCBLEN DS    FL2                     LENGTH OF CONTROL BLOCK
HDRAOFF  DS    FL2                     OFFSET TO ACRONYM
HDRALEN  DS    FL1                     LENGTH OF ACRONYM
HDRLLEN  DS    FL1                     LABEL LENGTH
HDRSCOL  DS    FL1                     START COLUMN OR LEFT MARGIN
HDRNCOL  DS    FL1                     NUMBER OF COLS BETWEEN LABELS
HDRFLAGS DS    XL1                     NUMBER OF COLS BETWEEN LABELS
HDROFFSET DS   FL1                     OFFSET TO 1ST FIELD DESC
HDRMODLVL DS   FL1                     MODEL LEVEL
          DS   X                       RESERVED
*
FLDDESC  DSECT
FLDNAME  DS    CL8                0    FIELD NAME
FLDFLAGS DS    X,X                8    FLAGS
FLDVIEW  DS    XL2               10    VIEW
FLDOFFSET DS   FL2               12    OFFSET
FLDLENGTH DS   FL2               14    LENGTH
FLD_NEXT EQU   *                 16
         YREGS
***********************************************************************
***
**       LE services for SHOWMVS
***
***********************************************************************
         CEECAA ,   Language Environment
         AIF   (NOT D'CEECAA).LESERVX   .Did user specify CEE.SCEEMAC?
         MACRO                                                    MACRO
&NAME   #SNAP  &ADDR=(1),&LENGTH=(0)                              MACRO
&NAME    STM   R14,R3,SNAPREGS         save registers             MACRO
         IHBINNRA &ADDR,&LENGTH                                   MACRO
         BAL   R14,SNAP00           <- SNAP STORAGE               MACRO
         LM    R14,R3,SNAPREGS         restore registers          MACRO
.MEND    MEND                                                     MACRO
&LINESIZE SETA 125                     Max line width            RS1004
*---------------------------------------------------------------------*
*                                                                DA0701
** LE entry housekeeping                                         DA0701
*                                                                DA0701
LESERV   CEEENTRY PPA=LESERVM,AUTO=LESERVDS,MAIN=YES,                  X
               EXECOPS=YES,             Runtime options present        X
               BASE=(R9,R11),           Base                           X
               PARMREG=1                Place parameter here     RS1001
*                                                                DA0701
** Return the LE level                                           DA0701
*                                                                DA0701
LESERVL  DS    0H                                                DA0701
         L     R1,0(R1)                                          RS1001
         CLC   2(2,R1),=C'02'           CEEDOPT OR CEEGPID       RS0904
         JE    LESERVOPT                                         RS0904
         L     R2,4(R1)                 CEE_Version_ID goes here RS1001
         LA    R3,4(R2)                 Plat_ID goes here        RS1001
         LOAD  EP=CEEGPID                                        DA0701
         LR    R15,R0                                            DA0701
         CALL  (15),                    Call CEEGPID                   X
               ((2),                    ..CEE_Version_ID               X
               (3),                     ..Plat_ID                      X
               LESERVF),                ..LE Feedback                  X
               VL,MF=(E,LESERVP)                                 DA0701
         DELETE EP=CEEGPID                                       DA0701
         J     LESERVX                                           DA0701
LESERVOPT DS    0H                      Display LE options       RS1004
*        R3    CEEOCB
*        R4    Internal for suboptions
*        R5    Area to return info back to SHOWzOS
         L     R5,4(R1)                 Display goes here        RS1004
         L     R10,0(R5)                Display goes here        RS1004
         USING LINE,R10                                          RS1004
*                                                                RS1004
*        Build a Translate Table for non printable Characters    RS1004
*                                                                RS1004
LESERV01 MVI   TRTPRINT,C' '           PRINTABLE CHARACTERS      RS1004
         MVC   TRTPRINT+1(255),TRTPRINT                          RS1004
         MVC   BLANKS,TRTPRINT         a bunch of blanks         RS1004
         SLR   R15,R15                                           RS1004
         SLR   R0,R0                                             RS1004
         BRASL R1,LESERV02                                       RS1004
         DC    X'4A,7,5A,8,6A,6,7A,6'  Special characters        RS1004
         DC    X'81,9,91,9,A2,8'       Lowercase                 RS1004
         DC    X'C1,9,D1,9,E2,8'       Uppercase                 RS1004
         DC    X'F0,A'                 Digits                    RS1004
         DC    X'00,0'                 end of table              RS1004
*Loop                                                            RS1004
LESERV02 IC    R15,0(,R1)              First Byte                RS1004
         IC    R0,1(,R1)               Iterations                RS1004
*--Loop                                                          RS1004
LESERV03 STC   R15,TRTPRINT(R15)       Store X'4A' into TRTPRINT+X'4A'
         LA    R15,1(,R15)             Bump Index                RS1004
         JCT   R0,LESERV03             next character            RS1004
*--Endloop                                                       RS1004
         LA    R1,2(,R1)               NEXT ENTRY IN TABLE       RS1004
         CLI   0(R1),0                 END OF TABLE?             RS1004
         JNE   LESERV02                NEXT STRING               RS1004
*Endloop                                                         RS1004
         USING CEECAA,R12                                        RS1004
         L     R3,CEECAAEDB                                      RS1004
         USING CEEEDB,R3                                         RS1004
         L     R3,CEEEDBOPTCB           Options                  RS1004
         USING CEEOCB,R3                                         RS1004
         LR    R1,R13                                            RS0907
         LA    R13,SAVEAREA                                      RS0907
         CLC   =C'CEEOCB',CEEOCB_EYEC   Eyecatcher 31bit env.    RS1004
         JNE   LESERV98                                          RS1004
         CLC   =H'15',CEEOCB_VER        Version 15 z/OS R4 ?     RS1004
         JE    LESERV10                                          RS1004
         CLC   =H'16',CEEOCB_VER        Version 16 z/OS R5 ?     RS1004
         JE    LESERV10                                          RS1004
         CLC   CEEOCB_VER,=H'17'        Version 17 ? z/OS R8     RS0507
         JE    LESERV10                                          RS0507
         CLC   CEEOCB_VER,=H'18'        Version 18 ? z/OS R9     RS0907
         JE    LESERV10                                          RS0907
         CLC   CEEOCB_VER,=H'19'        Version 19 ? z/OS R10    JH0508
         JE    LESERV10                                          JH0508
         CLC   CEEOCB_VER,=H'20'        Version 20 ? z/OS R11    RS0310
         JE    LESERV10                                          RS3010
         CLC   CEEOCB_VER,=H'21'        Version 21 ? z/OS R12    RS0511
         JE    LESERV10                                          RS0511
         CLC   CEEOCB_VER,=H'22'        Version 22 ? z/OS R13    JH1303
         JE    LESERV10                                          JH1303
         CLC   CEEOCB_VER,=H'23'        Version 23 ? z/OS V2R1   JH1303
         JE    LESERV10                                          JH1303
         J     LESERV97                 otherwise                RS1004
LESERV10       DS  0H                                            RS1004
*        LR    R1,R13                                            RS0406
*        LA    R13,SAVEAREA                                      RS0406
         LR    R4,R3                                             RS1004
         A     R4,OPTION_ABPE_SUB                                RS1004
         USING SUBOPT_ABPE,R4                                    RS1004
         STRING64 '      ABPERC(NONE)',INTO=LINE                 RS1004
         TM    SUBOPT_ABPE_US,X'80'     None                     RS1004
         JO    LESERV_ABPERC9                                    RS1004
         STRING64 '      ABPERC(',INTO=LINE                      RS1004
         TM    SUBOPT_ABPE_US,X'40'     User abendcode           RS1004
         JNO   LESERV_ABPERC1                                    RS1004
         STRING64 (LINE,,T),'U',(SUBOPT_ABPE_CODE,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         J     LESERV_ABPERC9                                    RS1004
LESERV_ABPERC1 DS  0H                                            RS1004
         TM    SUBOPT_ABPE_US,X'20'     System abendcode         RS1004
         JNO   LESERV_ABPERC2                                    RS1004
         STRING64 (LINE,,T),'S',(SUBOPT_ABPE_CODE,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         J     LESERV_ABPERC9                                    RS1004
LESERV_ABPERC2 DS  0H                   Other Abcode             RS1004
         STRING64 (LINE,,T),SUBOPT_ABPE_ABC,INTO=LINE            RS1004
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
LESERV_ABPERC9 DS  0H                                            RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_ABTE_SUB                                RS1004
         USING SUBOPT_ABTE,R4                                    RS1004
         STRING64 '      ABTERMENC(RETCODE)',INTO=LINE           RS1004
         CLC   SUBOPT_ABTE_OPT,=F'1'                             RS1004
         JE    LESERV_ABTERMENC                                  RS1004
         STRING64 '      ABTERMENC(ABEND)',INTO=LINE             RS1004
LESERV_ABTERMENC  DS  0H                                         RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         STRING64 '      AIXBLD',INTO=LINE                       RS1004
         TM    OPTION_AIXB_FLAG,X'80'                            RS1004
         JO    LESERV_AIXBLD                                     RS1004
         STRING64 '    NOAIXBLD',INTO=LINE                       RS1004
LESERV_AIXBLD  DS  0H                                            RS1004
         BRASL R14,SPACE1                                        RS1004
         STRING64 '      ALL31(ON)',INTO=LINE                    RS1004
         TM    OPTION_ALL3_FLAG,X'80'                            RS1004
         JO    LESERV_ALL31                                      RS1004
         STRING64 '      ALL31(OFF)',INTO=LINE                   RS1004
LESERV_ALL31   DS  0H                                            RS1004
         BRASL R14,SPACE1                                        RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_ANYH_SUB                                RS1004
         USING SUBOPT_ANYH,R4                                    RS1004
         STRING64 '      ANYHEAP(',INTO=LINE                     RS1004
         STRING64 (LINE,,T),(SUBOPT_ANYH_INIT,F,L9B),INTO=LINE   RS1004
         STRING64 (LINE,,T),',',(SUBOPT_ANYH_INC,F,L9B),INTO=LINE
         TM    SUBOPT_ANYH_ALLOC,X'80'  Below                    RS1004
         JO    LESERV_ANYHEAP1                                   RS1004
         STRING64 (LINE,,T),',ANYWHERE',INTO=LINE                RS1004
         J     LESERV_ANYHEAP2                                   RS1004
LESERV_ANYHEAP1        DS  0H                                    RS1004
         STRING64 (LINE,,T),',BELOW',INTO=LINE                   RS1004
LESERV_ANYHEAP2        DS  0H                                    RS1004
         TM    SUBOPT_ANYH_ALLOC,X'40'  Free                     RS1004
         JO    LESERV_ANYHEAP3                                   RS1004
         STRING64 (LINE,,T),',KEEP)',INTO=LINE                   RS1004
         J     LESERV_ANYHEAP4                                   RS1004
LESERV_ANYHEAP3        DS  0H                                    RS1004
         STRING64 (LINE,,T),',FREE)',INTO=LINE                   RS1004
LESERV_ANYHEAP4        DS  0H                                    RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_AUTO_SUB                                RS1004
         USING SUBOPT_AUTO,R4                                    RS1004
         STRING64 '      AUTOTASK(',SUBOPT_AUTO_LMOD,',',        RS1004X
               (SUBOPT_AUTO_NO,F,L9B),INTO=LINE                  RS1004
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         TM    OPTION_AUTO_FLAG,X'80'                            RS1004
         JO    LESERV_AUTOTASK                                   RS1004
         STRING64 '    NOAUTOTASK',INTO=LINE                     RS1004
LESERV_AUTOTASK DS  0H                                           RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_BELH_SUB                                RS1004
         USING SUBOPT_BELH,R4                                    RS1004
         STRING64 '      BELOWHEAP(',INTO=LINE                   RS1004
         STRING64 (LINE,,T),(SUBOPT_BELH_INIT,F,L9B),INTO=LINE   RS1004
         STRING64 (LINE,,T),',',(SUBOPT_BELH_INC,F,L9B),INTO=LINE
         TM    SUBOPT_BELH_ALLOC,X'40'  Free?                    RS1004
         JO    LESERV_BELOWHEAP1                                 RS1004
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         J     LESERV_BELOWHEAP                                  RS1004
LESERV_BELOWHEAP1   DS  0H                                       RS1004
         STRING64 (LINE,,T),',FREE)',INTO=LINE                   RS1004
LESERV_BELOWHEAP    DS  0H                                       RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         STRING64 '      CBLOPTS(ON)',INTO=LINE                  RS1004
         TM    OPTION_CBLO_FLAG,X'80'                            RS1004
         JO    LESERV_CBLOPTS                                    RS1004
         STRING64 '      CBLOPTS(OFF)',INTO=LINE                 RS1004
LESERV_CBLOPTS DS  0H                                            RS1004
         BRASL R14,SPACE1                                        RS1004
         STRING64 '      CBLPSHPOP(ON)',INTO=LINE                RS1004
         TM    OPTION_CBLP_FLAG,X'80'                            RS1004
         JO    LESERV_CBLPSHPOP                                  RS1004
         STRING64 '      CBLPSHPOP(OFF)',INTO=LINE               RS1004
LESERV_CBLPSHPOP DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         STRING64 '      CBLQDA(ON)',INTO=LINE                   RS1004
         TM    OPTION_CBLQ_FLAG,X'80'                            RS1004
         JO    LESERV_CBLQDA                                     RS1004
         STRING64 '      CBLQDA(OFF)',INTO=LINE                  RS1004
LESERV_CBLQDA    DS  0H                                          RS1004
         CLC   CEEOCB_VER,=H'18'        Version 18 ? z/OS R9     RS1007
         JL    LESERV_CEEDMPX                                    RS1007
         LR    R4,R3                                             RS1007
         A     R4,OPTION_CEEDMP_SUB                              RS1007
         USING SUBOPT_CEEDMP,R4                                  RS1007
         STRING64 '      CEEDUMP(',(SUBOPT_CEEDMP_PAGL,F,L3B),   RS1007X
               INTO=LINE                                         RS1007
         STRING64 (LINE,,T),',SYSOUT=(',SUBOPT_CEEDMP_SYSC,      RS1007X
               ',',SUBOPT_CEEDMP_SYSO,'),',INTO=LINE
         TM    SUBOPT_CEEDMP_FREE,X'00'  Free=end of close       RS1007
         JNZ   LESERV_CEEDMP2                                    RS1007
         STRING64 (LINE,,T),'FREE=END,',INTO=LINE                RS1007
         J     LESERV_CEEDMP3                                    RS1007
LESERV_CEEDMP2      DS  0H                                       RS1007
         STRING64 (LINE,,T),'FREE=CLOSE',INTO=LINE               RS1007
LESERV_CEEDMP3      DS  0H                                       RS1007
         TM    SUBOPT_CEEDMP_SPIN,X'00'  SPIN=Unalloc or NO      RS1007
         JNZ   LESERV_CEEDMP4                                    RS1007
         STRING64 (LINE,,T),'SPIN=UNALLOC)',INTO=LINE            RS1007
         J     LESERV_CEEDMP5                                    RS1007
LESERV_CEEDMP4      DS  0H                                       RS1007
         STRING64 (LINE,,T),'SPIN=NO)',INTO=LINE                 RS1007
LESERV_CEEDMP5      DS  0H                                       RS1007
         BRASL R14,SPACE1                                        RS1007
LESERV_CEEDMPX DS 0H                                             RS1007
         STRING64 '      CHECK(ON)',INTO=LINE                    RS1004
         TM    OPTION_CHEC_FLAG,X'80'                            RS1004
         JO    LESERV_CHECK                                      RS1004
         STRING64 '      CHECK(OFF)',INTO=LINE                   RS1004
LESERV_CHECK   DS  0H                                            RS1004
         BRASL R14,SPACE1                                        RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_COUN_SUB                                RS1004
         USING SUBOPT_COUN,R4                                    RS1004
         STRING64 '      COUNTRY(',SUBOPT_COUN_ID,')',INTO=LINE  RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         STRING64 '      DEBUG',INTO=LINE                        RS1004
         TM    OPTION_DEBU_FLAG,X'80'                            RS1004
         JO    LESERV_DEBUG                                      RS1004
         STRING64 '    NODEBUG',INTO=LINE                        RS1004
LESERV_DEBUG     DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_DEPT_SUB                                RS1004
         USING SUBOPT_DEPT,R4                                    RS1004
         STRING64 '      DEPTHCONDLMT(',(SUBOPT_DEPT_COUNT,F,L9B),     X X
               INTO=LINE                                         RS1004
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         CLC   CEEOCB_VER,=H'17'        Version 17 ? z/OS R8     RS0806
         JL    LESERV_NODYNDUMP                                  RS0806
         LR    R4,R3                                             RS0806
         A     R4,OPTION_DYNDMP_SUB                              RS0806
         USING SUBOPT_DYNDMP,R4                                  RS0806
         LR    R6,R3                                             RS0806
         A     R6,SUBOPT_DYNDMP_HLQP                             RS0806
         USING SUBOPT_DYNDMP_HLQO,R6                             RS0806
         LH    R0,SUBOPT_DYNDMP_HLQL  length                     RS0806
         STRING64 '      DYNDUMP("',(SUBOPT_DYNDMP_HLQS,(R0)),   RS0806X
               INTO=LINE                                         RS0806
         TM    SUBOPT_DYNDMP_FLG1,X'80'  Dynamic                 RS0806
         JZ    LESERV_DYNDMP1                                    RS0806
         STRING64 (LINE,,T),',DYNAMIC',INTO=LINE                 RS0806
         J     LESERV_DYNDMP4                                    RS0806
LESERV_DYNDMP1      DS  0H                                       RS0806
         TM    SUBOPT_DYNDMP_FLG1,X'40'  Nodynamic               RS0806
         JZ    LESERV_DYNDMP2                                    RS0806
         STRING64 (LINE,,T),',NODYNAMIC',INTO=LINE               RS0806
         J     LESERV_DYNDMP4                                    RS0806
LESERV_DYNDMP2      DS  0H                                       RS0806
         TM    SUBOPT_DYNDMP_FLG1,X'20'  Force                   RS0806
         JZ    LESERV_DYNDMP3                                    RS0806
         STRING64 (LINE,,T),',FORCE',INTO=LINE                   RS0806
         J     LESERV_DYNDMP4                                    RS0806
LESERV_DYNDMP3      DS  0H                                       RS0806
         TM    SUBOPT_DYNDMP_FLG1,X'10'  Both                    RS0806
         JZ    LESERV_DYNDMP4                                    RS0806
         STRING64 (LINE,,T),',BOTH',INTO=LINE                    RS0806
LESERV_DYNDMP4      DS  0H                                       RS0806
         TM    SUBOPT_DYNDMP_FLG2,X'80'  TDUMP                   RS0806
         JZ    LESERV_DYNDMP5                                    RS0806
         STRING64 (LINE,,T),',TDUMP")',INTO=LINE                 RS0806
         BRASL R14,SPACE1                                        RS0806
         J     LESERV_NODYNDUMP                                  RS0806
LESERV_DYNDMP5      DS  0H                                       RS0806
         TM    SUBOPT_DYNDMP_FLG2,X'40'  NOTDUMP                 RS0806
         JZ    LESERV_NODYNDUMP                                  RS0806
         STRING64 (LINE,,T),',NOTDUMP")',INTO=LINE               RS0806
         BRASL R14,SPACE1                                        RS0806
         DROP  R4                                                RS0806
LESERV_NODYNDUMP  DS  0H                                         RS0806
LESERV_DYNDMPX DS 0H                                             RS0407
         LR    R4,R3                                             RS1004
         A     R4,OPTION_ENVA_SUB                                RS1004
         USING SUBOPT_ENVA,R4                                    RS1004
         STRING64 '      ENVAR("")',INTO=LINE                    RS1004
         CLC   SUBOPT_ENVA_LEN,=H'0'                             RS1004
         JE    LESERV_ENVAR                                      RS1004
         STRING64 '      ENVAR("',(SUBOPT_ENVA_STR,60),'")',INTO=LINE
LESERV_ENVAR     DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_ERRC_SUB                                RS1004
         USING SUBOPT_ERRC,R4                                    RS1004
         STRING64 '      ERRCOUNT(',(SUBOPT_ERRC_COUNT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_ERRU_SUB                                RS1004
         USING SUBOPT_ERRU,R4                                    RS1004
         STRING64 '      ERRUNIT(',(SUBOPT_ERRU_COUNT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         STRING64 '      FILEHIST',INTO=LINE                     RS1004
         TM    OPTION_FILE_FLAG,X'80'                            RS1004
         JO    LESERV_FILEHIST                                   RS1004
         STRING64 '    NOFILEHIST',INTO=LINE                     RS1004
LESERV_FILEHIST  DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_FILT_SUB                                RS1004
         USING SUBOPT_FILT,R4                                    RS1004
         STRING64 '      FILETAG(AUTOCVT,',INTO=LINE             RS1004
         TM    SUBOPT_FILT_FLG,X'80'                             RS1004
         JO    LESERV_FILETAG1                                   RS1004
         STRING64 '      FILETAG(NOAUTOCVT,',INTO=LINE           RS1004
LESERV_FILETAG1  DS  0H                                          RS1004
         TM    SUBOPT_FILT_FLG,X'40'                             RS1004
         JO    LESERV_FILETAG2                                   RS1004
         STRING64 (LINE,,T),'NOAUTOTAG)',INTO=LINE               RS1004
         J     LESERV_FILETAG3                                   RS1004
LESERV_FILETAG2  DS  0H                                          RS1004
         STRING64 (LINE,,T),'AUTOTAG)',INTO=LINE                 RS1004
LESERV_FILETAG3  DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         STRING64 '      FLOW',INTO=LINE                         RS1004
         TM    OPTION_FLOW_FLAG,X'80'                            RS1004
         JO    LESERV_FLOW                                       RS1004
         STRING64 '    NOFLOW',INTO=LINE                         RS1004
LESERV_FLOW      DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_HEAP_SUB                                RS1004
         USING SUBOPT_HEAP,R4                                    RS1004
         STRING64 '      HEAP(',INTO=LINE                        RS1004
         STRING64 (LINE,,T),(SUBOPT_HEAP_INIT,F,L9B),INTO=LINE   RS1004
         STRING64 (LINE,,T),',',(SUBOPT_HEAP_INC,F,L9B),INTO=LINE
         TM    SUBOPT_HEAP_ALLOC,X'80'  Below                    RS1004
         JO    LESERV_HEAP1                                      RS1004
         STRING64 (LINE,,T),',ANYWHERE',INTO=LINE                RS1004
         J     LESERV_HEAP2                                      RS1004
LESERV_HEAP1        DS  0H                                       RS1004
         STRING64 (LINE,,T),',BELOW',INTO=LINE                   RS1004
LESERV_HEAP2        DS  0H                                       RS1004
         TM    SUBOPT_HEAP_ALLOC,X'40'  Free                     RS1004
         JO    LESERV_HEAP3                                      RS1004
         STRING64 (LINE,,T),',KEEP,',INTO=LINE                   RS1004
         J     LESERV_HEAP4                                      RS1004
LESERV_HEAP3        DS  0H                                       RS1004
         STRING64 (LINE,,T),',FREE,',INTO=LINE                   RS1004
LESERV_HEAP4        DS  0H                                       RS1004
         STRING64 (LINE,,T),(SUBOPT_HEAP24_INIT,F,L9B),INTO=LINE RS1004
         STRING64 (LINE,,T),',',(SUBOPT_HEAP24_INC,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_HCHK_SUB                                RS1004
         USING SUBOPT_HCHK,R4                                    RS1004
         STRING64 '      HEAPCHK(ON,',INTO=LINE                  RS1004
         TM    OPTION_HCHK_FLAG,X'80'                            RS1004
         JO    LESERV_HEAPCHECK                                  RS1004
         STRING64 '      HEAPCHK(OFF,',INTO=LINE                 RS1004
LESERV_HEAPCHECK  DS 0H                                          RS1004
         STRING64 (LINE,,T),(SUBOPT_HCHK_FREQ,F,L9B),INTO=LINE   RS1004
         STRING64 (LINE,,T),',',(SUBOPT_HCHK_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HCHK_CLVL,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HCHK_PLVL,F,L9B),INTO=LINE
         CLC   CEEOCB_VER,=H'20'        Version 20 ? z/OS R11    RS0310
         JL    LESERV_HEAPCHECKW                                 RS0310
         STRING64 (LINE,,T),',',(SUBOPT_HCHK_PENT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HCHK_PNUM,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HCHK_PENT31,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HCHK_PNUM31,F,L9B),INTO=LINE
LESERV_HEAPCHECKW DS 0H                                          RS0310
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_HEPP_SUB                                RS1004
         USING SUBOPT_HEPP,R4                                    RS1004
         STRING64 '      HEAPPOOLS(ON,',INTO=LINE                RS1004
         TM    OPTION_HEPP_FLAG,X'80'                            RS1004
         JO    LESERV_HEAPPOOLS                                  RS1004
         STRING64 '      HEAPPOOLS(OFF,',INTO=LINE               RS1004
LESERV_HEAPPOOLS  DS 0H                                          RS1004
         STRING64 (LINE,,T),(SUBOPT_HEPP_CP1S,F,L9B),INTO=LINE   RS1004
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP1P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP2S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP2P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP3S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP3P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP4S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP4P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP5S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP5P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP6S,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_HEPP_CP6P,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_INFO_SUB                                RS1004
         USING SUBOPT_INFO,R4                                    RS1004
         STRING64 '      INFOMSGFILTER(ON,',SUBOPT_INFO_ID1,INTO=LINE
         STRING64 (LINE,,T),',',SUBOPT_INFO_ID2,INTO=LINE        RS1004
         STRING64 (LINE,,T),',',SUBOPT_INFO_ID3,INTO=LINE        RS1004
         STRING64 (LINE,,T),',',SUBOPT_INFO_ID4,INTO=LINE        RS1004
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         TM    OPTION_INFO_FLAG,X'80'                            RS1004
         JO    LESERV_INFOMSGFILTER                              RS1004
         STRING64 '      INFOMSGFILTER(OFF,',SUBOPT_INFO_ID1,INTO=LINE
         STRING64 (LINE,,T),',',SUBOPT_INFO_ID2,INTO=LINE        RS1004
         STRING64 (LINE,,T),',',SUBOPT_INFO_ID3,INTO=LINE        RS1004
         STRING64 (LINE,,T),',',SUBOPT_INFO_ID4,INTO=LINE        RS1004
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
LESERV_INFOMSGFILTER DS 0H                                       RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         STRING64 '      INQPCOPN',INTO=LINE                     RS1004
         TM    OPTION_INQP_FLAG,X'80'                            RS1004
         JO    LESERV_INQPCOPN                                   RS1004
         STRING64 '    NOINQPCOPN',INTO=LINE                     RS1004
LESERV_INQPCOPN  DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         STRING64 '      INTERRUPT(ON)',INTO=LINE                RS1004
         TM    OPTION_INTE_FLAG,X'80'                            RS1004
         JO    LESERV_INTERRUPT                                  RS1004
         STRING64 '      INTERRUPT(OFF)',INTO=LINE               RS1004
LESERV_INTERRUPT DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         CLC   OPTION_LIBR_WHSET,=H'0'   Gone with z/OS R6
         JE    LESERV_NOLIBRARY
         LR    R4,R3                                             RS1004
         A     R4,OPTION_LIBR_SUB                                RS1004
         USING SUBOPT_LIBR,R4                                    RS1004
         STRING64 '      LIBRARY(',SUBOPT_LIBR_LM,')',INTO=LINE  RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
LESERV_NOLIBRARY DS  0H                                          RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_LIBS_SUB                                RS1004
         USING SUBOPT_LIBS,R4                                    RS1004
         STRING64 '      LIBSTACK(',(SUBOPT_LIBS_INIT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_LIBS_INC,F,L9B),INTO=LINE
         TM    SUBOPT_LIBS_ALLOC,X'40'  Free?                    RS1004
         JO    LESERV_LIBSTACK1                                  RS1004
         STRING64 (LINE,,T),',KEEP)',INTO=LINE                   RS1004
         J     LESERV_LIBSTACK2                                  RS1004
LESERV_LIBSTACK1    DS  0H                                       RS1004
         STRING64 (LINE,,T),',FREE)',INTO=LINE                   RS1004
LESERV_LIBSTACK2    DS  0H                                       RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_MSGF_SUB                                RS1004
         USING SUBOPT_MSGF,R4                                    RS1004
         STRING64 '      MSGFILE(',SUBOPT_MSGF_DD,INTO=LINE      RS1004
         STRING64 (LINE,,T),',',SUBOPT_MSGF_RFM,INTO=LINE        RS1004
         STRING64 (LINE,,T),',',(SUBOPT_MSGF_RECL,F,L9B),INTO=LINE
         STRING64 (LINE,,T),',',(SUBOPT_MSGF_BLKS,F,L9B),INTO=LINE
         CLC   SUBOPT_MSGF_ENQ,BLANKS                            RS1004
         JE    LESERV_MSGFILE1                                   RS1004
         STRING64 (LINE,,T),',ENQ)',INTO=LINE                    RS1004
         J     LESERV_MSGFILE2                                   RS1004
LESERV_MSGFILE1  DS  0H                                          RS1004
         STRING64 (LINE,,T),',NOENQ)',INTO=LINE                  RS1004
LESERV_MSGFILE2  DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_MSGQ_SUB                                RS1004
         USING SUBOPT_MSGQ,R4                                    RS1004
         STRING64 '      MSGQ(',(SUBOPT_MSGQ_COUNT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_NATL_SUB                                RS1004
         USING SUBOPT_NATL,R4                                    RS1004
         STRING64 '      NATLANG(',SUBOPT_NATL_ID,')',INTO=LINE  RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         STRING64 '      OCSTATUS',INTO=LINE                     RS1004
         TM    OPTION_OCST_FLAG,X'80'                            RS1004
         JO    LESERV_OCSTATUS                                   RS1004
         STRING64 '    NOOCSTATUS',INTO=LINE                     RS1004
LESERV_OCSTATUS  DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         CLC   CEEOCB_VER,=H'22'        Version 22 ? z/OS R13    RS0113
         JL    LESERV_PGFRSX                                     RS0113
         LR    R4,R3                                             RS0113
         A     R4,OPTION_PAGEFRSIZE_SUB                          RS0113
         USING SUBOPT_PAGEFRSIZE,R4                              RS0113
         MVC   WKCELL1(2),=C'4K'
         CLC   SUBOPT_PAGEFRSIZE_HEAP,=H'1'
         JE    LESERV_PGFRS1                no leave             RS0113
         MVC   WKCELL1(2),=C'1M'
LESERV_PGFRS1  DS 0H                                             RS0407
         MVC   WKCELL1+2(2),=C'4K'
         CLC   SUBOPT_PAGEFRSIZE_ANYHEAP,=H'1'
         JE    LESERV_PGFRS2                no leave             RS0113
         MVC   WKCELL1+2(2),=C'1M'
LESERV_PGFRS2  DS 0H                                             RS0407
         MVC   WKCELL1+4(2),=C'4K'
         CLC   SUBOPT_PAGEFRSIZE_STACK,=H'1'
         JE    LESERV_PGFRS3                no leave             RS0113
         MVC   WKCELL1+4(2),=C'1M'
LESERV_PGFRS3  DS 0H                                             RS0407
         STRING64 '      PAGEFRAMSIZE(',(WKCELL1,2),                   X
               ',',(WKCELL1+2,2),',',                                  X
               (WKCELL1+4,2),')',                                      X
               INTO=LINE                                         RS0113
         BRASL R14,SPACE1                                        RS0113
LESERV_PGFRSX  DS 0H                                             RS0407
         STRING64 '      PC',INTO=LINE                           RS1004
         TM    OPTION_PC_FLAG,X'80'                              RS1004
         JO    LESERV_PC                                         RS1004
         STRING64 '    NOPC',INTO=LINE                           RS1004
LESERV_PC        DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_PLIT_SUB                                RS1004
         USING SUBOPT_PLIT,R4                                    RS1004
         STRING64 '      PLITASKCOUNT(',(SUBOPT_PLIT_COUNT,F,L9B),     X X
               INTO=LINE                                         RS1004
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         STRING64 '      POSIX(ON)',INTO=LINE                    RS1004
         TM    OPTION_POSI_FLAG,X'80'                            RS1004
         JO    LESERV_POSIX                                      RS1004
         STRING64 '      POSIX(OFF)',INTO=LINE                   RS1004
LESERV_POSIX     DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_PROF_SUB                                RS1004
         USING SUBOPT_PROF,R4                                    RS1004
         STRING64 '      PROFILE(ON',INTO=LINE                   RS1004
         TM    OPTION_PROF_FLAG,X'80'                            RS1004
         JO    LESERV_PROFILE                                    RS1004
         STRING64 '      PROFILE(OFF',INTO=LINE                  RS1004
LESERV_PROFILE   DS  0H                                          RS1004
         CLC   SUBOPT_PROF_STRL,=H'0'                            RS1004
         JE    LESERV_PROFILE1                                   RS1004
         LH    R2,SUBOPT_PROF_STRL                               RS1004
         STRING64 (LINE,,T),',"',(SUBOPT_PROF_STR,(R2)),'")',INTO=LINE
         J     LESERV_PROFILE9                                   RS1004
LESERV_PROFILE1  DS  0H                                          RS1004
         STRING64 (LINE,,T),',"")',INTO=LINE                     RS1004
LESERV_PROFILE9  DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_PRTU_SUB                                RS1004
         USING SUBOPT_PRTU,R4                                    RS1004
         STRING64 '      PRTUNIT(',(SUBOPT_PRTU_COUNT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_PUNU_SUB                                RS1004
         USING SUBOPT_PUNU,R4                                    RS1004
         STRING64 '      PUNUNIT(',(SUBOPT_PUNU_COUNT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_RDRU_SUB                                RS1004
         USING SUBOPT_RDRU,R4                                    RS1004
         STRING64 '      RDRUNIT(',(SUBOPT_RDRU_COUNT,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_RECP_SUB                                RS1004
         USING SUBOPT_RECP,R4                                    RS1004
         STRING64 '      RECPAD(OFF)',INTO=LINE                  RS1004
         CLC   SUBOPT_RECP_FLG,=F'4'                             RS1004
         JE    LESERV_RECPAD                                     RS1004
         STRING64 '      RECPAD(ON)',INTO=LINE                   RS1004
         CLC   SUBOPT_RECP_FLG,=F'2'                             RS1004
         JE    LESERV_RECPAD                                     RS1004
         STRING64 '      RECPAD(VAR)',INTO=LINE                  RS1004
LESERV_RECPAD    DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         STRING64 '      RPTOPTS(ON)',INTO=LINE                  RS1004
         TM    OPTION_RPTO_FLAG,X'80'                            RS1004
         JO    LESERV_RPTOPTS                                    RS1004
         STRING64 '      RPTOPTS(OFF)',INTO=LINE                 RS1004
LESERV_RPTOPTS   DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         STRING64 '      RPTSTG(ON)',INTO=LINE                   RS1004
         TM    OPTION_RPTS_FLAG,X'80'                            RS1004
         JO    LESERV_RPTSTG                                     RS1004
         STRING64 '      RPTSTG(OFF)',INTO=LINE                  RS1004
LESERV_RPTSTG    DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         STRING64 '      RTEREUS',INTO=LINE                      RS1004
         TM    OPTION_RTER_FLAG,X'80'                            RS1004
         JO    LESERV_RTEREUS                                    RS1004
         STRING64 '    NORTEREUS',INTO=LINE                      RS1004
LESERV_RTEREUS   DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         CLC   OPTION_RTLS_WHSET,=H'0'   Gone with z/OS R6
         JE    LESERV_NORTLS
         STRING64 '      RTLS(ON)',INTO=LINE                     RS1004
         TM    OPTION_RTLS_FLAG,X'80'                            RS1004
         JO    LESERV_RTLS                                       RS1004
         STRING64 '      RTLS(OFF)',INTO=LINE                    RS1004
LESERV_RTLS      DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
LESERV_NORTLS    DS  0H                                          RS1004
         STRING64 '      SIMVRD',INTO=LINE                       RS1004
         TM    OPTION_SIMV_FLAG,X'80'                            RS1004
         JO    LESERV_SIMVRD                                     RS1004
         STRING64 '    NOSIMVRD',INTO=LINE                       RS1004
LESERV_SIMVRD    DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_STAC_SUB                                RS1004
         USING SUBOPT_STAC,R4                                    RS1004
         STRING64 '      STACK(',INTO=LINE                       RS1004
         STRING64 (LINE,,T),(SUBOPT_STAC_INIT,F,L9B),INTO=LINE   RS1004
         STRING64 (LINE,,T),',',(SUBOPT_STAC_INC,F,L9B),INTO=LINE
         TM    SUBOPT_STAC_ALLOC,X'80'  Below                    RS1004
         JO    LESERV_STACK1                                     RS1004
         STRING64 (LINE,,T),',ANYWHERE',INTO=LINE                RS1004
         J     LESERV_STACK2                                     RS1004
LESERV_STACK1       DS  0H                                       RS1004
         STRING64 (LINE,,T),',BELOW',INTO=LINE                   RS1004
LESERV_STACK2       DS  0H                                       RS1004
         TM    SUBOPT_STAC_ALLOC,X'40'  Free                     RS1004
         JO    LESERV_STACK3                                     RS1004
         STRING64 (LINE,,T),',KEEP,',INTO=LINE                   RS1004
         J     LESERV_STACK4                                     RS1004
LESERV_STACK3       DS  0H                                       RS1004
         STRING64 (LINE,,T),',FREE,',INTO=LINE                   RS1004
LESERV_STACK4       DS  0H                                       RS1004
         STRING64 (LINE,,T),(SUBOPT_STAC_DINIT,F,L9B),INTO=LINE  RS1004
         STRING64 (LINE,,T),',',(SUBOPT_STAC_DINC,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_STOR_SUB                                RS1004
         USING SUBOPT_STOR,R4                                    RS1004
         STRING64 '      STORAGE(',INTO=LINE                     RS1004
         TM    SUBOPT_STOR_CSF,X'80'                             RS0407
         JO    LESERV_STORAGE1                                   RS0407
         STRING64 (LINE,,T),'NONE,',INTO=LINE                    RS1004
         JNE   LESERV_STORAGE2                                   RS1004
LESERV_STORAGE1        DS  0H                                    RS1004
         STRING64 (LINE,,T),(SUBOPT_STOR_AHSC,1,X),',',INTO=LINE RS1004
LESERV_STORAGE2        DS  0H                                    RS1004
         TM    SUBOPT_STOR_CSF,X'40'                             RS0407
         JO    LESERV_STORAGE3                                   RS0407
         STRING64 (LINE,,T),'NONE,',INTO=LINE                    RS1004
         JNE   LESERV_STORAGE4                                   RS1004
LESERV_STORAGE3        DS  0H                                    RS1004
         STRING64 (LINE,,T),(SUBOPT_STOR_FHSC,1,X),',',INTO=LINE RS1004
LESERV_STORAGE4        DS  0H                                    RS1004
         TM    SUBOPT_STOR_CSF,X'20'                             RS0407
         JO    LESERV_STORAGE5                                   RS0407
         STRING64 (LINE,,T),'NONE,',INTO=LINE                    RS1004
         JNE   LESERV_STORAGE6                                   RS1004
LESERV_STORAGE5        DS  0H                                    RS1004
         STRING64 (LINE,,T),(SUBOPT_STOR_ADSC,1,X),',',INTO=LINE RS1004
LESERV_STORAGE6        DS  0H                                    RS1004
         STRING64 (LINE,,T),(SUBOPT_STOR_SOSSZ,F,L9B),INTO=LINE  RS1004
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_TERM_SUB                                RS1004
         USING SUBOPT_TERM,R4                                    RS1004
         STRING64 '      TERMTHDACT(QUIET,',INTO=LINE            RS0307
         CLC   SUBOPT_TERM_FLG,=F'8'
         JE    LESERV_TERMTHDACT1
         STRING64 '      TERMTHDACT(MSG,',INTO=LINE              RS0307
         CLC   SUBOPT_TERM_FLG,=F'4'
         JE    LESERV_TERMTHDACT1
         STRING64 '      TERMTHDACT(TRACE,',INTO=LINE            RS0307
         CLC   SUBOPT_TERM_FLG,=F'2'
         JE    LESERV_TERMTHDACT1
         STRING64 '      TERMTHDACT(DUMP,',INTO=LINE
LESERV_TERMTHDACT1     DS  0H                                    RS0307
         TM    SUBOPT_TERM_CESE,X'80'     CESE                   RS0307
         JNO   LESERV_TERMTHDACT2                                RS0307
         STRING64 (LINE,,T),'CESE',INTO=LINE                     RS0307
         J     LESERV_TERMTHDACT3                                RS0307
LESERV_TERMTHDACT2     DS  0H                                    RS0307
         TM    SUBOPT_TERM_CESE,X'40'     CICSDDS                RS0307
         JNO   LESERV_TERMTHDACT3                                RS0307
         STRING64 (LINE,,T),'CICSDDS',INTO=LINE                  RS0307
LESERV_TERMTHDACT3     DS  0H                                    RS0307
         STRING64 (LINE,,T),',',(SUBOPT_TERM_STOR,H,L3B),')',INTO=LINE
         BRASL R14,SPACE1
LESERV_TERMX   DS 0H                                             RS0407
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_TEST_SUB                                RS1004
         USING SUBOPT_TEST,R4                                    RS1004
         STRING64 '      TEST(',INTO=LINE                        RS1004
         TM    OPTION_TEST_FLAG,X'80'                            RS1004
         JO    LESERV_TEST                                       RS1004
         STRING64 '    NOTEST(',INTO=LINE                        RS1004
LESERV_TEST      DS  0H                                          RS1004
         CLC   SUBOPT_TEST_OPT,=F'4'                             RS1004
         JNE   LESERV_TEST1                                      RS1004
         STRING64 (LINE,,T),'ALL,',INTO=LINE                     RS1004
         J     LESERV_TEST3                                      RS1004
LESERV_TEST1     DS  0H                                          RS1004
         CLC   SUBOPT_TEST_OPT,=F'2'                             RS1004
         JNE   LESERV_TEST3                                      RS1004
         STRING64 (LINE,,T),'ERROR,',INTO=LINE                   RS1004
         BRASL R14,SPACE1                                        RS1004
         J     LESERV_TEST3                                      RS1004
LESERV_TEST2     DS  0H                                          RS1004
         STRING64 (LINE,,T),'NONE,',INTO=LINE                    RS1004
LESERV_TEST3     DS  0H                                          RS1004
         STRING64 (LINE,,T),SUBOPT_TEST_CF,INTO=LINE             RS1004
         STRING64 (LINE,,T),',',SUBOPT_TEST_CL,INTO=LINE         RS1004
         STRING64 (LINE,,T),',',SUBOPT_TEST_PF,INTO=LINE         RS1004
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_THRH_SUB                                RS1004
         USING SUBOPT_THRH,R4                                    RS1004
         STRING64 '      THREADHEAP(',INTO=LINE                  RS1004
         STRING64 (LINE,,T),(SUBOPT_THRH_INIT,F,L9B),INTO=LINE   RS1004
         STRING64 (LINE,,T),',',(SUBOPT_THRH_INC,F,L9B),INTO=LINE
         TM    SUBOPT_THRH_ALLOC,X'80'  Below                    RS1004
         JO    LESERV_THREADHEAP1                                RS1004
         STRING64 (LINE,,T),',ANYWHERE',INTO=LINE                RS1004
         J     LESERV_THREADHEAP2                                RS1004
LESERV_THREADHEAP1     DS  0H                                    RS1004
         STRING64 (LINE,,T),',BELOW',INTO=LINE                   RS1004
LESERV_THREADHEAP2     DS  0H                                    RS1004
         TM    SUBOPT_THRH_ALLOC,X'40'  Free                     RS1004
         JO    LESERV_THREADHEAP3                                RS1004
         STRING64 (LINE,,T),',KEEP)',INTO=LINE                   RS1004
         J     LESERV_THREADHEAP4                                RS1004
LESERV_THREADHEAP3     DS  0H                                    RS1004
         STRING64 (LINE,,T),',FREE)',INTO=LINE                   RS1004
LESERV_THREADHEAP4     DS  0H                                    RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS0606
         A     R4,OPTION_THRS_SUB                                RS0606
         USING SUBOPT_THRS,R4                                    RS0606
         STRING64 '      THREADSTACK(',INTO=LINE                 RS0606
         STRING64 (LINE,,T),(SUBOPT_THRS_INIT,F,L9B),INTO=LINE   RS0606
         STRING64 (LINE,,T),',',(SUBOPT_THRS_INC,F,L9B),INTO=LINE
         TM    SUBOPT_THRS_ALLOC,X'80'  Below                    RS0606
         JO    LESERV_THREADSTACK1                               RS0606
         STRING64 (LINE,,T),',ANYWHERE',INTO=LINE                RS0606
         J     LESERV_THREADSTACK2                               RS0606
LESERV_THREADSTACK1     DS  0H                                   RS0606
         STRING64 (LINE,,T),',BELOW',INTO=LINE                   RS0606
LESERV_THREADSTACK2     DS  0H                                   RS0606
         TM    SUBOPT_THRS_ALLOC,X'40'  Free                     RS0606
         JO    LESERV_THREADSTACK3                               RS0606
         STRING64 (LINE,,T),',KEEP)',INTO=LINE                   RS0606
         J     LESERV_THREADSTACK4                               RS0606
LESERV_THREADSTACK3     DS  0H                                   RS0606
         STRING64 (LINE,,T),',FREE)',INTO=LINE                   RS0606
LESERV_THREADSTACK4     DS  0H                                   RS0606
         LR    R4,R3                                             RS1004
         A     R4,OPTION_TRAC_SUB                                RS1004
         USING SUBOPT_TRAC,R4                                    RS1004
         STRING64 '      TRACE(ON,',INTO=LINE                    RS1004
         TM    OPTION_TRAP_FLAG,X'80'                            RS1004
         JO    LESERV_TRACE                                      RS1004
         STRING64 '      TRACE(OFF,',INTO=LINE                   RS1004
LESERV_TRACE           DS  0H                                    RS1004
         STRING64 (LINE,,T),(SUBOPT_TRAC_SIZE,F,L9B),INTO=LINE   RS1004
         TM    SUBOPT_TRAC_FLG1,X'80'       DUMP                 RS1004
         JO    LESERV_TRACE1                                     RS1004
         STRING64 (LINE,,T),',NODUMP,',INTO=LINE                 RS1004
         JO    LESERV_TRACE2                                     RS1004
LESERV_TRACE1          DS  0H                                    RS1004
         STRING64 (LINE,,T),',DUMP,',INTO=LINE                   RS1004
LESERV_TRACE2          DS  0H                                    RS1004
         STRING64 (LINE,,T),'LE=',(SUBOPT_TRAC_GFLG,F,L9B),INTO=LINE
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_TRAP_SUB                                RS1004
         USING SUBOPT_TRAP,R4                                    RS1004
         STRING64 '      TRAP(ON,',INTO=LINE                     RS1004
         TM    OPTION_TRAP_FLAG,X'80'                            RS1004
         JO    LESERV_TRAP1                                      RS1004
         STRING64 '      TRAP(OFF,',INTO=LINE                    RS1004
LESERV_TRAP1           DS  0H                                    RS1004
         TM    SUBOPT_TRAP_FLG,X'80'   SPIE ?                    RS1004
         JO    LESERV_TRAP2                                      RS1004
         STRING64 (LINE,,T),'NOSPIE)',INTO=LINE                  RS1004
         J     LESERV_TRAP3                                      RS1004
LESERV_TRAP2           DS  0H                                    RS1004
         STRING64 (LINE,,T),'SPIE)',INTO=LINE                    RS1004
LESERV_TRAP3           DS  0H                                    RS1004
         STRING64 (LINE,,T),'            ** via PARM **',INTO=LINE
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_UPSI_SUB                                RS1004
         USING SUBOPT_UPSI,R4                                    RS1004
         STRING64 '      UPSI(',SUBOPT_UPSI_SW,')',INTO=LINE     RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_USRH_SUB                                RS1004
         USING SUBOPT_USRH,R4                                    RS1004
         STRING64 '      USRHDLR(',SUBOPT_USRH_UN1,INTO=LINE     RS1004
         TM    OPTION_USRH_FLAG,X'80'                            RS1004
         JO    LESERV_USRHDLR                                    RS1004
         STRING64 '    NOUSRHDLR(',SUBOPT_USRH_UN1,INTO=LINE     RS1004
LESERV_USRHDLR         DS  0H                                    RS1004
         STRING64 (LINE,,T),',',SUBOPT_USRH_UN2,INTO=LINE        RS1004
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
         STRING64 '      VCTRSAVE(ON)',INTO=LINE                 RS1004
         TM    OPTION_VCTR_FLAG,X'80'                            RS1004
         JO    LESERV_VCTRSAVE                                   RS1004
         STRING64 '      VCTRSAVE(OFF)',INTO=LINE                RS1004
LESERV_VCTRSAVE  DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         CLC   OPTION_VERS_WHSET,=H'0'   Gone with z/OS R6
         JE    LESERV_NOLIBRARY
         LR    R4,R3                                             RS1004
         A     R4,OPTION_VERS_SUB                                RS1004
         USING SUBOPT_VERS,R4                                    RS1004
         STRING64 '      VERSION(',SUBOPT_VERS_LM,INTO=LINE      RS1004
         STRING64 (LINE,,T),')',INTO=LINE                        RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
LESERV_NOVERSION DS  0H                                          RS1004
         STRING64 '      XPLINK(ON)',INTO=LINE                   RS1004
         TM    OPTION_XPLI_FLAG,X'80'                            RS1004
         JO    LESERV_XPLINK                                     RS1004
         STRING64 '      XPLINK(OFF)',INTO=LINE                  RS1004
LESERV_XPLINK    DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         LR    R4,R3                                             RS1004
         A     R4,OPTION_XUFL_SUB                                RS1004
         USING SUBOPT_XUFL,R4                                    RS1004
         STRING64 '      XUFLOW(OFF)',INTO=LINE                  RS1004
         CLC   OPTION_XUFL_FLAG,=F'4'                            RS1004
         JE    LESERV_XUFLOW                                     RS1004
         STRING64 '      XUFLOW(ON)',INTO=LINE                   RS1004
         CLC   OPTION_XUFL_FLAG,=F'2'                            RS1004
         JE    LESERV_XUFLOW                                     RS1004
         STRING64 '      XUFLOW(AUTO)',INTO=LINE                 RS1004
LESERV_XUFLOW    DS  0H                                          RS1004
         BRASL R14,SPACE1                                        RS1004
         DROP  R4                                                RS1004
*        LR    R13,R1                                            RS0406
         J     LESERV99                 end                      RS1004
LESERV97 DS    0H                                                RS1004
         STRING64 '    CEEOCB Version not valid: ',(8(R3),2,X),        X
               INTO=LINE
         BRASL R14,SPACE1                                        RS1004
         J     LESERV99                                          RS1004
LESERV98 DS    0H                                                RS1004
         STRING64 '    Eyecatcher CEEOCB not valid: ',(0(R3),8),       X
               INTO=LINE
         BRASL R14,SPACE1                                        RS1004
LESERV99 DS 0H                                                   RS1004
         LR    R13,R1                                            RS0406
         ST    R10,0(R5)                Display goes here        RS1004
*                                                                DA0701
** Return to caller                                              DA0701
*                                                                DA0701
LESERVX  DS    0H                                                DA0701
         CEETERM  RC=0,MODIFIER=0       LE exit housekeeping     DA0701
*---------------------------------------------------------------------*
*        Bump line pointer                                            *
*---------------------------------------------------------------------*
SPACE2   LA    R10,LINE+L'LINE         Double Space
BLANK1   MVC   LINE,BLANKS             Blank Line
SPACE1   LA    R10,LINE+L'LINE         Next Line
         BR    R14
*---------------------------------------------------------------------*
*        SNAP ROUTINE    R0=LENGTH,R1=ADDRESS                         *
*---------------------------------------------------------------------*
SNAP00   DS    0H
         SLR   R15,R15                 offset=0000
         STM   R14,R15,SNAPREGS+24     return address
         STRING64 '0-3 ',(SNAPREGS+08,4,X),1X,(SNAPREGS+12,4,X),       X
               1X,(SNAPREGS+16,4,X),1X,(SNAPREGS+20,4,X),              X
               '  4-7 ',((R4),,X),1X,((R5),,X),                        X
               1X,((R6),,X),1X,((R7),,X),INTO=LINE
         BRASL R14,SPACE1          <== next line
         STRING64 '8-B ',((R8),,X),1X,((R9),,X),1X,((R10),,X),         X
               1X,((R11),,X),'  C-F ',((R12),,X),1X,((R13),,X),        X
               1X,(SNAPREGS+00,4,X),1X,(SNAPREGS+04,4,X),INTO=LINE
         BRASL R14,SPACE1           <== next line
*LOOP
SNAP11   L     R14,SNAPREGS+24         return address
         LTR   R0,R0                   # OF REMAINING BYTES
         BNPR  R14                     FINISHED, QUIT
         STRING64 '  +',(SNAPREGS+30,2,X),1X,((R1),,X),3X,36X,'   *',  X
               16X,'*',INTO=LINE
         LA    R14,16                  # of bytes on a line
         AL    R14,SNAPREGS+28         increment offset
         ST    R14,SNAPREGS+28         increment offset
*
         LA    R14,16                  # of chars on a line
         CLR   R14,R0                  is this a short line?
         JL    *+6                     no, jump
         LR    R14,R0                  truncate last line
         BCTR  R14,0                   FOR EX
         EX    R14,=S(X'200'(R13),59(R10),0(R1)) Excecute MOVE FIELD
*        MVC   LINE+59(*-*),0(R1)      MOVE FIELD
         TR    LINE+59(16),TRTPRINT
*
         LA    R2,LINE+19              start of hex data
         BRASL R14,SNAP33              edit 4 bytes
         BRASL R14,SNAP33              edit 4 bytes
         LA    R2,1(,R2)               2-byte margin
         BRASL R14,SNAP33              edit 4 bytes
         BRASL R14,SNAP33              edit 4 bytes
         BRASL R14,SPACE1          <== next line
         J     SNAP11                  snap next line
*ENDLOOP
*
SNAP33   LTR   R0,R0                   # OF REMAINING BYTES
         BNPR  R14                     FINISHED, QUIT
         UNPK  0(9,R2),0(5,R1)         translate to hex
         L     R15,=A(@STRHEXT-240)    (from STRING64 macro)
         TR    0(8,R2),0(R15)          translate to hex
         AHI   R0,-4
         LA    R1,4(,R1)               ptr in input area
         MVI   8(R2),C' '
         LA    R2,9(,R2)               ptr in output line
         BR    R14
         STRING64 (GENERATE,AR_MODE)
         LTORG ,                                                 DA0701
*                                                                DA0701
** LE areas                                                      DA0701
*                                                                DA0701
LESERVM  CEEPPA ,              Constants describing the code block
*-Dynamic Save area for LE/370                                   DA0701
         CEEDSA ,                 Mapping of the dynamic save area
SAVEAREA DS    36F                144 Bytes Saveare for STRING64
LESERVP  DS    4F                 Parameter list                 DA0701
LESERVF  DS    XL12               Feedback area                  DA0701
SNAPREGS DS    A(14,15,0,1,2,3,14,15)
WKCELL1  DS    D                                                 RS0513
BLANKS   DS    CL(L'LINE)              A BUNCH OF BLANKS
TRTPRINT DS    XL256                   printable characters
LESERVDS EQU   *-CEEDSA                                          DA0701
         CEEEDB ,
         CEEOCBRS ,
         DSECT
LINE     DS    CL&LINESIZE             CURRENT LINE
.LESERVX ANOP  ,                                                 DA0701
         END
